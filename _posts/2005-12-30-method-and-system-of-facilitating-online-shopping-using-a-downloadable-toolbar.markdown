---

title: Method and system of facilitating on-line shopping using a downloadable toolbar
abstract: A method of modifying an Internet browser interface to provide shopping assistant functionality facilitating on-line shopping at a supported merchant Internet site. A wallet created in accordance with the present invention comprises a database having various user data stored therein under certain predetermined field names. A supported merchant data file identifies a plurality of supported merchants and enables the modified browser interface to determine when a shopper has navigated to a supported merchant web site. For each supported merchant, a rules and mapping file is created that may be used in connection with the wallet to map user-provided information in the wallet to corresponding fields in the merchant's check-out web page. When a user navigates to a supported merchant web site and desires to purchase merchandise and/or services from that merchant, the wallet automatically fills out the merchant's check-out web page(s), thereby simplifying on-line shopping and particularly, the check-out process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09324080&OS=09324080&RS=09324080
owner: YAHOO! INC.
number: 09324080
owner_city: Sunnyvale
owner_country: US
publication_date: 20051230
---
This application is a Divisional of U.S. patent application Ser. No. 10 015 816 which is a Continuation In Part of U.S. patent application Ser. No. 09 429 585 filed on Oct. 28 1999 currently pending.

The present invention is directed to a method and system of facilitating on line shopping using an Internet browser.

When accessing the Internet i.e. the worldwide web the web etc. an Internet user typically launches or activates via a computer a browser software program such as for example Netscape Navigator or Microsoft Internet Explorer . The browser program also referred to herein as a browser establishes a physical link to the Internet via a modem and an Internet Service Provider ISP for example and also provides a textual and graphical user interface i.e. a browser interface having a predetermined look and functionality neither of which can currently be significantly changed by the Internet user. Thus the browser interface remains relatively static as the Internet user navigates the Internet moving from web site to web site application to application or HTML Hyper text Mark up Language page to HTML page.

Limited control of the browser interface is currently available via an executable software program that may for example add functional buttons to the browser interface. However the additional functionality is added to the browser interface when the browser is initially activated and remains static thereafter. Thus it is not possible for a browser displaying a browser interface modified as just described to dynamically download information from an Internet site and customize itself either when the browser is initiated or as the users navigates the Internet. Such a modified browser interface also does not provide access to the various browser Application Programming Interfaces APIs for Plug ins and interfaces. It is thus desirable to provide a method for modifying a browser interface and to provide a browser interface that overcomes the above described shortcomings of the prior art.

The proliferation of Internet sites makes it increasingly difficult for content providers i.e. owners of Internet sites to maximize the time an Internet user spends at a particular Internet site. It is of course desirable for a content provider to be able to maximize the time an Internet user spends at that provider s Internet site or to ensure that an Internet user returns to the content provider s site this being generally referred to in the art as stickiness. Many business models for companies providing Internet sites are based at least in part on revenue derived from advertising. The more likely a user is to remain at or return to an Internet site the more likely that user is to see ads displayed at that site. Consequently the company providing that Internet site may be able to charge more for ads on its web pages.

It is also desirable to maximize the number of Internet users accessing a content provider s site. Briefly stated an Internet content provider wants to attract a maximum number of Internet users to that provider s Internet site and to maximize the amount of time those Internet users remain at that site neither of which is possible using current Internet browsers.

Of the many benefits of the Internet on line shopping provides distinct advantages over traditional shopping. Obviously the ability to easily visit a multitude of merchant web sites browse their respective merchandise compare prices and place orders from home or office and in a relatively short period of time saves the on line shopper time and money. In addition shoppers who may find it difficult to visit a number of stores due to weather lack of proximately located stores or for whatever reason now have an almost unlimited number of stores and merchandise available at their fingertips.

The on line shopping experience is relatively quick. A shopper may navigate from merchant site to merchant site browse merchandise and select and place items in an electronic shopping cart all with a few mouse clicks. However the check out process remains relatively time consuming and labor intensive. Once a shopper has finished shopping the check out process may be initiated by selecting a Check Out option on the merchant s web site. The shopper is then typically required to fill in various personal data including name billing and shipping address credit card number etc. The shopper has to repeatedly provide that information to each merchant to complete an on line shopping transaction which increases the likelihood of error by the shopper in providing the information and slows the on line shopping process.

The present invention is directed to a method of dynamically controlling an Internet browser interface and to a dynamically controllable browser interface. In an embodiment of the present invention a shopping assistant button and shopping assistant functionality is added to the browser interface and available to a user e.g. an on line shopper to provide a faster and more accurate on line shopping process.

The present invention is also directed to a method of increasing the number of times an Internet user accesses a predetermined Internet site and to a method of increasing the amount of time an Internet user spends at a predetermined Internet site.

As used herein the term controlling and controllable refer to by way of non limiting example adding to removing from and modifying an Internet browser interface. An Internet browser interface as referred to herein means the visual or aural presentation presented to a browser user and via which a user interacts with the browser. The term customize and variations thereof may also be used herein to describe the controllability provided in accordance with the present invention. As used herein the term dynamically controlling and variations thereof refers to a method by which a part of an Internet browser interface i.e. an interface object may be displayed and periodically changed or updated while a browser displaying the interface object is activated.

A browser as used herein is given its general art recognized meaning and generally refers to a software program that provides an interface to the World Wide Web or Internet. The browser enables an Internet user to navigate the Internet and establish a connection to various Internet sites and view the web page s provided at the various Internet sites by content providers. A browser is specifically capable of calling an ActiveX control or Plug in via an Internet site. The browser also enables an Internet user to navigate between and among Internet sites i.e. to surf the web. The browser provides a browser interface to the Internet user that is formatted by the provider of the browser software program. The browser interface typically defines the layout e.g. color size number and location and functionality provided by the browser to the Internet user. The browser interface may comprise a first parent window that typically defines the general size color and layout of the browser interface and includes window control buttons e.g. minimize close etc. . The browser interface may also comprise a second parent window a child to the first parent window and one or more windows dependent from the second parent i.e. children . The second parent and its dependent windows may provide for example various information e.g. advertisements coupons news HTML links etc. and functionality i.e. toolbars pull down menus Plug ins applications etc. to the Internet user.

An ActiveX control as used herein refers to a tool for linking desktop applications for the Internet and is based on art recognized Microsoft developed specifications. A Plug in as used herein refers to a type of program developed for use with Netscape browsers and that integrates with a larger application e.g. a browser software program to add a specific functionality or capability to that larger program. An ActiveX control and a Plug in as described above and as referred to herein may be used with any Internet browser.

As used herein the term Internet site refers to a location i.e. node on the Internet defined by an Internet address or URL uniform or universal resource locator . As used herein the term Internet web page refers to a collection of hypertext markup language HTML commands provided at an Internet site and that provide formatting information for the text graphics and functionality to create a hypertext document that may be displayed on an Internet user s computer display via a browser. For example an Internet user enters a URL to establish a connection to an Internet site and that Internet site provides HTML commands to the user s browser to enable display of that Internet site s web page on the user s computer display. The browser interprets hypertext markup language HTML commands embedded in a web page and uses the HTML commands to format the text and graphics for that web page.

The present invention provides advantages to an Internet user an Internet content provider and to an Internet Service Provider ISP . For an Internet user the present invention provides a method of dynamically controlling or customizing that user s Internet browser interface. The Internet user may now customize the browser interface so that each time the user accesses the Internet using a browser user defined information and or functionality also collectively referred to herein as information will be displayed with the browser interface. For example the user may include bookmarks address and phone books personal financial information personalized news and various functionality such as is available via ActiveX control and Plug ins.

In addition if an Internet user has an account with a content provider that user s specific account information e.g. investment portfolio news headlines bookmarks address book etc. may now be dynamically displayed with the browser interface by the browser. Currently an Internet user can only access that user s specific account information while connected to the content provider s Internet site. The user must return to the content provider s site to receive updated account information. The account information is not displayed with the browser interface once user leaves that Internet site. The present invention provides a method of dynamically controlling and a dynamically controllable browser interface that enables an Internet user to display with the browser interface and continuously update information and or functionality specific to that user.

For a content provider the present invention ensures that an Internet user via a browser automatically establishes a connection to that content provider s Internet site every time that user accesses the Internet using a browser. Thus as soon as an Internet user causes a browser to execute by selecting a browser icon for example the browser automatically establishes a connection to the content provider s Internet site to load that user s customized browser interface information. The present invention may also periodically and automatically cause the user s browser to connect to the content provider s Internet site while the browser is active i.e. while the user surfs the web. In one embodiment the content provider may provide an Internet user with access to a program for controlling the browser interface. Once the Internet user has accessed that controlling program to customize that user s browser interface a connection to that content provider may be automatically established by that user s browser every time that user accesses the Internet. Thus and in contrast to currently available browsers which establish a connection to an Internet site only when the user enters a URL or otherwise positively acts to cause a connection to be established such as for example by selecting a link or banner advertisement the present invention automatically establishes a connection to the content provider when the browser is initiated independent of any home web page selection pre programmed into the browser whether by the Internet user or browser vendor. Once that initial connection is established the content provider may load user specific information and or functionality to the Internet user s computer for display with that user s browser interface.

In addition the content provider can also periodically cause the browser to automatically reconnect to that content provider s Internet site to update download new or otherwise communicate information and or functionality for the Internet user s browser interface. For example if an Internet user subscribes to an email service of the content provider email messages for that Internet user received by the content provide may be automatically communicated to the Internet user even though the user is surfing elsewhere. When the user s browser initially establishes a connection to the content provider s Internet site upon execution of that user s browser the information communicated by the content provider to the Internet user includes instructions for the browser to periodically reconnect to the content provider s Internet site. Thus regardless of the number of Internet sites the user accesses and regardless of the particular Internet site currently accessed by a user a connection back to the content provider s Internet site will be automatically established at intervals determined by the content provider those reconnections being transparent to the Internet user except when the user receives a notification from the content provider i.e. new mail has arrived . Thus the browser interface may be dynamically controlled as the Internet user surfs the web. For an ISP the benefits are at least as great as for a content provider.

Initially the browser interface for an Internet user must be customized using a software program that may be provided by the content provider or ISP or that may be available on the user s computer. The software program referred to hereinafter as a controlling program or a program for controlling and other variations thereof changes the manner in which the user s browser functions. More specifically the controlling program downloads or creates a library file on the Internet user s computer. The library file may be for example a Dynamic Link Library DLL for a Windows operating system that creates a shell or plurality of shells within the browser and within which various information and or functionality may be loaded as an ActiveX control or Plug in. The library file includes ActiveX control or Plug in functionality that defines an interface object added to the browser interface in accordance with the present invention. When an Internet user launches or activates a browser the library file is opened and the ActiveX control or Plug in code contained within that file is made available to the browser and incorporated into the browser interface thus causing the interface object to be displayed with the browser interface. The library file and consequently the shell or shells remain open as long as the browser is activated generally as long as the user is surfing the web. Thus the information and or functionality for customizing the browser interface and loaded in the shell remain active even as the user moves from Internet site to Internet site. When used in this context herein the terms information and functionality refer to any information data and or software driven functionality that can be contained in or part of the library file.

The library file also causes the browser to establish a connection to the content provider s Internet site when the browser is initially activated by the user. The content provider s Internet site will load information and or functionality for the interface object to the user s computer for use in the browser and for display in the browser interface. The information and or functionality loaded by the content provider may be specific to an Internet user if for example that user has an account with the content provider. Alternatively the content provider may load general information and or functionality if for example the Internet user does not have an account with the content provider i.e. is a guest .

The present invention uses an object linking and embedding OLE in process server to control the information and or functionality of a browser interface. Using an ActiveX control or a browser Plug in each being referred to herein as a browser interface overlay BIO Library contained in a library file virtually any information and or functionality available with an ActiveX control or Plug in may be added to a browser interface using the present invention. The library file via the BIO Library thus includes the code required to customize i.e. add remove and or modify the browser interface.

Once an Internet user has accessed the controlling program and customized the operation of that user s browser the customized browser interface is displayed when the browser is activated. In contrast to prior art browser modification methods the present invention provides a method and browser interface that may be dynamically controlled. Updated or changed information and or functionality may be communicated to the browser and displayed in the browser interface as the Internet user surfs the web and while maintaining the customized information and or functionality of the browser interface. Thus an Internet user may automatically receive up to date information such as for example stock quotes email new headlines at that user s browser interface at any Internet site and as long as the user is surfing the web using the browser.

The present invention also provides a method and system of facilitating on line shopping by modifying a browser interface to provide a shopping assistant button and functionality. The modified browser interface provided in accordance with this embodiment of the present invention simplifies on line shopping by creating a wallet for each shopper or user. The wallet is stored in a database on a secure server and may be accessed used or modified only by the user and only in connection with a user provided security key. The wallet contains user supplied information that may be directly ported to a supported merchant check out web page. Thus when a user is shopping on line at a supported merchant s web site and desired to purchase certain merchandise and or services from that merchant the present invention provides the user with access to his her wallet and facilitates porting of the data contained in the wallet to quickly and effortlessly fill out the merchant s order forms provided at the merchant s check out web pages.

Other objects and features of the present invention will become apparent from the following detailed description considered in conjunction with the accompanying drawing figures. It is to be understood however that the drawings are designed solely for the purpose of illustration and not as a definition of the limits of the invention for which reference should be made to the appended claims.

The present invention is directed to a method of controlling and displaying an Internet browser interface and to a controllable Internet browser interface. In accordance with the present invention a browser interface may be customized using a controlling software program that may be provided by an Internet content provider an ISP or that may reside on an Internet user s computer. The controlling software program enables the Internet user the content provider or the ISP to customize and control the information and or functionality of a user s browser and browser interface.

The present invention also provides a method and system of facilitating on line shopping by modifying a browser interface to provide a shopping assistant button and functionality. The modified browser interface provided in accordance with this embodiment of the present invention simplifies on line shopping by creating a wallet for each shopper or user. The wallet is stored in a database on a secure server and may be accessed used or modified only by the user and only in connection with a user provided security key. The wallet contains user supplied information that may be directly ported to a supported merchant check out web page. Thus when a user is shopping on line at a supported merchant s web site and desired to purchase certain merchandise and or services from that merchant the present invention provides the user with access to his her wallet and facilitates porting of the data contained in the wallet to quickly and effortlessly fill out the merchant s order forms provided at the merchant s check out web pages.

Referring now to the drawings in detail is a block diagram of a computer connected to the Internet and upon which the present invention may be implemented. Computer includes an internal bus that facilitates communication of information i.e. digital data between and among the various devices of the computer and that also facilitates communication between the computer and external devices and systems via a communication interface . A processor coupled to the bus process information within the computer . The computer also includes a main memory such as for example Random Access Memory RAM or other equivalent dynamic memory storage device coupled to bus for receiving and storing instructions communicated from the processor . Main memory may also be used to temporarily store variable or other intermediate information while the processor executes instructions. Read Only Memory ROM is also coupled to the bus for storing static data and instructions for use by the processor . Various input and output devices are provided as part of the computer including by way of non limiting example a display e.g. cathode ray tube CRT liquid crystal display LCD etc. an input device such as a keyboard and a cursor control device such as a mouse or trackball for example. A data storage device such as for example a magnetic disk drive and magnetic disk a CD ROM drive and CD ROM or other equivalent devices and data storage mediums is coupled to the bus for communication with the processor main memory and communication interface . The storage device preferably has an operating system and an Internet browser software program i.e. a browser stored thereon. As will be discussed in greater detail below a library file may also be stored on the data storage device .

The computer may connect to the Internet via the communication interface over a transmission media including but not limited to coaxial cable copper wires and fiber optical cables. Communication between the computer and the Internet may also be via a wireless or cellular interface. The communication interface facilitates two way communication between the computer and another electronic device or system e.g. a server computer not shown provided by a content provider .

An Internet user not shown using the computer may gain access to the Internet by causing the browser to execute thereby opening a communication link between the communication interface of the computer and an Internet site of a content provider via an Internet Service Provider ISP . The browser provides to the computer display a browser interface see e.g. having a layout e.g. color size number location and functionality of windows that is predetermined in the browser by the browser vendor. Internet content is communicated by the content provider to the computer for display in a content window of the browser interface .

In accordance with an embodiment of the present invention a first Internet content provider may provide an Internet user with access to a program for controlling the browser and browser interface . When executed by the user the controlling program downloads or creates a library file such as for example a Dynamic Link Library DLL on the data storage device of the Internet user s computer . The library file preferably includes ActiveX control or Plug in functionality. Thereafter when the Internet user accesses the Internet using the browser the browser opens the library file and preferably automatically establishes a connection to the content provider s Internet site . The content provider in response to the connection established by the browser loads information and or functional data into a shell operating within the browser and created by the library file . For example if the user has an account with the content provider customized information and or functionality may be loaded into the library file . If the user does not have an account more generalized i.e. guest information and or functionality may be loaded.

In accordance with the various embodiments of the present invention as described in more detail herein data may be communicated between computers e.g. between a server and a user or client computer . The present invention contemplates that such data communication or transmission reception download upload etc. may be carried out in any manner using any medium using any now known or hereafter developed medium or method.

The library file essentially opens a shell or a plurality of shells within the browser that contains the ActiveX control or Plug in code that may control i.e. add remove and or modify the Internet browser and the browser interface . When loaded with the ActiveX control or Plug in the library file preferably contains functions objects data and other software referred to generally herein as information that may be used to control the browser and browser interface . The present invention ensures that the library file and shell does not close when the Internet user moves from Internet site to Internet site . Thus the information and or functionality provided via the ActiveX control or Plug in is not lost when the Internet user disconnects from the Internet site that loaded the ActiveX control or Plug in and connects to another Internet site.

Referring next to a prior art Internet browser interface having a plurality of windows each providing various functionality to the Internet user is there depicted. The browser interface may comprise a first parent window that typically defines the general size color and layout of the browser interface and includes window control buttons e.g. minimize close etc. for that window . The browser interface may also comprise a second parent window a child to the first parent window within the first parent window and one or more child windows dependent from the second parent. The second parent window and child windows typically define information and or functionality that will assist an Internet user when accessing and navigating the Internet. For example the second parent and its dependent windows may provide toolbars pull down menus Plug ins applications etc.

For example three windows provided at the top in the drawing of the interface define three toolbars which may include a variety of interface controls such as for example pull down menus functional buttons e.g. stop back forward home etc. and a combination of functional buttons and windows e.g. a search button and window . The uppermost toolbar provides a plurality of pull down menus the middle toolbar provides a plurality of functional buttons and the lowermost toolbar provides a pull down menu and a window a URL address window . A content window is also provided as part of the interface within which content from an Internet content provider see e.g. may be displayed. The Internet user may toggle any of the lower three in the drawing toolbars on and off using a View toolbar object pull down menu provided in the second toolbar . However the Internet user currently may not add remove or otherwise modify the browser interface .

An Internet browser configured in accordance with various embodiments of the present invention is depicted in . In the browser interface includes an interface object that is defined by the ActiveX control or Plug in loaded in the library file by the content provider . The interface object comprises a pull down menu and is displayed in the browser toolbar with the interface controls i.e. browser toolbar objects provided by the browser . In an interface object comprises an interface object toolbar and a pull down menu displayed as a separate window within the browser interface . In an interface object comprises an interface toolbar including a plurality of pull down menus and a search window displayed within a separate within the browser interface . An interface object in accordance with the various embodiments of the present invention may comprise virtually any type of information and or functionality available via a browser. Thus by way of non limiting example an interface object may comprise a pull down menu a toolbar and a pull down menu textual information e.g. advertisements coupons etc. textual and or aural information e.g. a textual advertisement with accompanying sound textual aural and or graphical animated or not information video video and audio audio etc.

The various embodiments of the inventive Internet browser interface depicted by are merely illustrative non limiting examples of the present invention. Variations to the depicted browser interfaces may be possible in accordance with the teachings provided herein.

Referring next to a method of controlling an Internet browser interface is there depicted in accordance with an embodiment of the present invention and designated generally as . At step an Internet user accesses a controlling program via an Internet web site an ISP or the user s computer . The controlling program when executed by an Internet user provides that user with the ability to thereafter control that user s Internet browser interface as discussed in more detail below. The controlling program at step downloads or creates a library file on the Internet user s computer that includes ActiveX control or Plug in code that define an interface object. Each time the Internet user launches or activates the browser the library file is opened and a connection is automatically established to a predetermined Internet web site one that is preferably configured to communicate to the Internet user s computer ActiveX control or Plug in code for the interface object as indicated at steps and . The open library file essentially provides a shell within the browser within which the functionality provided by the ActiveX control or Plug in may be added to the browser interface . Neither the library file nor the shell close until the browser is closed. At step an interface object is created that will be displayed in the browser interface the information and or functionality of the interface object is defined by the ActiveX control or Plug in. In accordance with the various embodiments of the present invention the interface object remains displayed by the browser with the browser interface as indicated at step for as long as the user continues to surf the web i.e. as long as the browser is activated. Thus the functionality added to the browser and browser interface in accordance with the present invention is not lost as the Internet user surfs the web.

The present invention provides various embodiments for controlling the browser and browser interface described generally above with reference to each of which will now be described in detail.

Referring next to and with continued reference to a description of an embodiment of a method of controlling and displaying a browser and browser interface in accordance with the present invention designated generally as will now be provided. For purposes of and for the following discussion directed thereto a library file has already been downloaded or created on the Internet user s computer as discussed herein. At step an Internet user launches or activates a browser to initiate access to the Internet . At step the library file is opened and a connection automatically established to a predetermined content provider as indicated at step . The functionality defined by the ActiveX control or Plug in code of the BIO Library is communicated by the content provides to the user s computer i.e. to the library file to create an interface object which may be added to the browser interface . The interface object is displayed with the Internet browser interface as indicated in step . The functionality of the interface object as defined by the ActiveX control or Plug in code remains with the Internet browser interface as the Internet user traverses the Internet regardless of the number or type of Internet sites the user visits and as long as user is accessing the Internet using the browser software program . When the Internet user moves from one Internet site to another as indicated at step the present invention determines whether the interface object has survived that move whether it is still displayed by the browser in the browser interface as indicated at step . If the interface object is not displayed in the browser interface i.e. if it has been removed from the browser interface or otherwise terminated the interface object is redrawn as indicated in step . If the interface object has survived a user move from one Internet site to another and remains displayed in the browser interface the present invention also determines at step if the browser is active since the interface object is only displayed in the browser interface when the browser is operational. If the browser is not activated if the user is no longer surfing the web the interface object is terminated and the library file is closed as indicated at step . If the browser remains active the present invention continues at step to ensure that the interface object is displayed with the browser interface . As the Internet user moves between and among Internet sites the present invention monitors the status of the interface object and ensures that it is displayed by the browser with the browser interface as long as the user is traversing the Internet .

According to the embodiment depicted in the present invention ensures that the interface object is displayed by the browser with the browser interface when the Internet user leaves the Internet web site at which the BIO Library initially was called and loaded to the user s computer . For example when the user launches or activates the browser a connection is automatically established to a first predetermined Internet site that is maintained by a first content provider and the BIO Library is loaded onto the user s computer . The functionality provided by the BIO Library is then available to the browser via a shell created by the library file . When the Internet user connects to a second Internet site maintained by a second content provider the functionality for the interface object will continue to be present in the browser interface . In this embodiment the present invention prevents the browser or operating system of the computer from disabling the functionality of the BIO Library by unloading the library file when the link to the first Internet site is terminated.

For example when the browser initially connects to the first Internet site that site communicates functional information in the form of ActiveX control software code to the Internet user s computer as a BIO Library which is loaded into the library file . If the library file is not explicitly instructed by the operating system or the browser to close or unload when the connection to the first Internet site is terminated the library file will remain loaded providing the desired functionality for the interface object in the browser interface even after the connection to the first Internet site is closed. Keeping the library file loaded while the Internet user moves between and among various Internet sites enables the loading of data functions and objects outside of the ActiveX control which is only communicated to the Internet user by the first Internet site but inside of the library file . As long as the library file remains loaded any data or objects created in the library file and outside of the ActiveX control will stay loaded and continue to function in the browser interface .

To keep the library file open during surfing after the browser has connected to the first Internet site and before that connection is terminated a global object object A is created in the program heap of the Internet user s computer not the calling function heap. Thus the global object survives the completion of the calling function. The global object may be created using the C new operator or by declaring a global object in the global declarations. In either case the global object will survive termination of the connection between the browser and the first Internet site .

A global object thus defined remains functional after the ActiveX control provided by the first Internet site closes i.e. after the initial connection to the first Internet site is terminated. Once the global object has been created an interface is created using the global object. That interface will serve to for example remove replace and or add functionality to the browser and browser interface . The interface may be created as part of the global object or by the global object allocating a new interface object . For example the interface object may be created by creating for example an interface object window within a browser window see e.g. and adding it to the browser interface as a child window Alternatively the browser interface may be directly modified such as for example by adding or modifying a browser toolbar or a browser toolbar object in the browser interface . Yet another alternative is to create an object interface toolbar that is separate from the browser interface as depicted in .

Additionally a pointer is required that is used to control the browser and to instruct the browser to establish a connection to a predetermined Internet site for example. That pointer is preferably stored globally so that it is accessible by any function or object in the library file that sends commands to the browser . In Microsoft Internet Explorer for example the IWebBrowser IWebBrowser2 or IWebBrowserApp object linking and embedding OLE interface commands may be used to create the pointer. Using Microsoft Foundation Class MFC for example the pointer may be created using the GetClientSite member of the COleControl class to retrieve a pointer from the first Internet site i.e. the Internet site which loaded the BIO Library. The GetClientSite serves as the entry point for the browser to communicate with the BIO Library. A GetContainer member of the IOleClientSite class returned by the previous step may be used to get a pointer to a container for the BIO Library. The BIO Library s container is a container within which an ActiveX control is loaded. An Internet browser interface generally consists of several parts including the browser toolbars and the content window . A document object is created by the browser for every web page an Internet user accesses and contains all of the data that appears in a particular web page. The document object is also the container for the BIO Library. Thus a document object may also be referred to as a BIO Library s container.

A QueryInterface member of the IOleContainer class returned by the previous step may be used to get a pointer to the IServiceProvider interface which may be used to locate any of the other interfaces that are presented by the browser . Finally a QueryService member of the IServiceProvider class returned by the previous step may be used to get a pointer to the IWebBrowserApp IWebBrowser or IWebBrowser2 interface depending on the specific interfaces provided by the browser that called the BIO Library.

In an alternative embodiment the present invention may be used to modify the entire browser window . If the entire browser window is modified as opposed to integrating an interface object into an existing browser window the entire class for the modified browser window may be subclassed or alternatively the specific browser window may be subclassed. As used herein the term subclassing a window also referred to as hooking a window refers to the replacement of an original browser window message handling procedure for handling all messages sent to a window with a user defined window message handling procedure. For example a window may be subclassed using the Microsoft Foundation Class MFC CWnd SubclassWindow function. Alternatively a window may be subclassed using the call the SetWindowLong function a Microsoft Windows function with the GWL WNDPROC argument a Microsoft Windows constant . The pointer returned by the SetWindowLong function call may be stored to the original browser window message handling procedure for the subclassed window. This enables the BIO Library to intercept all messages passed to a window or and the BIO Library may interpret commands from interface controls including buttons menus etc. provided by the browser or from interface objects that have been added by the BIO Library in accordance with the present invention.

The user defined window message handling procedure that the BIO Library provides and that replaces the original browser window message handling procedure is referred to herein as the BIO Procedure. Using the BIO Procedure for the browser messages e.g. commands intended for the browser may be intercepted and modified or replacement or new messages e.g. message handlers for the interface object may be communicated to the browser by the BIO Procedure.

The present invention also ensures that the interface object has not been removed from the browser interface . For example some Internet browsers redraw the entire browser interface when an Internet user accesses a new web site. While the global object may still be functional following such Internet movement by the user the interface object will be removed from the browser interface and thus will not be displayed with the browser interface . To prevent this from occurring messages e.g. commands from the browser to repaint the browser interface may be intercepted by the BIO Procedure and the interface object may be redrawn immediately after the browser interface is redrawn. Alternatively the presence of the interface object in the browser interface may be periodically tested and if not present in the browser interface the interface object may be redrawn. Such periodic testing should preferably occur at intervals of less than approximately one second.

As an example of the above described embodiment depicted in an ActiveX control is loaded as a BIO Library and adds menu items and functionality to the browser interface . The present invention creates an ActiveX control that dynamically creates a new global object object A which creates a new menu object which may be an interface object with a desired functionality to be added to the browser interface . The menu object may be added to the browser interface using for example the instructions AfxGetMainWnd GetMenu AppendMenu where the appended menu of the browser interface would include a popup menu that points to the menu object . The browser interface window would then be subclassed and handle the messages for the menu object handled by the BIO Procedure and the messages for the browser interface being passed to the message handler for the browser . When the Internet user disconnects from the first Internet site e.g. leaves the web page containing the ActiveX control the ActiveX control will close but the global object i.e. object A will remain in the program heap and continue to provide the desired functionality to the browser interface .

Instead of subclassing the browser window within which the interface object is added object A or one of its descendants may retain ownership of the interface object . Then a message handler for the interface object may be created. For example an interface object may be added to a browser toolbar in accordance with the above described embodiment of the present invention except that ownership of the interface object is set using the Microsoft Foundation Class SetOwner function to be object A or one of it s descendants.

With reference next to and continued reference to a description of an alternate embodiment of a method of controlling and displaying a browser interface in accordance with the present invention designated generally as will now be provided. For purposes of and for the following discussion directed thereto a library file has already been created on the Internet user s computer as described herein. At step an Internet user launches or activates a browser to access the Internet . At step the library file is opened on the user s computer and a connection is automatically established to a predetermined Internet site as indicated at step . At step the functionality defined by the ActiveX control or Plug in code of the BIO Library is communicated by the content provider to the user s computer i.e. to the library file to create an interface object which may be displayed in the browser interface using a continuous loop to control the display of the interface object . The interface object may only be removed i.e. its functionality terminated upon termination of the continuous loop. The functionality of the interface object as defined by the ActiveX control or Plug in code remains with the Internet browser interface as the Internet user traverses the Internet regardless of the number or type of Internet web sites the user visits and as long as the browser remains activated and as long as the Internet user is accessing the Internet using that browser software program. When the Internet user moves from one web site to another as indicated at step the present invention determines whether the interface object has survived that move i.e. whether it is still displayed in the browser interface as indicated at step . If the interface object is not displayed by the browser in the browser interface i.e. it has been removed from the browser interface or otherwise terminated the interface object is redrawn as indicated in step . If the interface object has survived a user move from one web site to another and remains displayed in the browser interface the present invention also determines at step if the browser is active since the interface object is only displayed by the browser in the browser interface when the browser is operational. If the browser is not activated the interface object is terminated and the library file is closed as indicated at step . If the browser remains active the present invention determined at step whether the continuous loop has been terminated. If the loop has been terminated the interface object is also terminated as indicated at step . If the loop is still executing the present invention determines whether the interface object is still displayed in the browser interface as indicated at step .

The embodiment of the present invention depicted in prevents an ActiveX control from unloading by freezing the operation of the library file within which the ActiveX control code is loaded even if the operating system or browser generate an instruction to unload or terminate the library file . Because the library file is frozen and never finishes unloading all of the data functions and objects created inside of the library file by the ActiveX control will continue to exist and function after the library file has been instructed to unload.

In some operating systems and or browsers the BIO Library will be closed when the ActiveX control is no longer present at an Internet site. This can also occur when the Internet user moves from an Internet site having the ActiveX control e.g. Internet site in to another Internet site that does not e.g. Internet site in . To enable the interface object to continue to operate in the absence of the ActiveX control the BIO Library and the library file must be prevented from closing.

To accomplish this a pointer is created that is used to control the browser . That pointer is preferably stored globally so that it is accessible by any function or object in the library file that may need to send commands to the browser . In Microsoft Internet Explorer for example the IWebBrowser IWebBrowser2 or IWebBrowserApp OLE Interface commands may be used to create the pointer. To do this using Microsoft Foundation Class the GetClientSite member of the COleControl class which may be used to communicate with the BIO Library may be used to retrieve a pointer to the BIO Library s Internet site i.e. that Internet site that provides the ActiveX control. A GetContainer member of the IOleClientSite class returned by the previous step may be used to get a pointer to the BIO Library s container. A QueryInterface member of the IOleContainer class returned by the previous step may be used to get a pointer to the IServiceProvider interface. The IServiceProvider interface is used to easily find any of the other interfaces that are presented by the browser . A QueryService member of the IServiceProvider class returned by the previous step may be used to get a pointer to the IWebBrowserApp IWebBrowser or IWebBrowser2 interface depending on the interfaces presented by the version of the browser that called the BIO Library.

To prevent the library file from closing its operation is halted before it is able to terminate. To freeze or halt the operation of the library file a continuous program loop may be created and executed that terminates only when the BIO Library is to be unloaded at which time the program loop also pumps the message queue The program loop is referred to herein as a message pump and may be created using for example the PeekMessage GetMessage TranslateMessage and DispatchMessage commands in a loop. Exemplary C code to carry out the message pump is provided below 

The way the message pump preferably operates is that it checks to see if there are any messages waiting in the message queue using the PeekMessage function. If there is a message the message pump grabs the message from the message queue using the GetMessage function and translates it from a virtual key message into a character message using the TranslateMessage function. Finally the message pump sends the message to the original window message handling procedure that is due to receive the message using the DispatchMessage function.

The built in capabilities of an operating system may be also used to construct a message pump to pump the message queue. For example a modal dialog box or message box using a command such as the MFC command CWnd MessageBox my modal MB OK serves this purpose well and may be used to provided the desired freezing or halting of the operation of the library file .

As long as the message pump is executing a continuous loop the ActiveX control will not terminate even when the Internet user accesses other Internet sites.

The embodiment of the present invention depicted by performs in the same manner e.g. subclassing message handling etc. as the above described embodiment of .

For both of the above described embodiments of it is preferable although not necessary to provide an exit function for the interface object so that object A and all of its descendants will be closed. Possible exemplary scenarios for calling an exit function include intercepting the message to close the browser window in the BIO Procedure or periodically looking for the browser window and if it is not found terminating the ActiveX control.

Referring next to yet another embodiment of the method of the present invention is depicted and designated generally as . For purposes of and for the following discussion directed thereto a library file has already been created on the Internet user s computer as described herein. At step an Internet user launches or activates a browser to access the Internet . At step the library file is opened on the user s computer and a connection is automatically established to a predetermined Internet site see e.g. as indicated at step . At step a new browser interface is created that is a duplicate of the initial browser interface provided by the browser . At step a Function Window is created that represents the original browser interface within which the functionality of the Plug in was initially loaded.

The steps for creating a Function Window in accordance with this embodiment of the present invention are depicted in and designated generally as . At step the handle for the initial browser interface window is identified. The initial browser interface window now the Function Window is hidden and or disabled at step so that it cannot be closed which would cause the BIO Library to crash. At step a pointer is created that is used to control the browser . Finally a new browser interface window is created at step that may be used by the Internet user to continue traversing the Internet.

With reference again to and beginning at step the browser interface may now be controlled by first subclassing any browser windows or any windows used by the browser that are to be controlled and then adding deleting and or modifying the window s as described in more detail below. The original browser window message handling procedure is replaced with a BIO Procedure as defined above . At step the present invention determines whether any new browser windows have been opened i.e. windows that may not already be subclassed or that may not have been controlled in accordance with the present invention. If new windows have been opened the present invention determines at step whether the interface object is to be added to those new windows. If not the invention determines whether the Internet user desires to close the browser as indicated at step . If so the invention closes at step all browser windows including the Function Window. If the user does not desire to close the browser as determined at step the invention returns to step and again determines if new browser windows have been opened.

With continued reference to the above described embodiment of the present invention will now be discussed in more detail. When an ActiveX control is loaded by a content provider via an Internet site typically in response to a browser establishing a connection to that web site and calling an ActiveX control a library file located on the user s computer is caused to open creating a shell within the browser within which the code for the ActiveX control may be loaded. If the library file that contains the ActiveX control is explicitly instructed by the operating system or the browser to unload or close when the ActiveX control is closed when the user terminates the connection to the Internet site any data functions or objects that have been created outside of the ActiveX control but in the library file will be destroyed when the library file is unloaded. To prevent the library file from unloading the browser is prevented from closing the ActiveX control until instructed. If the ActiveX control is never instructed to close the library file is never unloaded.

A preferred method of accomplishing this is to hide and or disable the initial browser interface window that loaded the ActiveX control and to create a new copy of that same window within which the Internet user may continue to work and traverse the Internet. Because the initial browser interface is preferably hidden and or disabled the ActiveX control cannot be closed until the library file shows enables or closes the initial browser interface window i.e. the window that loaded the library file .

The above described method of preferably loads the BIO Library as a standard ActiveX control in a browser using for example the tag typically contained in a web page or as a Band Object and as described in the Microsoft Internet Explorer 4.x Software Development Kit. This instructs the browser to initialize and run the library file that contains the code for BIO Library.

The first time the BIO Library is initialized and called a Function Window is created that keeps the BIO Library open by keeping a session with the ActiveX control itself open while the Internet user visits other Internet web sites i.e. other web pages. The Function Window also makes it possible for browser windows that do not have a copy of the BIO Library open to access the OLE interfaces to the browser .

To create the Function Window the initial browser interface window i.e. that window which loaded the BIO Library is preferably hidden and or disabled. This may be accomplished by identifying the handle of the initial browser interface window beginning with the handle of the BIO Library. To retrieve the initial browser interface window handle from the handle of the BIO Library the GetParent function a Windows Function is continuously called until the present value for that function call represents one level below the desktop window. For example a statement such as m Handle GetParent m Handle executed in a loop may provide the desired functionality and result where the value of m Handle is initially equal to the value for the handle of the BIO Library and will eventually return the handle to the initial browser interface window.

The next step is to hide and or disable the initial browser interface window now referred to as the Function Window so that the Internet user cannot close the Function Window by closing the browser for example thereby causing the BIO Library to unload and removing the functionality provided by the BIO Library from the browser interface . To hide the initial browser interface window from the user and or disable that browser window from user driven events WM SHOWWINDOW and or WM ENABLE messages both Windows constants may be sent to the initial browser interface window with values to hide and or disable the browser window. For example the PostMessage or SendMessage function existing Windows functions may be used to send a message to the initial browser interface window with the browser window handle. Alternatively the ShowWindow and EnableWindow functions existing Windows functions may be used to achieve the same result.

A pointer is created to control the browser . This pointer is preferably stored globally so that it is accessible by any function or object in the library file that sends commands to the browser . In Microsoft Internet Explorer for example the IWebBrowser IWebBrowser2 or IWebBrowserApp OLE interface may be used to create the pointer. To do this using Microsoft Foundation Class for example the GetClientSite member of the COlecontrol class that serves as the entry point for the browser may be used to communicate with the BIO Library and to retrieve a pointer to the BIO Library s Internet site i.e. that Internet site that loaded the ActiveX control. A GetContainer member of the IOleClientSite class returned by the previous step may be used to get a pointer to the BIO Library s container. A QueryInterface member of the IOleContainer class returned by the previous step may be used to get a pointer to the IServiceProvider interface with the IServiceProvider interface preferably being used to find any of the other interfaces that are presented by the browser . A QueryService member of the IServiceProvider class by in the previous step may be used to get a pointer to the IWebBrowserApp IWebBrowser or IWebBrowser2 interface depending on the interfaces presented by the version of the browser that called the BIO Library.

Finally a new browser window is created that the Internet user may use to continue surfing the web i.e. to continue accessing various different Internet sites since the browser window previously used to create the Function Window has been hidden and or disabled. Preferably any of the IWebBrowser IWebBrowser2 or IWebBrowserApp OLE interface is used to create a new browser window for example using the Navigate or Navigate2 members of that OLE interface. Alternatively a WM COMMAND message that corresponds to any command the browser might use to open a new browser window such as a New Window command or Open In New Window command etc. may be sent to the browser . A new window may also be opened using the Dynamic Data Exchange DDE support provided by the browser .

The BIO Library must now add delete modify i.e. control various browser interface features and functionality. The first step is to subclass any of the browser windows or any of the windows the browser uses i.e. children that are to be controlled in accordance with the present invention. A BIO window message handling procedure is used to replace the original window message handling procedure and is hereinafter referred to as the BIO Procedure.

Once the browser window or any of it s children have been subclassed it is possible to add menus to a subclass by retrieving a pointer to the browser window menu using the GetMenu function. Once the pointer to the menu s handle is obtained the menu functions such as ModifyMenu AppendMenu InsertMenu etc. may be used to add any desired menus to the browser window. Any commands assigned to a menu must be handled by the BIO Procedure used to subclass the BIO window. The same command identifier must not be used in creating a menu as any that are included in the browser.

An interface object toolbar may be added to the browser interface by retrieving the handle of the window to which the toolbar is to be added to hereinafter referred to as the Frame Handle using standard Windows functions. Typically the window will be the BIO window or a frame window that is a child of the BIO window. A window is then created using the Frame Handle as its parent. For example to add a dialog bar which is a form of a toolbar as an interface object an object derived from or of a type CDialogBar a Microsoft Foundation Class is created and it s Create method called using Frame Handle. If resources such as for example images toolbars dialogs etc. are being used and the browser does not share the same resources as the BIO Library the browser s resources are temporarily replaced with the BIO Library resources before any data may be loaded from the BIO Library resource. The BIO Library resources may then be replaced with the browser s original resources.

As new browser windows are opened it may be desirable to add interface object s to those new windows. A timer may be created using SetTimer Windows function that would call a user defined function and that function would use the FindWindowEx function a Windows function to check every child of the desktop window for a window with the same class name as the Function Window. For those browser windows that have not already been modified i.e. that do not have the interface object the necessary handles may be retrieved and the same changes made as were made for the original BIO Window.

Finally when the Internet user desires to close the browser it must be determined if all of the browser windows are closed except the Function Window and the Function Window must also be closed if all other browser windows are closed. This may be accomplished by listening for a WM CLOSE message a Windows constant in the BIO message handling procedure or by setting a timer that periodically determines how many browser windows are open. To close the original Function Window a WM CLOSE message may be sent to that window.

Referring next to another alternative embodiment of a method of controlling and displaying an Internet browser interface in accordance with the present invention is depicted and generally designated as .

Steps and are essentially the same as described above for the embodiments of . At step a new browser interface window is created and the initial browser interface window is hidden and or disabled and referred to as a Function Window. The Plug in identifies the handle for the initial browser interface window hides and or disables that window and creates a new browser interface window that may be used by the Internet user. At step all the browser windows are subclassed and then the browser interface may be controlled as indicated at step for all open windows. At step the present invention determines if any new browser windows have been opened in which case the invention returns to step . In no new browser interface windows have been opened step proceeds to step to determine if the Internet user desires to close the browser. All windows must be closed prior to closing the Function Window and that is determined at step . If all windows are closed the Function Window is closed as indicated at step . Otherwise step returns to step .

In yet another alternative embodiment of the present invention the present invention provides a method of controlling an Internet browser interface using a browser Plug in to control i.e. add remove and or modify the functionality of the calling browser and to retain the Plug in functionality after the user leaves the Internet site that loaded the Plug in.

When a browser Plug in is loaded to an Internet user s computer in response to a browser establishing a connection to an Internet site and calling the Plug in a library file establishes a shell within the browser and within which the code for the Plug in may be loaded. If the library file is explicitly instructed by the operating system or the browser to unload when the Plug in is closed any data functions or objects that have been created outside of the Plug in but in the library file will be destroyed when the library file is unloaded. To prevent the library file from unloading the browser is prevented from closing the Plug in until the browser receives an instruction to close the Plug in. If the Plug in is never instructed to close the library file also is never instructed to unload. This may be accomplished by hiding and or disabling the initial browser window that loaded the Plug in and by creating a new copy of that same window for the Internet user to continue to use to access and traverse the Internet. Because the initial browser window is preferably hidden and or disabled the Plug in can not be closed until the library file chooses to show enable or close the initial browser window that loaded the Plug in.

For example a browser Plug in is loaded as a standard Plug in in a browser preferably by using the tag in a web page see e.g. which instructs the browser to initialize and load the library file that contains the code for the Plug in i.e. the BIO Library .

The first time the BIO Library is initialized and called a Function Window is created by hiding and or disabling the original browser window thus preventing the BIO Library from unloading by keeping a session with the Plug in itself open. The Function Window also makes it possible for browser windows that do not have a copy of the BIO Library open to access built in Application Programming Interfaces APIs for Plug ins i.e. functionality made available to the Internet user through the browser interface and via the Plug in functionality such as those provided with Netscape Navigator and Microsoft Internet Explorer.

A Function Window is preferably created by disabling or hiding the initial browser window in which the Plug in resides the first time the Plug in is called by the browser . To do this the Plug in must first identify the handle of the initial browser window. A window member of the NPWindow structure is passed to the BIO Library from the browser as a second argument to the NPP SetWindow Function and is the handle to the Plug in window NPWindow and NPP SetWindow are part of the Netscape and Internet Explorer API for Plug Ins . To retrieve the initial browser window handle from this window member the GetParent function a Windows function is continuously called until the present value for that function call represents one level below the desktop window. For example a statement such as m Handle GetParent m Handle executed in a loop may provide the desired functionality and result where the value of m Handle is initially equal to the value for the handle of the NPWindow structure and will eventually return the handle for the initial browser window.

The initial browser window is then hidden and or disabled so that the Internet user cannot close the Function Window and cause the BIO Library to crash. To hide the initial browser window from the user and or disable that window from user driven events WM SHOWWINDOW and or WM ENABLE messages both Windows constants may be sent to the initial browser window with values to hide and or disable that browser window. This can be accomplished by for example using the PostMessage or SendMessage function Windows functions to send a message to the initial browser window using the browser window handle. Alternatively the ShowWindow and EnableWindow functions Windows functions may be used to achieve the same results.

The final step is to create a new browser window that the Internet user can use to continue surfing the web after the initial browser window has been hidden and or disabled. This may be accomplished for example by calling any of the following Netscape and Internet Explorer Plug in API functions NPN GetURL NPN PostURL NPN GetURLNotify NPN PostURLNotify with the target parameter set to  new  blank or any window name that does not already exist. The NPP argument of the above functions is the NPP structure that was provided by the browser to the Plug in for the Function Window. Another way of doing this is to send a WM COMMAND message to the browser that corresponds to any command the browser might use to open a new window such as a New Window command or Open In New Window command for example. A new window may also be opened using the Dynamic Data Exchange DDE Support provided by the browser. NPN GetURL NPN PostURL NPN GetURLNotify NPN PostURLNotify and the NPP structure are part of the Netscape and Internet Explorer API for Plug Ins and the WM COMMAND is a Windows constant.

The BIO Plug in may now control i.e. add delete modify features and functionality of the browser . The first step is to subclass any of the browser windows or any of the windows the browser uses collectively BIO windows that are to be controlled in accordance with the present invention.

After the browser window or any of it s children has been subclassed menus may be added to the browser interface by retrieving a pointer to the browser window menu using the GetMenu function a Windows function . Once the pointer to the menu s handle is obtained the menu functions such as ModifyMenu AppendMenu InsertMenu etc. Windows functions may be used to add any desired menus to the browser window. Any commands assigned to a menu must be handled by the BIO message handling procedure used to subclass the BIO window taking care not to use the same command identifier in creating a menu as any included in the browser .

Alternatively or additionally an interface object toolbar may be added to the browser interface by retrieving the handle of the window to which the toolbar is to be added hereinafter referred to as the Frame Handle using standard windows functions typically the window will be the BIO window or a frame window that is a child of the BIO window. A window is then created using the Frame Handle as its parent. For example to add a dialog bar which is a form of a toolbar as an interface object an object derived from or of type CDialogBar a Microsoft Foundation Class may be created and it s Create method called using the Frame Handle. If resources such as for example images toolbars dialogs etc. are being used and the browser does not share the same resources as the BIO Library the browser s resources are temporarily replaced with the BIO Library resources before any data from the BIO Library resource may be loaded. The BIO Library resources may then be replaced with the browser s original resources.

As new browser windows are opened the interface object may be added to those new windows. This may be accomplished by creating a timer using SetTimer a Windows function that would call a user defined function that would use the FindWindowEx function a Windows function to check every child of the desktop window for a window with the same class name as the Function Window. For those new windows that do not already have the modified interface i.e. that do not include the interface object the necessary handles are retrieved and the same changes made to those windows as were made to the original BIO window.

Finally when the Internet user wishes to close the browser it must be determined if all of the browser windows are closed except the Function Window and if they are the Function Window may be closed. This may be accomplished for example by listening for a WM CLOSE message a Windows constant in the BIO window message handling procedure or by setting a timer that periodically checks the number of open browser windows. The original Function Window may be closed by sending it a WM CLOSE message.

In accordance with the present invention a BIO Library i.e. a Plug in may be loaded and its functionality provided in the browser interface automatically i.e. without requiring the user to positively access a particular Internet site i.e. to surf to a web page that calls the Plug in. For example Netscape has a key in its windows registry identified as Automation Startup. Upon activation Netscape loads all of the OLE controls that are listed in the Automation Startup key. By placing a reference or a call to the library file and thus to BIO Library and Plug in that defines an interface object in the Automation Startup key the library file may be loaded every time a user launches or activates a Netscape browser. Included in that library file may be instructions to create an instance of the interface object in the browser interface and an instruction for the browser to establish a connection to a predetermined Internet site . Using this technique a user does not have to choose to visit a specific Internet site to load a BIO Library. The library file needs to be kept open at least until the Plug in may be loaded in the browser for display and access via the browser interface . One way to do this is to increment a reference counter associated with the library file so that when Netscape unload the OLE controls listed in the Automation Startup key the library file will not be unloaded because it has a higher reference number.

The library file may be loaded as a Plug in using DDE to periodically look for a Netscape DDE Server using a timer or a loop. When a return is received by the browser from the Netscape DDE server Netscape is ready to receive commands and may be loaded with the Plug in. DDE may then be used to send a command such as WWW OPENURL to the browser which will cause the Plug in to load as discussed herein.

Another method for hiding the Netscape Plug in window that is used for BIO Library is to remove it from the task bar i.e. where the Windows Start button is located and place it off of the visible screen. One way to remove it from the Task Bar is to call SetWindowLong and change the window style of the Plug in window to a toolbox window. Toolbox window s do not appear in the task bar. The Netscape Plug in window may be placed off screen by calling MoveWindow and providing coordinates that are not in the visible range for the users desktop.

The BIO window message handling procedure that is used to replace the original browser message handling procedure must know which window a message is intended to reach and what to do with a message once the BIO window message handling procedure receives that message. A preferred way to do this is to create a map that links one piece of information to another. For the present invention a map that links window handles to structures that contain important information to that window is preferably used. For example when the BIO Library adds the interface object to a new browser window a new entry in the map is created that links the BIO window s handle to a structure that contains information useful for that BIO window. One of the pieces of information contained in the structure would preferably be the browser s original window message handling procedure for the BIO window. It is necessary to maintain the browser s original window message handling procedure so that if the BIO window message handling procedure does not know how to handle a message it can pass the message to the browser s original window message handling procedure.

When a message is received by the BIO window message handling procedure the first argument that is passed to the procedure is the handle of the window that received the message. To retrieve the structure that contains all of the data specific to that window a lookup in the map is performed using the window handle as a key. The returned structure will contain all of the stored window specific information such as the original window message handling procedure.

When controlling the browser interface i.e. adding to removing from or modifying the browser interface the present invention changes how the browser works. Almost anything an Internet user can do with a browser works by sending a message to a browser s window or child window. Objects or windows that send messages include the menus buttons combo boxes and almost anything else with which the Internet user can directly interact i.e. interface controls. Messages for example can be broken up into four components 1 the handle of the window intended to receive the message 2 the msg value of the message 3 a wParam whose use is usually dependent on the msg value and 4 an Param whose value is also usually dependent on the value of the msg value.

For example clicking on a button in a browser s window might send a message that contains the WM COMMAND which is a Windows constant msg value to a browser window s window message handling procedure. The lower two bytes of the wParam variable in that message would then be a number that is used to identify which button was pressed.

By subclassing a browser s window or child window as described above any messages that are sent when a user interacts with any of the interface controls may be intercepted. Once a message is intercepted the BIO window message handling procedure can interpret it and react to it. If the functionality of the interface control is to remain the same i.e. not added to deleted from or modified by the present invention the message may be passed back to the original window message handling procedure. In this way virtually all of the interface controls that exist in the browser may be controlled. In addition interface controls may be added to the browser interface and assigned command identifiers which are passed in the wParam . The BIO window message handling procedure can then interpret the wParam and provide the functionality of the Interface control that is to be added. In addition functionality may be removed by simply having the inventive window procedure do nothing if it receives a command identifier associated with an interface control that is to be removed from the browser. That command may thus be prevented from passing to the browser window s original message handling procedure.

Using the various embodiment of the present invention as discussed in detail above an Internet user may create a browser interface having user defined interface controls. Then by setting the parent of the window for that browser interface to a window that has been subclassed any message from the new i.e. controlled window will be handled in the BIO window message handling procedure. This can be used to add any interface object such as a toolbar dialogbar floating dialog etc. to the browser interface .

The following illustrative non limiting application examples are provided to further describe the present invention. A Plug in or ActiveX control that stays persistent as an Internet user traverses the Internet may add an interface object to the browser interface that enables a user to download their bookmarks or favorites from a database located on the Internet. The interface will be added directly into the browser interface and will allow the user to visit the bookmarks or favorites links that they downloaded using the interface object provided by the Plug in or ActiveX control. This interface object will serve a similar function to the current favorites or bookmarks menu items and toolbars on existing browsers. The beneficial difference is that since the bookmarks will be downloaded from a database on the Internet users have access to their bookmarks on any computer s browser that is capable of loading the Plug in or ActiveX control.

The present invention may also be used to generate revenue based on placing advertising links included in the favorites or bookmarks on the browser interface via the Plug in or ActiveX control. Consumer targeting could be based on for example information stored in databases such as name age sex income race education and geographic location and preferences such as favorites and bookmarks or other preferences that are stored on the database or exist on the browser .

A Plug in or ActiveX control that stays persistent as the user traverses the Internet may be used to add an interface object to the browser interface that permits a user to download their address book from of a database located on the Internet. Such an interface object may be added directly into the interface of the browser interface and will allow the user to send e mail as well as retrieve stored information for contacts listed in their address book .

The present invention may also be used to earn revenue based on placing advertising links included in the address book on an interface object of the Plug in or ActiveX control. Consumer targeting could be based for example on information stored in databases such as name age sex income race education and geographic location and preferences such as favorites and bookmarks or other preferences that are stored on the database or exist on the browser.

The present invention may use a Plug in or ActiveX control to add an edit box on the browser interface that allows a user to type a search directly into the browser instead of having to visit a web page that allows the user to search.

Additionally the Plug in or ActiveX control that stays persistent may poll or periodically seek at user web site or program selected intervals information from a preferred web site even though the user is surfing a different web site. As the preferred web site is polled the preferred web site can send updated information to the interface object on the user s browser such as near real time notification of the receipt of mail continuous updating of stock prices or other time sensitive information such as for example news feed headlines sports scores for selected favorite sports teams and the like. The preferred web site can control if desired the timing of the polling so as to control the traffic at the preferred web site during peak usage periods by extending the time interval between polls.

Since the shell created by the library file as described herein is an environment within which applications can be run or information displayed any information or program can be added to the interface of the browser using the present invention. The shell is independent of the browser interface the content of the browser and even the content of the shell itself. In short the shell is an adaptable piece of functionality that does not in the extreme even need to be visible to the user. Thus in use the shell can be empty and receive its contents from a web site or the shell could get Plug ins or the shell could even get new library files and learn to parse new information on the fly as the shell receives new contents from a web site or user. Thus the present invention provides significant opportunities to direct desired information from a preferred site to the user even as the user visits other sites. Of course the more user specific functionality provided by a web site via the customizable interface of the present invention the greater user loyalty that web site can engender.

In another embodiment of the present invention and with reference now to a shopping assistant button may be added to a toolbar of the Internet browser interface to facilitate on line shopping at a supported merchant web site. Functionality of this embodiment including defining the shopping assistant button is provided by computer code transmitted from a server and stored on the user s computer. The computer code monitors the Internet navigation of the Internet browser to determine if the browser is at a supported merchant web site provides an indicator for the shopping assistant button when the Internet browser is at a supported merchant web site and fills out a supported merchant check out web page.

As user herein the term on line shopping refers to the process by which a user of an Internet browser my purchase merchandise and or services over the Internet using a computer. An on line merchant e.g. a seller of merchandise and or services over the Internet may provide a web site hosted by a merchant server via which a user may access one or more web pages using an Internet browser. Various merchandise and or services may be offered for sale by the merchant via the one or more web pages. A shopper may view the merchandise description of the services select various merchandise and or services for placement into an electronic shopping cart view the contents of the shopping cart and check out as described in more detail below .

The browser interface depicted in includes an interface object comprising an interface object toolbar and a shopping assistant button that provides various functionality to the browser interface including by way of non limiting example the ability for a user the terms user and shopper being used interchangeably herein of the browser interface to create and edit an electronic wallet discussed in more detail below disable the shopping assistant button and shopping functionality from the browser interface list supported merchants query about the shopping assistant button pull down menu and functionality provided by the shopping assistant button and query for help about use of the shopping assistant button and the functionality provided thereby. Shopping assistant computer code or software e.g. a .dll or .exe. file javascript etc. is provided by a server and stored on the user s computer and operable in connection with the browser and browser interface to define and provide the shopping assistant button and other functionality provided in accordance with the present invention and as described in more detail below.

In a preferred embodiment the shopping assistant button and functionality provided thereby is provided when the interface object is added to the browser interface as described in detail above with regard to the various embodiments of the present invention. That is when the interface object i.e. toolbar is added to the browser interface the shopping assistant button and associated computer code are transmitted or downloaded to the user s computer . Alternatively the shopping assistant button and functionality may be selectively added to the browser interface upon request by the user i.e. before or after the interface object is added.

The shopping assistant functionality provided in accordance with this embodiment of the present invention is provided at least in the first instance by a server which may comprise one or more computers located physically proximate each other or physically separate from each other see e.g. that may be accessed when the user provides a predetermined Internet address or URL in the URL address window of the browser interface . The server is preferably a secure server i.e. one that is only accessible via a Secure Socket Layer SSL connection . At that predetermined Internet address the user may access one or more web pages at least one of which enables a user to set up a wallet in accordance with this embodiment of the present invention. Exemplary wallet set up web pages are depicted in and discussed in more detail below.

The shopping assistant functionality is also provided by shopping assistant computer code or software downloaded by the server to the user s computer and operable in connection with the browser interface and shopping assistant button . The shopping assistant code may be a .dll or .exe file for example javascript or other known types of computer code or software files. The shopping assistant code monitors the Internet navigation of the Internet browser by intercepting the Internet address or domain or URL each time the user causes the browser to navigate to a different Internet address. The shopping assistant code also compares the intercepted Internet address with the Internet addresses of supported merchants by comparing the intercepted address with a supported merchant file containing Internet addresses of supported merchants. The supported merchant file is preferably downloaded by the server and stored on the user s computer . Each time a user logs into the server the server compares its version of the supported merchant file with the version stored on the user s computer that version information may me transmitted by the user during the login process for example . The server downloads to the user s computer an updated version of the supported merchant file if necessary. The shopping assistant code also intercepts each web page received by the browser and determines the type of web page e.g. billing web page merchant home page merchandise page etc. by the HTML code and http request headers.

The shopping assistant code also defines the shopping assistant button and pull down menu and controls the communication between the browser the server and the merchant server for on line shopping.

The shopping assistant button may be provided as part of the interface object in accordance with the various embodiments of the present invention. However for a user to utilize and access the shopping assistant functionality the user must first set up a wallet. As used herein the term wallet refers to a file that may be encoded or encrypted particular to a user and comprised of information also referred to herein as data specific to that user provided by that user and stored in a wallet database provided on a data storage device e.g. hard drive optical disk etc. of the server see e.g. . The wallet database is structured so that the information provided by the user when setting up the wallet is stored in predefined fields or field names. Similarly a supported merchant data file is structured using the same fields or field names to the extent that the merchant check out web page s require the same information as was provided during the wallet set up process.

To set up a wallet the user must provide certain information in response to certain wallet set up web pages provided by the server . It is known to persons skilled in the art that an Internet browser receives data from a server typically HTML data for display by the browser interface . Thus reference herein to web pages being provided by a server refers to the download or transmission of data from the server for display by an Internet browser.

An exemplary wallet set up web page is depicted in and generally designated as . That web page may be accessed for example via the edit wallet option on the pull down menu of the shopping assistant button . By selecting a predetermined link on the wallet set up web page such as for example a Set up your Wallet link a wallet data entry web page such as is depicted in is downloaded by the server . At the wallet data entry web page the user enters certain information in a plurality of fields either pull down menu or alpha numeric entry . The information may be by way of non limiting example credit card type number expiration date user s first and last name billing address phone number user ID user password and various other information particular to the user. When setting up a wallet each user is also required to enter a security key see e.g. which is necessary in addition to the user s ID and password to access and use the user s wallet. When the user has completely filled out all required fields in the wallet data entry web page the user may select a Finished button not shown which transmits the user entered information to the server . In response the server downloads a wallet summary web page that includes a summary of the user s newly entered account information for review by the user prior to finally setting up the user s wallet as depicted in . If the user information is correct the user may select a link on the wallet summary web page such as for example a Click here to continue . . . link that causes the user information data to be transmitted to the server and stored in the wallet database on the data storage device . During the wallet set up procedure just described data is being transmitted between the server and the user s computer see e.g. . For example web pages and may both be transmitted by the server for display by the user s browser interface when the user selects the Set up your wallet link . When the user has completed the information required on the wallet data entry web page and selects the Finished button not shown the user information or data may be transmitted to the server . Upon receipt of the user information from the user s computer the server may transmit the wallet summary web page . Alternatively each of the above described web pages may be transmitted separately by the server and in response to a user initiated action e.g. upon selection by the user of a link or button .

The server may be that of a content provider or other Internet service provider such as for example a search engine provider or ISP collectively referred to herein as the provider . On line merchants are selected by the provider in connection with which the shopping functionality of the present invention may be used. A supported merchant file contains a list of all supported merchants including their respective Internet addresses. That file may be used by the shopping assistant computer code to determine if a user has navigated to a supported merchant web site by comparing the URL entered into the URL address window or provided in a link with the urls contained in the supported merchant file.

Once a merchant a merchant is generally designated in has been selected the provider determines the merchants check out process including the layout of check out web page s see e.g. and information required to complete the merchant s check out process and check out web page s . The provider creates a supported merchant rules and mapping file for each selected merchant also referred to herein as a supported merchant that defines a plurality of merchant field names that correspond to the user data required by the merchant during its check out processes and its check out web page s . For example and with reference to a supported merchant check out web page requires that a shopper provide billing information including for example payment method credit card number expiration date and personal information for the shopper e.g. name address and telephone number . The merchant field names correspond to wallet field names defined in the user s wallet. Each supported merchant rules and mapping file may contain different merchant field names as each merchant may require different information during its check out process. However all merchant field names correspond to wallet field names.

The supported merchant rules and mapping file maps the wallet data i.e. wallet field names to the required merchant data i.e. merchant field names . For example an entry in the merchant rules and mapping file defining a first name field and last name field may be structured as follows 

With reference now to an exemplary check out process will now be described. As different merchants may have different check out processes and provide different check out web pages the following description is merely illustrative and not intended to limit the scope of or otherwise define the present invention. In addition the following description does not track the entire on line shopping process which may also vary from merchant to merchant but only the check out process which generally begins after the user has selected a Check Out or other similar button on a merchant web page.

When a user launches their Internet browser the interface object automatically establishes a connection between the user s computer and the server . Various user data is downloaded by the server to the user s computer . The user may cause the Internet browser to navigate to any Internet address by typing the address in the URL address window see e.g. or by selecting a link on a web page. Regardless of how the browser is caused to navigate the Internet move from web site to web site the shopping assistant code intercepts the URL for each Internet site navigated to by the user and compares that URL with the supported merchant data file. If a match is found the shopping assistant code provides a user perceptible indicator on the shopping assistant button such as for example a yellow circle that indicates that the user has navigated to a supported merchant web site. The shopping assistant code also makes a request to the server for a download of a file containing rules and mapping data for that merchant and that provides details on that merchant s check out process.

The shopping assistant code also intercepts each web page received by the browser to determine the type of web page e.g. a billing page e mail address request credit card information request etc. by looking at the HTML code and the http request headers. That information was obtained during the provider s selection of merchants and creation of the supported merchant data files. Using the merchant s rules and mapping file the shopping assistant code can determine the specific page being served and how the user s information should be provided in that page.

If the shopping assistant code determines that the user s wallet is required for a particular page it opens a security key window in the user s browser interface asking the user to enter a security key SK in a data entry window as depicted in . Once the user has entered a SK and selected a Continue button that security key is securely transmitted preferably using https by the user s computer to the server . The server compares the user data e.g. ID and SK with data previously stored in that user s wallet on the wallet database . If the data matches the SK is verified and an authorization is transmitted by the server to the shopping assistant code a rejection is transmitted if the data does not match. The authorization may be provided as a wallet information window such as is depicted in . When a SK is successfully verified by the server a secure cookie is transmitted over SSL to the secure server and the user s on line shopping session using his her wallet begins when the secure cookie is set. The secure cookie is aggressively timed out and is preferably valid for up to one 1 hour.

If the user desires to continue the check out process using the shopping assistant functionality of the present invention the user may select a Continue button . If the user desires to check out using the merchant s check out process the user may select a Cancel button . When the user selects the Continue button the shopping assistant code retrieves the user s wallet from the wallet database on the server and automatically fills in the merchant s check out web page depicted in . The user s wallet is securely transmitted by the server preferably using https. The user s wallet and thus the user s personal data need not be stored on the user s data storage device but only in temporary memory also referred to herein as main memory or RAM and used by and in connection with the shopping assistant code and functionality of this embodiment of the present invention. The user s data may automatically expire e.g. after a predetermined time or it may be flushed from memory when the user closes the browser.

Depending upon the type of web page displayed by the browser the shopping assistant code provides the appropriate user data from the user s wallet temporarily data in RAM to the web page. For example if the shopping assistant code determines the web page is a billing address web page the user s billing address data will be copied from RAM to populate the fields in the billing address web page and ultimately communicated to the merchant s server. During the check out process the shopping assistant code operates in connection with the merchant rules and mapping file and with the user s wallet to automatically provide user data required by the various merchant check out web pages.

The wallet database may contain only wallet data or alternatively the wallet data may be located in a database with other data. While the wallet is preferably used by and in connection with the shopping assistant button and functionality the wallet may also be used by applications other than shopping assistant such as for example bill paying shopping without shopping assistant and in connection with virtually any on line transaction that requires that the user enter personal data. The wallet provides secure transmission and handling of the user s data and makes that data available for use by the user in connection with various on line transactions without unnecessarily compromising the security of that data.

Once a user has set up a wallet the functionality provided in accordance with this embodiment of the present invention is now available to the user as the user shops on line. Preferably the on line shopping functionality is available for use in connection with a supported merchant regardless of the Internet site to which the user is connected via the Internet browser . Thus the user need not be connected to the provider s Internet site or even to a supported merchant s web site. The shopping assistant code handles all communication between the user the user s computer the server the wallet database and the merchant s Internet site and check out web page s .

In accordance with another embodiment of the present invention a button i.e. interface object may be added to a browser interface toolbar such as an interface object toolbar see e.g. by a party other than the provider . For example a link may be provided on a corporate web site that enables visitors to that web site to add a button to their interface object toolbar that would provide a one click link to that corporate web site from the browser interface . Corporations or any entity hosting a web site may sponsor the provider because the addition of the corporate button to the interface object toolbar enables a user to return to that corporate web site from any other web site with a single mouse click. The addition of the corporate button to the browser interface i.e. the toolbar thus establishes an affinity between a user and the corporate web site. The corporate sponsor designs the button e.g. look one click button or pull down menus icon etc. and provides the button design and URL data to the provider for incorporation in a database maintained by the provider and associated with browser interface. Thus a corporate sponsor may have a button defined in the provider database.

If a visitor to the corporate web site wants to install the corporate button in their browser interface but does not have a browser interface toolbar installed the present invention also enables installation of the browser interface toolbar and corporate button in the browser interface . On the other hand the corporate button may be added to a toolbar of the browser interface or may be added as a button of an interface object toolbar .

The present invention may also be used as a teaching tool. For example the interface object toolbar may include a plurality of buttons which may be caused to change color blink highlight etc. to direct a user s attention to that button or to the functionality provided by that button.

The present invention may also enable a provider or corporate sponsor to notify a user of certain properties of the provider or corporate sponsor when that user visits a competing website. For example when a user visits an automotive website the corresponding provider property e.g. provider Autos would be highlighted to alert the user of the availability of that feature at the provider website. Software may be provided on the user s computer to intercept the URL each time the user causes the browser to navigate to a web site. That intercepted URL may be compared with a file containing a plurality of urls for the provider properties.

Importantly determining the web site to which the user has navigated at any particular instant is determined by the user s computer alone. Thus no information regarding the user s activity on the Internet is communicated to any server.

It will be obvious to persons skilled in the art and from the disclosure provided herein that the various embodiments of the present invention may be carried out using software provided on the user s computer and on the various servers.

It is to be understood that the present invention may be implemented utilizing any number of computer technologies. For example although the present embodiments are disclosed as operable in connection with the Internet the present invention may be utilized over any computer network including for example a wide area network. Similarly the user computer may be any device that may be coupled to the network including for example personal digital assistants web enabled cellular telephones hard wired telephones that dial into the network mobile computers personal computers Internet appliances and the like. Furthermore the servers described herein may be of any type running any software and the software modules objects and plug ins described herein may be written in any programming language. Lastly the database and storage devices described herein may utilize any storage technology including for example local computer memory network attached storage and any known storage medium such as magnetic or optical.

Thus while there have been shown and described and pointed out fundamental novel features of the invention as applied to preferred embodiments thereof it will be understood that various omissions and substitutions and changes in the form and details of the disclosed invention may be made by those skilled in the art without departing from the spirit of the invention. It is the intention therefore to be limited only as indicated by the scope of the claims appended hereto.

