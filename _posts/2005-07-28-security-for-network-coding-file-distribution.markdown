---

title: Security for network coding file distribution
abstract: A content distribution mechanism that relies on cooperative desktop PCs to distribute content is disclosed. The mechanism distributes content in a robust manner by allowing at least one intermediate network node (i.e., between a source and client) to generate and send packets that contain a linear combination of the portions of content available at the node. Such linear combinations may be created by the source and client using at least a portion of the original content file in either encoded or unencoded form. After the client has received enough linearly independent combinations of packets, the original content may be reconstructed. Further, security for network coding file distribution may be employed to maintain the efficiency and security of the content distribution mechanism. A security server may generate security information using a hashing algorithm including the property of producing security information for each block which survives the process of creating encoded blocks. The security server may generate a unique set of security information for each node participating in the content distribution which each node may then use to verify that the blocks being examined are valid and were created from a linear combination of the original blocks of the file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08140849&OS=08140849&RS=08140849
owner: Microsoft Corporation
number: 08140849
owner_city: Redmond
owner_country: US
publication_date: 20050728
---
This application is a continuation in part of U.S. application Ser. No. 11 152 754 filed Jun. 13 2005 now U.S. Pat. No. 7 756 051 which claims the benefit of U.S. provisional Application No. 60 585 212 filed Jul. 2 2004.

In today s networked computing environments it is often necessary or desirable to provide large scale content delivery to nodes in a network. One mechanism used for large scale content delivery is a content distribution system using network coding. In general a content distribution system is a network of interconnected cooperative nodes using network coding to distribute any type of digital content from a source to one or more of the interconnected cooperative nodes. Typical content distribution systems first have to construct an efficient overlay topology and then schedule the transmittal of information across that topology such that all nodes share the distribution effort evenly.

Several factors may affect the efficiency of typical content distribution systems. First the efficiency of a typical content distribution system may decrease as the number of nodes in the overlay topology increases. Second the efficiency of a typical content distribution system may decrease as the network becomes more heterogeneous particularly with respect to the bandwidth capabilities of each individual node. Third the efficiency of a typically content distribution may decrease as processing overhead is added to implement incentive mechanisms designed to prevent or minimize leeching nodes. Leeching nodes are nodes that do not cooperate on the network and are modified so as to act only as receivers on the network thus increasing their download speed.

This summary is provided to generally introduce in a simplified form the reader to one or more select concepts described below in the detailed description. This summary is not intended to identify key and or required features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Disclosed herein are various technologies for providing fast and scalable content distribution in a content distribution network.

In accordance with some of the technologies described herein digital content e.g. a file may first be divided into N blocks of content which may or may not be encoded. One or more of the N blocks may then be distributed among nodes cooperating on the network.

The distributed blocks of content at any of the cooperating nodes of the Content Distribution Network may be encoded into encoded data packets. The encoded data packets at a cooperating node of the Content Distribution Network may contain information about the distributed blocks of content received at that particular cooperating node. Further the encoded data packets at that particular cooperating may also contain information about other encoded data packets. Thus an encoded data packet may be used in place of any distributed of the N blocks of content when reconstructing the digital content at a downstream receiving node.

That is a client seeking to download at least a copy of the digital content divided into N blocks of content would download N encoded representations of the N blocks from random ones of the cooperating nodes of the Content Distribution Network rather than being required to locate and download each of the original N blocks of content from either the source node or any combination of the nodes of the network.

The cooperating nodes in the Content Distribution Network may trust the source of the file because for example a cooperating node may have verified the trustworthiness of the source before deciding to retrieve the digital content. However in the Content Distribution Network the cooperating nodes may not trust one another and in addition the cooperating nodes may not be aware of other cooperating nodes in the Content Distribution Network due to issues of network topology as well as the transitory nature of cooperating nodes entering and exiting the Content Distribution Network.

Also in accordance with some of the technologies described herein the blocks whether encoded or unencoded may be verified to ensure that blocks are genuine and represent the digital content e.g. a file . In addition the cooperative nodes may employ a system of alerts to notify other cooperative nodes in the Content Distribution Network that a problem has been detected with regard to the encoded blocks.

Malicious nodes may seek to disrupt or delay distribution of the digital content through the Content Distribution Network. These malicious nodes may employ a variety of techniques to accomplish the disruption or delay of the distribution of the digital content for example by creating encoded blocks which are not representative of the original digital content and distributing those encoded blocks into the Content Distribution System. The Content Distribution System may make use of several techniques to defeat the malicious node or nodes and allow the distribution of the digital content to continue.

Disclosed herein are various technologies for facilitating the delivery of digital content in a computer network.

In accordance with various embodiments described herein a source node storing a file or piece of digital content to be shared among receiving nodes may communicate with a management service on the network to announce that the file or piece of digital content is available. Before commencing downloading or distributing the file or piece of digital content the source node of the file or piece of digital content may divide the file or piece of digital content into a predetermined number of blocks of a predetermined size and provide that information any one of a management service on the network a different service on the network receiving nodes on the network that may download the content or to any node on the network that may otherwise find the content useful.

Once the source node has announced that the file or piece of digital content is available for download or distribution a receiving node on the network may communicate with the management service and select the file or piece of digital content for download. In at least one implementation of content distribution using network coding when the receiving node has selected the file or piece of digital content to download the receiving node may communicate with the management service on the network to learn of other receiving nodes that are to receive at least portions of the distributed file or piece of digital content from the source node.

When the source node has completed dividing the file or piece of original digital content into the predetermined number of blocks the source node may then encode the blocks by choosing a set of mathematical modifiers in accordance with a mathematical system that has been chosen to encode the blocks. This chosen mathematical system may treat the blocks the file or piece of digital content as variables in an equation and may further treat the encoded block as the solution to the equation. Unencoded blocks may also be used in the same manner and may also be included equally in the mathematical system with encoded blocks. For example unencoded blocks may be considered to be a linear combination of the original block and no other blocks. Further the source node may choose to encode only specific regions of the file and leave other regions unencoded.

Thus once a receiving node has received enough encoded or unencoded blocks and their corresponding mathematical modifiers the receiving node may solve the system of equations to learn the value of the variables i.e. the blocks . Any mathematical system with the properties disclosed herein may be used and therefore the implementations described herein are not so limited.

When the source node has encoded at least one block of the original digital content the source node may begin distributing the one or more blocks to receiving nodes. In at least one alternative implementation of content distribution using network coding a receiving node may not send a request for a specific block but rather the receiving node may send a request to receive the set of mathematical modifiers. Further once the receiving node has received the requested mathematical modifiers the receiving node may then perform a calculation in accordance with the mathematical system to determine whether the mathematical modifiers provide additional information helpful to solving the mathematical system. Finally upon determining the mathematical modifiers contain information helpful in solving the mathematical system the receiving node may send a request to the source node to send the encoded block corresponding to the set of mathematical modifiers.

Additionally in at least one other implementation of content distribution using network coding once a receiving node has received any number of blocks the receiving node may then act as a sending node functioning similarly to the source node in the content distribution network. For example upon receiving requests from other receiving nodes the receiving may serve as a source node by re encoding blocks at the receiving node in manner similar to that used by the source node to originally encode the blocks.

Upon receiving a minimum number of blocks and mathematical modifiers a receiving node may begin solving the mathematical system to decode the received blocks. Solving of the mathematical system may begin using any mixture of encoded or unencoded blocks and may begin before the full set of blocks has been received. Once the blocks have been decoded to reproduce the original blocks the receiving node may combine the decoded blocks to create a copy of the original file or piece of digital content.

In at least one other implementation of content distribution using network coding a security server may be added to defeat malicious nodes that may be present in the network. Such malicious nodes may seek to disrupt or delay the propagation of both unencoded and encoded blocks in the content distribution network by implementing e.g. an entropy attack a jamming attack or a denial of service attack within the content distribution using network coding system.

In an entropy attack a malicious node may encode and distribute blocks that are linearly dependent from other unencoded or encoded blocks that are stored locally. In creating linearly dependent blocks the malicious node reduces the diversity of blocks in the content distribution using network coding system and in doing so makes it more difficult for other cooperative nodes to locate encoded or unencoded blocks that contain information useful for decoding the original set of blocks. Since the cooperative nodes in the content distribution using network coding system may determine the linear independence of an unencoded or encoded block by receiving only the mathematical modifiers and not the unencoded or encoded block itself cooperative nodes may inherently defeat such an attack by not requesting the malicious node send the unencoded or encoded blocks determined to be linearly dependent.

In a jamming attack a malicious node may create an invalid encoded block using information not related to the original blocks of the digital content yet generate a set of mathematical identifiers that indicate the block is linearly independent to a querying cooperative node. Thus the malicious node may entice the cooperative node into downloading an encoded block that is not usable in decoding the original blocks. The cooperative node may then use the invalid encoded block when the cooperative node produces subsequent encoded blocks which may result in each of the subsequent encoded blocks also being invalid. If the cooperative node should then share those blocks with other cooperative nodes which in turn may create subsequent encoded blocks those subsequent encoded blocks may also be invalid. The insertion of a single bogus encoded block into the content distribution using network coding system may result in a large number of invalid blocks.

According to at least one example implementation a jamming attack may be defeated by employing a security server which generates a set of security parameters and a hash of the file or piece of digital content. A hashing function H may have the properties of being collision resistant i.e. finding two elements x and y where x y and H x H y is a complex calculation which may difficult to solve and homomorphic i.e. for any two elements x and y H x H y H x y or i.e. for any two elements x and y H x y H x H y .

When a cooperative node joins the content distribution using network coding system the cooperative node may download a hash of the entire file or piece of digital content and a set of security parameters corresponding to the blocks of the file or piece of digital content. The security parameters may be uniquely generated for each new cooperative node that enters the content distribution using network system.

Once a cooperative node has received either an unencoded or encoded block and a set of mathematical modifiers from another cooperative node in the content distribution using network coding system the cooperative node may use the hashing function H to calculate the actual hash of the unencoded or encoded block and then may further calculate the expected hash of the unencoded or encoded block by performing the hashing function using the security parameters and the mathematical modifiers. If the actual hash of the unencoded or encoded block is equal to the expected hash the validity of the unencoded or encoded block has been verified.

A cooperative node may reduce the amount of time the cooperative node spends verifying blocks by using one or more of the following techniques.

For example a cooperative node may not check each unencoded or encoded block which it may receive as the cooperative node may choose to verify blocks at a regularly timed interval or when a set number of unencoded or encoded blocks have been received. In addition a cooperative node may not check each unencoded or encoded block it may receive as the work of verifying unencoded or encoded blocks may be shared among the cooperative nodes of the network and the discovery of invalid blocks is communicated using a system of alerts.

Further according to at least one example implementation a cooperative node may track which unencoded or encoded blocks have been checked. For example a cooperative node may employ a secure window to store valid encoded or unencoded blocks and an insecure window to store encoded or unencoded blocks which have not been validated.

In addition according to at least one example implementation a cooperative node may check a batch of unencoded or encoded blocks in the insecure window. The cooperative node may check a batch of unencoded or encode blocks by creating a new encoded block from a linear combination of the set of unencoded or encoded blocks stored in the insecure window. The method described above with reference to verifying the validity of a single block may then be applied to the new encoded block and the new set of random mathematical identifiers. If the new encoded block is determined to be invalid this is an indication that at least one of the unencoded or encoded blocks in the set of unencoded or encoded blocks is invalid.

Once the cooperative node has determined one or more unencoded or encoded blocks are invalid the cooperative node may wish to discover the identify of the one or more invalid unencoded or encoded blocks stored in the insecure window. A cooperative node may reduce the time taken to discover the identity of the one or more invalid unencoded or encoded blocks by using a binary search to discover the identity of the one or more invalid unencoded or encoded blocks.

For example the set of unencoded or encoded blocks in the insecure window may be divided into two sets of unencoded or encoded blocks and the method described above with respect to verifying the validity of a batch of unencoded or encoded blocks may be performed on each of the two sets to produce a new encoded block for each of the two sets. If one of the new encoded blocks is determined to be valid the unencoded or encoded blocks in that set are all valid and may be moved to the secure window. The remaining set of unencoded or encoded blocks may then be divided again and the method repeated until all the invalid blocks have been discovered.

The encoding and re encoding of the original blocks of the file or piece of digital content and the distribution of those blocks suggests that a malicious node could quickly propagate invalid information throughout the Content Distribution Network. According to at least one example implementation cooperative nodes may employ a system of alerts to communicate to other cooperative nodes with which it has been exchanging unencoded or encoded blocks that an invalid block has been discovered and the other cooperative nodes may have stored invalid blocks created invalid encoded blocks and distributed those invalid encoded blocks to other cooperative nodes.

For example a cooperative node may maintain a list corresponding to the unencoded or encoded blocks in the insecure window the list recording the source node of received unencoded or encoded blocks and the recipient nodes of encoded blocks produced on the cooperative node. If an invalid unencoded or encoded block is discovered in the insecure window the cooperative node may then utilize the list to send an alert to the source node of the invalid unencoded or encoded block as well as send an alert to any other cooperative node that has received an encoded block created from the set of unencoded or encoded blocks in the insecure window.

This may decrease the amount of time each cooperative node utilizes to verify unencoded or encoded blocks. Each cooperative node may trust that other cooperative nodes are sharing the work of verifying unencoded or encoded blocks and will alert the cooperative node if an invalid unencoded block is discovered in Content Distribution System.

Once a cooperative node has received an alert it may then place the unencoded or encoded blocks stored in the insecure window in quarantine and undertake checking the unencoded or encoded blocks that have been placed in quarantine. The node may also stop using the unencoded or encoded blocks in its insecure window to create new encoded blocks that it distributes to other cooperative nodes.

However a malicious node may utilize the alert system to perform a denial of service attack in which the malicious node sends alerts to cooperative nodes in the content distribution using network coding system when no alert is necessary in order to force the cooperative nodes to undertake the operations described above unnecessarily.

In at least one example implementation this denial of service attack may be defeated by the cooperative node in the content distribution using network coding system verifying the validity of the alert before undertaking any action. The alert may be verified using a method similar to the method described above for batch checking unencoded or encoded blocks in the insecure window or using any method that produces the result of verifying the validity of the alert.

As used herein the term node may refer to any computer system device or process that is uniquely addressable or otherwise uniquely identifiable in Network and that is operable to communicate with other nodes on Network . For example and without limitation a node may be a personal computer a server computer a hand held or laptop device a tablet device a multiprocessor system a microprocessor based system a set top box a consumer electronic device a network PC a minicomputer a mainframe computer a distributed computing environment that includes any of the above systems or devices or the like.

In cases where a node on Network comprises a computer system or processing device of some form the node may typically include a processor one or more forms of computer readable media and one or more communications connections which allow the node to operatively connect to Network . As used herein computer readable media may be any media that can store or embody information that is encoded in a form that can be accessed and understood by a computer. Typical forms of computer readable media include without limitation both volatile and nonvolatile memory data storage devices including removable and or non removable media and communications media.

Communication media may embody computer readable information in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. The term modulated data signal may refer to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communications media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

The functionality that is described herein with respect to a particular node on Network may be implemented by the node itself by the node in cooperation with one or more modules that may be included in or otherwise associated with the node or by a number of sub modules. For example in at least one implementation of content distribution using network coding operations performed by a node or module on Network may be implemented as computer executable instructions that are embodied in one or more computer readable media. In these implementations the operations of the node or the module may be executed by a processor or processors in the node in which the module is included or associated. In other implementations the operations of a node may be implemented as hardware firmware or some combination of hardware firmware and software either as a part of or in some other way associated with the node in which the module is included or associated. Furthermore the functionality that is described herein with respect to a particular node may be carried out by or distributed across a number of nodes.

Content distribution using network coding may be further explained with reference to by considering an example implementation in which Source is to distribute Content A to participating nodes over Network . Although Content A may be any type or size of file for the purposes of this example assume Content A is composed only of two digital bits which include a binary digit 0 and a binary digit 1.

According to at least one example implementation Source may divide Content A into Block B containing a binary digit 0 and Block C containing a binary digit 1. Further Source may send Block B to Node and may also send Block C to Node . Node may forward Block B to Node as well as to Node . Node may forward Block C to Node as well as to Node .

Having received Block B and Block C Node may then weigh the efficiency of forwarding to Node Block B against Block C . This efficiency determination may take into consideration that Node may have no knowledge of any other node to which Node may be connected or of any data that the nodes to which Node is connected may require in order to reconstruct Content A .

An example scenario resulting from the aforementioned efficiency determination may contemplate Node sending Block B to Node . Node may then be able to forward useful information only to Node and Node may have to wait to receive Block B in order to reconstruct Content A . Another example scenario may contemplate Node sending Block C to Node . Node may then be able to forward useful information only to Node and Node may have to wait to receive Block B in order to reconstruct Content A .

However at least one implementation of content distribution using network coding includes Node encoding Block B and Block C to form Block D which may then be forwarded to Node . For example Node may create Block D by performing an exclusive OR operation of the information corresponding to Block B and Block C at Node . As a result Block D may contain binary digit 1 which is the exclusive OR of binary digit 0 corresponding to Block B and binary digit 1 corresponding to Block C .

Node may then forward Block D to Node and Node . Further since the information corresponding to both Block B and Block C may be recovered by performing a decoding function on Block D Block D is simultaneously useful to both Node and Node in order to reconstruct Content A .

That is Node may already have received Block B from Node . Then having received Block D from Node and having knowledge of the encoding scheme used to create Block D Node may perform a decoding function on Block D to calculate the information corresponding to Block C without actually receiving Block C . Thus Node may utilize the information corresponding to Block B and Block C to reconstruct Content A according to at least one implementation of content distribution using network coding.

Similarly Node may have already received Block C from Node . Then having received Block D from Node and having knowledge of the encoding scheme used to create Block D Node may perform a decoding function on Block D to calculate the information corresponding to Block B without actually receiving Block C . Thus Node may utilize the information corresponding to Block B and Block C to reconstruct Content A .

One or more implementations of content distribution using network coding may further provide an end system content distribution solution that efficiently utilizes network resources to provide client nodes with blocks of information from multiple network paths. Such efficient utilization of resources may include providing one or more nodes on Network with advance knowledge of the arrangement and locations of other nodes on Network as well as advance knowledge regarding which of such nodes on Network are to distribute original blocks and which nodes are to distribute encoded blocks. Thus content distribution using network coding may be relevant even as networks increase in size and nodes on the network toggle between being online and offline.

For example when a source node sends a block to a receiving node the source node may generate and send a linear combination of the data available at the source node. The linear combination may include an exclusive OR operation. Thus when a receiving node receives sufficient linearly independent combinations of blocks the receiving node may then reconstruct the original digital content by solving a system of linear equations to decode the received linear combinations.

Further to reduce wasted transfers nodes on Network may endeavor to send only blocks having innovative information to other nodes on Network although absolute compliance to this desire is not required for effective implementation of content distribution according to the examples described herein. Such efficient transfers may be accomplished by the nodes on Network periodically exchanging information regarding the blocks stored locally at the respective nodes on Network . The periodic exchange of information may occur when a respective one of the nodes on Network has determined that locally stored information may be useful for another node to reconstruct at least a portion of the original digital content.

The aforementioned periodic exchange of information may be implemented by storing the information at one or more central servers on Network . Various nodes may then access one of the central servers to determine which of the other nodes on Network store blocks that contain innovative information. Alternatively decentralized mechanisms may be used to communicate directly with other nodes on Network to exchange information regarding the blocks stored at the respective nodes. As a further alternative any combination in whole or in part of the approaches discussed above may be implemented.

Thus when a particular node on Network has knowledge of the information contained in the blocks stored at other nodes on Network the particular node may request that the other nodes transfer only the information that the particular node currently lacks i.e. innovative information . Alternatively a particular node on Network may randomly generate new blocks and push the new blocks to other nodes on Network regardless of whether or not the other nodes have determined the particular node has innovative information stored locally. In response the respective receiving nodes may discard any packet that may be determined to not contain innovative information for the respective receiving node.

A further example implementation of content distribution using network coding may be explained by considering an example scenario in which Source is to distribute over Network an original content file containing six bytes i.e. Bytes . Further the example scenario may assume the sample values Byte 70 Byte 91 Byte 5 Byte 35 Byte 22 and Byte 15.

By this example Source may create multiple blocks from the original content file with each block includes two sequential bytes from the original content file. For example Source may create Block comprising Byte and Byte Block comprising Byte and Byte and Block comprising Byte and Byte .

Source may then create linear combinations of Block Block and Block using a set of coefficient vectors to encode Block Block and Block into a single encoded block. The coefficient vectors may be chosen randomly chosen according to a set schedule chosen from a central repository of such information on the network or chosen by any method that produces a set of coefficient vectors useable by Source in order to linearly encode Block Block and Block .

For the purposes of describing the present example Source may choose coefficient vectors randomly from a set of numbers between 1 and 256. The set of numbers from which coefficient vectors may be chosen may be any set of numbers for example a set of numbers which will produce the greatest number of linearly independent coefficient vectors in the content distribution system. In preparing the encoded block for example Source may choose a first coefficient vector to be 6 90 and 52. In order to create the encoded block Source may treat the individual bytes in the block as a vector. However Source may linearly encode the information in each Block Block and Block in any manner that is consistent with producing a new block containing information that is a linear combination of information stored within the original block. In this example the first encoded block called eis created by multiplying the coefficient vectors by each value in the vector.

For example using the first coefficient vector 6 90 and 52 and byte values Byte 70 Byte 91 Byte 5 Byte 35 Byte 22 and Byte 15 Source may creates

Source may then create a new encoded block eby repeating the operation used to create eusing a new coefficient vector. For example using another coefficient vector 18 2 128 and byte values Byte 70 Byte 91 Byte 5 Byte 35 Byte 22 and Byte 15 Source may produce encoded block eusing the same method as above. In this example 

Node may then learn of the linear independence of the linearly encoded blocks in possession of other nodes on network to further determine whether or not the blocks contain innovative information that Node may use to decode the encoded blocks and recover the original content file. Thus Node may then send a query to Node to request that Node send information that Node may use to determine the linear independence of the information encoded in the blocks that Node currently possesses.

Node may use any method to produce the information that may enable Node to determine the linear independence of the information in the encoded blocks. For example Node may create a linear combination of the individual coefficient vectors currently at Node to produce a master coefficient vector. In this example encoded block ehaving coefficient vector 18 2 128 is currently at Node and therefore Node may not need to perform the aforementioned linear combination. Therefore Node may forward coefficient vector 18 2 128 to Node .

Node may receive coefficient vector 18 2 128 from Node and seek to determine the linear independence of the received coefficient vector with respect to the coefficient vectors of the blocks Node currently possesses. Any mathematical operation that results in Node determining the linear independence of the coefficient vectors received from Node may be used.

For example Node may place coefficient vector 18 2 128 received from Node into a matrix and produce a row reduced form of the matrix. Node may then analyze the number of non zero rows in the row reduced form of the matrix to discover a rank of the matrix. The rank of the respective matrices indicates the number of linearly independent rows of the respective matrices. In the current example by adding the received coefficient vector to the matrix and calculating the rank of the matrix Node is determining the number of solutions to the system of linear equations Node currently possesses.

For example Node may calculate the rank of the matrix formed using the set of coefficient vectors of encoded blocks that Node already possesses. Node may calculate rank by performing row reduction on the matrix. Row reduction for calculating the rank of a matrix is a known mathematical operation. Thus calculating the rank of the matrix at Node is not limited to any particular method.

Accordingly the row reduced version of the matrix 6 90 52 is 1 15 8. and the number of non zero rows in the row reduced matrix is 1 and accordingly the rank of the matrix is 1.

Further Node may now form a new matrix using the coefficient vectors of the blocks that Node already possesses and the coefficient vector received from Node which in this example would be

In this example while Node performs the above calculation Node may have further received an additional encoded block from Source . For example Source may choose another coefficient vector 213 91 159 to encode a new block ethat would equal

Node may send Node a new request to determine if Node possesses any information which is linearly independent with respect to the information Node currently possesses. Node may again prepare a master coefficient vector which may be created from a linear combination of the coefficient vectors of all the encoded blocks that Node possesses i.e. eand e with coefficient vectors 18 2 128 and 213 91 159 respectively. Node may prepare the master coefficient vector by producing the linear combination of the above coefficient vectors to produce a new coefficient vector 231 93 287 which Node then transmits to Node .

Node may receive new coefficient vector 231 93 287 and determine whether the new coefficient vector is linearly independent with respect to the coefficient vectors Node currently possesses. Node has stored the results of the last calculation of the rank i.e. 2 of the matrix formed using the coefficient vectors of block eand block e. Node may for example produce a new matrix using the coefficient vectors of block eand block ein combination with the new coefficient vector received from Node resulting in a matrix of the form

Node may use any method to produce a newly encoded block that is consistent with sending linearly independent information with regard to the original encoded blocks received from Source . For example Node may create a sum of eand eto produce a new encoded block e and emay equal to

For example Node may have received block efrom Node and Node may determine that enough encoded blocks have been received to begin decoding the encoded blocks. Node may then solve the system of linear equations represented by the encoded blocks that Node possesses in order to determine the values of the vectors in the original unencoded blocks possessed by Source . Node may use any method suitable to solve the system of linear equations to determine the values of the vectors stored in the original unencoded blocks and is not limited in the way in which Node may perform the calculation.

Node may then solve the system of linear equations using any method and in solving the equations determines that x i.e. unencoded block equals

Although the example used in conjunction with utilized certain simplifications obviously different choices may be made for alternative implementations. For instance alternative examples for exchanging information regarding the coefficients used to encode packets may contemplate transmitting re encoded blocks without determining in advance whether the re encoded blocks contain new information or not exchanging information at all. Similarly although all received information was used to create new encoded blocks a subset thereof may be used. Other tradeoffs or choices could also be made such as the particular encoding scheme depending on the particular application.

Further although the example used in conjunction with was implemented with a real number system for illustrative purposes the example may have been implemented using any mathematical number system for example a finite or Galois field.

Operation may represent a node obtaining information about a specific block which exists on the network. Referring back to the example illustrated with respect to block information may take the form of a set of coefficients used to re encode the block. However block information may also take any form or structure that gives an indication as to the contents of the block and block information may be obtained in any manner consistent with the capabilities of the network the nodes on the network or the like. For example block information may be obtained directly from another node on the network the block information may be obtained from a central repository of such information on the network or the node may have already received the block and may have inspected the block to determine the information.

Decision may represent a determination by the node as to whether or not the block information indicates that the block contains innovative information that may be helpful in reconstructing at least a portion of the original content. Information that is innovative to the node is for example a whole block or a portion of a block that the node does not currently possess. This determination may take any form for example by performing a calculation using the block information. Alternatively any operation using the block information which returns an indication as to whether or not the information in the block is innovative may be used. For instance in the example associated with the determination may be performed by calculating the rank of a matrix.

Operation subsequent to positive decision may refer to the block being transferred to intermediate block storage which may comprise physical memory a hard drive non volatile flash memory or the like. Once Operation has been completed procedure flow continues to Decision Block .

Decision subsequent to negative decision and operation may represent a determination of whether a minimum number of blocks necessary to reassemble the original file content have been received. The minimum number of blocks necessary to reassemble the original file content may be N which is the number of blocks into which the original file content is divided. In response to a negative determination processing flow may return to Operation so further blocks may be processed. In response to positive decision processing flow may proceed to Operation .

Operation may refer to an operation wherein a number of encoded blocks that are stored in intermediate block storage are decoded to produce the set or subset of original blocks that comprise the file. Decoding of the blocks may take a form in which the result of the decoding operation is the original set of blocks that may have been created by the source of the file in the Content Distribution Network. Processing flow may then proceed to Operation .

Operation may represent the set of original blocks produced by the decoding operation in Operation being combined to assemble the original content file. A method by which the original blocks may be reconstructed to form the original content may be used.

The order and timing of the operations associated with are provided as an example only. In alternative implementations either or both of the order and timing of the operations may be varied. For example Operation may take place after Operation if enough encoded blocks have been received to begin decoding at least one encoded block.

Operation may refer to a determination that the sender possesses a number of blocks that contain innovative information that may be useful for decoding another block or set of blocks on another node in the Content Distribution Network. The determination may occur locally on the sender on another node on the network on a central node responsible for such operations or at any other suitable location. The determination of whether the block contains innovative information may result in a linear combination of the innovative information with other information at the sending node being distributed on the Content Distribution Network.

Operation may refer to the sender re encoding one or more local blocks to produce a newly encoded block. The re encoding may comprise an operation that is in accordance with combining any number of blocks stored locally on the sender to produce a new block which may be used by another node on the Content Distribution Network.

Operation may refer to the sender transmitting the newly encoded block created at Operation . The newly encoded block may be transmitted in accordance with the aspects of the current embodiments and is not limited in the manner in which it may be transmitted.

Operation which may be optional may refer to the sender choosing to further transmit the information used to re encode the block in a separate step if the information used to re encode the block was not encoded into the new encoded block. The block encoding information may be transmitted in accordance with the aspects of the current embodiments and is not limited in the manner in which it may be transmitted.

The order and timing of the operations associated with are provided as an example only. In alternative implementations either or both of the order and timing of the operations may be varied. For example Block may be undertaken to re encode new blocks that are useful for a receiving node as well as all the nodes connected to the receiving node. In this manner the receiving node may create blocks that are useful to nodes other than the node with which it is in direct communication.

Network Manager may enable node to communicate with other nodes servers devices or the like in the Content Distribution Network. Network Manager may send and receive packets or blocks of information send or receive requests to perform an operation of any type or send and receive other information used by node to participate in the Content Distribution Network.

In communicating with other nodes on the Content Distribution Network Network Manager may correct errors during transmission suspend and resume the sending of information to other nodes servers devices and the like on the Content Distribution Network and may further verify that node is permitted to participate in the Content Distribution Network. Further still Network Manager may verify the legitimacy or authenticity of the encoded blocks.

Network Manager may further communicate with Content Manager via e.g. an application programming interface API a remote procedure call over a network. Network Manager may transmit blocks information with respect to blocks stored elsewhere on the network or information that Content Manager may require for node to participate in the Content Distribution Network in accordance with the aspects of the current embodiments.

Content Manager may receive the number and size of blocks that the original file content was divided into by an origination source from Network Manager . Content Manager may further receive blocks from Network Manager send blocks using Network Manager commit received blocks to Encoded Block Store abort the storage of blocks that have not been received in their entirety or that have been determined to contain an error or corruption and transfer blocks that are stored within Encoded Block Store to both Network Manager and File Manager .

Content Manager may also perform at least one calculation to determine if a node in the Content Distribution Network contains innovative information that is useful to the node in decoding the original blocks into which original file content was divided by an origination node on the Content Distribution Network. If Content Manager determines that a node in the Content Distribution Network contains innovative information Content Manager may communicate with Network Manager and issue a request to receive the block issue a request for the node containing the innovative information to re encode the information and send the information or issue another request for Content Manager to function in accordance with the participation of the node in the Content Distribution Network.

Further Content Manager may also perform at least one calculation on behalf of another node on the Content Distribution Network to determine if the node contains information innovative to another node on the Content Distribution Network.

Content Manager may further re encode blocks stored within Encoded Block Store using a method for the node to produce encoded blocks that are useful to other nodes in the Content Distribution Network or for the node to participate in the Content Distribution network in accordance with the aspects of the current embodiments.

Deletion of blocks in Encoded Block Store memory management in Encoded Block Store or any operation that results in optimal operation of Encoded Block Store may also be performed by Content Manager .

Content Manager may also determine when the number of encoded blocks necessary to decode the blocks and recover the original file has been received and are stored in Encoded Block Storage . Upon making this determination Content Manager may decode the encoded blocks and transfer each decoded block to File Manager .

File Manager and Content Manager may communicate using e.g. an application programming interface API or a remote procedure call over a network. File Manager may receive a number of unencoded blocks from Content Manager and combine a number of unencoded blocks to create a copy of the original file content sent by an origination node in the Content Distribution Network.

Once File Manager has combined the unencoded blocks to create the copy of the original file content File Manager may communicate with File System to commit the copy of the original file to the storage capabilities of File System . File System may represent a hard drive a network share non volatile removable storage or any physical storage medium capable of storing the copy of the original file in accordance with the aspects of the current embodiments. File Manager may further communicate with an operating system a component an application programming interface API or any other device that stores the copy of the original file on behalf of the File Manager .

Source Node stores File which is to be distributed to Node and Node via Network . Security Server is also connected to Network but may be connected via a secure connection to ensure the information communicated to other nodes in the network are not tampered with by a third party in the example security for network coding file distribution system. Such information may be any digital information useful to any participant in the example security for network coding file distribution system system .

Source node may choose to divide File into a number of unencoded blocks and transmit those unencoded blocks to Security Server . For example Source Node may divide File into n blocks e.g. b b . . . b .

Once the blocks of File e.g. b b . . . b are received at Security Server Security Server may further subdivide a Block e.g. b of File into any number of sub blocks for example m sub blocks. Security Server may for example consider File to be an m n mathematical matrix of elements of Z. For example Security Server may represent File in the following manner 

Security Server may now choose Hash Parameters which may be part of Security Parameters e.g. G where G p q g p and q may be two large prime numbers chosen at random to satisfy the mathematical property q p 1 of order where may be a discrete log security parameter and where may be a discrete log security parameter and g is an m vector of element of Zgenerators of order q.

Security Server may then define a hash e.g. h b of each of the m sub blocks for each of the n blocks of File by using e.g. an m vector g g g. . . g of the mathematical matrix m n such that the hash may be defined as 

Security Server may now calculate the hash also known as a random mask of File by creating a vector of the results of the calculation of each hash h b of the m sub blocks. For example Security Server may calculate the hash also known as a random mask of File represented in the function below by the mathematical symbol F in the following manner . . . 

Security Server may perform this operation for each cooperative node coupled to the Network choosing a set of hash parameters G which may be part of Security Parameter uniquely for each cooperative node coupled to the network and calculating a new hash also known as a random mask of File using the new set of hash parameters. Typically cooperative nodes coupled to Network may ensure security and not share Security Parameters with other cooperative nodes coupled to Network .

Node may then join the security for network coding file distribution system contact Security Server via the Network and Secure Network Path and request Security Parameter which Node places in Security Parameter Storage and also request a unique hash of File also known as a random mask of File which Node places in local storage. Node may also have already joined the security for network coding file distribution system and may be exchanging unencoded and encoded blocks of File .

Node may send a query to Node and discover that Node possesses innovative information and Node may further request that Node re encode the blocks that Node has stored locally to produce a New Encoded Block . Node may produce New Encoded Block e.g. e by re encoding the blocks e.g. b choosing a set of arbitrary coefficient vectors

When New Encoded Block is received at Node Node may store the New Encoded Block and its corresponding coefficient vectors

Node may then verify the authenticity of New Encoded Block Node may apply the hash of File also known as a random mask received from Security Server to the New Encoded Block and compare it to a linear combination of the mask based hashes weighted by the coefficient vector of the new encoded block. For example New Encoded Block may be considered an m column vector of element of Z e e . . . e . Node may then perform a comparison in the following manner to verify the authenticity of New Encoded Block 

If Node determines the hash and the expected hash are equal Node has validated or otherwise verified New Encoded Block and may move New Encoded Block to Secure Window .

If Node determines the hash and the expected hash are not equal Node may send an alert to Node to notify Node that Node has transmitted an invalid New Encoded Block via Network . Node may then undertake an operation to determine which locally stored blocks whether unencoded or encoded are invalid.

Further for example if Node is a malicious node and undertakes a denial of service attack against Node Node may repeatedly transmit alerts to Node . Node may respond to each alert by undertaking an operation to determine which one or more unencoded or encoded blocks it has stored in Insecure Window are invalid which may be a time consuming operation and therefore delays Node from participating in the sharing of information with other nodes. However Node may verify the authenticity of the alert received from Node before undertaking an operation to determine which one or more unencoded or encoded blocks it has stored in Insecure Window are invalid.

Node may accomplish verification of the alert by receiving a second set of security parameters e.g. random masks and mask based hashes from Security Server . Security Server may choose the second set of security parameters in a less mathematically complex fashion such that calculations performed using the second set of security parameters may be less computationally intensive. Node may then create a new encoded block by creating a linear combination of the one or more encoded blocks in Insecure Window . Next Node may apply the random mask received from Security Server to the new encoded block and compare it to a linear combination of the mask based hashes weighted by the coefficient vector of the new encoded block. If Node determines these two elements are equal Node has determined the alert is valid and may act accordingly. If Node determines these two elements are unequal Node has determined that the alert is invalid and may choose to ignore the alert and further may choose to no longer communicate with Node .

Operation may refer to a cooperative node in an example security for network coding file distribution system receiving a set of security parameters. These security parameters are generated by a secure source in the example security for network coding file distribution system.

Decision may refer to an operation to determine whether the node is to verify a single newly received encoded block or a set of encoded blocks the node has stored locally.

A determination of Received leads to Operation in which the node receives a block and the set of coefficients used to encode the block.

A determination of Local lead to Operation in which the node creates a new encoded block by making a linear combination of all the encoded blocks and the coefficients used to the encode the encoded blocks the node has stored locally. At this point the node may generate a new set of random coefficients and multiply the coefficients of each of the encoded blocks the node has stored locally by the new set of random coefficients. This may be done to defeat a pairwise Byzantine attack in which a malicious node has sent the node a pair of invalid encoded blocks and offset the first invalid encoded block by a positive value and offset the second invalid encoded block by a negative identical value such that a linear combination of the two invalid blocks produces a new encoded block that does not have an offset.

Both Operation and Operation lead to Operation in which the node applies the hashing function to either the received encoded block from Operation or the new encoded block from Operation to determine the actual hash value of either the received encoded block from Operation or the new encoded block from Operation .

Operation may then lead to Operation in which the node calculates the expected hash of either the received encoded block from Operation or the new encoded block from Operation . The node calculates the expected hash by utilizing the security parameters received at Operation and the coefficients of either the received encoded block from Operation or the new encoded block from Operation .

Decision may refer to an operation in which the node compares the actual hash calculated at Operation and the expected hash calculated at Operation . A determination that the actual hash and the expected hash are equal leads to Operation in which either the received encoded block from Operation is determined to be valid or all the locally stored encoded blocks used to generate the new encoded block from Operation are valid.

A determination that the actual hash and the expected has are not equal leads to Operation . Operation may indicate that the received encoded block from Operation is invalid or at least one of the locally stored encoded blocks used to generate the new encoded block from Operation is invalid.

Operation may refer to a node in the example security for network coding file distribution system receiving an alert which indicates the node has stored locally at least one invalid block. This alert may be received from another cooperative node in the security for network coding file distribution system that has discovered the node has transmitted an invalid block. This alert may also have been received from a malicious node or another malicious source and may be part of a denial of service attack.

Operation may refer to an operation in which the node creates a new encoded block and a new coefficient vector by performing a linear combination of one or more blocks stored in an insecure window on the node.

Operation may refer to an operation in which the node applies the random hash to the new encoded block and as a result determines the actual hash of the new encoded block.

Operation may refer to an operation in which the node utilizes the set of mask based hashes and weights the set of mask based hashes by the new coefficient vector of the new encoded block and as a result determines the expected hash of the new encoded block.

Decision may refer to an operation in which the actual hash and the expected hash are compared. A determination that the actual hash and the expected hash are equal may lead to Operation . A determination that the actual hash and the expected has are not equal may lead to Operation .

Operation may refer to an operation in which the node sends a notification to at least one of another node source node security server or any other node that may wish to receive notification of invalid alerts in the example security for network coding file distribution system.

Operation may refer to an operation in which the node moves the checked blocks from the insecure window to the secure window because the node has checked the validity of the blocks in the insecure window and determined that they are all valid.

Operation may refer to a determination that the received alert is valid and therefore the node may have at least one invalid block stored in the insecure window.

Operation may refer to an operation in which the node forwards to the alert to other interested nodes in the example security for network coding file distribution system. Other interested nodes may be the nodes that have sent encoded blocks which the node has stored in the insecure window and may further be nodes for which the node has created and sent new encoded blocks using at least one of the blocks in the insecure window.

Operation may refer to an operation in which the node may quarantine the blocks used to create the new encoded block in Operation and begin an iterative validation process as discussed with respect to to determine which of the blocks stored in the insecure window are invalid.

Network Manager may enable node to communicate with other nodes servers devices or the like in the Content Distribution Network. Network Manager may send and receive packets or blocks of information send or receive requests to perform an operation of any type or send and receive other information used by node to participate in the Content Distribution Network.

In communicating with other nodes on the Content Distribution Network Network Manager may correct errors during transmission suspend and resume the sending of information to other nodes servers devices and the like on the Content Distribution Network and may further verify that node is permitted to participate in the Content Distribution Network. Network Manager may also initiate and maintain encrypted secure connections with other nodes on the Content Distribution Network such that any communication over the encrypted secure connection may be trusted.

Network Manager may further receive messages which may include an alert that node has stored invalid blocks.

Network Manager may further communicate with Content Manager via e.g. an application programming interface API a remote procedure call over a network. Network Manager may transmit blocks information with respect to blocks stored elsewhere on the network or information that Content Manager may require for node to participate in the Content Distribution Network in accordance with the aspects of the current embodiments. Network Manager may also communicate received alerts to Content Manager .

Content Manager may receive the number and size of blocks that the original file content was divided into by an origination source from Network Manager . Content Manager may further receive blocks from Network Manager send blocks using Network Manager commit received blocks to Encoded Block Store abort the storage of blocks that have not been received in their entirety or that have been determined to contain an error or corruption and transfer blocks that are stored within Encoded Block Store to both Network Manager and File Manager .

Content Manager may also perform at least one calculation to determine if a node in the Content Distribution Network contains innovative information that is useful to the node in decoding the original blocks into which original file content was divided by an origination node on the Content Distribution Network. If Content Manager determines that a node in the Content Distribution Network contains innovative information Content Manager may communicate with Network Manager and issue a request to receive the block issue a request for the node containing the innovative information to re encode the information and send the information or issue another request for Content Manager to function in accordance with the participation of the node in the Content Distribution Network.

Further Content Manager may also perform at least one calculation on behalf of another node on the Content Distribution Network to determine if the node contains information innovative to another node on the Content Distribution Network.

Encoded Block Store includes Secure Window and Insecure Window . Insecure Window further includes Insecure Activity Table . Secure Window contains blocks which may have been validated by Security Manager . Insecure Window contains blocks which may not have been validated by Security Manager . Insecure Activity Table contains a list with entries including an identifier of the node from which an unchecked block was received and further entries including an identifier of a node for which encoded blocks were generated using at least one of the blocks in the Insecure Window .

Content Manager may further re encode blocks stored within Encoded Block Store using a method for the node to produce encoded blocks that are useful to other nodes in the Content Distribution Network or for the node to participate in the Content Distribution network in accordance with the aspects of the current embodiments. Content Manager may choose any number of blocks from either Secure Window exclusively Insecure Window exclusively or a combination of any number of blocks from either Secure Window or Insecure Window to produce encoded blocks.

Deletion of blocks in Encoded Block Store memory management in Encoded Block Store or any operation that results in optimal operation of Encoded Block Store may also be performed by Content Manager .

Content Manager may further communicate with Security Manager via e.g. an application programming interface API a remote procedure call over a network. Content Manager may request that Security Manager validate any number of blocks stored in Encoded Block Store to determine the authenticity of the blocks with regard to the blocks being derived from the original file or piece of digital content that node is seeking to download.

Content Manager may also request Network Manager establish a secure connection via Peer To Peer Network with a security server on the Content Distribution Network or any other secure location on the network for which security parameters can be received for the original file or piece of digital content that node is seeking to download. Content Manager may then pass the security parameters to Security Manager such that Security Manager may store the security parameters in Security Parameter Store . In alternative embodiments Security Manager may communicate directly with Network Manager to receive the security parameters directly.

Network Manager may receive security alerts from Peer To Peer Network the security alerts indicating that another node in the Content Distribution Network has discovered node has transmitted an invalid encoded block or has been sent an invalid encoded block. Network Manager may pass the alert to Content Manager such that Content Manager may request that Security Manager undertake validation of one or more encoded blocks stored in Insecure Window using method discussed in accordance with the aspects of the current embodiments.

If Security Manager should discover that the alert is valid and there are one or more invalid blocks stored in Insecure Window Security Manger may inform Content Manager of the identifier of the one or more invalid blocks and Content Manager may in turn decide to consult Insecure Activity Table and request Network Manager forward the alert to the nodes indicated to have received or have been the source of invalid blocks in Insecure Activity Table .

If Security Manager should discover the alert is invalid Security Manager may inform Content Manager and Content Manger may then move the one or more blocks in Insecure Window checked by Security Manager to Secure Window .

Content Manager may also determine when the number of encoded blocks necessary to decode the blocks and recover the original file has been received and are stored in Encoded Block Storage . Upon making this determination Content Manager may decode the encoded blocks and transfer each decoded block to File Manager .

File Manager and Content Manager may communicate using e.g. an application programming interface API or a remote procedure call over a network. File Manager may receive a number of unencoded blocks from Content Manager and combine a number of unencoded blocks to create a copy of the original file content sent by an origination node in the Content Distribution Network.

Once File Manager has combined the unencoded blocks to create the copy of the original file content File Manager may communicate with File System to commit the copy of the original file to the storage capabilities of File System . File System may represent a hard drive a network share non volatile removable storage or any physical storage medium capable of storing the copy of the original file in accordance with the aspects of the current embodiments. File Manager may further communicate with an operating system a component an application programming interface API or any other device that stores the copy of the original file on behalf of the File Manager .

Although some particular implementations of systems and methods have been illustrated in the accompanying drawings and described in the foregoing Detailed Description it will be understood that the systems and methods shown and described are not limited to the particular implementations described but are capable of numerous rearrangements modifications and substitutions without departing from the spirit set forth and defined by the following claims.

