---

title: Apparatus and method for preventing eavesdropping
abstract: A method and apparatus prevent eavesdropping via a computer by detecting and alerting if more than one authorized driver is controlling a interface circuit that is providing audio or video input information. Further, prevention is performed by detecting and alerting if more than one authorized application programming interface is receiving audio or video input information from an authorized driver. Also, prevention is performed by detecting and alerting if more than one authorized software application is receiving audio or video input information from an authorized driver. In addition, prevention is performed by detecting and alerting upon first receipt of audio or visual information by an authorized software application via an authorized application programming interface and authorized driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08286233&OS=08286233&RS=08286233
owner: Avaya Inc.
number: 08286233
owner_city: Basking Ridge
owner_country: US
publication_date: 20050319
---
Computers such as personal computers are subject to a variety of attacks from individuals over networks such as the Internet or Intranet. The implanting of viruses in personal computers causing the personal computer to either fail or send large amounts of email is a common type of attack. Another type of attack that is becoming increasingly prevalent is that of using a personal computer to eavesdrop on the owner of that personal computer either via audio or video information. This information is transmitted from the user s personal computer to the individual who is performing the eavesdropping. This is done by inserting a routine into the personal computer that captures audio information from a microphone attached to the computer and or video information from a camera attached to the personal computer. In certain types of personal computer applications such as IP telephony or Net Meeting Services the individual wishing to eavesdrop on a user s computer simply initiates one of these services and directs the information to the individual s computer. Also the individual may simply use a legitimate application programming interface API to eavesdrop with the chosen API directing audio and or video to a bugging application that had been inserted into the user s computer. Examples of such API may be but is not limited to Microsoft IP Telephone Programming Interface or Avaya IP Softphone Telephone Programming Interface.

Another way to eavesdrop utilizing a user s personal computer is to insert a routine into the personal computer that monitors the audio and or video inputs and transmits these to an individual s computer. This type of eavesdropping is extremely difficult to detect whereas it is reasonably easily implemented.

Existing prior art solutions to preventing damage or illegal use of personal computers is done using virus scanners and firewalls. Whereas both of these techniques provide some protection against eavesdropping they are not a fail safe mechanism.

A method and apparatus prevent eavesdropping via a computer by detecting a use of at least one of audio or visual input information by a software entity determining if the software entity is authorized to receive the input information and alerting upon the software entity being unauthorized.

In one embodiment intruder computer system opens a valid application such as an IP telephony or Net Meeting application to perform the eavesdropping. By opening one of these applications information from microphone or video camera is transmitted to intruder computer system via WAN .

In another embodiment intruder computer system puts a hidden routine into memory of user computer system . This hidden routine then enables the utilization of microphone or video camera so that information concerning the user of computer system can be captured. This captured information is then transmitted to intruder computer system via WAN . The captured information may be transmitted as received or stored for later transmission in memory that may comprise RAM memory hard drive storage etc. This hidden routing may receive the information from a legitimate API or may insert a driver into computer system to receive the information directly from interface circuit or connected to microphone or video camera respectively.

Computer functions by executing and storing data out of memory . The user of user computer system utilizes devices that are interfaced to computer via interfaces respectively to provide and receive information from computer . WAN interface interfaces computer to WAN . One skilled in the art could readily envision that there could be a plurality of interface circuits such as interface circuits and . Intruder computer system is illustrated as having similar components. Components correspond in operations to components . WAN interface performs similar functions to those performed by WAN interface .

In one embodiment intruder computer system under control of the program being executed in memory by computer utilizes an IP telephony or Net Meeting application to activate microphone and or video camera in user computer system . The information received from input devices or is then relayed to intruder computer system by the opened application in user computer system . The information received from user computer system then can be displayed by intruder computer system on display if it is video information or played on speaker if it is audio information.

In the other embodiment intruder computer system utilizes a variety of methods well known to those skilled in the art to insert a routine into memory of user computer system . This routine referred to as a bug routine then activates video camera or microphone via a legitimate API or an inserted driver to receive information from these input devices via their interface circuits. The bug routine may immediately transmit this information to intruder computer system via WAN or may store it in memory for later transmission to intruder computer system .

Authorized drivers may be established by API s . API s may be used legitimately by an IP telephony Net Meeting applications etc. or illegitimately by an unauthorized routine or application such as bug routine . Bugging driver is a driver set up by bug routine to control and receive digital audio information from microphone . Bugging driver is inserted into memory of user computer system so that bug routine can fraudulently receive audio digital information. Bug routine may also use API s to receive fraudulently audio digital information. Storage may be any type of storage known to one skilled in the art and may be used by to bug routine to store audio digital information for later transmission via WAN interface .

Bug detection routine periodically uses driver to interrogate interface circuit to determine when one of drivers is actively controlling and receiving digital audio information from interface circuit using techniques well known to those skilled in the art. In the first embodiment where a authorized driver or API is being utilized to fraudulently obtain digital audio information when bug detection routine determines that such a driver is active and is receiving digital audio output from interface circuit bug detection routine first must determine if the driver is an authorized driver whose activities are being requested by an authorized API. If this is true bug detection routine determines if more than one authorized application is using the authorized API. If there is more than one authorized application bug detection routine alerts the user. If there is only one authorized application receiving digital audio information bug detection routine will still alert the user when this application first starts to receive digital audio information.

If an unauthorized application is using an authorized API bug detection routine alerts the user and allows the user to terminate the unauthorized application. Bug detection routine also alerts the user if there are more than one authorized driver or API accessing interface circuit .

In the other embodiment intruder computer system inserts bugging driver and bug routine into memory of user computer system . Bugging driver and bug routine are unauthorized and not registered on user computer system . Bug routine initiates bugging driver . Bug detection routine again periodically uses driver to interrogate interface circuit to determine when an unauthorized driver is actively controlling and receiving digital audio information from interface circuit . When such an unauthorized driver is detected bug detection routine attempts to identify the unauthorized driver and gives the user the opportunity to terminate the unauthorized driver and any application or routine using it. Both embodiments would be implemented together.

When bugging process transfers digital audio information to bug routine bug routine may immediately transmit the digital audio information via WAN interface to intruder computer system . Also bug routine may store the digital audio information in memory until an opportune time occurs for the transmission of the digital audio information to intruder computer system . In addition bug routine may compress the digital audio information before transmission to intruder computer system .

The detection of video eavesdropping could be performed in a manner similar to that illustrated in and described with respect to . With the exception that video camera and interface would be utilized rather than microphone and interface .

In one embodiment bug detection routine is a stand alone routine that performs its operation without utilizing other applications. In another embodiment bug detection routine could be part of a registered application that uses audio information such as an IP telephony application. This could allow the IP telephony application to assure that eavesdropping was not taking place. In yet another embodiment bug detection routine could be part of a standard virus detection program. As part of a standard virus detection program bug detection routine would perform its operations as noted above but upon determining an illegal bug routine such as bug routine it would utilize the resources of the virus application to remove the bug routine and the bugging process from user computer system .

Although is described in terms of the Windows software one skilled in the art could readily envision how these operations would be performed in other operating system environments such as Linux Unix etc.

Decision block determines if the driver identified by the number drivers variable is an authorized driver to be operating on the user computer system. If the answer is no control is transferred to block of .

If the answer is yes in decision block decision block determines if more than one authorized API is using the driver identified in decision block . If the answer is yes block identifies the APIs that are active and block alerts the user to the fact that there are more than one API actively using the driver and also supplies the identification information of these APIs to the user before transferring control to block .

If the answer is no in decision block decision block determines if more than one authorized application is using the API that is using the identified driver. The API in question was identified in decision block . If the answer in decision block is yes block determines the identity of all the applications that are actively using the API and block alerts the user and identifies the applications utilizing the information obtained in block before transferring control to block . If the answer in decision block is yes control is transferred to decision block of .

If control is transferred from blocks or connector C from block sets the number drivers variable equal to the number drivers variable minus one before transferring control to decision block . Decision block determines if the number drivers variable is equal to zero. If the answer is yes control is transferred back to decision block . If the answer in decision block is no control is transferred to decision block so that the next active driver can be evaluated.

Returning to decision block if the answer is no that the driver presently being evaluated is not an authorized driver control is transferred to block . Block alerts the user to the presence of an unauthorized driver before transferring control to decision block . Decision block then allows the user to make the determination of whether or not to delete the driver from the user s computer system. If the answer is no control is returned back to block . If the answer is yes in decision block block deletes or removes the driver from the user s computer system before transferring control back to block .

Returning to decision block of if the answer is no in decision block control is transferred to decision block of . Decision block determines if an unauthorized application is using an authorized API that is using the driver previously identified in decision block . If the answer in decision block is yes block alerts the user to this fact before transferring control to decision block . Decision block gives the user the ability to terminate the application and in one embodiment to remove the application from the user s computer system. If the answer in decision block is yes block terminates the application or removes the application from the computer system before transferring control back to block of . If the answer in decision block is no control is transferred back to block .

Returning to decision block if the answer in decision block is no decision block determines if an unauthorized routine is using an authorized driver that was identified in decision block . If the answer is no control is transferred to decision block .

If the answer in decision block is yes block alerts the user before transferring control to decision block . Decision block allows the user to determine whether or not to delete or remove the routine from the user s computer system. If the answer in decision block is no control is transferred back to block . If the answer in decision block is yes block deletes or removes the routine from the user s computer system before transferring control to block of .

Returning now to decision block if the answer in decision block is no control is transferred to decision block . Decision block determines if this is the first use of the driver which has been previously determined to be an authorized driver by an authorized API and an authorized application. If the answer is yes block alerts the user before transferring control back to block of . If the answer in decision block is no control is transferred back to block of .

When the operations of personal computers servers or systems are implemented in software it should be noted that the software can be stored on any computer readable storage medium for use by or in connection with any computer related system or method. In the context of this document a computer readable storage medium is an electronic magnetic optical or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method. The personal computers servers or systems can be embodied in any computer readable storage medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable storage medium can be any means that can store the program for use by or in connection with the instruction execution system apparatus or device. For example the computer readable storage medium can be but is not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic and a portable compact disc read only memory CDROM optical .

In an alternative embodiment where the stations servers or systems is implemented in hardware the stations servers or systems can be implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

Of course various changes and modifications to the illustrated embodiments described above would be apparent to those skilled in the art. Such changes and modifications can be made without departing from the spirit and scope of the invention and without diminishing its intended advantages. It is therefore intended that such changes and modifications be covered by the following claims except in so far as limited by the prior art.

