---

title: Intellectual asset protocol for defining data exchange rules and formats for universal intellectual asset documents, and systems, methods, and computer program products related to same
abstract: An intellectual asset protocol for defining data exchange rules and formats for universal intellectual asset data objects, and systems, methods, and computer program products related to same. The system includes an intellectual asset protocol system that acts as an engine in the definition of data exchange rules and formats for universal intellectual asset documents. Also included is a front end system that preferably provides a graphical user interface to enable users to access the intellectual asset protocol system. In addition, an intellectual asset database is included that stores collections of intellectual asset objects (and information related to same), one or more embodiments of an intellectual asset protocol, and so forth. The intellectual asset protocol system interacts with an Intellectual Property Asset Manger (IPAM) server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437471&OS=07437471&RS=07437471
owner: Rose Blush Software LLC
number: 07437471
owner_city: Wilmington
owner_country: US
publication_date: 20050712
---
This application is a continuation of application Ser. No. 09 545 608 filed Apr. 7 2000 now allowed which is a non provisional of provisional application No. 60 128 405 filed Apr. 8 1999.

Application Ser. No. 09 545 608 filed Apr. 7 2000 is a continuation in part of U.S. application Ser. No. 08 921 369 filed Aug. 29 1997 now U.S. Pat. No. 6 339 767 issued Jan. 15 2002 which is a continuation in part of U.S. application Ser. No. 08 867 392 filed Jun. 2 1997 now U.S. Pat. No. 5 991 751 issued Nov. 23 1999.

Application Ser. No. 09 545 608 filed Apr. 7 2000 is a continuation in part of U.S. application Ser. No. 09 138 368 filed Aug. 21 1998 now abandoned which is a continuation in part of U.S. application Ser. No. 08 921 369 filed Aug. 29 1997 now U.S. Pat. No. 6 339 767 issued Jan. 15 2002.

Application Ser. No. 09 545 608 filed Apr. 7 2000 is a continuation in part of U.S. application Ser. No. 09 260 079 filed Mar. 2 1999 now abandoned which is a continuation in part of U.S. application Ser. No. 09 138 368 filed Aug. 21 1998 now abandoned which is a continuation in part of U.S. application Ser. No. 08 921 369 filed Aug. 29 1997 now U.S. Pat. No. 6 339 767 issued Jan. 15 2002.

Application Ser. No. 09 545 608 filed Apr. 7 2000 is a continuation in part of U.S. application Ser. No. 09 057 557 filed Apr. 9 1998 now U.S. Pat. No. 6 389 434 issued May 14 2002 which is a continuation of U.S. application Ser. No. 08 632 801 filed Apr. 17 1996 now U.S. Pat. No. 5 806 079 issued Sep. 8 1998 which is a continuation in part of U.S. application Ser. No. 08 423 676 filed Apr. 18 1995 now U.S. Pat. No. 5 623 679 issued Apr. 22 1997 which is continuation in part of U.S. application Ser. No. 08 341 129 filed Nov. 18 1994 now abandoned which is a continuation in part of U.S. application Ser. No. 08 155 752 filed Nov. 19 1993 now U.S. Pat. No. 5 623 681 issued Apr. 22 1997.

The present invention is generally related to tools for data processing and more particularly related to an intellectual asset protocol for defining data exchange rules and formats for universal intellectual asset data objects such as documents.

Intellectual asset documents may include patents U.S. and foreign patent applications U.S. PCT and foreign trademarks U.S. and foreign trademark applications U.S. and foreign copyrights trade secrets license agreements joint venture agreements or any other type of data object that involves intellectual property. The efficient management of intellectual asset documents requires a structured way of exchanging data that represents one or more of these intellectual asset documents and or the systems and processes that relate to them. These processes may include license tracking audits and payments patent and trademark prosecution and workflow patent and trademark maintenance fee payment tracking and reporting reporting and visualization of intellectual asset meta data electronic submission of patent and trademark application and so forth. Prior to the present invention this structured way of exchanging data did not exist.

Individuals and or industries that deal with intellectual asset documents or are involved in the intellectual asset domain are comprised of many different players. For example one player is the U.S. Patent and Trademark Office another player is the European Patent Office another player is an enterprise resource planning manager yet another player is a patent applicant still another player is a patent or trademark licensor etc. These players operate at times independent of each other yet at other times must come together to facilitate an objective. For example a patent applicant must work with the U.S. Patent and Trademark Office to prosecute his or her patent and or trademark application. When two or more players come together to facilitate an objective it would be advantageous for the players to operate with an electronic version of one or more intellectual asset data objects or documents. However this often does not happen due to the lack of data exchange rules and formats for intellectual asset data objects. Without a standard definition of data exchange rules and formats for intellectual asset documents the progress of the players common objective is likely to be hindered.

Cooperation among players in the intellectual asset domain is hindered because often the players use different formats for intellectual asset documents. With the computerization of industries today and the use of the Internet by many different players in the intellectual asset domain the use of different formats of intellectual assets documents hinders the efficient exchange of electronic intellectual asset documents among the different players.

Therefore what is needed an intellectual asset protocol for defining data exchange rules and formats for universal intellectual asset documents to increase the effectiveness and efficiency of exchanging electronic intellectual asset data objects. In addition the protocol should be sufficiently flexible and full featured to enable other types of functions such as but not limited to the management of intellectual asset transaction data for various business processes. The invention defines a standard for intellectual asset meta data and thus provides an effective and efficient way to exchange data between disparate intellectual asset software systems and Enterprise Resource Planning ERP systems.

The present invention is directed to an intellectual asset protocol for defining data exchange rules and formats for universal intellectual asset data objects and systems methods and computer program products related to same. The present invention includes an intellectual asset protocol system that acts as an engine in the definition of data exchange rules and formats for universal intellectual asset documents. The present invention also includes a front end system that preferably provides a graphical user interface to the users of the present invention to access the intellectual asset protocol system. The present invention may also include an intellectual asset database that stores collections of intellectual asset documents and information related to same one or more embodiments of an intellectual asset protocol and so forth. The intellectual asset protocol system interacts with an Intellectual Property Asset Manger IPAM server as will be described below.

Further features and advantages of the invention as well as the structure and operation of various embodiments of the invention are described in detail below with reference to the accompanying drawings. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The present invention includes an intellectual asset protocol for enabling the definition of the data and format of intellectual asset documents to facilitate the efficient exchange of electronic intellectual asset documents between disparate systems. The present invention contemplates an Intellectual Property Asset Manger IPAM server an intellectual asset protocol system a front end system and an intellectual asset database as shown in and described in detail below.

As described below with reference to IPAM server intellectual asset protocol system front end system and intellectual asset database may be implemented using hardware software or a combination thereof and may be implemented in one or more computer systems or processing systems. Intellectual asset protocol system will be described next.

Intellectual asset protocol system acts as an engine for the present invention in the standardization of intellectual asset documents. Intellectual asset protocol system is connected to IPAM server and intellectual asset database . Intellectual asset protocol system is also connected to the Internet via the front end system . Requests from users can be made via front end system to intellectual asset protocol system . The various functions provided by the present invention are not dependent on the source of the data. Although the embodiment of the present invention shown in illustrates IPAM server intellectual asset protocol system front end system and intellectual asset database as separate functional components several or all components may be combined as long as the functionality of each component still exists within the present invention as will be described below. IPAM server will be described next.

IPAM server is described in detail in the applications and patents referenced above in the section entitled Cross Reference to Other Patents and Applications. For convenience IPAM server will briefly be discussed herein although the invention is not limited to this brief description. Briefly stated IPAM server deals with context data processing. IPAM server may be used to define and select one or more contexts. Each context includes one or more attributes and a plurality of data objects that satisfy the attributes. A list of data objects contained in the selected contexts may be displayed. At least some of the data objects in the selected contexts may be processed. Such processing may involve generating hierarchical and or directed acyclic graph data structures to represent relationships among the data objects. These data structures can then be displayed in a variety of well known techniques including but not limited to hyperbolic trees. Examples of such hierarchical or directed acyclic graph structures include claim trees citation trees and data object families which may be displayed using hyperbolic trees.

In an embodiment the contexts are groups. In other embodiment the contexts are each associated with a data object type. In this latter embodiment the contexts include data objects of their respective data object types.

IPAM server also supports the generation of annotations. IPAM server supports a plurality of annotation types including document annotations group annotations data object type annotations case annotations and enterprise annotations. IPAM server also supports form based annotations.

In an embodiment IPAM server has a plug in manager coupled thereto. The system shown in may also include at least one plug in coupled to the plug in manager and at least one external data processing component coupled to the plug in. In an embodiment the external data processing component displays data using at least graphs. In another embodiment the external data processing component displays data using at least maps. The plug in manager has a first application programming interface API and each external data processing component has a second API. The plug in translates messages from the plug in manager to the external data processing component to a format conforming to the second API and translates messages from the external data processing component to the plug in manager to a format conforming to the first API.

Embodiments of IPAM server can process display and otherwise operate with patent equivalent text files EQV . Other embodiments of IPAM server operate with other types of data. Patent equivalent text files are described in U.S. Pat. No. 5 623 681 which is herein incorporated by reference in its entirety. A patent equivalent text file includes equivalency information that establishes an equivalency relationship between the text in the patent equivalent text file and the image in the patent image file. For example this equivalency information may include pagination information that enables the patent equivalent text file to be displayed having the same pagination line breaks column breaks page breaks as the patent image file. In an embodiment a pagination module generates the patent equivalent text file by comparing the patent text in the patent text file with the patent image file to detect equivalency information. This equivalency information is then embedded in the patent equivalent text file along with the patent text. While the pagination module is capable of performing the pagination operation automatically in some cases some manual intervention is required. In accordance an operator is sometimes involved with the pagination process performed by the pagination module. Front end system of the present invention will be described next.

Front end system may operate as a Web server. A Web server provides a GUI to users who wish to access intellectual asset protocol system . As is well known in the relevant art s a Web server is a server process running at a Web site which sends out Web pages in response to Hypertext Transfer Protocol HTTP requests from remote browsers. An optional firewall not shown serves as the connection and separation between intellectual asset protocol system and the global Internet . Generally speaking a firewall which is well known in the relevant art s is a dedicated gateway machine with special security precaution software. It is typically used for example to service Internet connections and dial in lines and protects a cluster of more loosely administered machines hidden behind it from an external invasion. Intellectual asset database of the present invention will be described next.

Intellectual asset database stores collections of data that represent the current embodiments of intellectual asset protocols intellectual asset documents and their processes etc. used by the present invention. Here in an embodiment data stored in intellectual asset database may be stored as a relational database. In a relational database data is stored in the form of related tables. A relational database management system DBMS is used to manipulate data in the related tables. Relational databases are powerful because they require few assumptions about how data is related or how it will be extracted from the database. As a result the same database can be viewed in many different ways. An important feature of relational systems is that a single database can be spread across several tables. This differs from flat file databases in which each database is self contained in a single table.

Another embodiment of the type of database used by intellectual asset database is a database design known as Hypertext. In a Hypertext database any object whether it be a piece of text a picture or a film can be linked to any other object. Hypertext databases are particularly useful for organizing large amounts of disparate information but they are not generally designed for numerical analysis.

Intellectual asset database of present invention may also be implemented using a standard database access method such as Open DataBase Connectivity ODBC . The goal of ODBC is to make it possible to access any data from any application regardless of which DBMS is handling the data. ODBC manages this by inserting a middle layer called a database driver between an application and the DBMS. The purpose of this layer is to translate the application s data queries into commands that the DBMS understands. For this to work both the application and the DBMS must be ODBC compliant that is the application must be capable of issuing ODBC commands and the DBMS must be capable of responding to them. Both the functions of the engine of IPAM server and intellectual asset protocol system and the data stored in intellectual asset database will be discussed in further detail below. The global Internet will be described next.

The global Internet includes a plurality of external workstations for example government agencies intellectual asset document licensors and EPR systems as shown in the embodiment of that allow users e.g. players within the intellectual asset domain of the Internet to remotely access and use intellectual asset protocol system via front end system . Note that the present invention may communicate with these external workstations via communication methods other than the Internet via Transmission Control Protocol Internet Protocol TCP IP including but not limited to asynchronous dial up and asynchronous lease line. Asynchronous dial up asynchronous lease line and TCP IP communication are well known terms in the relevant art. Government agencies and intellectual asset document licensors are addressed next.

Government agencies include the U.S. Patent and Trademark Office patent and trademark offices in foreign countries and government agencies that are in the intellectual asset domain. Intellectual asset document licensors include business entities or individuals who license an intellectual asset document. ERP Enterprise Resource Planning system is described next.

ERP system integrates many facets of a business including planning manufacturing sales and marketing. As the ERP methodology has become more popular software applications have emerged to help business managers implement ERP. Often EPR involves intellectual asset documents and the need to transfer and receive electronic intellectual asset documents with disparate intellectual asset software systems.

The topology of network as shown in is called a bus topology. In general the topology of a network is the geometric arrangement of functions i.e. computers within the system. Other common types of network topologies include star and ring topologies. Although the present invention is illustrated in as incorporating a bus topology the present invention can equally be applied to other topologies.

The functions of intellectual asset protocol system include an intellectual asset protocol function an intellectual asset data and processing exchange function a presentation function and an administration function . The invention is not limited to these functions. The functions of intellectual asset protocol system shown in will be described in detail below in Section VIII after the description of an embodiment of the intellectual asset protocol of the present invention.

The present invention i.e. IPAM server intellectual asset protocol system front end system intellectual asset database or any part thereof may be implemented using hardware software or a combination thereof and may be implemented in one or more computer systems or other processing systems. In fact in one embodiment the invention is directed toward one or more computer systems capable of carrying out the functionality described herein. An example of a computer system is shown in . The computer system includes one or more processors such as processor . The processor is connected to a communication bus . Various software embodiments are described in terms of this exemplary computer system. After reading this description it will be apparent to a person skilled in the relevant art how to implement the invention using other computer systems and or computer architectures.

Computer system also includes a main memory preferably random access memory RAM and may also include a secondary memory . The secondary memory may include for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive an optical disk drive etc. The removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit represents a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated the removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In alternative embodiments secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system may also include a communications interface . Communications interface allows software and data to be transferred between computer system and external devices. Examples of communications interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA slot and card etc. Software and data transferred via communications interface are in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path i.e. channel . This channel carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an RF link and other communications channels.

In this document the term computer program product refers to removable storage units and or signals . These computer program products are means for providing software and or data to computer system . The invention is directed to such computer program products.

Computer programs also called computer control logic are stored in main memory and or secondary memory and or in computer program products. Computer programs may also be received via communications interface . Such computer programs when executed enable the computer system to perform the features of the present invention as discussed herein. In particular the computer programs when executed enable the processor to perform the features of the present invention. Accordingly such computer programs represent controllers of computer system .

In an embodiment where the invention is implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive hard drive or communications interface . The control logic software when executed by processor causes processor to perform the functions of the invention as described herein.

In another embodiment the invention is implemented primarily in hardware using for example hardware components such as application specific integrated circuits ASICs . Implementation of the hardware state machine so as to perform the functions described herein will be apparent to persons skilled in the relevant art s .

In yet another embodiment the invention is implemented using a combination of both hardware and software.

As discussed above intellectual asset database stores data objects that comply with one or more embodiments of the intellectual asset protocol of the present invention. In one embodiment of the present invention the universal intellectual asset protocol is implemented as a Comprehensive Patent Markup Language CPML Document Type Definition DTD that conforms to Extended Markup Language XML . Here documents conforming to the CPML DTD are called CPML documents or sometimes universal intellectual asset documents discussed above . As these names indicate the CPML DTD of the present invention is very powerful and can be used for many functions as will be described below with reference to .

In essence the CPML DTD is an XML intellectual asset protocol that specifies the data rules and format for intellectual asset management. This is very different for example from the USPTO Red Book specification and CML concerned with document presentation. In some embodiments the CPML DTD includes these DTDs in its applications. Although both DTDs and XML are well known in the relevant art s brief overviews of DTDs and XML are provided next.

As will be discussed above computer programs when executed enable computer to perform the functions of the present invention as discussed herein. In an embodiment the present invention is implemented using active server pages XML and stored procedures. XML is a presentation markup language and is used as a data description language. XML is a pared down version of SGML and is designed especially for Web documents. XML enables designers to create their own customized tags to provide functionality not available with HTML. For example XML supports links that point to multiple documents as opposed to HTML links which can reference just one destination each.

A tag is a command or marker inserted in a document that specifies how the document or a portion of the document should be formatted. Tags are used by format specifications that store documents as text files. This includes SGML and HTML. Therefore in an embodiment of the present invention a designer would implement each of the functions of intellectual asset protocol function as a tag.

The type of file associated with SGML and XML documents is called a document type definition or DTD. DTD is a type of file that defines how the tags should be interpreted by the application presenting the document. The HTML specification that defines how Web pages should be displayed by Web browsers is one example of a DTD. In essence a DTD to the present invention represents a contract between the players in the intellectual asset domain that intellectual asset documents will conform to a particular standard. The CPML DTD of the present invention will next be described in more detail with reference to .

The CPML DTD includes one or more patent DTDs . These patent DTDs are a representation of patent documents. As shown in the patent DTDs may include or be representative of the USPTO Red Book DTD which is described in the specification of the USPTO Red Book published by the USPTO dated March 1998 which is herein incorporated by reference in its entirety and or patent DTDs of other patent offices such as the PCT or EPO DTDs . The patent DTDs may also include or be representative to information included in patent equivalent text files EQV as described above .

The CPML DTD includes DTDs to support and represent other IP intellectual property assets such as trade marks trade secrets copyright conception documents etc.

The CPML DTD includes DTDs to represent and support annotations and the exchange of same. Annotation functionality is described in the patents and applications listed in the above section entitled Cross Reference to Other Patents and Applications. 

The CPML DTD is not limited to the functionality shown in . The example of is provided for illustrative purposes only.

A. The CPML DTD is a Union of the Structured Document Data Recognized and Served by Embodiment of the IPAM Server

The CPML DTD specification contains a union of the structured bibliographic data that is used by embodiments of the IPAM server . In embodiments this data includes subtables of the IP DOCUMENT table and their satellites in the IPAM server database plus the abstracts that reside in the searching database indexes . This ensures that IPAM server can extract the data it needs strictly from the XML potentially without even the indexes and database flatfiles Production supplies. For more information on IPAM server see the applications and patents referenced above in the section entitled Cross Reference to Other Patents and Applications. 

When the incoming data s normalization varies the CPML DTD has sections for unnormalized data and repeats the data in the normalized format as necessary. The normalized versions are optional. For example 

This policy makes sure that the application using the data has the level of normalization it is capable of supporting and that the data has the best level of normalization we can supply.

As demonstrated in the example in Section b above standards are used when possible. For example US is the ISO standard code for the United States and CA is the ISO standard code for California.

The naming convention for the tags preferably includes relatively readable and long names. The disk space lost pales in comparison to the image storage. Having readable names allows human beings to manipulate documents. The readable names make the CPML DTD easier to explain to third parties.

The EQV format of the patent equivalent text files see the patents and applications referenced above in the section entitled Cross Reference to Other Patents and Applications can be replaced with the CPML DTD. Preferably IPAM server accepts XML intellectual asset documents as electronic documents.

XML intellectual asset documents are stored just as patent equivalent text files were and are delivered to the IPAM server just as the patent equivalent text files were. Changes to the IPAM server include 

The invention includes tools that accomplish the following tasks translate all incoming data into XML merge disparate data for a particular document into a single XML document track changes and version documents produce indexes and database flatfiles from a set XML of documents and convert XML formatted documents into EQV formatted documents for backward compatibility.

E. The CPML DTD Retains as Much Information Present in the Original Documents as Practical Including Chemical Table and Mathematical Information

The original structured data can be retained for future use by escaping the data for example commenting it out or wrapping it in a processing instruction but escaping does not facilitate further processing. In order to process the information it must be put into a semantic context that the processing software understands. Rather than have the processing software understand all the original formats the original formats should be translated to a single format.

F. The CPML DTD Includes a IPAM Server Interface for Accessing Groups and Annotations via an XML Interface

XML and the CPML DTD of the present invention are also useful as an output format for the IPAM server . XML provides a structured content format that is platform independent. Groups documents and annotations can be output by IPAM server .

Annotations contain some optional flags and annotation segments. Annotation segments contain a start anchor and an end anchor and some content which may either be embedded in the annotation or referred to by the annotation. It may also make reference to its group or owner. A possible XML format is below 

Groups contain annotations documents and other groups. They make reference to their parents. Annotations may be referred to or embedded directly in the group. A possible XML format is below 

The CPML DTD of the present invention gives this data a life of its own . For example someone could send an annotation to a coworker and the coworker could view it with his e mail reader with the appropriate XML plug ins to the e mail reader . If the coworker wants the group context he follows the group link which sends the request to the WorkBench as described in detail in the applications and patents referenced above in the section entitled Cross Reference to Other Patents and Applications. 

G. The CPML DTD Includes a Set of XML Interfaces for Third Party Content Managers that Allows Users to Use Those Content Managers via IPAM in the Future

XML can be used as a back end interface for hooking into third party search engines and document servers. IPAM server needs to use an interface to access central search servers. If that interface is in XML and is relatively general it provides a platform independent standard.

Embodiments of the CPML DTD has structured claims information. Claims structure includes 1 a claim number 2 independent claim information 3 preambles with optional dependency clauses and 4 a main body with many elements. The CPML DTD supports varying amounts of the structures listed above. An example CMML DTD is discussed next with reference to .

An example CPML DTD is shown in . The goal of CPML DTD according to an embodiment of the invention is to include text structure and bibliographic tags present in the IPAM server database and indexes. How the CPML DTD and the data in the IPAM server database and indexes are related will be described below with reference to . The invention is not limited to CPML DTD . The example of is provided for illustrative purposes only and is not limiting. Other DTDs will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

In CPML documents information and sections of the patent are stored in the respective tags of the CPML DTD .

To aid in the understanding of the example CPML DTD the following three tables are provided including Tables 1 through 3. Table 1 illustrates some common symbols for specifying element structure in a DTD along with their descriptions 

The following Table 2 illustrates some common attribute types in a DTD along with their descriptions 

The example CPML DTD preferably includes distinct sections for each distinct part of the document. Referring to label indicates an element list ELEMENT that are grouped together to create the CPML DTD . From Table 1 above we know that parentheses group elements. Therefore the elements or sections that make up patent include Bibliography Abstract Unstructured Bibliography Brief Summary Of Invention Description Of Drawings Description Of Invention and Claims. We also know from Table 1 that since a comma separates each of these elements the elements are required to appear in the specified sequence. Therefore the Bibliography element is required to appear first. Next in sequence is the Abstract element. CPML DTD shows the abstract element is separated from the Bibliography element. In another embodiment of the present invention the Abstract element could be inside of the Bibliography element. Because there is no symbol after the Bibliography of the Abstract element these elements must appear only once

Note that the next three elements in the sequence UnstructuredBibliography BriefSummaryOfInvention and DescriptionOfDrawings each end with a question mark. From Table 1 this indicates that each of these elements while optional may only appear once. Next in sequence is the DescriptionOfInvention element that is required to appear once. The four preceding elements or sections are considered to be text sections of a patent. Note that although the embodiment in show four text sections there could just as easily be five or ten or any other number.

Still referring to the label indicates an attribute list ATTLIST which generally associates values for each attribute. The attributes shown include MajorVer MinorVer and GUID. For example the attribute MajorVer can have the value 0 1 2 etc. but must have one of the values listed. The REQUIIRED from Table 3 is an attribute default that indicates to the parser that the attribute MajorVer must have a value in all instances of the element. Failure to include the attribute will result in parsing errors. The attribute MinorVer is defined the same way as MajorVer. The attribute GUID must have a unique value identifying the element indicated by ID for Table 2 . Again REQUIRED indicates the GUID must have a value in all instances of the element.

The label references a list of normalized tags. In this embodiment of the present invention normalized tags are a common set of tags that appear in many places. These normalized tags promise a given data normalization when they appear. Normalized tags include tags for dates Date for publishing organizations PubOrg document kinds Kind see the patents and applications referenced above in the section entitled Cross Reference to Other Patents and Applications numbers Num and countries Cntry . More specifically dates are always in the form YYYYMMDD PubOrg s are only allowed to be those found in WIPO Standard 3 Kind s obey a specified naming convention Num s are always purely numeric and Cntry s are only allowed to be ISO specified countries.

The label references a list of common tags and entities. In this embodiment of the present invention common tags appear in more than one place but are not normalized. This element specifies the format for text such as paragraphs in the CPML DTD .

The label references a list of patent bibliographic tags. This embodiment supports different classifications of bibliographic tags identifiers that serve to identify documents by identifiers references to other documents legalities classifications and miscellaneous information. These bibliographic classifications are organized as follows 

These categories are used for convenience purposes only. The invention is not limited to this example.

Some embodiments of the CPML DTD may have all of these bibliographic fields while other DTD embodiments may have subsets of the fields. In the example of the bibliographic tags are organized as follows general information identifies references to other documents legalities i.e. data that reinforces the assignee s right to monopoly classifications and miscellaneous information .

Referring to label the bibliographic tag relating to general information is shown. From Table 1 above we know that parentheses group elements. We also know from Table 1 that since a comma separates each of these elements the elements are required to appear in the specified sequence. Therefore the elements or sections that make up the bibliographic tag relating to general information is as follows 

Priority any number of references that the present patent claims priority to can appear in sequence even zero 

Note that each of these elements are further defined. For instance Title PubNo and AppNo are further defined as referenced by label . For example PubNo is required to include the normalized tags PubOrg Kind and Num described above with reference to label in sequence.

PatentRef is further defined as referenced by label . FilingDate IssueDate PublicationDate CalculatedExpirationDate Assignee Inventor Priority and DesignatedStates are each further defined as referenced by label .

IPC and USClassification are further defined as referenced by label . Referring to label IPC is required to include the normalized tags Section Class Subclass Group and Subgroup. USClassification is required to include the normalized tags USClass USSubclass and USSuffix.

Finally PublicationLanguage NumClaims NumDrawingPages NumFigures and NumSpecPages are further defined as referenced by label .

After the Abstract section the unstructured bibliographic section referenced by label follows. The unstructured bibliographic labeled by includes a text representation of all bibliographic information of a given patent in unstructured format. This information is provided to support rendering of the patent since not all bibliographic information may be stored in structured format in documents that support the CPML DTD .

Based on the teaching above one skilled in the relevant art s will understand the remainder of CPML DTD including the brief summary of the invention section is referenced by label the brief description of the drawings section is referenced by label the detailed description of the invention section is referenced by label and the claims section is referenced by label .

FIGS A F illustrate an example CPML intellectual asset document for a U.S. patent. The CPML intellectual asset document of corresponds to the CPML DTD of .

The CPML DTD of supports all types of patent intellectual asset documents not just U.S. patents. For example illustrate an example CPML intellectual asset document for an EP application. The CPML intellectual asset document of corresponds to the CPML DTD of .

The Red Book and Green Book DTDs of the USPTO are represented by columns and respectively. The DTD of the EPO PCT is represented by columns and . The CPML DTD according to an embodiment is represented by columns and .

VIII. Detailed Description of the Functions of the Intellectual Asset Protocol System of the Present Invention

The function of intellectual asset protocol system were introduced above with reference to . The functions include intellectual asset protocol function intellectual asset data and processing exchange function presentation function and administration function . Each of these functions may also include one or more functions.

The CPML DTD supports formats and rules concerning the following functions performed by intellectual asset protocol function 

Intellectual asset Meta Data Management including may be just includes of other DTDs including government issued Meta data Derwent Data and other third parties CML data User Defined Intellectual Asset Meta data etc.

Direct presentation of CPML documents to the TIBCO data exchange wire format communication layer and others.

The intellectual asset data and processing exchange function of the present invention is described next.

A powerful aspect of XML and the CPML DTD of the present invention which conforms to XML is the ability to define data exchange rules and formats for various types of transactions. See for example . There are many e commerce data exchange initiatives that include SET JEPI CommerceNet Cyber Cash Millicent OFX XML EDI. An SGML based initiative that is a superset of all of the above is the Open Financial Exchange protocol OFX .

OFX is an SGML based initiative that allows electronic commerce technologies to co exist and interoperate. OFX aims to smooth the path towards the development of a pervasive retail trade infrastructure on the Internet. OFX supports formats and specifies rules concerning the following activities 

The CPML DTD supports formats and rules concerning the functions performed by intellectual asset data and processing exchange function .

Presentation function of the present invention is responsible for specify the format of any output to the user. In an embodiment of the present invention presentation function uses cascading style sheets to format the output of CPML intellectual asset documents. Cascading style sheets or style sheets in general are well known in the relevant art s . Therefore only a brief overview will be provided next.

In general a style sheet is a file or form that defines the layout of a document. When you fill in a style sheet you specify such parameters as the page size margins and fonts. Style sheets are useful because you can use the same style sheet for many documents. For example you could define one style sheet for patents another for patent prosecution and a third for trademarks and so forth. Style sheets are also called templates.

More specifically cascading style sheets can separate the formatting information from the body of documents storing it separately in a STYLE element or a separate document. In addition in line styling using a STYLE attribute to indicate formatting for particular elements is also available. The cascading refers to the ability to combine multiple style sheets and in line styling simplifying the task of creating master templates and then making modifications as needed. Cascading style sheets uses the document structure as a framework which is then annotated with formatting information and displayed or printed or read or presented somehow by an application typically a Web browser.

Administration function among other things allows for an administrator to control which users have access to IPAM server intellectual protocol system and or intellectual asset database .

The manner in which users may navigate through the functional modules and features provided by intellectual asset protocol system will now be described. Intellectual asset protocol system via front end system may be accessible by a user directly on a desktop computer via a World Wide Web page over the Internet i.e. through on line services or accessible via an Intranet. In an alternative embodiment intellectual asset protocol system via front end system may be accessible via telephone services or the like. It should be understood that the control flows described are for example purposes only. Intellectual asset protocol system of the present invention is sufficiently flexible and configurable such that users may navigate through system in ways other than that described.

In step the intellectual asset protocol function processes the received intellectual asset document with the appropriate DTD in the CPML DTD . Here the CPML DTD is used to parse and extract desired data from the intellectual asset document. Control then passes to step .

In step the presentation function is invoked to format and display information in the intellectual asset document. As described above in an embodiment of the present invention cascading style sheets may be used to format the output of the presentation function . At this point flowchart ends.

Step of flowchart is further described with reference to . Referring to control starts in step . In step the intellectual asset protocol function determines where the data in the intellectual asset document needs to be reformatted. If so the intellectual data and processing exchange function is invoked to reformat the data. Control then passes to step .

In step based on the particular type of intellectual asset document received the protocol function refers to the CPML DTD to determine which DTD in the CPML DTD to use assuming the CPML DTD contains multiple DTDs . Control then passes to step .

In step the protocol function refers to the CPML DTD to parse and extract information from the intellectual asset document. Control then passes to step .

In step it is determined whether the intellectual asset document conformed to the CPML DTD . If the outcome is positive then control passes to step . Otherwise control passes to step .

In step the protocol function displays parsing errors via front end server to the user. ends at this point.

Step of flowchart is further described with reference to . Referring to control starts in step . In step the presentation function determines whether the IPAM server needs to be invoked to provide the requested information to the user. Control then passes to step .

In step the prevention function uses the extracted data and or any data received from the IPAM server with a cascading style sheet to produce the desired output for the user. It is possible to select and use different style sheets depending on the task that is being performed so as to display different sets of information and or to display or exchange information in formats that are useful for the task being performed . If the output desired by the user requires the data to be reformatted then the data and processing exchange function is invoked to format the data in the correct form. ends at this point.

As stated above depicts one example of the high level operation of the functions of intellectual asset protocol system . depict another example of the high level operation of the functions of intellectual asset protocol system which will be described next. The CPML DTD supports a number of transactions. For example embodiments of the CPML DTD support automatic update of client information. This feature of the invention is illustrated in a flowchart shown in and a corresponding event trace diagram shown in . Referring to control starts at step .

In step a host provides patent information and patent related information to a client via a CPML document . The CPML document is a representation of U.S. Patent No. 5 832 229. The CPML document includes information related to this patent such as the information indicated in . The CPML document also includes version information which is part of the CPML DTD in the embodiment being discussed. In the example of the version is V. This version information is used to update the client when information changes as described below. Control then passes to step .

In step patent information and or patent related information changes. For example a patent may be reclassified the assignee may change the inventive entity may change a post issuance document may be added etc. These changes are represented in as . Control then passes to step .

In step the IPAM databases in the host are modified to reflect these changes . The host may receive the changes from a variety of sources such as Cassis USPTO Gazette etc. A new version number V is assigned to U.S. Pat. No. 5 832 229. Control then passes to step .

In step the client is automatically updated with the new changed information associated with the new version number V. This may be implemented for example by checking the version number of documents represented at the client . This check would indicate that the client had version V of U.S. Pat. No. 5 832 229. The host would know that the current version of the document was V. Accordingly the host would send V of U.S. Pat. No. 5 832 229 to the client as CPML document . The new CPML document would be used at the client to automatically update its version of U.S. Pat. No. 5 832 229. Flowchart in ends at this point.

As mentioned above IPAM server can operate with XML documents and non XML e.g. EQV documents. This is illustrated for example in .

An XML server receives XML input such as XML documents. The XML server automatically extracts structured information from the XML input and stores the structured information in the IPAM Enterprise databases . There are commercially available XML servers available today such as EXCELON. Any such XML servers can be used with the present invention.

The invention can also work with non XML data. A parser receives non XML input which may be a non XML document. The non XML input is formatted in some manner. The parser knows the format of the non XML input either by preprogramming or on the fly analysis. The parser extracts information from the non XML input and generates XML documents or data. In the case where XML documents are generated the documents are sent to the XML server for processing. In the case where data is generated the data is stored in the IPAM Enterprise databases .

As noted above the CPML DTD supports electronic data exchange transfer and IP related transactions. See for example . For example and without limitation the invention supports an electronic document order and download protocol DTD an example of which is shown in . This DTD can be used to electronically order a document track the order and fill out the order.

XII. Alternative Embodimemt Invention is directed to alternative patent markup language embodiments. One such alternative embodiment is called SPML SmartPatents Markup Language .

The format of CPML documents is specified by the CPML DTD . In contrast the format of SPML documents is specified by SPML specific processing i.e. computer programs that process SPML documents . The end effect is generally the same.

The translation from DTD specified documents to processing specified documents and vice versa will be apparent to persons skilled in the relevant art s based on the teachings contained herein. For example the translation from the processing of SPML to a DTD will be apparent to persons skilled in the relevant art s based on the herein teachings. The general format of a SPML file contains a document header bibliographic data and formatted document text. Prior to discussing the details of the SPML of the present invention an example embodiment of a model used for the SPML will be described.

As stated above the general format of a SPML file contains for example a document header bibliographic data and formatted document text. Referring again to document is used to model the document header. BibItem BibListOf BibSection BibDate BibNumber and BibText is used to model the bibliographic data. Finally Section Paragraph Line Text PageBreak VertSpace are used to model the formatted document text. Each of these are discussed in detail below.

It is noted that the invention is not limited to these elements. The elements and configurations described herein are provided for example purposes only. Other elements and configurations will be apparent to persons skilled in the art based on the herein teachings.

The first line in the document header is a tag that denotes the document type as SPML. This tag is spDoc for the default document type of patent.

The second line in the document header is the major version number of the SPML contained in the file.

The third line of the document header is the minor version number of the SPML contained in the file. The major and mine version number may be used in the document builder to swap in the correct SPML parser. Checksum and file size is not added to the header if it is desirable to edit the raw SPML by hand at a later time.

The bibliographic data section may contain but is not limited to the following items a string of text related to BibText an integer number related to BibNumber a date related to BibDate a section of formatted text related to BibSection and a list of any of these mentioned bibliographic items related to BibListOf . Each of these are described in more detail below.

The format of data in a Section item e.g. BibSection is similar to the formatted text sections of the document text. Only the notable differences will be given here to avoid difficulties in maintaining the same information in two places. The tag for a bibliographic section is B instead of S .

The formatted document text data section may contain but is not limited to the following items sections containing one or more paragraphs related to Section paragraphs containing one or more lines related to Paragraph lines containing one or more text sequences related to Line text sequences containing one or more characters related to Text page breaks related to PageBreak vertical spaces related to VertSpace and special characters not shown in . Each of these are described in more detail below.

The format of data in Line is simply the text items that make up the line of text on a single line in the file 

There is no need for a start tag or end tag because the line in the SPML file itself is the market for when a line begins and ends.

An example format of formatted document text according to an embodiment of the present invention is as follows 

Streaming is a technique for transferring data such that it can be processed as a steady and continuous stream. Streaming technologies are becoming increasingly important with the growth of the Internet because most users or clients do not have fast enough access to download large multimedia files quickly. With streaming the client browser or plug in can start displaying the data before the entire file has been transmitted.

For streaming to work the client side receiving the data must be able to collect the data and send it as a steady stream to the application that is processing the data and converting it to sound or pictures. This means that if the streaming client receives the data more quickly than required it needs to save the excess data in a buffer. If the data doesn t come quickly enough however the presentation of the data will not be smooth. The present invention provides two different streaming techniques that are used in conjunction with the presentation function .

As stated above the presentation function of the present invention is responsible for specifying the format of any output to the user. In an embodiment of the present invention presentation function uses cascading style sheets to format the output of SPML intellectual asset documents. Cascading style sheets provide a CLASS attribute. Developers can use this class attribute to reflect categories of content and not just formatting. The present invention combines the CLASS attribute of cascading style sheets and the streaming technique to provide two streaming mechanisms including a template based streaming mechanism and a visitation based steaming mechanism. Both mechanisms address how to get the SPML files into and then back out of memory. The template based streaming mechanism will be described first with reference to . Next the visitation based steaming mechanism of the present invention will be described with reference to .

Referring to the class of a DocComponentStreamer acts as an adapter to the class of a DocComponent also see so that the streaming behavior is moved out of the class of the DocComponent and into the class of the DocComponentStreamer . This allows the DocComponent to be streamed in several different ways based on the type of DocComponentStreamer used to adapt the DocComponent . Sample code is as follows 

For the template based streaming mechanism of the present invention macros may be written for every different type of streaming desired that acts like an adapter streamer for every type of document component that needs to be written.

Referring to the visitation based steaming mechanism of the present invention will now be described. The class of a StreamingVisitor is accepted by the a virtual method of the class of a DocComponent also see . This allows the visitor to stream the correct information without having to cast the DocComponent to a derived type. All of the streaming behavior is moved out of the class of the DocComponent and into the class of the StreamingVistor . This allow s the DocComponent to be streamed in several different ways based on the type of visitor used. Sample code is as follows 

The SPML document of an embodiment of the present invention may be adapted to different roles through the use of adapter classes. The use of adapter classes provides many advantages including allows different ways of working with a SPML document to be encapsulated different interfaces can be added to the present invention without affecting other existing interfaces prevents a bloated document interface and allows client code to choose the role that the SPML document plays and how it can be used. illustrates an abstract view of how applications may use different adapters in order to work differently with the same SPML document.

Referring to an application utilizes an adapter to work with a SPML document in one way and utilizes an adapter to work with the same SPML document in a different way. An application utilizes an adapter to work with the same SPML document as application in yet a different way. A concrete view of how applications may use different adapters in order to work differently with the same SPML document will be described next.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example and not limitation. It will be apparent to persons skilled in the relevant art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. This is especially true in light of technology and terms within the relevant art s that may be later developed. Thus the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

