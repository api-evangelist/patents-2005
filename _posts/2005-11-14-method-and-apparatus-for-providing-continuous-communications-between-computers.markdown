---

title: Method and apparatus for providing continuous communications between computers
abstract: A system and method for providing continuous availability of information that is normally transported via a network is provided. The system and method uses a process that is used with each computer in a system to simulate the functionality of a network interface card wherein upon the unavailability of the network, transmission packets containing a unique header are send by one application in the system through the process, which stores the transmission packets in queue, and upon filling of the queue writes filled queue to a send volume contained on a storage system. The storage system then copies the data to a second volume, which can be read by a second application. The first and second volumes can either be remotely dispersed or local to one another.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634601&OS=07634601&RS=07634601
owner: EMC Corporation
number: 07634601
owner_city: Hopkinton
owner_country: US
publication_date: 20051114
---
This is a continuation patent application and claims the benefit of priority under 35 USC 120 of U.S. patent application Ser. No. 09 895 466 filed Jun. 29 2001 now U.S. Pat. No. 7 581 048.

The invention relates generally to communications between two or more computers in a network and more particularly to a method and apparatus for providing an alternative communication path if the network is unavailable by choice or by design.

Many computer systems include one or more computers or processors and one or more storage systems that store data used by the computers. These computer systems will have the one or more computers remotely dispersed and connected to one another over a wide area network WAN or the Internet. Often these computer systems will also have the one or more storage devices remotely dispersed over a communication medium capable of transmitting data over long distances. An example of such a system is shown in and includes computers and storage systems and . The computers and typically include processors or Central Processing Units CPUs and and host bus adapters and respectively that each controls communications from the computer to the storage systems and via a corresponding one of the communication buses . It should be appreciated that rather than a single processor and each of the computers can include multiple processors. The communication buses shown in can be any number of different types of communication links. For example each of the communication links could be implemented as a small computer systems interface SCSI bus or in the alternative communication between the computers and the storage systems can be performed over a Fibre Channel fabric utilizing various communication protocols such as Fibre Channel or iSCSI or internet protocol IP that takes advantage of the communication buses.

Each storage system typically includes a plurality of storage devices on which data is stored. In the system shown in each storage system includes a plurality of disk drives and a plurality of disk controllers or back end adapters that control access to the disk drives . Each storage system further includes a plurality of storage bus directors or computer or front end adapters that control communication with the computers over the communication links . Each storage system further includes a cache to improve the performance of the storage system. In particular when the computer executes a read operation from the storage system the storage system may service the read from the cache when the data is stored in cache rather than one of the disk drives to execute the read more efficiently. Similarly when the computer executes a write command to the storage system the corresponding storage bus director can execute the write to the cache . Thereafter the write can be destaged in a manner transparent to the computer to one of the appropriate disk drives . Finally each storage system includes an internal bus over which the storage bus directors disk controllers and the cache can communicate.

Still referring to the system of the system further includes connections between each of the computers and . This connection is shown with an Internet connection being the communication link between the computers and . Each computer also is connected to an Ethernet network which in turn is each connected to a router which serves as to connect each computer to the internet. Each Ethernet network also serves to connect or couple computers to one or more workstations which are available to be used by a plurality of users of the computers . It should be understood that the communication link shown in as the Internet connection could also be any type of wide area network WAN as is well known in the art.

It should also be appreciated that the present invention is not limited to situations where the computers are directly connected to the storage systems. One or more computers may be connected to one or more storage systems using a network with requests and responses being forwarded to the storage systems according to the protocol of the network. One exemplary network in which the present invention may be employed is a Fibre Channel network although the present invention is not limited to use of a Fibre Channel network or any other particular network configuration.

Turning back to he storage systems also are connected with a high speed communication link which will be described. The data stored on data storage system may be crucial to the operation of the computer . Therefore a contingency solution is desirable in the event the a problem is experienced with storage system to ensure that the data is not lost and to minimize the risk the risk of computer being down or unavailable due to issues with the storage system . Potential problems with the storage system can include hardware and or software errors that may make stored data unrecoverable as well as catastrophic events such as an earthquake power shortage or other natural disaster that could result in the destruction or unavailability of the storage system. One solution for protecting the data stored in storage system is to mirror the data into another storage system such as storage system as will be described.

However with the advent of clustering programs or applications such as Microsoft Cluster Server or Veritas Cluster Server that operate on the computers it is becoming critical to ensure that the data which is essential to the operation of these type of applications continues to be available to the applications on the computers even when the normal mode of communication between the applications is down or not available.

It would be advantageous therefore to have a method and device to ensure that even if the normal mode of communication is not available an alternate communication mode could be made available to make certain that applications can continue to send and receive data critical to the operation of the computer systems.

The invention is directed to a method and apparatus for providing and alternative communication mode in the event that the primary communication mode is not available. The computer system has a plurality of computers connected to a storage system where each computer has software that can send and receive information over a network. When the network is not available or is not desired to be used the information that normally would be sent over a network is still able to be communicated between the applications on the computers by receiving transmission packets into an internal thread and placing the transmission packets into a queue determined by the type of transmission packet. If the transmission packet is a write packet it is copied into a buffer and upon the buffer being filled to a predetermined point the internal thread awakes to process the filled buffer by writing the contents of the buffer to the data storage system.

In another embodiment of the invention a computer system has a plurality of applications each in communication with a storage system and the applications each have a process capable of sending and receiving information over a network to one another. The present invention also has method for providing continuous availability of the information even if the network is not available. The process recognizes that the network is not available and in response to the unavailability the information that would normally have gone over the network is written from one of the applications to a first volume. The information is then written from the first volume to a second volume where it can be read from the second volume.

Although the present invention is not limited to clustering applications clustering applications are being used for descriptive purposes to highlight some of the reasons and areas in which Applicant s invention may be useful. A clustering application is generally designed to provide for availability management to minimize both planned and unplanned downtime. For example typical cluster applications such as Microsoft Cluster Server or Veritas Cluster Server are installed into cluster server configurations from 2 to 32 nodes. Referring back to each computer in the system could be a server running any one of the well known operating systems such as UNIX or any UNIX variants such as HP UX or Solaris NT or Linux. In a clustering environment multiple servers are connected to each other and to the storage systems. A node in a cluster is a member of the cluster that usually comprises a server including its storage and network resources. In for example the system could be considered to have two 2 nodes. In the cluster the nodes communicate with each other and if one node fails applications running on that node fail over to run on healthy nodes. Other forms of clustering include parallel processing or load balancing. In parallel processing availability is provided by dividing a large application or task such as On Line Transaction Processing OLTP or Decision Support DSS into many smaller tasks and then running the smaller tasks concurrently on several nodes in order to assist in the quicker completion of the larger task. In a load balancing cluster incoming requests to the nodes are distributed among the nodes in the system. Each server in the cluster is able to handle requests and in the event of a server failure the requests can be redistributed among the remaining servers.

An important command thread in these clustering environments regardless of type is the fact that the nodes need to communicate with each other. In the physical set up for such communication is demonstrated with the internet connection between the computers . Typically in a failover type of cluster the two computers or nodes in this example monitor the status of each other by communicating with each other over what is known as a heartbeat network wherein the heartbeats are signals that are periodically broadcast from one system to another to tell the other nodes in the cluster that each node remains active. If the Internet connection were unavailable the nodes would stop receiving responses or status messages from their peers and will automatically assume that a peer node has stopped functioning and implement fail over procedures. In the event of such a failure the ownership of resources such as disk drives and IP addresses needs to be transferred from a failed node to a surviving node. It can be seen then that the communication link with the Internet at its core is essential to the operation of the system . As indicated it should be understood that although a clustering application is described here as one application which can make use of the present invention the application certainly is not limited to clustering applications. The present invention contemplates use by any application which has a need to communicate with each other and typically does so over a standard network using standard network transport services to perform such communications. Another example of an application that can use Applicant s invention is any type of browser application such as Microsoft s Internet Explorer or Netscape Navigator. Other applications for example would include e mail.

Regardless of whether the communication link is Internet based or is a WAN it is typical that such communication links use the Internet Protocol IP Protocol to provide the data transport services for the communication link. Every other Internet protocol such as TCP is either layered atop of the IP Protocol or is used to support IP from below. The IP Protocol s primary function is to transmit or forward IP packets. The IP Protocol is explained more fully in the Internet Protocol Specification as is well known in the art. The IP Specification was published in September of 1981 and is also known as Request for Communications RFC 792 as defined by the Internet Engineering Task Force IETF . The IP Specification is fully incorporated herein by reference.

At a high level the IP Protocol is a packet oriented protocol that treats each packet independently. This means that each packet must contain addressing information. A typical IP packet contains an IP header followed by a variable length data field. shows the structure of the IP header shown as . The Version Field indicates the format of the header. Internet Header Length IHL is the length of the internet header in 32 bit words and serves to point to the beginning of the data. The Type of Service Field provides an indication of the parameters of the quality of service desired. The parameters are used to guide the selection of the actual service parameters when transmitting a packet through a particular network and thus specify the treatment of the packet during its transmission through the internet or network. The choices for these parameters involve tradeoffs between low delay high reliability and high throughput. The Total Length Field is the length is the length of the packet measured in octets including internet header and data. All computers hosts need to be able to accept datagrams of up to 576 octets. The field allows the length of the packet to be up to 65 535 octets even though such a length is usually impractical for most computers and networks. The Identification Field is an identifying value assigned by the sender to assist in assembling the original datagram from packets. The Flags are for various control flags. The Fragment Offset Field is to indicate where in the datagram a particular fragment belongs. It is usually measured in bits of while the first fragment has offset zero 0 . The Time to Live Field indicates the maximum value time the datagram is allowed to remain in the internet system or network. If the field contains a value of zero o the datagram must be destroyed. The field is also modified in internet header processing. The time in the field is measured in units of seconds but since every module that processes a datagram must increase the Time to Life field by at least one even if it processes the datagram in less then a second the field should only be thought of as an upper bound on the time a datagram may exist. The intention of this is to cause undeliverable datagrams to be discarded and to bound the maximum datagram lifetime.

The Protocol Field indicates that the next level protocol used in the data portion of the internet diagram. The Header Checksum is a checksum on the header only. For those header fields that change i.e. Time to Live this is recomputed and verified at each point the internet header is processed. The Source IP Address indicates the source address of the sending computer while the Destination IP Address indicates the destination or target address of the receiving computer. The Options Field is for the options that may or may not appear in datagrams. Generally they are implemented by all IP modules including host computers but in any particular datagram their transmission optional. Some of the options include Security Record Route Stream Identifier Internet Timestamp End of Option List No Operation Loose Source and Record Route Strict Source and Record Route Record Route and Stream Identifier. Lastly the Padding field is used to ensure that the internet header ends on the 32 bit boundary. If the datagram does not end on a 32 bit boundary padding or extra bits may be added to the datagram to ensure that the header ends on the desired boundary.

Turning back to the data storage system of the controllers of the data storage systems are connected by means of a high speed communication link to a controller on another or secondary data storage system . Such high speed communication links between first and second data storage systems may include a fibre optic link driven by an LED driver per IBM ESCON standard a fibre optic link driven by a laser driver and optionally T1 and T3 telecommunication links. Utilizing network connections first and second data storage systems may be connected to FDDI networks T1 or T3 based networks and sonet networks. Before explaining further details of each host computer or node in the system an overview will be provided as to the remote mirroring capabilities of data storage systems .

Turning back to data storage systems will now be described in further detail. In this example primary data storage system in this example includes front end adapters which interfaces with the computer and receives data from the computer over a communication bus . Data received from the computer is typically stored in cache before being transferred through storage bus adapters or disk adapters over an internal bus to the primary storage devices The storage devices may include physical devices such as disk drives optical disks or other storage devices. The plurality of data storage devices on all of the storage systems in the system may have various volumes both logical and physical .

The primary data storage controller also includes a data director not shown which executes one or more sets of predetermined microcode to control data transfer between the computer cache memory and the storage devices . Although the data director may be a separate unit any of a front end adapters or back end adapters may be operative as a data director to control the operation of a given data storage system controller. Such a reconfigurable channel adapter and disk adapter is disclosed in U.S. Pat. No. 5 335 352 entitled Reconfigurable Multi Function Data Storage System Controller Selectively Operable as an Input Channel Adapter and a Data Storage Unit Adapter and which is fully incorporated herein by reference.

Primary data storage system according to one embodiment of the invention also includes a service processor not shown coupled to primary data storage system which can provide monitoring repair service or status access to the storages system. The storage system also may include a secondary second disk adapter is coupled via the high speed communication link to the other secondary possibly remote data storage system .

It should be understood in this type of mirroring that the secondary data storage system is located at a second site geographically removed from a first site that contains the primary data storage system . A geographically removed site can mean that both data storage systems are in a common building or are not in a common building. The present invention contemplates to providing data continuity to nodes that are not located at the same geographic site. Depending on the type of communication link utilized the distances between the data storage system may be relatively short such as 2 3 kilometers as would be the case for an ESCON link or up to extended distances of greater than sixty kilometers as would be the case for a T1 or T3 link or other types of links as more fully described in U.S. Pat. No. 5 742 792 entitled Remote Data Mirroring and pending U.S. patent application Ser. No. 09 085 868 entitled Method and Apparatus for Interfacing Two Remotely Disposed Devices Coupled Via a Transmission Medium and both fully incorporated herein by reference.

As in the case of the primary data storage system the secondary data storage system includes in addition to the secondary data storage system controllers containing host bus adapters and storage bus adapters a storage devices . As with the primary data storage system the storage devices may have various volumes and usages in particular where for example is a primary storage device for storage system and which is a primary storage device for storage system .

It should be understood that each physical storage device in storage system may also include a secondary volume not shown which serves as secondary storage for the primary data stored on volume of the primary data storage device . Similarly the primary data storage system may include a secondary storage volume which stores primary data received from and copied from the secondary storage system . For purposes of this description primary storage volumes are referred to as R volumes while secondary volumes are referred to as R volumes as shown in . Additionally each storage device in the storage system may include one or more local volumes which are in normal operating fashion accessed only by their locally connected computer.

The secondary storage system also includes at least one a front end adapter which may receive data from a connected secondary computer . Optionally the primary host computer may include a data signal path not shown to connect directly into a front end adapter of the secondary data storage system . Additionally the secondary host computer may include a data signal path not shown directly into a host bus adapter of the primary data storage system .

The high speed communication link between the primary and secondary data storage system and is such that multiple links between the primary and secondary storage system may be maintained for enhanced availability of data and increased system performance. The number of links is variable and may be upgradeable. Additionally the service processor not shown of the secondary storage system may also be coupled for remote system configuration remote software programming and a base point of control for the secondary storage system . Optionally service processor may be in communication with a service processor on the other data storage system through a separate communication link not shown .

The remote mirroring facility is designed to provide for the copying of data from a primary data storage unit e.g. storage system to physically remote secondary data storage system e.g. transparent to the user and external from any influence of the primary host computer which is coupled to the storage system .

The remote mirroring facility is designed to operated in at least two modes the first being a real time or synchronous mode wherein the primary and secondary storage system must guarantee that the data exists and is stored in two physically separate data storage units before input output I O completion that is before the host computer is notified that a copy of the data has been made. Alternatively the remote mirroring facility is designed to operate in a point in time or asynchronous mode wherein the data is copied to the remote or secondary data storage system asynchronously from the time when the primary or local data processing system returns an I O completion signal to the primary host computer.

Thus in the real time or synchronous node the primary data storage system automatically controls duplication or copying of data to the secondary data storage system transparently to the primary host computer. Only after data is stored in both the primary and secondary data storage systems as detected by an acknowledgement the secondary storage system to the primary storage system does the primary data storage system acknowledge to the primary host computer that the data is indeed synchronized.

In the second point in time or asynchronous mode of operation the primary data storage system transparently duplicates data to the secondary data storage system after the primary data storage system acknowledges to the host computer that the data has been written to the storage device and the I O operation has been completed. This assists in eliminating the performance impact of data mirroring over longer distances. Since the primary and secondary data are not synchronized the primary data storage system must maintain a log file not shown of pending data which has yet to be written to the secondary storage device. Such data may be kept on removable non volatile media in the cache memory of the primary or secondary data storage system.

In order for the clustering application environment to fully utilize the functionality provided by the mirroring capabilities of the storage systems in the preferred embodiment of the invention the clustering software works with an additional software process to manage the mirroring resources on the storage system including controlling the mirroring operations. The process should also include an interface between the configurations required for the mirroring operations and the resource definitions of the clustering software. Combining a clustering application with the additional software provides the ability to use the clustering software to move appropriate network and disk resources as well as letting the additional software ensure that availability of data resources is coordinated with changes in the network resources. In the environment described this additional software process will reside between the clustering software and the storage system. Such a software product is marketed and sold by EMC Corporation assignee of the present invention under the name of GeoSpan .

Before proceeding further in addition to the remote mirroring previously described the present invention can also be used with any process or system that allows for the duplication or mirroring of a set of data or volumes both logical and physical . U.S. Pat. No. 6 101 497 entitled Method and Apparatus for Independent and Simultaneous Access to a Common Data Set describes a way to have concurrent access to a data set at a single site within a single storage system. In other words instead of remotely mirroring the data as previously described Business Continuance Volumes BCVs are created. This enables a first computer connected to a storage system to work with or respond to one type of application such as the aforementioned OLTP while another computer also connected to the storage system could work with or respond using the same data to another application such as a backup or other OLTP application. shows a representation of a single storage system shown being connected to a plurality of computers and . As described in U.S. Pat. No. 6 101 497 a series of steps or commands are used to set up the BCV volumes use then while making certain data integrity is maintained. For purposes of the present application it is sufficient to understand that that the data is copied from one volume such as to a BCV volume so the data in the BCV volume can be used by a second computer or application.

In the clustering application environment previously described it is essential to make certain that data critical to system operation can be transported between the computers and even in the event that the Internet the WAN or any part thereof fails or is not available. Still referring to if the Internet connection were to fail in previous systems the datagrams that would normally pass between the computers and would go undelivered even though both computers and were still operating correctly. The result of this would be that each computer and would believe that the other had failed as neither node in the cluster would receive heartbeats from the other nodes the clustering service running on each computer would initiate failover procedures. That is each node would assume the other node s failed and each initiate their fail over sequence. This situation always will cause a node in a clustering application to expend unnecessary resources in effectuating the failover. However if the nodes do not share applications this situation is particularly troublesome. For example if one node primarily handles e mail while serving as a backup for inventory and time reporting while the other node handles inventory and time reporting while serving as a backup for e mail the failover sequence will cause each node to attempt to take over the workload of the other node. This leads to a dysfunctional overall system as each node will be competing to handle all of the operations of the entire system. If there existed an alternative transport mechanism that could provide the same functionality the heartbeat datagrams in this example would continue to be delivered just as if the primary communication mode were available. Therefore an unnecessary failover would not be initiated.

One solution for accomplishing this is to provide an alternative transport mechanism that allows for network data in the form earlier described to be transferred by means other than the actual network without having to set up a redundant network that would solely be used as a replacement for the primary network. This solution can work within the existing systems and software shown and described in and without the need to set up yet another network. In looking at there are two ways that the computers and are connected. The first is the traditional internet or network with Internet at is center. Second the storage systems and also although not directly connect the computers and . When the storage systems and have the mirroring capabilities previously described whether remote mirroring or single system mirroring when combined with software as will be more fully described an alternative exists for the transport of networked data in the event that the primary network is not available.

At a high level the mirroring capabilities of the storage systems and or single storage system are used for the transport of data which normally would have gone over the network. Generally in the remote mirroring scenario computer writes network data to an R volume in storage system which is then mirrored to and R volume in storage system . Then computer can read the mirrored network data from the R volume. In turn computer writes its network data to an R volume on storage system which is mirrored to an R volume on storage system where it can be read by computer . In the single storage system embodiment computer writes data to the volume or volumes at through the appropriate back end directors . The volumes are then copied by a copy program to the BCV volumes where it is available and can be read by an application on computer .

The software that runs on computers to accomplish the operations of the present invention is comprised of a single processes. In the preferred embodiment of the invention the process is a kernel mode driver which needs to simulate the functionality of a network card so that as far as the applications are concerned there is another NIC in the system. A network card often called a network interface card NIC is usually an expansion board that is included with a computer so that the computer can be connected to a network. Most NIC s are designed for a particular type of network protocol and media although some can serve multiple networks. The process when installed onto the computer must be transparent to the computer and the other components in the system . In other words the software must be indistinguishable from a real NIC. For illustrative purposes only this process will be referred to as a Virtual Network Interface Card VNIC process. is a logical representation demonstrating the operating environment of the VNIC process within a Windows NT operating system. In one embodiment of the invention the VNIC process is implemented as a Network Driver Interface Specification NDIS miniport driver. Typically the primary purpose of NDIS is to define standard Application Programming Interfaces APIs for NICs. Since a NIC is normally a piece of hardware the implementation of such is wrapped with some sort of device driver such as a media access controller MAC so that all NICs for the same media i.e. Ethernet can be accessed using a common programming interface. NDIS also provides a library of functions sometimes called a wrapper that can be used by device drivers as well as higher level protocol drivers such as TCP IP . A miniport driver typically replaces platform specific functionality with platform independent wrapper functions. Therefore in one embodiment of the invention the VNIC process is implemented as an NDIS miniport driver that simulates the existence of an Ethernet adapter. Since the VNIC process is a kernel based piece of the operating system it will be called on many different threads or programs executing simultaneously. Because the VNIC process must respond to these externally generated events it spins up an internal thread to provide synchronized access to critical data performing time sensitive tasks such as Input Output I O operations.

It should be understood the prior to the full implementation of the VNIC processes the storage systems have to be set up or configured to handle the data that will be sent and received thorough the software process. To that end on the storage system a volume physical or logical is configured to send data and another volume also logical or physical is configured to receive data or in a single storage setup one volume is set up as a BCV to receive data.

The VNIC process in operation will transmit packets from the sender such as User Data Protocol UDP packets that normally work with the underlying IP Protocol not through the primary IP network as shown in but through an alternative network to the other VNIC process residing on a second computer. To accomplish this in the present invention such two volume pairs must be configured. The volume pairs can be remotely dispersed or can both be local that is contained in a single storage system. However the use of two volume pairs should not been seen as a limitation on the present invention in that a single volume is contemplated so long as the needed information could be contained in a single volume where the sender writes or places data through he VNIC process into one portion of the logical volume and the data can be read by another application where the data gets to that application through a process such as the VNIC process. In for example for computer volumes and form the R R pair for the computer and volumes and form the R R pair for the computer . As indicated in one embodiment each of the VNIC processes have two 2 volumes the reason is that since on the VNIC process the receive volume R is an exact copy of the VNIC process send R volume the respective volumes have identical files and file structures. Even within a single storage system this is true the sending application will write data to its standard volume where it will be mirrored to a BCV. Conversely a second application will write data to its standard volume and mirror it to a BCV one but the sending application in each case will receive data from another application on a BCV.

It should be understood that the solution uses the ability of the storage system or system to mirror data from one storage system to the other or from one volume to another. When the VNIC process is operating the caching and buffering of the storage systems are disabled. This causes all I O operations during use of the VNIC process to be done directly to disk versus through the cache bypassing the cache so that the data is mirrored accurately across the two storage systems. The storage systems when the VNIC process is in use do not use any filesystem buffering.

Just as the storage systems need to be configured the network settings also need to be set for the VNIC process on each computer. Each VNIC process must have its own unique IP address since each computer needs to think that the VNIC process is a network adapter. The VNIC processes can be assigned true IP addresses or they may make use of the local non routable addresses within a specified range to avoid Domain Name Service issues.

After the storage system and network has been set up the VNIC process is loaded into the computers and in a manner similar to any standard network card. In the Windows NT operating system the standard NT wizard is used. During the installation process the block size for the packets should also be specified so it is a predetermined size versus being negotiated by and among the computers in the system. Also as part of the installation process when a clustering application is present the VNIC process reads settings from the operating system s registry for each node in the cluster in order to discover the I O volumes i.e. send and receive volumes . Once it knows its I O volumes the VNIC process creates its internal thread and then waits for the thread to signal of its successful initialization. The internal thread is the workhorse of the system. It ultimately is responsible to accepting transmissions packets from NDIS writing then to the send volume and performing updates of the state information. The internal thread also polls the receive volume to ascertain if any changes to the state file have occurred. In particular it looks for new data. Upon receiving a signal that the internal thread has been initialized the internal thread writes an initialization packet on its send volume. As indicated the send volume is the R volume in the R R pair or the non BCV volume. If the internal thread cannot create the necessary files on the send volume the thread terminates and the process is disabled. Assuming successful creation of the files the internal thread verifies the existence and the accessibility of its receive volume the R volume. Once again if this is not successful the thread terminates and the process is disabled. If these steps are completed the internal thread will proceed into its run time loop.

Before describing the run time loop it should be noted that an application in the system could utilize the alternative path in different ways. For example an application itself may be configured to automatically choose an alternative path in the event that the standard network connection is unavailable. Therefore the application could automatically utilize the VNIC process and send data through the storage system s . Alternatively the IP protocol and specifically the address resolution packets ARP can assist in choosing an alternative path wherein the application in essence broadcasts that it needs a new path and the protocol comes back and informs the application as to what is the best path to take. In other words once the path is selected and if that path is the storage system path the VNIC process is available to assist in moving the desired data from one application to another utilizing either one or more storage systems.

The run time loop is shown in . At step the internal thread is in a wait state waiting for its path to be used and then waiting for an application to send data. If both are in the affirmative the client thread at step submits a NDIS packet which is copied along with a header unique to the VNIC process into the write buffer of the VNIC process. The unique header includes lastRecvdBlock portion that indicates the block number of the last block successfully read from the receive volume. Next a write wake up event is signaled from the VNIC process to write the buffer to the disk drives. The NDIS packet data file is structured in predetermined fixed sized blocks as previously indicated. At step the VNIC processes internal thread wakes up and processes the write queue by removing it from the write buffer and writing it into the send volume. When the datagrams are copied into the write queue it should be understood that the write queue is a fixed size circular queue wherein each datagram is added to the write queue until the write queue is full. The internal thread wakes up when a full block is ready for transmission. Optimally if a predesignated time interval passes without the internal thread being woken up the IO thread will then wake up and check for a partial block. If the internal thread finds a partial block it pads the remainder of the block and writes it to the send volume. There may be a misalignment of the packet and the block boundaries. If this is the case some packets may potentially be split across different blocks. If this occurs the VNIC process will wait for a predetermined period of time such as 200 milliseconds to allow the partially filled block containing the remainder of the last packet put into the write queue to be filled with additional packets. However if during the predetermined period of time this does not happen the VNIC process notes the number of valid data bytes in the first 4 bytes of the block and then will write the partially filled block to the storage devices.

At step the VNIC polls the queue on the receive volume to find out if any new data is there. If it finds new data it reads the data and copies the read data into its read buffer. Then the client is informed the data is in the read buffer with a standard NDIS indicate receive message. After the client is notified at step the client responds by calling the standard NDIS Indicate Receive Packet function to send the packets up through the protocol stack to the client. The VNIC process then extracts the packets of data from the read buffer and then copies the packets into a client buffers. The VNIC process then returns from MiniportTransferData which then causes the client to return from NDISIndicateReceive. VNIC then calls NDISMTransferComplete to in effect complete the operation. Lastly not shown VNIC processes the write queue and goes back to sleep until the internal thread is woken up again. Preferably the datagrams need to be delivered in less than five 5 seconds or some other predetermined time interval corresponding to the cluster time out. Most cluster services will have a time out feature whereby if they do not receive the datagrams or other needed information within this predetermined time period will initiate failover procedures.

Earlier it was described how the VNIC was loaded and start up. The VNIC process can also be shutdown. A shutdown request can come from the operating system like any network card. Upon receipt of a shutdown request the VNIC process stops accepting requests from the clients. If there are any pending client I Os they are completed. However new requests are completed with a status message which indicates to the calling client that the alternative network is unavailable. The VNIC process writes to its state file that it is shutting down and then closes all files and terminates its internal thread.

Having described several embodiments of the invention in detail various modifications and improvements will readily occur to those skilled in the art. Such modifications and improvements are intended to be within the spirit and scope of the invention. Accordingly the foregoing description is by way of example only and is not intended as limiting. The invention is limited only as defined by the following claims and equivalents thereto.

