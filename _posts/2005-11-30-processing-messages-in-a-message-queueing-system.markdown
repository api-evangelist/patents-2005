---

title: Processing messages in a message queueing system
abstract: A system, method, and a computer program product for processing messages in a message queuing system includes an application repository, a message store, and a queue-less application programming interface in each message queuing system. The application repositories may store application identification data provided by applications. The application programming interfaces may put messages to and get messages from the message queuing systems, and provide with each connect and put request application identification data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716678&OS=07716678&RS=07716678
owner: International Business Machines Corporation
number: 07716678
owner_city: Armonk
owner_country: US
publication_date: 20051130
---
The present invention relates to message queuing in an asynchronous messaging network and in particular to a system method and computer program product for processing messages in a message queuing system especially in message queuing clusters.

It is increasingly common to distribute a data processing operation over a plurality of data processing units with each of the units communicating over a data communications network such as the Internet. One reason for this is that a particular data processing unit may be able to do a job better than another so a first unit makes a request for a second unit to do a particular job and then to return the result to the first unit.

It is also common to have a large number of intermediate data processing units which are also known as nodes between the originating unit that makes a request and the destination unit that is being requested to do the work. Each intermediate unit receives the request performs some initial processing to determine what to do with it and then forwards it on to the next unit.

One mechanism for carrying out such distributed data processing is called asynchronous message queuing where applications communicate with each other by sending messages to a queue which can then be accessed by the receiving application at a time that is convenient for the receiving application. IBM s WebSphere MQ trademark software product which has been on the market for a number of years is a popular example of this type of software.

Applications connect to a message queuing system and usually retrieve messages from one queue perform their message processing with the retrieved message and put the message on another queue in the message queuing system. From that queue another application retrieves the message performs its message processing and puts it on another queue and so on. To implement a message flow however each application needs to know the queue names for getting and putting the messages from or to queues. This becomes even more important in a grid where a service provider may provide services in a message queuing network.

The present invention provides a system method and a computer program product for processing messages in a message queuing system by introducing an Application Repository a Message Store and a queue less application programming interface API in each message queuing system.

Applications provide application identifying data like the application class the provider name the application name and the version using the connect function of the message queuing API to the Message Manager. The Message Manager stores the provided application identifying data of each application connected to the queuing system in the Application Repository and removes them when the application disconnects from the queuing system. The application which puts messages to the queuing system provides data for identifying the target application ApplIdentData like application class provider name application name and version using the message PUT function of the message queuing API. The Message Manager stores each message received from the applications including ApplIdentData of the target application in the Message Store and provides messages from the Message Store to the matching applications requesting messages from the queuing system. In a message queuing cluster the member message queuing systems exchange their Application Repositories. If an application connects to one message queuing system in a message queuing cluster the Message Managers of the other message queuing systems automatically forward messages dedicated for that application to that message queuing system until the application disconnects.

Queues exist independently of the applications that use them. A queue can exist in main storage if it is temporary on disk or similar auxiliary storage if it must be kept for recovery or in both places if it is currently being used and must also be kept for recovery.

A message queuing system therefore is a system for asynchronous assured exchange of information in the form of messages between applications connected to the system. The message descriptor of the message is known and interpretable by the message queuing system but not the message body whose layout is variable and application dependent. A message queuing system therefore stores and transports the messages regardless and without knowledge of the message content in the message body.

Multiple message queuing systems can be interconnected in a message queuing network which allows applications on different platforms and different physical locations to easily exchange data without knowledge of the underlying infrastructure. But a source application needs to know the queue name of the target application as well as the name of the queuing system to which the target application is connected. If the target application moves from the original message queuing system to another member message queuing system of a message queuing cluster the messages on the queue of the origin message queuing system are lost for that application until they are manually transferred to the message queuing system the application has moved to.

The message descriptor identifies the message using a message ID and contains additional control information such as the type of the message and the priority assigned to the message by the sending application.

The message body includes the application data. The content and structure of the application data are defined by the application program that use them.

The central component of the inventive message queuing system is the Message Manager . It provides the interface to the applications executes requests of applications and manages the inventive Message Store and Application Repository as well as the communication links . In a message queuing cluster the Message Manager additionally distributes the Application Repository to the members of the message queuing cluster and distributes the messages according to the application connection data in the Application Repository .

Each message queuing system may have its own Application Repository . The Application Repository has an interface with the Message Manager . The Application Repository is used for storing ApplIdentData of connected applications including the message queuing system name the application is connected to and the performance index. The performance index is periodically calculated by the Message Manager and is the quotient of the throughput rate of the application and the current number of messages for that application in the Message Store . The performance index is used for workload balancing in a message queuing cluster. The ApplIdentData is provided by the application with the connect request and preferably includes five data elements 

The ApplIdentData are permanently stored as long as the application is connected in the Application Repository and are concurrently available with the existing session between application and Message Manager. In a preferred embodiment the Application Repository also includes accounting information for each application connected to the message queuing system.

Accounting information includes the user ID from the message descriptor of the processed messages the number of messages processed as well as the total message size and the time frame in which the messages have been counted. The Application Repository is preferably implemented as data base.

Each message queuing system may have its own Message Store as shown in . The Message Store has an interface to the Message Manager . The Message Manager stores the messages received by the connected applications in the Message Store and sends matching messages from the Message Store to connected applications requesting messages from the message queuing system . The messages stored in the Message Store have assigned the ApplIdentData of the target application provided with the message put request of the connected application as well as the source ApplIdentData of the putting application provided with a session between putting application and Message Manger . The Message Store is preferably implemented as data base e.g. IBM DB2 .

The message matching operation is performed on the target ApplIdentData stored with the message and the ApplIdentData of a connected application requesting a message from the queuing system on several levels 

In a further embodiment of the present invention a target application list can be provided with the message which allows assigning a workflow to the message. The message is then sent to applications in the order specified in the target application list by the message queuing system.

The message queuing API is used as an interface between application and Message Manager and provides at least following functions 

Putting a message to the message queuing system requires that the message put request include at least an application class or the ApplIdentKey of the target application. Optionally the provider name the Application ID and the application version can be included. ApplIdentData of the receiving application can be provided with the message descriptor for response report processing purposes.

When getting a message from the message queuing system the message get request may include data elements of the ApplIdentData of the source application . The Message Manager scans the Message Store for messages having an assigned ApplIdentData that matches ApplIdentData of the requesting application and provides the matching message to the requesting application .

In a further embodiment of the present invention the Message Manager provides the additional functionality for operating in a message queuing cluster. The additional functionality of the Message Manager comprises the distribution of the content of the Application Repository to the members message queuing systems of the message queuing cluster. This allows sending messages designated for an application connected to another member of the message queuing cluster directly to that message queuing system. The process flow within such a message queuing cluster is described in connection with .

If an application disconnects from a message queuing system and the same application connects to another member of the message queuing cluster all messages for that application are automatically transferred by the Message Manager to that message queuing system.

In another embodiment of the present invention a performance index of every connected application is computed and stored in the Application Repository . The synchronization of the Application Repository in the message queuing cluster is performed either if an application connects or disconnects or if a performance index deviates by more than a predefined threshold from its last stored and distributed value. If the same application is connected more than one time in the message queuing cluster a work load balancer component that is part of the Message Manager receiving messages for that application sends the messages to the message queuing system with the highest performance index connected with the application.

A preferred embodiment of the inventive message queuing system provides a monitoring component for monitoring applications and in particular messages dedicated to specific applications. Thereby conditions can be defined for raising an alert if messages for a specific application are not processed within a specified time.

If an application sends a message put request to the connected Message Manager including the ApplIdentData of the target application the Message Manager checks whether the respective target application is already locally connected to it. If there is a local connection the Message Manager stores the provided message including the provided ApplIdentData of the target application as well as the ApplIdentData of the requesting application provided with the established session in the Message Store. If there is no local connection and the message queuing system is a member of a message queuing cluster then the Message Manager checks in its Application Repository whether there is an application with the provided target ApplIdentData already connected to a member of that message queuing cluster. If so the Message Manager sends the provided message including the provided ApplIdentData of the target application as well as the ApplIdentData of the putting application provided with the established session to that member message queuing system where the target application is connected to. If the message queuing system is not a member of a message queuing cluster or the target application is not connected to a member of that message queuing cluster the Message Manager stores the provided message including the provided AppIdentData of the target application as well as the ApplIdentData of the putting application provided with the established session in the Message Store.

If the application sends a disconnect request to the Message Manager the Message Manager removes the existing session with that application and deletes the ApplIdentData of that application from its Application Repository. If the message queuing system is member of a message queuing cluster then the Message Manager sends an Application Repository update request to each member of the message queuing cluster for deleting the ApplIdentData of the disconnecting application from their application repositories.

