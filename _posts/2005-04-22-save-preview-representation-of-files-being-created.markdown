---

title: Save preview representation of files being created
abstract: In a graphical user interface environment, a request to save a file may result in a display of a location or view in which the file is to be saved, and may include a preview indicia representing the to-be-saved file. The user may interact with the preview indicia to edit the new file's metadata by repositioning the indicia in a different view, and/or the system may automatically update the preview indicia's location in response to the user editing displayed metadata properties for the new file. The preview indicia may have a distinct appearance, and may persist to show the user how the new file can be located after the save process is performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08707209&OS=08707209&RS=08707209
owner: Microsoft Corporation
number: 08707209
owner_city: Redmond
owner_country: US
publication_date: 20050422
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 566 502 entitled METADATA EDITING CONTROL and filed Apr. 29 2004 and is a continuation in part of U.S. patent application Ser. No. 10 950 075 entitled METADATA EDITING CONTROL and filed Sep. 24 2004 now U.S. Pat. No. 7 421 438 the specifications for which are hereby incorporated by reference.

The present application relates generally to the field of computer software. More particularly the application relates to a system and method for providing an improved user interface when creating and editing documents. The application also relates to graphical user interface elements as used in the process of creating files on a computer system.

Seeing is believing. Computers and computing devices have penetrated all aspects of our lives and this is due in large part to the industry s concerted efforts at making these devices easy to use and understand. One of the key advances in this area has been the graphical user interface GUI . Before such interfaces computer users were forced to learn how to interact with computers though a command line interface. Such interfaces were notorious for strict syntax requirements that made them difficult to learn and use but the GUI changed that. Today users are accustomed to visualizing data files and computer resources as visual representations such as indicia and seeing those representations makes it easier for users to understand what they are doing and believe that they are doing it right.

As computing systems become more and more sophisticated the GUI will be used to convey more and more information. Users have come to depend on the GUI to tell them all they need to know about their system and its files. However current GUI offerings fall short of providing sufficient information.

One area in which current GUIs fall short deals with the way files are represented during the file creation process. shows an example of a Save File dialog used in the MICROSOFT WINDOWS operating system MICROSOFT WINDOWS XP EXCEL POWERPOINT and WORD used herein are trademarks of Microsoft Corporation Redmond Wash. . The dialog has a graphic area in which indicia may appear showing the user the files and or folders that are on the system. This information will tell the user where there file will be saved and may include data fields to allow the user to enter data concerning the file to be saved.

The user viewing the dialog assumes that at the completion of the save process the new file will appear in the area the next time that particular view is entered. However this is merely an assumption and the system does not offer the user any confirmation as to how the new file will appear the next time view area is opened. The user is offered no visual confirmation as to where the new file will go or how it will appear the next time an area is opened.

Furthermore users have come to depend on the visual organization of the various indicia to help them locate files but for the new file that is being saved the user cannot view any such organization until after the file is saved. That may be too late particularly if the user misunderstood the location information presented in dialog during the save process. Perhaps the user assumed that the new file would be placed at the top level of the area when in actuality the file is saved within one of the folders represented by indicia because one was inadvertently highlighted as the user pressed Save. To find the missing file the user would have to hunt for it navigating through several folders to find it again.

The lack of feedback during the save process creates problems for the user and ultimately makes the system more difficult to use than it should be. Accordingly there is a need for an improved approach to guide the user through the process of file creation one that can help make sure that there are no misunderstandings between the system and the user with respect to how the new file can be found again.

Aspects of the present invention may meet one or more of the above needs and overcome one or more deficiencies in the prior art by providing a system and method in which the user is given a preview representation of a file that is about to be created.

The preview may appear as part of a save file dialog and may show an indicia corresponding to the new to be created file and may show how the new file may be visually represented in the GUI after the save is performed.

The preview may exhibit certain behaviors such as having a unique appearance always appearing as a first element to be easily noticed by the user. Users may also interact with the preview to manage the file and or edit its properties even before the file is saved.

The preview may also intelligently guide the user through the save process by for example refusing to allow the user to save the file to an invalid location or automatically populating metadata fields based on user navigation through the GUI.

The present invention relates to a system and method for providing an improved user experience when creating files by offering users a preview representation of a file that is about to be created on a system. An exemplary operating environment for the present invention is described below.

Referring to the drawings in general and initially to in particular wherein like reference numerals identify like components in the various figures an exemplary operating environment is shown and designated generally as operating environment . The computing system environment is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment .

The features described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the features may be practiced with a variety of computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. They may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system includes a general purpose computing device in the form of a computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . If desired any of the elements described herein may be implemented as standalone elements e.g. a single processing unit or as multiple elements working in concert e.g. multiple processing units .

Computer typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Examples of computer storage media include but are not limited to Random Access Memory RAM Read Only Memory ROM Electronically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology CD ROM digital versatile discs DVD or other optical or holographic disc storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store desired information and be accessed by computer . The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A Basic Input Output System BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable nonremovable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to nonremovable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable nonremovable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory units digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a nonremovable memory interface such as interface . Magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for computer . For example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Typically the operating system application programs and the like that are stored in RAM are portions of the corresponding systems programs or data read from hard disk drive the portions varying in size and scope depending on the functions desired. Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they can be different copies. A user may enter commands and information into the computer through input devices such as a keyboard pointing device commonly referred to as a mouse trackball or touch pad a wireless input reception component or a wireless source such as a remote control. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port IEEE 1394 port or a universal serial bus USB or infrared IR bus.

A display device is also connected to the system bus via an interface such as a video interface . Display device can be any device to display the output of computer not limited to a monitor an LCD screen a Thin Film Transistor TFT screen a flat panel display a conventional television or screen projector. In addition to the display device computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks such as connections to a metropolitan area network MAN intranet or the Internet.

When used in a LAN networking environment the computer may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer may include a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the network interface or other appropriate mechanism. Modem could be a cable modem DSL modem or other broadband device. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Other internal components of the computer are possible but not shown. For example various expansion cards such as television tuner cards and network interface cards may be incorporated within a computer .

When the computer is turned on or reset the BIOS which is stored in ROM instructs the processing unit to load the operating system or necessary portion thereof from the hard disk drive into the RAM . Once the copied portion of the operating system designated as operating system is loaded into RAM the processing unit executes the operating system code and causes the visual elements associated with the user interface of the operating system to be displayed on the display device . Typically when an application program is opened by a user the program code and relevant data are read from the hard disk drive and the necessary portions are copied into RAM the copied portion represented herein by reference numeral .

As previously mentioned the features described herein may be described in the general context of computer useable instructions. Computer useable instructions include functions procedures schemas routines code segments and modules useable by one or more computers or other devices. The computer useable instructions form an interface to allow a computer to react according to a source of input. The instructions cooperate with other code segments to initiate a variety of tasks in response to data received in conjunction with the source of the received data.

View may depict a preview representation or ghost representing the file that is about to be saved on the system where the ghost shows the user where the new file will appear in the GUI should the save operation be performed and identifies the location or view in which the new file will be found if saved. In the example the file has not been given a name yet so it bears a label of Untitled. The ghost may have a distinct appearance to indicate that it represents a file that is not yet technically a stored file on the system. The distinction in appearance may be a transparency or opacity setting color font highlight or any other way of offering a different appearance. To help ensure that the user does not lose track of the ghost as the user navigates through different views e.g. selecting a different folder in which to store the file the ghost may be configured to always appear in a predetermined location in the view. For example and as shown in the ghost may be configured to appear as the first indicia shown. The difference in appearance may correspond to changes that occur when a file is selected. For example the ghost may be selected by default and its indicia may have whatever appearance is used in the system to denote selected objects e.g. may be the same distinction discussed above .

The ghost may be treated as any other indicia in the view . Users may select highlight modify drag and drop etc. the ghost as they would any other indicia. depicts an example of the view in which an indicia representing an existing file on the system has been selected by the user. That is indicia may be given a distinct appearance as well and may be given an appearance that is distinct from the ghost . However the ghost may include additional functionality not associated with the indicia for files that already exist. For example ghost may be associated with a unique context menu of functions and options that are applicable to files that aren t already saved.

Ghosts are not limited to GUIs and views in which large indicia are used. To the contrary they may appear in other types of views as well such as a listing as shown in . In ghosts give the user a preview representation of a file that is about to be saved in the example the file has been named Accounts Receivable .

The ghost may be incorporated into the GUI for a system file panel or common file dialog such as the Save File dialog shown in which may be shared by a plurality of applications on the system. In the dialog panel ghost may appear to provide the preview representation of how the new file will appear once it is saved. In this example three views are shown where one view contains indicia for MICROSOFT EXCEL worksheet files one view contains indicia for MICROSOFT POWERPOINT presentation files and one view contains indicia for MICROSOFT WORD documents. The ghost appears in the first view because the file is presently set to be saved as a MICROSOFT EXCEL worksheet. This setting is shown in the metadata portion of the display which may display a set of metadata e.g. author file type etc. for the file that is about to be saved.

The user can interact with the ghost to change the metadata of the file that is about to be saved. The user may drag and drop the ghost onto different views to change the new file s properties to match those of the new view in which the ghost is dropped. For example if a file type is to be changed by clicking and dragging the ghost from the worksheet view to the presentation view the system may automatically update the metadata to reflect that the new file will be of type presentation instead of type worksheet. Similarly other changes in metadata may be made by moving the indicia. For example if one view corresponds to items having a first priority and a second view corresponds to items having a second priority moving the indicia from the first to the second may change the document s priority level to match the second view.

Changes made to the metadata may also be automatically reflected in the ghost . For example should the user enter in a different file name or type in metadata the ghost may automatically change and or reposition itself to reflect the new metadata changing the title to the new name and repositioning itself into the correct view based on the new file type e.g. into view if the user changes the type to a presentation . As another example if a view shows a first priority and the priority is changed in the metadata the indicia may be moved to a different view showing documents having the new priority. In some instances this may cause the ghost to completely disappear from the user s current screen if the ghost is repositioned to a view or location that is not currently displayed on the screen.

The Save File dialog may also include a Save button and cancel button for performing or aborting the save process.

In step the system may check to determine whether the user has changed the current view to cause the new file to conform to the properties of the new view. Changing the view may simply refer to navigating through a display space or changing the criteria of a given display and may be done by entering different criteria e.g. requesting to view files of type .wav and or GUI navigation e.g. dragging and dropping the ghost into a new view or just clicking on a folder indicia to enter the folder . For example if the user requests to see a different view of files such as files of a different type a different location a different project etc. as discussed above then the process may proceed to step to determine whether the new view represents a valid save location physical location or logical location for the file. For example the user might not have privileges for saving files to certain locations or to certain views or the file to be saved is incompatible with the other files in the new view e.g. the user has changed views to a spreadsheet view and the new file is an incompatible image file . As another example ghosts from a common file dialog might be prohibited from being moved to a location outside of the dialog. Changing views does not necessarily always result in changing the new file s properties. In some instances the user may have simply changed views to view different files with no desire to update the properties of the new file to match those of the changed view. For example the user may have simply wanted to see what other documents exist for a particular priority without necessarily changing the priority of the file being saved. If no such updating of the properties is desired when the view is changed the process may move from step to step .

If the new location is invalid the system may move to step and take steps to alert the user that an invalid location has been selected. For example the preview ghost may simply disappear from the view. Furthermore a message may be provided to the user. If this occurs the system may simply remain in this state until the user selects a different view representing a valid location for the file. Alternatively the user may abort the process by for example pressing a Cancel button .

If the new view is a valid location the system may move to step and carry the change through. This may involve a step of relocating the preview ghost so that it appears in the new view. The file s metadata may also be automatically updated to reflect the metadata required if any of the newly selected view. For example if the user chooses a new view of all files in a given project then the Project metadata property may be revised to reflect the new project.

In step the system may check to determine whether the user has requested that the new file replace an existing file. This may be done by for example dragging and dropping the ghost preview indicia onto an indicia of an existing file. If this occurs in step measures may be taken to retain the original set of metadata properties for example by saving them to memory. The displayed metadata properties may be replaced by the properties of the file to be replaced to reflect the fact that the new file will assume the same properties as the file it is replacing. Saving the original properties may be helpful should the user change his her mind about the replacement. Of course dragging and dropping onto an existing file is not always required and in those instances where such functionality is not desired step may be skipped.

In step the system may wait to see if the user executes the save process for example by pressing a Save button . If the user executes the save process then the new file replaces the old in step . The previous properties retained in step may be discarded.

If the user decides not to execute the replacement process such as by selecting the ghost again then the process may turn to step in which the ghost may be displayed in its previous state. The original metadata properties saved in step may be used to repopulate the metadata fields of the ghost preview. Alternatively the new file may retain the properties of the file that was previously to be overwritten. This alternative may make it easy for users to duplicate an entire set of metadata properties without entering each one separately. For example the properties of the item that was but is no longer to be replaced may be retained as a stamp or new default set of properties that may be applied in the future to new saved files.

In step a check may be made to determine whether the user has edited a metadata property value using for example a metadata display area . If the user has edited the metadata the system may automatically move the ghost preview in step to a new location commensurate with the new property and if necessary update the appearance of the ghost preview to reflect the new metadata property e.g. selecting a different indicia if the file type has changed or revising the file name under the indicia .

In step the system may check to determine whether the user has requested to execute the save such as by pressing the Save button . If the user has requested the save operation then the new file is saved in step and the ghost preview is dismissed the new file now appears as a normal indicia .

If the user has not yet finalized the save a check may be made in step to determine whether the user has aborted the save operation by for example pressing Cancel button . If the user has canceled the save operation the ghost may be removed in step . The ghost s property data may also be deleted from the system.

Alternative embodiments and implementations of the present invention will become apparent to those skilled in the art to which it pertains upon review of the specification including the drawing figures. For example the various steps in the described processes may be rearranged modified and or deleted as desired to implement a selected subset of features described herein. Additionally in the above references to certain features being found in one or more aspects or embodiments of the present invention are made simply to illustrate various concepts that may be advantageously used alone or in combination with other concepts and should not be read to imply that there is only one inventive concept disclosed herein or that all of the described features are required in any of the claims that follow. Rather each of the following claims stands as its own distinct invention and should not be read as having any limitations beyond those recited.

