---

title: Defining expressions in a meta-object model of an application
abstract: A method for defining expressions in a meta-object model of an application by locating a string representation of an expression including an identification of a language of the expression; accessing a data type definition corresponding to the language of the expression, the data type definition including a converter for converting the string representation of the expression into an executable runtime representation of the expression; and converting the string representation of the expression into an executable runtime representation of the expression.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761856&OS=07761856&RS=07761856
owner: International Business Machines Corporation
number: 07761856
owner_city: Armonk
owner_country: US
publication_date: 20051115
---
The present invention relates to defining expressions in a meta object model of an application. In particular it relates to defining programming language expressions for automatic inclusion in a Meta Object Facility MOF model of an application.

A domain specific language DSL is a software programming language dedicated to a particular domain or problem. Such languages provide abstractions and notations appropriate to a particular domain and are usually small more declarative than imperative and less expressive than a general purpose language GPL . For example a language for specifying business rules might include abstractions like Rule and Condition. An appropriate DSL makes it easier for a user to define or solve a problem in that domain.

However due to the specialized nature of DSLs it is often necessary to combine a DSL with another programming language in order to fully specify a solution to a problem. For example the Business Process Execution Language BPEL is a DSL for web service scripting. Within a BPEL specification an additional language is used for specific data modification and logical expressions. Such an additional language is the Java programming language Java is a registered trademark of Sun Microsystems Inc. .

Domain specific languages are commonly defined using a language definition standard known as the Meta Object Facility MOF from the Object Management Group OMG OMG and MOF are trademarks of the Object Management Group . A full and formal specification of MOF is available from the OMG at www.omg.org docs formal 02 04 03.pdf Meta Object Facility Specification Version 1.4 April 2002 . The MOF standard provides a technique for specifying an abstract syntax set of concepts and a textual concrete syntax for a language. In the abstract syntax an expression consisting of an expression body in string form and a language identifier can be used to allow arbitrary extensions in other programming languages to be used. Such an arrangement is illustrated in and is described below.

In use the MOF model is parsed by parser . The parser can be an interpreter capable of interpreting the specification of the MOF model and generating an application runtime which is capable of actual execution on a computer system. Alternatively the parser can be a compiler. Parser draws upon a MOF implementation which includes base classes which may be required to fully implement the application runtime . For example base classes might include fundamental functionality data conversion arithmetic operations and the like. Further it is necessary for the parser to employ an expression language application programming interface API . The expression language API provides facilities for the conversion of expression into a runnable expression. For example the expression language API can provide an expression statement interpreter which parses the expression body using a programming language identified by the language identifier in order to generate an executable form of the expression . If the language identifier indicates that the expression is a Java expression the expression language API can employ a Java interpreter to generate an executable form of the expression accordingly. In an alternative implementation an expression language importer is used in place of the expression language API to undertake the same function.

Thus MOF provides an extension mechanism through the definition of expressions having an expression language identifier and an expression body. However for such extensions to be usable in the generation of an implementation of a MOF model it is necessary for an implementer of the MOF model to provide the expression language API or an expression language importer in order that the meaning of an expression can be appropriately interpreted. There is currently no standard way to achieve this without the addition of nonstandard additional programming interfaces or importers.

Thus it would be advantageous to provide a mechanism for allowing new expression languages to be plugged in to a DSL which is defined using the MOF standard without the need for an API or expression language importer to support such new expression languages.

The present invention accordingly provides in a first aspect a method for defining expressions in a meta object model of an application comprising the steps of locating a string representation of an expression including an identification of a language of the expression accessing a data type definition corresponding to the language of the expression the data type definition including a converter for converting the string representation of the expression into an executable runtime representation of the expression and converting the string representation of the expression into an executable runtime representation of the expression. In this way it is possible to extend a Meta Object Facility MOF model to incorporate expression languages without the need to develop a bespoke API or importer for a language interpreter. Rather the existing MOF framework for defining and using data types is employed to define and use expression languages. The MOF framework includes the definition of a converter for converting a string representation of a data value into a data value instance. It is therefore possible to employ the converter to generate an executable instance of an expression corresponding to a string representation of the expression. If required an expression statement interpreter can be used by the converter to achieve this.

The present invention accordingly provides in a second aspect an apparatus for defining expressions in a meta object model of an application comprising means for locating a string representation of an expression the string representation including an identification of a language of the expression means for accessing a data type definition corresponding to the language of the expression the data type definition including a converter for converting the string representation of the expression into an executable runtime representation of the expression and means for converting the string representation of the expression into an executable runtime representation of the expression.

The present invention accordingly provides in a third aspect a computer program product comprising computer program code stored on a computer readable storage medium which when executed on a data processing system instructs the data processing system to carry out the method described above.

The present invention accordingly provides in a fourth aspect a computer system comprising a central processing unit a storage an input output interface and the apparatus for defining expressions in a meta object model of an application described above.

Preferred embodiments of the present invention employ the MOF approach to defining and using data types to integrate expression languages into a MOF model without the need for an API or expression language importer. This MOF approach to defining and using data types is described below with respect to . The particular use of MOF data types to integrate an expression language into a MOF model is considered below with respect to .

This approach to defining and using data types in MOF models is used to extend a MOF model to include expression languages and expressions. is a block diagram of an application Meta Object Facility MOF model such as a MOF model of a domain specific language including an expression language defined as a data type in accordance with a preferred embodiment of the present invention. In the expression language is contained in the package as a MOF data type and includes a language name corresponding to the data type name and a converter . In the converter is adapted to convert a string representation of an expression in an expression language identified by the language name into expression instances suitable for execution at runtime. To achieve this the converter can use an expression statement interpreter which parses the string representation of an expression using a programming language identified by the language name in order to generate an executable form of the expression . Alternatively the expression statement interpreter can be replaced with an expression statement compiler.

For example the string representation of the expression can be a string representation of a Java expression and the expression language can be Java. In this example the converter is therefore a routine for converting a string form of a Java expression into a runtime Java object. A parser generates application runtime by converting the string representation of the Java expression using the converter and the expression statement interpreter . Thus at runtime the expression instance includes a runtime executable Java object as the expression runtime . In this way it is possible to extend a MOF model to incorporate expression languages without the need to develop a bespoke API or importer for a language interpreter. Rather the existing MOF framework for defining and using data types is employed to define and use expression languages. Since the MOF framework includes the definition of a converter to convert a string representation of a data value into a data value instance it is possible to refer to an expression statement interpreter within an expression language data type definition.

In an alternative embodiment it may be necessary for expression runtime to access a value of one or more arguments or to provide a return code. These arguments and return codes can be readily provided through an expression context as is well known in the art.

