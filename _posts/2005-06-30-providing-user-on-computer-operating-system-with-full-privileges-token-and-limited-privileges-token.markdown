---

title: Providing user on computer operating system with full privileges token and limited privileges token
abstract: An operating system for a computing device has a first session for a user that includes a first base process that has a first privileges token attached thereto. The first privileges token includes substantially a full set of privileges of the user on the operating system. The operating system also has a second session for the user that includes a second base process that has a second privileges token attached thereto. The second privileges token is derived from the first privileges token and includes only a minimum set of privileges of the user on the operating system. Thus, the second, limited token does not have all privileges associated with the first, full token but instead has a limited set of privileges and not extra privileges that could be employed to take actions that would be harmful, deceptive, or malicious.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07636851&OS=07636851&RS=07636851
owner: Microsoft Corporation
number: 07636851
owner_city: Redmond
owner_country: US
publication_date: 20050630
---
The present invention relates to an operating system for a computing device and to logging a user on to the operating system of the computing device. More particularly the present invention relates to providing the user as logged on to the operating system with a full privileges token that when attached to a process provides the process with full operating system privileges and also with a limited privileges token that when attached to a process provides the process with limited operating system privileges.

In a typical computing device such as a personal computer or the like the computing device is operated based on an operating system or the like that is instantiated on the computing device. As may be appreciated such an operating system among other things may maintain a user account for each of one or more users that may employ the computing device where each user account among other things may specify rights and privileges hereinafter privileges that the corresponding user has with respect to the computing device. For example the user account for a particular user may specify whether the user can instantiate applications on the computing device whether the user can install applications on the computing device whether the user can alter the operating system of the computing device whether the user can access files of other users on the computing device and the like.

Significantly when a user logs on to such an operating system the operating system may create a token describing the privileges of the user based on the user account thereof where such token is then attached to a base process or the like. As may be appreciated such a base process is likely a shell or other base platform from which other processes may be instantiated. As may also be appreciated such a token is a software construct or the like and rests in a memory of the computing device. Thus such attachment of such a token is likely conceptual in nature and may for example comprise providing the base process with a pointer or other reference to the created token.

At any rate with the attached token the operating system allows the base process to operate only in accordance with the privileges of the user as set forth within the attached token. For example if the base process wishes to read data from a particular location or change system time the operating system in fact allows the base process to read the data or to change the system time only if the attached token so allows based on the privileges set forth therein. Generally employing an attached token to specify privileges for a process running on an operating system of a computing device is known or should be apparent to the relevant public and therefore need not be set forth herein in any detail.

Note that when a first process on an operating system creates a second process on the operating system the operating system typically copies the token of the first process and attaches such copied token to the second process. Thus without more the second process has the same privileges on the operating system as the first process inasmuch as the copied token of the second process specifies the same privileges as the token of the first process. However it may be the case that the first process in the course of creating the second process wishes to restrict the privileges of the second process. If so and as is known the operating system copies the token of the first process for the second process and then removes certain privileges therefrom prior to attaching such copied token to the second process. Here then the second process has less privileges on the operating system as compared with the first process. Typically a first process can assign to a second process only as many privileges as such first process may possess and no more. Thus the privileges of the second process as specified in the token thereof are a sub set of the privileges of the first process as specified in the token thereof.

Based on the above then it is to be appreciated that a user of an operating system on a computing device may be logged on thereto according to a user account that has full privileges. Consequently any application program that such a full privilege user may instantiate on the computing device is without more accorded full privileges. However and significantly an application instantiated with full privileges presents a security risk to the operating system inasmuch as such a full privilege application is not restricted from performing harmful deceptive or malicious actions. Thus a full privilege user may directly or indirectly instantiate an application with full privileges and such application intentionally or unintentionally may exploit the full privileges provided thereto for example to modify files on the computing device to modify the operating system or even to take control of critical operating system behavior.

Accordingly a need exists for a method and mechanism by which the process of an application or the like is provided with a token that contains only a limited set of privileges whereby such a limited privilege token only allows the process to perform a limited set of actions which presumably are not harmful deceptive or malicious. In particular a need exists for such a method and mechanism whereby a user upon logging on to a computing device is provided with both a limited privilege token with a limited set of privileges and a full privilege token with a full set of privileges whereby processes that are not deemed to be especially trustworthy may be instantiated on the computing device based on the limited privilege token of the user and processes that are deemed to be especially trustworthy may be instantiated on the computing device based on the full privilege token of the user.

The aforementioned needs are satisfied at least in part by the present invention in which a computing device operates based on an operating system instantiated thereon where the operating system has a user logged on thereto. In the operating system a first session for the user includes a first base process that has a first privileges token attached thereto. The first privileges token sets forth privileges of the user that may be applied to the first base process such that the first base process operates only in accordance with the privileges of the user as set forth in the attached first privileges token. The first privileges token of the first base process of the first session includes substantially a full set of privileges of the user on the operating system of the computing device.

Also in the operating system a second session for the user includes a second base process that has a second privileges token attached thereto. The second privileges token sets forth privileges of the user that may be applied to the second base process such that the second base process operates only in accordance with the privileges of the user as set forth in the attached second privileges token. The second privileges token of the second base process of the second session is derived from the first privileges token of the first base process of the first session and includes only a minimum set of privileges of the user on the operating system of the computing device. Thus the first privileges token is a full privileges token and the second privileges token is a limited privileges token. In particular the limited token does not have all privileges associated with the full token but instead has a limited set of privileges and not extra privileges that could be employed to take actions that would be harmful deceptive or malicious.

To log the user on to the operating system such user is authenticated based on information obtained therefrom and a user account corresponding thereto as maintained by the operating system and a first session is created for the user. Security information is collected based at least partially on the user account for the user to create a full privileges token that represents a full security context available for the user on the operating system in connection with the first session and the full token is generated based on the security information to encapsulate and specify privileges represented by such security information such that the full token includes substantially a full set of privileges of the user on the operating system of the computing device. A first base process is created for the first session and the full token is attached to such first base process such that the first base process operates only in accordance with the privileges of the user as set forth in the attached full token.

The full token is reviewed to determine that such full token includes privileges beyond a predetermined minimum set of limited privileges and a second session is created for the user. Another full token is generated to include substantially a full set of privileges of the user on the operating system of the computing device and the another full token is modified by removing all privileges except the minimum set of limited privileges to convert such another full token into a limited privileges token that represents a limited security context available for the user on the operating system in connection with the second session. The limited token thus includes a limited set of privileges of the user on the operating system of the computing device as compared with the full set of privileges of the full token. Finally a second base process is created for the second session and the limited token is attached to such second base process such that the second base process operates only in accordance with the privileges of the user as set forth in the attached limited token.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of co processing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline s .

It can also be appreciated that an object such as may be hosted on another computing device or . Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wire line or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides the infrastructure for widely distributed computing and encompasses many different networks.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11 b or wired e.g. Home PNA Cat 5 even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently moving forward computing devices will require ways of protecting content at all portions of the data processing pipeline.

The Internet commonly refers to the collection of networks and gateways that utilize the TCP IP suite of protocols which are well known in the art of computer networking. TCP IP is an acronym for Transport Control Protocol Interface Program. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the example of computers etc. can be thought of as clients and computer etc. can be thought of as the server where server etc. maintains the data that is then replicated in the client computers etc.

A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server.

Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example Hypertext Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW . Typically a computer network address such as a Universal Resource Locator URL or an Internet Protocol IP address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example communication can be provided over a communications medium. In particular the client and server may be coupled to one another via TCP IP connections for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with a server in communication with client computers via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process store or render secure content from a trusted source.

In a network environment in which the communications network bus is the Internet for example the servers can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers may also serve as clients as may be characteristic of a distributed computing environment. Communications may be wired or wireless where appropriate. Client devices may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer and server computer may be equipped with various application program modules or objects and with connections or access to various types of storage elements or objects across which files may be stored or to which portion s of files may be downloaded or migrated. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other devices and databases .

Turning now to it is seen that a computing device is operated based on an operating system or the like that is instantiated on the computing device . Such computing device operating system and instantiation may be any appropriate computing device operating system and instantiation without departing from the spirit and scope of the present invention.

As shown the operating system among other things maintains a user account for each of one or more users that may employ the computing device and each user account among other things specifies privileges that the corresponding user has with respect to the computing device . Such user accounts and privileges specified therein may be any appropriate user accounts and privileges without departing from the spirit and scope of the present invention. For example and as was set forth above the user account for a particular user may specify whether the user can instantiate applications on the computing device whether the user can install applications on the computing device whether the user can alter the operating system of the computing device whether the user can access files of other users on the computing device and the like.

When a user logs on to such an operating system the operating system may create a token describing privileges of the user based on the user account thereof. As was set forth above the operating system may operate multiple processes on the computing device where each process has an attached token and where the operating system allows each process to operate only in accordance with the privileges of the user as set forth within the attached token .

Generally when a user first logs on to the operating system the operating system creates a base process with the created token attached thereto by way of security sub system of the operating system . The base process may then generate additional processes each with an attached token such additional processes may then in turn generate additional processes each with an attached token and so on. Significantly each child process as generated by a parent process inherits the token of the parent process although the inherited token may only contain a subset of the privileges of the parent process . In particular the inherited token is a copy of the token of the parent process perhaps with certain privileges removed.

It is to be appreciated then that if a user is logged on according to a user account that has full privileges any process instantiated based on such user can have attached thereto a token with full privileges. However such a process with full privileges is a security risk to the operating system in that such a process can perform harmful deceptive or malicious actions with regard to the operating system .

In one embodiment of the present invention then when a user logs on to such an operating system the operating system creates a pair of tokens each describing privileges of the user based on the user account thereof. In particular in one embodiment of the present invention the user as logged on to the computing device is provided with a first session with an associated full privileges token representing a full set of privileges available to the user and a second session with an associated limited privileges token representing a limited set of privileges available to the user. Accordingly the limited privileges token does not have the full spectrum of administrative privileges associated with the full privileges token . That is the limited privileges token includes only a limited set of privileges that most processes operating on the computing device should require but not extra privileges that most processes should not require and that might be used in an attempt by a rogue process to take actions that would be harmful deceptive or malicious.

The differences between the privileges set forth in a limited privileges token hereinafter a limited token and in a full privileges token hereinafter a full token may be any differences without departing from the spirit and scope of the present invention presuming such differences are designed to deter the aforementioned harmful deceptive or malicious actions of a rogue process . Such differences are known or should be apparent to the relevant public and therefore need not be set forth herein in any detail. At a minimum though a process with an attached limited token should not be allowed to modify the configuration or system behavior of the operating system on the computing device .

Most any application program executable or the like hereinafter application run by a user likely should be instantiated as a process from the second session that is assigned the limited token and therefore represents a lower risk to the operating system and computing device . In contrast the full token with all administrative privileges likely should only be available to a process from the first session instantiating an application designed to carry out administrative tasks on the operating system after the user provides consent to do so. Alternatively the limited token should be assigned when an application is not especially trustworthy while the full token should be assigned when an application is indeed especially trustworthy.

In one embodiment of the present invention the second session as defined by the limited token is primarily employed to create processes for a user. Thus all processes of the second session have attached thereto a copy of the limited token perhaps with certain privileges removed.

Of course it may in fact be the case that from time to time a process legitimately requires privileges that are available from the full token for the user and not from the limited token for such user. In such an instance the limited parent process for such a full child process in effect generates same but does not have the limited token attached to such full child process upon such generation. Instead and in one embodiment of the present invention the limited parent process accesses the security sub system of the operating system with a request to generate the full child process and a copy of the limited token . As may be appreciated then the security sub system determines whether the full child process can indeed be generated. If so the security sub system reviews the limited token to locate therein a reference to the corresponding full token for the user locates such full token based thereon and then appropriately generates such full child process with a copy of the full token attached thereto.

To summarize thus far then with the present invention a user logged on to an operating system is provided with a limited token associated with a first session and specifying a limited set of privileges and a full token associated with a second session and specifying a full set of privileges. The limited token as implemented is a filtered version of the full token with privileges of the full token that are deemed sensitive in terms of security removed. The full token is protected by the security sub system of the operating system so that such security sub system controls which processes have attached thereto a copy of the full token . Thus a limited parent process can not itself generate a full child process and cannot elevate itself to full status.

Essentially the security sub system generates both the full token and the limited token for the user as logged on and each token as generated is associated with a separate session . The limited token is associated with the full token and thus the tokens are linked to allow a limited process to initiate generation of a full process such as for example when the operating system decides to do so based on a request from a caller or the like. As maybe appreciated such a caller may be a user attempting to exercise additional privileges an application requiring use of additional privileges and the like. As may also be appreciated a user or application in the context of a full process may also call to initiate generation of a limited process to for example limit any threats or perceived risks. The default session for the user is the limited session associated with the limited token . Thus new processes are generated to be attached to a copy of the limited token by default.

In one embodiment of the present invention and turning now to a process employed to log on a user to a computing device with the operating system is shown. Preliminarily the user is prompted to provide appropriate authentication information such as for example a user name and a password and the security sub system of the operating system of the computing device collects and validates same based on a user account corresponding to the authentication information for the user step .

Presuming such validation succeeds the security sub system then creates a first session by requesting same from a core part of the operating system that is secure such as a kernel or the like step . In addition the security sub system collects all security information necessary to create a full token that represents the broadest security context available for the user on the operating system in connection with the first session step . Such security information may be any appropriate security information without departing from the spirit and scope of the present invention. For example such security information may include identifications of the user and groups to which the user belongs identifications of security types to be associated with the user identifications of privileges to be applied to the user and the like.

The security sub system then submits such collected security information to the kernel or the like and the kernel reviews such submitted security information and in fact generates a full token based thereon to encapsulate and specify the privileges represented by the submitted security information step . Such generation of such full token by the kernel or the like is known or should be apparent to the relevant public and therefore need not be set forth herein in any detail. Accordingly and particular method of generating the full token may be employed without departing from the spirit and scope of the present invention. Typically the generated full token is maintained in a memory reserved for the kernel and the kernel returns to the security sub system a reference to such full token as residing in the memory step .

Thereafter the full token may be used as appropriate to finalize logging the user on to the first session on the operating system . In particular the security sub system may by appropriate request to the kernel create a base process for the first session and attach the full token to such base process step . Note that in doing so the base process is in effect the property of the newly logged on user as represented by such full token .

In one embodiment of the present invention in addition to the previous steps the process of logging the user on to operating system continues with the security sub system requesting that the kernel review the full token to determine if such full token includes privileges above and beyond a predetermined minimum set of limited privileges and such kernel in fact performs such review and returns the result of such a review to the security sub system step . Such review may be performed in any appropriate manner and based on any appropriate criteria without departing from the spirit and scope of the present invention. For example the kernel may be provided with a list of conditions defining the minimum set of limited privileges may review the full token against the conditions list and may return a positive result if in fact the full token includes privileges above and beyond the predetermined minimum set of limited privileges as embodied by the conditions list . Such conditions list may for example include whether the user is a high level user whether the user has certain privileges whether the user is in a particular group whether the user is a member of a high level domain and the like.

If the result as returned by the kernel is negative such that the full token does not include privileges above and beyond the predetermined minimum set of limited privileges as embodied by the conditions list and as may be appreciated such security sub system need not in fact generate a limited token for the user especially inasmuch as the full token for such user is in effect not a danger to the operating system . However and as should also be appreciated if the result as returned by the kernel is positive such that the full token does indeed include privileges above and beyond the predetermined minimum set of limited privileges as embodied by the conditions list the security sub system should continue and generate a limited token for the user to protect against such danger.

Accordingly in response to a positive result the security sub system continues by creating a second session by requesting same from the kernel step . In addition the security sub system again requests that the kernel generate a full token although this time for the second session step . Note that such full token for the second session may be generated substantially as before with the security sub system collecting all security information necessary as at step submitting same to the kernel as at step and receiving a reference to such full token from the kernel as at step . Alternatively if available the security sub system may merely request that the kernel duplicate the full token of the first session as the full token of the second session and return a reference to such full token of the second session .

In either case with the reference to the full token for the second session the security sub system requests that the kernel modify the full token for the second session by removing all privileges except the minimum set of limited privileges as set forth in the conditions list . In response the kernel in fact modifies the full token for the second session by removing all privileges except the minimum set of limited privileges as set forth in the conditions list thus converting such full token for the second session into the limited token for the second session step . In effect then the kernel filters the full token according to the conditions list to produce the limited token . Although the kernel could at this point return a reference to such limited token for the second session such a reference should be the same as the previously returned reference for the full token for the second session and therefore is not believed to be absolutely necessary unless for some reason the reference is in fact different.

Once the limited token for the second session is generated and as was alluded to above such limited token should be associated with the corresponding full token for the first session so that such association can be employed in the event a limited process in the second session is to initiate generation of a full process in the first session . To do so and as may now be appreciated the security sub system requests that the kernel in fact create such association. In response the kernel in fact so associates the limited token for the second session with the full token for the first session step .

Thereafter and as before the limited token may be used as appropriate to finalize logging the user on to the second session on the operating system . In particular the security sub system may by appropriate request to the kernel create a base process for the second session and attach the limited token to such base process step . In doing so and again the base process in effect becomes the property of the newly logged on user as represented by such limited token .

Note that a process as instantiated by the operating system with a full or limited token need not necessarily be a process resident on the computing device of such operating system . Instead such process could be remote such as for example on a server communicatively coupled to the computing device . In such a situation the privileges present in the limited token would be transferred to the server by way of a security protocol so that the server trusts same.

Note too that although the present invention is set forth herein in terms of a full token for a first session and a limited token for a second session additional tokens for additional sessions may also be employed. For example it may be the case that the security sub system obtains additional tokens from the kernel for one or more intermediate sessions each with some intermediate level of privileges.

Note further that although the present invention is set forth herein in terms of a security sub system communicating with a kernel to obtain a token other arrangements and constructs may alternately be employed without departing from the spirit and scope of the present invention. For example it may be the case that the security sub system and the kernel or at least the relevant portions of such kernel are embodied as a unitary construct. Likewise it may be the case that the security sub system itself is in fact multiple services performing different functions as necessary.

Note finally that although the present invention is set forth herein in terms of a token with privileges such privileges on such token include not only privileges but rights groups and any other grants to a user that are employed to allow such user access to documents resources files workspaces and the like. Thus privileges should not be considered limiting but instead should be interpreted as broadly as possible.

The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight forward and should be apparent to the relevant programming public. Accordingly such programming is not attached hereto. Any particular programming then may be employed to effectuate the present invention without departing from the spirit and scope thereof.

In the present invention a method and mechanism are provided by which a process of an application or the like is provided with a token that contains only a limited set of privileges whereby such a limited privilege token only allows the process to perform a limited set of actions which presumably are not harmful deceptive or malicious. In particular a user upon logging on to a computing device is provided with both a limited privilege token with a limited set of privileges and a full privilege token with a full set of privileges whereby processes that are not deemed to be especially trustworthy may be instantiated on the computing device based on the limited privilege token of the user and processes that are deemed to be especially trustworthy may be instantiated on the computing device based on the full privilege token of the user.

It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. It should be understood therefore that this invention is not limited to the particular embodiments disclosed but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims.

