---

title: Hypermedia browser API simulation to enable use of browser plug-ins and applets as embedded widgets in script-language-based interactive programs
abstract: A system is described which provides the capability for high-level extensible scripting language interpreters to incorporate and employ Web browser plug-ins as components within script-based programs. A script interpreter extension is described which simulates the plug-in API interface of a Web browser, from the point of view of the browser plug-in, to allow program scripts to cause browser plug-ins to be launched and manipulated, in a manner similar to the scripting platform's native widgets, from within the executing program script. This system allows embedded external program objects to be used to display and enable interactive processing of embedded data objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814157&OS=07814157&RS=07814157
owner: Eolas Technlogies, Inc.
number: 07814157
owner_city: Tyler
owner_country: US
publication_date: 20050214
---
This application is a continuation of and claims the benefit of U.S. patent application Ser. No. 09 481 984 filed Jan. 11 2000 now U.S. Pat. No. 6 857 124 the disclosure of which is incorporated herein by reference.

Computer application paradigms go through a constant process of evolution. Fifteen years ago personal productivity applications typically were text based ran in full screen mode and each application tended to employ a unique set of user interaction commands. As multi windowed graphical user interface systems became popular applications developed for these environments began to adopt standard types of interface models to minimize users confusion as they switched back and forth among multiple open applications. As a result of feature competition among vendors productivity applications built for these windowed environments began to grow larger and larger. Simultaneously users began to demand easy transfer of data between documents created with various applications. This led to the creation of compound document architectures such as Microsoft s Object Linking and Embedding OLE system. OLE based applications were designed from a document centric mindset allowing several large monolithic productivity applications to share a single document view and trade off the graphical interface so that the user wouldn t have to move his or her eyes away from the document being worked upon as each application was interactively activated usually with a double click on a bitmap in the document by the user. This model worked well enough when only a few major applications were involved and when the user was primarily interested in editing documents which would be printed for use. The growth of the Web however ushered in a new use for document files as a direct tool for networked communications and information retrieval.

The Web s new plug in and applet technology created a new paradigm for application development. This new system focused on the document as a container for multiple small embedded program objects rather than as the OLE style task switcher of the Windows model. This new system also ushered in a new interaction paradigm as well. The Web document became the primary application with the document automatically choreographing the collection of document component data and the activation of the embedded applications necessary to present the user with a single and seamless interactive interface to the document s content.

The Web document as application model was first established at the University of California San Francisco s Center for Knowledge Management. Their work and their proposal for a standard Web API WAPI was described in the lead article of the February 1996 issue of . This technology allowed the creation and use of plug in applications that Web content authors could easily employ to dynamically extend the functionality of WAPI enhanced Web browsers and Web pages at viewing time without having to modify the actual browser code. Although WAPI did not itself become an industry standard it inspired later commercial systems that went on to transform the entire computer software industry.

Essentially modeled upon the UCSF Eolas WAPI the Netscape browser plug in API created a de facto standard that has been implemented in all major browsers. This resulted in the subsequent development of hundreds of plug ins that were then made freely available online all of which conform to a standard architecture. The availability of such a large number of application components has made the very popular and powerful platform for application development. The Web document parsing model allows late binding of these application components together with runtime fetching of component specific data objects thereby insuring that users can both always enjoy the latest improvements to component programs and always see the latest updates to embedded object data. It also allows application design to be independent of underlying computer system architecture. This has proven to be a very effective means for application integration with legacy software systems proving very popular among corporate applications developers.

Modern scripting languages such as Tcl Tk provide the ability to write text scripts which define interactive applications through run time parsing of script files. Similar to the situation with Web pages this type of architecture provides for late binding of application functionality through such runtime script parsing. Tcl Tk provides a standard APIs for enhancing both the command set and widget set of the interpreter through interpreter extension that are loaded at runtime. Although this provides some advantages similar to those of browser plug ins there are not nearly as many widget extensions available as there are browser plug ins. Furthermore the interpreter extension mechanism did not make provision for late binding of component application code with application data as the browser plug in model does.

A system is needed that allows general program development systems to benefit from the large number of embeddable applications in the form of browser plug ins that are available to easily expand the functionality of these development platforms at run time as well as to provide runtime binding of component logic with remotely networked data objects.

The present invention provides these useful advantages through the novel and counterintuitive synthesis of existing industry standard Web browser technology with script language interpreter extension technology. Although widgets are developed specifically for use as extensions to a particular scripting language the base to support development of such applications is small compared with the base to support development of plug in applications. Thus the present invention allows script based applications to tap into the vast pool of functional resources provided by web browser plug in applications.

According to one aspect of the invention plug in extension code includes code for parsing a program script to detect an embed command for fetching an object referenced by the embed command and simulating a web browser interface to automatically invoke a web browser plug in identified by the data format of the object.

According to another aspect of the invention the plug in interface allows web browser plug ins to be used by the script based application as embedded widgets.

According to another aspect of the invention the plug in interface allows the plug in application to interactively display and manipulate the object in a child window controlled by the script based application.

According to another aspect of the invention the object if fetched using standard internet protocols such as http or file access.

According to another aspect of the invention the interpreter extension mechanism provides for late binding of code and application data.

Other features and advantages of the invention will be apparent in view of the following detailed description and appended drawings.

A preferred embodiment will now be described that utilizes the Tool Command Language and Tool Kit Tcl Tk which is scripting language useful for WWW based applications. Tcl Tk was developed by John Ousterhout and is described in his book entitled Addison Wesley ISBN 0 201 63337 X . However the invention is generally applicable to any scripting language such as for example Perl Python Rexx or Visual Basic.

In a preferred embodiment an extension to a scripting language simulates a browser from the point of view of a plug in in order for the plug in to be embeddable within a script program interface and manipulable in a manner similar to a native widget. Program code in the extension provides the same functions and interfaces to a plug in as provided by an industry standard Web browser application programming interface API . From the plug in s viewpoint the extension appears to be a conventional Web browser. Data objects are referenced in SRC parameters in the scripting language command syntax. These data files are fetched at run time using standard Web protocol conventions e.g. http or file access . The script text file is parsed by the script interpreter at run time to identify language commands. A new script command is created which mimics a standard hypermedia embed text format. This command then causes the plug in interface extension to invoke code in the extension that allows the browser plug in to be automatically invoked in order to allow display and interaction with embedded objects whereby those embedded objects are treated by the scripting language platform as interactive widgets which can be embedded within the script program graphical user interface.

One embodiment of the invention employs a wrapper utility written in the script language which defines a procedure which is able to parse and respond to an embed text format an EMBED tag which may be copied from a conventional HTML page and pasted into a program script. The wrapper utility procedure does this by parsing the EMBED tag fetching the file defined by the src attribute of the tag and invoking the plug in extension while passing any associated EMBED tag parameters to the plug in as passed arguments via the script language s argument passing mechanism.

Sub blocks and represent different script interpreter plug in extensions sub blocks. Each sub block includes a plug in extension which simulates a web browser interface to the browser plug in application and also allows the plug in application to interactively control and manipulate the fetched object in window controlled by the script based program.

The following is a list of API functions simulated by the plug extension in a preferred embodiment to simulate the plug in interface of a Netscape web browser 

The details of the implementation of a preferred embodiment are set forth in the source code appendix to this patent application.

The invention has now been described with reference to the preferred embodiments. Alternatives and substitutions will now be apparent to persons of skill in the art. In particular the invention is applicable to all extensible scripting languages and is not limited to any particular set of existing scripting languages. The differences between scripting languages and system languages and the fundamental characteristics of scripting languages are set forth in an article by John Ousterhout entitled 21 March 1998.

Further although the preferred embodiment simulates the plug in interface of a Netscape browser application the nature of extensible scripting language allows the principles of the invention to be extended to any browser application.

