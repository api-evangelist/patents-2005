---

title: Method and apparatus for obtaining agent status in a network management application
abstract: A system determines status of agent execution of a command in a network. The system identifies a command to be performed by an agent and issues the command to the agent for execution. The agent operates a status manager that tracks execution status of commands in the agent. The system sends status requests to the agent to determine a status of execution of the command by the agent and the agent responds and sends a status response indicating the status of the execution of the command by the agent. Applications are thus provided with current status of execution of long running commands in an agent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08180846&OS=08180846&RS=08180846
owner: EMC Corporation
number: 08180846
owner_city: Hopkinton
owner_country: US
publication_date: 20050629
---
The rapid expansion of information service and data processing industries has resulted in a need for computer systems to manage and store large amounts of data. As an example financial service industry organizations such as banks mutual fund companies or the like often operate large and complex data processing systems that require access to many hundreds of gigabytes or even terabytes of data. Computer system developers have responded to these types of data storage and information sharing requirements by crating large complex networks that store data. An example of a network that stores data is referred to as a storage area network or SAN. A typical SAN is a collection of data storage systems that are networked with a number of host computer systems that operate as servers to access data stored in the data storage systems. Other types of networks include wide are networks such as the Internet and local area network such as smaller corporate networks.

Using a SAN as an example network elements of a typical conventional storage area network implementation include one or more connectivity devices such as high speed data switches or routers that interconnect the various data storage systems to each other and to one or more host or server computer systems servers that require access to e.g. read and or write the data in the data storage systems on behalf of client software applications and or client computer systems.

A developer or manager of such a network environment may install one or more distributed network management software applications within host computers in the network to manage or administer the various resources i.e. devices host computer systems storage systems applications etc. that operate within the network. A network manager i.e. a person responsible for management of the network operates the network management software application s to perform management tasks such as performance monitoring network analysis and remote configuration and administration of the various components i.e. software and hardware resources operating within the network.

A conventional network management software application may have several different software components that execute independently of each other on different computer systems but that collectively interoperate together to perform network management. As an example conventional designs of storage area network management software applications can include a management station programs such as console and server processes several agent processes that operate on remote host computers store process and possibly other software processes.

Generally the server process operates as a central control process within the storage area network management application and coordinates communication between the console storage and agent processes. The console process often executes within a dedicated network management workstation to allow a network administrator to visualize and remotely control and manage the various elements within the storage area network that are graphically represented on an interface presented by the console. The console allows the administrator to for example issue a command to an agent operating on a host computer within the network being managed. Agent processes execute on various host computer systems such as servers within the storage area network to manage storage area network entities i.e. managed resources such as devices . As an example there may be different respective agent programs specifically designed e.g. coded to remotely manage and control certain vendor specific data storage systems databases switches and so forth.

Agent processes receive remote management commands from the server process and apply functionality associated with those management commands to the managed resources within the storage area network for which those agents are designated to manage. Agents may receive a command for example to collect or discover configuration or management data concerning the network resources that those agents manage. This device discovery data collection process can happen in a scheduled or periodic manner or in response to a command received from the management server. When agents are finished processing a command results are returned to the store process for storage within a database. The server can then access the database to view the results of the command sent to the agent process.

Conventional network management applications that utilize agents that receive commands from server or other processes suffer from a variety of deficiencies. In particular when a command is provided from a server or other process to an agent process conventional systems do not provide mechanisms to allow that agent to track specific status of operation e.g. execution of the command within the agent. Additionally conventional network management applications that provide for remote agent command execution provide no specific mechanisms to allow the server to console processes to obtain detailed status on the progress of execution of the command by that agent or lack of performance in the event of a failure of the command or if the agent is slow to execute . As a result a user such as a storage area network manager who initiates execution of a command that is then sent to an agent is not made aware of the state of execution of that command by the agent until the command completes execution and the conventional agent returns the data produced as a result of command execution into the database. Some commands may cause and agent to perform execution of that command for long periods of time such as several minutes or even hours. In such cases using a conventional management application the operator is left guessing about the progress of execution of the command by the agent until completion of the command if it completes successfully since there are no status reporting mechanism provided to provide periodic detailed status of command execution by an agent.

As an example if an agent is responsible for controlling operation of i.e. managing a large capacity data storage system such as an array of disks the operator may desire to obtain the current state of the storage system by sending a command to the agent to capture or discover the current state of all managed resources associated with i.e. operating within that storage system. The actual data collection process that the agent performs uses software application programming interfaces to query the data storage system for data indicating the current configuration and operational state of the data storage system. The data storage system responds by sending the agent numerous portions of management data that contain a snapshot of the state of configuration of the data storage system. The conventional agent then transports the entire management data set to the storage component of the management application. This data transfer operation may be done in portions over time to limit load placed on the storage process. The storage component of the network management application receives the collected management data from the agent and processes and stores this information into a storage area network management database for access by the server and console components. The agent completes execution of the command when all data has been collected form the management resource and successfully transferred to the store process for placement in the database. The full execution of the command by the agent from start to finish may take several minutes or hours to complete.

Embodiments of the invention provide a system including methods computer apparatus and computer readable medium encoded with software that are capable of determining status of agent execution of a command in a network by an agent. The system includes a command manager process that operates in a server computer such as a network management station and the system also includes a status manager process that operates within an agent receiving a command from the command manager process in the server. The processing of the command manager and the status manager each alone or in combination represents embodiments of the invention.

During operation of the command manager within the server the command manager identifies a command to be performed by an agent such as a command received by the command manager from an application such as the console. In one configuration receipt of the command includes receiving a command submission indicating the command is to be executed as a transaction on the agent and indicating that the application is to be notified of the status of the command. The command manager creates a transaction identifier associated with the command and registers the application as an application to be notified of the execution status of the command by the agent in association with the transaction identifier. The command manager then issues the command to the agent for execution by the agent. In one configuration issuance of the command includes transmitting the command and associated transaction identifier to the agent to allow the agent to execute the command and track status of the progress of execution of the command in association with the transaction identifier associated with the command.

The application can provide the command manager with an interval at which to check status of execution of the command by the agent. Upon occurrence of this interval the command manager sends a status request to the agent to determine a status of execution of the command by the agent. In one configuration the status request includes the associated transaction identifier to allow the agent to associate the status request with specific execution status of the command in progress by the agent based on the transaction identifier. In response to the status request the command manager receives a status response from the agent indicating the status of the execution of the command by the agent. In one configuration the status response identifies a transaction identifier associated with the status response and the command manager can identify the application s to be notified of the execution status of the command by the agent in association with the transaction identifier and returns status indicated within the status response to the application s having the associated transaction identifier that have registered to receive status on execution of the command.

In one configuration the command is a long running command to be executed by the agent for more than one minute and sending of status requests to the agent to determine a status of execution of the command by the agent occurs multiple times during execution of the command by the agent. The status of the execution of the command by the agent can include for example returning to the application status such as command completed command in progress command failed or command unknown status.

In an agent operating to manage a resource in a storage area network the system provides a status manager that provides status of a command executed by the agent. The status manager operates to receiving a command to be executed by the agent i.e. the command described above sent form the command manager . The status manager registers the command within the agent and maintains current execution state of the command by the agent. During receipt of the command the status manager in one configuration receives a transaction identifier associated with the command to be performed by the agent and allocates a status entry in a status table based on the transaction identifier. The status table containing the status entry and other entries for other commands for that agent stores current execution state of the command s that are operational within the agent in association with the transaction identifier for that command.

The agent executes the command to perform a management function specified by the command in association with a resource in the storage area network. While the command is within the agent either awaiting performance or in progress completed failed etc. the status manager maintains current execution state of the command in during execution of the command within the agent. Example execution status can include completed in progress failed unknown. The execution state is not limited to a state of the command while the agent is actually performing the command since some commands may be received by an agent and may be queued for performance at a later time if the agent is busy performing other commands. Thus by execution state what is meant herein is the state of any command that has been received by the agent for performance and is still maintained in the agent in some status such as waiting queued in progress halted stalled etc. These are other examples of execution state. During operation execution of the command in the agent the status manager obtains execution state of the command within the agent and stores the execution state of the command within the status entry in the status table maintained within the agent.

The status manager in the agent receives at least one status request requesting status of execution of the command by the agent and returns a respective status response in response to each status request. Each status response indicates the current execution status of the command by the agent. Each status request includes a transaction identifier associated with a command that has been sent to that agent. Based on the transaction identifier the status manager obtains execution state of a specific status entry in the status table associated with that transaction identifier. The specific status entry indicates the specific execution status of a command in the agent that was formerly received with the associated transaction identifier. In this manner the system allows agents to be queried to indicate status of commands that have been sent to that agent. The application requiring such status can specify the query interval and the command manager will handle initiating the query to the agent and returning the reported status back to the application.

Other embodiments of the invention include computerized devices such as host and management server computer systems workstations or other computerized devices configured to process all of the method operations disclosed herein as embodiments of the invention for both the agent and store processes. In such embodiments a computerized device includes a memory system a processor a communications interface and an interconnection mechanism connecting these components. The memory system is encoded with either an agent application if the host computer or a server application if the storage computer system that when performed on the processor produces an agent process including a status manager or server process including a command manager that operate as explained herein within the respective host or management server computerized devices to perform all of the method embodiments and operations explained herein as embodiments of the invention alone of in combination with each other.

Other arrangements of embodiments of the invention that are disclosed herein include software programs to perform the method embodiment steps and operations summarized above and disclosed in detail below for both the agent and or the store process. More particularly a computer program product is disclosed that has a computer readable medium including computer program logic encoded thereon that when performed in a computerized device provides associated operations of the command manager or the status manager process each as respectively explained herein. The computer program logic when executed on at least one processor with a computing system causes the processor to perform the operations e.g. the methods indicated herein as embodiments of the invention. Such arrangements of the invention are typically provided as software code and or other data structures arranged or encoded on a computer readable medium such as an optical medium e.g. CD ROM floppy or hard disk or other a medium such as firmware or microcode in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit ASIC or as downloadable software images in one or more modules shared libraries etc. The software or firmware or other such configurations can be installed onto a computerized device to cause one or more processors in the computerized device to perform the techniques explained herein as embodiments of the invention. Software processes that operate in a collection of computerized devices such as in a group of storage area network management servers hosts or other entities can also provide the system of the invention. The system of the invention can be distributed between many software processes on several computers or all processes such as the agent and store process could execute on a small set of dedicated computers or on one computer alone. Though preferred embodiments provide the agent and server process execute on separate computer systems the particular distribution of the agent and management server process is not intended to be limiting.

It is to be understood that the system of the invention can be embodied strictly as a software program as software and hardware or as hardware alone. Example embodiments of the invention may be implemented within EMC s Control Center software application that provides management functionality for storage area network resources and in computerized devices that operate the Control Center software. Control Center is manufactured by EMC Corporation of Hopkinton Mass. USA.

Embodiments of the invention provide a mechanisms and techniques including methods computer apparatus and computer readable medium encoded with software and a system that are capable of determining status of agent execution of a command in a network by an agent and that can report this status to one or more applications. The system includes a command manager process that operates in a server computer such as a network management station and the system also includes a status manager process that operates within an agent receiving a command from the command manager process in the server. The processing of the command manager and the status manager each alone or in combination represents embodiments of the invention.

This example storage area network includes a management server computer system that operates a management server i.e. a software application that includes a command manager configured in accordance with embodiments of the invention. In addition the storage area network includes a storage computer system there may be more than one that in this example operates a store process there may be more than one . A plurality of agent software processes through M that each include a status manager operate within one or more of the host computer systems through M. Generally the agents and store processes interoperate with and are collectively considered parts of the management application . A network administrator interacts via an application e.g. such as a console application operating on another computer system as shown in this example with the management application executing on the management server computer system in order to remotely administer manageable resources within the storage area network . Manageable resources include for example data storage systems the connectivity devices and the host computer systems or many other types of hardware or software entities within the storage area network . Note that the console may be a process operating on the management server a host or the storage computer system or on another computer system.

The network administrator can operate the application to cause the command manager in the management server to send a command to an agent for execution by that agent. Commands through N represent commands sent to each agent through N. Such a command might cause the agent to collect data form resources such as the data storage systems within the storage area network and transfer this data to the storage process for storage within the managed object database . The command manager in the management server and the status manager in each agent are configured to operate as explained herein. In particular as an agent processes a command the command manager can send periodic status requests to an agent to determine the status of execution of the command s sent to that agent . In response the status manager in each agent can respond with a status response that gets sent back to the command manager indicating the status of execution of a command by that agent at the time of the status request . The command manager can return this current state of execution of the command as indicated in the status response to the application s that has registered to receive this status. In this manner the system provides mechanisms to obtain up to date status on command execution by agents .

In step the command manager identifies a command to be performed by an agent . The command may be a command received from an application such as a console under control of an administrator . The command may be a request to perform a management function such as collection of data from a managed resource such as a data storage system . As will be explained command manager assigns a transaction identifier to the command to allow future requests for status and status responses to be associated with a particular command in order to be able to return the appropriate status of the appropriate command to the appropriate application .

In step the command manager issues the command to the agent for execution by the agent . This step causes the management server to transfer the command to the agent responsible for managing the managed resource e.g. data storage system .

In step the status manager registers the command to allow the status manager to maintain current execution state of the command by the agent . Generally registration of the command allows the status manager to track execution of the command by the agent in various states and allows the status manager to associate different states of execution to different commands that may be active within the agent .

In step the status manager executes the command within the agent to perform a management function specified by the command in association with a resource in the storage area network.

In step and some point in time after transmitting the command to the agent the command manager sends at least one status request to the agent to determine a status of execution of the command by that agent . As will be explained the period or frequency of status requests can be set by the application that initiated the command .

In step the status manager in the agent receives each status request requesting status of execution of the command by the agent .

In step the status manager in the agent returns a status response in response to the status request . The status response indicates current execution status of the command as maintained by the status manager in the agent .

In step the command manager in the management application receives each status response from the agent indicating the status of the execution of the command by the agent . Command manager can return to status information indicating execution state of the command to the application that initiated the command thus allowing administrator to determine a precise current execution state of the command within the agent . In this manner the system of the invention allows the application to specify the periodic interval such as one minute and on each occurrence of this interval the system provides the administrator the current status of command execution by agents .

The status manager operating within each agent maintains a status table used to maintain current execution state of each command received by that agent . Example contents of the status table include command name transaction identifier associated with the command a timestamp of initial receipt of the command current execution state of the command amount of work remaining to be performed by the command e.g. represented for example as a amount of data remaining to be collected from a managed resource in proportion to the total amount of data can be collected from the resource and possibly other information. By maintaining the status table status manager is able to quickly respond to status requests for the current execution state of the command.

Further details of the system will now be explained with reference to flow charts of processing steps in .

In step the command manager identifies a command to be performed by an agent . This is similar step above and details of this processing are shown in steps through below.

In step the command manager receives a command submission from an application that directs operation of an agent . The command submission indicates i.e. provides the command to be executed as a transaction may be more than one transaction to fulfill a command on the agent and indicates that the application is to be notified of the status of the command .

In step command manager also receives a progress interval that may be received as part of the command defining a period of time that is to occur between successive iterations of sending status requests to the agent of to determine a status of execution of the command by the agent.

In step the command manager creates a transaction identifier associated with the command . The command manager maintains the transaction identifier in association with the command in a persistent manner.

In step the command manager registers the application as an application to be notified of the execution status of the command in association with the transaction identifier .

In step the command manager returns the transaction identifier associated with the command to the application .

In step the command manager issues the command to the agent for execution by the agent. Steps through illustrate processing details of step .

In step the command manager transmits the command and associated transaction identifier to the agent to allow the agent to execute the command and track status of the progress of execution of the command in association with the transaction identifier associated with the command .

In step the command manager detects successful transmission of the command and associated transaction identifier to the agent .

In step in response the command manager initiates progress monitoring of execution of the command by the agent by tracking expiration of the polling interval .

In step in one configuration as part of receiving the command the status manager receives a transaction identifier associated with the command to be performed by the agent .

In step the status manager registers the command within the agent to maintain current execution state in the status table of the command by the agent.

In step the status manager allocates a status entry in the status table based on the transaction identifier . The status entry stores the current execution state of the command by the agent in association with the transaction identifier . As noted above the status entry can include information such as a timestamp of receipt of the command by the agent the transaction identifier for the command the command itself as issued to the agent the current status of execution of the command such as pending halted in progress failed unknown or the like. The status entry can also contain an indication of an amount of work that has been done or that remains to be done by the command. As an example a percentage of total data collected may be included.

In step the agent executes the command to perform a management function specified by the command in association with a resource e.g. data collection from a storage system in the storage area network . While the command is present within the agent the status manager maintains current execution state of the command in relation to the transaction identifier .

In step the status manager obtains execution state of the command periodically within the agent during execution of the command and stores the execution state of the command within the status entry in the status table maintained within the agent .

In step the command manager sends at least one status request to the agent to determine a status of execution of the command by the agent . Steps and show details of this process in one example configuration.

In step the command manager detects occurrence of a progress interval indicating execution status is to be obtained from the agent concerning status of execution of the command by the agent.

In step upon detecting occurrence of the progress interval the command manager transmits the status request to the agent to determine a status of operation of the command by the agent . Each status request includes the associated transaction identifier to allow the agent to associate the status request with specific execution status e.g. a specific status entry in the status table of the command in progress by the agent based on the transaction identifier.

In step at some time after sending the status request the status manager receives a corresponding status response indicating the status of the execution of the command by the agent .

The processing of steps through can repeat at each occurrence of the polling period until the status of execution of the command by the agent indicates either completion of execution of the command by the agent or failure of execution of the command by the agent or until some number of successive status request attempts each return unknown status .

In step for each status response received the command manager identifies a transaction identifier associated with the status response .

In step the command manager identifies the application to be notified of the execution status of the command by the agent in association with the transaction identifier .

In step the command manager returns status i.e. content from the status entry indicated within the status response to the application s having the associated transaction identifier or to any application that has registered to receive such status .

In step the status manager receives at least one status request requesting status of execution of the command by the agent.

In step the status manager receives the status request that includes a transaction identifier associated with a command .

In step based on the transaction identifier the status manager obtains execution state of a specific status entry in the status table associated with that transaction identifier . The specific status entry as noted above indicates the specific execution status of a command in the agent that was formerly received with the associated transaction identifier .

In step the status manager returns a status response in response to the status request . The status response indicates current execution status of the command by the agent .

In step the status manager can return status such as in progress status failed status unknown status and the like.

In this manner the system explained above allows a management application to obtain status as needed concerning execution of commands by agents.

The memory system may be any type of computer readable medium that is encoded with an applications A A A A that represent software logic code such as data and or logic instructions e.g. stored in the memory or on another computer readable medium such as a disk that embody the processing functionality of embodiments of the invention for either the agent including the status manager or the management server including the command manager as explained above. The processor can access the memory system via the interconnection mechanism in order to launch run execute interpret or otherwise perform the logic instructions of the applications in order to produce a corresponding processes B B B B. In other words the command manager B and status manager B processes represent one or more portions of the command manager A and status manager A applications performing within or upon the processor in the computer system. It is to be understood that either one or both of the applications and or the process represent the command manager and status manager operating as explained in former examples.

It is to be understood that embodiments of the invention include the applications i.e. the un executed or non performing logic instructions and or data encoded within a computer readable medium such as a floppy disk hard disk or in an optical medium or in a memory system such as in firmware read only memory ROM or as in this example as executable code within the memory system e.g. within random access memory or RAM . It is also to be understood that other embodiments of the invention can provide the applications operating within the processor as the processes. While not shown in this example those skilled in the art will understand that the computer systems and or may include other processes and or software and hardware components such as an operating system which have been left out of this illustration for ease of description of the invention.

Other alternative arrangements of the invention include rearranging the processing steps explained above in the flow charts in such a way that the overall effect of the invention is the same. It is to be thus understood by those skilled in the art that the particular arrangement of processing steps in many instances does not specify the exact implementation of embodiments of the invention. As such those skilled in the art of software development and computer related technologies will understand that there can be many ways and orders of representing the processing operations explained above and such alternative software code will still achieve the overall operation as explained herein.

In addition embodiments of the invention are not limited to operation on the computer systems shown above. The command manager and status manager can operate on shared computing resources or can be distributed among any number of computer systems. Furthermore embodiments of the invention are not limited to operation in a storage area network management application but are intended to be generally applicable to any type of network management application. Accordingly embodiments of the invention are not limited to the processing arrangements explained above.

