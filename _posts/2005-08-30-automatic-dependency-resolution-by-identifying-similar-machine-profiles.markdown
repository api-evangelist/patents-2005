---

title: Automatic dependency resolution by identifying similar machine profiles
abstract: Techniques for automatic dependency resolution are provided. A source machine and a previously successful modification for a given resource, which was modified on the source machine, are identified. Dependencies associated with the modification are identified on the source machine. One or more target machines are selected in response to having a similar profile to that of the source machine. A profile is deemed to be similar based on geographic location, category or role of a machine, and based on operating system of a machine. A profile is also deemed to be similar based on a fuzzy match between profile information. The dependencies are automatically resolved on the target machines and the modification is automatically processed on the target machines to modify the given resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08291405&OS=08291405&RS=08291405
owner: Novell, Inc.
number: 08291405
owner_city: Provo
owner_country: US
publication_date: 20050830
---
The invention relates generally to network administration and more particularly to automatic dependency resolution for modification of a resource.

Network management has been automated over the years. Still each machine within a network configuration can acquire its own unique state and its own unique configuration based on usage patterns of its users and resources installed. Therefore what would seem to be fairly simple and fairly automated tasks of installing or modifying new pieces of software actually becomes an extremely manual process for each individual machine of a network configuration.

This is so because a software modification may rely on certain other modules or configurations before an automated script can successfully modify the desired software on a given machine. If machines have different versions of dependent modules or lack dependent modules altogether then an automated script to modify the desired software will likely fail. Moreover trying to account for all potential scenarios and dependencies within a given installation or modification script are often infeasible and impractical tasks.

Furthermore a modification may appear on the surface to be successful for a given machine when in fact the modification is later determined to be problematic because certain dependencies were missing or unresolved during the initial modification. Correspondingly it is generally believed that a full dependency analysis for each machine that is targeted for a modification has to be processed. This may entail manual examination which can also be time and resource intensive. Also once a successful modification is achieved or noted that modification is often not saved or reused since it is believed to be only applicable to a particular machine of the network. Therefore the dependency analysis and the modification work are often not repeatable tasks.

In various embodiments automatic dependency resolution techniques are provided for networked machines. More particularly and in an embodiment one or more dependencies associated with a previously successful modification of a resource on a first machine are determined. Next one or more second machines are identified. The one or more second machines have similar profiles to a profile of the first machine. The one or more dependencies are then resolved or verified on the one or more second machines. The previously successful modification is then automatically processed on the one or more second machines to modify the resource on the one or more second machines.

A service includes a component or combinations of components applications or combinations of application that act as a system. A resource includes a service and may also include a device or machine e.g. printer computer intelligent apparel intelligent appliance phone laptop personal digital assistant PDA tablet personal computer PC network switch hub bridge router etc. . A resource may also include a user of a device or machine a directory or a data store e.g. database electronic file data warehouse etc. .

A personality profile or profile refers to a configuration and or state of a resource such as a machine. The personality profile may be represented in a normalized data language or format in manners similar to the events and policies. The information that may be included within a personality profile may include but is not limited to hardware settings resource identifiers calendar day time of day resource usage and or load directory structure hardware configurations resource configurations hardware profile e.g. processor speed size of random access memory RAM size of storage devices etc. internet cache cache content register content protocol capabilities and or settings peripheral device settings resource licenses etc. A personality profile of a resource may have portions that remain relatively static and other portions that are in continuous flux based on a given snapshot of a state for the resource.

As used herein the term modification refers to an act of installing updating or removing a resource. Thus modification and its morphological variations are intended to include and be used synonymously with the terms installation updating and removing and their corresponding morphological variations.

Various embodiments of this invention can be implemented in existing resource or machine architectures as enhancements via network services. For example in some embodiments the techniques presented herein are implemented in whole or in part in the ZENworks product distributed by Novell Inc. of Provo Utah. That is in some embodiments ZENworks may be used to deploy novel services to resources within a network that facilitate the automatic dependency resolution and management described herein and below.

Of course the embodiments of the invention can be implemented in a variety of architectural platforms operating and server systems or applications. Any particular architectural layout or implementation presented herein is provided for purposes of illustration and comprehension only and is not intended to limit embodiments of the invention.

Initially the dependency resolving service may process on a server or remote machine from client machines and is adapted to access and execute operations on the client machines over a network. The network and communication between the dependency resolving service and the client machines may be wired wireless or a combination of wired and wireless.

At the dependency resolving service determines one or more dependencies associated with an identified previously successful modification of a resource. The success is determined because the modification has already processed at least one for purposes of modifying the resource on an initial or first machine. The modification itself may be a script or an executable program designed to modify the resource on a target machine a machine may be viewed as another type of resource .

For example consider an applet or script installation that installs a Mozilla Firefox World Wide Web WWW browser resource on a target machine. The installation may necessitate that a new security library another dependent resource be installed on the target machine. The installation may also identify that another component yet another dependent resource has to be updated or upgraded to install the new browser resource and may determine that still another component still another dependent resource has to be removed before the new browser resource can be installed on the target machine.

In an embodiment at the dependent modules or devices dependent resources of the modification are identified by the dependency resolving service. Thus in the prior example for the browser resource the dependency resolving service inspects the installation and identifies the security library the component that has to be upgraded and the component that has to be removed as dependent modules of the installation.

According to an embodiment at the dependency resolving service may also generate a dependency map for the dependencies associated with the modification. It should also be noted that the identified modification is recognized as a previously successful modification. That is the modification has successfully processed on a machine to install the resource when inspected and processed by the dependency resolving service. In this manner the dependency resolving service knows that the modification is one that has worked to modify the resource at least on one previous and first machine.

At the dependency resolving service identifies one or more second machines which have similar profiles to a first machine that has already successfully processed the modification to modify the resource. The profiles may be deemed similar based on similar configurations and resources modified on both the first machine and the one or more second machines. Alternatively the profiles may be deemed similar in response to similar categories or roles associated with the machines in response to similar geographical locations associated with the machines in response to similar operation systems modified on the machines etc.

In some embodiments at a comparison is used to achieve a similarity match between the profile of the first machine and the profiles of the one or more second machines. That is the comparison does not have to be a binary match or a match based on category association between the machines rather the comparison may implement a more complex and fuzzy match having weights or scores and if a weight or score exceeds a predefined threshold then a similarity is deemed achieved between the machines.

In a similar manner and in still more embodiments at the dependency resolving service may actually select the previously successful modification in response to a score that was associated with it. That is the previously successful modification is deemed optimal over other modifications for a resource based on a score assigned to the modification. For example it is not unusual to have multiple potential paths or actions to successfully install a resource within an installation script. These paths are identified via analysis and can be scored such that an optimal path achieves a higher score than other non optimal paths.

At the dependency resolving service is enabled to automatically resolve or verify the dependencies of the one or more second machines which have similar and favorable profiles to that of the first machine. Thus the dependency resolving service may access operations interfaces or services on the one or more second machines to check for resolution of dependencies which are used with the modification.

In some cases at the dependency resolving service may be enabled to automatically initiate operations services and or interfaces on the one or more second machines for purposes of installing missing dependent modules removing modules or updating dependent modules. Thus the dependency resolving service may in some cases automatically establish a baseline environment that is expected by the modification on each of the one or more second machines.

Similarly and in another embodiment at the dependency resolving service may validate prerequisite modules are available and properly configured on each of the one or more second machines. The dependency resolving service is enabled to ensure that dependencies are resolved and or verified on the one or more second machines in response to the dependency resolving service s evaluation of the modification and current environments of the one or more second machines.

Finally at the dependency resolving service automatically processes the previously successful modification on the one or more second machines. This modifies the desired resource in a manner that was previously successful on the first machine. The success of the modification is reasonably assured because the one or more second machines have similar and favorable profiles to that of the first machine and the first machine successfully processed the modification to modify the resource. Moreover in some cases the dependency resolving service is enabled to automatically resolve and verify that dependencies are accounted for before the modification is actually processed on the one or more second machines.

It is now understood how network administration can be improved for purposes of resource modification. The dependency resolving service identifies optimal modifications and then groups machines into similar profiles. Dependencies associated with the modifications are identified and resolved and the modification is automatically processed on the machines having similar profiles to a machine that successfully processed the optimal modification. This can alleviate the manual install process that conventionally is used with network administration for new or upgraded resources.

The modification service processes on a machine such as a server over a network and communicates with networked machines. Moreover the modification service is enabled to remotely access services operations and or interfaces on the networked machines for purposes of evaluating the environments of the networked machines and initiating modifications to modify desired resources on the networked machines. Some remote access operations may also remove or install dependent resources on the networked machines.

At the modification service receives an identifier for a resource that is desired to be modified on one or more machines over the network. Receipt of the identifier may occur via a network administration interface that is in communication with the modification service. Receipt may be received dynamically by a network administrator using the administration interface or may be received dynamically from other services that are designed to initiate processing with the modification service upon the occurrence of an event or at a predefined time.

At the modification service compares modifications associated with modifying the resource from a library directory or data store that includes a plurality of modifications for the resource and identifiers to other machines that used a particular modification to install the desired resource. That is the resource has already been modified at least once successfully on at least one other networked machine. The modification service compares the previous modification for purposes of identifying an optimal modification for the desired resource and a machine that used the optimal modification to previously successfully modify the resource.

In an embodiment at the modification service may compare scores of multiple available previous modifications or multiple available modification paths associated with a particular modification. The details of this approach were discussed above with the method of .

At the modification service selects one of the previous modifications or previous modifications paths for modifying the resource across the network on additional network machines. The selected modification is also associated with a networked machine that used the selected modification successfully to modify the desired resource.

In an embodiment at the modification service may be configured to select a particular modification in response to scores associated with the previous modifications or previous modification paths. A highest score associated with a particular modification is deemed most optimal.

At the modification service inspects a first machine associated with the selected modification for its current profile. The inspection may be complex and based on state configurations etc. Alternatively the inspection may be based on assigned roles categories or defined geographical locations associated with the first machine. In some cases inspection may be based on a complex scenario and a role category or location assignment associated with the first machine.

Once the selected modification is known and the profile of the first machine that has successfully processed the modification is known at the modification service determines the dependencies associated with the selected modification as those dependencies related to the first machine. This can be done by inspecting the selected modification and inspecting the profile of the first machine or other environmental settings or configurations of the first machine.

In some cases at this may mean that the modification service identifies one or more other dependent resources that are used with the selected modification. For example some application programming interfaces or dynamically linked libraries may have to pre exist within a machine s environment before modification of the desired resource will take. Dependencies may also relate to a version of a particular module or dependent resource or may relate to a situation in which a particular module or resource cannot be present for the modification of the desired resource to successfully take.

At the modification service identifies a second machine having a similar profile to that of the first machine and that lacks the selected modification. This identification process may occur dynamically by querying machines to obtain current profiles or it may occur by accessing information associated with networked machines to acquire roles locations categories or retained profiles. Moreover the identification of the second machine does not have to be a binary match to the profile of the first machine rather in some embodiments a more fuzzy comparison may be made to a profile of the second machine based on scores or weights associated with the second machine s profile and the first machine s profile.

Once the second machine is identified as having a similar profile to that of the first machine and in an embodiment at the modification service may be enabled to automatically access operations services and or interfaces on a second machine for purposes of ensuring the identified dependencies are accounted for or are resolved before the selected modification is processed on the second machine.

After the selected modification is known and the identity of the second machine is known and optionally dependencies on the second machine are resolved and verified at the modification service automatically and dynamically in real time processes the selected modification on the second machine. This will result in an automatic modification of the desired resource on the second machine and success is reasonably assured since dependencies were resolved and since the second machine has a similar and favorable profile to that of the first machine and the first machine successfully processed the selected modification.

In an embodiment at the dependency resolution and the machine identification processing may be dynamically repeated in real time for any desired number of iterations such that additional third machines are identified with similar profiles and may have the desired resource automatically modified by automatically processing the selected modification.

In this manner network administration associated with modification of a desired resource is automated. Automation occurs by identifying similar machines to a machine known to have successfully processed a selected modification and by automatically verifying and resolving any dependencies on those similar machines in advance of processing the selected modification. This technique provides automated and improved assurances that resource modification can be automated over a network by the modification service identified as the method of .

The automatic dependency resolution system is implemented on a machine over a network. The machine is enabled to perform network administration on other networked machines such that the automatic dependency resolution system may inspect and initiate operations remotely over the network from its machine to the other networked machines. Moreover the network may be wired wireless or a combination of wired and wireless.

The automatic dependency resolution system includes a dependency resolving service and a modification service . In some embodiments the automatic dependency resolution system may also include a modification selection service a profile comparing service and or a recording service . Each of these will now be discussed in turn.

The dependency resolving service is enabled during its operation to identify dependencies associated with a modification and associated with environments of networked machines. A dependency may identify a resource a version or a resource or may identify a resource that should not be within a given machine environment for a particular modification to take on that machine. The dependency resolving service interacts with the modification service . Furthermore the dependency resolving service may be enabled to access machines over the network to inspect their environments for dependencies or to dynamically resolve dependencies in their environments. Thus in some embodiments the dependency resolving service may automatically install update or remove dependencies from target machines over the network.

The modification service is enabled during its operation to process a given modification automatically on target machines once dependencies resolved by the dependency resolving service . In some embodiments the modification service may also identify an optimal modification and identify the target machines in response to a profile associated with a source machine that previously and successfully processed the optimal modification and in response to profiles associated with the target machines.

Thus the modification service cooperates with the dependency resolving service for purposes of identifying a given modification identifying target machines identifying a source machine resolving dependencies on the target machines and automatically processing the given modification on the target machines to modify a desired resource associated with the given modification on those target machines. The techniques for achieving this cooperation were discussed above with the methods and of respectively and are incorporated by reference herein with the discussion of the automatic dependency resolution system and . Further the tasks associated with the cooperation may be delegated to different system components these components are discussed herein and below.

In an embodiment the automatic dependency resolution system may include a modification selection service . The modification selection service is enabled during its operation to identify a given modification for processing by the modification service . The given modification is one that was previously and successfully processed on a first or source machine for purposes of modifying a resource. In some cases the given modification is selected based on its score relative to other available modifications or modification paths for the desired resource. Some techniques and schemes for achieving this were discussed above with the methods and of respectively.

In yet another embodiment the automatic dependency resolution system may also include a profile comparing service . The profile comparing service interacts with the modification service and optionally any available modification selection service . The profile comparing service compares and acquires a first profile for the source machine that previously and successfully used the given modification to modify the desired resource against one or more profiles associated with the target machines. The comparison may be a binary association based on classification or location of the source and target machines may be a complex comparison based on profile weights or scores or may be a combination of both a binary and complex technique. The profile comparing service identifies the target machines that are to receive the desired resource by processing of the given modification.

According to an embodiment the automatic dependency resolution system may also include a recording service . The recording service is enabled during its operation to store a given modification to store dependencies associated with that given modification and to store a profile associated with a source machine that previously and successfully processed the given modification. This information may be indexed in a data store or available directly from the recording service and made available to the modification service and the dependency resolving service via queries or other application programming interfaces. The recording service permits knowledge about machines and modifications to be readily retained and reused as desired.

The automatic dependency resolution system permits network administration techniques associated with modifying resources over a network to be automated and optimized. It does this by identifying successful modifications for resources identifying similar situated machines resolving dependencies on those machines and automatically processing the modifications. Moreover the knowledge associated with the techniques is retainable and reusable.

The data structure includes a modification a profile and one or more dependencies associated with the modification . The data structure is associated with the identifier of a given machine. Each of these and the manner in which they are processed will now be discussed in turn.

The modification may be a script or an extensible markup language XML construct that is processed by other services for purposes of modifying a desired resource. The modification may be represented within the data structure as an identifier other services may use the identifier to acquire the source associated with the modification .

The profile is data or an identifier for a file associated with a source machine that previously successfully processed the modification to modify a desired resource. The profile may be one or more categories locations or roles associated with the source machine may be complex environmental state or resource configurations or may be a combination of both.

The one or more dependencies are data associated with resources or versions of other resources that should or should not be present for the modification . The dependencies may be represented in XML or may be represented by identifiers to standard dependencies stored in a data store. Alternatively the full text of the dependencies may be included in the data structure .

In an embodiment the data structure may be indexed and stored in a data store or directory such that each unique instance of the data structure represents a package of information for a given resource and a given source machine. This permits the data structure to be acquired and processed for purposes of facilitating automatic modification of a desired resource on multiple target machines that have a similar or favorable profile of the source machine.

The data structure captures knowledge about network administration associated with modification of resources and organizes it in a favorable fashion that is more conducive to processing by the methods and of respectively and by the system of . The data structure may be written to and read and facilitates the processing of the modification on a machine.

The above description is illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of embodiments should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

The Abstract is provided to comply with 37 C.F.R. 1.72 b and will allow the reader to quickly ascertain the nature and gist of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.

In the foregoing description of the embodiments various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting that the claimed embodiments have more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Description of the Embodiments with each claim standing on its own as a separate exemplary embodiment.

