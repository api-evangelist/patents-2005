---

title: Systems and methods for updating an application on a mobile information device
abstract: An application manager receives a descriptor for a MIDlet update from an MIDP server system. The application manager determines that the descriptor identifies an update to a MIDlet that is already installed on the MID. The application manager also identifies the MIDlet for which the update is intended, and determines that the update is valid with respect to the MIDlet. The application manager provides information from the descriptor to the user of the MID. If the user decides to download the update that corresponds to the descriptor, the application manager sends a request to the MIDP server system to transmit the MIDlet update to the MID. When the application manager receives the MIDlet update from the MIDP server system, an installer installs the file(s) of the MIDlet update in the existing MIDlet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08549049&OS=08549049&RS=08549049
owner: Sharp Laboratories of America, Inc.
number: 08549049
owner_city: Camas
owner_country: US
publication_date: 20050413
---
The present invention relates generally to computers and computer related technology. More specifically the present invention relates to systems and methods for updating an application on a mobile information device.

Computer technologies continue to advance at a rapid pace. Indeed computers are used in almost all aspects of business industry and academic endeavors. Improvements in computer technologies have been a force for bringing about great increases in business and industrial productivity. More and more homes are using computers as well.

There are many different kinds of computers in use today. The term computer system will be used herein to refer generally to any device or combination of devices that is capable of processing information to produce a desired result. Some examples of computer systems include personal computers hand held computers personal digital assistants PDAs servers mainframes supercomputers minicomputers workstations microcomputers microcontrollers and the like.

Java is an object oriented programming language designed to generate applications that can run on all hardware platforms without modification. Source code that is written in the Java programming language is compiled into byte code. The byte code is then run on a Java Virtual Machine JVM which is a program written in native code on the host hardware that translates Java byte code into usable code on the hardware.

The Java 2 Platform Micro Edition J2ME is a technology that allows programmers to use the Java programming language to develop applications for embedded devices such as mobile phones personal digital assistants PDAs pagers etc. Such devices may be referred to as mobile information devices MIDs .

The Mobile Information Device Profile MIDP defines an architecture and the associated application programming interfaces APIs for facilitating an application development environment for MIDs. An application that is written for the MIDP is referred to as a MIDlet. A MIDlet suite is a collection of Java class files and content files e.g. images that may be used as part of a MIDlet. The files of a MIDlet suite may be enclosed within a Java archive JAR file. A MIDlet suite may include a single MIDlet or multiple MIDlets. As used herein the term MIDlet may refer to either a standalone MIDlet or to a MIDlet that is part of a MIDlet suite.

In some situations it may be desirable to update an existing MIDlet. Updating a MIDlet may involve providing additional functionality for the MIDlet correcting errors that have been found in the MIDlet etc. One way to update a MIDlet is to create a new version of the MIDlet that includes the desired update s . The user obtains the updated MIDlet by downloading the new version of the MIDlet in its entirety. However there may be some disadvantages with this kind of an approach. The updated MIDlet may include some of the same files as the previous version of the MIDlet. Thus downloading the updated version of the MIDlet may be somewhat inefficient because some files of the MIDlet may be downloaded multiple times. Accordingly benefits may be realized by improved systems and methods for updating an existing MIDlet. Some exemplary systems and methods for updating an existing MIDlet are described herein.

A method for providing an update to an existing MIDlet is disclosed. The method may be implemented in a server system that hosts one or more MIDlet suites and one or more MIDlet descriptors for download. One or more files are provided that update the existing MIDlet. The one or more files may include one or more replacement files and or one or more new files. The one or more files are packaged to create a MIDlet update. The MIDlet update does not comprise a complete replacement of the existing MIDlet. A descriptor is created for the MIDlet update. An update property is added to the descriptor. The update property identifies the MIDlet update as an update to the existing MIDlet. The descriptor is associated with the MIDlet update.

In some embodiments a directory structure may be created for the MIDlet update that matches the existing MIDlet s directory structure. Each of the one or more files may be placed in a location within the directory structure that corresponds to a desired location within the existing MIDlet s directory structure.

A version property may be added to the descriptor. The version property may include a major field a minor field and a micro field.

The descriptor may be transmitted to a mobile information device. A request may be received from a mobile information device to transmit the MIDlet update to the mobile information device. In response to the request the MIDlet update may be transmitted to the mobile information device.

A server system that is configured to implement a method for providing an update to an existing MIDlet is also disclosed. The server system includes a processor and memory in electronic communication with the processor. Instructions are stored in the memory. The instructions are executable to implement the method described above for providing an update to an existing MIDlet. A computer readable medium comprising executable instructions for implementing a method for providing an update to an existing MIDlet is also disclosed.

A method for obtaining an update to an existing MIDlet is also disclosed. The method may be implemented in a mobile information device. A user s request to download a MIDlet update may be received. The MIDlet update comprises one or more files that update the existing MIDlet. The MIDlet update does not comprise a complete replacement of the existing MIDlet. In response to the user s request a request is sent to a server to transmit the MIDlet update to the mobile information device. The MIDlet update is received from the server. The one or more files of the MIDlet update are installed in the existing MIDlet.

In some embodiments the MIDlet update may include a directory structure that matches the existing MIDlet s directory structure. Installing the one or more files of the MIDlet update in the existing MIDlet may involve unpacking the existing MIDlet into a directory. The MIDlet update may be subsequently unpacked into the directory. Files within the directory may be repackaged to create an updated version of the existing MIDlet.

The one or more files of the MIDlet update may include one or more replacement files and or one or more new files. Installing the one or more files of the MIDlet update in the existing MIDlet may involve replacing a file in the existing MIDlet with a replacement file and or creating a new file in the existing MIDlet.

When a descriptor is received from the server a determination may be made about whether the descriptor identifies an update. This may involve determining whether the descriptor includes an update property.

If it is determined that the descriptor identifies an update a MIDlet for which the update is intended may be identified. This may involve searching for another descriptor on the mobile information device that includes one or more properties that match corresponding properties in the descriptor.

A determination may be made about whether the update is valid with respect to the MIDlet. This may involve determining that the update is valid comprises determining that a first version property in the descriptor refers to a later version of the MIDlet than a second version property in the MIDlet s descriptor. Information from the descriptor may be provided to a user.

A mobile information device that is configured to implement a method for obtaining an update to an existing MIDlet is also disclosed. The mobile information device includes a processor and memory in electronic communication with the processor. Instructions are stored in the memory. The instructions are executable to implement the method described above for obtaining an update to an existing MIDlet. A computer readable medium comprising executable instructions for implementing a method for obtaining an update to an existing MIDlet is also disclosed.

Various embodiments of the invention are now described with reference to the Figures where like reference numbers indicate identical or functionally similar elements. The embodiments of the present invention as generally described and illustrated in the Figures herein could be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of several exemplary embodiments of the present invention as represented in the Figures is not intended to limit the scope of the invention as claimed but is merely representative of the embodiments of the invention.

The word exemplary is used exclusively herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments. While the various aspects of the embodiments are presented in drawings the drawings are not necessarily drawn to scale unless specifically indicated.

Many features of the embodiments disclosed herein may be implemented as computer software electronic hardware or combinations of both. To clearly illustrate this interchangeability of hardware and software various components will be described generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

Where the described functionality is implemented as computer software such software may include any type of computer instruction or computer executable code located within a memory device and or transmitted as electronic signals over a system bus or network. Software that implements the functionality associated with components described herein may comprise a single instruction or many instructions and may be distributed over several different code segments among different programs and across several memory devices.

As indicated above the Mobile Information Device Profile MIDP defines an architecture and the associated application programming interfaces APIs for facilitating an application development environment for mobile information devices MIDs such as mobile phones personal digital assistants PDAs pagers etc. An application that is written for the MIDP is referred to as a MIDlet. illustrates components in an embodiment of a system for updating a MIDlet. The system includes a server system that hosts one or more MIDlet suites and MIDlet descriptors for download.

An application developer may create one or more files that update an existing MIDlet not shown in . For example the files may provide additional functionality for the MIDlet correct errors that have been found in the MIDlet etc. The files may include Java class files content files e.g. images etc.

In the illustrated embodiment the files include a replacement file and a new file . The replacement file is a newer version of a file that already exists in the existing MIDlet. The new file is a file that is new relative to the existing MIDlet. In other words the existing MIDlet does not have a previous version of the file already installed.

A packaging component packages the files to create a MIDlet update . In some embodiments the packaging component may be a Java Archive Tool and the files may be packaged together in a Java archive JAR file.

The packaging component creates a directory structure for the MIDlet update that matches the directory structure of the existing MIDlet. More specifically a base directory is provided that matches the base directory of the existing MIDlet. In addition sub directories are created within the MIDlet update that match the sub directories within the existing MIDlet.

The files are placed in a location within the directory structure that corresponds to a desired location within the existing MIDlet s directory structure. For example if a file is supposed to be installed in the base directory of the existing MIDlet then the file is placed in the base directory of the MIDlet update . Similarly if a file is supposed to be installed in a particular sub directory of the existing MIDlet then the file is placed in that sub directory of the MIDlet update .

In accordance with the MIDP specification a descriptor is created for each MIDlet or MIDlet suite that is made available for download by an MID. A descriptor is a file that is associated with but separate from a MIDlet. The descriptor for a MIDlet includes information about the MIDlet such as the name of the MIDlet the size of the MIDlet etc.

In the illustrated embodiment the packaging component creates a descriptor for the MIDlet update . The descriptor is a file that is associated with but separate from the MIDlet update . The descriptor includes information about the MIDlet update . More specifically the descriptor includes various properties including an update property a version property and one or more standard properties . The update property indicates that the descriptor identifies an update to an existing MIDlet as opposed to a new MIDlet. The update property is not presently defined in the MIDP specification. The version property identifies the version number of the existing MIDlet that will be created once the files from the MIDlet update are installed in the MIDlet. The standard properties are properties that are presently defined in the MIDP specification. Some examples of standard properties include a name property a vendor property a size property a description property etc.

Once a MIDlet update and an accompanying descriptor have been created MIDs may be allowed to discover and download the descriptor and the MIDlet update from an MIDP server system. illustrates various components that may be used to implement this functionality in some embodiments.

The system shown in includes a mobile information device MID in electronic communication with an MIDP server system . The MID includes an application manager . In some embodiments the application manager may be a Java Application Manager JAM . In the MIDP specification the application manager is sometimes referred to as Application Management Software AMS .

The application manager is configured to manage the downloading installation and lifecycle of MIDlets. In the illustrated embodiment where an update to an existing MIDlet is available for download from an MIDP server system the application manager also manages the downloading and installation of the MIDlet update .

More specifically at some point the application manager may send a request to the MIDP server system to transmit the descriptor for the MIDlet update to the MID . The request may be included as part of a general request to transmit multiple descriptors to the MID . For example in some embodiments the application manager may periodically request that the MIDP server system transmit to the MID any new descriptors that have become available.

In response to the request a request handler on the MIDP server system transmits the descriptor to the MID . The application manager provides information from the descriptor to the user of the MID via a user interface . This has the effect of notifying the user that the MIDlet update is available to be downloaded.

If the user decides to download the update that corresponds to the descriptor the user submits a request via the user interface to download the MIDlet update . The user s request is received by the application manager .

In response to the user s request the application manager sends a request to the MIDP server system to transmit the MIDlet update to the MID . The request handler on the MIDP server system fulfills the request and transmits the MIDlet update to the MID .

When the MD receives the MIDlet update the application manager invokes an installer . The installer updates the MIDlet by installing the files from the MIDlet update in the existing MIDlet . For example the installer may replace one or more files in the existing MIDlet with replacement file s . Alternatively or in addition the installer may create one or more new files in the existing MIDlet .

When the update has been installed the application manager updates a version property in a descriptor for the MIDlet to indicate that the update has been installed. In some embodiments this involves setting the version property equal to the value of the version property in the update s descriptor .

In some situations the system shown in may provide some advantages relative to known J2ME systems. As indicated above in known J2ME systems a developer may update a MIDlet by creating a new version of the MIDlet that includes the desired update s . However there is no mechanism for separating the files of the MIDlet that implement the update s from the other files of the MIDlet. Thus to obtain the update s for the MIDlet on the MID the new version of the MIDlet is downloaded in its entirety possibly including some files that have previously been downloaded to and installed on the MID. This approach may be somewhat inefficient because some files of the MIDlet may be downloaded and installed multiple times.

In contrast in the system shown in a MIDlet update is provided. The MIDlet update is separate from the existing MIDlet and is not a complete replacement of the MIDlet . In other words the MIDlet update does not include at least some of the files that are already included within the existing MIDlet and that do not need to be replaced. To update an existing MIDlet the user is able to download the MIDlet update without downloading an additional copy of the existing MIDlet . Thus the user does not have to download files that have previously been downloaded to and installed on the MID . Accordingly where a MIDlet has already been downloaded to and installed on the MID the system shown in may allow the MIDlet to be updated more efficiently than in known J2ME systems.

The discussion provided above in connection with illustrates how an MID may discover download and install a MIDlet update from an MIDP server system. In some embodiments the process of installing an update for a MIDlet may be accomplished by unpacking the MIDlet into a particular directory and then subsequently unpacking the MIDlet update into the same directory. illustrates various components that may be used to implement this functionality in some embodiments.

The system shown in includes an MID . The MID has received an update for an existing MIDlet . The files for the MIDlet update are contained within a compressed file. The files for the MIDlet are contained within a separate compressed file. In some embodiments the files for the MIDlet update may be enclosed within a Java Archive JAR file and the files for the MIDlet may be enclosed within a separate JAR file.

To install the update an application manager calls an installer . The installer calls an unpacking component which unpacks the MIDlet . More specifically the unpacking component decompresses the file s of the MIDlet and writes them to a particular directory which may be referred to as the base directory . In doing so the unpacking component reproduces the directory structure of the MIDlet .

After the MIDlet has been unpacked the unpacking component then unpacks the MIDlet update to the same directory . More specifically the unpacking component decompresses the file s of the MIDlet update and writes them to the same directory as the files of the original MIDlet . The unpacking component reproduces the directory structure of the MIDlet update .

In the illustrated embodiment the directory structure of the MIDlet update matches the directory structure of the MIDlet . In other words the MIDlet and the MIDlet update include the same base directory and may include some or all of the same sub directories. Thus if a file from the MIDlet update has the same location relative to the base directory as a file from the MIDlet the step of unpacking the MIDlet update results in the file from the MIDlet update replacing the file from the MIDlet in the directory . Conversely if there is not a file in the MIDlet that has the same location relative to the base directory as a file from the MIDlet update the step of unpacking the MIDlet update results in the file from the MIDlet update being created in the directory .

Once the MIDlet update has been unpacked into the directory a packaging component repackages all of the files in the directory . This has the effect of creating an updated MIDlet . The updated MIDlet includes the files from the MIDlet update . As indicated above these files may provide functionality that was not present in the previous version of the MIDlet . Alternatively or in addition these files may correct errors that have been found in the previous version of the MIDlet . The updated MIDlet may also include at least some of the files from the previous version of the MIDlet .

The discussion provided above in connection with illustrates an exemplary way that a MIDlet update may be installed on an MID. As indicated above before a MIDlet update is installed on or even downloaded to an MID a descriptor for the MIDlet update may be downloaded to the MID. When the MID initially receives the descriptor the MID may not know that the descriptor identifies an update to an existing MIDlet as opposed to a new MIDlet. Thus when the MID receives a descriptor from an MIDP server system the MID may initially determine whether the descriptor identifies an update to a MIDlet that is already installed on the MID or whether the descriptor identifies a new MIDlet. illustrates various components that may be used to implement this functionality in some embodiments.

The system shown in includes an MID . The MID has received a descriptor from an MIDP server system not shown in . The descriptor includes an update property . As indicated above the update property indicates that the descriptor identifies an update to an existing MIDlet as opposed to a new MIDlet. Thus in the illustrated embodiment an application manager on the MID may determine that the descriptor identifies an update to an existing MIDlet by determining that the descriptor includes the update property .

There may be many MIDlets already installed on the MID . Thus once the application manager determines that the descriptor identifies an update to a MIDlet the application manager may also identify the specific MIDlet that the update corresponds to. In other words out of the many MIDlets that may be installed on the MD the application manager may identify a particular MIDlet for which the update is intended. In the illustrated embodiment this may be accomplished by searching for a descriptor on the MID that includes one or more properties that match corresponding properties in the update s descriptor .

More specifically the descriptor received from the MIDP server system includes a name property and a vendor property . As indicated above the name property and the vendor property are standard properties that are presently defined in the MIDP specification. The descriptor for the MIDlet that the update corresponds to may also be stored on the MID . This descriptor may also include a name property and a vendor property .

To assist the application manager in identifying the specific MIDlet that the update corresponds to the value of the name property in the update s descriptor may be equal to the value of the name property in the MIDlet s descriptor . Similarly the value of the vendor property in the update s descriptor may be equal to the value of the vendor property in the MIDlet s descriptor . Thus to identify the specific MIDlet that the update corresponds to the application manager may search the descriptors that are stored on the MID until a descriptor is found with a name property and a vendor property that match the name property and vendor property in the update s descriptor .

Once the application manager identifies the specific MIDlet for which the update is intended the application manager may then determine whether the update is valid with respect to MIDlet . For example an update may not be valid if it is intended for a version of the MIDlet that is different than the version that is installed on the MID . In some embodiments determining whether the update is valid may be accomplished by determining whether a version property in the update s descriptor refers to a later version of the MIDlet than a version property in the MIDlet s descriptor .

More specifically in the illustrated embodiment the version property in the update s descriptor includes a major field a minor field and a micro field . Similarly the version property in the MIDlet s descriptor includes a major field a minor field and a micro field . The update is valid with respect to the MIDlet if any of the following three conditions are true 1 the major field of the version property in the update s descriptor exceeds the major field of the version property in the MIDlet s descriptor 2 the major field of the version property in the update s descriptor does not exceed the major field of the version property in the MIDlet s descriptor but the minor field of the version property in the update s descriptor exceeds the minor field of the version property in the MIDlet s descriptor or 3 the major field of the version property in the update s descriptor does not exceed the major field of the version property in the MIDlet s descriptor and the minor field of the version property in the update s descriptor does not exceed the minor field of the version property in the MIDlet s descriptor but the micro field of the version property in the update s descriptor exceeds the micro field of the version property in the MIDlet s descriptor .

One or more files that update an existing MIDlet are provided . The files may provide additional functionality for the MIDlet correct errors that have been found in the MIDlet etc. The files may include Java class files content files e.g. images etc.

A packaging component packages the files thereby creating a MIDlet update . As part of the process of packaging the files the packaging component creates a directory structure for the MIDlet update that matches the directory structure of the existing MIDlet . For example a base directory may be provided that matches the base directory of the existing MIDlet . In addition sub directories may be created within the MIDlet update that match the sub directories within the existing MIDlet .

The packaging component places the files in a location within the directory structure of the MIDlet update that corresponds to a desired location within the existing MIDlet . For example if a file is supposed to be installed in the base directory of the existing MIDlet then the file may be placed in the base directory of the MIDlet update . Similarly if a file is supposed to be installed in a particular sub directory of the existing MIDlet then the file may be placed in that sub directory of the MIDlet update .

The packaging component creates a descriptor for the MIDlet update . The descriptor is a file that is associated with but separate from the MIDlet update . The descriptor includes information about the MIDlet update .

The packaging component adds an update property to the descriptor . The update property indicates that the descriptor identifies an update to an existing MIDlet as opposed to a new MIDlet. The packaging component also adds a version property to the descriptor . The version property identifies the version number of the existing MIDlet that will be created once the files from the MIDlet update are installed in the MIDlet . The descriptor is associated with the MIDlet update .

A request handler on the MIDP server system may receive a request from an MID to transmit the descriptor to the MID . The request handler may fulfill this request by transmitting the descriptor to the MID . The request handler may at some point receive a request from the MID to transmit the MIDlet update to the MID . The request handler may fulfill this request by transmitting the MIDlet update to the MID .

An application manager receives a descriptor for a MIDlet update from an MIDP server system . The application manager determines that the descriptor identifies an update to a MIDlet that is already installed on the MID as opposed to identifying a standalone MIDlet . The application manager also identifies the MIDlet for which the update is intended and determines that the update is valid with respect to the MIDlet.

The application manager provides information from the descriptor to the user of the MID . This has the effect of notifying the user that the MIDlet update is available to be downloaded. If the user decides to download the update that corresponds to the descriptor the application manager receives the user s request to download the MIDlet update . In response to the user s request the application manager sends a request to the MIDP server system to transmit the MIDlet update to the MID . When a request handler on the MIDP server system fulfills the request the application manager receives the MIDlet update from the MIDP server system .

When the MID receives the MIDlet update the application manager calls an installer which installs the file s of the MIDlet update in the existing MIDlet . For example the installer may replace one or more files in the existing MIDlet with replacement file s . Alternatively or in addition the installer may create one or more new files in the existing MIDlet .

The computer system includes a processor and memory . The processor controls the operation of the computer system and may be embodied as a microprocessor a microcontroller a digital signal processor DSP or other device known in the art. The processor typically performs logical and arithmetic operations based on program instructions stored within the memory .

As used herein the term memory is broadly defined as any electronic component capable of storing electronic information and may be embodied as read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices in RAM on board memory included with the processor EPROM memory EEPROM memory registers etc. The memory typically stores program instructions and other types of data. The program instructions may be executed by the processor to implement some or all of the methods disclosed herein.

The computer system typically also includes one or more communication interfaces for communicating with other electronic devices. The communication interfaces may be based on wired communication technology wireless communication technology or both. Examples of different types of communication interfaces include a serial port a parallel port a Universal Serial Bus USB an Ethernet adapter an IEEE 1394 bus interface a small computer system interface SCSI bus interface an infrared IR communication port a Bluetooth wireless communication adapter and so forth.

The computer system typically also includes one or more input devices and one or more output devices . Examples of different kinds of input devices include a keyboard mouse microphone remote control device button joystick trackball touchpad lightpen etc. Examples of different kinds of output devices include a speaker printer etc. One specific type of output device which is typically included in a computer system is a display device . Display devices used with embodiments disclosed herein may utilize any suitable image projection technology such as a cathode ray tube CRT liquid crystal display LCD light emitting diode LED gas plasma electroluminescence or the like. A display controller may also be provided for converting data stored in the memory into text graphics and or moving images as appropriate shown on the display device .

Of course illustrates only one possible configuration of a computer system . Various other architectures and components may be utilized.

Information and signals may be represented using any of a variety of different technologies and techniques. For example data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

The various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array signal FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

The methods disclosed herein comprise one or more steps or actions for achieving the described method. The method steps and or actions may be interchanged with one another without departing from the scope of the present invention. In other words unless a specific order of steps or actions is required for proper operation of the embodiment the order and or use of specific steps and or actions may be modified without departing from the scope of the present invention.

While specific embodiments and applications of the present invention have been illustrated and described it is to be understood that the invention is not limited to the precise congfiguration and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the methods and systems of the present invention disclosed herein without departing from the spirit and scope of the invention.

