---

title: Expanded transmission control protocol, methods of operation and apparatus
abstract: A communication protocol service in support of TCP based communication is modified to improve the operational efficiency of a server for a particular type of client-server application. The service is modified to support connection pools and connection groups within the connection pools, to enable connections with clients to be grouped and share a common file descriptor. The service is provided with an API to allow an application server to create the connection pools, connection groups and connections. The API also include receive and send services adapted to support the connection pool and connection group architecture, and to allow explicit acknowledgement of received transmissions under control of the application server. Further, in various embodiments, the buffering architecture of the service, as well as acknowledgement of request packets by the service are also modified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08018929&OS=08018929&RS=08018929
owner: Microsoft Corporation
number: 08018929
owner_city: Redmond
owner_country: US
publication_date: 20050525
---
This is a divisional of U.S. patent application Ser. No. 09 948 476 entitiled Expanded Transmission Control Protocol Methods of Operation and Apparatuses filed Sep. 6 2001 which claims priority to U.S. Provisional Application No. 60 288 764 entitled expanded Transmission Control Protocol XTCP filed on May 4 2001 each of which is hereby incorporated herein by reference.

The present invention relates to the field of networking. More specifically the present invention relates to the TCP IP Transmission Control Protocol Internet Protocol protocol suite including systems equipped to support inter system communications in accordance with TCP IP and the methods practiced thereon.

Maintaining a very large number of open persistent client connections is a problem that is shared by many Web applications or services. For instance in the case of both the MSN and AOL Instant Messenger applications up to a few tens of million open connections from clients need to be maintained during peak hours. These approaches have in common the fact that clients connect to the servers via long lived TCP connections but communicate only infrequently with the servers the general aspects of Messaging and Presence protocols are discussed in RFC2778 and RFC2779 .

In some applications UDP the User Datagram Protocol RFC768 can be used to resolve the issues relating to the overhead of TCP connections for large numbers of clients. For example the BIND protocol RFC1034 RFC1035 used for DNS the Domain Name System had to be designed to avoid using TCP connections in the normal case in order to provide scalability to very large numbers of clients BIND first attempts to use UDP and only falls back on TCP in the case of repeated communication failures. Unfortunately many firewalls restrict UDP access and router designs often include rules to preference TCP packets thus discarding UDP packets when congestion increases. Therefore UDP cannot be considered a general replacement for TCP even when sequencing and guaranteed delivery are implemented at the application layer.

Further maintaining a large number of open incoming TCP connections is difficult with most current operating systems including all flavors of UNIX and Windows. This is due to the following limitations of the current TCP protocol stack implementations 

A variant of TCP called T TCP for Transaction oriented TCP RFC1379 attempts to combine some of the advantages of TCP such as detection of duplicates and handling of retransmissions with a lower overhead. T TCP is designed for transactions in which a client request is followed by a server response. The main feature of T TCP compared with TCP is to provide a mechanism for faster reopening of a connection between two machines that have previously communicated. However this mechanism does not fully eliminate the overhead of having to reopen the connection for every transaction. There is also an additional caching requirement due to the fact that data is transmitted before both parties agree that a connection has been re established.

If it were not for the above limitations in many cases a single server could potentially handle a very large number of clients if one assumes that communication between server and clients is only infrequent such is the case for instant messenger applications for instance . For instance with one million client connections and assuming communication with clients occurs on the average every 30 s a single server would only need to process about 33 000 packets per second something well within the range of a high end machine.

Thus an extended TCP together with associated methods of operation that can enhance the operating efficiency of servers in particular enabling these servers to concurrently support open persistent connections with a very large number of clients as many as a million plus is desired especially if the desired results may be achieved by requiring little or no modification to the client machines and applications.

 RFC1072 V. Jacobson LBL R. Braden ISI RFC 1072 TCP IP Extensions for Long Delay Paths. October 1988.

 RFC1323 V. Jacobson LBL R. Braden ISI D. Borman Cray Research RFC 1323 TCP Extensions for High Performance. May 1992.

 RFC2460 S. Deering R. Hinden RFC 2460 Internet Protocol Version 6 IPv6 Specification. December 1998.

A communication protocol service in support of TCP IP based communication is modified to improve the operational efficiency of a server for a particular type of client server application.

In accordance with a first aspect of the present invention the service is modified to support connection pools and connection groups within the connection pools to enable connections with clients to be grouped and share a common file descriptor to reduce the number of file descriptors required to concurrently support a given amount of clients. The service is provided with an API to allow an application server to request the creation and destruction of the connection pools the connection groups and connections. The API also includes receive and send services adapted to support the connection pool and connection group architecture.

In accordance with a second aspect of the present invention the buffering architecture of the service is also modified. Receive packets of connections of common connection group membership are buffered in a shared manner whereas all transmit packets are buffered in a shared manner independent of their connection group memberships.

In accordance with a third aspect of the present invention the service is modified to defer acknowledgement of a request packet until the answer packet is transmitted by the application server to reduce the amount of packet traffic to further enable the concurrent support of a large number of clients.

As summarized earlier the present invention includes an enhanced TCP protocol implementation and related methods and apparatuses for client server applications that involve a large number of open persistent client connections. In the description to follow various aspects of the present invention will be described. However the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation specific numbers materials and configurations are set forth in order to provide a thorough understanding of the present invention. However the present invention may be practiced without some of the specific details. In other instances well known features are omitted or simplified in order not to obscure the present invention.

Parts of the description will be presented in terms of operations performed by a processor based device using terms such as data tables requesting determining acknowledging and the like consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art the quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined and otherwise manipulated through mechanical electrical and or optical components of the processor based device. The term processor includes microprocessors micro controllers digital signal processors and the like that are standalone adjunct or embedded.

Various operations will be described as multiple discrete steps in turn in a manner that is most helpful in understanding the present invention. However the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular these operations need not be performed in the order of presentation. Further the description repeatedly uses the phrase in one embodiment which ordinarily does not refer to the same embodiment although it may.

Referring now first to wherein a block diagram illustrating an overview of the present invention in accordance with one embodiment is shown. As illustrated client computing devices are communicatively coupled to computing server via networking fabric . Executing on computing server is application server equipped to provide application services to clients and executing on client computing devices are application clients of application server facilitating users of client computing devices in accessing the application services of application server . Also executing on computing server and client computing devices are communication services and on client computing devices and and on computing server respectively. For the embodiment these communication services are as follows services and are possibly different implementations of the Internet Protocol IP network layer found in the operating systems of the client computing devices and the computing server respectively service is an implementation of the Transmission Control Protocol TCP transport layer found in the operating system of the client computing devices and XTCP transport layer service is an embodiment of the present invention.

As will be described in more detail below XTCP communication service is incorporated with the teachings of the present invention to operate more efficiently thereby enabling a significantly larger number of application clients to be communicatively coupled to and serviced by application server at the same time and the enhancements that improve the operating efficiency of server are substantially transparent to client computing devices including application client TCP service and IP service .

More specifically the TCP portion of the TCP IP communication stack of computing server is enhanced or extended where hereinafter this enhancement or extension will be called XTCP to support connection pools connection groups within the connection pools and connections having connection group memberships. Further for the illustrated embodiment XTCP communication service employs a modified receive and transmit packet buffering architecture as well as a modified acknowledgement practice. XTCP communication service includes an API having various connection pool connection group and connection creation deletion functions as well as receive send and select functions that support the concept of connection pool and connection group.

Except for the teachings of the present invention incorporated with XTCP service and application server accessing the TCP services through the API Application Programming Interface of XTCP computing server including application server and IP communication services otherwise represent a broad range of these elements known in the art. For example computing server may be any one of a number of computer servers available from IBM of Armonk N.Y. or Sun Microsystems of Menlo Park Calif. Application server may e.g. be an instant messaging server or other applications and communication services may be IP services incorporated within e.g. the UNIX or the Windows operating systems.

Similarly client computing devices may be any ones of a number of notebook or desktop computers available from e.g. Dell Computer of Austin Tex. or Apple Computer of Cupertino Calif. Application client may be e.g. an instant messaging client and TCP and IP communication services and respectively may be TCP IP services incorporated within e.g. the Windows operating system available from Microsoft Inc. of Redmond Wash. Alternatively client computing devices may also be palm sized computing devices personal digital assistants set top boxes wireless mobile phones and so forth.

In a presently preferred embodiment received packets of all connections of a connection pool are buffered together in a shared received packet buffer for that connection pool of . Transmit packets on the other hand are buffered together in a shared transmit packet buffer of independent of connection group or connection pool membership. Further in the presently preferred embodiment connections having common group membership share a common IP port on computing server . In other embodiments connections of different connection groups i.e. different connection groups may also share a common port. Connections having common group membership also share a common operating system file or socket descriptor wherein common connection management information such as preferences priorities and notifications of incoming messages that can be managed at the group level for all connections of the group are stored.

Thus under the present invention the number of operating system and application file or socket descriptors required on computing server to support N concurrently open persistent TCP connections to application clients is significantly reduced thereby enabling a significantly larger number of concurrently open persistent TCP connections to be supported. Further the buffering architecture is streamlined. Additionally as will be described in more detail below the protocol in particular the acknowledgement aspect is also streamlined.

Analysis has shown that under the present invention over a million of concurrently open persistent TCP connections may be supported on computing server using only a few hundred megabytes of main memory at a sustained rate of 30 000 messages per second whereby for illustrative purposes each message is assumed to consist of a request of size 1 KB sent by application client and a reply of size 1 KB sent by application server a significant improvement over the prior art.

As illustrated API includes a number of function calls xtcp initialize and xtcp finalize and for requesting XTCP service to create and initialize and to tear down a connection pool respectively. For the illustrated embodiment xtcp initalize includes in particular a parameter buffer pool size for specifying the size of the earlier described shared receive packet buffer to be created for the connection pool . xtcp initialize returns a negative error status or zero if a connection was successfully created respectively.

API further includes a number of function calls xtcp open group and xtcp close group and for requesting XTCP service to create and initialize and to close down a connection group respectively. For the illustrated embodiment xtcp open group includes in particular a parameter domain for specifying the communication domain or the protocol family in one embodiment the possible values for this parameter are the constants PF UNIX PF INET or PF INET6 which those skilled in the art will recognize as a subset of the domain values accepted by the Berkeley Socket API a parameter type for specifying the communication semantics in one embodiment the value of this parameter is set to the constant SOCK STREAM defined in the Berkeley Socket API a parameter protocol for specifying the protocol to be used with the socket in one embodiment the value of this parameter is set to 0 and a parameter port for specifying an IP port number for the connection group to be created opened. xtcp open group returns a negative error status in case of an error or a positive group identifier for the newly created group in the case of success respectively. xtcp close group includes a parameter gd for specifying a group identifier for the connection group to be closed.

API further includes a number of function calls xtcp accept xtcp pars and xtcp close for requesting XTCP service to accept return the parameters and close a TCP connection respectively. xtcp accept includes the parameter gd for specifying a group identifier for a connection group for which a connection is to be accepted as a group member xtcp accept returns a negative error status in case of an error or a positive connection identifier for the newly accepted connection in the case of success respectively. In addition to the same parameter gd each of xtcp pars and xtcp close also includes the parameter cd for specifying a connection identifier for a connection whose parameters are to be retrieved or which is to be closed. xtcp pars also includes the parameter sa for specifying a data structure within which the returned connection parameters are to be stored in one embodiment the type of this data structure corresponds to the sockaddr in type defined in the Berkeley Sockets API as known to those skilled in the art.

Continuing to refer to API further includes a number of function calls xtcp recv and xtcp send and for requesting XTCP service to read a request packet received on a connection and to send a reply packet to a connection respectively. Both xtcp recv and xtcp send include the earlier described parameter gd for specifying a group identifier for a connection group .

xtcp recv further includes the following parameters cd a pointer to a location in which the connection identifier for the received connection is to be stored upon a successful return buf a pointer to a memory buffer that will be used to deposit the received data and len the size of the memory buffer buf . xtcp recv returns the number of received bytes upon success or a negative error status on failure respectively. The behavior of xtcp recv is non blocking if none of the connections in the connection group has data available xtcp recv immediately returns with an appropriate error status.

xtcp send further includes the following parameters cd a connection identifier for the connection on which the data is to be sent ackd the number of bytes received on this connection during the last call to xtcp recv that have been processed by application server and should be acknowledged to the TCP service of the application client by the XTCP service buf a pointer to a memory buffer that contains the data to be sent and len the size of the memory buffer buf . xtcp send returns the number of sent bytes upon success or a negative error status on failure. The behavior of xtcp send is non blocking if the data can not be sent xtcp send immediately returns with an appropriate error status. Irrespective of the success or failure of sending the data xtcp send acknowledges the amount of data specified by the ackd parameter to the TCP service of the application client . Unlike the TCP implementations known to those skilled in the art such as the Berkeley TCP IP stack the XTCP service will not acknowledge received packets until directed to do so by the application server via a call to xtcp send . If the application server wishes to acknowledge data received from an application client without sending back any data to said application client it may do so by calling xtcp send with a len argument of zero. For a given connection the amount of received data acknowledged by the application server through a call to xtcp send may never exceed the actual size of the data received on that connection through the previous call to xtcp recv however if less data than was actually received is acknowledged the portion of the data that has not been acknowledged whose size is equal to the difference between the size of the received data and the size of the acknowledged data will be returned by the XTCP service possibly together with other new data received from the application client on the next call to xtcp recv

Finally in the preferred embodiment of the present invention API further includes a number of function calls XTCP ZERO XTCP CLR XTCP SET and XTCP ISSET etc. for manipulating sets of connection groups . To those skilled in the art these function calls are similar to the ones used to manipulate sets of file or socket descriptors in the UNIX operating system. Function call xtcp select is used by application server to block until one or more connection groups of a specified read connection group set or a specified accept connection group set become ready or until a timeout occurs whichever is sooner. A connection group in a read connection group set is considered ready if at least one of its connections has data available that can be retrieved with a call to xtcp recv . A connection group in an accept connection group set is considered ready if any new connections destined to the IP port to which this connection group has been bound through a previous call to xtcp open group can be immediately accepted with a call to xtcp accept . xtcp select includes the following parameters n the number of elements contained in the following two connection set parameters readgds a pointer to the read connection group set acceptgds a pointer to the accept connection group set and timeout a pointer to a timeout value. xtcp select returns the positive number of ready connection group sets on success or a negative error status on error or zero if the a number of time units greater than or equal to the one specified in the timeout argument has elapsed without any of the specified connection groups becoming ready in the sense defined above respectively.

In alternate embodiments more or less parameters and or more or less function calls may be practiced instead.

Furthermore for applications such as instant messaging applications where the answer packets are generated and sent by application server quickly the expected delay for having the acknowledgement of received packets be controlled by the application server will be short and inconsequential. As those skilled in the art would appreciate the interaction between client computing device and computing server remains strictly TCP IP compliant. Together with the inconsequential delay in the receipt of acknowledgements to the request packets by client computing devices the improvement to server is substantially transparent to client computing devices . Those skilled in the art will appreciate that even if the application server should occasionally delay the acknowledgement of received packets the interaction between the computing server and the client computing devices will remain TCP IP compliant in the above case the client s TCP layer may decide to retransmit the packet s for which acknowledgement s have been delayed and further interactions will be in accordance with the rules set forth for packet retransmission by the TCP standard.

As illustrated in upon receipt of a connection group request via a call to xtcp open group or xtcp close group block XTCP service opens or closes respectively a connection group as requested block . In particular in the earlier described preferred embodiment when creating a connection group XTCP service creates and initializes a shared file descriptor for the connection group to be shared by subsequently created connections of the connection group and to be used by subsequent calls to xtcp accept xtcp pars xtcp close xtcp recv xtcp send and xtcp select

As illustrated in upon receipt of a connection request from one of the application clients block XTCP service notifies the appropriate application server of the request block . This notification occurs via a successful return from the xtcp select call that signals to the application server that one of the connection groups in the accept group set has a pending connection request on it. If the connection request is timely accepted by the notified application server via a call to xtcp accept XTCP service accepts the connection request by completing the TCP connection setup negotiation according to the TCP protocol that is well known to those skilled in the art and attaches the accepted connection to a connection group as specified by the application server block . If the connection request was not timely accepted by the notified application server XTCP service rejects the connection request according to the TCP practice well known to those skilled in the art block .

As illustrated in upon receipt of a request for connection parameters via a call to xtcp pars block XTCP service returns to application server the connection parameters including the IP address and port of the connection requested by the application client running on client computing device for the specified connection block . In the earlier described embodiment XTCP service stores the returned data in the specified data structure corresponding to a Berkeley Sockets API sockaddr in structure which is well known to those skilled in the art .

As illustrated in upon receipt of an inbound receive request packet on an open connection block XTCP service determines whether the request packet is a re transmission of a previously received request packet block . If the request packet is not a re transmission XTCP service buffers the received request packet in the shared buffer pool of the connection block and notifies the appropriate application server to read the received request packet block by including the corresponding group descriptor for the connection in the ready read set returned by a call to xtcp select . However if the request packet is a re transmission XTCP service re queues the cached reply packet that was sent by the application server via a call to xtcp send for re transmission block . Additionally XTCP service further re queues the acknowledgement for the request packet for re transmission block . In the presently preferred embodiment XTCP service systematically transmits queued packets as in prior art conventional TCP services.

As illustrated in upon receipt of a request from application server to read a received packet via a call to xtcp recv block XTCP service returns the requested receive packet previously buffered in block to the application server block .

As illustrated in upon receipt of a request to send an answer packet via a call to xtcp send block XTCP service queues the answer packet for transmission also referred to as a transmit packet block . As described earlier XTCP service further queues an acknowledgment for the corresponding request packet that prompted the generation and request transmission of the answer packet block . The amount of data i.e. number of bytes acknowledged in the acknowledgement corresponds to the amount of data processed and acknowledged by application server as indicated in the ackd argument to the call to xtcp send that was used to send the answer. As those skilled in the art will understand acknowledgements are typically piggybacked on the same packets as the transmit packets by using the dedicated TCP acknowledgement fields in the TCP header of the packet. Further XTCP service caches the answer transmit packet queued in the shared transmit packet buffer for subsequent re transmission if needed block . For the embodiment XTCP service further sets a resend timer block .

As illustrated in upon expiration of the resend timer for an answer transmit packet block XTCP service determines whether a timeout for the connection has occurred block . If timeout for the connection has not occurred XTCP service re queues the cached answer transmit packet for re transmission block . If timeout for the connection has occurred XTCP service purges the cached answer transmit packet from the shared transmit packet buffer block and marks this connection as down .

Similarly as illustrated in upon receipt of an acknowledgement to an answer transmit packet block XTCP service also purges the cached answer transmit packet from the shared transmit packet buffer block and deletes any pending resend timer for this transmission block .

While the present invention has been described referencing the illustrated and above enumerated embodiments the present invention is not limited to these described embodiments. Numerous modification and alterations may be made consistent with the scope of the present invention as set forth in the claims to follow.

For example XTCP service may also be provided with logic to monitor the usage of the various buffers and throttle down incoming transmissions when the amount of free buffering space has been reduced below a predetermined threshold. Such throttling may be achieved in various embodiments e.g. by 1 withholding acknowledgment of some or all received packets and or 2 hiding some or all received packets from the application server thereby discarding all the data contained in these packets however 3 the acknowledgment field of all incoming packets is always processed to take advantage of any opportunity to reclaim buffer space in the transmit packet buffer by discarding acknowledged reply data.

Of course the above examples are merely illustrative. Based on the above descriptions many other equivalent variations will be appreciated by those skilled in the art.

Thus a method and apparatus for improving the operating efficiency of a server that supports TCP based communications has been described. Since as illustrated earlier the present invention may be practiced with modification and alteration within the spirit and scope of the appended claims the description is to be regarded as illustrative instead of being restrictive on the present invention.

