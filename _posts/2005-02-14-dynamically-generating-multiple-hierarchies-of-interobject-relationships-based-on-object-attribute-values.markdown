---

title: Dynamically generating multiple hierarchies of inter-object relationships based on object attribute values
abstract: The described systems and methods dynamically generate a data polyarchy from information received from a data store (e.g., a directory or database). The data polyarchy represents multiple hierarchies of inter-object relationships based on values of attributes of the objects. These multiple hierarchies are generated and represented in a manner that is independent of object naming and predetermined static hierarchical data structures.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07603374&OS=07603374&RS=07603374
owner: Microsoft Corporation
number: 07603374
owner_city: Redmond
owner_country: US
publication_date: 20050214
---
This application claims benefit of U.S. Provisional Application Ser. No. 60 250 344 filed on Nov. 30 2000 which is hereby incorporated by reference.

This application is a continuation of U.S. patent application Ser. No. 09 995 414 titled Dynamically Generating Multiple Hierarchies of Inter Object Relationships Based on Object Attribute Values and filed on Nov. 26 2001.

The described subject matter relates to inter object relationships. More particularly the subject matter pertains to dynamically generating multiple hierarchies of inter object relationships based on values of attributes of the objects.

Any object can be linked correlated associated differentiated or in some manner categorized with respect to a different object to form implicit or explicit inter object relationships. For instance in an organization a person typically has implicit and explicit relationships with other people in the organization organizational resources e.g. printers facilities etc. geographical locations business units club memberships and so on. Each implicit and or explicit relationship between respective objects i.e. the person the other people a resource etc. represents a respective hierarchical data relationship.

For example one hierarchical data relationship is represented by each person within the company that has access to a specific resource e.g. a building on the company campus a room a printer etc the resource being the root node of the hierarchy and the individuals with access to the resource being the leaves. Another hierarchical data relationship is represented by individuals that make up the management structure of the company. Other inter object data relationships may represent a hierarchy of individuals within a particular business unit all employees of the company that have specialized training and so on.

Unfortunately even though a data store can be configured to some extent by a network administrator to represent inter object relationships within hierarchies of other data complex inter object relationships e.g. such as those representing a single object within more that one hierarchy are not simply and adequately represented using conventional data store e.g. directory database etc. systems and technologies. Traditional directories include those based on the well known X.500 standard and the Lightweight Directory Access Protocol LDAP .

To illustrate this limitation of traditional data store systems and technologies consider that a directory typically represents inter object relationships using rigid data naming and inflexible directory schemas. Objects or nodes in the directory are organized within a single hierarchy with a root node at the top of the hierarchy. The root node has a name. Each other node in the directory is named based on its direct naming relationship to the root node and also with respect to each intervening node in the respective node s hierarchy. As a result if a parent object is renamed in a single operation any objects that are subordinate or children of the parent object are also renamed in that same single operation. This is because an object s full distinguished name includes the name of each parent object s all the way down the line to the root node s name.

It is the full distinguished name of an object that also represents its static location or data relationship with respect to each other object in the data store. Thus an object s distinguished name inflexibly inter tangles object naming within a single hierarchy with inter object relationships in that hierarchy. Because of this any navigation of the data store must be performed from top to bottom to determine and subsequently present any inter object relationships that is from the root object to a parent object to any subordinate child object s .

Because traditional data stores e.g. directories databases and so on rely on a carefully specified and inflexible object naming scheme to identify inter object relationships an administrator configuring the data store requires a priori knowledge of the inter object relationships when configuring the data store. Additionally any configuration of the data store must consider not only the proper representation of inter object relationships in the data store but must also consider the heuristics that a search engine requires to navigate the data store.

To make matters worse elastic data relationships are not easily described represented or navigated using conventional data store systems and techniques. An elastic data relationship is one wherein the relationship is derived from data that defines an object at any point in time. This means that over time elastic data relationships can be dynamic. For instance consider the following non obvious and potentially elastic data relationships a Web site and the Web pages that make up the Web site a customer and the individuated services that the customer purchases from a merchant a personal computer PC and peripheral devices that are coupled to the PC a city and the districts within the city a business and the business contacts an employee and the employee s dependents and the like.

These non obvious and potentially elastic data relationships are not easily represented because whenever a one to one correspondence between a surface object and corresponding sub objects needs to be represented in the data store an irreversible design choice must be made. Conventional practice is to strictly control directory schema updates due to the serious nature of directory schema modification . A network administrator can opt for total incorporation of the sub objects into the particular object by representing the sub objects as attributes of the surface object in the directory schema. Or the network administrator can opt for total distinction of each object by creating separate objects in the schema for sub object components and positioning the separate objects subordinate to the surface object.

To illustrate this irreversible design choice consider that a particular network router includes multiple router modules plugged into the router s backplane. Information about the router and the router modules are typically stored in a directory in one or two different fashions each of which may be equally unsatisfactory depending on how entities and their respective relationships to other entities are represented. One design choice is to characterize a router and its corresponding router modules as a single hierarchical data structure representing the network router as a parent object and the corresponding router modules as child objects that are subordinate to the parent object. A different design choice is to characterize the router and the router s associated router modules as a single parent object with complex attributes. The parent object represents the router backplane and the complex attributes represent the respective router modules that are hosted by the router.

In consideration of the first design choice depending how the router and the modules are configured collapsing information about the router modules or boards onto the backplane may prove unwieldy. This is because the functionality of the router s backplane may be small as compared to the functionality of the network router modules hosted by the router. Whereas considering the second design choice completely separating the boards from the backplane may be equally unsatisfactory because the router is still a single physical router box that generally includes a number of router modules.

Both of the described solutions to representing data relationships with an inflexible directory schema are time consuming to implement and counter intuitive. The semantics of shape and naming in the directory must be agreed on in advance to solve the simplest design problem. Thus whenever a one to one correspondence between an entity and corresponding sub entities needs to be represented in a traditional directory an irreversible and inflexible design choice must be made within the directory schema.

Whichever design choice is selected the data store and tools used to navigate search and present objects within the data store with respect to inter object relationships have been substantially limited. This is because the data store itself can not represent all of the possible implicit and explicit inter object relationships of an object. This is considered by many computer programmers to be one of the most intractable problems of directory schema in traditional directories. This is also deemed to be the reason that computer program applications are not typically portable across directory platforms or even directory instances.

To further worsen matters recent developments in information technology provide network administrators with opportunities to tie disparate data stores e.g. databases directories and so on of data together into a single logical directory or metadirectory . Such disparate databases and directories include for example information corresponding to enterprise users tangible and intangible resources financial information corporate e mail systems network operating systems and so on.

Metadirectories present network administrators with complex and often elastic object data relationships that cannot be simply or adequately described represented navigated or presented using traditional systems and procedures to configure and manage data stores. Considerable efforts are required on the part of the administrator or a staff of administrators to configure a data store. Manually determining and implementing such inter object relationships whether they be dynamic or not is fraught with the potential for human error and oversight. Furthermore database administrators with an appropriate level of such knowledge to perform such a directory configuration are expensive.

The following described subject matter addresses these and other problems of representing inter object relationships.

The described systems and methods dynamically generate a data polyarchy from information received from a data store e.g. a directory or database . The data polyarchy represents multiple hierarchies of inter object relationships based on values of attributes of the objects. These multiple hierarchies are generated and represented in a manner that is independent of object naming and predetermined static hierarchical data structures.

The following subject matter replaces traditional notions of complex real world object presentation within a single static hierarchy wherein directory object naming and inter object relationships are inter tangled and unwieldy for representing complex data relationships. More specifically traditional notions of distinguished names for representing inter object relationships within a single directory of static inter object relationships are replaced with graphs of elastic non static inter object connections in multiple dimensions of data relationships e.g. mono and or bi directional relationships based on attributes of the objects. In other words the data relationships establish that one or more data objects participate in one or more respective dimensions or polyarchies of inter object relationships. One or more of these hierarchies can intersect creating intersecting hierarchies of inter object relationships.

Dynamically generated multiple hierarchies of data relationships based on object attributes are represented in a data polyarchy. Specifically the data polyarchy is generated using each object s respective data attributes or data values and multifarious interrelationships of those values with attributes that correspond to other objects in the polyarchical data set. The inter object relationships in the data polyarchy can be elastic because inter object relationships are derived from data defined by an object at any point in time. Patterns of relationships between objects emerge by presenting an object in one or more dimensions or polyarchies of data relationships. Such relationships are presented using inter object connections between virtual entities representing the objects. A virtual entity corresponds to an object of interest and includes and organizes information about an object of interest including information about how to get more information about the object of interest. Such objects can be presented to people or computer programs that embody that interest.

In contrast to traditional systems and procedures to represent inter object relationships in a data store the following described arrangements and procedures are dynamic in that they are automated and do not require any manual intervention from a network administrator to configure inter object relationships. By dynamically generating a data polyarchy complex inter object relationships based on object data are automatically determined without presenting any inflexible design choice to a schema designer.

This means that the network administrator or computer program e.g. a search engine is not required to have any a priori knowledge of complex inter object relationships to generate navigate or search a data store. This also means that each object in a data store can be viewed from as many different dimensional inter object hierarchies as apply to the respective object. Furthermore as an object s elastic data relationships change the data polyarchy automatically detects and reflects those changes.

The following description sets forth arrangements and procedures based on a directory schema for representing polyarchies of inter object relationships that incorporates elements recited in the appended claims. The subject matter is described with specificity to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather the inventors have contemplated that the claimed subject matter might also be embodied in other ways to include different elements or combinations of elements similar to the ones described in this document in conjunction with other present or future technologies.

The data polyarchy server includes a processor operatively coupled to a memory that includes computer executable instructions and data . The processor is configured to fetch and execute the computer executable instructions and fetch the data during such execution. Such computer executable instructions include an operating system not shown and a data polyarchy management module to dynamically generate and manage multiple hierarchies of inter object relationships based on the values of attributes of the objects. These dynamically generated multiple hierarchies of inter object relationships are stored in the polyarchical data set which is also referred to as the data polyarchy. To generate the data polyarchy the data polyarchy management module uses data e.g. Extensible Markup Language XML data from any number of different data sources such as from one or more other optional servers and or databases . For instance a server provides data e.g. directories of enterprise users resources financial information corporate e mail systems network operating systems etc. to the data polyarchy server from any number of various data stores databases directories metadirectories and so on. A database is a structured or unstructured data store including an object oriented database such as an XML database a Hypertext Markup Language HTML database an SQL server database and so on.

Responsive to generating and managing the data polyarchy the management module respectively generates and updates the elements of interest schema . The elements of interest schema indicates how an optional client computer can manipulate and display the objects in the data polyarchy with respect to their respective polyarchies of inter object relationships.

For instance the elements of interest schema identifies each object in the data polyarchy as an address referencing a virtual entity e.g. see the virtual object of that represents the respective object. These virtual entities are stored as vectors or arrays of addresses in the schema. Each different type of attribute that an object in the data polyarchy could have is also identified in the schema as well as what kinds of indexes are to be used on the various attribute types. A data index provides for object access . For each attribute type it is convenient to store with its definition its corresponding index. In this manner for example if somebody requests for an attribute the index is readily available and all of the values assumed by the attribute can be determined very quickly. An elements of interest schema is described in greater detail below in reference to .

The data polyarchy server can generate any number of schemas . Each generated schema can provide access to various subsets of the objects in the data polyarchy independent of the objects represented by other schemas . For example a first schema can be distributed to network administrators to provide access to resources and attributes such as printers and access lists that are otherwise protected or hidden from other employees. In the same manner a second schema can be distributed to the president of human resources. While the second schema may provide the president with access to certain privileged employee records the second schema could be completely silent with respect to the resources that are available to the network administrators group via the first schema. In this manner schemas can be designed to provide access control to organizational resources.

The data polyarchy server communicates the elements of interest schema to one or more optional clients . The client computer supports a graphical user interface not shown for displaying inter object relationships in the data polyarchy as described by the elements of interest schema. Exemplary arrangements and procedures to display objects within polyarchies of data relationships are described in related U.S. patent application Ser. No. 09 728 935 titled Hierarchy Polyarchy Visualization filed on Nov. 29 2000 which is assigned to the assignee hereof and which is incorporated by reference.

The data polyarchy and the elements of interest schema can be replicated one or more times in a memory cache by the data polyarchy server . An exemplary memory cache is described in greater detail below in reference to . Since the polyarchical server can operate either data set from a corresponding memory cache there can be as many copies of the respective data sets as necessary. Thus no matter how demanding a client the data polyarchy server can satisfy the demand.

When data polyarchy and the elements of interest schema are replicated in a memory cache by the data polyarchy server the server can maintain an authoritative store not shown in the memory to represent the most recent or current representation of the inter object relationships. Such an authoritative store is beneficial because caches by their very nature are always out of date to some degree meaning that data in a cache is only as fresh or timely as the most recent cache update. In light of this a client requesting information from the data polyarchy can indicate the level of data reliability or timeliness required by the client. If a high timeliness is required the server can access the data polyarchy from the authoritative store rather than from more out of data caches. The speed of access to an authoritative cache depends on its respective implementation e.g. implemented in internally to the server in random access memory or externally to the server in a data storage device .

The data polyarchy includes multiple virtual object data fields . Each virtual object data field includes and organizes information about a respective object including for example information about how to get more information about the respective object. Specifically the virtual object includes a globally unique identifier GUID data field and if appropriate for the particular object one or more attribute data fields .

A GUID uniquely identifies the virtual object which in turn represents a respective object with respect to this or any other object in this or any other data polyarchy . As already noted these objects can be represented in one or more physically distributed data stores that are in turn logically centralized by one or more directory services as well as by one or more data polyarchies. The attribute data field defines any data attributes or data values of the virtual object . Each attribute corresponds to the attributes that an actual instance of the virtual object may include. Such attributes include for example one or more predicate data fields multiple domain property data fields and zero or more sub object entity references .

Each predicate data field indicates a respective operation to access or present a particular object with respect to one or more hierarchies of other objects each object being represented by virtual objects in the polyarchical data set . Such operations indicate one or more diverse types of searches e.g. a linear search and a recursive search data transformations e.g. from one hierarchical relationship to another different hierarchical relationship and so on. See block of .

If an object is a simple object meaning that it does not reference to a sub object entity a predicate operation e.g. a search modification data transformation from one structure such as from a virtual object to an object within a hierarchy of other objects will correspond to the respective object of interest. However if the object is a complex object meaning that it has a data relationship to one or more sub objects then the predicate operation will correspond to a combination of the object and or the one or more sub objects.

The domain property data field includes a physical domain property and a logical domain property. The physical domain property indicates one or more sets of values used to index a data object. The physical domain property is selected from a group of physical domain properties including a data type a data precision indication a scale indication and a nullability indication . The logical domain property aspect of the domain property facilitates searching and navigation of the data polyarchy by allowing object data values to be assigned to particular domains. Specifically the logical domain indicates a strategy to access and or present the corresponding object with respect to the other objects in the data polyarchy. For instance the logical domain property includes a unique domain property a locating domain property and a classifying domain property. The particular one logical domain property that the polyarchical data relationship management module assigns to an attribute of an object is based on the attribute s relative distribution of its value in the data polyarchy with respect to other values of the same attribute of other objects in the data polyarchy.

We now describe a the relative distribution of the values assumed by an attribute within the data polyarchy and b how data distribution determines which objects represent respective dimensions hierarchies up nodes and down nodes.

The set of values that an attribute has is part of that attribute s logical domain. Any information that is collected about the actual distribution of the values in terms of the number of potential objects that contain each potential value in a data polyarchy is also a property of the attribute s logical domain. To determine the relative distribution of attribute values one or more thresholds e.g. a low threshold and a high threshold are defined to determine the attribute s relative distribution in a data polyarchy with respect to other attributes of other objects in the polyarchy. The thresholds are based on the assumption that the data may have a certain percentage of error within it e.g. one 1 percent error . Other statistical analysis techniques can be used in combination with or in place of the thresholds to determine object attribute distributions .

For instance as objects are loaded into the data polyarchy e.g. from one or more directory and or database servers the data polyarchy management module examines each object s respective attributes values based on the thresholds to determine a which attributes are substantially unique with respect to their distributions in objects in the data set b which attributes are distributed across a substantially large set of objects and c which attributes are distributed across a substantially small set of objects in the data set. These determinations are made based on assuming that the data has that certain percentage of error.

With this assumption of some data error in mind consider that a substantially unique attribute is not necessarily the only attribute of its kind in the data polyarchy . Rather an attribute may be absolutely unique or the attribute may belong to a relatively sparse distribution of similar attributes in the data set. Attributes that are determined to be substantially unique with respect to their distributions across objects in the data set have a unique logical domain property illustrating that they are distinguishing as compared to other attributes.

Attributes that are distinguishing may identify respective unique dimensions in the polyarchical data set which are represented as up nodes of an interconnected graph that in turn represents a hierarchical dimension. Inside this model the default polyarchy is flat. Attributes that are not distinguishing are distributed either across a substantially large set of objects in the data set or alternatively distributed across a substantially small set of objects. Non distinguishing attributes are not good candidates for attributes that define dimensions. Instead such distributions indicate that non distinguishing attributes belong to one or more of the identified dimensions. Accordingly a non distinguishing attribute is represented as a down node in at least one dimension that is identified by the attributes distribution. Up node polyarchies are also discovered when all the values of a down node object are located in a substantially unique up node object.

Attributes that are distributed across a substantially large set of objects have a locating domain property e.g. a surname may be a locating domain property . Attributes with locating domain properties are used to narrow a search for particular ones of the data objects in the data polyarchy . Attributes that are distributed across a substantially small set of objects have a classifying domain property. Attributes with the classifying domain property are used to filter out unwanted objects from a search or navigation procedure.

A sub object entity reference such as a GUID not only indicates whether a virtual object i.e. a respective object has a relationship to a different object in the data polyarchy but it also references the different object i.e. via the different object s corresponding virtual object . Specifically a sub object reference uniquely identifies the different object of interest as a sub object of the virtual object data field. The sub object reference uniquely identifies the different object of interest across one or more data stores.

A virtual object that references a sub object via a corresponding sub object entity reference is a jump gate . A jump gate represents an elastic data relationship between a complex object and related sub objects within the polyarchical data set . Inter object data relationships in the data polyarchy are modeled with one or more simple objects and or complex objects . If an object has one or more sub data relationships such relationships are either represented as referenced sub objects in the object or surface entity or as separate objects linked to another object in some dimension.

To illustrate this consider that an employee and the employee s dependents are people represented as objects in a directory store. The data store administrators may want to maintain fine grained information about various aspects of each. To represent sub world information about the dependents in the surface entity the employee one can use the following representation shown in

To represent sub world information about the dependents in totally distinct entities Alice Doe and Sigmund Doe would be split off into separate entities having their own Glue IDs GUIDs as illustrated for example in TABLE 2.

The entity illustrated in TABLE 2 is related to John s dependents along the dependents dimension where relatedEmployee is joined to Glue ID to pass through the jump gate .

Between these two extremes we can imagine representing John s node internally as illustrated in TABLE 4.

The entity of TABLE 4 could be returned to a client as is allowing the client to add to this information by expanding the related Glue IDs. Or a server such as a data polyarchy server of could itself de reference the Glue IDs returning the following amalgam shown below in TABLE 5 and demonstrating the elasticity of the solution to the jump gate problem evident in traditional directory implementations.

In other words a virtual object can be modeled as either a a simple object often referred to as a simple element such as a character string an integer and so on that does not reference any other element or b a complex object often referred to as a complex element that references one or more other simple elements or complex elements. In this manner the polyarchical data set provides for elastic inter object data relationships that can be defined at any time with any one of a number of different relational representations.

Thus in sharp contrast to traditional rigid directory implementations that have an intractable schema problem wherein semantics of shape and naming in a directory must be agreed on in advance to solve the simplest design problem no fundamental design decision is required when encountering an inter object data relationship that is modeled as a jump gate. The shape and naming of the directory tree based on the polyarchical data set is not affected by representing various and elastic inter object relationships even after a polyarchical data set has been designed. Moreover an update modification to a complex object may also result in corresponding updates to one or more related sub objects that in turn may be represented in one or more different dimensions as compared to a particular dimension that represents the complex object.

Two or more objects can be related to a third object for de referenced dimensional group or many to many object searching and navigation operations. For example membership in a group is represented by a membership entity containing information about the relationship between a member and a group. A membership entity includes a memberOf data field to identify a group and a memberIs data field to identify a group member. In this implementation such unique identification is accomplished by using respective GUIDs .

To determine if an entity is a member of a group we search for a relationship entity where memberIs is the GUID of the entity and memberOf is the GUID of the group. A membership dimension is defined as shown in TABLE 6.

In this example the group s GUID represented in TABLE 6 as GlueID identifies the group as an upnode because the GUID is substantially unique and the children are identified as membership entities with a memberOf element set to the group s GUID. A conventional down navigation through the data set enumerates the membership entities which may provide useful information about the nature of each individual membership e.g. when a particular membership expires .

It is also possible to perform an indirect enumeration using the memberIs association to get information about the actual group members. To do so issue a down enumeration on the group in the membership dimension with de referencing set to memberIs. In this case the membership entity s memberIs element is used to de reference the actual entity belonging to the group. Thus it is simple to construct an inverse dimension that list all groups belonged to by an entity. In this case one may also either list the membership entities or de reference them to get information about the groups themselves.

Accordingly no special schema design is required to represent a group s inverse polyarchies or other many to many inter object relationships in the elements of interest schema .

The elements are not the objects themselves but rather object representations i.e. virtual objects of that indicate the relative scope of object data with respect to its distribution in the data polyarchy . As noted above these virtual entities are stored as vectors or arrays of addresses in the schema.

Each different type of attribute that an object in the data polyarchy could have is also identified in the schema as well as what kinds of indexes are to be used on the various attribute types.

The elements i.e. index types are selected based on the relative distribution of the values assumed by an attribute within the data polyarchy . The relative distribution of the values assumed by an attribute was discussed above in reference to . The elements include at least one subset of the logical domain properties corresponding to all of the objects in the data polyarchy . Logical domain properties are discussed above in reference to . The elements represent attributes that have a substantially unique or distinguishing logical property index type a locating logical property index type and or a classifying logical property index type. Accordingly the elements include distinguishing elements locating elements and classifying elements .

A distinguishing element i.e. distinguishing index type is a good candidate for a dimensional relationship between attributes in the data polyarchy and is represented for example by a unique object i.e. an object that has an attribute that is indexed by the distinguishing element representing an up node in a dimension or hierarchy e.g. a GUID a location an employee number a cost center and so on . The locating index type or selecting index type is a good candidate for locating objects within the data polyarchy and is represented for example by the following attributes a surname a building name a title a room number and or the like. An attribute having a classifying index type such as an indication of gender e.g. male or female is a good candidate to filter objects in a search of objects in the data set because classifying objects are relatively small in number in the data polyarchy as compared to the relative distribution of objects with attributes that correspond to other index types.

The elements of interest schema is highly customizable. For instance a network administrator can assign natural language names such as names in English French Chinese etc. to the elements or objects in the elements of interest data set . Moreover the administrator can designate sub objects for storage as linked but discreet entities as described in greater detail with respect to jump gates and TABLES 1 through 4. In this manner objects in the polyarchical data set of that would not otherwise be immediately subordinate to a root object become eligible for promotion in the schema. This mechanism is used in conjunction with multiple dimensions polyarchy to produce elastic jump gates.

TABLE 7 shows an exemplary elements of interest schema in an XML data format. Other data format representations besides XML representations e.g. an extended version of XML which has at least a subset or more of the features of XML of elements are contemplated. In this schema representation boxed text i.e. text boxed in or surrounded with lines and text preceded by a semi colon represent corresponding comments. Generally comments of more than a single line are placed in a box.

At block the data polyarchy server of receives data from any number of data sources such as from a conventional directory service based on X 500 and LDAP metadirectory service a database and so on. The data is received in any one of a number of different data formats such as the XML data format. The server communicates the received data to the data polyarchy management module of .

At block responsive to receiving the data block the data polyarchy management module generates or updates the data polyarchy to reflect any inter object relationships e.g. mono directional and or bi directional relationships between the received data and the data if any already in the polyarchy . As already discussed these inter object relationships are determined based on the attributes of the received data with respect to the attributes of the other objects in the polyarchy. Specifically to generate configure or update the data polyarchy the management module analyzes the relative distributions of the attributes of the objects in the data polyarchy to determine which of zero one or more dimensions within which each object participates in inter object relationships with other objects in the polyarchy.

These operations are automatic or dynamic responsive to receipt of the data block and do not require any intervention of any human operators such as network administrators. Because inter object relationships in the data polyarchy are determined and expressed based on the values of attributes of the objects in the polyarchy these inter object data relationships can be elastic meaning that they can change over time. As values of attributes change the inter object relationships based in the new values are dynamically or automatically represented in the polyarchy by the management module upon receipt. These operations are performed independent of a priori knowledge of data relationships between respective ones of the data objects in the data polyarchy. Additionally because inter object relationships in the data polyarchy are determined and expressed based on the values of attributes of the objects in the polyarchy these relationships are determined and expressed completely independent of a distinguished name of an object.

At block the data polyarchy management module of generates configures or updates the elements of interest schema e.g. see to indicate how the data polyarchy can be manipulated presented and navigated in a meaningful manner. Specifically as discussed above in reference to and Table 7 the schema indicates the elements or attributes in the data polyarchy along with any corresponding distinguishing locating or classifying characteristics of each attribute. The schema also indicates the dimensions in the polyarchy along with each attribute or element of interest contained by objects in the dimension.

An exemplary set of polyarchical query language PQL commands based on the elements of interest schema used by a browser to search navigate or display portions of the polyarchical data set are described in greater detail below in reference to . An exemplary procedure to use the elements of interest schema to formulate PQL requests and responses is described in greater detail below in reference to .

Queries and corresponding server responses are implemented using a text markup language such as XML. In this configuration the queries and server responses are packaged in a Simple Object Access Protocol SOAP and posted over the network of using the Hypertext Transfer Protocol HTTP . SOAP and HTTP are communication protocols that are well known to those skilled in the art of network communication protocols.

The message includes a schema ID and one or more object transformation parameters hereinafter a parameter is also referred to as a data field for specifying one or more attributes of . The schema ID is used to identify a particular elements of interest schema . It can be appreciated that this data field is optional if there is a default schema or only one schema. The attributes correspond to the virtual objects of the data polyarchy . The attribute s include distinguishing attributes locating attributes or classifying attributes each of which is discussed in greater detail above with respect to logical domain properties of .

A parameter or data field is classified according to its type which is selected from types that include a specific element of interest type an elements of interest modifier to limit a response a Boolean modifier a dimension indicator and or a dimension information modifier . The number and types of data fields that are represented in the message are based on the message s design or purpose.

In this example the specific element of interest parameter specifies a surname attribute Doe . The PQL response returned at least two objects and corresponding elements of interest. A respective Glue ID identifies each respective object which is a distinguishing element. The first object pertains to John Doe . The second object pertains to Jim Doe . Each object was returned with a number of elements of interest such as a room number a user id uid a surname sn a given name a building name a title an indication of a related dimension locationUpnode the entities manager manager cost center id and the like.

If the specific element of interest specified an absolutely unique distinguishing attribute such as a GUID that corresponds to a particular object stored in a data polyarchy the server will return all of the information stored in the data polyarchy with respect to the particular object.

In this example the limiting attributes are a common name cn attribute and a unique identifier attribute. Thus the various person objects returned by the server indicate only those limiting attributes.

For example the and Boolean modifier is used to filter the results of two data store searches based on specific elements of interest data fields . A first specific elements of interest data field specifies a surname sn attribute with a value of Smith . A second specific elements of interest data field specifies a title attribute with a value of vice president . Thus the Boolean modifier is used to narrow or filter the results based on the respective search results. The result is a single object in the PQL response that corresponds to vice president John Smith. If there were more than one set of entity information stored in a directory that matched this query then each of the entities would be presented in the result.

In this example the dimension information modifier is used to retrieve information corresponding to a first level of subordinates from a data store. This is a jump gate because John Smith s subordinates are presented as aspects of John Smith s object definition .

At block the polyarchical data management module receives a PQL message that is based on the communicated data polyarchy schema block . The request not only identifies one or more attributes of interest but also identifies the data relationships of interest. The request corresponds to a data object of the data objects in the polyarchical data set of .

The received PQL message may correspond to one or more operations including any combination of a an operation to find a default search object of the data objects b an operation to locate an object of the data objects that corresponds to a particular name c an operation to obtain a default hierarchy of data relationships that correspond to a particular object of the data objects d an operation to obtain a particular hierarchy of data relationships that correspond to a particular object of the data objects e an operation to identify at least one subset of a plurality of hierarchies of data relationships that correspond to a particular object of the data objects f an operation to obtain multiple hierarchies of data relationships that correspond to a particular object of the data objects and so on.

At block the data polyarchy management module determines a physical access strategy e.g. a simple scan a recursive scan and so on to identify data corresponding to the request from the data polyarchy . This determination is based on the request block which in turn is based on the schema that was communicated to the client block . As already noted the schema provides the client not only with information that corresponds to the possible contents of the data polyarchy but also with includes information describing the possible polyarchies of data relationships that may pertain to any one object of interest e.g. see the indicators shown in Table 7 .

For instance consider that if a client request i.e. a PQL message is designed to filter out all elements of interest that pertain to an object with the exception of an absolutely unique distinguishing attribute e.g. a GUID and a common name that corresponds to the GUID a simple scan of the data polyarchy is an efficient technique to search for information regarding the distinguishing object of interest.

The request however may also indicate that a number of sub objects should be presented with respect to a complex object i.e. a jump gate and then the results are to be subsequently modified by a union of a dimension of information that corresponds to the complex object that is orthogonal to one or more of the sub objects. In this case a recursive scan of the data polyarchy is an efficient technique to search for information regarding the objects and inter object relationships of interest.

In this manner a PQL request message identifying attributes and data relationships of interest also provides an optimized physical access strategy to search the data polyarchy for such attributes and data relationships.

At block the data polyarchy management module accesses the data from the polyarchy based on the determined physical access strategy block . The accessed data may take a number of different forms. For instance the accessed data may be independent of any inter object relationship between the data object and any other object in the polyarchy. Additionally the accessed object s may participate in one or more hierarchies of inter object relationships with one or more different data objects in the polyarchy. In this case the accessed object s and the one or more different objects comprise a similar attribute. As discussed above these inter object relationships may be orthogonal with respect to one another in one or more dimensions.

At block the polyarchical data management module transforms the accessed data for issuing to the client . Specifically accessed data is transformed based on the requirements of the specific PQL message that was used to request the data block . For instance if the message indicates an object with respect to a particular dimension the implicit and explicit inter object relationships of the accessed data are assembled into a hierarchy based on the particular dimension.

For example an accessed data object represents a jump gate when the accessed data includes a complex object of the data objects that is related to one or more sub objects of the data objects. In this case the complex object is transformed or represented as an independent surface entity. Each of the one or more sub objects is described as a respective separate entity in a manner that is independent of the surface entity. The one or more sub objects are then transformed or referenced in the surface entity to indicate a relationship between the complex object and the one or more sub objects. The referencing is independent of any object naming or hierarchical data relationship between the complex object and the one or more sub objects.

In another example accessed data includes a first object of the data objects in the polyarchy that is related to one or more sub objects. The first object is transformed or represented as an independent surface entity. Each of the one or more sub objects is described as respective separate entities in a manner that is independent of the surface entity. Then a respective link is included in each of the one or more sub objects to reference the first object. In this manner as in the previous example the data is transformed to express the relationship of interest as indicated in the corresponding PQL message .

At block data polyarchy management module issues or communicates the transformed data block to the client.

The computer is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with an exemplary computer include but are not limited to personal computers server computers thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

An exemplary computer may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so on that performs particular tasks or implements particular abstract data types. An exemplary computer may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

As shown in the computing environment includes a general purpose computing device in the form of a computer . The components of computer may include by are not limited to one or more processors or processing units a system memory and a bus that couples various system components including the system memory to the processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus also known as Mezzanine bus.

Server typically includes a variety of computer readable media. Such media may be any available media that is accessible by computer and it includes both volatile and non volatile media removable and non removable media.

In the system memory includes computer readable media in the form of volatile memory such as random access memory RAM and or non volatile memory such as read only memory ROM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently be operated on by processor .

Computer may further include other removable non removable volatile non volatile computer storage media. By way of example only illustrates a hard disk drive for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are each connected to bus by one or more interfaces .

The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories RAMs read only memories ROM and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including by way of example and not limitation an operating system one or more application programs other program modules and program data .

Each of such operating system one or more application programs e.g. a polyarchy data management module other program modules and program data e.g. the data polyarchy and the elements of interest schema some combination thereof may include an implementation of an exemplary data polyarchy server of . Specifically each may include an implementation of a data polyarchy server to 

A user may enter commands and information into computer through optional input devices such as keyboard and pointing device such as a mouse . Other input devices not shown may include a microphone joystick game pad satellite dish serial port scanner or the like. These and other input devices are connected to the processing unit through a user input interface that is coupled to bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

An optional monitor or other type of display device is also connected to bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers which may be connected through output peripheral interface .

Computer may operate in a networked environment using logical connections to one or more remote computers such as a remote server computer e.g. data servers . Remote computer may include many or all of the elements and features described herein relative to computer .

Logical connections shown in are a local area network LAN and a general wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. When used in a LAN networking environment the computer is connected to LAN via network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN . The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism.

Depicted in is a specific implementation of a WAN via the Internet. Computer typically includes a modem or other means for establishing communications over the Internet . Modem which may be internal or external is connected to bus via interface .

In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in a remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on a memory device of remote computer . It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.

An implementation of an exemplary computer may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

 Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

 Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also includes any information delivery media.

The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

The described arrangements and procedures replace traditional notions of distinguished names that represent inter object relationships within a single static hierarchy. More specifically the described arrangements and procedures replace these traditional notions with dynamically generated graphs of inter object connections in multiple dimensions of data relationships based on attributes of the objects. In this manner complex real world objects are represented with respect to the particular objects themselves with respect to any set of decomposed sub entities or sub objects that are related to the particular objects. These inter object relationships are managed and navigated using a data polyarchy schema that has been generated to access elements of interest in the data polyarchy .

Although the described subject matter to generate and manage polyarchies of data relationships has been described in language specific to structural features and or methodological operations it is to be understood that the subject defined in the appended claims is not necessarily limited to the specific features or operations described. Rather the specific features and steps are disclosed as preferred forms of implementing the claimed present invention.

