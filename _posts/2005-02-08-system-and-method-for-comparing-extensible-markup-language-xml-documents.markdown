---

title: System and method for comparing extensible markup language (XML) documents
abstract: A system and a method for comparing Extensible Markup Language (XML) documents includes providing two XML documents as XML objects to a comparison tool and providing a list of XML items to be either included or excluded from the comparison. The comparison tool provides an application program interface (API), which allows it to be plugged into any application. The adaptability of the comparison tool to any application and the ability to exclude items from the comparison, or limit the comparison to specific items, provide for a flexible tool that improves performance for a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07392471&OS=07392471&RS=07392471
owner: JP Morgan Chase Bank
number: 07392471
owner_city: New York
owner_country: US
publication_date: 20050208
---
This application claims benefit of Provisional Application No. 60 591 647 filed Jul. 28 2004 the entire disclosure of which is incorporated herein by reference.

The present invention relates generally to document management and more particularly to a system and a method for comparing extensible markup language XML documents such that certain elements and attributes are excluded from the comparison process.

It is common when generating a document such as a text file or spreadsheet to draft review and revise the document multiple times before a final document is produced. In the electronic age multiple drafts and revisions of a document may be saved as different versions on a computer or network in order to capture content changes and modifications made between drafts. Often one may wish to compare versions of a document to determine what changes have been made. For example if a document is being prepared by more than one person changes made between versions may not be known to each person preparing the document. Software application comparison tools have been created to provide an easy mechanism for comparing documents and or versions of a document to highlight changes made.

Current document comparison tools typically are file based such that the tool or software component takes two flat or text files and compares the two files against each other. A common result of such a comparison tool may be a merged result of the two documents with modifications denoted in a particular manner such as for example deleted content may be struck through while added content may be underlined.

Shortcomings of such comparison tools include a limitation to a specific application or to a specific type of document and the inability to limit the comparison process to specific content within the documents. Often certain portions of a document are irrelevant for comparison purposes. For example when versions of a document are compared the comparison may yield different version numbers and timestamps even though such differences may not be relevant to a user generating the comparison. On the other hand a user may wish to know whether a change has been made in only a specific portion of a document making any modifications occurring in the rest of the document irrelevant. No current comparison tool allows for a user to be selective in determining specific content for a comparison process.

Additionally as stated above most if not all tools are file based executable programs which generally are limited to a specific application or document type. Thus a need exists for a comparison tool that may be flexibly used between different applications and document types and that provides for a selective comparison between documents.

The present invention relates to a system and a method for performing a comparison between documents utilizing a list of data items to be excluded from the comparison process. Specifically the system uses extensible markup language XML documents to represent documents or files to be compared and further uses a hierarchical structure known as a tree structure to represent the actual content for the comparison process.

The system of the present invention includes a comparison tool created in an object oriented programming language OOPL such as for example JAVA . The comparison tool provides an application program interface API that allows the comparison tool to interact with or be plugged into any application capable of interacting with such a language. This allows the comparison tool to be utilized by multiple applications without having to be specialized for each application thereby increasing the flexibility of the comparison tool of the system. A preferred embodiment of the present invention is disclosed below in which JAVA is used. However one of ordinary skill will recognize that the present invention is not limited to the use of JAVA and instead may use any object oriented programming language.

The comparison tool of the system compares two XML documents which have been formatted into an XML object representation XML object such as the Document Object Model DOM established by the World Wide Web Consortium in order for the comparison tool to manipulate the XML documents. Unlike conventional XML comparison tools which are limited to performing a straight comparison between XML documents the comparison tool of the system also incorporates a third XML object representing a list of items from the XML documents to be excluded from the comparison exclusion list . The comparison tool generates a merged Result XML object including the items specified in the exclusion list. The Result XML object then may be manipulated according to the needs of a user

Alternatively the third XML object may represent a list of items from the XML documents such that the comparison process is limited only to those specific items. This is beneficial when many changes have occurred between versions of a large document or file but the relevant portions of the document are few.

In an XML object an XML document is represented as a logical tree having objects or nodes located in a hierarchical branching structure. This tree structure is made up of elements and attributes where an element represents an actual item in the hierarchy of the document and may have a data value and an attribute represents data that describes an element. Each node may contain one or more elements and one or more attributes depending on how the tree diagram is structured. The top node or the root node is also referred to as the parent node with each node descending from it referred to as a child node. Using XML a document transformed into an XML object may be utilized and manipulated outside of its specific application.

According to another embodiment of the present invention a method for comparing XML documents includes the steps of the system receiving two XML objects which represent two XML documents from one or more sources and the system receiving a third XML object representing a list of items divided into elements and or attributes to be excluded from a comparison process. The system performs the comparison process between the two XML objects which represent the two XML documents by traversing the nodes of the first received XML object and then traversing the nodes of the second received XML object to determine whether elements and attributes have been modified inserted and or deleted between corresponding nodes. The system also determines whether elements and or attributes have been added and deleted between the two XML objects. Elements and attributes identified in the third XML object the exclusion list are ignored regardless of whether changes have occurred to them.

Changes are indicated in the node containing the changed element or attribute. Notification of a change in a child node is made in each parent node along the path to the modified child node up to the root node which is annotated or notified that a change has occurred in one or more child nodes descending therefrom. This allows an application to determine initially that a change has occurred somewhere in the document without having to locate the specific details. For a user who simply wants to know whether any changes have occurred between two documents this method provides a quick and simple response to such an inquiry.

The method further includes the step of the system generating a processed result as a Result XML object by merging the two received XML objects and annotating nodes where changes have occurred. The system also passes through to the Result XML object the listed elements and attributes excluded from the comparison process so that no data is left out of the processed result. The excluded elements and attributes appear in the Result XML object as unchanged. In another step of the method the system transmits the Result XML object in accordance with an application interacting with the system. Because the processed result is generated as an XML object and not a text file any application capable of manipulating XML objects may receive and utilize the processed result in accordance with a user s needs.

Advantageously the system may offer a user the choice of either a straight comparison of two XML documents or a comparison involving an exclusion or inclusion list. Providing both methods for comparing XML documents increases the utility of the system.

The features of providing an exclusion list of XML items and passing any change notification up to the root node produces a system with greater flexibility and utility than conventional comparison tools. Advantageously less time is spent reviewing the merged result which contains only the relevant changes according to a user s needs. By providing an API the system can be plugged into any application compatible with an object oriented programming language providing greater flexibility than conventional document comparison tools. By being object oriented less time and computer resources are needed because there is no need to convert XML objects to flat or text files in order to perform a comparison process. Overall the time and costs associated with document comparison are greatly reduced.

The compare tool generates a processed result such as a Result XML object which is a merged result of the first XML object and the second XML object . The compare tool may transmit the Result XML object to a destination in accordance with instructions from an application the compare tool is working with.

Because the compare tool includes an API this single tool is not limited to interfacing with only one application but may be plugged into any application compatible with the OOPL. A program administrator or a system developer may incorporate the compare tool into a desired application and by programming the application to convert its documents or files into XML objects the application may transmit to and receive from the compare tool relevant documents for comparison. Accordingly it is up to the program administrator to determine just how an application manipulates the Result XML object once received from the compare tool . Software components exist in the art that provide a means for transforming a document into an XML object and one of ordinary skill will appreciate that the scope of the invention is not meant to be limited to any one means.

By processing documents in object form as opposed to flat files the compare tool may compare documents from multiple sources and in different types such as a text file a spreadsheet or a pictorial presentation such as a PowerPoint presentation. Advantageously the compare tool uses fewer resources by being object oriented because the relevant XML objects may be received from and transmitted to multiple applications without having to be converted to flat files or to their original form in order to be manipulated. The documents remain as XML objects throughout the comparison process.

At step S the compare tool receives a list of elements and attributes to be excluded exclusion list from the comparison process represented as a third XML object. During the comparison process the compare tool ignores changes in the elements and attributes specified in the exclusion list . However the compare tool passes the excluded elements and attributes and their data to a Result XML object so that no document content is left out of the processed result. Upon receipt of the first XML object the second XML object and the exclusion list the compare tool is ready to perform the comparison process.

At step S the compare tool opens the exclusion list and stores the elements and attributes to be excluded in a computer readable memory. The compare tool then begins to traverse a tree structure of the first XML object from the root node down to the lowest child node along a single path or branch. The compare tool then locates a corresponding root node in the second XML object and traverses the structure of the second XML object from the corresponding root node down to the lowest child node along a path corresponding to the path identified and traversed in the first XML object . The compare tool compares each node along the path in the first XML object with each node along the corresponding path in the second XML object . The compare tool then traverses back up from the lowest child node to the most immediate parent node and then down to the next lowest child node and repeats this process until all nodes within both the first XML object and the second XML object have been traversed. An example of the compare tool traversing an XML object according to a preferred embodiment of the present invention is discussed below in connection with .

As the compare tool traverses both the first XML object and the second XML object at step S the compare tool generates the Result XML object and stores results of the comparison in the Result XML object at step S. As discussed above the Result XML object is a merged result of the first XML object and the second XML object and thus contains a superset of the elements and attributes of both the first and the second XML objects and . When a change to an element or attribute in a node along the path being traversed is identified the compare tool annotates the change in the corresponding node in the Result XML object . The compare tool also annotates the change in the node in each parent node ascending from the particular node all the way back to the root node. Thus an application may review the root node of the Result XML object to determine whether any changes exist between the first XML object and the second XML object as opposed to searching the entire Result XML object .

The compare tool identifies a change between corresponding nodes in the XML objects and as modified. The term modified is placed into the corresponding location in the Result XML object at step S. If the compare tool determines that a new element and or attribute has been added to the first XML object as compared to the second XML object the addition is identified as inserted in the corresponding location in the Result XML object . If the compare tool determines that an element or attribute which exists in the second XML object is not present in the first XML object the compare tool recognizes that the element or attribute has been deleted and identifies the deletion as deleted in the corresponding location in the Result XML object . Accordingly if the compare tool determines that there is no change between corresponding elements and attributes in the first XML object and the second XML object the corresponding location in the Result XML object is annotated as unchanged. An example of a Result XML object according to the preferred embodiment is discussed in greater detail below in connection with .

Once the compare tool completes the comparison process at step S and generates the Result XML object at step S the compare tool may transmit the Result XML object at step S in accordance with the application interfacing with the compare tool . It is up to a program administrator to determine how the application should use the processed result from the compare tool . The compare tool then is ready to perform another comparison.

In an XML object includes a root element batch with an attribute version and an attribute value of 2.2. The batch has two child elements cds trade which has an attribute type and an attribute value of trade and status which has an element value of matured. The cds trade has four child elements primary id alt id is what if and is vanilla . The primary id has an element value 558650 and an attribute type with an attribute value of m3. The alt id has an element value of 60170 and an attribute type with an attribute value of internal. The is what if has an element value of false and the is vanilla has an element value of false also.

Similar to the XML object an XML object includes a root element batch with an attribute version and an attribute value of 2.3 similar to the batch in the XML object . The batch has two child elements cds trade which has an attribute type and an attribute value of trade similar to the cds trade in the XML object and version which has an element value of 2.0. Similar to the XML object the cds trade has four child elements primary id alt id is what if and is vanilla . The primary id has an element value 550789 and an attribute type with an attribute value of m3. The alt id has an element value of 52583 and an attribute type with an attribute value of internal. The is what if has an element value of false and the is vanilla has an element value of true. 

Although the examples presented in specify the XML version as 1.0 one of ordinary skill will understand that the present invention is not limited to this specific version of XML but may be adapted to all existing and future versions as they are developed and improved upon.

In an exclusion list XML object is provided for the compare tool . The root element of the exclusion list is non confirmable . All child nodes descending from the root element non confirmable are XML items to be excluded from the comparison process. Each node corresponds to one XML item and includes the following information the name of the item the type of the item whether it is an element or an attribute and the path of the item which gives its location within the hierarchy of the XML object .

In the exclusion list excludes the XML items batch version cds trade type alt id and if vanilla from the comparison process. These excluded XML items correspond to the attributes of the batch versions and and the cds trade types and and the elements of the alt ids and and the if vanillas and in XML objects and respectively.

As stated above an XML item to be excluded is described by a name a type and a path. The compare tool interprets the excluded XML item to mean that an attribute named version which is located in the node batch and an attribute value associated with this attribute are to be ignored during the comparison process. Similarly the compare tool interprets the exclusion XML item to mean that an attribute named type which is located in the node batch cds trade and an attribute value associated with this attribute are to be ignored during the comparison process. The compare tool interprets the exclusion XML items and to mean that an element named alt id located in the node batch cds trade alt id and an element named if vanilla which is located in the node batch cds trade alt id and their respective element values are to be ignored during the comparison process.

Thus if an item is to be excluded for the Result XML object if the item exists in the first XML object but not the second XML object the compare tool applies the top rule New Item and creates a corresponding item in the Result XML object . The compare tool then passes the data associated with the new item from the first XML object to the corresponding item in the Result XML object and annotates the item in the Result XML object as unchanged. If an excluded item exists in the second XML object but not the first XML object the compare tool applies the bottom rule Deleted Item and creates a corresponding item in the Result XML object but passes no item data to the item in the Result XML object . However if an excluded item has been modified from the second XML object to the first XML object the compare tool applies the middle rule Changed Item and creates a corresponding item in the Result XML object . Similar to the rule New Item the compare tool passes the item and its associated data from the first XML object and annotates the item as unchanged even though the item actually has changed between the first XML object and the second XML object . Thus the exclusion list allows a user to ignore irrelevant changes between documents and focus on the changes that are relevant.

As discussed above the root element or root node of both the XML objects and are the batch nodes and respectively. In the XML object the batch node has two child nodes cds trade and status . The status has no child nodes. However the cds trade has four child nodes primary id alt id is what if and is vanilla . The data associated with each node is displayed accordingly. Similarly in the XML object the batch node has two child nodes cds trade and version . The version has no child nodes. However the cds trade has four child nodes primary id alt id is what if and is vanilla .

In arrows . through . illustrate the logic the compare tool follows as it traverses the XML objects during the comparison process in accordance with a preferred embodiment of the present invention. As mentioned above when the compare tool traverses the first XML object in this case the XML object the compare tool begins at the root node the batch node and searches the second XML object in this case the XML object for a root node. The compare tool determines that the batch node is the root node of the XML object . Simultaneously the compare tool begins to generate a Result XML object as shown in and creates a root node . The compare tool determines that both root nodes i.e. the batch nodes and contain a single attribute version and an attribute value.

In a straight comparison the compare tool compares the batch node with the batch node and determines that there has been a change from the XML object to the XML object in that the attribute value 2.3 has changed to 2.2. Within the root node the compare tool indicates that a change has occurred by using the annotation modified. The compare tool then carries the node data from the first XML object i.e. the XML object and assigns it to the root node the batch node as indicated by the 2.2 in the batch node . Again this is what occurs with a straight comparison where no exclusion list is involved.

However by applying the exclusion list of the compare tool recognizes that the attribute version in a node batch is to be ignored during the comparison process as shown at . In accordance with the exclusion rules in Table 1 the compare tool ignores the change in version numbers generates a batch node in the Result XML object and passes the node data from the XML object i.e. version 2.2. The compare tool also annotates the batch node as unchanged. However this annotation may change as the comparison process progresses.

The compare tool then traverses along a path . from the root node i.e. the batch to the first descending child node i.e. the cds trade node in the XML object . The compare tool then traverses the XML object along a path similar to . from the root node i.e. the batch node to the first descending child node which happens to be the cds trade node . The compare tool determines that the cds trade nodes and contain an attribute type with the same attribute value Trade. The compare tool creates a cds trade node in the Result XML object . In a straight comparison the compare tool would annotate the cds trade node in the Result XML object as unchanged and pass the attribute value Trade to the cds trade node . However with the exclusion list the compare tool recognizes that an attribute type in a node cds trade is to be ignored during the comparison process as shown at . The end result is the same the compare tool annotates the cds trade node as unchanged and passes the attribute value from the first XML object i.e. the XML object which is trade in accordance with the exclusion rules in Table 1. Although there is no change between the cds trade node in the XML object and the cds trade node in the XML object if there had been a change the compare tool would have ignored it.

The compare tool then determines that the cds trade nodes are not the lowest child node descending from the root node i.e. the batch nodes . Thus the compare tool traverses along a path . from the cds trade node in the XML object to a descending child node if one exists. In the XML object a child node descending from the cds trade node is the primary id node . The compare tool traverses a path similar to . from the cds trade node in the XML object and locates the first descending child node i.e. the primary id node . The compare tool reviews the exclusion list and determines that neither elements nor attributes associated with a primary id node are to be excluded from the comparison process. Thus the compare tool compares the elements and attributes of the primary id nodes and and determines that both nodes contain an element with an element value and an attribute type with an attribute value. The compare tool determines that although there has been no change between the attribute and the attribute values in the primary id nodes and the element value has changed from 550789 in the primary id node to 558650 in the primary id node . The compare tool creates a primary id node in the Result XML object at a corresponding location and annotates the primary id node as modified. The compare tool passes data associated with the unchanged attribute as indicated by the line type unchanged m3 and passes both the new element value 558650 from the XML object and the old element value 550789 from the XML object . The compare tool then begins to search for any child nodes descending from the primary id nodes and in the XML objects and respectively.

In the compare tool determines that both the primary id node and the primary id node are the lowest child nodes along that path . in both the XML objects and respectively. The compare tool therefore traverses back up the path from the primary id nodes to the immediate parent node i.e. the cds trade nodes as shown at .. As discussed above changes made in the child nodes are percolated back up the path to the root node. Thus the compare tool annotates the cds trade node in the Result XML object to reflect the change to the element value between the cds trade nodes and . In the cds trade node the compare tool reflects the change made in the child primary id nodes and by changing the annotation from unchanged to modified. However the elements and attributes associated with the cds trade node remain unchanged.

The compare tool then traverses along a path . to determine if the cds trade nodes have additional child nodes in the XML objects . Upon doing so the compare tool locates the next child node which are the alt id nodes in the XML objects respectively and determines that the alt id nodes contain an element value an attribute internal and an attribute value. The compare tool then reviews the exclusion list and determines that an element in a alt id node is to be ignored during the comparison process as shown at . Thus the compare tool ignores the change in the element value from 52583 in the alt id node to 60170 in the alt id node . The compare tool however compares the attribute type and attribute value in both the alt id nodes and and determines that no change has occurred. The compare tool creates an alt id node in the Result XML object at the proper location and annotates the alt id node in the Result XML object as unchanged The compare tool passes the element and attribute data from the alt id node in the XML object to the alt id node in the Result XML object in accordance with the exclusion rules in Table 1.

The compare tool next determines that the alt id nodes in both the XML objects and are the lowest child nodes along the path . and traverses the XML objects and along a path . back up to the immediate parent node i.e. the cds trade nodes . The compare tool then traverses the XML objects and to search for other child nodes descending from the cds trade nodes . In both the XML objects and the next child nodes descending from the cds trade nodes are the is what if nodes along a path .. The compare tool determines that the is what if nodes each contain a single element value. The compare tool then reviews the exclusion list and determines that an is what if node is not listed as an excluded XML item. Thus the compare tool compares the element value false of the is what if node in the XML object to the element value false of the is what if node in the XML object and determines that no change has occurred. Accordingly the compare tool creates an is what if node in the Result XML object at the proper location and annotates the is what if node in the Result XML object as unchanged. The compare tool then passes the element value false to the is what if node .

The compare tool next determines that the is what if nodes in the XML objects respectively are the lowest child nodes along the path . and traverses the XML objects and along a path . back up to the immediate parent nodes i.e. the cds trade nodes . The compare tool then traverses the XML objects to search for other child nodes descending from the cds trade nodes . In both the XML objects and the next child nodes descending from the cds trade nodes are the is vanilla nodes along a path .. The compare tool determines that the is vanilla nodes each contain a single element value. The compare tool then reviews the exclusion list and determines that an element value of an is vanilla node is to be excluded from the comparison process as shown at . Thus the compare tool ignores the fact that the element value of the if vanilla nodes has changed from true in the XML object to false in the XML object . The compare tool creates an is vanilla node in the Result XML object at the proper location and annotates the if vanilla node in the Result XML object as unchanged. The compare tool passes the element value false from the XML object in accordance with the exclusion rules in Table 1.

The compare tool next determines that the is vanilla nodes in both the XML objects and are the lowest child nodes along the path . and traverses the XML objects and along a path . back up to the immediate parent nodes the cds trade nodes . The compare tool then traverses the XML objects to search for other child nodes descending from the cds trade nodes . In both the XML objects and no other child nodes descend from the cds trade nodes and thus the compare tool traverses along a path . back up to the root nodes i.e. the batch node . As discussed above any changes made in child nodes descending from a parent node percolate up to the parent node. Thus the change determined in the primary id nodes which percolated to the cds trade nodes now percolates to the root nodes the batch nodes . The compare tool alters the annotation unchanged in the batch node in the Result XML object to modified to indicate the change. No other data within the batch node changes thus an application viewing the Result XML object recognizes that a modification has occurred in a child node descending from the root nodes i.e. the batch nodes .

The compare tool then traverses the XML objects and to search for other child nodes descending from the batch nodes . In the XML object the compare tool locates a child node the status node along a path . and determines that the status node contains an element value matured. However when the compare tool traverses a similar path to . the compare tool locates a child node the version node but no child node corresponding to the status node . The compare tool reviews the exclusion list and determines that both the status node and the version node are to be included in the comparison process. The compare tool creates a status node and a version node in the Result XML object . The compare tool then annotates the status node as inserted and the version node as deleted in the Result XML object .

In accordance with the exclusion rules in Table 1 if the exclusion list lists the version node as an XML item to be excluded from the comparison process the compare tool would have created a version node in the Result XML object but would not pass the element value 2.0 because this information is irrelevant to the user. However because the version node is included in the comparison process the compare tool passes the element value 2.0 to the version node in the Result XML object .

At this point the compare tool traverses the XML objects to determine if child nodes descend from either the status node or the version node . The compare tool determines that both the status node and the version node are the lowest child nodes along the path . and traverses along a path . back up to the immediate parent nodes i.e. the batch nodes . The compare tool then traverses the XML objects to determine if other child nodes descend from the batch nodes and finds none. Thus the compare tool determines that the no other nodes exist to process and terminates the comparison process. The compare tool prepares the Result XML object for transmitting to one or more locations as instructed by the application interacting with the compare tool and transmits the Result XML object accordingly.

As discussed above an alternate embodiment of the present invention includes a compare tool receiving a first XML object a second XML object and a third XML object representing an inclusion list of items to limit the comparison process to. This feature is useful when a user wants to determine whether only a few changes have occurred between two XML documents. Rather than produce an extensive exclusion list the compare tool may accept a list of items such that the compare tool processes only those items and no other content within the XML documents. The comparison process utilizing the inclusion list follows the same steps shown in and produces a processed Result XML object similar to that shown in .

As will be appreciated many different types of applications can utilize the features of the present invention. The inventive method may also be embodied on computer executable code that is stored on a computer readable medium for example a floppy disk a hard drive removable media an optical memory a magneto optical memory a RAM a ROM a flash memory so called memory sticks and the like.

While the present invention has been described with respect to what is presently considered to be the preferred embodiment it is to be understood that the invention is not limited to the disclosed embodiment. To the contrary the invention is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

