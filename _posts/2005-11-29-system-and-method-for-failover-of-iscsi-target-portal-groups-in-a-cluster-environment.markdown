---

title: System and method for failover of iSCSI target portal groups in a cluster environment
abstract: A system and method for the failover of iSCSI target portal groups (TPGs) is provided. Each network portal within a storage system is associated with a network portal data structure identifying a destination storage system in the event of failover/takeover operation. A management module ensures that all network portals associated with a target portal group have the same destination as a failover storage system. During a failover operation, all network portals within a TPG failover to the same destination storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797570&OS=07797570&RS=07797570
owner: NetApp, Inc.
number: 07797570
owner_city: Sunnyvale
owner_country: US
publication_date: 20051129
---
The present invention relates to storage systems and more particularly to enabling iSCSI target portal group failover among a plurality of storage systems.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

Storage of information on the disk array is preferably implemented as one or more storage volumes of physical disks defining an overall logical arrangement of disk space. The disks within a volume are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . RAID implementations enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of redundant information parity with respect to the striped data. As described herein a volume typically comprises at least one data disk and one associated parity disk or possibly data parity partitions in a single disk arranged according to a RAID 4 or equivalent high reliability implementation. The term RAID and its various implementations are well known and disclosed in by D. A. Patterson G. A. Gibson and R. H. Katz Proceedings of the International Conference on Management of Data SIGMOD June 1988.

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on the disks as a hierarchical structure of data containers such as files and blocks. For example each on disk file may be implemented as a set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the file a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

A known type of file system is a write anywhere file system that does not over write data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. Sunnyvale Calif.

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing file based and block based protocol messages in the form of packets to the system over the network. In the case of block based protocol packets the client requests and storage system responses address the information in terms of block addressing on disk using e.g. a logical unit number lun . These block base protocol packets may comprise SCSI encapsulated in TCP IP iSCSI .

In such block based storage system environments the luns exported by a storage system are only available by accessing that particular system. It should be noted that the term lun as used herein may refer to a logical unit number and or a logical unit. A noted disadvantage of such environments arises when the storage system suffers an error or otherwise becomes inaccessible due to e.g. a failure in network connectivity. As luns are only available by accessing the storage system those luns become inaccessible should the storage system become inaccessible. Such inaccessibility is unacceptable for many users of SANs who require high e.g. 24 7 data availability.

To improve the availability of luns storage systems may be coupled together in a cluster with the property that when one storage system fails the other begins servicing data access requests directed to the failed storage system s luns. In such an environment two storage systems are coupled to form a storage system cluster. Each storage system services data access requests directed to its luns and only services data access requests directed to the other storage system s luns after a failover operation has occurred. During the failover operation the surviving storage system i.e. the storage system that has not suffered the error condition assumes the identity of the failed storage system by for example assigning the failed storage system s network portals i.e. the Internet Protocol IP addresses and TCP port numbers to network adapters available on the surviving storage system. However a noted disadvantage of such clusters is that they are limited to two storage systems.

In certain distributed environments such as that described in U.S. patent application Ser. No. 11 254 397 entitled SYSTEM AND METHOD FOR PROVIDING A UNIFIED ISCSI TARGET WITH A PLURALITY OF LOOSELY COUPLED ISCSI FRONT ENDS a plurality of storage systems may be utilized as front ends to a cluster comprising network elements N modules and disk elements D modules . In such environments a conventional TCP IP failover pairing may be established between any two N modules.

Similarly in a storage system environment utilizing iSCSI all network portals may failover to one storage system. The iSCSI protocol defines a network portal as an IP address and a TCP port number from which a computer provides iSCSI services. In accordance with the iSCSI protocol each network portal may belong to exactly one target portal group TPG . All connections within an iSCSI session must use network portals within the same TPG. Furthermore a given initiator may have at most one session in progress to an iSCSI target over a given TPG at a given time. A noted disadvantage of the prior art arises when pair wise cluster extends to an N way cluster having a plurality of storage systems to which a failover may occur. Should an N module fail in pair wise cluster environments and all of its network portals are moved to a single surviving N module the surviving N module may become overloaded. However in a N way cluster a storage system administrator typically configures the system to ensure that all network portals within a TPG failover to the same surviving N module. If all network portals within a TPG do not failover to the same N module initiators may send data access commands to a network portal residing on an N module that is different from that of the other network portals of the TPG thereby resulting in error conditions within the iSCSI session. The present invention is directed to a system and method for ensuring that all network portals within a TPG failover to the same destination e.g. N module .

The disadvantages of the prior art are overcome by providing a system and method for configuring a cluster of interconnected storage systems to permit iSCSI target portal group TPG failover. Illustratively each storage system of the cluster comprises one or more network elements N module and disk elements D module operatively interconnected by a cluster switching fabric. The present invention permits the cluster to be presented to an initiator client as a unified iSCSI target by encoding each N module to function as one of a plurality of front ends of the iSCSI target. As a front end any N module may cooperate with clients to open establish one or more iSCSI sessions and thereafter receive data access requests directed to the unified iSCSI target. A data access request received by an N module is forwarded from that module to an appropriate D module of the cluster for processing.

A management module M module is operatively interconnected with the cluster to provide a set of user interface tools that enables an administrator to manage network portals. A replicated database RDB executes as a user application on each storage system and interfaces with the M module to centralize network portal information within the cluster. Modifications to the network portals are stored within the RDB. The RDB alerts each N module of a change which causes the N module to retrieve the changed information from the RDB and update its local configuration.

The M module includes a failover monitor process that ensures that network portal configurations including intended failover destinations are configured so that all network portals belonging to the same TPG fail over to the same N module. Should the administrator attempt to configure failover destinations so that one or more network portals within the TPG failover to different N modules the M module generates an error message and alerts notifies the administrator of the incompatible configuration. However if the configuration is acceptable an appropriate network portal data structures are updated and stored in the RDB so that they are accessible to all N modules of the cluster.

When a failure condition occurs the M module detects the failure condition and alerts the surviving N modules i.e. those N modules that have not suffered an error condition of the failure. The surviving N modules access the RDB to determine whether they are to assume the identities of any network portals of the failed N modules by e.g. examining the network portal data structures. Upon determining that an N module is the failover destination for one or more network portals the N module assumes the identities of all network portals within the TPG. Once the identities of the network portals have been assumed the N module begins processing data access requests directed to the network portals of the TPG.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

Also interconnected with the cluster switching fabric is a management module M module adapted to execute various user interface UI and management functions for the cluster. Illustratively the M module processes commands entered by an administrator for maintaining network portal configuration information in accordance with an illustrative embodiment of the present invention. In the illustrative embodiment the M module includes a failover monitor process that monitors each N D module and initiates a failover operation upon detecting the failure of a N D module. Additionally the failover monitor ensures that an administrator configures failover in the cluster so that all of the network portals in a target portal group TPG will failover to the same N module.

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N module on the node while the other processor executes the functions of the D module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures such as initiator data structures lun data structures and network portal data structures . The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The network adapter may comprise a conventional network interface controller NIC or may in alternate embodiments comprise a TCP IP offload engine TOE and or an iSCSI target host bus adapter HBA each of which may provide a level of acceleration for use with the iSCSI protocol. In alternate embodiments there may be a plurality of network adapters each of which may accept iSCSI connections.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term ONTAP is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the logical unit space and the file system space where logical units are represented as named objects within the file system space.

Illustratively the SCSI target module generates and maintains a number of initiator data structures and or lun data structures . The creation of initiator data structures and lun data structures is further described in U.S. patent application Ser. No. 10 619 122 entitled SYSTEM AND METHOD FOR OPTIMIZED LUN MASKING by Herman Lee et al. now issued as U.S. Pat. No. 7 523 201 on Apr. 21 2009 which is hereby incorporated by reference. As described further below an initiator data structure is generated for each iSCSI initiator that logs into the N module. The initiator data structure contains various data associated with the initiator. Similarly a lun data structure is associated with each lun exported by the storage system and as described further below is utilized to store various metadata related to the luns. Similarly the iSCSI module generates and maintains one or more network portal data structures . The network portal data structures described further below are utilized by the storage operating system for tracking various data relating to a network portal including e.g. to which TPG it belongs.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module to D module communication.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers in conjunction with the SCSI target layer of the N module function as protocol servers that translate file based and block based data access requests from clients. As part of the processing of these requests the N module may have to request data services from the D Module . This may be achieved via file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . A data access request received by an N Module is processed by that N Module. As part of the processing the N module may have to send requests to one or more D modules. A Locate function is illustratively implemented within CF interface . The Locate function interfaces with a volume location database described further below to identify the proper D module to which a data access request should be forwarded. Generally the Locate function identifies the D module that is currently serving the volume to which the data access request is directed.

Further to the illustrative embodiment the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication PC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol is the SpinFS protocol available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Pat. No. 6 671 773.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

A data container e.g. a file or logical unit is accessed in the file system using a data container handle. is a schematic block diagram illustrating the format of a data container handle including a volume ID field an inode number field and a unique ifier field . The volume ID field contains a global identifier within the cluster of the volume within which the data container resides. The inode number field contains an inode number of an inode within an inode file pertaining to the data container. The unique ifier field contains a monotonically increasing number that uniquely identifies the data container handle . The unique ifier is particularly useful in the case where an inode number has been deleted reused and reassigned to a new data container. The unique ifier distinguishes that reused inode number in a particular data container from a potentially previous use of those fields.

In the illustrative embodiment a data container is represented in the write anywhere file system as an inode data structure adapted for storage on the disks . is a schematic block diagram of an inode which preferably includes a meta data section and a data section . The information stored in the meta data section of each inode describes the data container e.g. a file and as such includes the type e.g. regular directory vdisk of file its size time stamps e.g. access and or modification time and ownership i.e. user identifier UID and group ID GID of the file. The contents of the data section of each inode may be interpreted differently depending upon the type of file inode defined within the type field . For example the data section of a directory inode contains meta data controlled by the file system whereas the data section of a regular inode contains file system data. In this latter case the data section includes a representation of the data associated with the file.

Specifically the data section of a regular on disk inode may include file system data or pointers the latter referencing 4 KB data blocks on disk used to store the file system data. Each pointer is preferably a logical vbn to facilitate efficiency among the file system and the RAID system when accessing the data on disks. Given the restricted size e.g. 128 bytes of the inode file system data having a size that is less than or equal to 64 bytes is represented in its entirety within the data section of that inode. However if the length of the contents of the data container exceeds 64 bytes but less than or equal to 64 KB then the data section of the inode e.g. a first level inode comprises up to 16 pointers each of which references a 4 KB block of data on the disk.

Moreover if the size of the data is greater than 64 KB but less than or equal to 64 megabytes MB then each pointer in the data section of the inode e.g. a second level inode references an indirect block e.g. a first level L1 block that contains 1024 pointers each of which references a 4 KB data block on disk. For file system data having a size greater than 64 MB each pointer in the data section of the inode e.g. a third level L3 inode references a double indirect block e.g. a second level L2 block that contains 1024 pointers each referencing an indirect e.g. a first level L1 block. The indirect block in turn contains 1024 pointers each of which references a 4 KB data block on disk. When accessing a data container e.g. file or logical unit each block of the data container may be loaded from disk into the memory .

When an on disk inode or block is loaded from disk into memory its corresponding in core structure embeds the on disk structure. For example the dotted line surrounding the inode indicates the in core representation of the on disk inode structure. The in core structure is a block of memory that stores the on disk structure plus additional information needed to manage data in the memory but not on disk . The additional information may include e.g. a dirty bit . After data in the inode or block is updated modified as instructed by e.g. a write operation the modified data is marked dirty using the dirty bit so that the inode block can be subsequently flushed stored to disk. The in core and on disk format structures of the WAFL file system including the inodes and inode file are disclosed and described in the previously incorporated U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998.

A file system layout is provided that apportions an underlying physical volume into one or more virtual volumes or flexible volume of a storage system such as node . An example of such a file system layout is described in U.S. patent application Ser. No. 10 836 817 titled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT by John K. Edwards et al. and assigned to Network Appliance Inc. now issued as U.S. Pat. No. 7 409 494 on Aug. 5 2008. The underlying physical volume is an aggregate comprising one or more groups of disks such as RAID groups of the node. The aggregate has its own physical volume block number pvbn space and maintains meta data such as block allocation structures within that pvbn space. Each flexible volume has its own virtual volume block number vvbn space and maintains meta data such as block allocation structures within that vvbn space. Each flexible volume is a file system that is associated with a container file the container file is a file in the aggregate that contains all blocks used by the flexible volume. Moreover each flexible volume comprises data blocks and indirect blocks that contain block pointers that point at either other indirect blocks or data blocks.

In one embodiment pvbns are used as block pointers within buffer trees of files such as file stored in a flexible volume. This hybrid flexible volume embodiment involves the insertion of only the pvbn in the parent indirect block e.g. inode or indirect block . On a read path of a logical volume a logical volume vol info block has one or more pointers that reference one or more fsinfo blocks each of which in turn points to an inode file and its corresponding inode buffer tree. The read path on a flexible volume is generally the same following pvbns instead of vvbns to find appropriate locations of blocks in this context the read path and corresponding read performance of a flexible volume is substantially similar to that of a physical volume. Translation from pvbn to disk dbn occurs at the file system RAID system boundary of the storage operating system .

In an illustrative dual vbn hybrid flexible volume embodiment both a pvbn and its corresponding vvbn are inserted in the parent indirect blocks in the buffer tree of a file. That is the pvbn and vvbn are stored as a pair for each block pointer in most buffer tree structures that have pointers to other blocks e.g. level 1 L1 indirect blocks inode file level 0 L0 blocks. is a schematic block diagram of an illustrative embodiment of a buffer tree of a file that may be advantageously used with the present invention. A root top level inode such as an embedded inode references indirect e.g. level 1 blocks . Note that there may be additional levels of indirect blocks e.g. level 2 level 3 depending upon the size of the file. The indirect blocks and inode contain pvbn vvbn pointer pair structures that ultimately reference data blocks used to store the actual data of the file.

The pvbns reference locations on disks of the aggregate whereas the vvbns reference locations within files of the flexible volume. The use of pvbns as block pointers in the indirect blocks provides efficiencies in the read paths while the use of vvbn block pointers provides efficient access to required meta data. That is when freeing a block of a file the parent indirect block in the file contains readily available vvbn block pointers which avoids the latency associated with accessing an owner map to perform pvbn to vvbn translations yet on the read path the pvbn is available.

Whereas the aggregate is analogous to a physical volume of a conventional storage system a flexible volume is analogous to a file within that physical volume. That is the aggregate may include one or more files wherein each file contains a flexible volume and wherein the sum of the storage space consumed by the flexible volumes is physically smaller than or equal to the size of the overall physical volume. The aggregate utilizes a physical pvbn space that defines a storage space of blocks provided by the disks of the physical volume while each embedded flexible volume within a file utilizes a logical vvbn space to organize those blocks e.g. as files. Each vvbn space is an independent set of numbers that corresponds to locations within the file which locations are then translated to dbns on disks. Since the flexible volume is also a logical volume it has its own block allocation structures e.g. active space and summary maps in its vvbn space.

A container file is a file in the aggregate that contains all blocks used by a flexible volume. The container file is an internal to the aggregate feature that supports a flexible volume illustratively there is one container file per flexible volume. Similar to a pure logical volume in a file approach the container file is a hidden file not accessible to a user in the aggregate that holds every block in use by the flexible volume. The aggregate includes an illustrative hidden meta data root directory that contains subdirectories of flexible volumes 

Specifically a physical file system WAFL directory includes a subdirectory for each flexible volume in the aggregate with the name of subdirectory being a file system identifier fsid of the flexible volume. Each fsid subdirectory flexible volume contains at least two files a filesystem file and a storage label file. The storage label file is illustratively a 4 KB file that contains meta data similar to that stored in a conventional raid label. In other words the storage label file is the analog of a raid label and as such contains information about the state of the flexible volume such as e.g. the name of the flexible volume a universal unique identifier uuid and fsid of the flexible volume whether it is online being created or being destroyed etc.

In addition to being embodied as a container file having level 1 blocks organized as a container map the filesystem file includes block pointers that reference various file systems embodied as flexible volumes . The aggregate maintains these flexible volumes at special reserved inode numbers. Each flexible volume also has special reserved inode numbers within its flexible volume space that are used for among other things the block allocation bitmap structures. As noted the block allocation bitmap structures e.g. active map summary map and space map are located in each flexible volume.

Specifically each flexible volume has the same inode file structure content as the aggregate with the exception that there is no owner map and no WAFL fsid filesystem file storage label file directory structure in a hidden meta data root directory . To that end each flexible volume has a volinfo block that points to one or more fsinfo blocks each of which may represent a snapshot along with the active file system of the flexible volume. Each fsinfo block in turn points to an inode file that as noted has the same inode structure content as the aggregate with the exceptions noted above. Each flexible volume has its own inode file and distinct inode space with corresponding inode numbers as well as its own root fsid directory and subdirectories of files that can be exported separately from other flexible volumes.

The storage label file contained within the hidden meta data root directory of the aggregate is a small file that functions as an analog to a conventional raid label. A raid label includes physical information about the storage system such as the volume name that information is loaded into the storage label file . Illustratively the storage label file includes the name of the associated flexible volume the online offline status of the flexible volume and other identity and state information of the associated flexible volume whether it is in the process of being created or destroyed .

It should be noted that while this description is written in terms of aggregates and flexible volumes the teachings of the present invention may be utilized with storage operating systems having any data format. As such the description of aggregates and flexible volumes should be taken as exemplary only.

These applications illustratively operate in user mode to enable reconfiguration or re initialization of any of the applications without requiring the complete re initialization of the storage operating system which would result in a loss of data access for some length of time while the storage operating system initializes. However it should be noted that in alternate embodiments the management process applications may execute in non user mode e.g. in kernel mode.

The management framework is illustratively based on a conventional common interface model CIM object manager that provides the entity to which users system administrators interact with a node in order to manage the cluster . The management framework implements various commands for configuring luns exported by the cluster. In accordance with the illustrative embodiment of the present invention the management framework manages the configuration and distribution of lun configuration information such as initiator data structures and or lun data structures described further below.

The VLDB is a database process that tracks the locations of various storage components e.g. flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N module of each node accesses a configuration table that maps the volume ID of a data container handle to a D module that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the flexible volumes hereinafter generally volumes and aggregates within the cluster. Examples of such VLDB entries include a VLDB volume entry and a VLDB aggregate entry .

The configuration module implements lun configuration and management features to enable an administrator to manage the luns provides by the cluster. Specifically the configuration module implements commands for establishing network portals on a storage system and for tracking the status of network portals in conjunction with the M module. For each network portal on a N module there is a network portal data structure described further below that is utilized for tracking various data related to the network portal.

The VLDB illustratively implements a RPC interface e.g. a Sun RPC interface which allows the N module to query the VLDB . When encountering contents of a data container handle that are not stored in its configuration table the N module sends an RPC to the VLDB process. In response the VLDB returns to the N module the appropriate mapping information including an ID of the D module that owns the data container. The N module caches the information in its configuration table and uses the D module ID to forward the incoming request to the appropriate data container. All functions and interactions between the N module and D module are coordinated on a cluster wide basis through the collection of management processes and the RDB library user mode applications .

To that end the management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes such as data stored in data structures and . Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . In the illustrative embodiment the RDB is implemented as a distributed facility so that each node maintains a local copy of the data contained within the RDB. However in alternate embodiments the functionality of the RDB may be implemented in a non distributed facility. For example the M module may maintain a central database that must be queried by each N D module that desires access. Alternately a single element N D module may be selected to maintain the RDB with each other element N D module querying the identified element for access. The use of a distributed facility improves performance but other techniques for enabling N D modules to have access to RDB s information may be utilized within the teachings of the present invention.

At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database. Additionally should an IP address ever be moved from one N module to another such modifications are stored within the RDB so that all elements of the cluster are able to determine the current cluster configuration. IP addresses may be moved from one N module to another for a variety of reasons. An N module may fail which would result in an automatic failover of its IP addresses to other N modules within the cluster. Alternately an administrator may manually move and or reassign IP addresses to e.g. load balance etc.

As noted above the SCSI target module illustratively generates and maintains a set of initiator data structures as shown in and in the illustrative embodiment is created when an initiator first connects to e.g. establishes a session with an N module. Each initiator data structure is associated with a SCSI initiator i.e. a client of the cluster . The SCSI target module of the N module illustratively populates the various fields with data obtained during the connection stage or from an initiator data structure retrieved from the RDB and loaded in memory as described further below. The initiator data structure includes various fields including e.g. a world wide name iSCSI Nodename field a SCSI status field and a lun map . It should be noted that in alternate embodiments the initiator data structure may have varying and or differing fields from the illustrative embodiment. The world wide name field contains a unique name e.g. iSCSI nodename associated with the initiator. The SCSI status field contains various status information concerning the initiator s SCSI connection. The lun map contains a mapping of virtual luns VLUNs to physical lun PLUNs . In the illustrative embodiment the lun map is generated along with the initiator data structure when a client initially logs into the storage system if an initiator data structure is not available from the RDB. The initiator data structures are illustratively distributed by the RDB to all N modules within the cluster so that modifications may be seen by those modules. The RDB alerts each N module of a change to the data structures which causes the N module to retrieve the changed information from the RDB and update its local configuration. Illustratively once an N module or D module updates its local copy of the RDB the RDB mechanism informs each other instantiation of RDB within the cluster to retrieve the updated information. It should be noted that in other embodiments any distributed database implementation may be utilized with the RDB. As such the implementation described herein should be taken as exemplary only.

An exemplary lun map shown in maps VLUNs to PLUNs. A VLUN is a lun returned to a SCSI initiator in a storage system environment. An initiator may be assigned a set of VLUNs starting from zero and progressing up to the number of luns to which the initiator is connected. Conversely a PLUN is an actual lun associated with a vdisk managed by the storage system. As an intermediary between clients initiators and vdisks luns the storage system typically manages a larger set of luns than the set that is visible to an initiator.

The N module utilizes the LUN map to translate a VLUN from a SCSI initiator to the appropriate PLUN. The lun map has in the exemplary embodiment two columns. The first column VLUN identifies the virtual logical unit number VLUN that a SCSI initiator may access. In one embodiment of the present invention each SCSI initiator attached to the cluster has its own lun address space. The second column comprises of physical logical unit numbers PLUNs that are mapped to corresponding VLUNs . Thus in the example shown in VLUN is mapped to PLUN . Similarly VLUN is mapped to PLUN . The use of VLUN to PLUN mapping enables each SCSI initiator to address a specific device with an initiator specific lun value i.e. a VLUN. If a lun value is not exported to a client the PLUN value associated with the VLUN entry in the lun map is empty. For example VLUN is not mapped to any PLUN value. Thus any data access request issued by the client and directed to VLUN will result in an error.

Each vdisk lun managed by the cluster has an associated vdisk descriptor that includes various data fields for information pertaining to the vdisk. These fields include volume name path name volume number storage system name storage system address PCPI number and a list of initiators e.g. iSCSI nodenames to which the lun is to be exported. It should be noted that the fields described herein are exemplary only in that additional and or differing fields may be utilized in accordance with various embodiments of the invention. For example the volume name field identifies the volume containing the vdisk. The path name field describes a path on the volume identified in the volume name field to the file containing the vdisk. Thus if the storage system name stored in field is System5 the volume name stored in field is vol0 and the path name stored in field field is vdisks vdisk then the vdisk identified by vdisk descriptor may be uniquely identified by the fully qualified path System5 vol0 vdisks vdisk. The list of WWNs stores the WWNs and or iSCSI names of clients initiators to which the lun is to be exported and that may access the lun. The list of WWNs may be set by an administrator when the vdisk is initially created.

By enabling each N module of a cluster to have access to initiator data structure and lun data structures each N module may function as a front end to the cluster and serve data access requests directed to any lun serviced by the cluster. Thus in the event of a failover operation once the appropriate network portals have been assumed by a surviving N module the surviving N module may process any data access requests directed to the assumed network portals.

The present invention is directed to a system and method for configuring a cluster of interconnected storage systems to permit iSCSI TPG failover. As noted each storage system of the cluster comprises one or more network elements N module and disk elements D module operatively interconnected by a cluster switching fabric. The present invention permits the cluster to be presented to an initiator client as a unified iSCSI target by encoding each N module to function as one of a plurality of front ends of the iSCSI target. As a front end any N module may cooperate with clients to open establish one or more iSCSI sessions and thereafter receive data access requests directed to the unified iSCSI target. A data access request received by an N module is forwarded from that module to an appropriate D module of the cluster for processing.

Also as noted the M module is operatively interconnected with the cluster to provide a set of UI tools that enable an administrator to manage network portals. The RDB executes as a user application on each storage system and interfaces with configuration process to centralize configuration of luns within the cluster. Modifications to the network portal configuration are stored within the RDB. The RDB alerts each N module of a change which causes the N module to retrieve the changed information from the RDB and update its local configuration.

Furthermore the M module includes failover monitor that works to ensure that lun configurations including intended failover destinations are configured so that all network portals belonging to the same TPG fail over to the same N module. Should the administrator attempt to configure failover destinations so that one or more network portals within the TPG failover to different N modules the failover monitor detects such misconfiguration and generates an error message and alerts notifies the administrator of the incompatible configuration. However if the configuration is acceptable the appropriate network portal data structures are updated and stored in the RDB so that they are accessible to all N modules of the cluster.

When a failure condition occurs e.g. a N module suffers an error condition the M module or failover monitor therein detects the failure condition and alerts the surviving N modules i.e. those N modules that have not suffered an error condition of the failure. The surviving N modules access the RDB to determine whether they are to assume the identities of any network portals of the failed N modules by e.g. examining the network portal data structure . Upon determining that an N module is the failover destination for one or more network portals the N module assumes the identities of all network portals within the TPG. Once the identities of the network portals have been assumed the N module begins processing data access requests directed to the network portals of the TPG.

Network portals are illustratively arranged into target portal groups for a variety of reasons. The ISCSI protocol specifies that an iSCSI session may utilize multiple connections but that all connections must use network portals within the same target portal group. Thus for example an opened session utilizing a first connection to network portal A may also open a second connection to network portal B which is within the same target portal group A and both connections may be utilized within the same iSCSI session.

However if in step it is determined that not all network portals within a TPG have the same failover location the procedure branches to step and displays an error message to alert the administrator that the modified configuration will not guarantee proper TPG failover before completing in step . In alternate embodiments the M module may take additional and or differing action.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed file systems. Furthermore while this description has been written in terms of N and D modules the teachings of the present invention are equally suitable to systems where the functionality of the N and D modules are implemented in a single system. Alternately the functions of the N and D modules may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

