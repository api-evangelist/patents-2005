---

title: Managing evelopment of an enterprise application
abstract: An improved solution for managing development of a multi-tiered enterprise application. In particular, a plurality of logical tiers for the enterprise application are identified and a corresponding set of components for each of the logical tiers is obtained. An enterprise application view is generated based on the logical tiers and sets of components to provide an end-to-end graphical view of the enterprise application. The enterprise application view can be integrated with various development tools that are used to develop the components for the enterprise application. To this extent, the invention can automatically integrate component development artifacts for deployment. As a result, the invention can provide a truly integrated development environment for developing the enterprise application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812964&OS=08812964&RS=08812964
owner: International Business Machines Corporation
number: 08812964
owner_city: Armonk
owner_country: US
publication_date: 20050331
---
This invention relates generally to developing an enterprise application and more particularly to a method and system for integrating various development tools for the enterprise application.

An enterprise application such as an end to end enterprise business application is a complex application that comprises multiple tiers and subsystems of various technologies that include more than computer program code e.g. Java . Typically the enterprise application will comprise at least a presentation tier a business logic tier and a data Enterprise information system EIS access tier. The data EIS access tier provides connectivity to various back end services. Each tier will generally include one or more components that provide necessary functionality. To this extent creating the enterprise application requires expertise from several areas.

In general each component is developed independently by an expert and or team of experts for the particular component. This development is frequently aided by the use of one of many off the shelf Integrated Development Environments IDEs . For example the WebSphere Studio Application Developer Integration Edition WSAD IE offered by International Business Machines Corp. IBM of Armonk N.Y. includes a strut web diagram editor for modeling presentation flow a WSAD IE Process Editor for modeling business process execution language BPEL based business processes and other editors such as an extensible markup language XML editor and a Java editor for other purposes. However WSAD IE and other similar IDEs do not provide a tool assisted mechanism to combine the components developed for the construction of the multi tiered enterprise application at build time.

Increasingly it is desirable to integrate disparate middleware applications and in response IDEs have incorporated the disparate development tools for these applications. However no progress has been made in the interoperability of these disparate development tools. To this extent many development tools are developed with their purpose and scope limited to the particular application without regard to other development tools and a possibility of interoperability with these other development tools. As a result a developer frequently needs to switch between multiple development tools to develop the components and later manually integrate the components. This disparity and limited interaction between development tools hinders the productivity and efficiency in the development of the enterprise application. Further the IDE does not provide a big picture e.g. end to end view of the architecture of the enterprise application.

To this extent a need exists for an improved method system and IDE for managing development of an enterprise application that generate a complete view of the architecture of the enterprise application and or improve interaction between the various disparate development tools used to develop the enterprise application.

The invention provides an improved solution for managing development of an enterprise application. In particular a plurality of logical tiers for the enterprise application are identified and a corresponding set of components for each of the logical tiers is obtained. An enterprise application view is generated based on the logical tiers and sets of components to provide an end to end graphical view of the enterprise application. Additionally the enterprise application view can be integrated with various development tools to provide a complete development environment for the user s . Moreover the invention can automatically integrate component development artifacts for deployment. To this extent in one embodiment the invention provides an improved integrated development environment IDE for developing an enterprise application. As a result the invention provides a solution that enables each user to readily navigate and view different components of an enterprise application making the development maintenance and or understanding of the enterprise application easier and more cost efficient.

A first aspect of the invention provides a method of managing development of an enterprise application the method comprising identifying a plurality of logical tiers for the enterprise application obtaining a unique set of components for each of the plurality of logical tiers and generating an enterprise application view that includes a unique display area for each of the plurality of logical tiers wherein each unique display area includes a set of objects that represent at least one of the corresponding unique set of components.

A second aspect of the invention provides a system for managing development of an enterprise application the system comprising a system subsystem for identifying a plurality of logical tiers for the enterprise application a system subsystem for obtaining a unique set of components for each of the plurality of logical tiers and a system subsystem for generating an enterprise application view that includes a unique display area for each of the plurality of logical tiers wherein each unique display area includes a set of objects that represent at least one of the corresponding unique set of components.

A third aspect of the invention provides an integrated development environment IDE stored on a computer readable medium for enabling a computer infrastructure to manage development of an enterprise application the IDE comprising a system subsystem for managing a plurality of logical tiers for the enterprise application a system subsystem for managing a plurality of components for the enterprise application wherein each component comprises one of a plurality of component types and belongs to one of the plurality of logical tiers a plurality of development tools wherein each development tool manages development of a component having one of the plurality of component types a system subsystem for generating an enterprise application view based on the plurality of logical tiers and the plurality of components and a system subsystem for integrating each of the plurality of development tools with the enterprise application view.

A fourth aspect of the invention provides a program product stored on a computer readable medium which when executed manages development of an enterprise application the program product comprising program code for identifying a plurality of logical tiers for the enterprise application program code for obtaining a unique set of components for each of the plurality of logical tiers and program code for generating an enterprise application view that includes a unique display area for each of the plurality of logical tiers wherein each unique display area includes a set of objects that represent at least one of the corresponding unique set of components.

A fifth aspect of the invention provides a computer readable medium that includes computer program code to enable a computer infrastructure to manage development of an enterprise application.

An sixth aspect of the invention provides a business method for managing development of an enterprise application.

A seventh aspect of the invention provides a method of generating a system for managing development of an enterprise application.

The illustrative aspects of the present invention are designed to solve the problems herein described and other problems not discussed which are discoverable by a skilled artisan.

It is noted that the drawings of the invention are not to scale. The drawings are intended to depict only typical aspects of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements between the drawings.

As indicated above the invention provides an improved solution for managing development of an enterprise application. In particular a plurality of logical tiers for the enterprise application are identified and a corresponding set of components for each of the logical tiers is obtained. An enterprise application view is generated based on the logical tiers and sets of components to provide an end to end graphical view of the enterprise application. Additionally the enterprise application view can be integrated with various development tools to provide a complete development environment for the user s . Moreover the invention can automatically integrate component development artifacts for deployment. To this extent in one embodiment the invention provides an improved integrated development environment IDE for developing an enterprise application. As a result the invention provides a solution that enables each user to readily navigate and view different components of an enterprise application making the development maintenance and or understanding of the enterprise application easier and more cost efficient.

Turning to the drawings shows an illustrative system for managing development of an enterprise application . To this extent system includes a computer infrastructure that can perform the various process steps described herein for managing development of enterprise application . In particular computer infrastructure is shown including a computing device that comprises an enterprise IDE system which enables computing device to manage development of enterprise application by performing the process steps of the invention.

Computing device is shown including a processor a memory A an input output I O interface and a bus . Further computing device is shown in communication with an external I O device resource and a storage system B. As is known in the art in general processor executes computer program code such as enterprise IDE system that is stored in memory A and or storage system B. While executing computer program code processor can read and or write data such as enterprise application to from memory A storage system B and or I O interface . Bus provides a communication link between each of the elements in computing device . I O device can comprise any device that enables user to interact with computing device or any device that enables computing device to communicate with one or more other computing devices.

In any event computing device can comprise any general purpose computing article of manufacture capable of executing computer program code installed by a user e.g. a personal computer server handheld device etc. . However it is understood that computing device and enterprise IDE system are only representative of various possible equivalent computing devices that may perform the various process steps of the invention. To this extent in other embodiments computing device can comprise any specific purpose computing article of manufacture comprising hardware and or computer program code for performing specific functions any computing article of manufacture that comprises a combination of specific purpose and general purpose hardware software or the like. In each case the program code and hardware can be created using standard programming and engineering techniques respectively.

Similarly computer infrastructure is only illustrative of various types of computer infrastructures for implementing the invention. For example in one embodiment computer infrastructure comprises two or more computing devices e.g. a server cluster that communicate over any type of wired and or wireless communications link such as a network a shared memory or the like to perform the various process steps of the invention. When the communications link comprises a network the network can comprise any combination of one or more types of networks e.g. the Internet a wide area network a local area network a virtual private network etc. . Regardless communications between the computing devices may utilize any combination of various types of transmission techniques.

Regardless the invention provides an improved solution for managing development of enterprise application . To this extent one embodiment of the invention comprises an enterprise IDE system . Enterprise IDE system can comprise an application such as an IDE that enables a set of users to manage development of components and or enterprise application using computer infrastructure . For example enterprise IDE system can comprise the WebSphere Studio Application Developer Integration Edition offered by IBM. To this extent enterprise IDE system is shown including a set one or more of development tools each of which manages development of one or more components having a particular component type.

Further enterprise IDE system is shown including an architecture system for generating an enterprise application view an integration system for integrating the set of development tools with the enterprise application view and a deployment system for generating and deploying enterprise application . Operation of each of these systems is discussed further below. However it is understood that some of the various systems shown in can be implemented independently combined and or stored in memory for one or more separate computing devices that communicate over a network. Further it is understood that some of the systems and or functionality may not be implemented or additional systems and or functionality may be included as part of system . For example the invention could comprise an add on application that enhances features of an existing IDE application that is sold apart from the invention.

Enterprise application comprises a plurality of applications components for an enterprise e.g. a business . In particular enterprise application can comprise both legacy applications that have been used by employees or others within the enterprise legacy data stores that maintain various enterprise information as well as new applications for exploiting new technology such as the Internet e.g. e commerce providing electronic product information to the public an extranet web site for customers etc. To this extent enterprise application may comprise middleware application s that enable the new applications to interact with the legacy applications and or data stores.

Referring to enterprise IDE system includes an architecture system that manages the plurality of logical tiers A C for enterprise application A. To this extent architecture system can identify each of the logical tiers A C for enterprise application A. In one embodiment architecture system generates an interface that enables user to identify logical tiers A C. Alternatively architecture system can comprise a set of default logical tiers A C that user can subsequently alter by adding and or removing one or more logical tiers A C.

In any event each logical tier A C will comprise a unique set of one or more components . To this extent architecture system can further manage the various components for enterprise application A. In particular architecture system can enable user to add remove one or more components for enterprise application A. Each component can comprise any type of information technology item that is used in generating enterprise application A. For example a component can comprise a set one or more of web pages a database having one or more tables a project that comprises a set of source code files for an application written in any programming language etc. As a result each component may itself comprise a plurality of elements e.g. source code files tables or the like .

Regardless each component type will have a corresponding development tool associated therewith that manages development of each component having the corresponding component type. To this extent each development tool manages a set of editors that is used by user when developing e.g. creating modifying etc. a component having the corresponding component type. In particular each development tool can generate one or more editors that allow user to view and or modify a particular component and or one or more of its elements.

Additionally enterprise application view can comprise dependency data for one or more components . To this extent architecture system can obtain dependency data for one or more components and add the dependency data to the corresponding objects A D in enterprise application view . The dependency data can comprise for example a communications link between two components that represents one component receiving and or providing data from to another component .

User can use enterprise application view to navigate and or display information on one or more sets of related components and or elements of one or more components . To this extent enterprise application view can enable user to drill down to view additional details of a selected set of components and or drill out to view higher level components . In each case enterprise application view can include a set of connections between components from a start tier to an end tier that represent the flow and or processing of data between the corresponding components and or elements. For example enterprise application view can display a representation of the components and data flow for processing a particular transaction e.g. an electronic commerce purchase .

As previously mentioned workbench can enable the integration of enterprise application view with one or more development tools and their corresponding editors A B. To this extent enterprise IDE system can comprise an integration system that integrates each of the plurality of development tools with enterprise application view . For example shows an illustrative flow diagram between the various systems shown in . As shown in both architecture system and development tools A B can create delete and or modify components A B. Further integration system is shown enabling the integration of architecture system and enterprise application view and development tools A B and editors A B .

In one embodiment integration system manages a set one or more of interface layers A B that enable data on events received from enterprise application view to be forwarded to a corresponding development tool A B which in turn processes the event data for a corresponding editor A B. Similarly interface layers A B can receive events from editors A B and forward data on the events to architecture system which in turn processes the event data for enterprise application view . As shown integration system can manage a unique interface layer A B for each development tool A B. Alternatively a single interface layer A B could be used to integrate a plurality of development tools A B. In any event each interface layer A B comprises a set of helper and or synchronization classes that map one or more model objects used by development tool A B to manage the development of each component A B to the corresponding object A D in enterprise application view that represents the component A B. In one embodiment each interface layer A B utilizes various functions exposed in an application programming interface API for each development tool A B to implement the mapping.

Referring to user can perform various top down development functions in an integrated manner using workbench and architecture system integration system and development tools A B. For example user can use enterprise application view to request that a new component A B be added to enterprise application . In particular enterprise application view is shown including a component selection area that enables user to selectively add one or more components A B of a particular component type to a desired logical tier A C . In one embodiment user could select a component type in selection area and drag and drop an object A D representing the component type to a desired location in one of the display areas A C. In this case architecture system can receive a request to generate a new component A B that corresponds to the object A D in the logical tier A C that corresponds to the display area A C. In response architecture system can generate a blank or a default component A B of the corresponding component type to the appropriate logical tier A C for enterprise application . Architecture system can automatically obtain various data for the new component A B based on the component type e.g. an associated development tool A B and or obtain various data from user in a known manner e.g. a popup window that allows user to specify a name .

Similarly user can define dependency data for one or more components A B using enterprise application view . For example enterprise application view can comprise a dependency area that enables user to select a particular dependency and add it to enterprise application view . To this extent user could select to add a connection dependency A between objects A D by selecting the connection dependency in dependency area and connecting objects A D in any known manner. In response architecture system can add the dependency data for the components A B that correspond to objects A D. Subsequently architecture system can generate a popup window or the like to enable user to enter additional details of the new dependency e.g. sending receiving data or the like .

User can generate numerous additional top down development events using enterprise application view . For example user can select a particular object A D delete one or more objects A D and or connections A B move an object A D from one tier to another or the like. In response architecture system can take the appropriate action with respect to the underlying components A B and or enterprise application . Additionally architecture system can forward data about one or more of these events to integration system for further processing by an appropriate development tool A B.

For example user can generate a selection event for an object A D in enterprise application view by for example clicking on object A. In response architecture system can receive the selection event and determine a component A of enterprise application that corresponds to the selected object A. Data on the selection event and the corresponding component A can be forwarded to integration system . Based on the selection event and component A integration system can use interface layer A to inform a development tool A for the particular component A of the event and or request that the development tool A perform some action in response to the event.

Development tool A can perform various actions in response to an event generated in enterprise application view . For example when development tool A receives a selection event for a component A that is not currently being displayed edited development tool A may take no action. Alternatively development tool A could initiate an editor A and display data for the selected component A within the editor A. Further data displayed within an existing editor A can be modified based on the component A and the selection event. For example an object within the editor A that corresponds to the selected component can be highlighted. To this extent editor A is shown having a highlighted object A that corresponds to the same component A as the highlighted object A in enterprise application view . In this manner the operation of both enterprise application view and editors A B can be integrated.

Similarly various bottom up development functions can be implemented by development tool A B integration system and architecture system . For example user could request to create a new component A B using an editor A B. In particular user could request to create the component A that corresponds to object A using editor A. In response development tool B can generate the new component A and display object A in editor A. To this extent development tool A can automatically determine the appropriate logical tier A C within which the new component A should be placed. For example development tool A may only be used to edit components A within a particular logical tier A C the new component A may be added to a set of components A within a particular logical tier A C or the like. Alternatively user could specify the appropriate logical tier A C for the new component A.

Regardless using interface layer A B integration system can detect the creation event and forward data on the event and the corresponding component A to architecture system . In response architecture system can automatically add an object A for the new component A to the appropriate display area A. In another embodiment rather than automatically adding object A to enterprise application view user could drag and drop object A from editor A to a desired display area A C within enterprise application view . In response to the drag and drop request integration system can use interface layer A to obtain the component A that corresponds to object A and architecture system can generate an appropriate object A in response to the request.

Additionally integration system can use interface layers A B to monitor various other types of events that occur within editors A B and forward data about the events to architecture system for further processing. For example user could select object A in editor A. This selection event could be detected by interface layer A and integration system can forward the event and the corresponding component A to architecture system for further processing. In response architecture system could highlight the object A in enterprise application view that corresponds to the selected component A.

As a result workbench enterprise application view and editors A B enable a set of users to develop the various components A B for enterprise application in a top down bottom up and or iterative manner. It is understood however that the various functions described herein are only illustrative of the numerous functions that can be implemented using the invention. For example user can request a reference check for a particular component to determine the location of its definition and or locations that reference the component. Further one or more attributes of an object displayed in workbench could be altered based on its development status e.g. defined but not created . Still further an interdependency analyzer can be implemented to determine the dependencies of one or more components a preview of data transformation and mapping can be generated a test environment for validation and or verification against a runtime can be implemented and or the like.

Returning to once the development of components has completed user can generate a deployment request e.g. using workbench of or the like that is received by deployment system . In response deployment system can generate enterprise application based on components . In particular for each component that has been modified since a previous deployment deployment system can generate the program code based on the current version of the component . Subsequently deployment system can deploy enterprise application . To this extent deployment system can maintain the location s and other deployment information for each component and once generated the program code can be provided for installation at the correct location s .

Further when user determines that a deployment was performed in error user can generate a rollback request for the deployment to be rolled back. After receiving the rollback request deployment system can roll back the deployed enterprise application in response. In particular deployment system can remove the updated program code and or other deployment information that was previously provided during the deployment. To this extent deployment system can maintain the program code and other information for one or more previous versions of the deployed enterprise application so that the previous deployment of enterprise application can be reinstated as part of rolling back the deployed enterprise application .

While shown and described herein as a method system and IDE for managing development of an enterprise application it is understood that the invention further provides various alternative embodiments. For example in one embodiment the invention provides a computer readable medium that includes computer program code to enable a computer infrastructure to manage development of an enterprise application. To this extent the computer readable medium includes program code such as enterprise IDE system that implements each of the various process steps of the invention. It is understood that the term computer readable medium comprises one or more of any type of physical embodiment of the program code. In particular the computer readable medium can comprise program code embodied on one or more portable storage articles of manufacture e.g. a compact disc a magnetic disk a tape etc. on one or more data storage portions of a computing device such as memory A and or storage system B e.g. a fixed disk a read only memory a random access memory a cache memory etc. and or as a data signal traveling over a network e.g. during a wired wireless electronic distribution of the program code .

In another embodiment the invention provides a business method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as an Internet Service Provider could offer to manage development of an enterprise application as described above. In this case the service provider can create maintain support etc. a computer infrastructure such as computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising space to one or more third parties.

In still another embodiment the invention provides a method of generating a system for managing development of an enterprise application. In this case a computer infrastructure such as computer infrastructure can be obtained e.g. created maintained having made available to etc. and one or more systems for performing the process steps of the invention can be obtained e.g. created purchased used modified etc. and deployed to the computer infrastructure. To this extent the deployment of each system can comprise one or more of 1 installing program code on a computing device such as computing device from a computer readable medium 2 adding one or more computing devices to the computer infrastructure and 3 incorporating and or modifying one or more existing systems of the computer infrastructure to enable the computer infrastructure to perform the process steps of the invention.

As used herein it is understood that the terms program code and computer program code are synonymous and mean any expression in any language code or notation of a set of instructions intended to cause a computing device having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form and or c decompression. To this extent program code can be embodied as one or more types of program products such as an application software program component software a library of functions an operating system a basic I O system driver for a particular computing and or I O device and the like.

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of the invention as defined by the accompanying claims.

