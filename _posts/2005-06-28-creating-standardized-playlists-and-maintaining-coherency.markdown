---

title: Creating standardized playlists and maintaining coherency
abstract: Updating automatically generated playlists in response to media content being edited. Aspects of the invention associate a playlist type or other code with each playlist to define the structure of the playlist. When media content is added to or deleted from a collection of media files, one or more playlist types corresponding to the media content are identified. The playlists with the identified playlist types are updated to reflect the addition or deletion of the media content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707231&OS=07707231&RS=07707231
owner: Panasonic Corporation
number: 07707231
owner_city: Osaka
owner_country: JP
publication_date: 20050628
---
This application is a continuation in part of co pending U.S. patent application Ser. No. 10 273 415 filed Oct. 17 2002 entitled Navigating Media Content via Groups within a Playlist hereby incorporated by reference which claims the benefit of U.S. Provisional Patent Application Ser. No. 60 418 973 filed Oct. 16 2002 entitled COMPRESSED MEDIA FORMAT SPECIFICATION now abandoned.

Due to recent advances in technology computer users are now able to enjoy many features that provide an improved user experience such as playing various media and multimedia content on their personal or laptop computers. For example most computers today are able to play compact discs CDs so users can listen to their favorite musical artists while working on their computers. Many computers are also equipped with digital versatile disc DVD drives enabling users to watch movies.

In some multimedia environments a computer has access to a computer readable medium storing compressed media files such as Moving Picture Experts Group audio layer 3 MP3 files and WINDOWS MEDIA technologies audio WMA files. When the media files are rendered on a computer the computer typically has access to a database storing metadata describing albums artists genres years or the like for the media files. The computer typically organizes the media files into playlists based on the metadata when the compressed media files are played on the computer. For example in the case of audio media files the files may be organized by album artist genre year or some user specified selection and ordering. This allows users to easily have access to all of their content regardless of whether or not the users manually created a playlist.

However when compressed media files are transferred from the computer to an optical format such as CD or DVD for playback on a portable CD player DVD player or other consumer electronic devices having a low power processor limited memory and often limited display and user input capabilities the media files traditionally lose much of the functionality offered by metadata databases hosted on devices with greater computing power. For example while a first device may be able to render a playlist authored by a second device the first device may not be able to identify the type of the playlist. In one example the first device may generically identify as Playlist 1 an All Songs by Genre playlist created by the second device possibly due to an inability by the first device to interpret the headers of the playlist generated by the second device. Some existing systems lack a mechanism for interpreting the intent of a playlist and identifying playlists to all playback devices.

Some existing systems also lack a mechanism for marking or identifying outdated playlists. For example a user may add or delete content but a playback device with limited processing and or memory capability may not be able to update any of the playlists or identify an outdated playlist to another device.

Accordingly a system for creating standardized playlists and maintaining coherency on multiple authoring devices is desired to address one or more of these and other disadvantages.

Embodiments of the invention provide a way for automatically generated playlists to be kept consistent when a device changes media content stored thereon through edits e.g. additions or deletions . In an embodiment the invention extends rich playlist functionality by tagging each playlist with a code which defines the structure of the playlist and enables a device or software to identify the playlists needing to be updated when new content is added or deleted. If a device is processor constrained to such an extent that it cannot update a playlist the device sets an inconsistency flag or the like which indicates to other devices and software that the media content has changed. The next time the media content is operated on by a device or software with authoring capability the playlists are reauthored rebuilt or otherwise updated. Aspects of the invention provide a consistent user experience throughout a media environment.

Referring first to a block diagram illustrates an exemplary media environment in which the invention may be implemented. A system has one or more computers coupled to one or more consumer electronic devices providing media content including audio data video data and or still image data. For example the devices may include a compact disc CD player a camcorder or a camera . Additionally the devices may include other personal computers removable hard drives network shares a Moving Picture Experts Group audio layer 3 MP3 player an audio system in an automobile a personal digital assistant a cellular telephone or the like. The consumer electronic devices may include any suitable rendering filter or media player or device e.g. a portable media device that is configured to render digital media so that the user can experience the content that is embodied on the consumer electronic device . For example suitable media player applications include a compact disc CD media player and a digital versatile disc or digital video disc DVD media player. The computer also has rendering capability including a processor and rendering software e.g. a media player .

A media environment typically has playlists generated from a plurality of media files stored on a computer readable medium. When dealing with large quantities of media files and or devices that can add and delete media files from the computer readable medium there is a need to keep generated playlists up to date to provide the user with a consistent experience. In an embodiment the invention associates a code with each playlist to identify the structure of the playlist. In particular the invention tags each playlist with a Playlist Type field an inconsistency flag or other code which enables the authoring software or device to know which playlists to update when media content is added or deleted.

The consumer electronic devices or computer may have access to one or more computer readable media e.g. memory area . While the memory area is illustrated to be part of any of the consumer electronic devices in the memory area may be separate from the consumer electronic devices yet accessible to the consumer electronic devices for example via a network. In one embodiment memory area includes one or more computer readable media for storing a plurality of media files and a plurality of data structures . Each of the plurality of data structures represents a playlist. Each of the data structures stores a list of media files representing the playlist. The list of media files is selected from the plurality of media files . Each of the data structures has a playlist type field storing a value identifying the playlist as a user created playlist or an automatically generated playlist. Each of the data structures further has an inconsistency field storing a value indicating whether the playlist is out of date with respect to the plurality of media files .

One aspect of the present invention enables the user or particularly enables a media player program executing on computing device to access retrieve and display for the user so called metadata. Those skilled in the art are familiar with metadata which is simply information about data. In the context of the illustrated embodiment metadata includes information related to specific content of a digital media file being played on the media player. Basic metadata includes but is not limited to title performer genre track number and the like. Extended metadata includes but is not limited to cover art composer description of content performer biographies reviews ratings related performers where to buy similar items upcoming concerts ticket sales URLs to other related experiences including purchase opportunities studio director and the like. In one embodiment extended metadata may be organized into two main categories metadata retrieved or downloaded and metadata computed from the media file e.g. digital signal processing of the file stream . The metadata may be stored within the media file or stored in another file accessible and known to the media file.

In one embodiment the consumer electronic devices e.g. a portable media device are configured to execute computer executable instructions for identifying a content edit. The content edit indicates media content to be added to or deleted from a plurality of media files stored on an accessible computer readable medium such as memory area . The media content has metadata associated therewith. The consumer electronic devices are further configured to determine as a function of the metadata one or more of the data structures affected by the identified content edit. The consumer electronic devices are further configured to set the value in the inconsistency field for each of the determined data structures .

The computer or other device or software with playlist authoring capability also has one or more exemplary modules or components for implementing aspects of the invention. For example the computer may have an interface component a table component and an author component . The interface component identifies a content edit. The content edit indicates the media content to be added to or deleted from the plurality of media files . The media content has metadata associated therewith. The table component determines as a function of the metadata one or more of the playlists affected by the content edit identified by the interface component . In one embodiment the table component determines the one or more playlists by identifying playlists having a predefined playlist type. For example if the metadata associated with the media content indicates that the media content is a song then the playlists affected by the media content include those automatically generated playlists containing songs e.g. fall songs by artist all songs by album etc. . In another example if the metadata associated with the media content indicates that the media content is an image file then the playlists affected by the media content include those automatically generated playlists containing image files.

The author component updates the playlists determined by the table component per the received content edit. The table component and the author component execute automatically in response to execution of the interface component . In an embodiment in which the content edit identified by the interface component indicates that the media content is to be added to the computer readable medium the author component updates the playlists determined by the table component by reauthoring the playlists identified by the table component with the media content. In an embodiment in which each of the playlists has an inconsistency flag associated therewith the author component updates each of the playlists having an inconsistency flag that is set.

Those skilled in the art will note that the invention software may be implemented with any number and organization of components or modules. That is the invention is not limited to the specific configuration of the interface component the table component and the author component but may include more or less components having more or less individual functionality than described herein. Further the invention may be embodied in hardware software or a combination thereof in a media player operating system DVD recorder CD recorder video camera hard drive flash drive personal digital assistant wireless device e.g. cellular telephone or the like.

In one example additional metadata is available from the metadata provider via a data communication network . The computer and metadata provider are coupled to the data communication network . While the network includes the Internet in one example the teachings of the invention may be applied to any data communication network. Data communication network may support for example client server communications or peer to peer connections.

Referring next to an exemplary flow chart illustrates operation of an embodiment of the invention in a media environment having playlists. The playlists are automatically generated from a plurality of media files stored on a computer readable medium. The flow chart in illustrates a method for updating the playlists. The method includes identifying a content edit at . The content edit indicates media content to be added to or deleted from the plurality of media files. The media content has metadata associated therewith. The method also includes determining as a function of the metadata one or more of the playlists affected by the identified content edit at . In one embodiment determining the one or more playlists includes identifying playlists having a predefined playlist type corresponding to the metadata. The method further includes updating the determined playlists per the received content edit at . The determining and updating occur automatically in response to identifying the content edit.

If the identified content edit indicates that the media content is to be added to the computer readable medium the method updates the determined playlists by reauthoring the determined playlists with the media content. If the identified content edit indicates that the media content is to be deleted from the computer readable medium the method updates the determined playlists by reauthoring the determined playlists without the media content.

In one example the playlist type may include a 7 or 8 bit value representing an integer. An exemplary list of playlist types is shown below in Table 1. The playlist type definitions shown in Table 1 are only exemplary. Users manufacturers and the like may define other playlist types.

When a device according to the invention adds a new media file the device adds the new media file to all of the relevant playlists. For example if the media file is a song then all playlists of types 1 6 are updated. If the media file is an image then the playlists of type 7 are updated. If the device does not have sufficient resources e.g. computing power or memory to update the relevant playlists then the device sets an inconsistency flag for each of the relevant playlists. The inconsistency flag is used by authoring devices or software to know whether a playlist is out of date. For example an inconsistency flag that is set e.g. set to one or true indicates that a data set e.g. the media files has changed but that changes to the playlists have not been performed. A set inconsistency flag triggers an authoring device or software to rebuild re author or recreate the particular playlist with the set inconsistency flag. Similarly an inconsistency flag that is not set e.g. set to zero or false indicates that the playlist is up to date with any changes that may have occurred to the data set.

The inconsistency flag may be any code or indicator conveying a state of a playlist. In other embodiments for example the code may be a consistency flag which is set to indicate that the playlist is up to date and not set when the playlist has been determined to be out of date. The code may be represented by a single bit value an eight bit value or any number of bits.

In one example a rendering device or software determines a status of a playlist being rendered and conveys that information to a user. For example the rendering device determines whether or not the inconsistency flag has been set. If the rendering device lacks sufficient resources to update a playlist that has a set inconsistency flag the device informs the user of the out of date status of the playlist. For example the device may shade the playlist name gray to identify to the user that the playlist is outdated.

The playlist types may also be used when creating new playlists. For example a method according to the invention for creating automatically generated playlists includes automatically selecting one or more of a plurality of media files as a function of an item of metadata. For example the metadata may indicate whether the media content includes audio content video content or image content. The method further includes creating a playlist with the selected media content. The created playlist includes a playlist header. The method further determines a playlist type to be associated with the created playlist wherein the determined playlist type corresponds to the item of the metadata. The method adds the determined playlist type to the playlist header.

For user created playlists a method of the invention includes receiving a list of user selected content. The method further includes creating a playlist with the received list of user selected content and adding a particular playlist type to the created playlist. The particular playlist type identifies the playlist as being user created.

One aspect of the invention not shown in includes rendering the media content from one of the playlists determining a string name associated with said one of the updated playlists as a function of the predefined playlist type and displaying the determined string name to a user.

One or more computer readable media have computer executable instructions for performing the method illustrated in .

Referring next to an exemplary flow chart illustrates adding a song to a computer readable medium e.g. a disc in one embodiment. At a song is to be added to the disc by a device. If the device is not capable of updating playlists at the inconsistency flag is set on affected playlists e.g. all songs by album artist and genre at and the process finishes at . If the device is capable of updating playlists at the song is added to the playlists at . If the device is capable of fixing e.g. identifying and updating inconsistent playlists at the inconsistent playlists are fixed e.g. identified and updated at and the process in this embodiment finishes at . If the device is not capable of fixing inconsistent playlists at the process in this embodiment finishes at .

In an embodiment of the invention a playlist file table stores information about the playlists e.g. playlist files on a device or computer readable medium. The playlist file table includes a list of playlist file entries each corresponding to a playlist file. An exemplary format for each playlist file entry is shown below in Table 2.

The playlist identifier is a 4 byte value that is a unique identifier that corresponds to this playlist. The playlist summary type is a 1 byte value summarizing the types of all the individual media files or playlist groups contained within the playlist. In one embodiment the summary type is created by a logical OR of the values shown below in Table 3. The playlist summary type allows a particular device or software to filter the list of playlists to show only the playlists that can be rendered by the particular device or software.

Exemplary values for the image flag video flag and audio flag in Table 3 are shown below in Table 4 Table 5 and Table 6 respectively.

The playlist type is a 1 byte entry used to identify a playlist that should be updated or replaced by authoring software or devices when new media files are added to a computer readable medium or old media files are removed from the computer readable medium. When authoring software or recording devices do not update the playlist or all or part of any grouped playlists the inconsistency flag is set to one. The inconsistency flag is set to zero if the playlist type is a user playlist.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in the figures to update an automatically generated playlist in response to a content edit indicating media content to be added to or deleted from a collection of media files. Computer executable instructions e.g. as software hardware or both a file system driver input output driver and an electronic device constitute exemplary means for identifying the content edit and exemplary means for determining the data structures e.g. playlists affected by the identified content edit.

In the examples described herein the media content of the digital media file is described in the context of content embodied on a CD or a DVD. It is to be appreciated and understood that the media content may be embodied on any suitable media and that the specific examples described herein are given to further understanding of the inventive principles. For convenience a digital media file refers to one or more files representing for example a single song track or a collection of tracks such as would be found on an audio CD. The media content may include without limitation specially encoded media content e.g. audio video or still images in the form of an encoded media file.

The exemplary media file operations illustrated in the drawings and described herein are merely exemplary. Other variations of these file operations are within the scope of the invention. Alternatively or in addition other media file operations not described herein yet embodying the invention are also within the scope of the invention.

The order of execution or performance of the methods illustrated and described herein is not essential unless otherwise specified. That is elements of the methods may be performed in any order unless otherwise specified and that the methods may include more or less elements than those disclosed herein. For example it is contemplated that executing or performing a particular element before contemporaneously with or after another element is within the scope of the invention.

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

In view of the above it will be seen that the several objects of the invention are achieved and other advantageous results attained.

As various changes could be made in the above constructions products and methods without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

