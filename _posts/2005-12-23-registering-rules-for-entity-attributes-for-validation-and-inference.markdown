---

title: Registering rules for entity attributes for validation and inference
abstract: The present invention provides a method and system for registering rules for attributes of an entity with an entity validation and inference unit. The entity validation and inference unit can further validate input values for an entity and/or infer attributes of an entity using the associated registered rules. The entity validation and inference unit can also provide information regarding attributes, relations, and behaviors of an entity using the associated registered rules in response to a query. The present invention also provides a mechanism for a user to query an entity or the entity validation and inference unit regarding valid values for an entity. The mechanism also allows the user to query the registered rule associated with the entity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07472103&OS=07472103&RS=07472103
owner: The MathWorks, Inc.
number: 07472103
owner_city: Natick
owner_country: US
publication_date: 20051223
---
The present invention relates to registering rules for attributes of an entity for validation and inference in a block diagram modeling application.

Generally graphical analysis simulation and execution methods are used in modeling design analysis and synthesis of engineered systems. These methods provide a visual representation of a model such as a block diagram. The visual representation provides a convenient interpretation of model components and structure. The visual representation also provides a quick intuitive notion of system behavior. The components of a block diagram also can capture the mathematical representation of the actual system being modeled.

Various classes of block diagrams describe computations that can be performed on application specific or general purpose computational hardware such as a computer microcontroller field programming gate array FPGA and custom hardware. Classes of such block diagrams include time based block diagrams such as those found within Simulink from the MathWorks Inc. of Natick Mass. state based and flow diagrams such as those found within Stateflow from the MathWorks Inc. of Natick Mass. entity flow network diagrams such as those found within SimEvents from the MathWorks Inc. of Natick Mass. and data flow diagrams. A common characteristic among these various forms of block diagrams is that they define semantics on how to execute the diagram.

Block diagram modeling has spawned a variety of software products that cater to various aspects of dynamic system analysis and design. Such products allow users to perform various types of tasks including constructing system models through a user interface that allows drafting block diagram models allowing augmentation of a pre defined set of blocks with users custom built blocks the use of the block diagram model to compute and trace the temporal evolution of the dynamic system s outputs executing the block diagram and automatically producing either deployable software systems or descriptions of hardware systems that mimic the behavior of either the entire model or portions of it.

Currently in Simulink each block is responsible for validating entities within the block hence each block needs to maintain its own entity checking code. As a result for custom built blocks such as S Function blocks a user needs to write an entity checking code for each of the custom built blocks. Although this provides the user with the flexibility of how one wants to validate block entities it is sometimes cumbersome and error prone due to unnecessary duplicate efforts or insufficient tests.

Additionally each block is responsible for inferring block entity attributes hence each block needs to maintain its own entity inference code. As a result for custom built blocks such as S Function blocks a user needs to write an entity inference code for each of the custom built blocks. Although this provides the user with the flexibility of how one wants to infer block entity attributes it is sometimes cumbersome and error prone due to unnecessary duplicate efforts or insufficient tests.

The present invention provides a method and system for registering rules for attributes of an entity with an entity validation and inference unit where the attributes of an entity also include behavior of the entity and relations of the entity with respect to one or more other entities. An entity is any aspect of a model that has at least a property that can have a valuation. An entity attribute is a property of a valid value for the corresponding entity. The entity validation and inference unit can further validate input values for an entity using the associated registered entity attributes rules. The entity validation and inference unit can further match the settings of an entity with the condition parts of the registered rules and execute the action parts of those registered rules whose conditions are satisfied. The entity validation and inference unit can also provide information regarding the registered rules in response to a query. The present invention may maintain the flexibility of custom built blocks and relieves a user the burden to write code to validate and or infer values for block entities. The present invention may also provide a mechanism for a user to query the entity validation and inference unit regarding valid values for an entity or a rule associated with the entity.

In one embodiment of the present invention a method for registering rules for attributes of an entity with a block diagram modeling application in a computing device is provided. The method includes the steps of providing a block diagram modeling application and providing a first entity to use in the block diagram modeling application. The method also includes the step of receiving input defining one or more rules for attributes of the first entity the one or more rules relating to one or more attributes for the first entity. The method further includes the step of registering the one or more rules with an entity validation and inference unit.

In one aspect of the present invention the first entity is a parameter associated with a block or a signal. The block can further be a user defined block. The entity validation and inference unit may be part of the block diagram modeling application. In another aspect of the present invention the method further includes the steps of receiving input specifying a value for the first entity and validating the value by the entity validation and inference unit using the registered one or more rules. In another aspect of the present invention the method further includes the step of inferring a value for the first entity by the entity validation and inference unit using the registered one or more rules. In a further aspect of the present invention the method further includes the step of generating an entity validation or inference code by the entity validation and inference unit using the registered one or more rules. In yet another aspect of the present invention the method further includes the steps of providing an error message indicating the received input is an invalid value for the first entity and displaying the registered one or more registered rules to suggest how to correct the invalid value. In yet another aspect of the present invention the method further includes the steps of providing an error message if an error is encountered when a chain of one or more registered rules are executed by the entity validation and inference unit indicating how the chain of one or more registered rules leads to the error given a current setting of the first entity and displaying the chain of one or more registered rules to show how to correct the error. In still another aspect of the present invention the one or more attributes include at least one of an entity attribute an entity type data type complexity dimension allowable range monotonicity sign and numericness. In yet another aspect of the present invention the one or more attributes include a relation with respect to a second entity. In still another aspect of the present invention the one or more registered rules include a relation between attributes of the first entity. In yet another aspect of the present invention the one or more registered rules include a behavior of the first entity. In yet a further aspect of the present invention the method further includes the steps of querying the entity validation and inference unit regarding the first entity and in response to the query returning by the entity validation and inference unit the registered one or more rules associated with the first entity.

In another aspect of the present invention a computing device includes a storage medium for storing instructions for performing a method for registering rules for attributes of an entity with a block diagram modeling application is provided. The method includes the steps of providing a block diagram modeling application and providing a first entity to use in the block diagram modeling application. The method also includes the step of receiving input defining one or more rules of the first entity the one or more rules describing one or more attributes for the first entity. The method further includes the step of registering the one or more rules with an entity validation and inference unit.

In yet another embodiment of the present invention a system for registering rules for attributes of an entity with a block diagram modeling application is provided. The system includes a block diagram modeling application providing a first block and an entity validation and inference unit in communication with the block diagram modeling application to register one or more rules for a first entity associated with the first block and capable of validating an input value for the first entity using the registered one or more rules. The entity validation and inference unit may also infer attributes relations and behaviors of the first entity using the registered one or more rules.

In one aspect of the present invention the entity validation and inference unit includes an entity validation and inference code generator that generates code to validate and or infer the input value using the registered one or more rules. In another aspect of the present invention the block diagram modeling application includes a query mechanism to query the entity validation and inference unit regarding valid values for the first entity. In yet another aspect of the present invention the block diagram modeling application includes a query mechanism to query the entity validation and inference unit regarding attributes relations and behaviors of the first entity. In still another aspect of the present invention the entity validation and inference unit is a part of the block diagram modeling application.

In still another embodiment of the present invention a method for registering rules for the attributes relations or behaviors of a first entity in a modeling application is provided. The method includes the step of receiving input defining one or more rules associated with the first entity the one or more rules describing attributes relations and behaviors of the first entity. The method also includes the step of registering at least one of a compile time rule and a run time rule for the first entity.

In one aspect of the present invention the compile time rule is used to validate or infer an attribute of the first entity at compile time whereas the run time rule is used to validate or infer an attribute of the first entity at run time. The compile time rule can describe different valid values different relations or different behaviors for the first entity comparing to the run time rule. In another aspect of the present invention the first entity is a parameter of a signal in a block diagram model.

In yet another embodiment of the present invention a computing device including a block diagram modeling application and a storage medium storing instructions for performing a method for registering rules for attributes of a first entity in the modeling application is provided. The method includes the step of receiving input defining one or more rules describing attributes relations and behaviors for the first entity. The method also includes the step of registering at least one of a compile time rule and a run time rule for attributes of the first entity.

In still another embodiment of the present invention a method for registering rules associated with an entity within a block diagram modeling application is provided. The method includes the step of providing a block diagram modeling application. The method may also include the step of receiving input defining a first rule wherein the first rule is an inference rule comprising a condition and an action. The method may also include the step of receiving input defining a first rule for the attributes of an entity wherein the first rule includes prepositional logic a first order logic events and temporal constraints a probability associated rule fuzzy logic or a combination thereof. The method further includes the step of registering the first rule with an entity validation and inference unit.

In one aspect of the present invention the method further includes the step of applying the first rule by the entity validation and inference unit to propagate and validate compilation information. The method can also include the step of applying the first rule by the entity validation and inference unit during code generation of a model. The method may also include the step of applying the first rule by the entity validation and inference unit in an intermediate representation of a model. In another aspect of the present invention the method further includes the step of checking the first rule against one or more existing rules for conflict. Each rule may be assigned a priority.

In yet another embodiment of the present invention a method for registering rules for behaviors of a graphical dialog associated with a block diagram modeling application is provided. The method includes the steps of providing a block diagram modeling application and a dialog to use in the block diagram modeling application. The method also includes the step of providing a first entity associated with the dialog. The method further includes the step of receiving input defining a rule on how the dialog behaves regarding a plurality of attributes associated with the first entity. The method also includes the step of registering the rule with an entity validation and inference unit.

In yet another embodiment of the present invention a method for registering rules for behaviors of a dynamic dialog associated with a block diagram modeling application is provided. The method includes the steps of providing a block diagram modeling application and a first entity to use in the block diagram modeling application. The method also includes the step of providing a dynamic dialog to use with the first entity. The method further includes the step of receiving input defining a rule on how the dynamic dialog behaves regarding a plurality of attributes associated with the first entity. The method also includes the step of registering the rule with an entity validation and inference unit.

In still another embodiment of the present invention a computing device including a block diagram modeling application and a storage medium storing instructions for performing a method for registering rules associated with an entity that is provided to use in the block diagram modeling application is provided. The method includes the step of receiving input defining a first rule wherein the first rule comprises a condition and an action. The method also includes the step of registering the first rule with an entity validation and inference unit.

In a further embodiment of the present invention a storage medium storing instructions for causing a computing device to register rules for behaviors of a graphical dialog associated with an entity that is provided to use in the block diagram is provided. The instructions include the instruction for receiving input defining a rule on how the dialog behaves regarding a plurality of attributes associated with the entity. The instructions also include instruction for registering the rule with an entity validation and inference unit.

In a further embodiment of the present invention a computing device including a block diagram modeling application and a storage medium storing instructions for performing a method for registering rules for behaviors of a dynamic dialog associated with an entity that is provided to use in the block diagram modeling application is provided. The method includes the step of receiving input defining a rule on how the dynamic dialog behaves regarding a plurality of attributes associated with the entity. The method also includes the step of registering the rule with an entity validation and inference unit.

The illustrative embodiments are described for illustrative purposes relative to a block diagram modeling application such as Simulink from The MathWorks Inc. of Natick Mass. Nevertheless those skilled in the art will appreciate that the principles and concepts described below are equally applicable to other graphical modeling applications such as Rhapsody from I Logix Inc. TargetLink and Real Time Interface from dSPACE GmbH RT LAB from Opal RT Technologies Inc. EXITE from EXTESSY AG LabVIEW MATRIXx from National Instruments Inc. SystemVue from Eagleware Elanix Corporation Mathematica from Wolfram Research Inc. Mathcad of Mathsoft Engineering Education Inc. COSSAP from Synopsys Inc. HyperSignal from Hyperception Inc. Dymola from Dynasim AB or Maple from Maplesoft a division of Waterloo Maple Inc. Furthermore one ordinarily skilled in the art will appreciate that the present invention may apply to any graphical modeling environment such as one providing modeling with a Unified Modeling Language UML Hardware Description Language HDL or that provides a physics modeling domain. Furthermore those skilled in the art will also appreciate that the principles and concepts are equally applicable to non graphical modeling applications as well.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the MacOS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein.

An entity is any aspect of a model that has at least a property that can have a valuation. In a graphical model an entity can be but not limited to a model a subsystem a block a model reference block a signal a bus signal a struct signal a parameter a block parameter a model option a subsystem option a block option a block display option a signal display option an optimization setting a graphical dialog a dynamic dialog and a relative tolerance of a numerical solver. For each entity there are associated attribute s relation s with other entities and behavior s . An entity attribute is a property of a valid value for an entity. The entity attribute also describes a type of valid values that the entity can accept as inputs. An entity relation describes a relationship of one entity to one or more other entities. Specifically the relationship can be one that describes a rule how an attribute of one entity is affected by one or more attributes of one or more other entities. For example how the data type of a block output is derived from the data type of the block input. A behavior of an entity can describe how the entity appearance and or associated attribute options change in view of one or more events such as an entity or associated attribute being visible or invisible in a dynamic dialog discussed later change in color to indicate an execution state of the entity the option of a zero crossing detection being enabled or disabled.

Still referring to application can include an query mechanism that queries entity validation and inference unit regarding information about what are valid values for a particular entity of a specific entity in a model. Alternatively the query mechanism can query an entity in the model what are valid values for a particular entity. The query mechanism can also be used to query about any rules specified for any attribute relation and behavior of an entity. An application programming interface API can be used to query entities rules entity relations and entity attributes.

A rule is defined herein as a way to represent knowledge. It can capture a fact about an entity a relationship between entities or a behavior of an entity. It can be an inference rule that includes both a condition and an action where the condition is a predicate that needs to be satisfied and the action is taken when the condition is met. A rule hence can be represented using an IF THEN clause. A rule can also be represented using prepositional logic a first order logic events and temporal constraints a probability associated rule or fuzzy logic. In one aspect of the present invention the evaluation and execution of the rules can be dependent upon certain model processing operations. For example a rule may only be evaluated and or executed when the model is being loaded into the memory. Other processing operations include but are not limited to displaying the model in a graphical user interface editing the graphical model compiling the graphical model executing the graphical model running analysis or advisor tools for the model generating and displaying diagnostic message for the model running debugger on the model and generating an intermediate representation IR or code for software or hardware applications from the model.

In one embodiment of the present invention the knowledge based rule system includes a rule base a rule interpreter parsing the rule base and a rule inference engine executing the rules. Query mechanism can provide means to query the entity validation and inference unit or knowledge based rule system regarding any rule associated with an entity. The knowledge based rule system can support different forms of rules including but not limited to IF THEN rules propositional logic first order logic events and temporal constraints probability associated with rules fuzzy logic. Diagnostic messages can be optionally generated based on the chain of executed rules to assist in diagnosing an undesired result yielded by the inference engine. Knowledge based rule system can further include or use an analysis tool that is used to validate rules detect conflicts between rules and resolve conflicts.

Hence given that a user set parameter A to be visible Rule 1 requires that parameter B to be invisible. However Rule 2 requires parameter A to be invisible when parameter B is invisible. When Rule 3 is considered parameter B is set to visible. Lastly Rule 4 makes parameter A visible because parameter B is visible. Hence these rules resulted in an undesired infinite loop of setting parameter A and B visible and invisible. Additionally if there are only Rule 1 and Rule 2 the user input of making parameter A visible will always be ignored which can also cause undesired results.

In addition to the undesired infinite loop other examples of conflicts can include conflicting of rules such as conditions of two rules are satisfied but one rule would set parameter A to be visible whereas the other rule would set parameter A to be invisible and incomplete rules such as a data type rule may not specify how one particular input port data type is to be inferred and resulted in that the output port data type cannot be inferred from the input port data type.

When there is a conflict a resolution can be automatically applied by the knowledge based rule system . For example a rule can be removed to resolve a conflict a default rule can be applied in case of an incomplete rule a stop criterion can be provided in case of infinite loop and rule application can be halted to let a user to resolve the conflict.

One of ordinary skill in the art will appreciate that the functions performed by the knowledge based rule system entity validation and inference unit entity validation and inference code generator query mechanism can be performed by one or more software modules. Hence the present invention is not limited to a specific module performing a specific task.

In one embodiment of the present invention block parameters can be validated by registering attributes rules with the entity validation and inference unit . Block and block can be created by application for use in a block diagram model. Block and block can be built from a pre defined block provided with application or a custom built block. Each of blocks and can have one or more parameters. In one preferred embodiment of the present invention each block registers its parameters and associated attribute rules with entity validation and inference unit . In one embodiment of the present invention a graphical user interface such as the one shown in can be used to register a parameter and the associated rules of parameter attributes for a block. One of ordinary skill in the art will appreciate that a similar graphical user interface can also be used to register rules associated with attributes of other entities in a block or a model and the present invention is not limited to the registration of rules for parameter attributes of blocks.

In another aspect of the present invention a function is invoked to perform registration of rules associated with entity attributes. For example one or more property value pairs may be used as arguments to a function to register entity attribute rules with entity validation and inference unit such as

where a field and a value form a property value pair. A field can be but not limited to any entity attribute and any field listed in the parameter attribute column in and a value can be but not limited to any possible entity attribute value and any value listed in the registered parameter attribute value column in .

Still referring to type dependency attribute allows a user to choose if two or more parameters must have the same type homogeneous or if they can have different type heterogeneous . A parameter can also use a data type dependency attribute to specify that it should have the same homogeneous or different heterogeneous data type relative to another parameter. A complexity dependency attribute can be used to indicate if two or more parameters should have the same homogeneous or different heterogeneous complexity attribute. A dimension dependency attribute can be used to denote that if a parameter should have the same or different dimension when comparing to another parameter. A sign dependency attribute can also be used to indicate if a parameter should have the same or different sign with another parameter. A parameter can also have a numericness parameter dependency attribute to signify that it has the same or different numericness attribute with another parameter. One of ordinary skill in the art will appreciate that there are many other attributes one can specify to be the same or different between two or more parameters. Additionally a relation dependency attribute can be used to indicate a value relationship between two parameters. The relation dependency can require one parameter having a value that is greater smaller not greater or not smaller than a value of another parameter. Additionally the relation dependency attribute can also require one parameter to be equal or not equal to another parameter in value. The relation dependency can also be described with a more elaborate expression to define a constraint such as the value of one parameter should be two times the value of the other parameter plus three if the value of the other parameter is larger than zero. The parameter dependency attributes are used to describe a relationship between two or more parameters where the parameters are not necessarily used in the same block. One of ordinary skill in the art will appreciate that the list of possible parameter dependency attributes in is not exhaustive and the ones listed are merely used as illustrative examples for better understanding of the spirit and scope of the present invention. One of ordinary skill in the art will also appreciate that the list of possible parameter dependency attribute values in is not exhaustive and the ones listed are merely exemplary values.

Entity validation can occur at different stages as required by the user and or the model. A user can choose to validate an input value for an entity at the time the input value is given. A user can also choose to validate all input values for all entities together. Certain validation may be required by the model or the user to occur at compile time or run time. For example an entity can register its value rules for an input output signal and the entity validation and inference unit will validate and or infer the signal value at run time.

Referring back to using the example of registration of block parameter attribute rules blocks and register parameter attribute rules for each of their parameters A N and A N with entity validation and inference unit . Block and block can be built from the same pre defined block or custom built block. In other words block and block can be two different instances of the same block type. However the two instances do not need to have the same parameter attributes for their parameters. A user is free to modify a value of a parameter attribute rule for a parameter in block without modifying the value of the same parameter attribute rule for the corresponding parameter in block . A user can also add or delete a parameter attribute and the associated rules of a parameter for block without affecting any parameter attributes of the corresponding parameter for block . Furthermore a user can also add or delete a parameter from an instance of a block type without affecting other instances of the same block type. One of ordinary skill in the art will appreciate that a mechanism such as a check box can be provided in the parameter attribute window so that when the check box is checked all instances of a block type can be enforced to have all the same parameters with the same parameter attribute rules. Therefore a user can choose if instances of a block type need to have the same parameter and or same attribute rules.

Once blocks and have registered parameter attribute rules for each of their parameters A N and A N with entity validation and inference unit query mechanism can be used to query entity validation and inference unit what types of values are valid for a specific parameter. In response to the query entity validation and inference unit can return a message showing the associated registered parameter attributes and corresponding attribute rules of the specific parameter. One advantage of the present invention is that before assigning a value to a specific parameter a user can use the query mechanism to find out what types of values will be accepted by the specific parameter. Additionally the entity validation and inference unit can rely on entity validation and inference code generator to generate code to test if a specific input value is valid or not.

Entity validation and inference code generator can check if inputs to parameters A N and A N satisfy requirements set out by the values assigned to corresponding registered parameter attribute rules. The registered parameter attribute rules are used to ensure that inputs are valid before they are used in the calculation or simulation by application . Entity validation and inference code generator can generate validation code for each block and store the generated validation code separately in the corresponding block or collectively at a central location such as entity validation and inference unit application or storage . Alternatively entity validation and inference code generator can generate one validation code that is used to validate parameters of all blocks within a model or a project.

In one aspect of the present invention a user can use a user defined parameter in the model and provides a custom validation code for validating values for the user defined parameter. The entity validation and inference code generator can integrate the custom validation code into the generated validation code for a specific block or entity in the model so that each block or entity only has one validation code to validate all parameters associated with the block or entity.

In one embodiment of the present invention entity validation and inference code generator can use a pre defined validation code template for each entity in the block diagram model. The pre defined validation code template includes validation code fragments for each type of possible entity attributes and possible registered values. Once entities registered their attribute rules with entity validation and inference unit entity validation and inference code generator can plug in the registered values in the pre defined validation code template and generate a validation code for a specific entity. The entity validation and inference code generator can further optimize the generated validation code by not including any excessive code related to other types of possible entity attributes and or possible registered values that are not used in the specific entity. One of ordinary skill in the art will appreciate that many different optimization techniques can make the generated code more efficient. One of ordinary skill in the art will appreciate that there are many ways to generate validation code and many locations to store the generated validation code and the present invention is not limited to the examples discussed herein. One of ordinary skill in the art will also appreciate a pre defined validation code can be used to perform validation of entity attribute values and validation code does not need to be generated.

In a further aspect of the present invention entity validation and inference unit can include a knowledge based rule system that applies user specified rules for inference validation or other purposes. A knowledge based rule system represents knowledge in terms of a set of rules that tell entity validation and inference unit what it should do or what it could conclude in different situations. A knowledge based rule system consists of multiple IF THEN rules multiple facts and an interpreter controlling the application of the rules given the facts. An example of a knowledge based rule system is a rule based system sometimes also being referred as a production system.

One example of inference is attribute propagation. Attribute propagation can include but not limited to dimension propagation data type propagation fixed point data type propagation frame propagation complexity propagation sample time propagation. A user can register with entity validation and inference unit inference rules that should be applied within a block. The knowledge based rule system can store multiple inference rules that are applied by entity validation and inference unit . The inference rules can be used to propagate compilation information through blocks. The following example functions show how a user can register an inference rule related to dimension propagation for a block 

Using the above exemplary functions a user can specify a condition that an input port is scalar by calling

Hence the specified rule will set output port s dimension to a matrix when the input port is a scalar.

With the registered rules entity validation and inference unit compares the current condition of the entity with the conditions specified in the rules. If a rule s condition is matched then the corresponding action is executed. Entity validation and inference unit performs this comparison for every registered rule.

The knowledge based rule system can also apply the registered rules in the intermediate representation IR or during code generation of a block diagram model. The knowledge base rule system can be used to specify how attributes relationships and behaviors of an entity in an IR for simulation or code generation should be. This includes attribute propagations. In IR there can be multiple nodes. Each node like a block has inputs and outputs. The type data type and other properties of outputs is related to the type of the inputs. The present invention can use the knowledge based rule system to specify rules for the relationship between the inputs and outputs in the IR the same way as for blocks. One of ordinary skill in the art will appreciate that there are many different IRs that can be used with the present invention. An IR is usually a representation of a model or simulation of a model in the code generation process. There can be many different IRs used in the code generation process. For example in Simulink one or more IRs of a model can be generated during the Code Generation Intermediate Representation CGIR .

Each rule may include a condition section and an action section. Table I shows a few examples of inference rules related to I O signals.

The action will only be taken when the corresponding condition is satisfied. Each block can register with entity validation and inference unit how propagations should be done within the block. Entity validation and inference unit can validate the registered rules for conflict. A warning message or an error message can be displayed to show the conflicting registered rules. Priority numbers can be optionally assigned to each of the registered rules. When there is a conflict between two or more registered rules the registered rule with the highest priority is enforced. A warning message or an error message can be displayed to show which registered rules have conflicts and which registered rule is enforced. A graphical user interface or API can be provided by the entity validation and inference unit to register the propagation rules.

In another aspect of the present invention the knowledge based rule system can be used to specify how a dynamic dialog should behave. A dynamic dialog is a dialog that displays options depending on the received input. For example an item can be disabled grayed out or enabled invisible or visible based on the user s input. Hence the appearance of the dialog can change with the user input. These changes can be specified by the rules for the attributes of the dialog and dialog elements for the relationships between elements in the dialog and for the behaviors of the entities related to the elements. When a condition of a rule is satisfied the dynamic dialog performs the action specifies by the rule. The action section of the rule set out the manner that an entity or attribute should be displayed in the dynamic dialog box when a condition is satisfied. For example 

A graphical user interface can be employed to allow a user to specify rules for the dynamic dialog. On the other hand functions can be used to specify rules for the dynamic dialog. The following example functions show how functions can be used to specify rules for a dynamic dialog 

In a further aspect of the present invention the knowledge based rule system can be used to register rules for attributes relationship and behavior of entities associated with a fixed point aspect. Fixed point data type propagation is one special case of data type propagation. The following rules present examples of inference rules regarding fixed point data type propagation.

Rule 2 If input port is fixed point data type C then output port is the fixed point data type that can represent the input with minimal rounding error and has the size of the integer of the target.

Rule 3 If input port is fixed point data type then input port should be fixed point data type and it has smaller container size than that of input port data type.

In another aspect of the present invention the knowledge based rule system can be used to register rules for attributes relationships and behaviors of entities within a graphical model. Hence parameter validation can be done using a knowledge based rule system. The following inference rules provide examples of applications in parameter validation.

In yet another aspect of the present invention the knowledge based rule system can be used to register rules for propagation of attributes relationships or behaviors of entities in a graphical model. User interface UI functions can be provided for users to specify rules for propagation. For the case of dimension propagation within a block the UI function signatures can look like the following 

With the function set condition a user can specify a condition that an input port is scalar by calling cid set condition InputPort 0 ScalarDims . With the function set action a user can specify an action that output port is set to be a matrix by calling aid set action OutputPort 1 MatrixDims . Lastly a user can specify a rule by calling rid set rule cid aid . The rule provides that if input port is scalar then the output port is set to matrix.

In still another aspect of the present invention the knowledge based rule system can be used to specify rules for attributes relationships or behaviors of entities associated with code generation. For example 

Rule 1 If a division in the generated code has denominator to be unsigned integer then eliminate the generated code for divide by zero protection.

Rule 2 If a variable in the generated code has the name starting with doNotOptimize then do not optimize these variables when generating code.

Rule 3 If saturation only happens at edge cases in the generated code then eliminate the generated saturation code. For example with signed char A signed char B 1 the saturation only happens when B is the value of 128. This is an edge case. 

Rule 4 If the size of a generated utility function is less than 16 bytes or the number of operations in the generated utility function is less than 5 then inline this utility function.

With the specified rules knowledge based rule system can compare the current condition of the block with the conditions in the registered rules in the rule base. If one rule condition is satisfied then the action of this rule is executed. This process repeats until no conditions of the rules are satisfied.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

