---

title: Method for calculating business process durations
abstract: Provided is a system and method for calculating a time duration for a process or portion of a process. A timing interval based upon a single business process view can function regardless of multiple execution process paths. The claimed subject matter separates the business process definition from the execution process definition such that tracking points, which do not depend upon any particular execution process definition, may be inserted into the business process. Also provided is a timing interval calculation based upon two or more tracking points corresponding to a start point of the timing interval and/or two or more tracking points corresponding to an ending point of the timing interval. A user can arbitrarily select timing point within a process and employ those timing points to collect data and populate reports in a manner that is zero-code, i.e. does not require the user to write computer code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454310&OS=07454310&RS=07454310
owner: Lombardi Software, Inc.
number: 07454310
owner_city: Austin
owner_country: US
publication_date: 20050426
---
This application claims the benefit of priority to U.S. Provisional Patent Application No. 60 568 906 entitled METHOD FOR CALCULATING BUSINESS PROCESS DURATIONS filed on May 7 2004 and is incorporated herein by reference in its entirety.

The invention relates generally to a business process management system and more specifically to a method of dynamically calculating the duration of a business process or part of a business process.

Business process management BPM systems have become essential to the management of complex businesses in today s economy. Management teams face an increasingly complex and challenging business environment. For example a typical business may consist of multiple locations business streams and informational structures. In addition a business often must handle fluidity in market conditions and changes in accounting requirements. Business performance may involve such aspects as supply chain management financial compliance customer service plant maintenance and other processes. Each of these performance aspects can benefit from operational improvement or process optimization.

Current BPM systems that provide process optimization typically focus on execution models rather than on functional models. A functional model or business view focuses on what specific jobs need to be performed within a system. An execution model or process view focuses on how those specific jobs are performed or executed. In current process management systems although information is collected based upon the functional view the reporting of the collected information is based upon the business view. This becomes an issue when a change is made in the execution model because a change often necessitates a modification to the reporting process so that that a particular report corresponds to the functional model.

Three issues in process optimization are 1 velocity or how fast a business identifies and responds to business events 2 visibility or the degree to which changes create affect ongoing processes and 3 value or the ultimate benefit or return on investment ROI derived from any particular change. Changes in the execution model may require a change in the reporting model which is based upon a functional model and this can affect velocity visibility and value. With regard to velocity extra steps require extra time because many BPM systems are designed to be durable rather than flexible. With regard to visibility an execution model change that necessitates a functional model change can disrupt an entire business process. With regard to value anything that increases the time and disruptive aspects of a business process change affects the cost of the change and the business ROI.

In current BPM systems changes to an execution definition of a business process may involve the addition removal and reordering of components that implement the process as well as the creation deletion and renaming of data variables or fields used for reporting the process. If data needed for reporting the process is associated with existing implementation components or variables then changes to the process to improve execution or refine the process structure may necessitate changes to reports even though the functional definition has not changed.

For example it is often desirable in a process reporting system to measure the time necessary for a particular process or portion of a process to complete. This task becomes complicated when the execution definition changes and even in the absence of change complications arise if any particular job within the business process has more than one execution path. In addition there may be ambiguity as to which particular events should be considered the start or end of a particular timing interval. In the event of ambiguity as to starting points and ending points there is no way for Standard Query Language SQL to calculate a timing interval unless the interval is periodically recalculated.

Although described with particular reference to a business system the system and method of the present invention can be implemented in any system in which it is desirable to calculate process duration. Those with skill in the computing or business arts will also recognize that the disclosed embodiments have relevance to a wide variety of process systems in addition to those described below. In addition the functionality of the present invention can be implemented in software hardware or a combination of software and hardware. The hardware portion can be implemented using specialized logic the software portion can be stored in a memory and executed by a suitable instruction execution system such as a microprocessor.

Turning now to the figures illustrates an exemplary system architecture of a TeamWorks TW Business Processing Management BPM system . Typically system is implemented on one or more computing systems not shown and networks not shown and is implemented with respect to a specific business process. For the sake of simplicity the following Specification describes the claimed subject matter only with respect to a loan approval and maintenance system. It should be noted that the loan process is used only as an example and that the claimed subject matter is equally applicable to most business systems.

System is comprised of a Process Processing component and a Performance Processing component both of which are executed on the one or more computing systems. One advantage of the claimed subject matter over the prior art is the ability to separate these two aspects i.e. processing or execution management and performance or business management of any particular business system. Process Processing component includes a user interface that enables one or more users and or other automated systems to interact with system via common computer input output devices not shown such as a monitor keypad and mouse. Those with skill in the computing arts should be familiar with both the types of computing systems that may implement system and the many different ways humans interact with such a computing system.

User interface includes a TeamWorks TW task manager a TW coach and a custom portal . TW task manager is a graphical user interface GUI that enables an end user to manage in situ processes that are assigned to them. TW coach walks end users through a process by enabling the end user to interact with a process in situ through whatever task they need to complete such as entering information about the state of a loan that they are managing i.e. inputting the loan amount the names and addresses of the people seeking the loan etc. A TW authoring environment is used by process authors to create content that becomes a running process with which the end users eventually interact via such mechanisms as TW Task Manager and TW Coach . In other words authoring environment is designed to lead a designer through the creation and management of tracking groups tracking points and tracking fields each of which is explained in more detail below in conjunction with .

Authoring environment simplifies the creation of business process definitions by implementing a TW Zero code standard. TW Zero code implies that a user does not have to resort to actual programming to use TW BPM system for implementing a particular business process tracking and reporting environment. In addition the Zero code standard means the user does not have to manipulate a database in order to define manage or report on a business process. Authoring environment communicates with a TW process server and stores information in a process repository both described below.

Custom portal is an application programming interface API of system that enables a user to develop and or use individualized GUIs or other types of interfaces for access to system . Custom portal also serves as a point of entry into system for conventional BPM systems published by other vendors.

User interface including components and are coupled to TW process server which executes the computer code associated with process processing of TW BPM system . Process server is explained in more detail below in conjunction with . Like custom portal an import export component of system enables customized modules and other BPM systems to interact with system . Unlike custom portal input output component provides a direct link to APIs within TW process server .

TW process server is coupled to process repository which is a computer data storage device. As explained above process repository may be one or more of many types of data storage devices such as but not limited to a hard disk drive or network of hard disk drives. Process repository is divided into two logical partitions a current process metadata partition and a transient process execution data partition . Current process metadata partition includes process metadata i.e. information that defines user specified tracking data or tracking groups tracking points and tracking fields see . In addition to storing definitions of tracking data partition stores the relationship among individual elements of the tracking data and definitions for user defined reports. Transient process execution data partition stores values for actual instantiations of the process metadata defined in partition each instantiation corresponding to one or more currently executing business processes. Transient process execution data also records the state of data collection tasks and processes.

Performance Processing component includes a user interface that enables one or more users and or other automated systems to interact with system via common computer input output devices not shown such as a monitor keypad and mouse. User Interface includes a TW Report and Scoreboard a Third Party Business Intelligence BI Tool and a Custom Portal . TW Report and Scoreboard is a GUI that enables users to define reports and monitor ongoing processes. Third Party BI Tool and custom portal provide access to Performance Processing component for different business process software from multiple vendors and custom applications respectively.

User Interface and therefore interfaces and communicate with a TW Performance Server which handles the processing associated with implementing the functionality defined in interfaces and . TW Performance Server is coupled to a Performance Repository which is a data storage device or devices. Performance Repository includes a Performance Metadata partition which stores metadata corresponding to any implemented tracking data or tracking data stored in Current Process Metadata that is actually employed in a business process used by one of the interfaces and . In other words Current Process Metadata stores defined tracking data and Performance Metadata stores tracking data that is both defined and instantiated with respect to a report scorecard or other process as a result of user input via user interface . In addition Performance Metadata partition stores information that correlates business data i.e. data as defined on the Performance Processing side to specific execution data i.e. data as defined on the Process Processing side . An External Feed module provides a access point via APIs into TW Performance Server for process data other than data from Process Processing . Performance Process Execution Data partition stores data corresponding to actual instantiations of the tracking data stored in Performance metadata .

Finally a Transformation and Transfer module transmits tracking point data from TW Process Server and Process Repository to TW Performance Server and Performance Repository . Specific requested metadata may be retrieved by TW Process Server from Process Repository and once delivered stored by TW Performance Server in Performance Repository . In other words Transformation and Transfer module can translate a request for performance data employed by TW Performance Server into a request for process data employed by TW Process Server .

A Web Container includes logic to manage TW Process Server s communication via the Internet to and from for example users TW Performance Server and Transformation and Transfer module . It should be noted that the Internet is only one communication medium that may be employed by TW BPM system . Other examples include but are not limited to a dedicated network and direct connections via either wireless or wired connections. Web Container includes a Web Workflow Monitor and an Event Manager . Web Workflow Monitor manages outgoing communications and Event Manager manages incoming communications or events. 

In addition to Web Container TW Process Server also includes a Process Container which performs tasks related to TW BPM system tracking data. Modules within Process Container include a Process Definitions module a Process Engine module and a Zero code Process Components module . Process Definitions module stores the various relationships among tracking data including tracking groups tracking points tracking fields. In addition Process Definitions module stores rules associated with business processes such as a particular path a specific loan needs to follow based upon the size of the loan. Process Engine module interprets rules stored in Process Definitions module and performs any necessary calculations related to the tracking data. Process Engine module also handles data storage and retrieval in conjunction with Process Repository . Zero code Process Components module correlates tracking data and its relationships to graphical icons so that a user who employs Authoring Environment may manipulate tracking data by defining new tracking data and new relationships within the tracking data without resorting to actual programming in a computer language.

Performance Engine handles all communications to and from Performance Repository . In addition performance engine translates TW Query Language TWQL queries into Structured Query Language SQL queries. For example a sample TWQL query may take a form such as the following 

Specific lines of the TWQL query above will be referred by the tag TWQL followed by the line number e.g. the first line select is referred to as TWQL 1 . 

Like the TWQL query described in lines TWQL 1 through TWQL 11 above the specific lines of the SQL query are referred to by SQL and line number e.g. the first line select is referred to as SQL 1 . 

The lines TWQL 2 through TWQL 5 represent variables or aString aNumber aDateTime and aNewNumber. that are meaningful within a specific business process perhaps to a user building a report. A report can be created for example in TW Report Scoreboard . The lines SQL 2 through SQL 5 represent tables and data fields or t0. f1 t0. f2 t0. f3 and t0. f1 that have meaning within an execution environment and are dynamically determined relative to the process variables based upon values assigned in the tracking data i.e tracking groups tracking points and tracking fields see . Information that enables Performance Engine to assign specific execution data to meaningful process variable names is stored in Performance Metadata of Performance Repository . It should be noted that a user building a report with TWQL queries does not need to know either a table or variable that a selected process variable is stored in the Process Repository or Performance Repository . In addition a particular process variable may represent an expression composed of multiple execution variables fields and other data see . In other words Performance Engine translates a TWQL query into a SQL query using information stored in and dynamically retrieved from Performance Metadata .

In this manner a user building a report does not need to know how any particular business process data is related to specific execution data. In addition the relationship between business process data and execution data can be defined or redefined such that execution processes can be changed without affecting either reports or how a user views a particular business process.

TW Process Server and TW Performance Server operate in conjunction with OS and a Java 2 Platform Enterprise Edition J2EE interface . J2EE interface operates in conjunction with a Java Virtual Machine VM a Java language interpreter that converts Java commands into instructions that are specific to OS . Those with skill in the computing arts should understand the different choices available to implement OS the functionality that OS provides to system and how Java VM interacts with OS . TW Process Server and TW Performance Server also interact with databases and respectively via J2EE Application Server and a Java Database Connectivity module which is a Java API specifically designed for connecting Java applications to various databases.

A TW Security module provides a point for Security Plug ins to attach to business system . A plug in is a software or hardware module that adds a specific feature or service to a larger system. In this example Security Plug ins provides business system with the ability to authenticate users via an Authentication module . A TW Connector Framework functions as an interface between TW Process Server and TW Performance Server via J2EE Application Server and Java VM .

An Adaptor provides an integration point for Enterprise Resource Planning ERP and or Customer Relationship Management CRM module to be incorporated with business system via TW Connector Interface . An Adaptor enables legacy applications or programs that were part of business system prior to the implementation of TW BPM system to be incorporated into business system also via TW Connector Interface . Additional legacy applications are incorporated via an Enterprise Application Integration EAI middleware component which is connected to TW Connector Interface through a programming interface . In this example programming interface is implemented using JDBC or SOAP but one with skill in the art should recognize that there are many possibilities. A programming interface also implemented in this example using JDBC or SOAP connects TW Connector Interface to a Relational Database Management System RDBMS . Some variety of DBMS is typically found in most business systems such as business system .

Approval Process begins in a Begin Loan Process LP step and proceeds immediately to a Get Info step during which loan information about a particular loan application is retrieved from a file or electronic database such as RDBMS . Control then proceeds to a Size step during which loan applications are divided based upon the amount of money requested. If the loan request represents a large amount of money then control proceeds to a Verify 1 step and otherwise control proceeds to a Verify 2 step . From Verify 1 step control proceeds to an Evaluate 1 step during which a supervisor because of the large amount of the loan double checks the work performed in step . Control then proceeds to a Review step during which all the loan documents are checked for completeness. From Verify 2 step control proceeds directly to Review step .

In Final Approval section control proceeds to an Approve step during which control is determined by the results of Review step . If the subject loan application is not approved then control proceeds to a Reject Loan step and then to an Update step during which in this example RDBMS is updated with the results of process .

If the loan application is approved in step based upon the results of step then control proceeds to a Complete Forms 1 step during which the loan applicant is prompted for any remaining information required to complete the loan application. Control then proceeds to a Signature step during which the loan applicant is request to sign the loan application. Following Signature step control proceeds to a Complete step during which process determines whether or not the loan application contains all required information and signatures. If not control returns to Complete Forms 1 step and processing continues as described above. If in step the loan application is determined to be contain all necessary information and signatures then control proceeds to Update step during which RDBMS is updated to reflect the current state of the loan application. Finally control proceeds from step to an Exit LP step during which process is complete.

In addition in Loan Approval process Complete Forms 1 step of process is replaced with a Complete Forms 2 step . Step may represent an automation of step or in the alternative a face to face interaction is replaced with an Internet enabled process. Regardless the claimed subject matter enables a user or administrator to modify the execution model of a particular business process without changing the business model and any reporting functionality that is based upon the business model.

A tracking point is a defined data collection function that gathers specified data at a particular point in a process such as Loan Approval processes and . A code free method of creation of tracking points is explained more fully below in conjunction with . A code free method of positioning tracking points within a process is illustrated below in conjunction with . Basically code free implies that processes and data may be manipulated without a user needing to interact with a database.

The claimed subject matter enables a user of a particular business process to define and position tracking points such as tracking points and within a business process such that the tracking points are independent of any particular implementation of the business process. For example TP1 and TP2 are positioned within process as illustrated in . When process is modified becoming process TP1 and TP2 do not need to be modified or repositioned even though Evaluate 2 step has been added. In this manner reporting functionality represented by tracking points and is independent of any particular business model.

A title bar displays the name of the screen Tracking Group Properties and includes an Exit button that enables the user to close screen . Exit button which should be understood by those with experience with graphical user interfaces GUIs is selected by positioning a cursor not shown over button and clicking on a mouse not shown . Throughout this specification the action of positioning a cursor on a GUI button or other input device and then clicking a mouse is referred to as clicking on the button or other device.

A Name data entry field displays a currently selected tracking group which can then be modified by utilizing other fields of screen . A user can select another tracking group by typing in the corresponding name in field . In this example Name data entry field is indicating that the currently selected tracking group is entitled ExampleTrackingGroup. A Folder data display field displays a folder or computer directory with corresponds to ExampleTrackingGroup tracking group. The user can select another folder by clicking on a Select button to the right of field . In this example the folder corresponding to ExampleTrackingGroup is entitled Alex. A Description data entry field enables the user to add a comment corresponding to the currently selected tracking group.

A Tracked Fields line provides the user a choice between two types of tracking fields. A tracking field is a piece of data collected during a business process. By clicking on a Tracking Points button the user can select to add edit or delete tracking points associated with the selected tracking group. A tracking point is a specific location at which a tracking group is persisted. By clicking on a System button the user can edit system variables associated with the selected tracking group. A display field displays either the tracking points or the system variables depending upon with one of the buttons or is clicked. In this example Tracking Points button has been clicked so a Tracking Points table is displayed.

Table includes three columns a Name column a Description column and a Type column. Name column of table lists the names of specific tracking points associated with the selected tracking group i.e. in the example tracking points entitled authorization code and invoice number. Description column of table provides a short description of the corresponding tracking point and Type column provides information a data type associated with the corresponding tracking point. In this example tracking point authorization code is of type string and tracking point invoice number is of type number. Of course other data types are possible within the claimed subject matter.

Three buttons an Add button an Edit button and a Remove button enable the user to manipulate the tracking point data displayed in table . Add button enables the user to define a new tracking point Edit button enables the user to change the information corresponding to a selected or highlighted tracking point and Remove button enables the user to delete a highlighted tracking point.

A Last Modified Date data field displays information about the last time the data displayed in screen was modified. In this example the information was modified on Aug. 28 2003 at 09 25 28 am. A Last Modified By data field associates a user ID with the last modification. In this example the last user to modify the data displayed on screen was the user associated with the user ID tw admin. Finally an OK button enables the user to exit screen and accept and save any changes to the information displayed in the various fields and a Cancel button enables the user to exit screen without saving any of the changes that may have been entered into the various fields.

A Name data entry field displays a currently selected tracking point which can then be edited or modified by utilizing other fields of screen . A user may select another tracking point by typing in the corresponding name in field . In this example Name data entry field is indicating that the currently selected tracking group is entitled SimpleCode. A Description data entry field enables the user to add a comment corresponding to the currently selected tracking point.

A Details line provides the user a choice between two types of possible tracking fields corresponding to the selected tracking point. By clicking on a Pre Post button the user can edit or modify particular tracking fields associated with the selected tracking point. By clicking on an Advanced button the user can edit different variables associated with the selected tracking group. A tracking group data display field provides the name of the tracking group associated with the currently selected tracking point. This example employs the ExampleTrackingGroup tracking group described above in conjunction with . A Select button enables the user to choose another tracking group to associate with the selected tracking point. Group Description data entry box enables the user to view and modify if necessary a comment field associated with the selected data tracking point.

A Tracked Fields line includes two buttons a Timing Intervals button and a System button which enable the user to select one of two different types of tracked fields to display and or edit. A Tracked Fields data entry area displays a Tracked Fields table which includes an Enable column a Name column a Type column and an Expression column. The Enable column includes a check box corresponding to each row in the table . Each check box enables the user to specify whether or not the corresponding tracking field is active within the selected tracking point. The Name field displays the name of the corresponding tracking fields i.e. in this example authorization code and invoice number. The Type column indicates the data type of the corresponding tracking filed i.e. in this example string or number data types. The Expression column enables the user to view and or specify the derivation of the corresponding data filed. Using authorization code as an example the data filed is derived from the variable tw.local.auth code. Three buttons an Add button an Edit button and a Remove button like the Add Edit and Remove buttons and enable the user to take corresponding actions with respect to a selected row of the tracked fields table .

Finally a Save button enables the user to exit screen and accept and save any changes to the information displayed in the various fields. An OK button enables the user to exit screen without saving any of the changes entered into the various fields.

A Name data entry field displays a currently selected timing interval which can then be modified by utilizing other fields of screen . A user can select another timing interval by typing in the corresponding name in field . In this example Name data entry field is indicating that the currently selected timing interval is entitled ExampleTimingInterval. A Folder data display field displays a folder or computer directory with corresponds to ExampleTimingInterval. The user can select another folder by clicking on a Select button to the right of field . In this example the folder corresponding to ExampleTrackingGroup is entitled Alex. A Description data entry field enables the user to add a comment corresponding to the currently selected timing interval.

A General line provides a System button that enables the user to specify that the selected timing interval is applied to system variables. Below General line are two data display and entry areas a Start Points area and an End Points area . Start Points area enables the user to specify tracking points to use as the beginning of a timing interval and End Points area enables the user to specify tracking points to use as the end point of a timing interval.

A table of Start Points area includes three columns a Process column a Tracking Point column and a Tracking Group column. The Process column displays processes employing the particular tracking intervals. In this example two tracking points are listed and both correspond to the ExampleProcess process which is a defined piece of a larger process. Tracking Point column shows that one of the two tracking points is positioned at a BranchOne of ExampleProcess and the other tracking point is positioned at a BranchTwo of ExampleProcess. The TrackingGroup column shows that both tracking points correspond to ExampleTrackingGroup . An Add button and a Remove button enable the user to add or delete a highlighted row of table respectively. A pair of radio buttons enables the user to specify whether the timing interval corresponding to the two tracking points listed in table begins with the first occurrence of the two tracking points or the last occurrence.

Like table of Starts Point area a table of End Points area includes three columns a Process column a Tracking Point column and a Tracking Group column. The Process column of table displays processes employing the particular tracking intervals. In this example one tracking point is listed which corresponds to the ExampleProcess process. Tracking Point column of table shows that the tracking point is positioned at an EndOFProcess point of ExampleProcess. The TrackingGroup column of table shows that the tracking point corresponds to ExampleTrackingGroup. An Add button and a Remove button enable the user to add or delete a highlighted row of table respectively. A pair of radio buttons enables the user to specify whether the timing interval corresponding to the two tracking points listed in table begins with the first occurrence of the listed tracking points or the last occurrence. In this case since there is only one defined tracking point listed in table the first and last occurrence would be the same.

A Last Modified Date data field displays information about the last time the data displayed in screen was modified. In this example the information was modified on Aug. 28 2003 at 09 25 28 am. A Last Modified By data field associates a user ID with the last modification date displayed in data field . In this example the last user to modify the data on screen was the user associated with the user ID tw admin. Finally an OK button enables the user to exit screen and accept and save any changes to the information displayed in the various fields and a Cancel button enables the user to exit screen without saving any of the changes that may have been entered into the various fields.

Other user interface components that should be familiar to Windows users are menu options i.e. a File menu an Edit menu a Process menu a Tools menu a Windows menu and a Help menu. Below menu options are a number of typical Windows toolbar buttons including a New File button an Open button a Save button a Print button a Cut button a Copy button and a Paste button.

Page includes several icons an Integration Definition icon a User Activity icon a Database icon a Decision or Branch icon and a Tracking Point icon . The user may click on icons and to display other user interfaces. For example by clicking on Tracking Point icon the user can display Tracking Point Properties screen which enables the user to create a new tracking point or edit an existing one. Other icons and also enable the user to display data entry screens for creating or editing integration definitions user activities decision boxes and database activities respectively.

A Process Library directory tree section displays integration definitions user processes decision data not shown and timing intervals not shown that have been defined previously. The user can define processes with related timing intervals using a zero code method by clicking on a particular entry in Process Library section and dragging the entry into a Create Process window which is described in more detail below in conjunction with . The zero code method is a procedure for creating process definitions tracking data definitions and reports such that the user does not need to perform actual computer programming.

Process Library section is displaying a sampling of a directory tree structure for TW BPM system including a Process node and a Scorecard node. The Process node includes various user defined processes available for inclusion in a larger business process including a User Activities node. In this example under the User Activities node is an Approval Processes folder an Evaluate Processes folder a Get Update Database folder a Review process and a Verify Processes folder. Processes corresponding to these directory nodes are used as examples above in the flowchart of and the correlation between the nodes and the processes in is explained more fully below in conjunction with . The Scorecard node is explained more fully in conjunction with . As should be known by those with experience with Windows a node that has a symbol on the left side of its line can be expanded to show more nodes. A node with a symbol indicates that the node is already expanded and may be compressed. A node without either a symbol or a symbol is already expanded as far as possible.

Finally a Process Variables section enables the user to view available defined process variables and to access the process variables if necessary. Examples of types of variables represented in section include local variables both input and output parameters corresponding to processes and scorecards some of which are represented in section . A Find in Library button enables the user to search a library of available process variable without searching through the directory tree displayed in section .

To define a new process in this example process a user one by one clicks on nodes in Process Library and drags corresponding icons which look like icons and into a process creation window in this example window . Each dragged icon is then positioned within window such that the position indicates where a particular functionality corresponding to the dragged icon fits into overall process . In short to define a particular process a user clicks upon a node in directory tree and drags a selected icon representing a particular functionality into window . In this example processing is performed based upon the position of icons with icons positioned left going first. In more complicated processes a line or lines may be drawn from icon to icon to enforce a sequence regardless of position.

Two icons a Start Process symbol and an Exit Process icon correspond to Begin LP step and Exit LP step respectively. A Start step and an Exit step are typically part of many defined process and therefore may if desired automatically be placed in a new Create Process window upon instantiation. Get Info step of process corresponds to a Read DB icon which because of its position as the first icon to the right of Start Process icon indicates as explained above in conjunction with Set Info step follows immediately after Begin LP step .

A Decision icon corresponding to Size step of process is displayed in window . Icon s position indicates that the corresponding processing follows that of Read DB icon as step follows step in process . Two arrows on the right side of icon indicate that processing can take one of multiple directions in this case either proceeding to functionality represented by an icon which corresponds to Verify 2 step or to functionality represented by an icon which corresponds to Verify 1 step . An icon corresponding to Evaluate 1 step is positioned to the right of icon .

An icon corresponding to Review step has two arrows pointing in on the left indicating that step can be entered via multiple paths specifically in this example by the two paths that originated at icon . To the right of icon is an icon corresponding to Final Approval section . It should be noted that any particular icon e.g. icon may represent a collection of separate processing blocks. In this example steps and are all represented by icon . The representation of process in window also includes an Update DB icon corresponding to Update step which precedes Exit Process icon .

Finally two tracking point icons a TP1 icon and a TP2 icon are positioned between icon and icon respectively and icon . TP1 icon corresponds to Tracking Point 1 and TP2 icon corresponds to Tracking Point 2 .

As explained above a user can define a process by clicking on a node of directory tree such as the directory tree displayed in Process Library and dragging an icon into a process window such as window . For example to modify process into process a user would double click upon the Evaluate Processes node of Process Library directory tree section in order to expand the corresponding folder. Once expanded the folder would include nodes representing Evaluate 1 step and Evaluate 2 step . By clicking on the node representing Evaluate 2 step dragging the corresponding icon into window and positioning the icon between icon and TP1 icon the user would in effect be taking a step towards modify process into process . To complete the modification the user would need to enter Final Approval process and replace Complete Forms 1 step with Complete Forms 2 step . As can be seen the claimed subject matter enables a user to create and edit business processes without the need of writing computer programming code.

If in step data store is determined to be empty then control proceeds to a transition point A which continues in . If data store contains tracking points to be processed then control proceeds to a Get Definitions step during which the first tracking point in data store is selected for processing and a tracking point definition associated with the selected tracking point is retrieved from Performance Repository . Control then proceeds to a Get Intervals step during which any timing intervals associated with the selected tracking point are retrieved from Performance Repository . Any particular tracking point may be associated with multiple tracking intervals.

Control proceeds from step to an Update List step during which the timing intervals retrieved in step are added to a Timing Interval List data store . Timing Interval List data store includes all timing intervals currently being processed in TW BPM system . If any particular timing interval is already in data store the particular timing interval is not added again. Control then proceeds to a Remove Tracking Point step the tracking point selected in step is removed from Tracking Point List data store . Control then returns to step and processing continues as explained above. In this manner any timing interval associated with a tracking point in data store is inserted into Timing Interval List data store .

In transition point A from step of enters a List empty step during which process determines whether or not Timing Intervals List data store is empty. If data store is empty then control proceeds to an End Calculate TI step during which processing is finished. If data store contains timing intervals to be processed then control proceeds to a Retrieve Tracking Points step during which any tracking point values associated with the current functional process are retrieved form Performance Repository . These tracking point values which are stored in a Tracking Point Values data store include any tracking points in data store . The retrieved tracking point values in data store are sorted in order of associated time values.

From step process proceeds to a More Intervals step during which process determines whether or not each timing interval in Timing Interval List data store has been processed by a Get Intervals step . If in step process determines that each timing interval has not been processed then control proceeds from step to step during which the processing occurs. In step all timing intervals recorded for the current functional task and related to the currently processed timing interval are retrieved for the Performance Repository . These retrieved timing intervals are then added to a Tracking Point List data store . Control then returns to step where processing continues as described above until all timing intervals have been processed by step . Once process determines in step that all timing intervals have been processed in step control from step to a More Intervals step during which process determines whether or not all the timing intervals contained in Timing Interval List data store have been processed by a TP List Empty step see . The transition from step to step is represented by a transition point C.

If in step process determines that all intervals have been processed by step then control proceeds to a Compare Intervals step . Step is executed once the processing of D and E has been completed which is represented in as a transition point B that enters List Empty step . Therefore an explanation of step is postponed until those figures have been explained. Following step control proceeds to End Calculate TI step during which process is complete.

The portion of process illustrated in begins at transition point C which as explained above can be reached from List Empty step as well as from various points in as explained below. Transition point C enters a TP List Empty step during which process determines whether or not all the tracking points associated with the currently processed timing interval have been processed. If no tracking points remain to be processed then control proceeds to a TI Closed step during which process determines whether or not the currently worked timing interval stored in a Tracking Point List data store is closed i.e. all associated tracking points have completed. If the currently worked timing interval is not closed then control proceeds to transition point B and then to step during which processing continues as described above. If the currently worked timing interval is closed then control proceeds to an Add TI to List step during which the current timing interval value stored in Tracking Point list is added to a list of completed timing intervals or a Completed TIS data store . Control then proceeds to transition point B and continues as explained above.

In TP list Empty step if the all the tracking point values have not been processed then control proceeds to a New TI step during which process determines whether or not there is a new tracking interval value which if it exists would have been stored in Tracking Point List data store . If there is a tracking point value in data store then control proceeds to a TI Open step during which process determines whether or not the timing interval currently being processed is open i.e. the timing interval has a start value but no end value. If the currently processing timing value is open then control proceeds to a transition point D otherwise control proceeds to a transition point E.

If in step process determines there is not a new tracking point value then control proceeds to a TP Start step during which process checks currently processing tracking point value to determine whether or not the tracking point value can start the current timing interval. If the timing interval can not be started then control proceeds to transition point C otherwise to a Create New TI step during which process creates a new timing interval by recording the current tracking point value as the new timing intervals start time and storing the new timing point value in data store . Control then proceeds to transition point C.

The portion of process illustrated in begins at transition point D which as explained above can be reached from TI Open step . Transition point D proceeds to a TI Update step during which process determines whether or not the current tracking point value can update the start value of the current timing interval. An update is called for if the current timing interval has its start value set to Calculate from latest point Item . If an update is called for then control proceeds to an Update TI step during which the start time and the start point value of the current timing interval is updated. Control then proceeds to transition point C.

If in step process determines that the current timing interval start point can not be updated then control proceeds to a Set End step during which process determines whether or not the current tracking point value can end the current timing interval. If not then control proceeds to transition point C otherwise control proceeds to a Set End step during which the end value of the current timing interval is set to the current tracking point value. In addition the current timing interval is marked with a status of Closed. Both the time value and the status value are stored in data store . Process then continues in an End Earliest step .

In End Earliest step process determines whether or not the current timing interval has its end point defined as Calculate from earliest point Item . If not processing proceeds to transition point C and otherwise processing proceeds to a Save TI Value step during which the current tracking point value is saved to Completed TIS data store . Further the value of the current timing interval is cleared from Tracking Point List data store . Control then proceeds to transition point C.

The portion of process illustrated in begins at transition point E which as explained above can be reached from TI Open step described in conjunction with . Control proceeds from transition point E to a TI Update step during which the current timing interval has a status of Closed i.e. the interval has assigned values for both a start point and an end point. Process determines whether or not the current timing interval is defined such that the end point can change. The end point of a timing interval can change if the end point has been defined as Calculate form latest point Item . If the end point of the current tracking point can be updated then control proceeds to a Update TI End step during which the end point is updated based upon the current tracking point. Control then proceeds to transition point B.

If in step the current timing interval is configure such that the end point can not be updated i.e. the end point has been defined as Calculate from earliest point Item then control proceeds to a TI Start step during which process determines whether or not the current tracking point is can act as the start of another timing interval value for the current timing interval. If not control proceeds to transition point B. If so control proceeds to a Store and Clear TI step during which the current timing interval is completed and added to the list of completed TIs data store . In addition the timing interval currently being calculated is cleared. Control then proceeds to a Get Interval step during which process creates a new timing interval value with the current tracking point as its start point. The new timing interval value is designated as the current timing interval by storing it in data store . Control then proceeds to transition point B.

Finally we return to Compare Intervals step which was first introduced in conjunction with . In step Tracking Point List data store now contains all the timing intervals that should be in performance Repository in conjunction with the timing intervals in Timing Interval List data store . A list of timing interval values currently in Performance Repository is stored in Tracking Point List data store . The timing interval values stored in data store is compared with the list stored in data store and the minimum number of deletions and additions is applied to Performance Repository so that the records in Performance Repository agree with data store . As mentioned above control then proceeds from step to End Calculate TI step during which process is complete.

Since Task Monitoring functionality is selected a Task Monitoring Alerts window pane is displayed. A Task Alert table within pane displays various messages that system has posted concerning various processes that have recently been active. A Current Task window pane indicates that no task is actually running during this snapshot of window . Also included in pane are several graphs and which depict graphical representations of exemplary metrics corresponding to processes managed by system . Finally a slider bar indicates that there is more of window that is not being displayed due to the length of the monitor on which window is presented. Moving slider bar enables the user to display currently obscured portions of window .

Window is only one example of a GUI of system . Other windows enable a user to define both tasks and graphical representations of those tasks. For example there are windows that enable the user to define graphs such as bar graphs and and pie chart corresponding to other processes and metrics. Window and other windows that are not shown enable users to define processes reports on those processes and various monitoring representations without needing to actually write computer code to query the various databases. As explained above this is defined as a Zero code approach provided in system .

The Field Name column contains information indicating the type of information stored in the corresponding row. The value column contains information corresponding to a specific value for the corresponding type of information. For example the first row contains information on a particular automobile i.e. the color of the automobile which happens to be red. The second through fourth rows indicate that the first automobile has four doors an automatic transmission and is a Chevrolet.

Table is organized such that one logical record is stored in four different rows. In actuality if table represented an actual automobile one logical record would typically require tens or hundreds of rows. In order for a BPMS or other software that accesses table to gather all information on a particular automobile the DBMS joins first must join rows based upon matching values in the record ID column. This issue make table difficult to query arbitrarily. For example the query Find all 4 door automobiles with an automatic transmission is executed with code such as the following 

The claimed subject matter takes advantage of the fact that a denormalized table such as table which is not typically employed in standard DBMSs is easier to query when queries are arbitrary such as in system .

While various embodiments of the application have been described it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible that are within the scope of this invention. For example the methods are applicable to many type of processing systems and specific information fields within the information frames described above are used as examples only. Other embodiments may add or subtract particular fields. In addition alternative embodiments may use additional or fewer steps or execute the steps in a different order than described in the specification. Accordingly the invention is not to be restricted except in light of the attached claims and their equivalents.

Provided is a system and method for calculating a time duration for a process or portion of a process. Although applicable to a wide variety of processes the claimed subject matter for the sake of simplicity is described with regard to a business process.

Any particular business process can be viewed in a number of ways. For example one view may be based upon actual physical functions performed during the execution of the process or an execution process view. In a second view the process may be viewed from a high level business view or business process view. Issues arise when a user from a business process perspective requires information based upon an execution process view. One particularly difficult issue in this context is the calculation of timing intervals.

A timing interval based upon a single business process view may depend upon multiple execution process paths each corresponding to the single business process view. For example in a loan approval business process one of two loan review processes may be employed depending upon the size of the loan. The claimed subject matter separates the business process definition form the execution process definition such that tracking points that do not depend upon any particular execution process definition may be inserted into the business process. Thus the claimed subject matter provides a timing interval calculation based upon two or more tracking points such that the timing interval remains valid even though the process may be comprised of multiple execution paths and even through an execution process may have been modified.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a short overview of some of the matter s functionality. Other systems methods features and advantages of the invention will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the invention and be protected by the accompanying claims.

