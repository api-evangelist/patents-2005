---

title: System and method of using an active link in a state programming environment to locate an element in a graphical programming environment
abstract: A system, method, distribution system, and computer readable medium for locating an element of a computing environment are described. The invention feature selecting a label within a state diagram associated with a graphical model and processing the selected label to generate a location identifier. The invention also features analyzing the location identifier to determine which element of a graphical model is associated with the location identifier and positioning the graphical model to display the element associated with the location identifier to a user viewing the graphical model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07900191&OS=07900191&RS=07900191
owner: The Math Works, Inc.
number: 07900191
owner_city: Natick
owner_country: US
publication_date: 20050620
---
The present invention relates to graphical programming or modeling environments in particular to methods systems and computer program products for using an active link in a state programming environment to locate an element in a graphical programming or modeling environment.

Submitted herewith are two identical compact disks created on Jun. 18 2005 having a total of 36.0 Kbytes. Included on each compact disk are the files code for mapping.m symbol resolution.cpp and parser.yac the entire contents of which are incorporated by reference herein.

Simulink from The MathWorks Inc. of Natick Mass. provides tools for modeling and simulating a variety of dynamic systems in one integrated graphical environment. Simulink enables users to design a block diagram for a target system simulate the behavior of the system analyze the performance of the system and refine the design of the system. A block defines a dynamic system within a block diagram. The relationships between each elementary dynamic system in a block diagram are illustrated by the use of signals connecting the blocks. Collectively the blocks and lines in a block diagram describe an overall dynamic system.

Simulink allows users to design target systems through a user interface that allows drafting of block diagrams of the target systems. All of the blocks in a block library provided by Simulink and other programs are available to users when the users are building the block diagram of the target systems. Individual users may be able to customize this set of available blocks to a reorganize blocks in some custom format b delete blocks they do not use and c add custom blocks they have designed. The blocks may be dragged through some human machine interface such as a mouse or keyboard from the block library on to the window i.e. model canvas . Simulink also allows users to simulate the designed target systems to determine the behavior of the systems.

Stateflow from The MathWorks Inc. of Natick Mass. provides a state based and flow diagram environment. Stateflow provides a graphical environment for modeling and designing event driven systems. Stateflow describes complex system behavior using finite state machine theory flow diagram notations and state transition diagrams. Stateflow models state diagrams that graphically represent hierarchical and parallel states and the event driven transitions between the states of the systems. Stateflow is integrated with Simulink which enables each of the state diagrams to be represented as its own block. Based on the state diagrams created in Stateflow Simulink executes the systems to analyze the behavior of the systems.

An example of a state diagram model created using Stateflow is shown in . Each arrow in the Stateflow models represents a transition which is a graphical object that in most cases links one object to another. One end of a transition is attached to a source object and the other end to a destination object. The source is where the transition begins and the destination is where the transition ends. A transition label describes the circumstances under which the system moves from one state to another. It is always the occurrence of some event that causes a transition to take place. The exemplar Stateflow diagram as shown in is embedded in a Simulink environment. The Simulink signals are provided to Stateflow and Stateflow uses this information to decide whether there are changes in states.

Within the Stateflow diagram of there are two states an on state and an off state . The default transition determines the initial state is the off state . When an on switch transition is enabled the enable signal passes to junction and determines whether the temp data is greater or equal to 30 if not then the enable signal is passed on to signal link and further finish the transition to the on state . Now the on state is active and off state inactive. The off state will become active again when the off switch signal is enabled at which time the on state will become inactive.

When a user is viewing a state diagram it is often difficult to determine function call connectivity and components of the related Simulink subsystem. For example when editing a state diagram it can be difficult to determine which element of the block diagram environment the Stateflow state variable is related to. To illustrate further shows a Stateflow diagram and depicts a related Simulink model. When a user is editing the Stateflow diagram of the user may not know or may have forgotten that the call to CALC TH is related to the Threshold Calculation subsystem of . The difficulty in determining this function call connectivity can result in decreases in modeling efficiency.

Therefore a need exists for a system method and computer implemented product that uses an active link in a state programming environment to locate an element in a graphical programming environment.

The present invention provides programming or modeling environments in which an active link in a state programming environment is used to locate an element in a programming environment. As used herein the terms program programming and model modeling will be used interchangeably in the description of the present invention.

In one aspect the invention features a method of locating an element of a programming environment. The method includes selecting a label within a state diagram associated with a graphical model and processing the selected label to generate a location identifier. The method also includes analyzing the location identifier to determine which element of a graphical model is associated with the location identifier and positioning the graphical model to display the element associated with the location identifier to a user viewing the graphical model.

In another aspect the invention features a system for locating an element of a programming environment. The system includes a graphical user interface and an analyzer. The graphical user interface displays a state diagram having a label associated with an element of another portion of the graphical programming environment. The analyzer module processes a selected label within the state diagram to generate a location identifier and determine which element of the graphical programming environment is associated with the location identifier.

In yet another aspect the invention features a computer readable medium having instructions for locating an element of a programming environment. The instructions cause a processor to select a label within a state diagram associated with a graphical model and process the selected label to generate a location identifier. The instructions also cause the processor to analyze the location identifier to determine which element of a graphical model is associated with the location identifier and position the graphical model to display the element associated with the location identifier to a user viewing the graphical model.

In still another aspect the invention features a distribution system for transmitting via a transmission medium computer data signals representing device readable instructions for a method for locating an element of a programming environment. The instructions include selecting a label within a state diagram associated with a graphical model and processing the selected label to generate a location identifier. The instructions also include analyzing the location identifier to determine which element of a graphical model is associated with the location identifier and positioning the graphical model to display the element associated with the location identifier to a user viewing the graphical model.

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyrights whatsoever.

Certain embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intent is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not made express herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the present invention provides a graphical programming or modeling environment in which a graphical program or model is simulated executed analyses such as sensitivity and trim computations are performed or code is generated for the model. The terms program programming and model modeling will be interchangeably used in the description of the illustrative embodiment. In the description of the illustrative embodiment the simulation of the graphical program model is also referred to as the execution of the program model.

The described embodiment will be described below solely for illustrative purposes relative to a time based block diagram environment and or a state based and flow diagram environment. Although the illustrative embodiment will be described relative to the time based block diagram environment and or the state based and flow diagram environment one of skill in the art will appreciate that the present invention may apply to other graphical programming modeling environments including data flow diagram environments and Unified Modeling Language UML environments and other non graphical programming modeling environments.

The illustrative embodiment will be described below relative to a Simulink model and a Stateflow model. Nevertheless those of skill in the art will appreciate that the present invention may be practiced relative to models implemented in other graphical modeling environments including but not limited to LabVIEW from National Instruments Corporation of Austin Tex. and Rational Rose from IBM of White Plains N.Y.

The computing device may be electronic and include a Central Processing Unit CPU memory storage an input control a modem a network interface a display etc. The CPU controls each component of the computing device to provide the block diagram environment. The memory temporarily stores instructions and data and provides them to the CPU so that the CPU operates the computing device and runs the block diagram environment. The storage usually contains software tools for applications. The storage includes in particular code for the operating system OS of the device code for applications running on the operation system including applications for providing the block diagram environment and data for block diagrams created in the block diagram environment and for one or more coding standards applied to the block diagrams.

The input control may interface with a keyboard a mouse and other input devices. The computing device may receive through the input control input data necessary for creating block diagrams such as the selection of the attributes and operations of component blocks in the block diagrams. The computing device may also receive input data for applying a coding standard to a block diagram such as data for selecting the coding standard data for customizing the coding standard data for correcting the violation of the coding standard in the block diagram etc. The computing device may display in the display user interfaces for the users to edit the block diagrams. The computing device may also display other user interfaces such as a user interface for selecting a coding standard a user interface for customizing the coding standard a user interface for displaying a corrected block diagram that removes the violation of the coding standard etc.

In the network environment the server may provide the clients and with software components or products under a particular condition such as a license agreement. The software components or products may include those for providing a block diagram environment and those for creating a block diagram in the block diagram environment. The software components or products may also include those for providing one or more coding standards and those for applying the coding standard to the block diagram. The server may send the clients and the software components or products under a specific license agreement.

The source block provides a source output to the user defined function block . In one embodiment the user defined function block is an embedded MATLAB function. As used herein an embedded MATLAB function refers to block that allows a user to compose a MATLAB language function in a Simulink model to generate embeddable code. In an embedded MATLAB function block the user creates functions with a rich subset of the MATLAB language. Later when the user simulates the model or generates code for a target environment a function that is included as part of the embedded MATLAB function block generates C code. The user defined function block provides an output that is used as an input to chart block .

The chart block represents a Stateflow diagram that the user builds using Stateflow objects. The chart block may be created by using menu commands present within the Simulink programming model. The chart provides state machine functionality within the graphical programming environment. The chart block provides a means to schedule execution of the function call subsystem block . The control output A and the value output B are provided to the function call subsystem block .

The function call subsystem block represents a subsystem that can be invoked as a function by another block of the model . As used herein a function call subsystem refers to a function whose execution is determined by logic internal to an S function. As used herein an S function refers to a computer language description of a Simulink block. The function call subsystem block executes in response to information or data provided from the chart block . Said another way an action within the chart block invokes the execution of the function subsystem block . This example illustrates what is also known as function call connectivity.

With reference to an abstracted Stateflow diagram is shown. A state diagram is created with a graphical editor not shown that is included as part of the graphical programming environment. The state diagram can include both graphical objects and non graphical objects. Examples of graphical objects include state boxes transitions charts history junctions default transitions connective junctions truth table functions graphical functions embedded MATLAB functions boxes and the like. Examples of non graphical objects include but are not limited to event objects data objects and target objects.

An event is a Stateflow object that can trigger a whole Stateflow chart or individual actions in a chart. Because Stateflow charts execute by reacting to events the user specifies and programs events into charts to control their execution. The user can broadcast events to every object in the scope of the object sending the event or the user can send an event to a specific object. The user can define explicit events that the user specifies directly or the user can define implicit events to take place when certain actions are performed such as entering a state.

A Stateflow chart stores and retrieves data that it uses to control its execution. Stateflow data resides in its own workspace but the chart can also access data that resides externally in the Simulink model or application that embeds the Stateflow machine.

The user can build targets in Stateflow to execute the application the user programs in Stateflow charts and the Simulink model that contains them. A target refers to a program that executes a Stateflow model or a Simulink model containing a Stateflow machine. The user can build a simulation target named sfun to execute a simulation of the model. The user can build a Real Time Workshop target named rtw to execute the Simulink model on a supported processor environment. The user can also build custom targets with names other than sfun or rtw to pinpoint the application to a specific environment.

The state diagram includes a first state and a second state that are connected by transitions . Each of the transitions includes a transition label respectively that describes the circumstances under which a change from one state to another occurs. The transition labels can include any alphanumeric and special character combination or discrete actions. The transition labels can define data events function calls and states. For example transition label can reference off switch while transition label can reference on switch. As expected these labels describe transitions between the on and off states for a switch.

In one embodiment in order to locate the associated graphical element of the graphical programming environment the user selects the transition label . Selection can include but is not limited to clicking highlighting and hovering over the transition label . In one embodiment the transition label is represented as a hyperlink. The properties such as color size and text formatting can be user controller or predefined. In another embodiment the transition label is presented as a hot spot. In such an embodiment when positioning the cursor over the hot spot a context menu as shown in is shown to the user that allows the user to select a locate function. In yet another embodiment the label appears as just regular text and upon highlighting the label or any portion thereof and right clicking the context menu is display to the user that includes an option to locate the related function.

In response to selecting a transition label the corresponding graphical element of the graphical programming environment is located within the graphical model and displayed to the user. In some additional embodiments when the element includes configurable parameters the element is opened for editing by the user. Generally this operation can be described as selecting text in a Stateflow diagram and as a result opening the related Simulink subsystem. It should also be noted that this concept can be applied for use with embedded MATLAB scripts. For example a user can select a variable from within the embedded MATLAB script right click on the selected variable and select the locate function from a context menu.

With reference to a conceptual block diagram is described that provides a system to resolve the location of the graphical element of the graphical programming environment that is associated with the text of the state diagram. In one embodiment the system includes a tokenization module a parsing module a symbol resolution module and a mapping module . Although each module is listed specifically it should be understood that the functionality of each module can be implemented as a single or multiple programming modules.

In operation and with reference to the tokenization module and parsing module tokenize step and parse step the selected text to generate symbols. In one embodiment the parser module and the tokenization module can be implemented as a single module known as FPARSER that is distributed as part of the Simulink program. Operationally FPARSER parses an M file or command line and list tokens and constructs functions keywords variables constants and struct field assignments. It should be understood that other parsing and tokenization modules can be used. In one embodiment the set of grammar rules by the tokenization and parsing module is the parser.yac file which can be found on the included compact disk.

After parsing the text of the transition label the symbol resolution module performs step a hierarchical resolution of the symbols to generate location identifiers. Examples of location identifiers can include but are not limited to data handles function handles event handles and the like. In one embodiment the computer code of the file symbol resolution.cpp which can be found on the included compact disk is used to perform symbol resolution The parsed and tokenized label maybe resolved to a handle that directly identifies the related function call subsystem of the Simulink model.

The mapping module uses the location identifiers to perform event to port mapping step which determines which port of the chart block is associated with the location identifier. The connector from the identified port is followed to its destination to reveal the associated subsystem. Once identified in one embodiment the graphical programming environment is positioned such that it is displayed to the user and opened for editing by the user. In order to position the graphical programming environment a depth first graphical search that is robust to cycles is employed by the mapping module . The mapping function is capable of following goto and from blocks. Also the mapping function can drill down on subsystem ports. For example a subsystem can have another subsystem within itself. In one embodiment the computer code of the file code for mapping.m which can be found on the included compact disk is used to perform the mapping functionality.

The initial abstract syntax tree as shown in contains identifier nodes and function call nodes which have not been resolved to their corresponding objects in Stateflow . An ID field is empty for each of the nodes. In order to generate the contents of the ID fields the symbol resolution module uses a hierarchical name matching scheme. For example the file symbol resolution.cpp on the included compact disk can be used to perform the symbol resolution. At the completion of symbol resolution scheme the ID field of each identifier node and function call node in the abstract syntax tree is populated by the handle of the Stateflow object that represents this symbol.

In one embodiment the Stateflow object handle is an integer number that is used instead of a pointer to identify the object. Stateflow maintains a mapping table not shown between the integer handle and the object pointer thus making them equivalent. Continuing with the above example assume that the handles for the identifiers z a foo and b are 10 23 41 and 7 respectively. The mapping module traverses the abstract syntax tree computes a list of resolved symbols and their associated handles and populates the ID fields of the nodes as shown in . In this example the result is a list of ordered pairs having a string portion and a handle portion as follows z 10 a 23 foo 41 c 7 . In one embodiment the string portions of these ordered pairs are presented to the user in the context menu as options for hyperlinking. When the user selects one of the strings the corresponding integer handle is used to perform the above described hyperlinking or hot looking.

As described the relationship between the text of the Stateflow diagram and the Simulink programming element represents an actively managed mapping between those elements. The relationship can also be thought of as a dynamic link creation between those elements. The relationship is dynamic in nature because the link relationship is created with reference to the current state of the Stateflow and Simulink models. As these models change the links relationships change accordingly.

With reference to other embodiments of an abstracted Stateflow diagram are described. A state diagram is created with a graphical editor not shown that is included as part of the graphical programming environment. The state diagram can include both graphical objects and non graphical objects. The state diagram includes a window portion that displays the parsed and tokenized text of the transitional labels used within the state diagram . In such an embodiment the user can select the parsed and tokenized elements from within the window and have the associated graphical element with which the transition label is associated displayed to the user. In one embodiment the window portion is displayed as part of the graphical state editor. In another embodiment and with reference to the window portion is positionable by the user.

The parsed and tokenized elements can be displayed as hyperlinks. Clicking on the hyperlink invokes the symbol resolution and mapping features of the invention to locate and display the related element of the graphical programming environment. In another embodiment the parsed and tokenized elements are displayed as hot spots. Upon hovering or clicking the hot spot the symbol resolution and mapping features of the inventions are invoked to display the related element of the graphical programming environment.

