---

title: Methods and apparatus for collecting performance metrics from a web site
abstract: A system provides an agent that executes remotely from a web site and can measure performance associated with the web site. The agent obtains a script containing at least one transaction to be performed with the web site. The transaction(s) define a sequence of page requests identifying web pages to obtain from the web site. The agent executes the script to perform the transaction with the web site. Performance of the transaction includes retrieving the sequence of web pages and identifying respective performance metrics including performance metrics associated with obtaining respective objects defined within each web page, and performance metrics associated with obtaining a complete version of each web page. The agent transmits the performance metrics associated with execution of the transaction defined by the script to a repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065410&OS=08065410&RS=08065410
owner: Compuware Corporation
number: 08065410
owner_city: Detroit
owner_country: US
publication_date: 20050909
---
This Patent Application is a Continuation in Part of U.S. patent application Ser. No. 11 094 338 filed on Mar. 30 2005 now abandoned entitled METHOD AND APPARATUS FOR MEASURING AND REPORTING LOADING SPEED OF INFORMATION OVER COMPUTER NETWORKS which claims benefit of U.S. Provisional Application No. 60 557 994 filed on Mar. 31 2004 entitled METHOD AND APPARATUS FOR MEASURING AND REPORTING LOADING SPEED OF INFORMATION OVER COMPUTER NETWORKS and U.S. Provisional Application No. 60 592 813 filed on Jul. 30 2004 entitled SCRIPTABLE TRANSACTION AGENT . The contents and teachings of each of these hereby incorporated by reference in their entirety.

Computer systems coupled to a data communications network such as the Internet allow for the exchange of a wide variety of information between users of such computer systems. One popular use of computer networks such as the Internet allows users to operate client communications software known as a web browser to communicate with remote computer systems known as web servers in order to browse web pages on the World Wide Web. The World Wide Web is generally a collection of web server computer systems that each operates web server software that communicates using a number of different data communications protocols and data formats to allow each user s browser to make web page requests to the web servers. In response to these web page requests web servers obtain e.g. from storage or via dynamic generation the requested web pages and serve those pages back to each user s web browser for viewing by the user.

A typical web page is written in a markup language such as the Hypertext Markup Language HTML and includes a number of embedded objects referenced by respective Uniform Resource Locators URLs within the HTML of a web page. The web page itself is generally referenced by a URL as well. When a user provides a URL to a web browser of a web page the web browser performs a detailed sequence of processing tasks to obtain that web page. As an example if the URL of the web page identifies a domain name of a server computer system on the Internet the web browser must first perform a Domain Name Service DNS lookup of the domain name to resolve this alphanumeric name into the Internet Protocol IP address of the web server on the Internet that can serve the page referenced by the URL. Once this DNS lookup is complete the web browser establishes a connection to the web server e.g. a Transmission Control Protocol or TCP connection and uses a Hypertext Transport Protocol HTTP to transmit a web page GET request over the connection to the web server. The HTTP GET request contains the URL of the web page to be served by the server. The web server receives this HTTP GET request obtains or dynamically generates the web page and returns the web page as HTML to the web browser in an HTTP response message over the connection.

As the web browser receives the HTML for the web page the HTML of the web page may include many embedded URL s that define other objects within the web page to be obtained by web browser. As an example a graphic or image embedded within the web page is typically referenced with an embedded URL that specifies a server and location within the server of that graphic or image. As the web browser encounters objects such as embedded URL s within the web page the web browser repeats the sequence of processing described above the URL for the web page in order to obtain each embedded object this can include performing a DNS lookup of the domain name specified in the URL if that domain name was not previously resolved establishing a connection to a server and initiating an HTTP get request to obtain the content associated with the embedded URL. Modern web pages often contain many embedded objects and URLs that reference these objects often specify different server computer systems from which to obtain these objects. As a result the process of obtaining the complete content associated with a single web page including all embedded objects involves significant processing and communications activities.

Sophisticated web server software systems allow a user to visit the web site using his or her browser in order to perform transactions within the web site such as purchasing goods or services. Performance of the transaction with a web site typically involves the user operating the web browser to initially navigate to the homepage of the commercial web site. From the homepage the user is able to further navigate to other pages associated with the web site in order to perform the transaction such as for example selecting goods or services to be placed into an electronic or virtual shopping cart maintained within the web server. When the user has completed the selection of goods and services to be purchased the user can further navigate within the web site to one or more purchasing web pages that allow the user for example to enter credit card information for payment of the selected goods and services. The web server software is able to process the credit card payment and allow or deny the purchase of the selected goods and services to complete the transaction. A single transaction might involve visiting and providing user input to a sequence of many web pages.

Other types of transactions might involve navigating through a sequence of web pages to obtain desired content performing searches for user specified information and so forth. Depending upon the purpose of the web site a typical user transaction can involve a user visiting a number of pages and providing user input on those pages. The web server often uses input from one or more pages to produce successive web pages in a given transaction.

Many organizations such as corporations universities and web based businesses rely heavily on the ability of their web site to properly perform transactions without errors. Because of the importance of ensuring that such web sites are operating properly software developers have produced a number of conventional tools to exercise and test a web site and measure the performance of that web site s ability to process user transactions correctly and efficiently.

One conventional web site testing and performance measurement tool and is a first generation web site testing tool and is also referred to herein as a single web page test tool. A first generation single web page test tool allows an operator of the tool to provide a single URL of a single web page to the tool. In response to receiving this URL the tool is able to initiate a web page request for the web page located at the URL and is able to measure and collect certain performance ratings of the web site with respect to how fast the web server returns the web page in response to initiating the request for the web page using the URL. As an example one conventional performance measurement tool is able to initiate a request for a web page and track the amount of time required to establish a connection to the web server that serves that web page. Additionally the conventional first generation single page test tool is able to determine the amount of time required to begin receiving data for the web page and the amount of time required for the entire web page to be delivered back to the test tool. Additionally the conventional test tool is able to parse hypertext markup language HTML to determine if the web page was properly returned from the web server.

More sophisticated second generation web server performance and testing tools provide the ability to specify a sequence of web pages to be obtained from a web site. Such conventional web testing tools are referred to as second generation web testing tools and operate by wrapping an actual web browser with a software program to essentially remotely control the web browser using software application programming interfaces APIs to cause the browser under control of the test tool to visit sequence of pages to perform a transaction with web server.

Conventional technologies for measuring and testing the performance of transactions on web sites suffer from a variety of deficiencies. In particular a key weakness of the conventional first generation tools is that they can not parse JavaScript and therefore miss many page objects which limits the ability to accurately measure page performance. While conventional second generation web testing tools offer the ability to remotely control browser software to perform an entire transaction associated with web site the granularity or amount of detail that can be obtained concerning the performance of the web site by such conventional second generation tools is significantly lacking on a page by page basis in comparison to the first generation single page web testing tools. In the background above it was noted that conventional first generation single page web testing tools are capable of collecting detailed performance ratings for a single web page. The reason the first generation single page web test tools are able to do this is because the test tool is specifically written to measure the timing metrics for that single individual page. Such conventional single page tools are not readily adaptable to collecting such metrics for entire sequence of pages involved in a complex transaction with a sophisticated web site. This is because the single page web test tools do not fully emulate a web browser and are not fully capable of maintaining web browser state information such as cookies or other data that are often required when carrying out a multi page web server based transaction.

While the conventional second generation web testing tools can control an actual browser to perform transactions the amount and granularity or detail of data that is available using software application programming interfaces that control the browser severely limits the amount of details concerning the performance of a web transaction on a page by page and object by object basis. As an example using conventional web testing and performance measurement tools there is no way to query a conventional web browser to inquire as to the amount of time required to obtain the first byte of data from a web server for a particular web page requested with a URL. Likewise no data is available from a wrapper driven browser concerning detailed metrics for each object in that page. Accordingly though the second generation web testing tools can indicate whether or not a transaction was able to be successfully completed with a web site as a whole i.e. that all pages were obtained such tools lack the ability to provide detailed performance metrics concerning individual pages or objects loaded during the transaction.

Embodiments of the invention significantly overcome these and other deficiencies associated with conventional web site testing and performance measurement systems and provide a system methods and apparatus that includes an agent such as a software process that executes remotely from a web site and is operable to measure performance and operability of the web site. The agent is able to exercise a full transaction with a web site while at the same time obtaining a level of granularity including detailed performance metrics associated with each web page and each object embedded within those web pages for the entire transaction.

As an example the typical transaction with a web site might involve visiting ten pages. Each of those pages might references numerous objects and require sophisticated user input to complete the transaction. An agent configured in accordance with embodiments of the invention described herein is able to remotely operate the full transaction while collecting details performance metrics. For each page within the transaction the agent is able to track and measure detailed performance metrics associated with that web page and associated with each object referenced by that web page. As an example the agent as disclosed herein is able to track time requirements to perform DNS lookups for URLs and is also able to track and measure amounts of time required to receive a first byte of the web page and the first byte of each object embedded within that web page as well as full amount of time required to receive each object associated with the web page as well as the time required to obtain the entire web page. The agent can track many other metrics as will be explained in detail herein.

The agent described herein is preferably embodied as a software application and executes as a software process on a computer system coupled to the communications network such as the Internet. The agent executes autonomously and emulates a full functionality of a web browser as opposed to wrapping and remotely controlling a third party web browser as is done in conventional second generation web site testing systems. In other words the agent described herein includes software code written from the ground up to fully emulate functionality of a browser as required to perform complex transactions with web site. Since the agent does not merely remotely control a browser such as Internet Explorer made by Microsoft Corporation of Redmond Wash. USA developers of embodiments of the invention were able to build a sophisticated performance metrics tracking system from the ground up to enable the collection of detailed performance data concerning all aspects of a web based transaction. As a result the amount of information obtained concerning the performance and execution of a transaction with a web site using embodiments of the invention is significantly more advanced than conventional first or second generation web testing tools.

The agent apparatus processing and system described herein is script based. Thus the agent can execute remotely as an autonomous process on a computer system located anywhere in the world that is coupled to the Internet. In one configuration of the system there are many agent distributed throughout the world on different agent computer systems that can each operate scripts to test web sites from that geographic area. Many agents can operate on a single computer to provide the ability to concurrently execute many scripts.

The agent is capable of receiving a script that defines a sequence of page requests associated with the transaction to be performed with a web site. Each page request defined in a script can identify a particular web page to be obtained from a web server and can further defined expected web page data that indicates to the agent certain data that should be present within the returned web page from a web server. This allows the agent to verify the contents of the web page associated with the page requests against the expected web page data to verify if at least a portion of the contents of the web page is consistent with the expected web page data. Additionally the script can include post script data that defines emulated user input to be provided to the page to simulate or emulate user activity and input of the transaction with respect to that web page. As will be explained in detail herein after the page is successfully received by the agent and the performance metrics have been collected with respect to obtaining all embedded objects within that web page the agent can obtain the post script data that defines the user simulated input to be provided to the page and is able to invoke the post script data against the web page to provide input to the web page to simulate a user activity of the transaction. In this manner embodiments of the invention are able to fully simulate all types of user interactivity with web pages. In one configuration the post script data within the script that defines the simulated user input is JavaScript that the agent executes to simulate user activity against the web page.

Configurations of the invention as disclosed herein thus provide an agent that executes remotely from a web site and measures performance associated with a web site by obtaining a script containing at least one transaction to be performed with the web site. The transaction s defined in the script define a sequence of page requests identifying web pages to obtain from the web site. The agent executes the script to perform the transaction with the web site. Performance of the transaction includes retrieving the sequence of web pages and identifying respective performance metrics including i performance metrics associated with obtaining respective objects defined within each web page and ii performance metrics associated with obtaining a complete version of each web page.

In a bit more detail in one configuration each page request in the script specifies a uniform resource locator of a web page on the web site associated with the transaction. Executing the script to perform the transaction with the web site comprises for each page request defined in the script issuing a request for the web page to be served from the web site using the uniform resource locator specified in the page request. During retrieval of the web page the agent detects objects embedded in that web page. For each object embedded in the web page the agent issues a request to obtain the object embedded in the web page using a uniform resource locator for that object as specified in the web page and tracks respective performance metrics related to obtaining that object using the uniform resource locator for that object as specified in the web page.

As an example depending upon the configuration the agent is able to track a time to obtain a first object byte of that object at the agent in response to issuing the request to obtain the object. The agent can also track a total object time to obtain a complete version of content for that object at the agent in response to issuing a request to obtain the object and can track a number of bytes obtained for that object. The agent can also track a content type of that object that indicates a type of object downloaded using the uniform resource locator for that object as specified in the web page. The agent can identify in the performance metrics the uniform resource locator host and uniform resource locator page used to obtain the object and can further identify a response code associated with downloading the object. The response code indicates success or failure of downloading that object. The agent is able to track detailed performance metrics for each object within each page of the transaction.

Accordingly the amount of performance metrics and granularity of data collected concerning performing a transaction with a web site is significantly more advanced than any conventional web site performance measurement systems. After retrieving pages in a transaction which includes calculating tracking and measuring the performance metrics for each page of that transaction the agent transmits the performance metrics associated with execution of the transaction defined by the script to a repository. Thereafter the agent can perform processing briefly discussed above to validate the contents of the web page and to simulate user input to the web page using post script user data defined in the page request for that page as specified in the script that defines the transaction. Further details of these and other processing operations will be described in detailed description section that follows.

Other embodiments of the invention include any type of computerized device workstation handheld or laptop computer or the like configured with software and or circuitry e.g. a processor to process any or all of the agent operations disclosed herein. In other words a computerized device or a processor that is programmed or configured to operate in accordance with the system as explained herein is considered an embodiment of the invention.

Other embodiments of the invention that are disclosed herein include software programs to perform the steps and operations summarized above and disclosed in detail below. One such embodiment comprises a computer program product that has a computer readable medium including computer program logic encoded thereon that when performed in a computerized device having a coupling of a memory and a processor and a communications interface programs the processor to perform the operations disclosed herein. Such arrangements are typically provided as software code and or other data e.g. data structures arranged or encoded on a computer readable medium such as an optical medium e.g. CD ROM floppy or hard disk or other a medium such as firmware or microcode in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit ASIC . The software or firmware or other such configurations can be installed onto a computerized device to cause the computerized device to perform the techniques explained herein.

It is to be understood that the system of the invention can be embodied strictly as a software program as software and hardware or as hardware alone such as within a processor or within an operating system or a within a software application and that the agent can execute in any type of computer system. Example embodiments of the invention may be implemented within products and or software applications manufactured by Gomez Inc. of Lexington Mass. USA.

As noted in the summary above the agents are operable to obtain one or more scripts from the agent command and control process . Each script defines one or more transactions that may be performed with one or more of the web servers operating in the web server computer systems . As a brief example the web servers may be commercial web servers operated by business organizations that sell goods or services on the Internet. The business organizations may pay a fee to have a script developed by the operator e.g. the assignee of the present invention to perform various transactions with the web servers . Once the operator has created a script and that encapsulated information associated with performance of the transaction with the web server the agent command and control process can propagate and script to the agent computer systems for receipt by the scheduler . The scheduler receives the script and places in any script database that is local to the agent computer system . The scheduler also receives scheduling information from the agent command and control process that indicates how frequently scheduler should activate or execute the script within an agent . In one configuration scheduling information may be embedded within the script .

Upon occurrence of the time to execute the script the scheduler provides the script from the script database to the agent for execution. As will be explained in detail the agent is able to execute the transaction s defined within the script in conjunction with the web server to perform the scripted transaction on the web site of the business organization. During performance of the transaction the agent is able to collect detailed performance metrics concerning all aspects performance of the transaction with respect each web page involved in the transaction.

Prior to providing a description herein of the detailed processing steps performed by the agent to process a script to carry out a transaction with a web server an examples script is provided below along with the brief explanation of its contents and sections in order to assist in understanding the remaining discussion.

In the above script the numbers in square braces have been added in this document for purposes of identifying specific items in this script. As an example 802 1 on line 3 of the script has been added and is not considered to be part of the actual script . The above example script is shown in extensible markup language XML and contains several page requests that collectively define a transaction entitled Wachovia as shown at location 800. The first page request begins at location 802 1 and is requesting a web page at the URL http www.wachovia.com. This particular script is for a single transaction that includes a total of five page requests 802 1 through 802 5. Though most parts of this example script will be explained with reference to the detailed step by step processing in flow charts below some aspects of the content of page requests 802 will be introduced at this point to assist in understanding that later discussions.

The example first page request 802 1 in this example script defines the URL 804 1 http www.wachovia.com as the first page to be obtained from the web site for this transaction. This first page request ends at location 806 1 shown by the XML end element tag . Within the page request 802 1 there are several other parts defined by XML element tags.

In particular the post script data section beginning at location 808 1 and ending at location 809 1 defines base 64 encoded JavaScript that is user script to be executed by the agent to simulate user input once the page at the URL for this page request 802 1 has been fully obtain by the agent from the web server that serves this page. In other words the post script data section 808 1 of page request 802 1 defines input to be provided to the page to simulate user activity of the transaction with respect to that web page of the transaction and is JavaScript that the agent can interpret to provide the appropriate user input for this first page. Each page request 802 can include a post script data section 808 to simulate user input to that page if required. Such post script data user input can be used by the agent for example to simulate a user entering form data into form fields defined in the web page once that page has been obtained from the URL of the page request 802.

The next section of the page request 802 1 labeled with the XML tag at location 810 1 includes a parameter having a name http www.gomez.com settings html preparse script followed by a encoded base 64 Javascript at location 811 1. The section 811 1 of the page request 802 1 is referred to herein as page correction data and defines modifications to be made to the web page data after retrieval to correct for page errors in the web page. The page correction data specified at location 811 1 covers a situation that may arise if HTML from the web server received by the agent is broken in that an object download incorrectly from the web page by that the object failure is not fatal to the execution of the transaction. Thus the Javascript at location 811 1 modifies the HTML in a document object model DOM of the HTML maintained by the agent to correct for page problems.

As shown at locations 814 1 and 814 2 the page request 802 1 also includes content match sections that define expected web page data indicating data that is to be present within a web page obtained form the URL of this page request 802. In this example page request 802 1 the two expected web page sections 814 1 and 814 2 indicate that a userid and password fields must be present on the web page obtained from this page request 802 1. After this page request 802 1 four other page requests 802 2 through 802 5 are defined in this example script . Note that the page request 802 2 defines the page to be obtained upon a user clicking submit or enter after they have input their username and password. Thus the first page request 802 1 indicates the first page of the transaction and user input 808 1 to be provided to that page other than the actual click of the submit button that would generate the next HTTP GET request. The agent thus provides the user input 808 1 such as a username and password of a user to log into the Wachovia web site and the next page request 802 2 encountered in the script by the agent causes the agent to actually issue the next HTTP GET request. Note that not all page requests 802 require user input such as page request 802 2.

From the foregoing brief description of the content of an example script a more detailed description of operation of the agent can now be provided with respect to the flow chart of processing steps in . During the discussion of steps and operations in these flow charts reference will be made back to this example script as well as to .

In step the agent obtains a script containing at least one transaction to be performed with the web site. The transaction s define a sequence of page requests 802 identifying web pages to obtain from the web site .

In step the agent executes e.g. interprets parses etc. the script to perform the transaction with the web site. Performance of the transaction includes retrieving the sequence of web pages based on page requests 802 in the script and identifying respective performance metrics including i performance metrics associated with obtaining respective objects defined within each web page and ii performance metrics associated with obtaining a complete version of each web page .

In step for each page request 802 defined in the script the agent issues a request e.g. an HTTP GET request for the web page to be served from the web site using the uniform resource locator specified in the page request 802.

In step during retrieval of the web page the agent detects objects embedded in that web page . An embedded object is for example an embedded URL within a web page referencing an object such as a graphic image video JavaScript or the like.

In step the agent enters a processing look that is performed for each object embedded in the web page .

In step the agent issues a request to obtain the object embedded in the web page using a uniform resource locator for that object as specified in the web page .

In step during retrieval of each object the agent tracks respective performance metrics related to obtaining that object using the uniform resource locator for that object as specified in the web page . In this manner as each object in each web page is obtained detailed performance metrics for that object can be collected and stored by the agent . An example of such performance metrics will be given shortly.

In step the agent transmits the performance metrics associated with execution of the transaction defined by the script to a repository. In one configuration when the transaction is complete and all pages have been downloaded exercised with user input as will be explained more fully later and all performance metrics for each object each page and the transaction as a whole are complete the agent places the performance metrics into its local database for transfer back to the repository computer system . Thereafter the agent command and control process can post process the performance metrics for analysis of web site performance and operability.

In the above script the numbers in square braces have been added in this document for purposes of identifying specific items in this script. As an example 820 on line 2 of the script has been added and is not considered to be part of the actual script . Notice that this script above is short and contains only one page request 802 1 that specifies load the home page for cnn.com at http www.cnn.com ALLPOLITICS. Note that not user input data in the form of post script data is provided in this example script . A few other notes about this script illustrate other features of configurations disclosed herein. In particular at line 1 a parameter in the script is defined as doObjectDownloads true . This parameter indicates to the agent that performance metrics at the object level for this transaction are to be collected. Another parameter called doPageSummary true indicates that for each web page specified by a page request only performance metrics concerning the overall page are to be tracked calculated and maintained for the web page s specified by page requests 802 in the script as opposed to all object level metrics. Lastly the parameter deadline 300 indicates that the agent is to set a timeout for completion of the transaction to be 300 seconds. Further note that in the page request 802 10 in this example script various other parameters are specified for preparation of a proper HTTP GET request for the page located at the URL http www.cnn.com ALLPOLITICS. In this manner the script allow a developer to specify intricate particulars of type of requests to be provided for web pages as well as what performance metrics are to be collected during operation of the transaction s defined in the script.

Example output of this script including transaction summary performance metrics page summary performance metrics and object level summary performance metrics is shown below followed by a brief discussion of the performance metrics output from the agent for transmission to the repository computer system .

Below is the actual performance metrics that are output from execution of the second example short script by an agent note the length and detail of the metrics even for such a short transaction illustrates the benefit of the system of the invention by showing how detailed the transaction analysis is. The output performance metrics are shown below 

In the above performance metrics the numbers in square braces have been added in this document for purposes of identifying specific items in this output and are not considered to be part of the actual example performance metrics .

As can be seen from the above sample collected performance metrics significant details of performance of a transaction are collected by embodiments of the agent processing explained herein.

In step the agent tracks respective performance metrics related to obtaining each object using the uniform resource locator for that object as specified in the web page . Steps through show details of this processing.

In step the agent determines a domain name system DNS resolution time indicating as shown at location 830 in the above example for each uniform resource locator associated with the web page . This is maintained in a Host section of the performance metrics that summarizes the performance metrics associated with connecting to each host required for all objects in the transaction. As an example detailed metrics can be collected on hosts contacted during the transaction as shown by this section concerning host performance metrics as taken from the above performance metrics 

Note the amount of details that the agent collects concerning the connections and host metrics. Many are self explanatory from a review of the above metrics. The DNS resolution time is an amount of time required to perform resolution of a domain name into a network address. This performance metric can be tracked for any URL that needs a DNS resolution. In this example the DNSStart and DNSTime parameters represent time metrics for DNS processing. DNSStart is the timestamp of the start of the DNS time while DNSTime is the duration of the DNS lookup processing including all communications to perform the lookup. Also collected for DNS resolutions are performance metrics related to number of connections made number of bytes transferred number of errors encountered and the like. After the Host section of the performance metrics for each page request in the script there is a Page Summary section of the performance metrics as shown for example at location 831 on the second or third page of the performance metrics above in the sample output. The PageSummary section e.g. 831 summarizes times and error codes relevant to obtaining the overall page. Following each PageSummary section 830 are a set of zero or more object summary labeled ObjectSummary sections one for each object of the web page corresponding to that page request 802. An example object summary is shown at location 833.

In step the agent determines a secure sockets layer SSL handshake time indicating an amount of time required to perform an SSL exchange to establish a secure connection between the agent and the web site . This is optional and applies if SSL is used. The above example agent performance metrics do not include an example of SSL handshake time.

In step and as shown at location 832 in the sample output above the agent tracks a time to obtain a first object byte of an object at the agent in response to issuing the request to obtain the object. As an example as shown generally at location 840 performance metrics collected on a per object basis are numerous. The time to first byte is an amount of time required from the invocation of the URL GET request to the time the first byte arrives at the agent . This time provides an accurate reflection of how well the web server is performing since the web server must full prepare the object before returning its first byte to the agent .

In step and as shown at location 834 in the sample performance metrics above the agent tracks a total object time to obtain a complete version of content for that object at the agent in response to issuing a request to obtain the object. Total object time may be a collection of one or more time values such as a content start time stamp contentStart in the example a total content time contentTime and a response time responseTime . Total object time is equal to responseTime and responseTime is equal to the sum of firstByteTime and contentTime

In step the agent tracks a content type of that object as shown at location 837. The content type 837 indicates a type of object downloaded using the uniform resource locator for that object as specified in the web page

In step the agent identifies in the performance metrics as shown at locations 838 and 839 the uniform resource locator host and uniform resource locator page used to obtain the object

In step and as shown at location 840 the agent identifies a response code associated with downloading the object. The response code 840 indicates success or failure of downloading that object.

Using the aforementioned collected performance metrics detailed analysis of web site performance may be achieved indicating specific pages and objects within those pages of a multi page transaction that are performing below average in relation to other pages other transactions or other objects.

In step the agent issues a request for the web page to be served from the web site using the uniform resource locator specified in the page request 802.

In step the agent obtains a page time limit from the script. The page time limit indicates a total amount of time to wait for the entire page including all objects before giving up. Thus the script can specify how long of a time to wait before indicating a page error from a server.

In step the agent identifies respective performance metrics associated with obtaining a complete version of each web page. Performance metrics for a web page can include summarizations of object performance metrics for all objects loaded in that web page.

In step the agent identifies a total number of objects embedded in the web page for which respective uniform resource locator requests must be made to obtain those objects from a remote computer system. This metric tracks total objects per page as shown at location 845 in the example output above.

In step the agent identifies from a plurality of different possible levels of response codes respective response codes associated with obtaining objects embedded in the web page. Response codes are shown at location 850 in the example performance metric output above. Each respective response code indicates a category of success of failure with respect to obtaining objects embedded in the web page. Respective response codes are tracked for different response code levels such as 200 level HTTP codes 300 level HTTP codes 400 level and 500 level web page errors. Likewise counts of numbers of objects that result in network errors are also tracked.

In step the agent identifies a total number of hosts that are contacted during downloading of the web page to obtain objects associated with the web page. Total host count is shown at location 852 in the example output.

In step the agent identifies a total number of connections used to obtain objects embedded in the web page from remote computer systems. This is shown at location 853 in the example performance metrics shown above.

In step the agent tracks a total processing time indicating an amount agent processing required during a transaction. As shown as the performance metric processignTime at location 854 in the example performance metrics shown above processingTime is the amount of time that the agent spends parsing HTML and JavaScript while downloading the page. processingTime is an internal metric used to track the amount of work the agent needs to do to handle the transaction and does not include the network download times that are captured in the response time metrics.

In step the agent determines if the total page download time exceeds the page time limit obtained from the script and if so indicates a page timeout error in performance metrics associated with the page. In this manner if a total time to download a web page exceeds the page timeout limit established in step above an error is indicated as pageTimeoutStatus at location 855 in the example performance metrics above. In the example pageTimeoutStatus is set to 0 since there was no page timeout.

In step the agent performs the transaction including identifying respective performance metrics as noted above.

In step the agent determines total transaction metrics. Details of identifying transaction metrics are shown in steps through .

In step the agent determines a total number of pages that loaded successfully and determines a total number of pages within the transaction that failed to load properly. These metrics are shown at locations 856 and 857 as numPagesSuccess and nmuPageFailed in the example performance metrics shown above.

In step the agent determines a total number of objects within all pages specified in the transaction that loaded successfully as shown at location 858 numObjects in the example performance metrics shown above.

In step the agent determines a total number of objects within all pages specified in the transaction that failed to load properly as shown at location 859 numObjectsFailed in the example performance metrics shown above.

In step the agent identifies a total number of hosts that are contacted during downloading of all web pages in the transaction as shown at location 860 numHosts in the example performance metrics shown above.

In step the agent identifies a total number of connections used to obtain objects embedded in web pages from remote computer systems in the transaction as shown at location 861 numConns in the example performance metrics shown above.

As can be seen from the amount of details collected for each page in a transaction the agent is quite robust.

In step the agent retrieves the sequence of web pages. Details of processing involved to carry out the above noted operations are shown in steps through .

In step the agent obtains from the script page correction data 811 1. An example of page correction data 811 1 is shown in the first example script for the Wachovia transaction. The page correction data 811 1 is base 64 encoded JavaScript.

In step the agent invokes the page correction data 811 1 against the web page to modify downloaded web page content to correct for page errors in the web page. Page errors may be present in certain objects due to poor HTML web page design. Steps and correct for these page errors.

In step the agent verifies contents of the web page associated with the page request 802 against expected web page data 814 1 and 814 2 to verify if at least a portion of the contents of the web page is consistent with the expected web page data 814. This allows the agent to verify that the web server served the proper web page to the agent in response to issuing the URL specified in the page request 802 e.g. www.wachovia.com for page request 802 1 in the above example script .

In step the agent obtains from the script post script data 808. As noted in the above example script the post script data section beginning at location 808 1 and ending at location 809 1 defines base 64 encoded JavaScript that is user script to be executed by the agent to simulate user input once the page at the URL for this page request 802 1 has been fully obtain by the agent from the web server that serves this page. The purpose for providing the JavaScript in base 64 is so that the XML data format of the script is not disturbed with JavaScript characters. It is noted that other encoding formats can be used as well besides base 64.

In step the agent invokes the post script data against the web page after retrieval of the web page to provide input to the web page to simulate user activity of the transaction with respect to that web page of the transaction.

In this manner the agent can obtain a page while tracking transaction page and object level metrics verify the page content correct for any page errors and provide user input to the page thus furthering the transaction on its course to completion. Each page request 802 can include some of all of this processing. For example some pages may not require user input and thus no post script data section need be defined for the page request for that page .

In step the scheduler obtains the script from the agent command and control process via a network connection on the network . Details of this processing are shown in steps through .

In step the scheduler receives the script and a script execution schedule via a network connection. The script execution schedule indicates when the script is to be run executed or otherwise performed by the agent executing the script as defined herein .

In step the scheduler places the script in a script database . The script database can contain any number of scripts that each defines any number of transactions with any number of web sites. There can also be more than one scheduler and more than one agent operating on each agent computer system .

In step the scheduler tracks the script execution schedule to determine when to execute the script to exercise the transaction against the web site .

In step the scheduler detects a time to execute the script according to the script execution schedule and in response passes the script to the agent thus operating the agent to obtain the script from the scheduler using an inter process communication mechanism such as TCP socket communications.

In step in response to receiving the script the agent performs the operations of executing the script and transmitting the performance metrics associated with execution of the transaction defined by the script to a repository maintained by the agent command and control process .

In this manner the scheduler manages receiving the scripts and coordinating invocation of scripts on each agent in an agent computer system .

In step the agent executes the script to perform the transaction with the web server serving a web site.

In step the agent detects an error during retrieval of a web page defined by a page request 802 in the transaction. The error may be a page cannot load error or an error the occurs after the page has loaded but during execution of post script data that is providing user input to the page. Any type or level of error may be detected to trigger this action.

In step in response to detecting the error the agent captures as performance metrics for that web page contents of any loaded web page data that would be rendered to a browser screen if the web page containing the error were viewable by a user. The contents of any loaded web page data represents the appearance of the browser screen upon occurrence of the error. As a result the agent is able to perform a screen capture upon occurrence of an error and can put this screen capture from memory into the performance metrics that are transported back to the agent command and control process operating on the repository computer system .

In step the agent transmits the performance metrics associated with execution of the transaction defined by the script to a repository .

In step the agent transmits the captured contents of any loaded web page data to the repository to allow a user of the repository to view a rendition of how the browser screen would have appeared upon the error if the agent were an actual user. This allows an operator of the repository computer system to determine exactly how a browser display would have appears if an actual user has been performing the transaction upon occurrence of the error.

While configurations of the system and method have been particularly shown and described with references to configurations thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention. Accordingly the present invention is not intended to be limited by the example configurations provided above.

