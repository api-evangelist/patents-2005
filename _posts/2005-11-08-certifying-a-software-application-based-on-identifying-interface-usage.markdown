---

title: Certifying a software application based on identifying interface usage
abstract: Embodiments of the present invention provide a mechanism for certifying the compatibility of a software product by identifying the interfaces (API or ABI) used by that product. The source code or object code of a component is analyzed by a tool that traces which interfaces and data structures of an ABI/API are being utilized. For example, an ISV or IHV may be required to run the tool on their respective components in order to have that component certified with a particular version of an operating system and submit the results to a certification service. The certification service may collect this API/ABI information into an integrated database. The certification service may then use this database to analyze the impact of changes to an operating system at the binary interface level, proactively notify vendors prior to these changes, test compatibility and emulation libraries, and certify components are compatible with an operating system without the need of significant testing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08332817&OS=08332817&RS=08332817
owner: Red Hat, Inc.
number: 08332817
owner_city: Raleigh
owner_country: US
publication_date: 20051108
---
In the computer industry customers would like to know which components of hardware firmware software etc. will work well together. Accordingly most vendors test and certify the compatibility of their products. For example independent software vendors ISVs and independent hardware vendors IHVs will certify which of their specific products are compatible with a particular version of an operating system or version of software. Typically the certification process involves running a suite of tests on one or more computer systems that include the product to be certified.

Unfortunately the variety of configuration options of computing equipment and software has increased tremendously. There is now a wide range of options in processors chipsets peripherals storage devices device drivers available for use in computer systems. This results in a virtually endless range of possible configurations for computer systems and its software. In addition the available options for computer systems are constantly changing as products are updated or as new products are released. Thus most vendors can only test their products in a limited number of configurations which do not account for all of the available options. This increases the risk that a product will not work in a particular system even though it has been certified.

For example as operating systems are updated the libraries and interfaces to the operating system may change. This ultimately affects the compatibility of application programs that rely on the operating system. Typically developers have had to conduct extensive testing and adjust their application programs after the fact. This can be a difficult and time consuming task.

Accordingly it may be desirable to provide methods and systems for efficiently testing and certifying the compatibility of products.

In accordance with one feature of the invention a method of certifying a compatibility between software components is provided. A set of interfaces used by a first software component to operate with a second software component is detected. It is then determined whether changes to the second software component affects the set of interfaces used by the first software component. The first software component can be certified it is compatible with the second software component based on whether changes to the second software component affects the set of interfaces used by the first software component.

In accordance with another feature of the invention a method of certifying compatibility of a software component is provided. A first version of an operating system is identified that the software component has been certified. A set of interfaces between the first operating system and the software component is detected. It is then determined whether there are changes to the set of interfaces from the first version of the operating system to a second version of the operating system. Effects of the changes to the set of interfaces to the software component are determined. The software component can then be certified with the second version of the operating system based on the effects of the changes.

In accordance with another feature of the invention a method of indicating an impact to changes to a base software component on at least one additional software component is provided. Interfaces used by the at least one additional software component to operate with the base software component are gathered. Changes between versions of the base software component are determined. Effects of the changes on the gathered interfaces used by the at least one additional software component are also determined. Information is then provided that indicates which packages include the base software component and the at least one additional software component affected by the changes on the gathered interfaces and information that indicates how at least one additional software component was affected.

In accordance with another feature of the invention a system configured to collect information about interfaces used by a first software component to operate with a second software component is provided. The system may comprise a scanner a comparator and an emitter. The scanner is configured to detect a set of interfaces used by the first software component to operate with a second software component. The comparator is configured to determine whether changes to the second software component affects the set of interfaces used by the first software component. The emitter is configured to provide information about the detected set of interfaces and an impact of changes to the second software component.

Additional features of the present invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention.

Virtually all computer systems rely on some form of an operating system such as UNIX Linux Microsoft Windows etc. An operating system is an integrated collection of routines that service the sequencing and processing of programs and applications run by a computer system. In general an operating system provides various services for accessing the components of the computer such as resource allocation scheduling input output control and data management.

Application programs run on top of the operating system and utilize what are known as an application programming interface API and an application binary interface ABI in order to interface the operating system. An API defines the interface between an application program s source code and the operating system s libraries. API compatibility relates to when the same source code will compile on any computer system having the same API.

An ABI of an operating system describes the low level interface between an application program and the operating system between the application program and its libraries or between component parts of an application and the operating system. ABIs relate to details such as calling conventions system call numbers the binary format of object files program libraries etc. ABI compatibility or binary compatibility relates to when compiled object code can function without any changes on any computer system having an operating system with the same ABI.

When an operating system or one of its components is updated either the API or ABI may be affected. This in turn may affect the functionality of an application program or other component that relies on the operating system. Some embodiments of the present invention provide a mechanism for certifying the compatibility of a software product by identifying the interfaces API or ABI used by that product.

The source code or object code of a component is analyzed by a tool that traces which interfaces and data structures of an ABI API are being utilized. For example an ISV or IHV may be required to run the tool on their respective components in order to have that component certified with a particular version of an operating system and submit the results to a certification service. The certification service may collect this API ABI information into an integrated database. The certification service may then use this database to analyze the impact of changes to an operating system at the binary interface level proactively notify vendors prior to these changes test compatibility and emulation libraries and certify components are compatible with an operating system without the need of significant testing.

Reference will now be made in detail to embodiments of the invention examples of which are illustrated in the accompanying drawings. For purposes of explanation are described with reference to certifying the compatibility of a component from a vendor with one or more sets of installed program code. The component may be any form of hardware software firmware or the like. The installed program code may generally refer to various types of software such as the operating system device drivers and the like that are installed on a system. For example the program code may be a particular operating system kernel such as a LINUX kernel BIOS device driver libraries and the like. However one skilled in the art will recognize that the certification processes of the present invention may be applied to confirm the compatibility of any combination of hardware or software that is desired.

The entities of system may communicate with each other in a variety of ways. For example as shown in the entities of system may be coupled through a network . Network may be implemented using the Internet or other network.

Alternatively the entities of system may communicate with each other indirectly. For example vendor and testing organization may provide to and receive its information from certification service in the form of a computer readable medium such as a compact disc.

The specific entities of system will now be further described. Vendor may be any provider of hardware or software such as an ISV or IHV. Vendor may also provide various other services related to its products such as update information technical support and the like. Vendor may provide these products and services directly or indirectly.

In some embodiments vendor may implement a testing environment to perform certification testing for its components. In particular vendor may implement testing environment to test one or more of its components using an interface discovery tool . Although shows vendor with a single testing environment and interface discovery tool one skilled in the art will recognize that vendor may operate any number of these systems. Exemplary implementations of testing environment and interface discovery tool will now be further described.

Testing environment may comprise one or more servers and testing software such as interface discovery tool . Such equipment and software are well known to those skilled in the art. For example this equipment controls and monitors the testing of an application program by interface discovery tool . In addition the equipment of testing environment may report the results of any testing back to certification service . In some embodiments the servers of testing environment may run interface discovery tool which is provided by certification service .

Interface discovery tool provides a tool for checking an application program s usage of an operating system s interfaces. Interface discovery tool may test a component or application program based on source code or object code. As noted above when testing source code interface discovery tool provides information about the API usage of the software component. When testing object code interface discovery tool provides information about the ABI usage of a software component. In some embodiments interface discovery tool may be primarily configured to determine ABI usage since most components or application programs are shipped in the form of object code. However interface discovery tool may analyze either type of interface.

Interface discovery tool may be based on tools that are known to those skilled in the art. For example tools such as Appcert Apptrace from Sun Microsystems Inc. and ABIcheck for Linux operating systems are known tools that check and output the ABI usage of a software component. Interface discovery tool may output a complete list of the interfaces in a flat file a formatted table or some other data structure.

Interface discovery tool may be implemented to examine various object code files that are associated with an operating system. For example executable and linkable format ELF is a common standard used in many operating systems. Interface discovery tool may also be configured to focus on tracing the usage of shared libraries and various symbols.

Vendor may also have its testing performed by another entity such as testing organization . For example testing organization may be an organization that specializes in testing certification or development purposes. These organizations are well known to those skilled in the art.

In some embodiments testing organization may be sponsored or authorized by the same organization that operates certification service . As shown testing organization may also implement its own testing environment and use interface discovery tool in the same manner described above. Of course one skilled in the art will also recognize that vendor and testing organization may conduct testing alone or in combination with each other.

In addition to the testing performed by vendor and testing organization system may collect and consider information from live systems that are in use such as user system . User system may be any known type of computer or computer system that implements either the component or the program code that was certified. In some embodiments user system may be any device having the Linux operating system installed as well as various components from ISVs and IHVs. Such systems are well known to those skilled in the art.

In some embodiments user system may also run interface discovery tool on one or more of its application programs and provide ABI data to certification service . For example user system may transmit its interface data over network to certification service or back to vendor . In some embodiments user system may use well known techniques such as encryption and digital signatures to secure the transmission of this information over network .

User system may transmit this data over network in raw or processed form. For example user system may use a well known data exchange protocol such extensible markup language XML . User system may also be configured to transmit its operational data at various times. For example user system may send operational data upon an abnormal termination or on a periodic basis. As noted user system may secure the transmission of this information over network using well known techniques such as secure sockets layer SSL .

Certification service provides an infrastructure and business logic for certifying components. In some embodiments certification service is implemented as a website or part of a website on the Internet. Accordingly certification service may include any number of conventional servers not shown . Such servers may be implemented with an Intel based processor that executes an operating system such as the Linux operating system. Furthermore the servers of certification service may support the TCP IP communication for connecting to the other components of system such as vendor testing organization or user system over the Internet.

Of course one skilled in the art will recognize that certification service may include any amount of sufficient hardware to support a relatively large amount of certification information such as testing results and operational data and other operations. One example of an architecture for certification service is shown with reference to .

Network provides a communication infrastructure for system . Network may be implemented based on known topologies and components. For example network may be implemented based on one or more local area networks such as an Ethernet network a wide area network the Internet or the like.

Interface module manages communications between certification service and the other entities of system such as vendor and testing organization . For example interface module may be configured to periodically poll vendor and testing organization on a regular basis to request API or ABI data for various components and application programs.

The configuration information from vendor or testing organization may include a wide variety of data and may be in any format. For example information from vendor may be in the form of an XML file or a network location such as a URL on the Internet. Alternatively interface module may be configured to obtain information from vendor or testing organization by searching the Internet to identify who has released testing results or operational data recently. Software vendor interface module may then download this information into history database or store one or more network locations URL where the download can be obtained.

In addition interface module may provide one or more pages for authenticating the identity of vendor testing organization or user system such as a user ID password digital certificates and the like. This information may be manually entered by a user or may automatically provided once a connection is established. Interface module may be configured to collect other information such as contact information a mailing address an email address and payment information. Of course interface module may also provide instructions and a process for registering a new entity or enterprise that wishes to participate with certification service . In some embodiments this information may be stored in and retrieved from profile database .

Archive module gathers the API and ABI data from vendor testing organization and user system . Archive module may then build history database to catalog the usage of various API and ABI interfaces by different operating systems components and application programs.

Certification module provides logic for determining whether a particular component or application program can be certified when a change to an API or ABI has occurred. For example if a change to an ABI by a new operating system version does not affect a component or application program then those components or applications programs may again be certified. As another example certification module may identify the components and application programs that are affected by a change to a particular ABI interface. Accordingly certification module may issue a notice or message to the vendors of these components and application programs. In this way the vendors and certification service can avoid significant testing because the specific changes that affect compatibility have already been identified. Of course one skilled in the art will recognize that other rules or criteria may be used to certify components.

As shown certification module may comprise a scanner a comparator and an emitter . Generally certification module may accept user input for example via interface module . User input may comprise a proposed change to an operating system. The components of certification module will now be briefly described to explain how the proposed changed may be analyzed. One skilled in the art will recognize that the components of certification module may be implemented using well known modules of software.

Scanner receives user input and resolves the bindings and symbols that are used by the proposed change. Scanner may utilize a standard runtime linker to resolve any dependencies and identify the paths to shared objects that would be loaded. For example scanner will scan for the usage of symbols and links to shared objects. In some embodiments scanner may alert when private symbols or static links are found since this type of interface usage is prone to instability during changes. Therefore scanner determines an interface profile or footprint for the proposed change.

Comparator takes the interface profile of the proposed change and compares it to the API or ABI usage of current components or application programs. In particular comparator may search history database and identify which interfaces of an API or ABI are utilized by various components that have been certified. For example comparator may retrieve one or more previous specifications for an API or ABI from API ABI data . Comparator may thus compare one or more versions of an operating system and how they impact usage of the API or ABI.

Emitter provides a report that indicates the impact of the proposed change. For example emitter may output a report or table that indicates each interface affected by the proposed change and the components or application programs that depend on the affected interface. Emitter may retrieve this information from certification database . Emitter may also be configured to transmit one or more portions of its output to the vendors such as vendor of the affected components or application program.

As noted certification service may include a profile database a history database and certification database . These databases may be implemented based on any known schema for example as a relational or object oriented database. Of course one skilled in the art will recognize that certification service may include or be coupled to other databases such as a database that maintains information about the products from vendor or information about user system . The exemplary databases shown in will now be described.

Profile database includes information related to authenticating a user or entity such as vendor or testing organization and determining their respective rights to the configuration information gathered by certification service . For example vendor or testing organization may be give access rights to their previous testing results and to the testing results of other entities under certain circumstances.

Other information that may be included in profile database may comprise group and individual permissions of users belonging to vendor or testing organization authorized partners of these entities and contact information. In addition profile database may include information that indicates a profile of support that has been offered or promised to a user. For example a user s profile of support may relate to a service level agreement organizations that have agreed to provide support to that user contact information of support personnel and the like.

History database stores the information gathered from the entities of system . For example history database may store the raw test result information generated by interface discovery tool when run by vendor testing organization or user system . Typical information the may be included in history database may relate to a product description of the component or application program tested by interface discovery tool driver files information about the host bus adapter of interface discovery tool and information that identifies the respective vendors of hardware and software.

Certification database provides a catalog of components that are currently certified. For example certification database may provide information that indicates which components of hardware have been tested and certified with various sets of program code such as operating system kernels device drivers BIOS and the like.

One skilled in the art will recognize that certification database may be configured to provide its information in a variety of formats. For example certification database may be configured to provide certification information that is sorted by vendor name component name component type hardware platform type central processing unit type peripheral type software platform type software application operating system version BIOS version date and the like.

ABI API data comprises the various API and ABI specifications for a number of operating systems. For example ABI API data may include various ABIs that conform to Intel s Binary Compatibility Standard iBCS . Of course other API and ABI specifications may be included in ABI API data as well.

Various processes for certifying components will now be described with reference to . Referring now to a flowchart is shown in which the compatibility of a component and program code are certified based on information about configurations of a plurality of computer systems. In stage the interface usage of a component or application program is detected. For example interface discovery tool may be run by a vendor testing organizations etc. on the component. In some embodiments the ABI usage of a component is traced by interface discovery tool and provided to certification service . Archive module may then compile this information into history database . Processing may then flow to stage .

In stage certification service determines the effect of a proposed change. In particular certification module may receive a proposed change to an operating system via user input. The proposed change may be separately identified and submitted in its own file. Alternatively certification module may receive a new version of an operating system or operating system component. In response scanner may perform a full analysis of the bindings and linking required by the new version. Scanner may then submit a usage profile for the proposed change that indicates deviations from a previous version of the operating system.

Comparator may then search history database to identify the various components and application programs that rely on an ABI interface that has changed. Comparator may indicate the effect of the proposed change by providing a list of the components and application programs that are affected. Other formats of this information may also be provided. For example comparator may simply indicate a count of affected components for each change in the ABI. This information is then passed to emitter and processing may flow to stage .

In stage certification module may certify a component or application program is compatible with the proposed change. In particular emitter may analyze the information provided from comparator and search certification database . Emitter may then determine which components or application programs have not been affected by the proposed change. Certification module may certify these components and application programs without further testing. Conversely emitter may also determine those components and application programs that are significantly affected by the proposed change. Certification module may issue a notice that the propose change voids the certification of the affected components to the vendor of that component. In response the vendor may perform development or conduct other testing based on the notice issued by certification module .

In stage changes to interfaces in a second version of the OS are determined. In one embodiment the changes are determined by certification service as in stage of . In another embodiment certification module and scanner may determine the changes as described in detail above for stage .

In stage the effect s of changes are determined as described above in stage . In stage the component is certified based on the effect s of the changes. In one embodiment the certification is performed by certification module as described in detail above for stage .

In stage changes between versions are determined. In one embodiment the changes are determined in a manner similar to stages and above. In stage the effect s of changes on interfaces are determined as described above for stages and . In stage information about packages affected by the changes is provided.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

