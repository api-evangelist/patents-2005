---

title: Child data structure update in data management system
abstract: A system to update a data structure based on a plurality of parent data structures, where at least one of the plurality of parent data structures is associated with point data. Some embodiments may include reception of a notification to update from one of the plurality of parent data structures, determination that one or more of the plurality of parent data structures is updating, determination of whether a notification to update has been received from each of the one or more of the plurality of parent data structures, and, if the notification to update has been received from each of the one or more of the plurality of parent data structures, update of the data structure based on data of the one or more of the plurality of parent data structures.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08442938&OS=08442938&RS=08442938
owner: Siemens Aktiengesellschaft
number: 08442938
owner_city: Munich
owner_country: DE
publication_date: 20050114
---
The embodiments described below relate generally to the management of data. More specifically some embodiments concern the updating of a data structure based on updates to one or more other data structures.

Modern industrial systems often rely to some extent on computer based automation and monitoring. Examples of such systems include industrial automation systems supervisory control and data acquisition SCADA systems general data acquisition systems and plant data historians. These systems may acquire analyze and respond to data arising from the operation of a manufacturing plant.

The data may arise from independent sources with each source configured to provide substantially raw or native information at pre defined intervals and or in near real time. The information may consist of numerical values produced by gauges and or monitors e.g. speed temperature or pressure . Data of this type is often referred to as point data. On the other hand non point data includes information related to the point data including but not limited to a description limits ranges etc.

The point data and non point data may be received from the independent sources and collected into data structures. These data structures which may include tables may provide access to the data collected therein that is more efficient than direct access of the sources. The data structures are preferably updated in response to changes to the collected data. The frequency of updating may be based on requirements of an application that accesses the collected data the performance costs of updating the data structures and other factors.

A child data structure may be associated with two or more of the data structures mentioned above. The child data structure collects data that is stored in each of the two or more parent data structures. Accessing the data collected in the child data structure may be more efficient than accessing the two or more parent data structures or directly accessing the sources of the data.

Conventionally a child data structure is updated in response to the updating of any parent data structure that is associated with the child data structure. In some instances an amount of time required to update the child data structure is greater than a poll cycle i.e. an amount of time between updates of one of the two or more parent data structures. Such a child data structure may therefore reside in a state of constant updating. Conventional systems for updating child data structures may also or alternatively present other inefficiencies.

In order to address the foregoing some embodiments concern a system a method an apparatus a medium storing processor executable process steps and means to update a data structure based on a plurality of parent data structures where at least one of the plurality of parent data structures is associated with point data. Such a system may include reception of a notification to update from one of the plurality of parent data structures determination that one or more of the plurality of parent data structures is updating determination of whether a notification to update has been received from each of the one or more of the plurality of parent data structures and if the notification to update has been received from each of the one or more of the plurality of parent data structures update of the data structure based on data of the one or more of the plurality of parent data structures.

Some aspects include a first parent data structure a second parent data structure and a child data structure. The first parent data structure is associated with first point data and is to transmit a first notification to update in response to updating the first data. The second parent data structure is associated with second point data and is to transmit a second notification to update in response to updating the second data. The child data structure is associated with third point data and is to receive the first notification to determine that the second parent structure is updating to wait to update the third data until the second notification is received to receive the second notification and in response to receipt of the second notification to update the third data based on one or both of the first updated data and the second updated data.

The appended claims are not limited to the disclosed embodiments however as those in the art can readily adapt the teachings herein to create other embodiments and applications.

As used herein systems in communication with one another are directly or indirectly capable of communicating over any number of different systems ports interfaces etc. for transferring data including but not limited to a local area network a wide area network a telephone network a cellular network a fiber optic network a satellite network an infrared network a radio frequency network and any other type of network that may be used to transmit information between devices. Moreover communication between systems may proceed over any one or more currently or hereafter known transmission protocols such as Asynchronous Transfer Mode ATM Internet Protocol IP Hypertext Transfer Protocol HTTP and Wireless Application Protocol WAP .

Back end data environment comprises various data sources such as plant floor production systems enterprise resource planning data systems and other data systems . Data arising from the back end data environment may comprise point data such as the aforementioned operational values and non point data used to characterize contextualize or identify the point data and or point data source. Each data source of back end data environment may comprise many disparate hardware and software systems some of which may not be interoperable with one another.

Application environment may issue queries for data to back end data environment . In response back end data environment acquires and transmits the data to application environment . Such communication may employ any system for querying and responding that is or becomes known. In some embodiments back end environment pushes data to application environment without requiring a corresponding query from application environment . The data may be pushed in response to an event detected by environment .

Application environment may comprise enterprise server Web server one or more solution servers database server and database . Application environment may comprise or be integrated as components of a single server device or multiple devices. In various embodiments enterprise server and solution servers may comprise application programs developed for example using Java and or C and running under for example operating systems such as the Windows family of operating systems.

Web server manages data communication between application environment and browsing environment . This data communication may include interaction with browsing environment to receive queries for data stored in a cache data structure stored in database . According to some embodiments browsing environment may execute one or more Java applets to interact with Java servlets of Web server . Some embodiments use a client server protocol that is not Web based.

Solution servers are used to access data from back end environment . In some embodiments solution servers include solutions and connectors. A solution is an object instance that is associated with particular data of back end environment . A connector comprises processor executable process steps to populate such an object instance with the particular data. Solution servers thereby allow application environment to access data that is acquired and stored by disparate systems of back end environment . In some embodiments one or more of solution servers support Dynamic Data Exchange DDE protocol and Open Database Connectivity ODBC application programming interface for connecting to data sources of back end environment . A solution server may also or alternatively support the Java Database Connectivity JDBC application programming interface.

Database server may comprise a front end application that is usable to access and or manage data stored in database . Such a front end application may support Structured Query Language SQL commands or the like. Data may be stored in database according to any currently or hereafter known protocol for storing data.

Database may comprise base data structures and cache data structures according to some embodiments. The data structures may comprise tables object instances and or any other structure for storing data that is or becomes known. The data structures may store or otherwise be associated with point data non point data or any other desired data. According to some embodiments the data of database is generated by and or received from systems of back end environment . These systems may include but are not limited to plant floor production systems enterprise resource planning data systems industrial automation systems SCADA systems general data acquisition systems and plant data historians.

The base data structures of database may store data received by application environment from one or more data sources of back end environment . Specific data to be stored in a base data structure or a cache data structure may be defined by an administrator or other user of application environment . The cache data structures of database may store data that is also stored in one or more of the base data structures of database . The duplication of data in a cache data structure may improve the efficiency with which the data is accessed. The improvement in efficiency may outweigh any reduction in efficiency attributable to maintaining the duplicative data.

In some embodiments a solution server operates to receive data from a data source of back end environment . This operation may be in response to initialization of application environment or timed polling of a base data structure associated with the data. The data may be received as a result of a change event that is generated by back end environment and that causes environment to push the data to the solution server . Alternatively the change event may cause the solution server to poll for an incremental or full update.

Database server may be used to update the base data structure with the received data and to similarly update any other base data structure associated with the data. Cache data structures associated with the updated base data structures are then either updated or not updated in accordance with some embodiments.

For example according to some embodiments a cache data structure receives a notification to update from one of a plurality of parent data structures determines that one or more of the plurality of parent data structures is updating determines if a notification to update has been received from each of the one or more of the plurality of parent data structures and if the notification to update has been received from each of the one or more of the plurality of parent data structures updates itself based on data of the one or more of the plurality of parent data structures.

Some embodiments include a first parent data structure a second parent data structure and a child data structure. The first parent data structure is associated with first point data and is to transmit a first notification to update in response to updating the first data. The second parent data structure is associated with second point data and is to transmit a second notification to update in response to updating the second data. The child data structure is associated with third point data and is to receive the first notification to determine that the second parent data structure is updating and to wait to update the third data until the second notification is received to receive the second notification and in response to receipt of the second notification to update the third data based on one or both of the first updated data and the second updated data. Some examples of each of the foregoing embodiments will be described in detail below.

Returning to browsing environment comprises one or more browsing clients . Each browsing client may comprise processor executable process steps executed by a respective user device. A browsing client may provide an interface to view data stored in one or more cache data structures of database . A browsing client may comprise a communication application such as a Web browser or a Java applet. As such a browsing client may be connected to application environment through the Internet or through an Intranet. A browsing client may comprise any other suitable software application according to some embodiments. Browsing clients may be executed by any suitable user device including but not limited to a desktop computer a laptop computer a computer terminal a personal digital assistant a telephone and a tablet computer.

The environments of may be connected differently than as shown and each block shown may be implemented by one or more hardware and software elements. The various hardware and software elements of one or more blocks may be located remotely from each other or integrated together. Some embodiments may include environments systems servers and clients that are different from those shown.

Data structures through may comprise tables flat databases relational databases object instances or any other suitable data structure. According to some embodiments base data structure and base data structure are instances of a base data structure object. The base data structure object may define states methods variables and other objects e.g. a cache data structure object instance related to a base data structure. In this case base data structure and base data structure are run time usages of the base data structure object. Generally a run time usage of an object is referred to as an object instance. Different instances of the same object can be associated with different data.

Cache data structure may comprise an instance of a cache data structure object. The cache data structure object may define states methods variables and other objects e.g. base data structure object instances related to a cache data structure. The use of objects may provide reusability consistency inheritance and other benefits known to those familiar with object oriented techniques.

In some embodiments process steps may be executed to provide a first base data structure a second base data structure and a third base data structure. The first base data structure may be associated with first data and to transmit a first notification to update in response to updating the first data. The second base data structure may be associated with second data and to transmit a second notification to update in response to updating the second data. The cache data structure may be associated with third data and to receive the first notification to determine that the second base structure is updating to wait to update the third data until the second notification is received to receive the second notification and in response to receipt of the second notification to update the third data based on one or both of the first updated data and the second updated data.

System is initialized at of process . According to some embodiments initialization includes instantiating objects corresponding to pre defined data structures and . Initialization may comprise any other suitable procedures for initializing system .

Data of base data structure is updated in response to initialization at . In some embodiments a suitable one or more solution servers retrieves data for base data structure at from the data sources of back end environment that provide the data associated with base data structure .

Data of base data structure may be similarly updated at . The updates at and may occur in parallel and or either update may begin first.

According to the present example the updating of base data structure completes at . A notification of the completed update is then transmitted to cache data structure at . Transmission of the notification may comprise changing a flag associated with base data structure from update pending to update complete . In some embodiments base data structure transmits the notification by calling a method exposed by the object instance of cache data structure . Enterprise server may manage transmission of the notification by detecting the changed flag and by calling the method exposed by cache data structure and or changing an appropriate flag or variable of cache data structure that indicates the completed updating of base data structure .

In this regard cache data structure receives the notification at . Cache data structure does not update itself at this point but rather waits at to receive a notification to update from base data structure on which structure is also based. According to some embodiments cache data structure determines after that base data structure is currently updating and waits at in response to the determination.

The updating of base data structure then completes at . A notification of the completed update is transmitted to cache data structure at . Transmission of the notification may comprise any of the processes described above with respect to or any other one or more suitable processes. The notification is received by cache data structure at .

Cache data structure is updated at in response to receiving the notifications at and . Updating cache data structure may comprise replacing any data of cache data structure with corresponding data from base data structures and or that has changed since a last update of cache data structure . In some embodiments all of the data associated with cache data structure is refreshed with corresponding data of base data structures and at . The updating of cache data structure completes at .

According to some embodiments cache data structure transmits a notification to update to a child data structure of cache data structure after . A child data structure is any data structure that is based on another data structure. For example cache data structure of is a child data structure of base data structure and of base data structure . In this regard base data structure and base data structure are each parent data structures of cache data structure . Cache data structure is also a parent data structure of the child data structure mentioned above.

Initially at an update triggering event is determined. According to some embodiments initialization of system or a poll of a base data structure will trigger updating of the base data structure. Each base data structure of for example may be associated with a unique poll cycle. The poll cycles of two or more base data structures may be identical. A poll cycle associated with a base data structure may be determined based on one or more of a size of the base data structure a type of data associated with the base data structure and other factors.

An update triggering event may be determined at in response to an event detected by a system of back end environment . The system may push data to an appropriate one or more of solution servers after detecting the event. Alternatively the system may notify the appropriate one or more solution servers of the event and the one or more solution servers may respond by polling for a full or incremental update. The determination of the event at may comprise the above described receipt of the data by the one or more solution servers .

Updating of the base data structure begins at . One or more solution servers may retrieve data associated with the base data structure at from appropriate data sources of back end environment . In some embodiments the one or more solution servers determine the initialization or poll at and begin updating the base data structure at based on the determination. Flow then proceeds to and pauses at until it is determined that the updating is complete.

Once it is determined that the updating is complete a state of the base data structure is set to update complete at . Setting the state may comprise changing a flag associated with the base data structure to update complete . Any other currently or hereafter known system to set the state of a base data structure to update complete may be used in some embodiments of . A notification to update is then transmitted to all child data structures of the base data structure at .

In a case that process steps are being performed with respect to base data structure the notification is transmitted to cache data structures and . Transmission of the notification may comprise calling a method exposed by each child data structure. Enterprise server may manage transmission of the notification by detecting the changed state and by 1 calling the method exposed by the child data structures and or 2 changing an appropriate flag or variable of the child data structures that indicates the completed updating of the base data structure. Flow returns to after to await a next poll.

As mentioned above one or more solution servers may determine the update triggering event at and begin updating the base data structure at . In some embodiments the one or more solution servers or any other software and or hardware entity determine if the data associated with the base data structure has changed prior to beginning the updating at . To perform this determination the one or more solution servers or other entity may access a pre cache of the data associated with the base data structure and may compare incoming data from environment with the pre cache data. If the data has not changed flow returns to to await a next poll.

The foregoing feature may be implemented only for base data structures having a size below a certain threshold. Accordingly a size of the base data structure may be checked before determining whether to update the base data structure in response to an update triggering event.

Briefly process steps may provide reception of a notification to update from one of the plurality of parent data structures determination that one or more of the plurality of parent data structures is updating determination of whether a notification to update has been received from each of the one or more of the plurality of parent data structures and if the notification to update has been received from each of the one or more of the plurality of parent data structures update of the data structure based on data of the one or more of the plurality of parent data structures.

At a notification to update is received from a parent data structure. The notification may comprise a call to a method exposed by the child data structure a determination based on a flag state or other indicator that an update of the parent data structure is complete a change to a variable associated with the child data structure or other type of notification. Next all other currently updating parent data structures are determined at .

Determination of the currently updating parent data structures may be based on a flag state or other indication that other parent data structures are currently updating. For example the child data structure may call a method of each parent data structure that returns an indication of whether the parent data structure is currently updating. In other examples each parent data structure calls a method of the child data structure to indicates an update status of the parent data structure.

Next at it is determined whether a notification to update has been received from the currently updating parent data structures that were determined at . For example it will be assumed that cache data structure received the notification from base data structure at and that cache data structure was determined to be updating at . The determination at is initially negative because a notification to update has not been received from cache data structure . Flow therefore returns to to await the notification from cache data structure .

Once the notification is received from cache data structure it is again determined at whether any other parent data structures are currently updating. If not flow proceeds from to .

A state of the child data structure is set to update pending at . Setting the state may comprise changing a flag associated with the child data structure to update pending . Any other currently or hereafter known system to set the state of a child data structure to update pending may be used in some embodiments of . At the child data structure begins updating with some or all of the data associated with each parent data structure of the child data structure. Flow pauses at until it is determined that the updating is complete.

Once it is determined that the updating is complete a state of the child data structure is set to update complete at . A notification to update is then transmitted to all child data structures of the child data structure at . The notification may comprise any type of suitable notification including but not limited to those mentioned herein. Continuing with the above example the notification may be transmitted to cache data structure at . Flow returns to after to await a next notification from a parent data structure.

In general point data is subject to dynamic change and is monitored and reported through various operations and functions associated with processing the point data obtained from selected sources. In industrial automation and control systems decision support and reporting capabilities may be provided based on Point data may be monitored over very short timeframes ranging in the sub second to sub minute range.

Non point data relates to a broad category of context providing information associated with point data that in one sense extend the functionality and meaning of the point data. Non point data may include descriptive and or attribute information characterizing the point data as well as other information such as limits ranges etc. Non point data may originate from numerous sources and relate to disparate aspects of an enterprise environment. For example non point data may comprise data associated with conventional database applications environments and include transactional information production data business data etc. In conventional systems integral and flexible manipulation of point data and non point data is restricted due to their inherent differences and properties.

The dynamic properties of point data give rise to time critical retrieval restrictions on systems designed to acquire and evaluate point data. Rapidly changing point data is generally acquired or refreshed at a high frequency e.g. short retrieval time interval to insure that the information is up to date. Other point data and non point data information may be more static in nature and not require a similar short acquisition interval.

As will be described in greater detail below certain aspects of the methods for data management provide formulations for data structures used to store and manipulate both point data and non point data in a cohesive manner. point data may be characterized as current real time or value data often associated with one or more instruments components or portions of a manufacturing industrial commercial or other system. Any of these apparatuses may be configured to generate measure and or sample data that relates to one or more point data sources of interest. For example a data acquisition system for a particular instrument or machine may continuously or periodically acquire data reflecting a motor s operating speed and or operating temperature as point data from a point data source associated with the motor. In certain instances the point data may be a simple numerical or string value. Point data may further be associated with monitoring control and reporting functions of various instruments components and applications to provide information relating to the operation of a selected system. This information may also be made available for collection and review by various data acquisition and control systems.

Point data is often acquired in a raw or unstructured form wherein the point data reflects a numerical or string value without supporting details description and or attributes. As previously described certain types of point data may be associated with real time or near real time information e.g. current temperature pressure speed voltage current etc. that may be desirably sampled updated or refreshed relatively frequently. The exact frequency of these operations is typically dependent on the characteristics of the point data itself and may be different across the multiple point data sources incorporated into a particular system. Providing a mechanism to allow for customization of the acquisition strategy for various classes of point data becomes increasingly significant as the size or complexity of the system grows to reduce unnecessary queries data calls and computational load.

The context in which point data is to be interpreted may be readily lost or confused. To give point data context it may therefore be desirable to associate certain non point data with the point data. Non point data may take many forms including but not limited to attribute information parameters limits and other descriptive information. As used herein the terms point data and non point data encompass various categories of information which are not necessarily constrained to the examples described herein. As such the various embodiments of the invention may be applied to a variety of different contexts embodied in the combination and use of point data and non point data.

Other useful non point data may include information such as maintenance work orders relational data or API Application Programming Interface structure data from maintenance systems equipment documentation unstructured data usually contained within operating system files and documents and information such as URL Uniform Resource Locator links to supplier web sites. These types of non point data may be associated with non tag based information contained for example within Oracle or SAP databases environments. Non point data therefore represents a broad class of information that may be associated with point data providing a contextual and informational basis.

In one aspect point data sources correspond to addressable points of the informational sources and may be referred to as a Tag. A Tag comprises a collection of desired point data and non point data utilized or processed by the application environment . Each Tag may further reflect a data structure used for storing point data and or non point data acted upon by the application environment . It will be appreciated that point data and Tags reflect terms used in various processing and manufacturing industries to define sources of uniquely identifiable values for various instrument and apparatus functionalities and features but may also be applied in other contexts and systems.

Each point data source may be associated with a measurable or monitorable feature from which point data may be requested and collected. For a given instrument or device a plurality of such point data sources may exist with the point data generated by or associated with each point data source subject to relatively frequent change and generally representative of a current state or operational condition of that point data source . Point data may further be acquired either directly or indirectly by components of the application environment and associated with non point data which is recognized by the components of the application environment . In various embodiments association of certain non point data with the point data may be accomplished by the instrument or alternatively non point data associations may be performed by other components of the system. In various instances association of point data with non point data may occur substantially transparently to the point data sources and or various associated back end data systems.

In general non point data is associated with point data and reflected in the Tag data structure. Together this information may be used by the application environment for the purposes of monitoring control and analysis and to assess the state or condition of selected instruments or systems within the back end data environment .

Point data and non point data may be received by a data acquisition system configured to collect information from various point data sources or other back end data systems associated with corresponding point data sources . In various embodiments the data acquisition system and back end data systems typically provide only limited functionality in terms of data acquisition and management but may serve as a source of point data and non point data for the application environment . Alternatively the application environment may be configured to acquire point data and non point data directly from the various back end data systems and point data sources . In such instances the application environment is capable of interacting with the various components of the back end data environment systems and or point data sources to collect information about each desired point data source and associated non point data .

As previously described point data may originate from many point data sources with each having differing volatility or longevity characteristics. In one aspect these characteristics describe how dynamic the point data is expected to be wherein certain point data may be characterized as relatively static or infrequently changing and other point data may be characterized as relatively dynamic or more frequently changing. Thus the point data acquired from the systems or point data sources may posses a wide range of temporal qualities ranging from substantially never changing to changing substantially every instant. One feature of the data acquisition and management system of the various embodiments of the invention is that it provides a mechanism for conveniently associating with each point data source a configurable data fetch or acquisition frequency such that the application environment can be configured to obtain refresh or update the point data as needed or desired.

In various embodiments the point data may comprise a wide variety of different constructions of data. For example the point data may relate to real time operational data for an informational source or back end data system including temperature pressure speed etc. In certain instances the point data may be a primitive value not carrying with it a description of the point data source from which it was obtained. In other instances the point data may be associated with non point data including attribute information which characterizes the point data source e.g. instrument name or point data itself e.g. data units . Certain non point data or attributes may be further defined for the point data sources . These may include for example operational ranges point data source names or associations and other information. The non point data or attribute information may be assigned by the data acquisition systems used to acquire the point data or may be assigned directly by components of the application environment . In various embodiments non point data or attribute information reflects more static information than point data and typically does not change at the same frequency as the point data itself. As a result of the more static character of this information the acquisition rate or fetch frequency may be desirably adjusted to be correspondingly lower.

In one aspect a component builder and solution builder may be associated with the application environment . The component builder provides functionality for defining generating managing and visualizing various component data structures used for point and non point data acquisition integration in accordance with various embodiments of the invention. The solution builder provides functionality for creating views or visualizations of components generated with the component builder .

In one aspect the component builder and solution builder allow point and non point data to be flexibly organized and presented using a graphically driven approach. In such an approach a user is able to create one or more components and views in an iconically and menu driven manner. Furthermore these builders may utilize intuitive and semi automated mechanisms for point data and non point data integration which facilitates design and manipulation of the data at small and large scales alike. While depicted as being associated with the application environment it will be appreciated that the component builder and solution builder may be integrated with various components of the system such as the development environment .

In one aspect each Tag is representative of a reusable component which may comprise one or more tag component members associated with point data and or non point data . Each Tag may further be associated with one or more views each of which are representative of a reusable visualization of the information contained within the Tag . In certain embodiments each view references certain Tag member information including portions of the point data and non point data which may be displayed or visualized in a specified manner. Aspects of Tag visualization in this manner may include the use of animation techniques to graphically depict the Tag s conditions and information.

In various embodiments each Tag collection contains a plurality of similarly defined Tags each of which may be associated with different selected informational sources point data sources or other system components or subcomponents for which point data and non point data may be desirably accessed and visualized. One benefit conferred through the use of the Tag collection and constituent Tags is that each Tag sets forth the principal information and fields for inclusion of a point data source into the Tag collection . Each Tag may comprise a similar structure and may further provide predefined or default data access rules and operations for accessing point data and non point data . Consequently adding new Tags e.g. newly monitored point data sources may comprise appending additional Tags to the Tag collection as needed or desired.

Because of the logical organization of the Tags and the information contained therein data integrity even in very large monitoring environments is relatively easy to preserve and the system is highly scalable. Another benefit imparted by the use of Tags in the aforementioned manner is that rules and operations may be applied across a multiplicity of Tags with relative ease without the need to independently edit or modify each Tag . Such a feature is useful for example when specifying the refresh update frequency and or instructions for informational access. The construction of each Tag provides a mechanism for defining operations globally that are subsequently resolved to identify the appropriate point data source or other component from which the point data and non point data may be obtained.

Performance in the system is improved by providing the ability to define data access constructs for point data and non point data that are suited to the task of acquiring the information at the appropriate frequency. For example non point data may be obtained by database query language queries such as SQL Structured Query Language or SQL like queries to refresh selected information contained within the Tag collection . Such queries are suited to access and retrieve generally static information such as non point data associated with a selected Tag . In certain implementations each construct is configured to access and provide the results of various query columns associated with selected tag component members . Queries may be associated with both point data and non point data although in general queries are typically directed towards information which changes infrequently e.g. non point data .

One or more Tag value connections may further be defined for selected point data associated tag component members that are determined to change relatively frequently e.g. current value or set point . In various embodiments a Tag value connection need be specified only once per Tag component member of interest. The Tag value connection may further be based on a template or rule which can be generically applied across a portion or substantially all of the Tags without requiring explicit specification for each Tag .

To improve the flexibility of the system each Tag and associated tag component member s may be associated with a name identifier . The name identifier provides a convenient mechanism to access a specific or desired Tag and component member s contained therein. Furthermore the name identifier may be used in connection with formulas expressions or rules to provide improved accessibility to the information contained within the Tag . The name identifier may further be configured such that this information may be used as a reference to indicate an appropriate tag component member whose value is to be associated with information e.g. point data or non point data from the back end environment .

Tag rules provide instructions for accessing the appropriate value or information from the desired resource s of the back end data environment . For example a rule may be defined such that the name identifier of a selected Tag is used as a reference to populate a selected tag component member Current Value with point data obtained from a designated resource of the back end data environment .

As another example a selected back end environment resource may comprise an addressable point data source the value of which is stored in the Current Value field of a selected Tag . The Current Value field as well as other tag component members may store a wide variety of point data information including current temperatures speeds pressures and other real time near real time information which are desirably monitored and refreshed at a relatively high frequency. Likewise non point data may include attributes associated with the point data such as machine or instrument names area region organization unit high ranges low ranges units associated with the point data descriptions of the Tag and other information. This information may be populated within a selected Tag using the aforementioned data queries to provide context to the point data .

In various embodiments the application environment may be configured to utilize a combination of data queries and tag value connections to identify and acquire appropriate data and information to be accessed from the back end data environment and store this information within an appropriate tag component member e.g. for example in a temperature associated TAG and a pressure associated TAG . As previously indicated to preserve bandwidth and improve system performance each point data and non point data request may be associated with various selected refresh frequencies to maintain a balance between keeping information within the Tag up to date and avoiding unnecessary data requests.

While the Tag collection shown in is composed of a plurality of Tags of homogeneous composition it will be appreciated that other Tag collections can be readily devised in accordance with the various embodiments of the invention the composition of which may comprise additional different tag component members . It one aspect it may be desirable to maintain a Tag collection having a singular Tag composition defined by substantially identical tag component members e.g. similar to that shown . Such a configuration desirably conveys uniformity amongst all point data non point data acquisitions. However it is conceived that instances exist where a Tag collection may be desirably formed as a plurality of Tags of heterogeneous composition. Providing multiple compositions of Tags may be useful in accommodating a variety of different point data non point data acquisitions that may or may not be logically or functionally compatible with one another.

In the illustrated example the fields of the table correspond to a NAME field identifier string an ID field identifier number a HLIMIT field high limit a LLIMIT field low limit an EUNIT field unit associated with point data and a DESC field informational . Each field may be configured as desired and may for example represent string data or numerical values real integer etc . Each of the fields serve to characterize or give context to a selected component or point data source within the system which is to be monitored and associate certain attributes with the component or point data source in the form of non point data . The attributes associated with the selected component or point data source may include descriptive information operational parameters as well as other desired information.

For example the component entries identified as P P reflect non point data attribute information used to characterize various operational parameters for point data point data sources associated with an exemplary pump e.g. Pump Temperature Pump Pressure and Pump Speed . This information may include a designated name stored in the NAME field a numerical identifier stored in the ID field an upper operational limit stored in the HLIMIT field a lower operational limit stored in the LLIMIT field units to be associated with point data obtained from the point data source stored in the EUNIT field and a corresponding brief description of the selected component stored in the DESC field . Information stored in the fields may be selectively accessed through the aforementioned data queries or other retrieval mechanisms to provide tag attribute information which may be subsequently associated with point data relating to a specific component or point data source within the back end data environment .

Similarly these fields may also be used in connection with point data point data sources associated with an exemplary conveyor e.g. Conveyor Speed and Conveyor Operational Status . As applied to the conveyor the fields may take on different values and context. For example the name ID limits units and description may be populated to reflect values appropriate to point data sources associated with the conveyor. Furthermore certain fields may be left unpopulated associated with a default value associated with a void or null value or populated in other manners depending on the nature of the point data point data source which they are associated e.g. note differences in conveyor speed fields and conveyor operating status fields . Based on the foregoing it will be appreciated that the fields of the non point data attribute table may be constructed so as to accommodate substantially all of the information desired to be associated with point data sources within the system.

Similarly point data relating to those components described above may be separately stored in an analogous manner to the aforementioned non point data as exemplified in table . The information in this table may comprise one or more fields including a NAME field identifier string an ID field identifier number and a VALUE field current real time value . In one aspect the table containing point data may represent only limited information relating to each component or point data source and lack the corresponding descriptive qualities and attribute information associated with the non point data table . The point data stored in this table may represent the current or real time values for each selected component or point data source which is to be desirably accessed at a relatively high frequency to insure that the information contained in the application environment is up to date. As previously indicated the information contained in this table may be acquired through the use of tag value connections designed to extract selected information from the table at a desired rate or frequency.

In one aspect each point data value for a selected point data source stored in the VALUE field may be associated with corresponding identification information stored in the NAME and ID fields which may be used to relate the point data of the table with the non point data of the table . In other embodiments the point data values may lack corresponding identification information and present only raw data values. In instances where the point data lacks or possesses minimal corresponding identification information the application environment may provide the proper mapping functionalities to associate the point data with the appropriate non point data contained in the table . Taken together the two sources of point data acquired from table and non point data acquired from table may be used to populate a selected tag collection defined in the application environment .

The exemplary tag collection tags and tag component members shown in depict the mapping of information from the point data database and non point data database . As previously indicated the tag collection comprises a grouping of Tags or tag instances representing data structures used for acquisition and association of point data and non point data . In various embodiments the tag collection comprises instantiations of previously defined tag components represented by the one or more tag instances . Each tag instance comprises tag component members that may further comprise a member name and an associated member type . The member type defines the expected data types of the various tag component members for each tag instance for example as real or string values.

The tag collection may be constructed as a plurality of instantiations of a singular tag component definition or may utilize more than one tag component definition. In general the tag component definition provides a logical framework for associating point data and non point data in a user selectable configurable manner. In one aspect the tag component definition is constructed in such a manner so as to allow it to be used in a variety of different contexts without being constrained to a particular point data non point data association. In certain implementations a singular tag component definition may be sufficient to accommodate a number of different point data and non point data associations through one or more instantiations contained within the tag collection .

In one aspect tag component members of the tag collection may be mapped to selected information contained in the point data and non point data databases using the aforementioned data query tag value connection approach. This is shown at a high level in where selected information reflecting particular point data sources contained in fields of the point data and non point data databases is mapped to corresponding component members populating them with the appropriate values or information.

In one aspect population of the component members using the data query approach is facilitated by simplified query language. The simplified query language may take the form of a query such as SELECT NAME HLIMIT LLIMIT EUNIT DESC FROM TAG TABLE . The aforementioned simplified query may be translated by the application environment to one or more suitable database queries for example in SQL that may be used to extract information from the non point data table . The form of the simplified query provides a more intuitive understanding of the operations to be performed in mapping the information without having detailed knowledge of the underlying operations themselves.

Population of point data which may be updated more frequently may proceed in a similar manner wherein a mapping functionality is used to associate fields contained in the point data database with selected component members for appropriate tags in the tag collection . illustrates an exemplary point data access association for a selected component member associated with a particular tag of the tag collection corresponding to Current Value for which a point data connection may be desirably made. The tag member CurrentValue may be desirably populated with point data extracted from a selected back end tag system or point data source specified as a connection group PHD in this example . As previously indicated the point data information may be acquired from the point table using a tag value connection or extracted sampled directly from the appropriate point data source . In each instance the corresponding point data is desirably accessed from the specified location with a desired refresh rate and stored in the appropriate component member Current Value in this example .

As described above tag value connections and data queries may be used to populate selected tag component members with desired information from point data and non point data sources. In various embodiments query results from data queries are used in a selected tag instance to fill in the parameters or information associated with the tag value connection s defined for the tag . An efficient mechanism for implementing data query information retrieval is to have a single query perform the operations necessary to return non point data associated information for a plurality of tag instances . Such a configuration improves resource utilization and reduces overhead associated with executing multiple data queries to achieve similar results.

The tag value connections may be associated with the point data members in a singular manner such that a specific tag value connection is associated with a selected point data member of a selected tag instance . Here the tag value connection may be used to define a formula or mechanism by which to utilize the non point data for a selected tag instance in addition to other configuration information associated with the tag value connection to retrieve and populate the point data for each tag .

In one aspect as shown in forming a tag value connection comprises specifying the NAME or ID of the tag associated with the point data table or point data source to identify the information to acquire and the desired field information to be extracted e.g. VALUE . A simplified referencing mechanism for associating a component member to store extracted point data with the relevant point data to be extracted from the table or point data source may comprise Specifying the Tagname identifier e.g. TagName along with the request to establish a connection with a corresponding connection group e.g. PHD to populate a selected component member with point data corresponding to the selected field e.g. VALUE . Here the Tagname identifier TagName indicates that the request to populate the component member of the Tag will use this Tag s name field e.g. TagName at runtime and pass this information to the appropriate back end data source or connection group e.g. PHD where the associated information contained in the selected field e.g. VALUE will be sufficient to uniquely identify the desired value to be accessed.

As will be appreciated from the aforementioned description different data acquisition strategies e.g. structured queries tag value connections as well as different data acquisition times retrieval intervals may be implemented to populate the various fields e.g. component members relating to one of more Tags described by the joined table . One desirable benefit provided by ordering the information in such a manner is that a portion or the substantial entirety of non point data may be identified and acquired by as little as a single structured query thus significantly reducing computational load programmatic complexity and communications bandwidth.

The above described embodiments may be altered to create completely or partially different embodiments without departing from the spirit and scope of the appended claims.

