---

title: Multi-Interface aware scenario execution environment
abstract: A scenario execution environment (SEE) may include one or more action layers. Each action layer may be associated with one or more SEE actions. Each SEE action may be associated with one or more action layers. SEE code may specify one or more SEE actions. The SEE code may be parsed for the SEE actions. Each SEE action may be dispatched to each associated action layer. The action layer interface may include a start scenario element, an end scenario element and a run action element. The start scenario element may inform the action layer that one or more scenarios of the scenario execution environment are commencing. The end scenario element may inform the action layer that one or more scenarios are concluding. The run action element may instruct the action layer to carry out one or more SEE actions associated with one or more scenarios.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546586&OS=07546586&RS=07546586
owner: Microsoft Corporation
number: 07546586
owner_city: Redmond
owner_country: US
publication_date: 20050215
---
This invention pertains generally to computer systems and more particularly to computer systems having sub systems services and or components with interfaces.

Computer systems and particularly networked computer systems have become complex. An aspect of this complexity is that at times computers systems may behave in unexpected ways. This generally causes consternation among computer system users and may prompt calls to a computer system support organization. One challenge for the support organization is determining whether the behavior at issue is unexpected in general and possibly undesirable or merely unexpected to a particular user.

The challenge is greater than might be anticipated at first glance. Support organizations typically have multiple layers with increasingly specialized experts. However even high expertise with a particular computer system may be degraded by the constant release of new computer systems sub systems services and components new versions of existing computer systems sub systems services and components new interfaces to existing computer systems sub systems services and components and the like. In such an environment documentation may quickly become outdated and unreliable. The line between expected and unexpected behavior may become ambiguous forcing the support organization to fall back on at best educated guesswork.

Rising above guesswork means being able to reproduce and analyze questionable behavior but again this is easier said that done. One problem is translation between user perceived categories of system functionality and categories of system functionality as implemented. Test cases designed to test categories of system functionality as implemented may be inappropriate and or inadequate to test categories of system functionality as perceived by system users. An example of this is the now common case that multiple and layered interfaces such as graphical user interfaces GUI command line interfaces CLI and application programming interfaces API exist to the same sub system service or component. A computer system user perspective of a set of interfaces may include multiple and or different test cases relative to the perspective of a computer system implementer and vice versa.

This section presents a simplified summary of some embodiments of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some embodiments of the invention in a simplified form as a prelude to the more detailed description that is presented later.

A scenario execution environment may include one or more action layers. Each action layer may be associated with one or more scenario execution environment SEE actions. Each SEE action may be associated with one or more action layers. Scenario execution environment SEE code may specify one or more SEE actions. In an embodiment of the invention the SEE code may be parsed for the SEE actions. One or more action layers associated with the SEE actions may be identified. Each SEE action may be dispatched to each associated action layer. In an embodiment of the invention a scenario execution engine is configured to parse the SEE code identify associated action layers and dispatch the SEE actions.

Each action layer may have an interface in accordance with an action layer interface. In an embodiment of the invention the action layer interface includes a start scenario element an end scenario element and a run action element. The start scenario element may inform the action layer that one or more scenarios of the scenario execution environment are commencing. The end scenario element may inform the action layer that one or more scenarios of the scenario execution environment are concluding. The run action element may instruct the action layer to carry out one or more SEE actions associated with one or more scenarios of the scenario execution environment.

Prior to proceeding with a description of the various embodiments of the invention a description of a computer in which the various embodiments of the invention may be practiced is now provided. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally programs include routines objects components data structures and the like that perform particular tasks or implement particular abstract data types. The term program as used herein may connote a single program module or multiple program modules acting in concert. The terms computer and computing device as used herein include any device that electronically executes one or more programs such as personal computers PCs hand held devices multiprocessor systems microprocessor based programmable consumer electronics network PCs minicomputers tablet PCs laptop computers consumer appliances having a microprocessor or microcontroller routers gateways hubs and the like. The invention may also be employed in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment programs may be located in both local and remote memory storage devices.

Referring to an example of a basic configuration for the computer on which aspects of the invention described herein may be implemented is shown. In its most basic configuration the computer typically includes at least one processing unit and memory . The processing unit executes instructions to carry out tasks in accordance with various embodiments of the invention. In carrying out such tasks the processing unit may transmit electronic signals to other parts of the computer and to devices outside of the computer to cause some result. Depending on the exact configuration and type of the computer the memory may be volatile such as RAM non volatile such as ROM or flash memory or some combination of the two. This most basic configuration is illustrated in by dashed line .

The computer may also have additional features functionality. For example computer may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information including computer executable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to stored the desired information and which can be accessed by the computer . Any such computer storage media may be part of computer .

The computer preferably also contains communications connections that allow the device to communicate with other devices such as remote computer s . A communication connection is an example of a communication medium. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. By way of example and not limitation the term communication media includes wireless media such as acoustic RF infrared and other wireless media. The term computer readable medium as used herein includes both computer storage media and communication media.

The computer may also have input devices such as a keyboard keypad mouse pen voice input device touch input device etc. Output devices such as a display speakers a printer etc. may also be included. All these devices are well known in the art and need not be described at length here.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computing devices unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.

In an embodiment of the invention a bridge is built between user perceived categories of system functionality and categories of system functionality as implemented with a scenario execution environment SEE . The scenario execution environment may provide an ability to view and edit scenario specifications to execute scenarios in accordance with scenario specifications and to view scenario execution results and scenario execution history. The scenario execution environment may provide for an efficient and or enabling organizational division for example enabling a customer support organization to create new scenarios with existing functionality developed by a perhaps more technical product testing organization.

The task of allocating scenario creation and management features to an organizational division may be a delicate one. Too few features and demands for scenarios implemented with custom code may be little reduced. Too many features and the skill level required to implement a new scenario may be little different from custom coding. In an embodiment of the invention a sub system service or component service with multiple interfaces may be treated as a single category of system functionality for example enabling specification of a single scenario set for a service that is operative with multiple interfaces of the service. In addition a scenario may include deliberate interruptions to system functionality such as a system restart without having to be explicitly divided into pre interruption and post interruption partitions.

Each interface may include one or more service functionality invocation mechanisms. For example the application programming interface may include one or more functions taking one or more parameters or accept one or more messages including one or more data fields or any suitable application programming interface element. The command line interface may accept a string of alphanumeric characters including one or more command words and one or more parameters or any suitable command line interface element. The graphical user interface may include one or more interactive graphical elements such as graphical dialogs graphical buttons graphical sliders text input fields or any suitable graphical user interface element.

A scenario execution platform may interact with the interfaces of the services through action layers . There may be an action layer for each interface of each service . For example the action layer may correspond to the graphical user interface of the service the action layer may correspond to the command line interface of the service the action layer may correspond to the application programming interface of the service the action layer may correspond to the graphical user interface of the service the action layer may correspond to the command line interface of the service and the action layer may correspond to the application programming interface of the service .

The action layers may be ordered and or arranged in one or more hierarchies. For example a hierarchy of the action layers may correspond to a hierarchy of the interfaces . The action layers may be grouped into one or more action layer groups. For example the action layers may be grouped according to an associated service . Each action layer may include one or more scenario execution environment SEE actions. Each SEE action may activate one or more elements of one or more interfaces of one or more services of the scenario execution environment for example graphical user interface elements command line interface elements and or application programming interface elements.

Each action layer may have an action layer interface. The action layer interface of each action layer may be the same enabling the action layers to be treated in a uniform manner by components of the scenario execution platform . The scenario execution platform may require that each action layer conforms to a particular action layer interface or to one of a set of particular action layer interfaces. An example action layer interface in accordance with an embodiment of the invention is described in more detail below with reference to . Action layers may be implemented as shared libraries component object model COM servers message driven servers or any suitable computerized system component having an interface.

An action layer registration tool may register the action layers with a scenario execution environment database SEE DB . Action layer information registered by the action layer registration tool may include names associated with each action layer SEE actions associated with each action layer services associated with each action layer service interfaces associated with each action layer relationships between action layers relationships between service interfaces referenced by action layers and relationships between services referenced by action layers .

A scenario execution environment SEE code repository may store one or more sets of scenario execution environment SEE code files . The SEE code repository may be a part of the SEE database . The SEE code files may be static or dynamically generated from data stored in the SEE code repository and or the SEE database . The SEE code files may include scenario execution environment SEE code specifying scenarios for execution in the scenario execution environment . The sets of SEE code files may grouped with respect to computer systems sets of services such as the services and or SEE code or SEE code file versions.

The role played by the SEE code files is not limited to SEE code stored in conventional computerized file system formats. SEE code may be stored in any suitable stand alone or embedded data structure. SEE code may be implemented with an extensible markup language XML for example an extensible markup language in accordance with the World Wide Web Consortium W3C Recommendation titled 1.0 dated Feb. 4 2004. An example SEE code format in accordance with an embodiment of the invention is described below in more detail with reference to .

A scenario execution engine may execute scenarios in the scenario execution environment as specified by SEE code for example stored in SEE code files . The scenario execution engine may implement execution of scenarios by invoking SEE actions for example by invoking SEE actions specified by SEE code. Further details of the scenario execution engine in accordance with an embodiment of the invention are described below with reference to .

SEE code for example SEE code in the SEE code files may be in accordance with the action layer information registered by the action layer registration tool in the SEE database . For example each SEE action and or each scenario specified by SEE code may have a corresponding entry in the SEE database . In an embodiment of the invention accordance between SEE code and the SEE database is encouraged by the provision of a scenario execution environment SEE editor . In an embodiment of the invention accordance between SEE code and the SEE database is enforced by requiring that SEE code be edited with the SEE editor and or by verifying that SEE code is in accordance with the SEE database prior to execution by the scenario execution engine .

The SEE editor may present SEE actions of action layers that are registered with the SEE database . For example the SEE editor may include a graphical user interface GUI and the SEE actions may be presented in a visual arrangement such as a list or a tree. The SEE actions may be grouped and or sorted for example by associated action layer associated service frequent usage popularity associated date such as creation date or most recent revision date and or any suitable associated information in the SEE database . SEE code for example in SEE code files may be edited by dragging and dropping SEE actions from the visual presentation into the SEE code. Automatic completion of keyboard entered SEE code and like coding productivity enhancement utilities may also be provided by the SEE editor .

A scenario execution engine SEE viewer may present SEE code and scenarios specified by SEE code in the SEE code repository to scenario execution environment users for example with a graphical user interface. The SEE viewer may enable initiation of scenario and or SEE code execution in the scenario execution environment . In addition the SEE viewer may present scenario editing history and execution history associated with particular scenarios and versions of scenarios and or particular SEE code and versions of particular SEE code. Scenario execution history may include execution times and dates and scenario execution results including high level summaries such as pass or fail as well as detailed execution transcripts. In an embodiment of the invention the SEE viewer is integrated with the SEE editor .

The SEE code parser may parse SEE code for example from a SEE code file . The SEE code file may be one of the sets of SEE code files in the SEE code repository . In an embodiment of the invention the SEE code parser is a conventional extensible markup language parser. The SEE code parser may be shared with other components of the scenario execution platform .

SEE code in the SEE code file may specify one or more action layers associated with SEE actions incorporated in one or more scenarios. The scenario execution engine may load e.g. establish intra process or inter process communication with in an intra process or inter process communications environment such as a computer system and or computer operating system the specified set of action layers represented in by action layers and . The SEE action dispatcher may receive parsed SEE code from the SEE code parser . The parsed SEE code may specify that one or more sets of SEE actions are to be performed in one or more orders. The SEE action dispatcher may dispatch the specified SEE actions in the specified orders for example utilizing the action layer interface of action layers associated with the specified SEE actions.

Some of the SEE actions specified by SEE code may be scenario execution engine actions that is SEE actions associated with the scenario execution platform rather than for example with a particular service interface and or a particular service . In an embodiment of the invention the scenario execution engine action layer provides an interface for initiating each scenario execution engine action. The interface of the scenario execution engine action layer may be the same as the action layer interface of the action layers and . Although shown in as integrated into the scenario execution action in an embodiment of the invention the scenario execution action layer is loaded in a manner similar to the action layers and .

Components of the scenario execution engine such as the SEE code parser and the scenario execution engine action layer may log scenario request initialization and execution results with the SEE logging engine . The SEE logging engine may generate a scenario execution log for each scenario and or set of scenarios specified by SEE code for example in the SEE code file . The scenario execution log may be stored in the SEE database FIG. and associated with the scenario and or set of scenarios that generated the scenario execution log .

Before describing operation of the scenario execution environment in more detail it will be helpful to provide details with respect to SEE code formats and action layer interfaces. depicts an example SEE code format in accordance with an embodiment of the invention. The SEE code format includes multiple nested SEE code format elements. The SEE code format may correspond to an extensible markup language format. Each element of the SEE code format may correspond to an extensible markup language element.

The SEE code in the SEE code format may specify one or more scenarios in a scenario suite. A scenario suite element may include a required providers element and one or more scenario elements such as scenario element . For clarity only one scenario element is shown in . The scenario suite element may group and name the set of scenarios in the scenario suite. The scenario element may name an associated scenario.

The required providers element may specify a set of services and or a set of action layers associated with the scenario suite. For example the required providers element may include one or more provider elements not shown in each specifying a particular service and each provider element may include one or more action layer elements not shown in each specifying a particular action layer . The required providers element may further specify relationships between action layers service interfaces and or services .

Each scenario may have one or more associated threads of execution scenario threads enabling for example a plurality of steps to be performed in parallel. Correspondingly the scenario element may include one or more scenario thread elements. In the scenario element is shown having two scenario thread elements and however an embodiment of the invention is not so limited. Each scenario thread element may name its associated thread of execution. Each scenario thread may perform one or more SEE actions. Correspondingly each scenario thread element may include one or more action elements. In the scenario thread is shown having two action elements and . However an embodiment of the invention is not so limited.

Each action element may specify its associated SEE action. The specified SEE action may be associated with a provider such as a particular service and or action layer . Correspondingly each action element may further specify the provider associated with the specified SEE action. The specified SEE action may have an expected result for example pass or fail. Correspondingly each action element may further specify the expected result associated with the specified SEE action.

The SEE action specified by each action element may have zero or more associated parameters. Correspondingly each action element may include an action parameters element such as action parameters element . The action parameters element may include one or more action parameter elements. In the action parameters element is shown having two action parameter elements and . However an embodiment of the invention is not so limited. Each parameter of each SEE action may have a name and a value. Correspondingly each action parameter element may specify the name of the parameter as well as a particular value for the parameter.

The specification of the value of the parameter in each action parameter element may include a SEE code variable specification. For example the SEE code variable specification may include a SEE code variable name surrounded by SEE code variable specification delimiters. Each SEE code variable may have an associated value. For example the value of each SEE code variable may be maintained by one of the action layers . The scenario execution engine may replace the SEE code variable specification with the value of the specified SEE code variable or a representation thereof. For example if the SEE code variable specification is a string of alphanumeric text it may be replaced with a string of alphanumeric text representing the value of the specified SEE code variable. The value of a particular SEE code variable may be set with the action parameter element by specifying the parameter name as one of a set of SEE code variable names such as GlobalVariable or LoopVariable and specifying the desired SEE code variable value as the parameter value.

The SEE action specified by each action element may be associated with zero or more expected errors. Correspondingly each action element may include an expected errors element such as expected errors element . The expected errors element may specify one or more expected errors. For example the expected errors element may include one or more expected error elements not shown in each specifying an expected error. An expected error specification may include an error name an error value and or any suitable set of name value pairs.

Some SEE actions that may be specified by action elements are now described. Although the following are scenario execution engine actions associated with the scenario execution engine action layer they may serve as schematic examples for SEE actions associated with any suitable action layer such as action layers and . Scenario execution engine actions may include a start loop action an end loop action a set event action a reset event action a wait event action a log message action a set environment action an execute command action and a reboot action.

The start loop action and the end loop action may delimit a set of SEE actions. Parameters of the start loop action may include a loop variable parameter a start value parameter an end value parameter and a step value parameter. Required parameters of the start loop action may include the loop variable parameter the start value parameter and the end value parameter. The loop variable parameter may specify a name of a SEE code variable instance i.e. the loop variable. The start value parameter may specify an initial value of the loop variable. The end value parameter may specify a final value of the loop variable. The step value parameter may specify a loop variable increment which may otherwise default to 1. Required parameters of the end loop action may include a loop variable parameter specifying the same loop variable specified by the loop variable parameter of the start loop action. The scenario execution engine may repeatedly dispatch in order each SEE action in the delimited set of SEE actions while the loop variable has a value greater than the specified final value after being incremented with the specified increment following each repetition. Nested loops may be prohibited to limit SEE code complexity.

Each scenario thread may have an associated synchronization event object. The wait event action may suspend execution of a particular scenario thread until a specified synchronization event object is set by the set event action. The set event action may set the synchronization event associated with the scenario thread that contains the set event action. The wait event action may have a required event name parameter specifying a name of the synchronization event object and or its associated scenario thread on which to wait. The wait event action may be contained in a scenario thread that is different from the scenario thread associated with the synchronization event object on which the wait event action is waiting. The reset event action may reset a particular synchronization event object for example after it has been set by the set event action. The reset event action may have a required event name parameter specifying a name of the synchronization event object and or its associated scenario thread to reset. The reset event action may be contained in a scenario thread that is different from the scenario thread associated with the synchronization event object to be reset.

The log message action may add a message to the scenario execution log for example utilizing the SEE logging engine . The log message action may have a message parameter specifying for example an alphanumeric string to be added to the scenario execution log . The message parameter may be a required parameter of the log message action.

The scenario execution platform may have an associated set of environment variables. The set environment action may set a value of one of the environment variables. Parameters of the set environment action may include a variable name parameter a value parameter and a session wide parameter. Required parameters of the set environment action may include the variable name parameter and the value parameter. The variable name parameter may specify a name of a particular environment variable to be set. The value parameter may specify a value to which to set the particular environment variable. The session wide parameter may specify that the particular environment variable be set either for a particular process environment associated with the scenario execution platform or for an entire session. For example a session wide parameter value of true may indicate that the particular environment variable be set for the entire session and the session wide parameter value may default to false. 

The scenario execution platform may have an associated computer system command processor shell for example a command processor shell of one or more computers such as the computer that implement the scenario execution platform . The execute command action may pass a specified command to the command processor shell for execution. Parameters of the execution command action may include a command parameter an argument string parameter an exit variable parameter an input file parameter and an output file parameter. The command parameter may specify the command to be executed by the command processor shell. The command parameter may be an alphanumeric string indicating a location e.g. a file path of an executable. The location of the executable may be contextualized by an existing search path. The command parameter may be a required parameter. The argument string parameter may specify arguments for the command. For example the argument string parameter may be an alphanumeric string of command line options for the command. The exit variable parameter may specify a name of a SEE code variable instance. A return value of the command may be stored in the SEE code variable with the specified name. The input file parameter may specify a file to which a standard input of the command may be redirected. The output file parameter may specify a file to which a standard output of the command may be redirected.

The scenario specified by the scenario element may include a computer system restart and or rebuild. If the computer system to be restarted and or rebuilt includes one or more computers that implement the scenario execution platform then state of the scenario execution platform may need to be temporarily stored outside of the computer system to be restarted and or rebuilt. The reboot action initiates a shutdown and restart of the computer system to be restarted. The reboot action may have a required safe store parameter specifying a storage location for example a path to a file local or remote to the computer system to be restarted. In an embodiment of the invention scenario execution may continue with a SEE action following the reboot action even if the restarted computer system includes one or more computers that implement the scenario execution platform .

The scenario execution engine may receive SEE code in the SEE code format and in response initiate SEE actions utilizing the action layer interface of action layers . depicts an example action layer interface in accordance with an embodiment of the invention. The action layer interface may include a start scenario element an end scenario element a run action element an ensure requirements element a release requirements element a get named object element and an enumerate actions element . Each action layer interface element and may include one or more interface specifications that specify a manner in which computer system components may configure control and or interact with action layers . As will be apparent to one of skill in the art the interface specifications may include function call specifications program object specifications message specifications such as request response message pairs and or any other suitable programming interface specification.

The start scenario element of the action layer interface may be utilized to inform action layers that a particular scenario or set of scenarios is commencing or is soon to commence. For example an invocation of the start scenario element may correspond to the scenario suite element or the scenario element of SEE code in the SEE code format . Similarly the end scenario element of the action layer interface may be utilized to inform action layers that the particular scenario or set of scenarios has been concluded or is about to be concluded. For example an invocation of the end scenario element may occur when each action of a particular scenario has been dispatched or when each scenario of a particular scenario suite has been executed.

Each scenario may have an associated set of resource requirements. For example an amount of non removable storage at a particular computer an amount of removable storage sole use of a particular output device and or any suitable reservation of some or all of a shared or limited computer system resource. The ensure requirements element of the action layer interface may be utilized to inform action layers of the set of resource requirements and or to instruct action layers to reserve each resource requirement in the set. The release requirements element may be utilized to inform action layers of a set of resources that are no longer requirements and or to instruct action layers to release each resource in the set for general use.

The run action element of the action layer interface may be utilized to inform action layers of one or more SEE actions and or to instruct action layers to carry out e.g. co ordinate and or perform one or more SEE actions. In an embodiment of the invention SEE code such as SEE code corresponding to the action element is provided to the run action element . However each embodiment of the invention is not so limited for example the scenario execution engine may parse verify and or transform the action element and or its sub elements before providing some or all of the action element to the run action element in accordance with a particular interface specification of the run action element .

The get named object element of the action layer interface may enable components for example of the scenario execution platform to request a value of a named object maintained by the action layer . For example the named object may be a SEE code variable instance as described above with respect to the action parameter element . The enumerate actions element of the action layer interface may enable components for example of the scenario execution platform to request a copy of and or a reference to a data structure representing a set of SEE actions capable of being handled by the run action element . For example the data structure may reference each SEE action capable of being performed by the action layer . In an embodiment of the invention the action layer interface inherently includes such an enumeration as part of its specification and the enumerate actions element may be implemented with a conventional computer system component interface specification parser.

Computer system components and data structures in accordance with an embodiment of the invention have been described. Example steps that may be performed by the computer system components and that may utilize the data structures are now described. depicts example steps that may be performed in the scenario execution environment in accordance with an embodiment of the invention. For example each of the steps depicted in may be initiated and or performed by the scenario execution engine .

At step invocation parameters may be parsed. For example the scenario execution engine may be invoked by the SEE viewer to execute a scenario specified by SEE code in the SEE code file . Invocation parameters may include one or more names of action layers to be loaded a name of a scenario suite or a name of a particular SEE code file a verification level parameter an error level at which to exit parameter a name of a log file a log detail level parameter and or a no pop ups parameter. Each such name may include a location qualifier such as a file path a uniform resource locator URL or the like.

The names of action layers to be loaded may override or be complementary to any such action layers specified by SEE code for example by the required providers element . The name of the scenario suite may reference a scenario suite to be executed corresponding to a particular scenario suite element . The name of the SEE code file may reference a particular SEE code file containing SEE code to be executed.

The verification level parameter may indicate an action verification procedure for verifying SEE actions. Suitable action verification procedure designations may include full verification minimal verification same interface verification and deep interface verification. The full verification designation may indicate that full verification should occur for each action unless otherwise specified in the associated SEE code. This may be the default designation. The minimal verification designation may indicate that minimal verification should be performed for each action for example verification may be limited to checking that the action result is pass and not fail. The same interface verification designation may indicate that action verification should occur at a same interface level. For example if action verification includes repetition of the action then the same set of interfaces should be utilized for the repetition as was utilized for the original. In contrast the deep interface verification designation may indicate that action verification should occur at a deeper interface level than that at which the original action occurs. For example if the application programming interface of the service is a lower level interface than the graphical user interface and an original set of actions includes activation of elements of the graphical user interface then verification of the set of actions may include activation of corresponding elements of the application programming interface .

The error level at which to exit parameter may indicate an error severity threshold above which scenario suite execution does not continue. For example failures may occur at a thread scenario or scenario suite level and the default threshold may be set at the scenario suite level. The name of the log file may specify that a log file should be created for the scenario suite to be executed. This may be the scenario execution log or else be in addition to the scenario execution log described above. Each log message may have an associated detail level. The log detail level parameter may specify a detail level threshold that excludes log messages with a higher associated detail level from the log file. The no pop ups parameter may indicate whether or not to interrupt scenario execution with a graphical user interface dialog if an error occurs.

At step the SEE code repository may be queried. For example the scenario execution engine may query the SEE code repository for a particular scenario suite or SEE code file specified in the invocation parameters. At step SEE code may be parsed. For example SEE code specifying the particular scenario suite or contained in the SEE code file queried from the SEE code repository . The SEE code may be parsed by the SEE code parser .

At step required action layers may be loaded. For example the scenario execution engine may load the action layers specified by the SEE code and or in the invocation parameters. At step scenarios may be executed. For example scenarios specified by the SEE code may be executed in the scenario execution environment . Details of scenario execution are described below with reference to . At step action layers may be unloaded. For example some or all of the action layers loaded at step may be unloaded. The loading and unloading of action layers may be optimized with a conventional predictive caching mechanism.

At step resource requirements of the selected scenario may be ensured at one or more of action layers . For example each action layer may have an interface in accordance with the action layer interface and the resource requirements of the selected scenario may be ensured at each action layer through the ensure requirements element of the action layer interface . At step scenario threads may be started. For example scenario threads corresponding to scenario thread elements of SEE code in the SEE code format . Example steps that may be performed by scenario threads in accordance with an embodiment of the invention are described below in more detail with reference to .

At step a thread of execution may wait for the scenario threads started at step to exit. For example the thread of execution that started the scenario threads may wait for them to exit. In an embodiment of the invention step may timeout from waiting for example if the scenario threads do not exit within a specified timeout period. At step the scenario execution log for the selected scenario may be finalized. For example an associated file may be closed or SEE database transaction committed. In an embodiment of the invention the scenario execution log is not finalized until each scenario in an associated scenario suite has finished executing.

At step resource requirements of the selected scenario may be released at one or more of the action layers . For example each action layer may have an interface in accordance with the action layer interface and the resource requirements of the selected scenario may be released at each action layer through the release requirements element of the action layer interface . In an embodiment of the invention the resource requirements that are released at step are the same resource requirements that were ensured at step .

At step it may be determined whether there are more scenarios to be selected. For example it may be determined whether there are more scenarios in a particular scenario suite specified by the scenario suite element of SEE code in the SEE code format . If there are more scenarios to be selected then the thread of execution may return to step . Otherwise the thread of execution may progress for example to step of .

At step variable specifications may be replaced with variable values. For example SEE code variable specifications in action parameter elements may be replaced with values retrieved from action layers with the get named object element of the action layer interface . At step one or more action layers associated with the selected action may be identified. For example the action specified by the action element may be associated with the action layer and the action specified by the action element may be associated with the action layer . The association between action and action layer may be determined from an action to action layer map. For example the action to action layer map may be maintained by the SEE database from information provided by the action layer registration tool .

At step the selected action may be sent e.g. dispatched to each action layer identified at step . For example the selected action may be sent to the run action element of the action layer interface of each identified action layer . At step an action result may be received from each action layer to which the selected action was sent for example at step . At step each action result may be processed for example by the SEE action dispatcher . Depending upon the action results the scenario thread may progress to step or else the scenario thread may exit. Further details with respect to action result processing are described below with reference to .

At step it may be determined whether there are more actions to be selected. For example more actions associated with the scenario thread element of the SEE code. If there are more actions to be selected the scenario thread may return to step . Otherwise the scenario thread may exit.

At step a type of the action result may be determined. For example as shown in the type of the action result the action result type may be a pass a fail or an unexpected error. If the type of the action result is a pass then the scenario thread may progress for example to step . If the type of the action result is a fail or an unexpected error then the scenario thread may progress to step .

At step a computer system user may be notified of the action result. For example the scenario execution engine may display a graphical notification dialog through and or associated with the SEE viewer that initiated execution of the scenario suite. In response to the graphical notification dialog the computer system user may choose to exit the scenario thread or to continue with execution.

At step it may be determined whether to continue with execution. For example if the computer system user has chosen to continue with execution the scenario thread may progress to step . Otherwise the scenario thread may exit. In an embodiment of the invention step is suppressed if the no pop ups parameter of the invocation parameters is set and the determination at step may be made independent of computer system user choice for example the determination may be a function of a value of the error level at which to exit parameter of the invocation parameters.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

The use of the terms a and an and the and similar referents in the context of describing the invention especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this invention are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.

