---

title: Local queue creation security
abstract: Local queue creation security is disclosed. In one embodiment, for a message transaction system being implemented in conjunction with an operating system provide user-level security only, local machine- or local-level security is provided for by a service running on a client. In one embodiment, a method includes sending a first request to create a local queue, by an application of a client from a function of the client to a server. If the server determines that the user under which the application is running has permission to create local queues, the local queue is created. Otherwise, a second request to create the local queue is sent from the function to a service having permission to create local queues. If the service determines that the second request originated locally, then the service calls the server to create the local queue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07093022&OS=07093022&RS=07093022
owner: Microsoft Corporation
number: 07093022
owner_city: Redmond
owner_country: US
publication_date: 20050830
---
This application is a continuation of application Ser. No. 09 533 468 filed Mar. 23 2000 entitled LOCAL QUEUE CREATION SECURITY now U.S. Pat. No. 6 973 498 and which is incorporated by reference.

The invention relates generally to message transaction systems and more particularly to the secure creation of local queues within such systems.

When organizations need to have large scale computer systems that hold mission critical information such as purchase orders financial information etc. they usually resort to message transaction systems. Message transaction systems ensure that data is not lost if the system crashes and also that data is not duplicated such as ensuring that two copies of the same purchase order are not processed etc. A transaction is an activity or a request such as an order a purchase a change or an addition to a database of information. Transactions usually update one or more files on a non volatile storage such as a hard disk drive and thus can serve as both an audit trail and a history for future analyses. A transaction can include one or more messages. A transaction is considered committed when all the messages of the transaction have been received and processed. The messages of a transaction are received at a client at one or more queues of the client.

Frequently the operating systems in conjunction with which message transaction systems are implemented have security that is user based. This means that a given user if he or she has permission to create queues for example is able to create queues regardless of the client onto which the user is actually logged. Generally in such systems users have default permission to create queues since the ability for users to create queues on at least their local machines is necessary for applications within the message transaction systems to run properly.

However this situation can lead to compromised security. Because the security is user based and by default the user is able to create queues on any client a malicious user can swamp a given client by requesting too many to be created queues on the client thus denying service for legitimate users. The security is thus not local or local machine based because of the underlying operating system on which the message transaction system is running within the prior art a given user cannot be limiting to creating queues only on the specific client the user is logged onto. Once the user is given permission to create queues due to the user based security the user is able to create queues on any client. For this and other reasons there is a need for the present invention.

The invention relates to local queue creation security. In one embodiment a method includes sending a first request to create a local queue by an application of a client from a function of the client to a server. If the server determines that the user under which the application is running has permission to create local queues the local queue is created. Otherwise a second request to create the local queue is sent from the function of the client to a server having permission to create local queues. If the service determines that the second request originated locally i.e. within the client itself then the service calls the server to create the local queue.

Embodiments of the invention provide for local based security within message transaction systems even where the underlying operating system has only user based security. In the method described in the previous paragraph for example the user may now have by default no permission to create local queues. Thus when the function calls the server the server will deny the request to create a local queue. However the service running on the client does have user level security to create queues but it only allows queues to be created for requests to create queues that originate from within the client. Thus when the function calls the service if the service determines that this request to create a queue originated locally only then does it call the server to create a queue. From the server s perspective it is still enforcing user level security where both the user himself or herself and the service have such security. However the service only permits queues to be created that are on the same client from which the request originated thus the service itself provides for local machine or local based security by its enforcement as to what situations in which it will allows queues to be created.

The invention includes computer implemented methods machine readable media computerized systems and computers of varying scopes. Other aspects embodiments and advantages of the invention beyond those described here will become apparent by reading the detailed description and with reference to the drawings.

In the following detailed description of exemplary embodiments of the invention reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical mechanical electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated.

It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present invention discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Referring to a diagram of the hardware and operating environment in conjunction with which embodiments of the invention may be practiced is shown. The description of is intended to provide a brief general description of suitable computer hardware and a suitable computing environment in conjunction with which the invention may be implemented. Although not required the invention is described in the general context of computer executable instructions such as program modules being executed by a computer such as a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics network PC s minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The exemplary hardware and operating environment of for implementing the invention includes a general purpose computing device in the form of a computer including a processing unit a system memory and a system bus that operatively couples various system components include the system memory to the processing unit . There may be only one or there may be more than one processing unit such that the processor of computer comprises a single central processing unit CPU or a plurality of processing units commonly referred to as a parallel processing environment. The computer may be a conventional computer a distributed computer or any other type of computer the invention is not so limited.

The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory may also be referred to as simply the memory and includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during start up is stored in ROM . The computer further includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media.

The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer . It should be appreciated by those skilled in the art that any type of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor computers typically include other peripheral output devices not shown such as speakers and printers.

The computer may operate in a networked environment using logical connections to one or more remote computers such as remote computer . These logical connections are achieved by a communication device coupled to or a part of the computer the invention is not limited to a particular type of communications device. The remote computer may be another computer a server a router a network PC a client a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in office networks enterprise wide computer networks intranets and the Internal which are all types of networks.

When used in a LAN networking environment the computer is connected to the local network through a network interface or adapter which is one type of communications device. When used in a WAN networking environment the computer typically includes a modem a type of communications device or any other type of communications device for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It is appreciated that the network connections shown are exemplary and other means of and communications devices for establishing a communications link between the computers may be used.

In this section of the detailed description systems according to varying embodiments of the invention are described. The systems are described in conjunction with which is a diagram of a system according to an embodiment of the invention. The system of includes a client and a server . The client communicates with the server over a network not shown in . The network can be any type of public private or combination public private network or networks such as the Internet a local area network LAN a wide area network WAN an intranet an extranet or combinations thereof as can be appreciated by those of ordinary skill within the art.

Each of the client and the server in one embodiment is a computer such as that described in the previous section of the detailed description. Desirably both the client and the server are part of a message transaction system which is desirably implemented in conjunction with an operating system that provides for user level security. User level security is generally defined as security that is dependent on the identity of a user only and not on the specific client or machine for example that the user is currently logged onto. Within the system of ordinary users generally have by default no permission to create local queues. Such an ordinary user is logged onto the client in the system as a representative example used throughout this section of the detailed description.

The client includes an application program a function and a service . Each of the program the function and the service can in one embodiment be executed by a processor of the client from a computer readable medium thereof such as a memory or a hard disk drive for example. The program is an application program desiring to create a local queue for use within the message transaction system. That is in one embodiment the application program is a message transaction client application program. The application program sends a request to the function to create a local queue on the client . It is noted that the program runs under the logged on user s credentials such that in the example used in this section of the detailed description the program does not have rights to create such a local queue. The function in one embodiment is implemented as including an application programming interface API as known within the art.

The function upon receiving the request sends a first request to the server to create the local queue. However because the server determines that the user under which the client is currently running does not have rights to create such a queue as used in this example the server sends an indication back to the function that the request has been denied. Therefore the function forwards the program s request to create a queue to the service as represented as a second request in . The service is considered its own user having its own user rights and permissions apart from the user actually logged onto the client . In the example the service has user level permission to create local queues on any client machine not just the client . However the service is such that it only allows queues to be created in response to requests that originated from within the client on which the service is itself running. In this way the service provides for local based or local machine based security.

Thus the service determines whether the request to create a queue as has been forwarded to it as represented as the second request has originated from the client on which the service is itself running. Only upon so determining does the service call the server as represented by in to create a queue on the client . It is noted that the server still performs security authentication on the user that is the service but since the service does in fact have user level security to create queues on any local machine the service grants the request and creates the queue on the client sending an indicating that the request was granted and the local queue was created.

It is noted that if the service had received a call to create a queue on the client that did not originated from within the client or if the service had received a call to create a queue on any other client regardless of the call s origination then the service would not allow a queue to be created. In such a situation the service would not call the server to create a queue but if it did the service s request to create a queue would be granted because the service has user level rights to create queues. Thus the service itself provides for local based security such that queues can only be created on the client on which the service is itself running and only in response to requests to create queues that originate from within the client such as from the application program . Thus while the operating system in conjunction with which the message transaction system is implemented may still only provide user level security the service nevertheless provides for local level security.

In this section of the detailed description methods according to varying embodiments of the invention are described. In some embodiments the methods are computer implemented. The computer implemented methods can be realized at least in part as one or more programs running on a computer that is as a program executed from a computer readable medium such as a memory by a processor of a computer such as the computer shown in and described in conjunction with . The programs are desirably storable on a machine readable medium such as a floppy disk or a CD ROM for distribution and installation and execution on another computer. The methods can be implemented in conjunction with the system of described in the previous section of the detailed description such as in conjunction with the application program the function the service and the server of although those of ordinary skill within the art can appreciate that the invention itself is not so limited.

Referring to a flowchart of a method according to an embodiment of the invention is shown. In a first request is sent to create a local queue from a function of a client to a server. The request originated from an application of the client which sent the request to the function. The client and the server are desirably part of a message transaction system implemented in conjunction with an operating system that provides only for user level security.

In the server determines whether the user under which the application is running has permission to create local queues. In one embodiment the default user rights are such that no such permission is given that is users cannot by default create local queues. However if the user does have permission to create a local queue then the server creates the queue in and the method is finished. However more usually the method instead proceeds to since the user typically does not have permission to create local queues.

In the function has received indication that the request to create a queue was denied and therefore sends a second request to create the local queue to a service running on the client. The service in one embodiment desirably has user level rights to create local queues. In the service determines whether the request received originated locally. That is the service determines whether the request is from within the client on which it is running itself and whether the request pertains to the creation of a queue on the client. If not then the request is denied in and the method is finished.

Otherwise the method proceeds to where the service calls the server to create the queue. It is noted that the method then proceeds back to where the server determines whether the user has user level permission to create the queue. However since desirably the service is its own user and has user level permission to create local queues the server grants the request and creates the queue in where the method is finished.

Thus the method described provides for local level security even on an operating system having only user level security. Local level security is generally defined as security dependent on the local machine or client on which a given user is currently logged onto. Thus a given user logged onto a machine such that an application program on that machine requests a local queue to be created on that machine will be allowed by the service to have such a queue created. If the service instead receives a request to create a queue on a different machine than that on which it is running or receives a request that originated from a different machine that that on which it is running the service does not allow such a queue to be created. That is the service itself provides for local level security.

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that any arrangement which is calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the present invention. Therefore it is manifestly intended that this invention be limited only by the claims and equivalents thereof.

