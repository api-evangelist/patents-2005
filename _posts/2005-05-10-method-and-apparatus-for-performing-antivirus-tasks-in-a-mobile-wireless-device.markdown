---

title: Method and apparatus for performing antivirus tasks in a mobile wireless device
abstract: Disclosed are techniques for performing an antivirus task in a mobile wireless device running an embedded operating system. In one embodiment, calls intended for an application programming interface (API) function code is redirected to an antivirus function code. The redirection to the antivirus function code may be performed by modifying a kernel structure to point to a modified entry list instead of an API entry list. The redirection to the antivirus function code may also be performed by modifying the API function code to allow the antivirus function code to execute before the API function code. The kernel structure or the API function code may be properly restored back to its original form. Software implementations of these techniques may be readily loaded and unloaded, and may not require re-installation of the embedded operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07735138&OS=07735138&RS=07735138
owner: Trend Micro Incorporated
number: 07735138
owner_city: Tokyo
owner_country: JP
publication_date: 20050510
---
This application claims the benefit of U.S. Provisional Application No. 60 643 908 filed on Jan. 14 2005 which is incorporated herein by reference in its entirety.

The present invention relates generally to antivirus systems and more particularly but not exclusively to methods and apparatus for performing antivirus tasks in mobile wireless devices.

Mobile wireless devices become more sophisticated with advances in technology. For example some mobile telephones referred to as smart phones now have processing and data storage resources to accommodate photos videos music calendars and other functions previously performed by general purpose computers. Some smart phones also have the capability to exchange data with general purpose computers and other telephones. Although connectivity with other devices has obvious benefits it also brings with it security problems such as exposure to computer viruses.

Computer viruses worms Trojans and spyware are examples of malicious codes that have plagued computer systems throughout the world. Although there are technical differences between each type of malicious code malicious codes are commonly collectively referred to as viruses. For example commercially available antivirus software is designed to scan a computer for viruses as well as worms and other malicious codes. While effective antivirus software is generally available for general purpose computers this is not the case for smart phones. The somewhat limited computing resources of smart phones are optimized to handle telephone communications. Accordingly smart phones run embedded operating systems such as the Microsoft Windows Mobile platform. Unfortunately conventional techniques for performing antivirus tasks in general purpose computers cannot be effectively used in smart phones running embedded operating systems.

Disclosed are techniques for performing an antivirus task in a mobile wireless device running an embedded operating system. In one embodiment calls intended for an application programming interface API function code is redirected to an antivirus function code. The redirection to the antivirus function code may be performed by modifying a kernel structure to point to a modified entry list instead of an API entry list. The redirection to the antivirus function code may also be performed by modifying the API function code to allow the antivirus function code to execute before the API function code. The kernel structure or the API function code may be properly restored back to its original form. Software implementations of these techniques may be readily loaded and unloaded and may not require re installation of the embedded operating system.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

In light of the present disclosure persons of ordinary skill in the art will appreciate that the components disclosed herein may be implemented in hardware software or a combination of hardware and software e.g. firmware . Software components may be in the form of computer readable program code i.e. computer instructions and data stored in a computer readable storage medium such as volatile or non volatile memory. For example a computer readable storage medium may comprise computer readable program code for performing the function of a particular component. Likewise computer memory may be configured to include one or more components which may then be executed by a processor. Components may be implemented separately in multiple modules or together in a single module.

To perform an antivirus task antivirus software needs a method to intercept file system activities in real time. Intercepting file system activities for antivirus tasks in a traditional i.e. non embedded operating system is well known. For Win32 platforms such as the Microsoft Windows NT operating system for personal computers a File System Driver FSD filter may be employed to monitor and intercept file system activities. The FSD filter is a special type of kernel driver on Win32 platforms. It registers itself to the kernel file system manager and acts as a filter layer at the layered file system drivers. It intercepts IRP also referred to as IO request packets requests and catches IRP MJ CREATE IRP MJ READ IRP MJ WRITE and IRP MJ CLOSE dispatches and FASTIO routines to allow for invocation of antivirus scanning tasks. Such technique however is totally unsuitable in resource constrained embedded environments. For example the Windows Mobile platform uses a different file system driver model and does not provide IRP mechanisms.

Although the Windows Mobile platform provides another FSD filter driver it has two major limitations. Firstly it is expected that a FSD filter driver will be loaded during initialization of a file system if the filter driver is registered in the registry. If the FSD filter driver itself is stored in that file system however the loading of the filter driver will not succeed unless the file system is already initialized in the first place. That s a paradox. Secondly the registry itself is also stored in a file system preventing loading of the file driver by the file system. Thus the FSD filter driver model for Windows Mobile platforms should only be used in before built environments which means the driver itself must be built into the operating system and will be available at once at system booting time.

There are two other methods that can be used for real time monitoring of file system activities in Windows Mobile platforms. One is modification of an import table to coredll.dll. The other utilizes a file system change notification.

Import table modification on Windows Mobile platforms involves creating a hooking code as a dynamic link library DLL . The hooking DLL is registered as an object that will be loaded automatically when the system creates a new process by including the hooking code s name in the value of HKEY LOCAL MACHINE System Kernel InjectDLL . During the loading process the hooking DLL goes through all the modules already loaded by the host process and modifies file system application programming interface API entries in their import table. The hooking DLL also hooks the LoadLibrary and LoadDriver API entries to intercept any further DLL or driver loading attempts to ensure later loaded DLL s will also be hooked. Import table modification patches at the client side of an API function call. Because an antivirus task may need to intercept all API function calls from any client process and module each module of each process that may invoke an API may need to be patched.

The import table modification method has several limitations. First it is relatively inefficient and has a high overhead. Since the hooking DLL is loaded each time a new process is created and hooking API entries is a complex task function import relationships between DLL s have a tree structure the import table modification technique significantly increases new process creation time. Second hooking DLL can t be injected to filesys.exe and nk.exe by registry key InjectDll because of the initialization sequence of the kernel and file system. That is the import table modification technique can t be used to monitor or intercept file system activities originating from these two processes. Third there are stability issues because the hooking DLL loading and initialization jobs are relatively complex. Fourth DLL s injected by InjectDll registry key cannot be readily unloaded. This prevents software using such DLL to update itself unless the. operating system is rebooted twice creating major difficulty for users and making the software less commercially appealing .

The file system change notification method on the Windows Mobile platform involves registering to receive notification of system events that make changes to the file system. In this method a system activity monitoring application runs as a separate process. It is registered as an event sink to file system changes. While a file is being changed the monitoring application will receive a notification message so that the application can perform additional processing. The monitoring application is just a file change monitor not a real time system activity monitor and interceptor. Therefore it cannot intercept execution requests to infected objects already in the file system. Because of this the file system change notification method cannot fully satisfy the requirements of real time anti virus products.

Referring now to there is schematically shown an example communications network where embodiments of the present invention may be employed. In the example of the network is a telephone network that includes mobile telephones i.e. . . . a wireless communications infrastructure and a mobile telephone service center . In one embodiment a mobile telephone is a smart phone having an input device e.g. a keypad and a display screen . The mobile telephones are running an embedded operating system which in one embodiment is the Microsoft Windows Mobile platform. Embedded operating systems are well known in the art and typically used in embedded specialized applications with limited resources. Embedded operating systems are designed to be very compact and efficient forsaking many functionalities that non embedded computer operating systems provide and which may not be used by the specialized applications they run. Embedded operating systems are frequently also real time operating systems. Other examples of well known embedded operating systems include the Symbian and the QNX operating systems.

The mobile telephones may wirelessly communicate with each other or other devices by way of the wireless infrastructure operated by the mobile telephone service center . The mobile telephone service center may connect a mobile telephone to other telephone networks including the Public Switched Telephone Network PSTN . The mobile telephone service center may also be coupled to an Internet gateway to connect the mobile telephones to a public computer network which in the example of is the Internet. The mobile telephone service center thus allows the mobile telephones to communicate with telephones i.e. . . . over the PSTN and with one or more computers e.g. a website over the Internet. For example a mobile telephone may receive a file from a computer or another smart phone. The mechanisms for connecting a smart phone to other devices on a telephone or computer network in general are well known and not further described here.

In one embodiment a mobile telephone running an embedded operating system includes antivirus software for protection against computer viruses. When a file related operation is initiated in the mobile telephone the antivirus software performs its antivirus task prior to allowing the file related operation to proceed to completion. In one embodiment the antivirus software intercepts a function call to a function code for a file related operation such as reading of a file received over the Internet. The function call is redirected to an antivirus function code of the antivirus software which may scan the file for viruses. The antivirus function code may forward the function call to the original function code i.e. the function code supposedly invoked by the function call after the file has been checked for viruses. The technique of redirecting a function call from a function code to an antivirus function code is also referred to herein as hooking. For example embodiments of the present invention may be implemented in a hooking code described later on below.

In one embodiment the antivirus software intercepts a function call to the original function code using a technique now described with reference to . schematically illustrates how an application programming interface API function code may receive a function call before the kernel structure is modified to allow redirection to an antivirus function code. In the example of a kernel structure is referenced by system handle structures and file handle structures . Both of these handle structures are implied by file handles. For different file handles there are different handle structure instances. However there is only one instance of a kernel structure for every type of handles e.g. for file handle type. This makes the present hooking code solution very flexible and isolated from application processes. As its name implies the instances of kernel structure are part of the kernel which is the central module of the embedded operating system. On the Windows Mobile platform the kernel structure is referred to as the CINFO structure.

The kernel structure includes a reference to an API entry list . The reference to the API entry list may be a pointer to an address of an entry point of the API entry list . The API entry list comprises a listing of the API function codes supported by the embedded operating system. For example the API entry list has a reference to the entry point of the API function code . The API function code may comprise computer readable program code for a file operation such as reading or writing of a file. When a function call to the API function code is made e.g. by an application or driver the API function code receives the function call by way of the link from the kernel structure to the API entry list see arrow and from the API entry list to the API function code see arrow .

Still referring to the API function code may be invoked by following the link from the kernel structure A to the replacement entry list see arrow from the replacement entry list to the antivirus function code see arrow and from the antivirus function code to the API function code see arrow . Program execution in the API function code proceeds in the same manner as if the antivirus function code has not performed the antivirus task. Advantageously the above described technique allows function calls to the API function code to be transparently redirected to the antivirus function code prior to or after allowing the API function code to execute. This enables performance of antivirus task using the antivirus function code before or after a file operation is executed by the API function code . For example assuming the API function code is for reading a file in the mobile telephone the antivirus function code may scan that file for viruses before allowing it to be read. In the event the file has a virus the antivirus function code may prevent execution of the API function code to prevent the virus from spreading in the mobile telephone .

Modifying the kernel structure instead of non kernel structures such as import address tables allows for a relatively efficient modification. The kernel structure is part of the kernel and is on the server side of the embedded operating system. That is the kernel structure is shared by all client processes and modules. Modifying an entry in the kernel structure as shown in advantageously allows all subsequent API function calls to be redirected to the antivirus function code .

The number of API function calls that can be hooked for redirection to an antivirus function code may vary depending on the operating system. Using the Windows Mobile platform as an example Table 1 shows the API functions that can be hooked in the APIset W32A served by the Protected Server Library PSL filesys.exe while Table 2 shows the API functions that can be hooked in the APIset HFSD and W32H related to file handles.

Macros may be created to expedite implementation of a hooking code incorporating the redirection hooking logic described in connection with . Table 3 provides example macros for hooking the file system API functions CreateFileW see Table 1 and WriteFile see Table 2 .

In the example of Table 3 the HOOK DEF macro is for hook function and stub function prototype declaration. Given a function return type calling convention function name and function parameter list HOOK DEF would declare function prototypes for hook XXXXX and old XXXXX where XXXXX represents the function name. The hook XXXXX function is the new API entry while old XXXXX is the original API entry. The HOOK W32A FUNC macro is used to define a hook entry for the APIset W32A see Table 1 while the HOOK HFSD and HOOK W32H macros are used to define a hook entry for the APIset HFSD and W32H see Table 2 . Given an API function index and API function name the API entry will be replaced with the hook XXXXX function. All of the macros will take effect at the hooking code initialization deinitialization phase to hook unhook the API functions.

To provide the most flexibility the hooking code is advantageously configured to be injected into the PSL s context at any given time such as during boot time as soon as the user activates a feature after a software update and so on. This may be achieved using a remote dynamic link library DLL loading technique. In one embodiment the hooking code for redirecting a function call to an antivirus function code is implemented as a DLL. The hooking code DLL is injected to the process address space of the PSL serving the APIset that is going to be hooked. For hooking of file system API functions on the Windows Mobile platform the object PSL process is filesys.exe. Immediately below is an example pseudo code for injecting the hooking code DLL into the PSL s context.

During the execution of LoadLibrary LoadDriver functions the initialization routine of the hooking code may be invoked to get all required API functions hooked for redirection to the antivirus function code.

To avoid having to reboot the operating system during a software update the injected hooking code should be capable of being dynamically unloaded from the PSL s process address space at any time. This may be achieved on the Windows Mobile platform using the same process for injecting codes into a PSL s address space except that GetModuleHandle and FreeLibrary functions are used instead of LoadLibrary LoadDriver functions. During execution of the FreeLibrary function the deinitialization routine of the hooking code may be invoked to get all hooked API functions restored.

There is a possible racing condition during the restoration process of the API functions and unloading of the hooking code. If any thread running into the hooking code or original API function code returns at a time when the hooking code already unloaded the CPU central processing unit control will be transferred to an address without legal instructions. That will result in a severe system error that could crash the operating system. To avoid this problem an aggressive unhook and lazy unload algorithm may be employed. In one embodiment a global counter is used to keep track of the number of threads calling into the hooking code. In each hook XXXXX function the global counter is increased at entering time and decreased at leaving time. In the deinitialization routine of the hooking code API entry or instruction restoration jobs are performed immediately to ensure no more threads can run into the hooking code. Then the hooking code is unloaded from memory after waiting for the global counter to decrease to zero.

Referring now to there is shown a flow diagram of a method of performing an antivirus task in a mobile wireless device running an embedded operating system in accordance with an embodiment of the present invention. In step a reference to an original entry list is replaced with a reference to a replacement entry list in a kernel structure of the embedded operating system. The replacement entry list includes a reference to an antivirus function code. In step a function call to an original function code is redirected to the antivirus function code. A reference to the original function code may have been included in the original entry list which has since been replaced with the replacement entry list. The replacement entry list may include a reference to the antivirus function code such that the function call to the original function code is redirected to the antivirus function code by way of the replacement entry list. In step an antivirus task is performed with the antivirus function code. The antivirus task may comprise scanning and cleaning one or more files in the mobile wireless device for computer viruses. In step the function call is forwarded to the original function code after the antivirus task has been performed. This allows the function call to the original function to proceed assuming no viruses were found or virus disinfected by the antivirus task. For example the function call to the original function code may be for opening a file stored in the mobile wireless device. By transparently performing the antivirus task before allowing the function call to proceed the antivirus task may check the file for viruses before the original function code opens or allows opening of the file. It is to be noted that antivirus logics can also be invoked after an API call is executed. For example after CloseHandle is finished antivirus code may be invoked to ensure the modified file is not infected.

Another technique for allowing antivirus software to intercept a function call to an original function code is now described with reference to . schematically illustrates a function code before being modified to allow redirection to an antivirus function code. In one embodiment the function code comprises an API function code of an embedded operating system running in a mobile wireless device. In the example of the function code comprises instructions at memory locations offset from an API entry address i.e. API entry 0 API entry 2 and so on . schematically illustrates how a function call to the function code may be redirected to an antivirus function code in accordance with an embodiment of the present invention. In the example of the function code has been labeled as 502A to indicate it has been modified. In one embodiment the function code has been modified such that the its first few instructions have been replaced with a reference to the antivirus function code see arrow . The reference to the antivirus function code may be an instruction to load the address of the entry point of the antivirus function code into the program counter for example see instructions in API entry 0 and API entry 4 of function code A . Loading of the address of the entry point of the antivirus function code allows execution of the antivirus function code when a function call is made to the function code A. After an antivirus task has been performed by the antivirus function code the function call may be forwarded back to the function code A. In one embodiment the function call is forwarded back to the function code A by way of a stub code . For example a jump instruction to the entry point i.e. stub entry 0 of the stub code may be executed after the antivirus function code has performed the antivirus task see arrow . As shown in the stub code may include the instructions removed from the function code as part of its modification compare API entry 0 and API entry 4 of the function code in and the stub entry 0 and stub entry 4 of the stub code in . The removed instructions of the function code may be executed in the stub code . Thereafter program execution may proceed with the next instruction in the function code A see arrow by loading the address of the next instruction API entry 8 in this example in the program counter for example. The above described modification may be performed for all API function codes that need to be intercepted to perform an antivirus task.

The original function code may be restored to its previous form i.e. before step after assuring that each call redirected to the antivirus function code has exited the antivirus function code. The original function code may be restored to its previous form by employing a global counter to keep track of redirections to the antivirus function code as in method see .

Referring now to there is schematically shown a mobile telephone in accordance with an embodiment of the present invention. The mobile telephone of may have less or more components to meet the needs of a particular application. As shown in the mobile telephone may include a central processing unit . The mobile telephone may have one or more buses coupling its various components. The mobile telephone may include one or more input devices e.g. keypad a computer readable storage medium CRSM e.g. flash card a CRSM reader e.g. flash card reader a display screen e.g. LCD display a wireless communications interface for coupling to a wireless network one or more data storage devices e.g. non volatile memory and a main memory e.g. RAM . Software embodiments may be stored in the computer readable storage medium for reading into the data storage device or the main memory . Software embodiments may also be received by way of the wireless communications interface .

In the example of the mobile telephone has been configured to perform an antivirus task by redirecting function calls intended for an API function code to an antivirus function code as in the embodiments described above. The main memory may also include the embedded operating system . Components in the main memory may be executed by the central processing unit .

While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

