---

title: Renderfarm monitoring system
abstract: A renderfarm monitoring system collects and aggregates comprehensive renderfarm information from a distributed scheduling system. Listener modules interface with dispatcher modules. The dispatcher modules queue jobs and tasks and request processing for those tasks in which the required input data is available. The listener modules receive streams of events from dispatcher modules indicating the status of all associated jobs and tasks. The listener modules also receive system status information from renderfarm and user computers. Renderfarm usage information, such as jobs, tasks, and system status, is aggregated by a database system. Client applications can access renderfarm usage information from the database system and use this information to monitor, analyze, visualize, and control renderfarm activities. Additionally, renderfarm usage information associated with tasks can be used to prioritize the jobs, improving overall renderfarm efficiency.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577955&OS=07577955&RS=07577955
owner: Pixar
number: 07577955
owner_city: Emeryville
owner_country: US
publication_date: 20050303
---
This application claims priority to U.S. Provisional Application No. 60 625 307 entitled RENDERFARM MONITORING SYSTEM filed on Nov. 4 2004 and incorporates by reference the disclosures of these applications herein for all purposes.

The present invention relates to the field of computer graphics and in particular to methods and apparatus for creating computer generated images and animations. Many computer graphic images are created by mathematically modeling the interaction of light with a three dimensional scene from a given viewpoint. This process called rendering generates a two dimensional image of the scene from the given viewpoint and is analogous to taking a photograph of a real world scene. Animated sequences can be created by rendering a sequence of images of a scene as the scene is gradually changed over time.

A great deal of effort has been devoted to making realistic looking rendered images and animations. Rendering can include processing scenes with thousands of different objects applying sophisticated lighting shading texturing and animation algorithms simulating physical phenomena and performing intensive image processing calculations. Because of this rendering realistic looking images typically is a computationally intensive task. Furthermore as even one minute of animation typically requires thousands of rendered images animators require large amounts of computing capacity to quickly and efficiently create animation.

A renderfarm is one solution for providing animators with large amounts of computing capacity. A renderfarm is a set of computers adapted to perform a large number of rendering or rendering related tasks in parallel. In some implementations a renderfarm is a cluster computing system comprising thousands or tens of thousands of server computers networked together. Each server computer can have its own memory and storage as well as access to shared memory and or storage. Server computers can be general purpose computers or computers including components specifically adapted to rendering and rendering related tasks.

Many renderfarms use a distributed scheduling system such as Pixar s Alfred to manage the resources of the renderfarm. The distributed scheduling system typically uses a large number of independent dispatcher units to schedule user requests for renderfarm resources. The distributed scheduling system enables an animation studio with hundreds or thousands of animators to efficiently schedule a large number of complicated and often interdependent tasks to be processed by the renderfarm. Because of its distributed nature the distributed scheduling system is highly scalable and robust.

Unfortunately because the information on tasks is spread over numerous different dispatcher units it is often difficult for system administrators to collect aggregate information on renderfarm usage. Furthermore some renderfarm usage information such as dependencies between different tasks is unavailable to system administrators. The renderfarm usage information that is available to system administrators is often stored in log files and other data formats that make querying and analyzing renderfarm information difficult and time consuming. As some renderfarm usage information is unavailable or difficult to obtain using a distributed scheduling system some administrative tasks such as spotting and recovering from errors is time consuming. Additionally incomplete renderfarm usage information makes it difficult to prioritize tasks to maximize the efficiency of the renderfarm.

It is therefore desirable for a system and method to provide renderfarm users and administrators with more comprehensive renderfarm usage information. It is also desirable for the system and method to interface efficiently with the distributed scheduling system of a renderfarm and without risking disruptions to renderfarm activities. Furthermore it is desirable for the system and method to enable quick and efficient querying and analysis of renderfarm information. It is also desirable for the system and method to help the distributed scheduling system to prioritize renderfarm tasks to maximize the efficiency of the renderfarm.

An embodiment of the invention collects and aggregates comprehensive renderfarm information from a distributed scheduling system. Listener modules interface with dispatcher modules. The dispatcher modules queue jobs and tasks and request processing for those tasks in which the required input data is available. The listener modules receive streams of events from dispatcher modules indicating the status of all associated jobs and tasks. The listener modules also receive system status information from renderfarm and user computers. Renderfarm usage information such as jobs tasks and system status is aggregated by a database system. Client applications can access renderfarm usage information from the database system and use this information to monitor analyze visualize and control renderfarm activities. Additionally renderfarm usage information associated with tasks can be used to prioritize jobs improving overall renderfarm efficiency.

In an embodiment a system for monitoring a renderfarm the system comprises a plurality of dispatcher modules and a plurality of listener modules. Each dispatcher module is adapted to receive a renderfarm job including at least one renderfarm task from an application. Each listener module is adapted to interface with and to receive renderfarm usage information from at least one of the plurality of dispatcher modules. A database system is adapted to aggregate renderfarm usage information from the plurality of listener modules.

Each of the plurality of listener modules is adapted to receive a stream of events from at least one of the plurality of dispatcher modules. The stream of events indicates renderfarm usage information. The renderfarm usage information may include a status of a renderfarm job. The renderfarm usage information may include a status of a renderfarm task. The status of the renderfarm task may indicate that the renderfarm task is being processed by the renderfarm that the renderfarm task is waiting to be processed by the renderfarm and or that the renderfarm task requires the completion of a second renderfarm task included in the renderfarm job.

Block diagram illustrates the interdependencies of the tasks of job . In block diagram tasks in the same row are interdependent. In example job each row represents the typical tasks used to produce a frame of animation. For example the output of setup task is used as input to rendering tasks and . Each rendering tasks output is used by a corresponding compositing step. For example the output of rendering task is input into compositing task . Similarly the outputs of rendering tasks and are input into compositing task . Once a compositing task such as task is complete a corresponding clean up task such as task is executed. The dependencies of tasks shown in are for illustration and jobs can have tasks with arbitrary and often complex dependency relationships.

Although many tasks for a given frame are interdependent and must be executed sequentially tasks from different frames can often be executed in parallel. For example after setup task is complete any or all of the rendering tasks and can be executed in parallel. In block diagram tasks in the same column can be executed in parallel provided that each task s input data is available.

A renderfarm for an animation studio typically handles thousands of jobs at a time with each job having hundreds or thousands of tasks. A distributed scheduling system can be used to coordinate the processing of tasks by the renderfarm. illustrates an example distributed scheduling system of a renderfarm suitable for use with a system according to an embodiment of the invention. A set of users including users and are connected with a renderfarm . Renderfarm typically includes a set of computers adapted to perform a large number of rendering or rendering related tasks in parallel. In some installations a renderfarm is a cluster computing system comprising thousands or tens of thousands of server computers networked together. Each server computer can have its own memory and storage as well as access to shared memory and or storage. Server computers can be general purpose computers or be specifically adapted to rendering related tasks.

In some implementations each computer in renderfarm provides one or more processing slots. A processing slot is a set of computing resources capable of processing a task. A processing slot may correspond with one or more processors distributed over one or more computers. In an embodiment each slot is capable of processing any type of task. In an alternate embodiment slots can have different capabilities including processing performance memory and disk capacity network bandwidth and installed or licensed software applications thus some slots may not satisfy the requirements of all types of tasks.

To process a job using the renderfarm user submits a job description to a dispatcher module . In an embodiment each user has a separate dispatcher module for coordinating his or her own jobs. In a further embodiment each user s dispatcher module is operates on the user s computer. The job description specifies one or more tasks and any associated data needed to create the desired output images or animation. The job description can be generated manually by a user or automatically using computer graphics software such as modeling or animation software.

Dispatcher receives the job description from the user . Dispatcher parses the job description and adds the tasks specified by the job description to a list of tasks . The list of tasks includes any outstanding tasks associated with one or more jobs requested by the user . The list of tasks also stores dependencies between tasks such as output data required from other tasks.

For each task on the list of tasks that has its input data available the dispatcher requests an available processing slot in renderfarm from scheduler module . Scheduler module tracks the availability of processing slots in the renderfarm . In an embodiment scheduler module receives slot requests from multiple dispatchers. If necessary scheduler module determines which processing slots meet the requirements of the task associated with each processing slot request. If there are no available processing slots in the renderfarm scheduler queues pending processing slot requests.

Once a processing slot meeting the requirements of a processing slot request becomes available such as processing slot the scheduler module returns slot assignment to the requesting dispatcher module . The slot assignment specifies the processing slot to be used to process the task associated with the slot request. The dispatcher module then submits the appropriate task to the assigned processing slot . In an embodiment the dispatcher module also submits a copy of the slot assignment to the assigned processing slot to verify that this task is authorized to use the assigned slot .

The processing slot processes the assigned task and returns the resulting output data to the user or to a shared data storage. The dispatcher module is then notified that the task is complete. Based upon this notification the dispatcher module evaluates the list of tasks to determine if any additional tasks are dependent on the completed tasks. If the input data needed for any additional tasks is now available as a result of the completion of task the dispatcher module will request additional processing slots for these tasks. Once all of the tasks of job description are complete the dispatcher module notifies the user .

In this example distributed scheduling system information about pending jobs queued or blocked tasks and any dependencies are maintained by their associated dispatcher modules rather than the scheduler module. As a result renderfarm administrators must manually access and aggregate information from each dispatcher module to gain a comprehensive overview of the renderfarm usage.

To address this an embodiment of a renderfarm monitoring system interfaces with the distributed scheduling system to collect and aggregate renderfarm usage information.

The renderfarm monitoring system includes a set of one or more listener modules adapted to receive renderfarm usage information from the set of sources . In an embodiment there is a listener module corresponding to each dispatcher module. In a further embodiment each dispatcher module broadcasts a stream of data specifying events handled by the dispatcher module. Events include job specifications task requests slot assignments and task completion notifications. Each listener module receives the stream of events from its associated dispatcher module and updates a database system with the state of all jobs and tasks. In yet a further embodiment each listener module listens passively to the event stream broadcast by the corresponding dispatcher module as a result if the monitoring system malfunctions or fails it does not disrupt dispatchers or other parts of the scheduling system.

In an additional embodiment one or more of the set of listener modules receive system status information from user and renderfarm computers. In an embodiment system status information is communicated using a network multicast protocol. In a further embodiment a single listener module can receive multicast system status information from all of the user and renderfarm computers on the network or within a subnet of the network. If multicast network communications are restricted within a subnet then additional listener modules can be provided to receive multicast system status information from user and renderfarm computers within other subnets. In another embodiment a network management protocol such as SNMP can be used to communicate system status information to the set of listener modules . The database system is updated with system status information received by the set of listener modules .

The database system aggregates renderfarm usage information received from all of the set of listener modules. As the database system receives renderfarm usage information from all of the dispatchers via the set of listener modules the database system stores a comprehensive record of progress of all of the jobs and their tasks including their dependencies. In an embodiment the database system includes one or more databases such as SQL compatible relational databases. In a further embodiment the database system is accessed by the set of listener modules and client programs discussed in detail below via an API. The API can be tailored to the types of data stored in the database system such as jobs tasks processing slots listeners and user and renderfarm computers.

In an additional embodiment the set of listener modules are supervised by a listener administration module . In an embodiment each of the set of listener modules and its corresponding dispatcher module are executed by its associated user computer. To locate and monitor the set of listener modules the listener administrator module contacts the dispatcher supervisor module to locate all of the active dispatcher modules. The listener administrator module can then contact the corresponding listener modules at these locations.

Renderfarm usage information can be retrieved from the database system by one or more types of client applications . Client applications can include command line tools standalone and web browser based visualization applications and data analysis applications . In an embodiment client applications can retrieve renderfarm usage information from the database system using an API. In a further embodiment the API can be tailored to the types of data stored in the database system such as jobs tasks processing slots listeners and user and renderfarm computers.

Renderfarm usage information can be used by clients in a number of different ways. One use is to analyze renderfarm usage to determine if resources are being used effectively and to plan future renderfarm expansions. For example the renderfarm usage information can present a list or graph of jobs and tasks that are queued processing and or blocked. This graph can be updated over time to show how the queue for renderfarm resources changes according to the work cycle of the animation studio. Similarly renderfarm administrators can view graphs of distributions of queued tasks by time and complexity over the course of a day or week. Renderfarm administrators can spot trends in increasing queue lengths and plan expansion accordingly.

Another use of renderfarm information is to more efficiently administrate pending jobs or tasks. For example if a renderfarm computer is taken offline or fails the tasks being processed by the processing slots provided by this computer will fail. However the dispatchers associated with these failed tasks will not immediately know that these tasks have failed and hours or days could pass before the dispatchers resubmit these failed tasks to the renderfarm for processing by different processor slots. Previously renderfarm administrators could manually search log files for tasks running on a failed renderfarm computer and manually restart each one individually. This could be an arduous task requiring searching through log files of several days to isolate tasks that have been logged as started without a corresponding log entry indicating completion. Once each failed task has been located renderfarm administrators must then manually resubmit each task.

In contrast using the renderfarm usage information provided by an embodiment of the invention renderfarm administrators can locate failed tasks associated with a failed renderfarm computer using a simple database query. For example a database query can request a list of the tasks currently assigned to processing slots provided by the failed renderfarm computer. Renderfarm administrators can provide this list to the scheduler module to reschedule these tasks for different processing slots.

Renderfarm usage information can also be used to prioritize tasks to maximize the efficiency of the renderfarm. One metric of renderfarm efficiency is the number of jobs completed in a given amount of time. To maximize the number of jobs completed in a given amount of time an embodiment of the invention first schedules a representative portion of the tasks for each job. For example a representative portion of the tasks of a job can be the tasks needed to create a single frame in an animated sequence. Upon completion of each representative sample the renderfarm usage information is analyzed to determine the total amount of time required to complete this sample of tasks and to estimate the remaining time or cost needed to complete the remaining tasks of the job. The scheduler module can then rank processing slot requests giving a higher priority to tasks associated with jobs having a lower cost or smaller estimated time to completion. In a further embodiment cost estimates for jobs are revised and jobs are reprioritized as more tasks are completed.

An embodiment of listener module creates a listener pid file to indicate that there is an active listener associated with a dispatcher module preventing multiple listener modules from being assigned to the same dispatcher module. Embodiments of listener modules and can include log files and respectively for recording a history of critical listener module activities such as operational errors incurred by listener modules.

Listener modules and update a database system with renderfarm usage information. In an embodiment renderfarm usage information is communicated from listener modules such as and to the database system using API calls including putListener putJob and putMachine which update renderfarm usage data relating to listener modules jobs and user and renderfarm computers respectively. In an additional embodiment if the database system is unavailable or inaccessible to a listener module the listener module caches renderfarm usage information until the database system is capable of receiving information from the listener module. In a further embodiment listener modules communicate with the database system via a series of one or more proxy modules. Each proxy module receives data from multiple listener modules and outputs data via a single connection. Proxy modules can be used to reduce the required number of data connections for the database system thereby improving database performance.

In a further embodiment the database system includes at least two databases . A first database is adapted to receive renderfarm usage information from listener modules. A second database periodically mirrors the contents of the first database. When tasks are complete the corresponding renderfarm usage data is removed from the first database however a copy of this renderfarm usage data is maintained by the second database. As a result the first database maintains renderfarm usage data for currently pending tasks while the second database maintains an archive of all renderfarm usage data including that from currently pending tasks and from completed tasks. Both databases can be accessed by client applications to retrieve renderfarm usage data. By using two databases the performance and responsiveness of the monitoring system to renderfarm usage data requests is improved.

Computer typically includes components such as one or more general purpose processors and memory storage devices such as a random access memory RAM disk drives and system bus interconnecting the above components. RAM and disk drive are examples of tangible media for storage of data audio video files computer programs applet interpreters or compilers virtual machines embodiments of the herein described invention including geometric scene data object data files shader descriptors a rendering engine output image files texture maps and displacement maps. Further embodiments of computer can include specialized audio and video subsystems for processing and outputting audio and graphics data. Other types of tangible media include floppy disks removable hard disks optical storage media such as DVD ROM CD ROM and bar codes non volatile memory devices such as flash memories read only memories ROMS battery backed volatile memories and networked storage devices.

Further embodiments can be envisioned to one of ordinary skill in the art after reading the attached documents. For example the listener module can be integrated with its corresponding dispatcher. In other embodiments combinations or sub combinations of the above disclosed invention can be advantageously made. The block diagrams of the architecture and flow charts are grouped for ease of understanding. However it should be understood that combinations of blocks additions of new blocks re arrangement of blocks and the like are contemplated in alternative embodiments of the present invention.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

