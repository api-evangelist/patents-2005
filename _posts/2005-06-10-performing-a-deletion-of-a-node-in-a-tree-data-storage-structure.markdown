---

title: Performing a deletion of a node in a tree data storage structure
abstract: The addition of a layer between a tree data storage structure and a persistent storage is disclosed. The additional layer, called a storage module, generates an identifier and allocates it to a node in the tree data storage structure. The storage module additionally performs a mapping function, allocating the identifier to a location in persistent storage. If the node is later deleted from the tree data storage structure, then the mapping of the identifier to the location in persistent storage is likewise deleted. In this way, if the node is deleted and, concurrently, a lookup or write operation is attempted on the deleted node, the storage module will read the identifier associated with the deleted node but will not be able to map the identifier to a location in persistent storage. Instead, an exception is generated and sent to the tree data storage module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07630998&OS=07630998&RS=07630998
owner: Microsoft Corporation
number: 07630998
owner_city: Redmond
owner_country: US
publication_date: 20050610
---
This application is related to U.S. patent application Ser. No. 11 149 656 entitled Implementing A Tree Data Storage Structure In A Distributed Environment filed herewith and incorporated by reference in its entirety.

The invention generally relates to data storage and specifically to tree data storage structures providing concurrent operation execution.

Tree data storage structures such as B trees and variations of B trees e.g. B trees B trees binary trees and others are used for storing large files of information on secondary storage and for supporting insertion lookup deletion and enumeration operations. Many tree data storage structures allow operations to be performed concurrently. Some tree data storage structures support concurrent operations by locking only portions of the structure allowing operations involving other portions of the structure to continue concurrently. Such locking mechanisms are discussed for example in P. L. Lehman and S. B. Yao ACM Transactions on Database Systems vol. 6 no. 4 pp. 650 670 1981 .

Primarily because locking mechanisms may be complicated other tree data storage structures support concurrent operations by using an altered structure in the tree data storage structure. An example of such a structure proposed by Lehman and Yao is a B link tree which uses additional pointers to allow for more concurrent operations. Promoting concurrency and diminishing a focus on locking by changing the structure of the tree data storage structure is discussed in Y. Sagiv Journal of Computer and System Sciences vol. 33 no. 1 pp. 275 296 1986 .

The increase in concurrency offered by structures such as B link trees may however pose problems during execution of concurrent operations caused by node deletion. The tree may be compacted as nodes are deleted and the tree may be re balanced to promote for example efficient execution of operations. A deletion algorithm such as that discussed in Sagiv may start a background thread to perform compaction and tree rebalancing. Because the background compression may delete empty nodes a traversal operation may encounter a node that has been deleted and result in confusion delay and inefficiency. For example unless there is an indication that a node has been deleted storage allocated to deleted nodes may not be deallocated and reused until there is certainty that no reference to the deleted nodes will be used in some concurrent B tree operations. Obtaining certainty that no reference to deleted nodes is active is difficult especially in a distributed B tree implementation and the deallocated space therefore may not be reused promptly.

Thus there is a need for efficient systems and methods for detecting deleted nodes in a tree data storage structure that provides for concurrent operations. The systems and methods should avoid complicated locking schemes promote concurrency and detect the deleted nodes to allow for restarting a traversal higher up in a tree structure. The systems and methods should include generating an exception when a pointer to a node that has been deleted is encountered.

The invention provides for detecting deleted nodes in a tree data storage structure generating an exception when pointers of deleted nodes are encountered and allowing for restarting a traversal higher up in the tree structure. The invention includes adding a layer in between a tree data storage structure and an associated persistent storage. The additional layer called a storage module generates a unique identifier which has a purpose similar to a pointer and allocates it to a node in the tree data storage structure. Such an identifier may not have been previously associated with any other node in the tree data storage structure. The storage module additionally performs a mapping function allocating the identifier to a location in persistent storage. In this way when a lookup operation is performed regarding a node the node s identifier is mapped or correlated to the location in persistent storage. Data saved at the location is then read and the lookup operation is satisfied.

If the node is later deleted from the tree data storage structure then the mapping of the unique identifier to the location in persistent storage is likewise deleted. In this way if the node is deleted and concurrently an operation is attempted on the deleted node the storage module will be polled to retrieve information associated with the node stored in the persistent storage. The storage module may read the identifier associated with the deleted node but may not be able to map the identifier to a location in persistent storage as the identifier was deallocated from the location when the node was deleted. Instead an exception may be generated and sent to the tree data storage module. The tree data storage module may then appropriately address the exception by for example starting the traversal higher in the tree data storage structure and retry.

The term tree data storage structure refers to any storage system or structure such as binary trees B trees or variants of B trees or other similar structures that provide an indexing of stored information. The tree data storage structure includes nodes branching out from a root node where each node may include information consisting of one or more keys an operation such as less than or greater than and or information typically referred to as a pointer regarding a descendent node. Such structures may be used for storing large files of information and such information may be stored on a secondary storage device such as a disk. The term identifier refers to a form of or a substitute for a pointer of a node of a tree data storage structure that may be used to identify only one past or present node of a tree data storage structure and is used to map the node to a location in persistent storage. The term persistent storage refers to any type of computer storage media including but not limited magnetic discs magnetic tapes bubble memory RAM ROM EEPROM flash memory or other memory technology CDROM DVD or other optical disk storage magnetic disk storage or other magnetic storage devices or any other storage medium whose contents are preserved when its power is off.

While a general purpose computer is described below this is merely one example. The present invention also may be operable on a thin client having network server interoperability and interaction. Thus an example embodiment of the invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as a browser or interface to the World Wide Web.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a central processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

The tree data storage structure may be capable of satisfying for example a lookup operation concurrently with an insertion operation or an insertion operation concurrently with a deletion operation such operations being known to those skilled in the art. That is the tree data storage structure may be any tree data storage structure capable of satisfying concurrent execution of operations. The tree data storage structure may include nodes and each node may include one or more keys exemplified by keys . For example the node may include k number of keys. Additionally the node may include a k 1 number of pointers to other nodes within the data tree storage structure . Nodes such as the node may include a key data pair . Those skilled in the art additionally will understand that such key data pairs may be located in leaf nodes internal nodes or both leaf and internal nodes depending on the type of tree data storage structure.

The tree data storage structure may be in communication with or alternatively part of the storage module . The tree data storage structure may communicate with the storage module by any other appropriate means or methods. The storage module may include identifier allocation program code and a mapping of identifiers to nodes of the tree data storage structure and to locations within the persistent storage .

The identifier allocation program code may be for example executed by an operating system on a computer such as the computer . The identifier allocation program code may include instructions for creating and allocating that is designating a unique identifier to a location in the persistent storage . The storage module may perform various operations using the unique identifiers. For example a read operation may be performed to read the unique identifier and data may be written to the unique identifier. Additionally the storage module may deallocate the unique identifier and thus disassociate the unique identifier from the location in the persistent storage .

When a node is inserted into the tree data storage structure the structure may call the storage module for an allocation of a unique identifier to the inserted node. The identifier allocation program code may be executed and an identifier may be allocated to the inserted node. If the inserted node is the node for example and it is later deleted the identifier is deallocated from the persistent storage . According to one embodiment of the invention no identifier that is deallocated from persistent storage is allocated to a second node. That is no identifier is reused. In this way each node is allocated with an identifier that is uniquely different from all other identifiers whether allocated or deallocated. Thus the storage module may be thought of as a layer between the tree data storage structure and the persistent storage providing a unique mapping of nodes with locations in the persistent storage through the use of the identifiers. The storage module may store the mapping which may be thought of as a table associating each node with an identifier and each identifier with a location in the persistent storage .

Those skilled in the art may equate a pointer or handle with an identifier but prior art pointers or handles may not uniquely map a node to a location in persistent storage. For example a pointer associated with a node Z may point to data Z stored at location Z in a persistent storage. The location Z may be identified by for example a disk number and an offset on the disk. If the node Z is deleted a new pointer associated with node Y may point to data Y newly saved to location Z overwriting data Z. Because operations within the tree data storage structure may be performed concurrently a read operation associated with the deleted node Z may be performed and the pointer pointing to location Z may result in the data data Y at location Z being read. Thus without the storage module data Y may erroneously be read. In an embodiment of the invention however use of the storage module may generate an exception under these circumstances indicating that the identifier does not map to a location in the persistent storage and enabling the tree data storage structure to restart a traversal higher up in the tree data storage structure .

An embodiment of the invention provides for generation of an exception without requiring substantial changes to the tree data storage structure . While more than one identifier may be allocated to a location in the persistent storage no two identifiers are so allocated at one time. That is an identifier may be allocated to a location in the persistent storage if no other identifier is allocated to that location. If a node is deleted then the identifier is deallocated from the location in the persistent storage . The storage module may then allocate the storage location with a new identifier associated with for example a newly insert node. Thus the storage module provides for deallocating an identifier from a location in the persistent storage . In this way instead of erroneous data being sent to the tree data storage structure the storage module may generate and send an exception indicating that no location in the persistent storage corresponds to the identifier allocated to a deleted node .

Thus in an embodiment of the invention locations in the persistent storage may be reused when nodes are deleted from the tree data storage structure while promoting concurrent operations. This avoids encountering a deleted node and satisfying an operation erroneously. Instead an exception may be generated and the algorithm underlying the tree data storage structure may be able to deal with such exceptions or may be revised to deal with such exceptions. Those skilled in the art will know how to perform such a revision.

The system may include a client computer A communicatively coupled that is in communication with a client computer B through a server computer . Alternatively the client computers may be in direct communication with each other. The server computer may be in communication with a persistent storage . The client computers and the server computer may form or be a part of a network and the network may include other client or server computers not shown . The server computer may include a storage module that includes nodes identifier allocation program code and a mapping . The nodes may include keys pointers and or data as described with regard to the nodes of . The storage module and its contents e.g. the identifier allocation program code and the mapping may be essentially the same as the storage module and its contents as described with regard to . Likewise the persistent storage may be essentially the same as the persistent storage described with regard to . The client computer A may include tree data storage structure program code . The client computer B also may include the tree data storage structure program code .

It will be understood that in alternative embodiments of the invention the storage module may reside on a client computer such as the client computer A or may reside elsewhere in a network. Additionally the persistent storage may reside on one or more computers such as the client computers the server computer or elsewhere in a network.

The mapping may show a node identifier such as node NO. Node NO may be mapped to a identifier pursuant to an allocation performed by a storage module as described above. The mapping shows identifier 00000001 as being allocated to node NO. Additionally the identifier 00000001 is allocated pursuant to methods described above to a persistent storage location identified as disk at offset on disk for an amount of space equal to X. Thus when a lookup operation for example is performed on node NO the tree data storage structure may request to read information associated with node NO from the storage module. The storage module may map the node N to the identifier 00000001 and then map the identifier to the persistent storage location of disk at offset having a size X. The storage module may then satisfy the read request by sending the information stored at that location. This process may be repeated for any nodes in the tree data storage structure. Alternatively the node N on the tree data storage structure may include the identifier similar to including a pointer on a node. In this case a read request may be satisfied by mapping the identifier to the location in persistent storage without the need for a mapping of the identifier to the node.

The mapping additionally shows an example mapping involving a persistent storage location previously allocated to a node that has been deleted. For example it may be supposed that node N is deleted from the tree data storage structure and shortly thereafter node Nx is added to the structure. In this case the identifier allocated to node N 00000001 that is also allocated to the persistent storage location disk at offset having a size X is deallocated from the persistent storage location. In an embodiment of the invention this identifier is not reused. The persistent storage location however may be reused. If after node N is deleted a new node Nx is inserted into the tree data storage structure then the storage module will allocate an identifier to the new node Nx . As shown in the example mapping the identifier allocated is 111010111. Additionally this identifier is allocated to the persistent storage location identified as disk offset having a size of X. That is the identifier allocated to Nx is allocated to the persistent storage location that was previously allocated for the node N. Thus while identifiers may not be reused the persistent storage locations may be reused maximizing the storage of the system.

The methods of the present invention may be implemented in hardware software or where appropriate a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in computer readable medium. A processor that executes program code for performing the steps of the methods of the invention as described in and as claimed constitute a computer system that embodies the present invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the specific examples in conjunction with the various figures it is to be understood that other embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. The examples are offered in explanation of the invention and are in no way intended to limit the scope of the invention as defined in the claims. In summary in no way is the present invention limited to the examples provided and described herein. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

