---

title: Method and apparatus for restoring a corrupted data volume
abstract: Disclosed is a method and apparatus for restoring a corrupted data volume. In one embodiment, the method includes creating a backup copy of the data volume before the data volume is corrupted. Data transactions that modify the contents of the data volume are stored in a transaction log. After detection of the data corruption, a virtual copy of the backup copy is created. Thereafter, select data transactions stored in the transaction log, are applied to the virtual copy. Data of the corrupted data volume is then overwritten with data of the backup copy and data of the virtual copy after applying data transactions to the virtual copy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07293146&OS=07293146&RS=07293146
owner: Symantec Corporation
number: 07293146
owner_city: Cupertino
owner_country: US
publication_date: 20050523
---
The present patent application is a continuation of U.S. patent application Ser. No. 10 254 753 filed on Sep. 25 2002 now U.S. Pat. No. 6 912 631 entitled METHOD AND APPARATUS FOR RESTORING A CORRUPTED DATA VOLUME and is incorporated by reference herein in its entirety and for all purposes.

Many businesses employ large scale data processing systems. illustrates relevant components of an exemplary large scale data processing system . More particularly shows large scale data processing system having a host computer system a transaction log memory a primary data storage system and a secondary data storage system . Primary and secondary data storage systems and include data memories and respectively.

Data memories and store data. More particularly data memories and store primary and backup data volumes respectively. The primary data volume is the working volume of large scale data processing system while the backup data volume is a point in time PIT copy of the primary data volume. In other words the backup data volume contains a copy of the primary data volume created at a point in time the use of which will be more fully described below.

Host computer system accesses data of the primary data volume in response to receiving and processing data transactions or instructions. More particularly host computer system reads data from writes data to or modifies data of the primary data volume in data memory in response to receiving and processing data transactions. Host computer system typically receives data transactions that are generated by software applications executing on computer systems not shown coupled to the host computer system . Host computer system may also receive data transactions from operators via an interface not shown . For purposes of explanation the operational aspects of large scale data processing system will be described with respect to host computer system receiving data transactions solely from software applications executing on computer systems. As will be more fully described below a copy of each transaction that writes to or modifies data of the primary data volume is stored in transaction log memory .

Host computer creates a backup volume in data memory to safeguard against data corruption of the primary data volume. Host computer system may also create the backup volume to safeguard against a physical failure of primary data storage system that prevents host computer system access thereto. Host computer system creates the backup data volume in data memory each time host computer system issues a backup command. Creating a backup of the primary data volume is a procedure well known in the art. In essence the procedure includes host computer system copying data from each block of data memory to a corresponding block of data memory until the entire data content of the primary volume is replicated in data memory . For each backup operation after the initial backup only those blocks of memory which have changed since the previous backup need to be to data memory pointers to unmodified data blocks of memory may be stored. In addition differences between a data block and its version in the previous backup may be computed so that only the changes to the data block of memory need to be written to memory and almost all data written to memory can be compressed using a lossless compression algorithm to decrease the time needed to successfully complete the backup operation. Host computer typically clears all data transactions stored in transaction log memory each time the primary data volume of data memory is successfully backed up into data memory . Accordingly transaction log memory typically contains only those data transactions received by host computer system after each successful backup of the primary data volume.

Occasionally host computer system unwittingly receives and executes an invalid or erroneous data transaction. Execution of an invalid or erroneous data transaction results in corruption of data in the primary data volume. When the data corruption is discovered host computer system can use the backup data volume in data memory to restore the primary data volume to the state it occupied just before data was corrupted. Host computer system will not process data transactions until the primary data volume in data memory is restored. This disrupts operations of businesses using large scale data processing system . Accordingly it is imperative to restore the primary data volume as soon as possible.

In the restore procedure host computer system creates a copy of the backup data volume in a third memory not shown of a third data storage system not shown . More particularly host computer system copies the contents of each block of data memory to a corresponding block in the third memory until the entire contents of the backup volume is replicated in the third memory. The time needed to create the copy of the backup volume in the third memory may be considerable depending on the size of the backup volume.

Once created host computer system modifies the contents of the backup volume copy by re executing all transactions held in transaction log memory up to but not including the invalid transaction that caused the data corruption in the primary data volume. After host computer system finishes modifying the copy of the backup the copy should be identical to the primary volume at the point in time just before host computer system executed the invalid transaction. Host computer system completes the restore process by overwriting each block of data memory with the contents of its corresponding block in the third memory. Overwriting blocks of data memory during the restore process may require a substantial amount of time depending on the size of the modified backup volume copy. Once the primary volume is fully restored host computer system can resume reading writing or modifying data to the primary data volume in accordance with data transactions received after the invalid transaction.

Businesses using large scale data processing systems such as system seek to restore a corrupted primary data volume as soon as possible in order to resume data transaction processing. Unfortunately substantial time may be needed during the restore process to copy the entire contents of the backup copy and to overwrite the corrupted primary volume with the contents of the modified backup volume copy.

Disclosed is a method and apparatus for restoring a corrupted data volume. In one embodiment the method includes creating a backup copy of the data volume before the data volume is corrupted. Data transactions that modify the contents of the data volume are stored in a transaction log. After detection of the data corruption a virtual copy of the backup copy is created. Thereafter select data transactions stored in the transaction log are applied to the virtual copy. Data of the corrupted data volume is then overwritten with data of the backup copy and data of the virtual copy after applying data transactions to the virtual copy.

The present invention relates to an apparatus and method for restoring a data volume after data thereof is corrupted due to for example an incorrect operation performed by software or an operator. More particularly the present invention relates to an apparatus and method for restoring a corrupted data volume to the state it occupied just prior to an event that corrupted the primary data volume. The present invention will be described with reference to restoring a data volume that was corrupted after execution of an invalid data transaction it being understood that the present invention should not be limited thereto.

Data memories and store primary and backup data volumes respectively. The primary data volume is a collection of files that store data while the backup data volume is a point in time PIT copy of the primary data volume. While it is said that files store data in reality data is stored in blocks of data memory allocated to the files. Data memory as will be more fully described can store a virtual point of failure POF data volume that can be used to restore the primary data volume in data memory after corruption of data therein. It is noted that the virtual POF data volume can be created as a separate volume in memory or . However for purposes of explanation virtual POF will be described below as being created in memory it being understood that the present invention should not be limited thereto.

Data memories may take form in one or more dynamic or static random access memories one or more magnetic or optical data storage disks or one or more magnetic or optical data storage tapes. Data memories should not be limited to the foregoing hardware components. Rather data memories may take form in any hardware software or combination of hardware and software in which data may be persistently stored and accessed. Data memories may take form in a complex construction of several hardware components operating under the direction of software. The data memories may take form in mirrored hardware. It is further noted that the present invention may find use with many types of redundancy reliability systems. For example the present invention may be used with Redundant Array of Independent Disks RAID systems. Moreover the present invention should not be limited to use in a disc array or in the host node of a data storage network. The present invention may find use in a storage switch or in any of many distinct appliances that can be used with a data storage system.

Corresponding memory blocks in data memories are equal in size. Thus memory block of data memory is equal in size to memory block of data memories and . Each of the memory blocks within memory may be equal in size to each other. Alternatively the memory blocks in data memory may vary in size.

As noted above each memory block through nof data memory contains data of the primary data volume. Host computer system reads data from writes data to or modifies data of the primary volume in data memory in response to receiving and executing data transactions or instructions. For purposes of explanation host computer system externally receives data transactions it being understood that the present invention should not be limited thereto. Also for purposes of explanation the data transactions received by host computer system are generated by software applications executing on one or more computer systems not shown coupled to host computer system it being understood that the present invention should not be limited thereto.

The primary data volume is the working volume of data processing system . Data memory can store a point in time PIT backup copy of the primary data volume stored in data memory . In one embodiment host computer system creates a virtual PIT backup copy in data memory according to the methods described in copending U.S. patent application Ser. No. 10 143 059 entitled Method and Apparatus for Creating a Virtual Data Copy incorporated herein by reference each time host computer system receives or internally generates a backup command. The virtual PIT backup copy in data memory can eventually be transformed to an actual PIT copy of the primary data volume using a background copying process. However the present invention allows immediate access to the primary data volume in data memory and the virtual PIT backup copy in data memory before the virtual PIT backup is transformed to an actual backup. This concept will be more fully described below and in copending U.S. patent application Ser. No. 10 143 059.

Initially i.e. before any backup copy is created in data memory data memory contains no data. When host computer system first creates a virtual PIT backup copy in data memory host computer system in one embodiment creates a pair of valid modified VM tables such as tables VM and illustrated in . VM tables and correspond to the primary data volume and the virtual PIT backup copy thereof respectively. Hence VM tables and may be referred to as primary volume and PIT backup VM tables and respectively. VM tables and may be stored in memory of host computer system or elsewhere. VM tables and include nentries of two bits each in one embodiment. Each entry of primary volume VM table corresponds to a respective block of data memory while each entry of PIT backup VM table corresponds to a respective block of memory . In an alternative embodiment each entry of primary volume VM table may correspond to a respective group of blocks of data memory while each entry of PIT backup VM table corresponds to a respective group of blocks of data of memory .

The first and second bits in each entry are designated Vand M respectively. Vin each entry depending on its state indicates whether the corresponding block n of the associated memory contains valid data. For example when set to logical 1 Vof primary volume VM table indicates that block of data memory contains valid data and when set to logical 0 Vof primary volume VM table indicates that block of data memory contains no valid data. Min each entry depending upon its state indicates whether data within the corresponding block n of the associated memory has been modified. For example when set to logical 1 Mof primary volume VM table indicates that block of data memory contains data modified since creation of primary volume VM table . When set to logical 0 Mor primary volume VM table indicates that block of data memory contains data which has not been modified since creation of primary volume VM table .

When VM tables and are first created each entry of PIT backup VM table is set to logical 0 thus indicating that data memory contains no valid or modified data. For purposes of explanation it is presumed that each block of data memory contains valid data. Accordingly Vof each entry in primary volume VM table is initially set to logical 1. Lastly Mof each entry in primary volume VM table is initially set to logical 0 thus indicating that at the time the backup command issues no data in data memory has been modified.

After VM tables and are initiated host computer system may run a background process to copy data contents of data memory to data memory in a block by block manner. Eventually this background process will completely copy the contents of data memory into data memory thus transforming the virtual PIT backup copy in data memory into an actual PIT backup copy. However before the background copying process is started or before the background copying process is completed host computer system in accordance with data transactions received thereby can read write or modify data of the primary volume in data memory . illustrates relevant aspects of host computer system modifying data in the primary data volume immediately after creation of the virtual PIT back up. It is noted that in one embodiment the present invention can be implemented without the background copying process. In this embodiment memory contains blocks of data copied from memory before modification thereof.

Initially host computer system receives a data transaction that modifies data of the primary data volume. For purposes of explanation the phrase modifying data in the primary volume includes writing new data to the primary volume. A copy of the received transaction is stored in transaction log . Moreover transaction log stores transactions in the order in which they were received.

With continued reference to host computer in step accesses meta data to identify the block n of data memory allocated to store the data to be modified by the received data transaction. It is noted that more than one block in data memory may be allocated to store the data to be modified. For purposes of explanation it is presumed that the newly received data transaction is directed to modifying data contained a single block n of data memory .

Once memory block n is identified host computer system accesses PIT backup VM table to determine whether the data contents of block n of data memory were previously copied to block n of data memory . In one embodiment of this step host computer system determines whether Vof the PIT backup VM table is set to logical 1. Block n of data memory will contain valid data i.e. Vis set to logical 1 if the contents of block n in data memory were previously copied to block n of data memory by the background copying process mentioned above or in response to host computer system executing a previously received transaction to modify data of block n of data memory . If Vof PIT VM table is set to logical 0 then the process continues to step where as shown host computer system copies the contents of block n of data memory to block n of data memory . Thereafter in step host computer system sets Vof PIT VM table to logical 1. It is noted that the order of steps and can be reversed in order in an alternative embodiment. In this alternative embodiment however if a crash occurs after the step of setting Vof PIT VM table to logical 1 but before data of block n in memory is copied to block n of memory then PIT VM table may indicate that block n of memory contains valid data when in fact block n of memory contains no data at all. Host computer system may be configured to check for and correct for such inconsistencies between PIT VM table and memory when host computer system recovers from the crash.

After step the process continues to step where host computer system sets Min primary VM table 52 to 1. Thereafter in step host computer system executes the received data transaction and modifies data in block n of data memory . It is noted that the order of steps and may be reversed.

Host computer system may unwittingly corrupt data in the primary data volume in response to receiving and executing an invalid transaction. When a data corruption is discovered host computer system initiates a restore process in accordance with one embodiment of the present invention. This process involves creating a virtual point of failure POF copy of the primary volume in data memory of data storage system . The POF copy is a copy of the primary data volume in data memory just before data corruption thereof. Host computer system using the virtual POF copy created in data memory eventually restores the primary volume to the state it occupied just before such host computer system executed the invalid instruction.

Host computer system creates the virtual POF copy of the primary data volume by first creating a virtual copy of the backup in data memory and subsequently modifying data of the virtual copy of the backup as a result of re executing data transactions stored within transaction log memory up to but not including the invalid instruction which caused the primary data volume corruption. is a flow chart illustrating operational aspects of creating the virtual POF copy according to one embodiment of the present invention. Initially host computer system creates POF VM table as shown in step of . POF VM table includes nentries like VM tables and . Each entry of POF VM table corresponds to a respective block in data memory and includes Vand Mbits. Each Vbit of POF VM table is initially set to logical 0 indicating that data memory initially contains no valid data. Each Mbit of POF VM table is initially set to logical zero indicating that data memory initially contains no modified data.

With continued reference to in step host computer system sets a dummy variable y to ywhere yis the total number of data transactions stored within transaction log memory . Again it is noted that transaction log stores only those transactions that were received after the last back up copy was created in data memory . In steps and host computer system sets a second dummy variable x to 0 and increments dummy variable x by 1.

Host computer system reads the xtransaction from transaction log memory and identifies block n of data memory allocated to store data modified by transaction x. Once block n is identified host computer system copies all data of block n from data memory to block n of data memory as shown in step . In step host computer system sets Vand Min POF VM table to logical 1. It is noted that Vin POF VM table need not be set in step however for purposes of explanation Vwill be set in step .

In step host computer system modifies data in block n of data memory in response to re executing transaction x. Host computer system then compares dummy variables x and y in step . If all transactions stored in memory log have been re executed by host computer system up to and including transaction y the process continues to step where it is determined whether the contents of the virtual POF copy in data memory are valid. The POF copy contained in data memory at step will be valid if data in data memory is modified in response to host computer system re executing all data transactions stored in transaction log memory up to but not including the invalid instruction that caused the corruption of the primary volume in data memory . If the contents of the virtual copy in data memory are not valid then dummy variable y is decremented by 1 in step and the process returns to step where dummy variable x is reset to 0. Steps are repeated. Eventually a valid virtual POF copy is created in data memory and the process of ends. It is noted that host computer system need not copy the data contents of each and every block of data memory into a corresponding block of data memory in order to create the valid virtual POF copy according to the process illustrated in .

Once the valid virtual POF copy is created in data memory host computer system can restore the primary volume in data memory to its state just before corruption of data therein. illustrates operational aspects of one embodiment for restoring the primary data volume in data memory . In this embodiment host computer system first adds a third column designated Rto primary volume VM table as shown in step . Rneed not be added to primary VM table . Rcould be a table separate from VM table or Rcould be added to VM table . However for purposes of explanation Ris added as a column to primary VM table .

Rindicates whether block n of data memory has been restored. Initially all Rbits are set to logical 0 in step thus indicating that none of the blocks of data memory have been restored. illustrates VM tables and just after creation of the valid virtual POF copy in data memory and with column Radded to primary volume VM table .

With continued reference to in steps and host computer system sets n to 0 and increments n by 1. Host computer system then compares the current state of n to nto determine whether the restore process has completed. If n n the process ends and host computer system may delete column Rfrom primary VM table . Otherwise the process continues to step where host computer system checks primary VM table and determines the state of R. If Ris equal to 1 then block n of data memory has been previously restored and the process returns to step where n is incremented by 1. If host computer system determines that block n has not yet been restored i.e. R 0 then the process continues to step where host computer system checks the state of Mof primary volume VM table . If Mis set to logical 0 then the contents of block n of data memory have not been modified since the PIT backup was last created and the process returns to step where n is incremented by 1 after Ris set to logical 1 in step . If Mis equal to logical 1 then data in block n of data memory has been modified since the last backup copy was created in data memory . To return the primary data volume contained within data memory to its state just prior to data corruption each block within data memory that was modified since the creation of the last backup copy in data memory should be overwritten with data of a corresponding block within data memory or data memory . In one embodiment whether data in block n of data memory should be overwritten with data of block n of data memory or depends on the state of Mof POF VM table . In step host computer system checks the state of Mof the POF VM table . If Mis set to logical 1 block n in data memory is then overwritten with data of block n of data memory as shown in step . If Mof POF VM table is set to logical 0 then in step host computer system overwrites block n data of data memory with data from block n of data memory . If block n of data memory is overwritten with data from block n of data memory host computer system clears Mof the primary VM table to logical 0 in step . The process then returns to step after Ris set to logical 1 in step .

Using the process illustrated in the primary data volume stored within data memory is restored to its state just prior to data corruption thereof. However in contrast to the process described in the background section above host computer system need not delay modifying the primary data volume in data memory according to newly received transactions or transactions received after the invalid transaction that corrupted data until the process illustrated in completes. Host computer system can resume executing data transactions as soon as the valid virtual POF copy is created in data memory . In other words host computer system can resume modifying the primary data volume in data memory according to execution of newly received transactions or transactions received after the invalid transaction that corrupted data even though data memory may still contain corrupted data.

In step host computer system then checks the state of Rof primary volume VM table . If Ris set to logical 1 then the data contents of block n within data memory were previously restored and the process continues to step where host computer system checks the state of Vof the PIT VM table . If Vof the PIT backup VM table is set to logical 0 then the data contents of block n within data memory must first be copied to block n of data memory before any modifications can be made to data in block n of data memory . Accordingly in steps and host computer system copies the contents of block n of data memory to block n of data memory and sets Vof the PIT backup VM table to logical 1. Steps and can be reversed in the alternative. Once the contents of block n of data memory is copied into block n of data memory then host computer system sets Mof the primary VM table to logical 1 and modifies data in block n of data memory in response to executing the received data transaction as shown in steps and . In the alternative Mof the primary VM table may be set to logical 1 after data is modified in block n of data memory . In step host computer system system sets Rto logical 1 if not already set to logical 1 thereby indicating that in the future the contents of block n within data memory need not be restored.

If Rand Vare set to logical 1 when host computer system checks the primary VM table in steps and there is no need to either restore block n of data memory or copy the contents of block n of data memory into block n of data memory before modifying data of block n of data memory . As such the process continues directly to steps .

If in step Ris set to logical 0 then block n of data memory has yet to be restored. It could be the case that block n of data memory need not be restored before data in block n of data memory is modified. To determine whether block n of data memory should first be restored host computer system checks the status of Mof primary VM table in step . If Mof primary VM table is set to logical 0 then block n of data memory need not be restored before modification of data therein and the process continues to step . If however Mof the primary volume VM table is set to logical 1 in step then block n must be restored. Host computer system restores block n by overwriting data of block n of data memory with the contents of block n of data memory in step or the contents of block n of data memory in step depending upon the state of Min POF VM table . More particularly if Min POF VM table is set to logical 1 in step then host computer system overwrites data of block n of data memory with the contents of block n of data memory . Otherwise host computer system overwrites data of block n of data memory with the contents of block n of data memory . In step after restoration of block n in data memory host computer system executes the transaction received in step and modifies data of block n within data memory .

Host computer system checks the state of Rin primary VM table in step . If Ris set to logical 1 then block n of the data memory has been restored and data can be read therefrom in response to executing the received read data transaction as shown in step . If in step Ris set to logical 0 then block n of data memory has not been restored at the time the transaction is received by host computer system . However even though block n of data memory has not been restored sometimes block n of data memory need not be restored before data thereof is read. To determine whether block n of data memory should first be restored host computer system checks the status of Mof primary VM table in step . If the state of Mis equal to logical 0 then data within block n of data memory was not modified since the last backup was created in data memory . As such host computer system should read data from block n of data memory as shown in step . If Mof POF VM table is set to logical 1 in step then host computer system reads data from block n of data memory or depending on the state of Mof POF VM table .

It is noted that restoring the primary data volume in memory may not result in an exact copy of the primary data volume just before data corruption thereof. More particularly the data in memory after restore will be identical to the data in memory before corruption but data after restore the data may not be stored in the same physical locations in memory . In other words the allocation of blocks in memory to files of the primary volume after restore may be different when compared to the allocation of memory blocks prior to restoration. Any difference in memory block allocation however is transparent to applications that generate the read or write data transactions. Thus the restore process described above should result in an exact copy of the logical contents of the primary data volume just before data corruption.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

