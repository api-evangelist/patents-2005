---

title: User interface for a file system shell
abstract: A file system shell is provided. One aspect of the shell provides virtual folders which expose regular files and folders to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Users are able to work with the virtual folders through direct manipulation (e.g., clicking and dragging, copying, pasting, etc.). Filters are provided for narrowing down sets of items. Quick links are provided which can be clicked on to generate useful views of the sets of items. Libraries are provided which consist of large groups of usable types of items that can be associated together, along with functions and tools related to the items. A virtual address bar is provided which comprises a plurality of segments, each segment corresponding to a filter for selecting content. A shell browser is provided with which users can readily identify an item based on the metadata associated with that item. An object previewer in a shell browser is provided which is configured to display a plurality of items representing multiple item types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07769794&OS=07769794&RS=07769794
owner: Microsoft Corporation
number: 07769794
owner_city: Redmond
owner_country: US
publication_date: 20050422
---
This application is a continuation in part of U.S. application Ser. No. 10 440 431 filed May 16 2003 now U.S. Pat. No. 7 409 644 of the same title.

This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 566 502 entitled Metadata Editing Control and filed Apr. 29 2004 and is a continuation in part of U.S. patent application Ser. No. 10 950 075 entitled Metadata Editing Control and filed Sep. 24 2004 now U.S. Pat. No. 7 421 438 the specifications for which are hereby incorporated by reference.

This application is a continuation in part of and claims priority from co pending application Ser. No. 10 684 263 filed Oct. 12 2003 and having the title Extensible Creation and Editing of Integrated Collections. 

This application is a continuation in part of copending U.S. patent application Ser. No. 10 395 533 filed Mar. 24 2003 entitled System and Method for User Modification of MetaData in a Shell Browser and U.S. patent application Ser. No. 10 395 560 filed Mar. 24 2003 now U.S. Pat. No. 7 234 114 entitled Extensible Object Previewer in a Shell Browser the specifications for which are hereby incorporated by reference.

This application is a continuation in part of U.S. patent application Ser. No. 10 440 035 filed May 16 2003 now U.S. Pat. No. 7 162 466 which is a continuation in part of U.S. patent application Ser. No. 10 403 341 filed Mar. 27 2003 now U.S. Pat. No. 7 627 552.

This application is a continuation in part of prior U.S. application Ser. No. 10 420 040 filed Apr. 17 2003 now U.S. Pat. No. 7 240 292 the entire contents of which are incorporated herein.

Present computer file systems have a number of undesirable limitations. One limitation is that users are generally unable to control the structure that they are shown. In other words when folders are organized a user must choose a structure and that structure is then difficult to change. As a specific example for a music folder a user may choose to organize the music files in an artist album format wherein all of the album folders for each artist are grouped into that particular artist s folder and all of the songs on a particular album are grouped into that album s folder. The artist album format is not conducive to playing a type of music e.g. playing two jazz songs from two different artists or for playing a selection of albums from different artists.

As another issue a user may have a large number of files which are difficult to organize. Some users implement a rigid sense of placement for the files and thus create strict hierarchies for them. The management of such files become increasingly complex and difficult as the number of available documents grows making search and retrieval also difficult. This problem is further exacerbated when additional files are utilized from other locations such as shared files etc.

Users also have to deal with files being in different locations such as on different devices on other PCs or online. For example users can select to listen to their music on the computer as may be accessible to a music program or can go online and listen to music from Web sites however there is a strict division between these two sources. Music coming from different locations is organized differently and not kept in the same fashion or place. As another example files stored on a corporate network may inherently be separated from files a user has on a current machine.

Users also have to keep track not only of what file data is stored but where it is stored. For example for music files users are forced to keep copies on various systems and to try to track which music files are located where. This can make files difficult to locate even when they are locally stored.

It is also sometimes difficult to find and return to files that a user has. A user may find it difficult to recall where and how they stored certain files. Given a set of folders and even a group of similar files users often find it difficult to quickly find the one that they are looking for. For files stored in a difficult place to find it is that much more complex to locate. In addition once users have enough files in a folder it becomes more difficult to parse the folder quickly especially if the contents are similar.

It is also sometimes difficult for users to find or return to files on a network. Sharing and publishing files is often hard to do and it may often be even more difficult to retrieve such a file from someone who makes it available. Users typically have to memorize or map the various sites and names that they need for finding files on a network.

Name spaces may vary which can cause confusion to the user as to what is correct. This is particularly true on a network where there are different naming conventions limitations and so on. For example certain operating systems may require short names with no spaces in order for them to be visible.

Programs also often save files to their own directory or other name spaces which can make it difficult for users to find their way back to the files. Programs often have default directories and places they save documents. A user often has to search through their hard disk and make guesses about where a file is stored.

Related items are also often stored in separate places. Related files that a user has may be stored on different parts of the hard disk etc. This problem becomes more common with the developments of digital media services that have multiple content types e.g. pictures music video .

Another issue with file systems is related to the address bar. As users navigate within a file system on a computer a conventional graphical interface control referred to as an address bar shows the users where they are in the file system hierarchy. The conventional address bar shows the current location in terms of the file system s hierarchical structure of folders subfolders and files. Altering the user s location displayed in the conventional address bar is typically performed in one of two manners. The first is to manually edit the address in the address bar. Manually editing the address in the address bar permits a user to relocate to any number of locations in the file system hierarchy but requires the user to have specific information regarding the organization of the file system on the computer i.e. a specific file system location. The second method involves using external navigation tools which when manipulated update the address bar to reflect the new address or location. While bypassing the manual edit of the address in the address bar manipulating external navigation tools still requires the user to have specific information concerning the organization of the file system and traverse the hierarchical structure. However conventional address bars cannot reference files or data stored among multiple file system locations such as folders or drives due to a one to one relationship between the address in the address bar and a specific location in the file system hierarchy.

The prior art lacks an address bar that allows users to specify addresses that display files stored among multiple file system locations or having any of various properties. The prior art further lacks an address bar that also permits users to easily modify the address of the address bar without manually editing the address or requiring specific knowledge concerning the organization of the underlying file system. Also lacking in the prior art is an address bar that presents alternative selections of files to the user from which the user may select to navigate to those selections of files. Such an address bar could also selectively present a conventional address bar interface to the user enabling the user to interact with the address bar according to previous experience according to user preferences.

Another issue with file systems is related to the identification of items stored on a computer. The need to readily identify items stored in a computing environment such as a personal computer PC is dramatically increasing as more individuals utilize computers in their daily routines and as the type of stored information varies between pictures music documents etc. Documents and media are typically stored on computers in a hierarchical fashion and are organized with files of information or media stored within folders. File system browsers enable users to navigate through the file system and locate and open files and folders. For example Microsoft Corporation s WINDOWS EXPLORER is an operating system utility which enables users to browse the file system.

Many users find it difficult to correctly identify a file based on the information currently available in conventional file system browsers. Of course the contents of a file can be verified by opening it with an application program but this method of browsing files is extremely inefficient. The ability to view metadata about a file within a file system browser can greatly assist a user in identifying a particular file without having to open it. In Microsoft Corporation s WINDOWS 9X operating systems for example a user can view object metadata by accessing the property sheet for a particular object. A property sheet presents the user with a list of the attributes or settings of an object in the form of a tabbed index card like selection of property pages each of which features standard dialog style controls for customizing parameters. However using the property sheet to locate an item can be slow and cumbersome and some users find it difficult to locate the relevant metadata in a property sheet. Similarly the use of infotips to locate an item can be slow and cumbersome because a user must hover the mouse over each file in order to view the limited metadata displayed in an infotip.

Conventional file system browsers do not allow users to enter and edit metadata relating to files and folders which would significantly enhance a user s ability to later locate a file. To date the ability of users to enter and edit metadata has been limited to special purpose software programs. For example media players for electronic music files present users with the ability to edit metadata associated with music albums and artists. Another example of such programs includes application programs for electronic picture files. However the utility of media players and other such programs is limited to the particular type of file supported by the program as opposed to a general purpose file system browser which supports multiple file types.

Microsoft Corporation s WINDOWS XP operating system includes an image browser for use in the My Pictures folder. The My Pictures folder is endowed with special features which enable users to view pictures as photos not just as document icons. My Picture s image browsing features include the ability to view thumbnail size and large versions of photos rotate photos that are sideways and create a slide show. A user can also view a photo s details such as its dimensions the date and time it was taken and the name of the camera that took it. The preview control area in the My Picture s folder contains an enlarged preview image of a user selected image iterator buttons to assist a user in iterating through a series of pictures and controls for rotating pictures in a clockwise or counterclockwise direction. While the image browsing features in WINDOWS XP have advanced the state of the art by alleviating the need to invoke an application program to view and manipulate pictures users still cannot enter and edit metadata associated with the pictures.

Accordingly there is a need for an improved user experience within a shell or file system browser which enables users to readily locate an item based on the metadata associated with that item. There is also a need for a system and method which allow users to enter and edit metadata associated with items of various types within a shell browser without the need to invoke an application program. There is also a need for a file system or shell browser which offers users improved file content recognition features so that users can readily locate their files. A need also exists for an improved graphical user interface for a shell browser which allows for the selection of a previewer for a particular file type from a plurality of available previewers. There is also a need for an extensible shell browser which would allow software developers to provide additional information and functionality to users on a file type basis. There is also a need to provide a similar UI experience across different collections of items.

In accordance with one aspect of the invention a system and method utilizing virtual folders is provided. The virtual folders expose regular files and folders also known as directories to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Thus the system is able to take a property that is stored in the database and represent it as a container that is like a folder. Since users are already familiar with working with folders by presenting the virtual folders in a similar manner users can adapt to the new system more quickly.

In accordance with another aspect of the invention the virtual folders are provided according to a method that is utilized in a computer system having a display and a memory for storing the items. In accordance with the method a metadata property is selected. The system then searches for items that have the selected metadata property and a virtual folder display object is provided that represents the collection of items that have the metadata property.

In accordance with another aspect of the invention the system includes a folder processor that obtains queries from a user and a relational database for storing information about the items. The folder processor first obtains a query from a user and passes the query to the relational database. The relational database provides results back to the folder processor and based on the results from the relational database the folder processor provides the results to the user as virtual folders. In one embodiment the results that are provided back to the folder processor include database rows and columns. The database rows and columns are converted by the folder processor into an enumerator structure which is then used to populate the display with the resulting virtual folders.

In accordance with another aspect of the invention users are able to work with the virtual folders through direct manipulation. In other words the mechanisms that are provided for manipulating the virtual folders are similar to those that are currently used for manipulating conventional physical folders e.g. clicking and dragging copying pasting etc. .

In accordance with another aspect of the invention the method for performing the direct manipulation of the virtual folders is provided in a computer system having a display and a memory for storing the items. In accordance with the method groups of items are represented as virtual folders. Defined actions are provided that can be performed for direct manipulation of the virtual folders wherein when a defined action is performed the virtual folder is manipulated as directed by the defined action. An example of a defined action would be clicking and dragging a virtual folder. In one embodiment the action of clicking and dragging a first virtual folder to a second virtual folder performs the function of copying the items from the first virtual folder to the second virtual folder. The copying of items to a virtual folder may involve adding or otherwise altering selected metadata properties that are associated with the items.

In accordance with another aspect of the invention filters are provided for manipulating the virtual folders. The filters are essentially tools for narrowing down a set of items. In one embodiment the filters are dynamically generated based on the properties of the separate items. For example for a set of items the filter mechanism may review the properties and if the items generally have authors as a property the filter can provide a list of the authors. Then by clicking on a particular author the items that don t have the author disappear. This allows the user to narrow the contents.

In accordance with another aspect of the invention a method for filtering items is provided in a computer system having a display and a memory for storing items with metadata properties. Display objects are provided on the display that each represent one or more items. The metadata properties of the items that are represented by the display objects are evaluated. A filter term is provided on the display that corresponds to a metadata property that is shared by a plurality of the items wherein the selection of the filter term causes the items that are represented on the display to be reduced to those items that share the specified metadata property.

In accordance with another aspect of the invention a plurality of items is represented on the display and a filter term is dynamically generated based on the metadata properties of the items. When the filter term is selected it reduces the items that are represented on the display to those that have the metadata property that corresponds to the filter term.

In accordance with another aspect of the invention a plurality of items is represented on the display and a filter area is provided in which a user can select a filter term by selecting a checkbox control. When a checkbox control is selected by the user the items that are represented on the display are reduced to those that contain the filter term. As the user types the filter term additional items may be filtered as each new character is added to the filter term.

In accordance with another aspect a graphical user interface is provided including a plurality of display objects each display object representing one or more items and a property control corresponding to a property that is shared by a plurality of the items. Selection of the property control causes a list of filter terms to be presented on the display. In one aspect the filter terms may be presented in a drop down menu in which each filter has a corresponding checkbox control.

In another aspect of the invention selection of a first check box control may cause the items that are represented on the display to only include items that satisfy the filter term corresponding to the first check box control. Selection of a second check box control when the first check box control is currently selected causes the items that are represented on the display to include items that satisfy either the first respective filter term corresponding to the first check box control or a second respective filter term corresponding to the second check box control. In other words the filter terms cause a logical OR operation to be performed on the items in the view.

In still another aspect the second check box control may be deselected causing the items represented on the display to include only items that satisfy at least one respective filter term corresponding to a currently selected check box control.

In another aspect selection of a property control may cause a list of arrangement commands to be presented on the display separated from the list of filter terms. The selection of an arrangement command may cause the items to be rearranged on the display. Illustrative arrangement commands including sorting stacking or group by the property associated with the selected property control.

In yet another aspect the property control may be a split button. According to this aspect selection of a first button portion may cause the list of filter terms to be presented on the display and selection of the second button portion may cause the display objects to be sorted by the property.

In accordance with another aspect of the invention a scope is utilized in a method for displaying items in a computer system having a display. The method involves defining a scope of the physical memory locations from which items are to be drawn the scope comprising the present computer memory and at least one other physical location. Once a query is received in response to the query items are drawn from the physical locations as defined in the scope and the items that are drawn from the query are then presented in a view on the display. In one embodiment the at least one other physical location may be another computer a location on a network or an external storage device. In one embodiment the view on the display can be switched to a physical folder view which indicates the physical locations where the items are physically stored.

In accordance with another aspect of the invention non file items may be represented in the virtual folders. In other words files that are stored in memory are located in a physical store. The virtual folders can be made to include items that are not currently represented in the physical store. Examples of non file items are e mails and contacts.

In accordance with another aspect of the invention a method for presenting non file items is implemented in a computer system with a display and a memory for storing items. The method includes providing a database that allows both non file items and file items to be searched by a query. Once a query is received both non file items and file items that match the query are drawn and the items that match the query are then presented on the display. In one embodiment a relational database is provided that includes selected information about file items and which may hold certain non file items in their entireties.

According to another aspect of the invention an address bar is provided for selecting content stored in a physical or virtual location. The address bar may comprise a plurality of segments. Each segment may correspond to a filter or selection criteria for selecting stored content. A segment may include more than one filter or selection criteria where the content corresponding to each of the filters or selection criteria in a segment may be represented. In this instance a logical or operation referred to as OR filtering occurs where content corresponding to separate selection criteria from two or more different locations whether virtual or physical can be accessed. Collectively the corresponding filters of the segments in the address bar represent an address for selecting content stored on a computer file system.

Each segment is an interactive segment that can respond to user interactions to modify the address of the address bar. Selecting a segment in the address bar causes those segments subsequent to the selected segment to be removed from the address bar.

According to one aspect selecting a child control associated with a segment in the address bar causes a list of selectable child filters or selection criteria to be displayed to the user. The child filters or selection criteria are children of the filter s or selection criteria included with the segment. Selecting one of the child filters or selection criteria from the list of child filters or selection criteria causes the current child filter or selection criteria of the segment displayed in the address bar if different from the selected child filter or selection criteria to be replaced with the selected child filter or selection criteria. Additionally those segments subsequent to the segment of the replaced child filter or selection criteria are removed from the address bar.

In accordance with another aspect of the invention a shell browser is provided which includes a window and an edit control. The window displays a group of items and also displays metadata values associated with one or more of the displayed items. The edit control permits user modification of at least a portion of the metadata values displayed in the window.

In accordance with another aspect of the invention a graphical user interface is embodied on a computer readable medium and is executable on a computer. The graphical user interface includes a first screen area which displays a set of items in a shell browser and a second screen area which displays metadata associated with one or more of the displayed items. The graphical user interface also presents the user with means within the shell browser for modifying the displayed metadata.

In accordance with a further aspect of the invention computer implemented methods are provided for enabling a user to modify metadata within a shell browser. One such method includes displaying a plurality of items receiving a first input from the user representing a selection of at least one displayed item displaying metadata associated with the selected item s and providing an edit control for user modification of the displayed metadata. Another such method includes displaying a welcome pane and metadata associated with the welcome pane and providing an edit control for user modification of the displayed metadata.

In accordance with another aspect of the invention a data structure containing metadata associated with one or more items is displayed in a shell browser. The data structure which is stored on one or more computer readable media includes a field containing user modifiable metadata associated with the one or more displayed items and the user modifiable metadata contained in the data structure is also displayed in the shell browser.

In accordance with another aspect of the invention a shell browser is provided which includes a default previewer and an extensibility mechanism. The default previewer provides a standard level of functionality for multiple item types. The extensibility mechanism enables functionality beyond the standard level provided by the default previewer for one or more of the item types.

In accordance with another aspect of the invention a shell browser is provided which includes a first previewer and a second previewer. The first previewer provides a standard level of functionality for multiple item types and the second previewer provides an alternative or extended level of functionality for one or more of the multiple item types. The shell browser is configured to selectively deploy either the first previewer or the second previewer for the one or more item types.

In accordance with another aspect of the present invention a graphical user interface for a shell browser which supports multiple item types is provided. The graphical user interface includes a first screen area for displaying a set of items in the shell browser and means for selecting a previewer for the displayed items from a plurality of available previewers.

In accordance with another aspect of the invention a computer implemented method is provided for selecting a previewer in a shell browser which supports multiple item types. The method includes providing a plurality of previewers in the shell browser for a particular item type and selecting one of the previewers for the particular item type. The method then associates the selected previewer with the particular item type.

In accordance with another aspect of the invention a computer implemented method is provided for enabling the use of third party previewers in a shell browser which supports multiple item types. The method includes providing a shell browser having a default previewer for the multiple item types and providing an extensibility mechanism which enables a third party to develop an alternative previewer for at least one of the multiple item types.

In accordance with another aspect of the invention a data structure is provided which contains information indicative of a plurality of previewers in a shell browser. The data structure which is stored on one or more computer readable media includes a first field containing information indicative of a default previewer which supports multiple item types. A second field contains information indicative of an alternative previewer for a first item type and a third field contains information indicative of whether to invoke the default previewer or the alternative previewer when items of the first item type are displayed in the shell browser.

In accordance with another aspect of the invention different types of items are grouped into libraries for which a similar set of basic UI features are provided. In other words a similar set of basic UI features is provided for different types of libraries such as a document library a photo library and a music library. This set of basic UI features may include features such as filtering creating new categories editing the metadata of the items altering the pivots etc. The similar set of basic UI features for the libraries allows a user to process and organize different types of items using attributes and features they are already familiar with.

Another aspect of the invention provides a method of specifying a scope of items on a computer system or network via a graphical user interface dual component control by displaying a first component including a tree like display of a plurality of hierarchically arranged items where each item can be explicitly selected by a user for inclusion and or exclusion from the scope. The GUI also displays a second component including a basket or list identifying the items explicitly included in and or explicitly excluded from the scope. When the user explicitly selects a specific item the control changes a state of the specific item from a previous state to a new state and changes a state of each descendant of the specific item to a new implicit state based on the new state of the specific item.

In an illustrative embodiment a state of each item of the plurality of hierarchically arranged items may indicate any of an unselected state an explicitly included state an implicitly included state an explicitly excluded state and an implicitly excluded state. The list of items may identify an explicitly included item corresponding to each explicitly excluded item.

According to an aspect of the invention one or more computer readable media store computer executable instructions which when executed cause a computer system to provide on a video display a graphical user interface control for specifying a user defined scope. The GUI control exhibits certain behavior including displaying a plurality of hierarchically arranged items e.g. in an expandable collapsible tree like manner where each item of the plurality of hierarchically arranged items can be explicitly selected by a user for inclusion and or exclusion from the scope. When the user explicitly selects an item for inclusion in or exclusion from the scope the control implicitly selects all descendants of the explicitly selected item for inclusion in or exclusion from the scope respectively. The control also displays separately from the plurality of hierarchically arranged items a first list of items explicitly included in the scope and a second list of items explicitly excluded from the scope where each item in the second list corresponds to an item in the first list.

According to another aspect of the invention when the user explicitly selects an unselected or implicitly excluded item the control changes a state of the explicitly selected item to be explicitly included in the scope and changes a state of each descendant of the explicitly selected item to be implicitly included in the scope. When the user explicitly selects an implicitly included item the control changes the state of the explicitly selected item to be explicitly excluded from the scope and changes the state of each descendant of the explicitly selected item to be implicitly excluded from the scope.

In some illustrative embodiments the control may present a first inclusion indicator corresponding to each displayed explicitly included item a second inclusion indicator less prominent than each first inclusion indicator corresponding to each displayed implicitly included item and an exclusion indicator corresponding to each displayed explicitly excluded item.

Advantageously various examples of the invention provide a tool for creating integrated collections. With some implementations of the invention the tool may include a basket control that receives objects to be included in a collection. The basket control also referred to as a list pane may for example include interfaces for receiving and displaying the data objects that are selected by a user to be included in a collection. A user may thus build a collection of data objects simply by providing the data objects to the basket control. A collection creation component then provides a collection with one or more data items corresponding to the objects submitted to the basket control. With various aspects of the invention a collection can be compiled with any desired data objects including discrete data such as text data files pointers to data files queries or exclusions for identifying data files based upon designated criteria both virtual and physical folders containing one or more data objects and even other collections of data objects.

The basket control may be employed by itself to make collections or it may be hosted by another software object. For example various implementations of the invention may additionally include a listmaker control that conveniently contains both the basket control and one or more user interfaces that a user can employ to provide data objects to the basket control. For example the listmaker control may include a viewing graphical user interface such as a file browser for viewing data objects and a navigation toolbar for navigating the viewing graphical user interface. The listmaker control may then be hosted as desired by software developers in a variety of software applications.

One or more aspects of the invention may be directed to computer systems stored software and or methods for creating a static list of data objects stored on a computer system. Aspects of the invention may display on a computer display device a graphical user interface GUI frame e.g. an explorer frame comprising a primary view pane and a list pane. The primary view pane displays data objects stored on the computer system in a first predefined location e.g. a virtual or physical folder identified by a user and the list pane displays information corresponding to items in a static list associated with the list pane. Each item in the static list corresponds to a data object and includes information pertaining to the data object e.g. a pointer to the data object the item s order in the list annotations regarding the item etc. A user may provide input identifying a first data object displayed in the primary view pane to be added to the static list such that an item corresponding to the first data object is added to the static list. Information about the first item e.g. icon name annotations etc. may be displayed in the list pane. The user can specify a second predefined location causing the primary view pane to display data objects stored in the second predefined location without changing the static list with which the list pane is associated.

According to various illustrative aspects of the invention each static list may have a persistence model where the contents of the static list are discarded unless the user has expressed an intent explicit or implied to save the static list. Implied intent can be indicated by the user renaming the static list from a default name to a user defined name.

Aspects of the present invention provide a system and method in which the user is given a preview representation of a file that is about to be created. The preview may appear as part of a save file dialog and may show an indicia corresponding to the new to be created file and may show how the new file may be visually represented in the GUI after the save is performed. The preview may exhibit certain behaviors such as having a unique appearance always appearing as a first element to be easily noticed by the user. Users may also interact with the preview to manage the file and or edit its properties even before the file is saved. The preview may also intelligently guide the user through the save process by for example refusing to allow the user to save the file to an invalid location or automatically populating metadata fields based on user navigation through the GUI.

Another aspect of the present invention may provides a system and method in which the user is given an improved file browsing interface by specializing an explorer or shell browser view. The browsing interface may vary depending on the contents to be displayed. In some instances the browsing interface may customize the user interface options presented in the browser panel in accordance with the contents to be displayed. The browser may rearrange remove and or add displayed properties in accordance with the contents. Other aspects of the browser s features appearance and or organization may be customized based on the contents. One or more templates may be provided and or created to provide a predetermined set of criteria for generating a browser panel. Software interfaces may be provided to allow development of additional browser panels by users and or applications. User interaction with such a browser may cause further alterations in the browser s appearance and or functionality.

According to other aspects of the present invention a shell browser with an integrated page space control provides navigational tools for storage systems of computers their operating systems networks and the like. In accordance with at least some examples of the invention navigation tools and or their corresponding user interfaces and displays may be provided in multiple different windows application programs and the like. In at least some examples of this invention navigation tools or and or their corresponding user interfaces and display panel s may include windows or panes that include links to various different files lists folders pages and or other storage elements. If desired navigational tools in accordance with at least some aspects of this invention may be customized for different application programs for portions of applications programs for portions of operating systems by different users and the like e.g. by independent software providers from those providing the computer operating system to be better suited or targeted for navigating information relating to that set of files etc. and or to that user. The navigational tools in accordance with at least some examples of this invention also may provide useful ways of organizing and or displaying information regarding the user s files e.g. by hierarchical properties lists auto lists folders etc. Systems and methods according to at least some examples of the invention also may make it easy for users to assign properties to files change assigned properties associated with files and the like optionally with the use of hierarchical properties. Additionally in accordance with at least some examples of the invention navigational tools may be provided for searching locating and viewing information relating to stored or accessible files e.g. in a query based file and or retrieval system.

Additional aspects of the invention relate to computer readable media including computer executable instructions stored thereon for performing various methods and or operating various systems including systems and methods having navigational tools for organizing searching locating and or displaying information relating to files located in a computer storage system and or accessible through a computer system as described above and as will be described in more detail below .

One or more illustrative aspects of the present invention provide a method and system of creating and customizing multiple roots in a navigation pane or panel or page space control. With such a system a user may be able to bypass needless navigation by allowing direct access to relevant documents applications and other data through such alternative roots. A user may customize a navigation pane by dragging a desired root or structure to a specific position in the navigation pane. The user may organize and reorganize the roots in a navigation pane by clicking and dragging the roots to particular positions relative to the other roots on the pane. Dragging the roots to the desktop may further create a shortcut to that root. Users may further have the option of adjusting the properties of each root allowing further customizability.

According to an aspect of the invention the multiple roots system permits roots to comprise other types of nodes beyond the typical physical locations i.e. physical folders used in current systems. More specifically the multiple roots system allows users to define lists and autolists as roots in the navigation pane. These lists and autolists may comprise files or other data that satisfy a specified set of rules or filters. Additionally roots may comprise custom extensions that correspond to a user s email e.g. MSN Hotmail Drive . These enhancements to the navigation system permit the user significantly greater flexibility in customizing a preferred set of navigation controls in a variety of applications.

Aspects of the present invention may provide a system and method for user modification of properties or metadata . In one aspect a shell browser is provided which includes a display of file properties that may include multi value properties. The user may edit the multi value property and the system may intelligently assist the user in editing the multi value property. The system may tokenize the multi value property values and may provide persistent prompt text within a multi value property field as a reminder to the user of the field s options.

The system may display aggregated property values and may incorporate visual differences to associate aggregated values with the files to which they apply. Editing of the aggregated values is possible and when editing aggregated multi value properties the system may intelligently assist the user in selecting or avoiding entries based on a variety of factors such as the entries already in use and the context in which the property values are used. When aggregating multi value properties for multiple selected files the system may also take steps to help preserve the order in which particular values appeared in the various files. Values that tended to appear more often in the beginning of a file s multi value property will tend to appear towards the beginning of the corresponding aggregated multi value property.

Another aspect of the invention provides a method and system for dynamic navigation of data based on user navigation. The method automatically dynamically scrolls data in a second dimension while a user is manually navigating in a first dimension. The method includes displaying a view of content in a predetermined viewable area in a window pane. The method further includes determining whether a user input will result in a relevant node being at least partially obscured. The method also includes automatically dynamically horizontally scrolling a view of content for a predetermined distance so that a relevant node is entirely visible or has increased visibility. In various embodiments of the invention the relevant node may be a node in a tree control e.g. navigation pane navigation panel page space control or the like that has input or view focus or a node that is closest in proximity to a user s mouse pointer or other input indicia. While it is understood that the invention may be implemented as a method it may also be implemented as a system for user navigation in a folder tree control or for navigation of other data as described herein.

Various aspects of the invention may communicate with other code modules via one or more programming interfaces or other interfaces for accessing data files. For example and aspect of the invention provides a file dialog having a dedicated extensibility region for inclusion of one or more user interface UI controls. The controls which can be included in an extensibility region are selectable from a predefined collection of UI control types. When an application requests the OS to display a file dialog the application can request inclusion of one or more controls of the types in the predefined collection. The OS then places the requested controls in the extensibility region of the displayed dialog. The application need not provide data explicitly indicating the positions within the dialog of the identified controls. The application may also request that the controls be placed in groups and or that separators be included between groups.

The present invention is directed to a file system shell which incorporates a number of desirable features. In essence the shell provides users with the ability to view and manipulate files and other items that are stored on a computer. The following description first provides a summary of the features that are shown in the and then provides a detailed discussion.

In summary are generally directed to an overall system for virtual folders. Virtual folders provide a method for allowing a conventional user interface to expose regular files and folders also known as directories to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. are generally directed to stacks which are related to the ability of the virtual folders to take any property that is stored in the database and represent it as a container that is like a folder. are generally directed to direct manipulation of virtual folders which relates to providing mechanisms for manipulating virtual folders that are similar to the mechanisms currently used for manipulating standard folders e.g. copying pasting clicking and dragging etc. . are generally directed to filters which provide a set of tools for narrowing down a set of files items. are generally directed to quick links which are a set of predefined links that can be clicked on to generate useful views of sets of files items. are generally directed to libraries which are related to the concept that groups of usable types of files can be associated together and that tools and activities that are related to the particular types of items can be provided. are generally directed to scope which is related to the concept of being able to acquire files items from multiple physical locations e.g. different hard drives different computers from a computer in a network location etc. so that to the user all the files items are presented with the same convenience as if they were being provided from one location. are generally directed to non file items which can be included in the database along with files and which can include items such as emails and contacts. are generally directed to a virtual address bar which comprises a plurality of segments each segment corresponding to a filter for selecting content. are generally directed to a shell browser with which users can readily identify an item based on the metadata associated with that item. are generally directed to extending the functionality of an object previewer in a shell browser configured to display a plurality of items representing multiple item types. The following description provides a detailed discussion of each of these aspects of the invention.

As noted above are generally directed to a system for implementing virtual folders. Virtual folders utilize the same or similar user interfaces that are currently used for file systems. The virtual folders expose regular files and folders also known as directories to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Location independent views are created which allow users to manipulate their files and folders utilizing similar controls as those presently used for managing file systems. In general this means that users can organize and rearrange their files based on inherent properties in the files themselves instead of the managing and organization being done as a separate part of the system. The virtual folders may represent files or items from different virtual or physical locations such as from multiple disk drives within the same computer between multiple computers or different network locations such that one view of files or items can expose files or items sitting at different physical locations. In one embodiment the different items or files need only be connected via an IP network in order to be included.

The virtual folder modeling is also able to be used for traditionally non file entities. An application of this is to have a set of user interfaces similar to files and folders that is objects and containers to show traditionally non file entities. One example of such non file entities would be e mails while another would be contact information from a contact database. In this manner virtual folders provide for a location independent metadata based view system that works regardless of whether the data being shown is from files or non file entities. In general these aspects allow more flexibility in terms of letting users manipulate their files and data using both common user interface techniques drag and drop double click etc. as well as leveraging the rich integration of various data types.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer including a processing unit system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive for reading from or writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may also be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A display in the form of a monitor is also connected to the system bus via an interface such as a video card or adapter . One or more speakers may also be connected to the system bus via an interface such as an audio adapter . In addition to the display and speakers personal computers typically include other peripheral output devices not shown such as printers.

The personal computer may operate in a networked environment using logical connections to one or more personal computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the local area network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As implemented on a system of the type illustrated in the present invention utilizes virtual folders which make it easier for users to perform basic tasks around file manipulation and folder navigation browsing and to provide higher level storage capabilities which can be leveraged in new features. The virtual folders expose files and items to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk.

As illustrated in the virtual folder system includes a folder processor a relational database a virtual folder descriptions database an other shell folders component a folder handler s component and a shell browser and view component . The folder processor includes a native handling code component a handler factory component a property writer component a rowset parser component a query builder component an enumerator component and a property factory component .

The relational database stores properties about all files in the system. It also stores some items like contacts i.e. non file items entirely. In general it stores metadata about the types of files and items that it contains. The relational database receives SQL queries from the query builder . The relational database also sends SQL rowsets to the rowset parser component with one row per item column columns being the item properties.

The virtual folder descriptions database includes the virtual folder descriptions. The virtual folder descriptions database sends data to the query builder component including a list of types to display in the folder the initial filter and the physical locations to show results from the scopes .

With regard to the other shell folders component the folder processor delegates to existing shell folders from many types of items including all files for handlers or properties. The other shell folders component sends properties from other folders to the property factory . The other shell folders component also sends handlers to the handler factory .

The folder handlers component provides code behavior for the items that exist only in the database like contacts. This is what allows non file items to behave akin to files. The folder handlers component sends handlers to the handler factory .

For the native handling code component the folder processor directly implements certain handlers based on the properties of the items. The native handling code component sends handlers to the handler factory . For the native handling code component and the folder handlers component like all namespaces virtual folders have to provide a set of handlers context menu icon thumbnail infotip . . . for their items. For most of these infotip data object drag drop handler background context menu . . . the virtual folder provides a common native handler for all the types it holds. However there are others which the author of the type has to provide context menu on the item itself writable property store . . . . The default handler can also be overridden. Virtual folders reuse this for files and allow non file items do the same.

The handler factory takes ID lists and produces code behaviors that provide context menus icons etc. In general the folder processor may use native handlers external handlers or delegate to other shell folders to get handlers as described above with respect to the native handling code component the other shell folders component and the folder handlers component . The handler factory component sends handlers to the shell browser in view as requested by the view. The handler factory component sends a property handler to the property writer .

The property writer converts user intentions such as cut copy and paste into property rights to the file or item. A shell browser and view component sends data to the property writer including direct manipulation cut copy paste or editing of metadata. In general since virtual folders present an organization based on the properties of an item operations such as move and copy drag drop become an edit on those properties. For example moving a document in a view stacked by author from Author to Author means changing the author. The property writer component implements this function.

The rowset parser takes database rowsets and stores all item properties into a shell ID list structure. A rowset takes the piecewise definition of the virtual folder and builds a SQL string which can then be issued to the database. The rowset parser component sends ID lists to the enumerator component . As described above the rowset parser component also receives data from the relational database including SQL rowsets with one row per item the columns being item properties.

The query builder component builds SQL queries. The query builder component receives data from the enumerator component including new filters from the navigation. The query builder component also receives data from the virtual folder descriptions database including a list of the types to display in the folder the initial filter and the physical location to show results from the scopes . The query builder component sends the SQL queries to the relational database .

In general the query builder component includes a set of rows in other words a table . This is what running the query yields. The rowset parser component takes each row and using the column names transforms the row into an ID list. An ID list is a well known shell structure which is used to reference items in a namespace. Doing this allows virtual folders to be just like any other namespace to the rest of the shell. Also caching this data helps keep database access which can be costly to a minimum.

The enumerator component operates in response to navigation to a virtual folder. As described above the enumerator component receives ID lists from the rowset parser component and sends new filters from the navigation to the query builder component . The enumerator also sends data to the shell browser and view component including ID lists that are returned to be inserted into the view after a navigation.

The property factory component takes ID lists and property identifiers and returns values for those properties. The property factory component receives data from the handler factory component including the property handler. As described above the property factory component also receives data from the other shell folders component including properties from other folders. The property factory component also sends data to the shell browser and view component including item properties as requested by the view.

The shell browser and view component displays the contents of a folder in a window and handles all the user interaction with the displayed files or items such as clicking dragging and navigating. Thus the shell browser and view component receives the user actions. The shell browser and view component also gets the data regarding the code behaviors that it needs from the folder in this case the folder processor .

As described above the virtual folders expose regular files and folders also known as directories to users in different views based on their metadata instead of the actual physical underlying file system structure on the disk. Thus the system is able to take a property that is stored in the database and represent it as a container that is like a folder. Since users are already familiar with working with folders by presenting the virtual folders in a similar manner users can adapt to the new system more quickly.

At a block the folder processor takes these results and converts them from the rows and columns of data into an enumerator structure which is used by the folder view to populate the screen with the resulting virtual folders and items for the user to interact upon. At a decision block a user decides whether to change the view by issuing a different query or pivot . For example a user could issue a show all artists pivot. If the user does want to change the view then the routine returns to block where the folder processor passes this new query to the relational database and receives back new rows and columns of results and constructs a new enumerator structure. The process then continues as described above as the folder view clears and updates using the enumerator to draw the artist objects to the screen.

In one example album objects are provided that represent containers that users can navigate into. For example double clicking the Beatles albums will navigate the view to see all of the Beatles songs. The folder processor issues the show all Beatles songs query to the relational database which hands back the rows and columns of data for those songs. The folder processor creates an enumerator of all these songs which then get drawn to the screen.

The user can also choose the view at any point while browsing virtual folders. From the above example after narrowing down to just show Beatles songs a user can change the view to only show the songs as albums. The process of changing the view of items into another representation is called stacking . This is because the items are conceptually arranged into stacks based on that representation. In this case the songs are rearranged into stacks for each of the various albums. Users can then navigate into one of these stacks only seeing the songs from that particular album. Again the user can rearrange the view of these remaining songs into stacks based on a property e.g. a rating for example . If the rating property were selected the songs from that Beatles album would be shown in stacks for a one two or a three star rating.

The results of each query depend on which physical or virtual locations are included in the scope. For example the scope may be made to include only the folders in the user s my documents folder. Alternatively the scope could include all folders on the computer or even all folders on multiple network connected computers. The user is able to view and change the scope through a scope property sheet. In one example the scope property sheet could be exposed by right clicking on the virtual folder and choosing properties. The user could add new folders to the scope or remove folders that were previously added.

One group of users for which virtual folders will provide particular utility is knowledge workers. Virtual folders allow knowledge workers to easily switch between viewing documents by file type project case number author etc. Since knowledge workers each tend to have a different method for organizing documents virtual folders can be used to accommodate these different preferences.

As illustrated in a folder is a my documents folder. At a first level the folder includes folders and corresponding to Clients and respectively. At a second level each of the folders and contain a folder and respectively which each correspond to the contracts for the selected client. At a third level each of the folders and contains a folder and respectively each corresponding to the year 2001. At the third level each of the folders and also contains a folder and respectively each corresponding to the year 2002.

It will be appreciated that a number of obstacles are presented to a user who wishes to navigate a physical folder file structure such as that illustrated in . For example if the user wishes to work with all of the contracts that the user has produced the user will first need to navigate to the folder to work with the contracts for Client and then will have to renavigate to the folder to reach the contracts for Client and will again have to renavigate to the folder for the contracts for Client . This arrangement makes it difficult for the user to access all of the contracts and in general prevents simultaneous viewing and manipulation of all of the contracts. Similarly if the user wishes to view all of the contracts produced in the year 2001 the user will have to navigate and renavigate to the folders and respectively. As will be described in more detail below the virtual folders of the present invention provide an improved file system structure.

The quick link elements include an all categories quick link on all authors quick link a January work quick link and a selection for displaying additional quick links . As will be described in more detail below quick links can be selected by a user to perform desired navigations of the virtual folders. Quick links may be provided by the system and some quick links may be created and saved by a user.

The filter elements include a filter by indicator an entry blank a by date indicator a year selector a pick an author selector a pick a category selector and a more filters selector . The filter by indicator directs a user to the fact that the items below can be used to filter the virtual folders or items. The entry blank provides an area in which a user can type a desired new filter term. The by date indicator directs a user to the fact that by selecting a date from the year selector the virtual folders or items can be filtered by the selected year. The pick an author selector allows a user to filter according to a specific author. The pick a category selector allows a user to filter according to a selected category. The more filters selector allows a user to pull up additional filters on the display.

The activity selectors include a create a new category selector activity selectors and and a more activities selector . As will be described in more detail below the activities that are presented may be for generally desirable functions or may more specifically be directed to activities useful for the type of virtual folders that are currently being displayed. For example the create a new category selector can be selected by the user to create a new category which will be represented by a new stack.

As noted above the activity selectors and may be more specifically directed to the type of folders or items that are being displayed. For example the present display is of a document library for which the activity selectors and may be directed to activities specifically tailored for documents such as editing or creating attachments. If the present library had been a photo library the activity selector and could be for activities specifically directed to photos such as forming photo albums or sharing photos with other users.

The information and control elements include information line and information line address bar a control line a backspace control and information lines and . The information line and address bar provide information as to the current navigation of the virtual folders or items. In the present example the information line indicates that the current navigation is to a document library while the address bar indicates the more complete navigation showing that the document library is within the storage area. The control line provides a number of standard controls and the backspace button allows a user to back up through a navigation. The information line provides numerical information about the contents of the present navigation. In the present example the information line indicates that there are 41 items which take up 100 MB in the stacks of the document library. The information line is available to provide additional information such as additional information about a file that is selected.

The stacks of the document library include an ABC Corp. stack a backups stack a business plans stack an XYZ Corp. stack and a marketing reports stack . The numbers on top of each of the stacks indicate how many items are in each stack. For example the ABC Corp. stack is shown to include 8 items. The total number of items of the stacks adds up to the number of items indicated in the information line which as described above is 41 in the present example. A selection box SB is provided which can be utilized by a user to select a desired item. The selection of the ABC Corp. stack yields a view of the items of that stack as will be described below with respect to .

As shown in a user is able to switch from the virtual files representation of to the physical file representation of . This allows a user to toggle between virtual file representations and physical file representations depending on which is desired for a current task. The different locations of the physical folders also illustrate that the scope of the virtual file system may be relatively broad as will be described in more detail below.

Another example of direct manipulation is right clicking an item and selecting delete. In one embodiment when a deleting function is selected by a user the user is queried whether the item should be deleted all together or simply removed from the present virtual folder. If the item is just to be removed from a present virtual folder category stack as noted above this can be accomplished by removing the desired category from the metadata for the item. In other words if one of the items that had been copied from the ABC Corp. stack to the West Coast stack was then to be removed from the West Coast stack this could be accomplished by modifying the category data for the particular file to no longer include the West Coast category.

The back button may be utilized by a user to back through the filtering process. As described above with respect to the back button allows a user to back up through a navigation. With regard to the examples of after filtering by the term ABC in a user could select the back button so as to back up one step of the filtering process which would return to the state of . Alternatively in another embodiment the back button may clear out the entire filter term and may thus return to the state before that filtering occurred. In this case by pressing the back button in a user would return to the state of .

In one embodiment in addition to the back button an additional means is provided for a user to back up in or otherwise modify the filtering navigation. This additional means involves allowing the user to directly access and modify the address bar which correspondingly changes the filter navigation. In other words by directly accessing and modifying the address bar the user can remove one or more of the applied filters or modify the values for any of the applied filters. This feature is described in greater detail in U.S. patent application Ser. No. 10 420 040 filed Apr. 17 2003 which is commonly assigned and hereby incorporated by reference in its entirety.

A timer may also be utilized in conjunction with a user typing in filter terms such as those shown in . The timer is used to monitor for a pause in the typing by the user. After a selected interval of no typing the filter is applied. For example in the state of a user has typed the filter term AB with no significant time lag between the A and the B. After typing the term AB the user pauses thus producing the state shown in where the filter term AB is applied. Sometime later the user adds the letter C to complete the filter term ABC and then pauses again at which point the filter term ABC is applied as illustrated in .

In one embodiment after a user has typed a filter term in the filter area and then chooses another filter or navigation the navigation state is updated and the filter term in the filter area is made to be empty again. In addition as will be described in more detail below with reference to other filter controls may be updated based on the selection of certain filter terms.

As described above with respect to filter terms may be presented by the system or typed by a user. Once a filter term is selected the remaining filter terms that are presented may be updated e.g. after the year 2002 is selected in in the options for selecting a year are no longer presented and instead a pick a month option is provided . As noted above the back button may be selected by a user to back through the filtering process. For example after the month of January has been selected in the user may select the back button to back up the filtering process to the year 2002 as illustrated in . The filter menu may also include a stack by function which would work similarly to the stack by function described above with respect to . For example a file type filter could have choices for Excel PowerPoint Word and also Stack by file type . Choosing the stack by function changes the view to show stacks for the various file types.

In general the filters may be configured to apply to different properties of the files or items. In one embodiment the filters may be classified according to different types such as alphabet index discrete values dates and numerical ranges. Example properties for the alphabet index may include file name author artist contact friendly name owner document author document title document subject and description. Example properties for the discrete values may include location file type application name genre track decade for music rating for music bit rate protected document category document page count document comments camera model dimensions product name product version image X image Y and document created time. Example properties for the dates may include last accessed last modified created on taken on for pictures . An example property for the numerical range may be file size.

It will be appreciated that the filters described above with respect to allow users to reduce a list of items to find a particular item that is of interest. As a specific example according to the processes described above a user could narrow a current list of documents to only show Microsoft Word files authored by a particular person and edited in the last week. This functionality allows a user to find a particular item in a list of many and helps the user avoid having to manually scan each item in the list.

As shown in at a block a user makes a selection on the display to indicate that a new quick link should be formed from the present filter term or navigation. At a block the user provides a new name for the new quick link. At a block the new quick link is saved and the new quick link name is provided in the quick link section on the display.

As shown in at a block a scope is defined for the physical locations from which items are to be drawn. At a block in response to a query the items are drawn from the physical locations as defined in the scope. At a block all of the items drawn by the query are presented on a single display.

In another aspect of the invention a graphical user interface is provided where a different type of filter control is implemented. According to this aspect metadata property controls corresponding to properties that are shared by a plurality of the items is provided in the listview mode. It will be appreciated that the description above applies to the following discussion where applicable and without specific reference thereto.

In the Microsoft Windows XP brand operating system by Microsoft Corporation of Redmond Wash. users are provided with different views for viewing display a list of folders and files that are currently identified in the tree structure. The views include a details view icon view thumbnail view list view and tiles view. The objects identified in these views can be sorted or grouped by a number of different metadata properties. provides an illustrative screen shot of details view in the Windows XP brand operating system. In details view each row corresponds to a particular object and each column corresponds to a particular property of the object. The properties may be listed in any desired order. In this example the properties identified from left to right include Name Size Date Modified Date Created Date Accessed Author and Type. The objects and their associated information have been divided into two separate groups according to Type HTML Document and Microsoft Word Document. The Show in Groups command is accessible by drilling down to the Arrange Icons By drop down menu via the View drop down menu at the top of the screen. Selection of a property such as author would causes the objects to be regrouped according to author. If grouping was not activated selection of a property causes the objects to be sorted by the selected property.

Aspects of the present invention build upon some of the core functionality of the user interface in the Windows XP brand operating system. Certain aspects of the invention provide and arrange and filter control that enables a user to filter a view using properties shared by a plurality of items. The filter control in some aspects allows a user to easily add change or remove a filter term from an address bar such as address bar shown previously in for example . In one implementation applying the filter control a user may filter a view of display objects by a disjunction ORing multiple values of a single property e.g. author Bill or Bob . In other aspects applying the filter control a user can sort group or stack a view of display objects by a property.

According to aspects of the invention a property header appears as a set of labels along the top of the listview in each of the view modes. The view modes may include any view of the physical or virtual files including the icons view details view list view tiles view and thumbnail view. Each of the properties in the property header functions as a property control and may be invoked by user selection such as by clicking on the property control to access associated control functionality. There will likely be numerous properties that may be available to the user. As such it may be practical to display a relevant subset of properties that is most useful to the user. In this regard the set of properties displayed in the display header may be customizable by the user may be part of a default template or may be a function of the query on the address bar. One way to select a set of properties to be displayed is on an individual shell folder i.e. page basis so that for each virtual folder autolist list file folder etc. where the set of properties may be customized by default. For example for a virtual folder called Recent Documents that shows all documents viewed recently the Date Last Accessed property would be useful whereas in other virtual folders it may not be useful. Also properties may be reordered within the property header or removed by for example dragging and dropping.

Each property control in the respective header may include a split button divided into a main portion and a split portion as shown in details view in and the other listview modes in . The split button state may be revealed to the user when she positions the cursor over a portion of the property control or in the property header or may be revealed when the property control is initially displayed.

Positioning the cursor over the main portion of the property control and selecting e.g. clicking causes the display objects to be sorted in accordance with the property associated with property control. In the example shown in the property is Type selection of the main portion of the property control would cause the display objects to be sorted alphabetically. Alternatively all physical folders may be displayed followed by all Microsoft Excel documents followed by all Microsoft PowerPoint documents followed by all Microsoft Word documents followed by all virtual folders autolists etc. When the display objects are sorted by a property the property control may provide a visual indication that the display objects have been sorted by the property. For example the property control may take on a visual appearance as being a depressed button or other appearance differentiating it from the other property controls. If prior to sorting by Type the display objects were sorted by another property such as Date that property would become the secondary sort term such that within the document type the display objects would be secondarily sorted by date.

As shown in positioning the cursor over the split portion of the property control and selecting causes an arrange and filter dropdown menu for the property corresponding to the property control to be presented. The arrange and filter drop down menu provides various controls which allow a user to group stack or filter the view of display objects by the property corresponding to the property control. The arrange and filter drop down menu includes an arrangement portion including a list of arrangement commands and a filter portion including a list of filter terms. The two lists may be separated by a visual divider as shown in .

In the example of the filter terms correspond to various Type properties of the items. The set of specific filters provided in the filter portion is the subset of possible filter terms for which at least one item in the view satisfies the filter term. For example if one of the display objects in the view were a photo with vacation as a keyword then vacation would appear in the arrange and filter drop down menu for the keyword property control corresponding to the keyword property. It will be appreciated that all filter terms may not fit into the arrange and filter drop down menu. As shown in a scroll bar control is provided to allow the user to view other available filter terms. It will be appreciated that items may be moved into or out of the view by operations such as dragging and dropping. Each time an item is added or removed from the view the set of specific filters provided in the filter portion is updated to account for the added or removed item.

The filter terms may be preset or dynamically generated based on evaluation of the property corresponding to the property control and the items displayed in the view. described above and its accompanying description provides an illustrative routine for dynamically generating new filter terms. The set of possible filters and their display order may depend on how the particular property categorizes the items. With a multi valued property such as keyworks each individual value may have its own bucket. Thus if an item has keywords vacation Hawaii beach three separate buckets will be created one for vacation one for Hawaii and one for beach for filtering. The same process applies to the operations of grouping and stacking which will be discussed further below.

For the property date assuming today s date is Friday Nov. 19 2004 dates may be categorized in the following categories Long Time Ago Two Years Ago Last Year 2004 January 2004 February . . . 2004 August 2004 September Last Month Three Weeks Ago Two Weeks Ago Last Week Sunday Monday Tuesday Wednesday Yesterday Today Tomorrow Two Days From Now Later This Week Later This Month Next Year Some Future Date. Other properties such as Size and Type may have the same bucketization as found in the Windows XP Brand Operating System.

According to one aspect the list of filter terms in filter portion for properties relating to dates e.g. date created date modified etc. include an additional filtering option which may be at the top of the list of filter terms referred to as Pick a Date . Selecting this filter term causes a calendar picker control to be displayed from which a user can select a specific date or date range. provides an example of such a control where the date April 20 has been selected.

Certain properties may not be divided or bucketized such as Filename Comment Description. For these properties there may be no useful breakdown of the property into discrete buckets for grouping stacking and filtering purposes. In this instance the only option presented in the arrange and filter drop down menu may be sort.

Each filter term in the arrange and filter drop down menu may include a corresponding indicator that provides an indication as to the number of items which satisfy the respective filter term. As shown in icon is provided adjacent to the filter term PowerPoint and represents a stack of paper. Inspection of the other icons positioned adjacent to the other filter terms indicates that they also represent stacks of papers. However the stack of paper icons vary in appearance and are dynamically generated where the number of papers stacked in the icon represent relatively the number of items which satisfy the corresponding filter term. For example icon shows more papers stacked then the icon corresponding to the filter term Email Message which shows more papers stacked then the icon corresponding to the filter term Outlook Document. Thus more items satisfy the filter term PowerPoint then the filter term Email Message and more items satisfy the filter term Email Message then the filter term Outlook Document. 

The filter portion also may include a checkbox control corresponding to each filter term in the list of filter terms. For example the checkbox control corresponds to the filter term Illustrator Artwork. Selecting the checkbox control next to a filter term causes that filter term to be added to the current selection by placing a check in the selected checkbox control and leaves the checkbox controls corresponding to the other filter terms in the filter portion of the arrange and filter drop down menu in their previous state selected or unselected. Also selection of the checkbox control may show a live preview of the filter operation in the area containing the display objects. Thus selection of the checkbox control causes the items that are represented on the display to include items that satisfy the filter term corresponding to the check box control. If no other checkbox control is selected then only display objects which satisfy the selected checkbox control will be represented on the display. It will be appreciated that selection or de selection of a check box control may occur in any number of ways including using a pointing device a keyboard input voice input and combinations of the same. For example if a user holds down the key she can select a range of filter terms similar to how the Windows XP brand operating system allows multiple selections.

Referring to each display object in the display area not shown will satisfy the current query in the address bar not shown in a manner similar to described above for example with respect to . Selection of the checkbox control causes the checkbox control to be presented as a checked checkbox control A as shown in and causes only those items which satisfy the filter term Illustrator Artwork to be presented on the display. A routine similar to the routine described in may be employed for selection of a checkbox control when no other checkbox control is selected where step in this scenario would correspond to a user selection of a checkbox control corresponding to one of the filter terms.

After selecting a checkbox control selecting an command or otherwise issuing a command outside the arrange and filter drop down menu e.g. clicking elsewhere on the graphical user interface causes the arrange and filter drop down menu to close and applies the currently selected filter s . Also selecting a filter term or an icon associated with a filter term deselects any other checkbox controls closes the arrange and filter drop down menu and applies the filter term. In these instances the address bar similar to address bar shown in other figures such as is updated to include the filter term in the query.

While a checkbox control is selected checked selection of another checkbox control corresponding to a second filter term adds that filter term to the current selection. Selection of the additional checkbox control causes the additional checkbox control to be presented as a checked checkbox control and causes only those items which satisfy each of the filter terms corresponding to checked checkbox controls to be presented on the display. Referring to selection of the checkbox control corresponding to the filter term Excel Worksheet when the checkbox control corresponding to the filter term PDF document has already been selected causes the display to be updated to include those items that satisfy the query in the address bar and which satisfy either the filter term Excel Worksheet or PDF document. Thus according to this aspect of the invention when multiple checkbox controls each corresponding to a respective filter term are selected from a single arrange and filter drop down menu then a logical OR operation is performed. As discussed selecting an command or otherwise issuing a command outside the arrange and filter drop down menu causes the arrange and filter drop down menu to close and applies the currently selected filters. In these instances the query shown in the address bar is updated to include a single filter including the logical OR combination of the filter terms. For the example discussed the filter added to the next segment in the address bar may be Excel Worksheet PDF document .

De selection of a checkbox control causes the checkbox control to be presented as unchecked and causes those items which satisfy filter terms corresponding to the remaining checked checkbox controls to be presented on the display. When checkbox controls are selected checked in the arrange and filter drop down menu each selected check box may be unchecked by selecting the command Don t filter by in the arrangement portion of the arrange and filter drop down menu. Referring to the arrangement portion of the arrange and filter drop down menu includes the command Don t filter by Type selection of which will cause the selected checkbox controls in the filter portion to be deselected and unchecked. When there are no selected checked checkbox controls in the filter portion the Don t filter by command is disabled and appears grayed out or faded as represented in the arrangement portion in .

When a user closes the arrange and filter drop down menu corresponding to a first property when at least one checkbox control is selected the first property control may provide an indicator that the view of display objects on the display has been filtered. Referring to FIG. C a symbol appears in the property control corresponding to the property Type to indicate that the view of display objects has been filtered by the property Type .

When a user closes the arrange and filter drop down menu corresponding to a first property when at least one checkbox control is selected corresponding to a respective filter term by selecting a second property control from the property header an arrange and filter drop down menu corresponding to the second property control is provided. In this instance the set of filter terms in the arrange and filter drop down menu is the subset of possible filter terms for which at least one item in the view satisfies the filter term for the second property control as well as the filter for the first property control. Also the set of filter terms may include any filter that was already selected from the arrange and filter drop down menu associated with the first property control. For example if a user were to select the checkbox control for the filter term PowerPoint from the arrange and filter drop down menu associated with the first property control Type and then select the second property control for the second property Author causing the arrange and filter drop down menu for Author to appear the filter terms Hamlet and Horatio would both appear if Hamlet and Horatio each were an author on one or more PowerPoint files. However if Horatio did not author any PowerPoint files then Horatio would not appear in the arrange and filter drop down menu. If both Horatio and Hamlet were proper filter terms the if the checkbox control for each were then selected the view would be updated with items that satisfied the logical operation Type PowerPoint AND Author Hamlet OR Author Horatio . If the command were selected the aforesaid logical operation would be applied and the address bar would be modified to include the segment PowerPoint followed by the segment Hamlet Horatio and the view would be updated to reflect the items which satisfy the query. Generally speaking values from different properties are combined with a logical AND operation when added to the query in the address bar.

According to another aspect if all the property columns in the property header cannot be seen then the columns that do not fit on the property header are truncated and may be accessed through an overflow control such as a chevron as is common with toolbars. Selecting the chevron button displays a menu providing the truncated property controls. provides an example of an arrange and filter drop down menu being activated from an overflow property control. Specifically depicts the right edge of the property header where a chevron represents that additional properties are accessible. Selection of the chevron results in the presentation of two additional property controls corresponding to the properties Author and Type . The cursor is positioned over the Type property control and the control corresponding to the arrange and filter drop down menu is selected presenting the arrange and filter drop down menu including an arrangement portion and a filter portion .

The arrangement commands present in the arrange and filter drop down menu include Stack by and Group by as well as the Don t Filter by command discussed above. In the examples of the arrange and filter drop menus shown in B and the property is Type. Hence the arrangement commands includes Stack by Type and Group by Type. 

When items in view are not stacked by the property associated with arrange and filter drop down menu the Stack by command is enabled. Selection of the Stack by command causes stacks of items to be created in the view according to the categorization applied to generate the filter terms. Thus with respect to the property Type stacks may include Microsoft Word Documents PowerPoint Excel Worksheet and other filter terms included in the list of filter terms in the filter portion of the arrange and filter drop down menu. Illustrative stacks may take on an appearance similar to for example items shown and described above in .

Also a Stop Stacking by command may be available when items are stacked by the property of the currently activated property control. Selection of this command causes stacking by the current property to be stopped.

When items in view are not grouped by the property associated with arrange and filter drop down menu the Group by command is enabled. Selection of the Group by command causes groups of items to be created in the view according to the categorization applied to generate the filter terms. The appearance of items grouped may be similar to grouping in the Windows XP Brand operating system. Also a Stop Grouping by command may be available when items are grouped by the property of the currently activated property control. Selection of this command causes grouping by the current property to be stopped.

The exemplary networked computing environment may also include one or more remote servers such as server that stores files accessible to the computing device and connected to the computing device via a communications network such as the Internet as shown in . In addition the computing device may also be connected to other information sources storing files or other content such as a remote database . Those skilled in the art will recognize that files and information stored on both the remote server and the remote database as well as on local storage devices such as hard disk drive may be accessible to and displayable on the computing device as part of an integrated file system on the computing device. Additionally while a particular configuration of a remote server and remote database is presented in those skilled in the art will readily recognize that this particular configuration is for illustrative purposes only and should not be construed as limiting upon the present invention.

An address in the conventional address bar corresponds to a specific location in a file system. As previously described in order to edit the address displayed in the conventional address bar a user must modify the address according to specific knowledge of the file system. Alternatively a user may select an entry in a tree view to navigate to an alternative location. Those skilled in the art will recognize that other controls external to the address bar may also be available that are not shown in the exemplary file view . While the address displayed in the conventional address bar corresponds to a specific location in a file system related files distributed among multiple folders in the file system cannot be displayed in conjunction with the conventional address bar .

Similar to a conventional address such as address of the virtual address s selection criteria may reference files stored in a specific location in the file system hierarchy. However in contrast to a conventional address the virtual address s selection criteria may also reference files irrespective of their specific file system location. Thus a virtual address may reference files stored in multiple locations in a computer file system including physical and virtual locations. As shown in the file viewer according to the virtual address in the virtual address bar is able to display additional files such as files and not found in the file viewer of . Additionally the virtual address bar may also be utilized to display content other than files in a computer file system. For example the virtual address bar may be used to reference content including system devices system services or Internet locations.

The first segment in a virtual address bar such as segment is referred to as a root segment or root filter. The root segment represents the broadest category of content available for selection by the virtual address bar . For example segment Files would likely represent a filter that references all files accessible to the computer file system. Alternatively a root segment may represent a filter that references all system services available to the user on the computer system or a filter that references all hardware devices installed in the computer system. Those skilled in the art will recognize that numerous other alternative root filters may be utilized by the present invention. Thus the above described examples are given for illustrative purposes and should not be construed as limiting upon the present invention. Additionally the labels displayed for each segment such as Files on the root segment are illustrative and should not be construed as limiting upon the present invention. According to one illustrative embodiment a label displayed on a segment is user configurable.

Each additional segment in a virtual address bar such as segments and represent additional filters to be applied when selecting and displaying files or content in a file viewer . For example root segment Files references all files available to the computer system. Segment Document Library filters the files selected by the root segment by selecting those files that were generated as documents by the user such as through a word processor spreadsheet or some other document generating application. Segment Word Documents filters the files selected by segment according to those documents that were generated using a word processor such as Microsoft Corporation s Word application. Finally segment Author A filters the word processing documents selected by segment according to whether they were authored by Author A. Thus content selected according to the virtual address represented in the virtual address bar must satisfy the filters corresponding to all of the segments in the virtual address bar.

Segments in the virtual address bar are generally ordered from those filters that are most inclusive to those filters that are least inclusive. For example as previously discussed segment Files is the broadest and most inclusive. Segments Word Documents and segment Author A are less inclusive. The virtual address bar illustrates the ordering of segments from left to right and for purposes of the present discussion segments and are subsequent to the root segment . However it should be understood that other orientations are possible such as a top down arrangement without departing from the scope of the invention. Thus the orientation from left to right should be viewed as illustrative and not construed as limiting on the present invention.

As previously mentioned segments in a virtual address bar such as segments and do not necessarily correspond to specific locations in a computer file system such as folders drives and directories. Thus segment Document Library may reference files or content distributed on multiple servers drives or folders directories. However certain segments in a virtual address bar may reference specific locations with a computer file system hierarchy. A further discussion of virtual address segments referencing specific file system locations is given below in regard to .

In contrast to a conventional address bar each segment in a virtual address bar represents an actionable interactive user interface element. For example a segment in a virtual address bar is responsive to user selection monitors whether a cursor is located over the segment for a specific period of time and may be removed from the virtual address bar by a dragging user interaction. Hence as shown in a user may place a cursor over a segment in the virtual address bar such as segment Document Library to select or click on that segment in order to navigate to that level i.e. truncate the virtual address at that segment as described in regard to .

It will be appreciated that a logical combination of filters or selection criteria may occur within one or more segments in the address bar. If a segment were added to succeed segment in for example with filter Author A then the items displayed in the file viewer would be further narrowed to word documents created in 2002 or in 2003 which were authored by A. Selecting the segment Document Library from results in the file viewer shown in in which the segments Word Documents and 2002 2003 have been removed and the files which meet the filter Document Library are presented.

In addition to selecting segments in a virtual address bar to navigate to a less restrictive segment a user may also wish to navigate to or select peer filters of current segments in a virtual address. A peer filter is an alternative filter that may be selected and applied to a given segment in the virtual address bar. For example with reference to peer filters for segment Word Documents may include filters such as Excel Documents Journals and the like. Other types of filters including specific file system locations hardware devices or computer services may also be applied to a given segment in the virtual address bar. Peer filters may or may not be logically related to a given segment s current filter. Each segment in a virtual address bar may have peer filters. Selecting a peer filter of a segment in a virtual address bar is sometimes referred to as navigating laterally. Selecting peer filters of segments in a virtual address bar is described below in regard to and also in regard to .

To illustrate alternatively selecting a segment with reference to a user first places the cursor over segment Document Library for a predetermined amount of time i.e. hovers over the segment to select that segment. demonstrates the results of alternatively selecting segment Document Library in the virtual address bar . As shown in after alternatively selecting segment Document Library a peer filter view is displayed including peer filters corresponding to the selected segment. It should be understood that the peer filters presented in the peer filter view are for illustrative purposes only and should not be construed as limiting upon the present invention.

In order to select an alternative peer filter as shown in the user positions the cursor over one of the filters presented in the peer filter view such as peer filter and selects the peer filter. As shown in after selecting the alternative peer filter the previously selected segment is replaced with a new segment representing the selected alternative peer filter . Additionally those segments that followed the alternatively selected segment in the virtual address bar of specifically segments Journals and All Documents in 2002 are removed from the virtual address bar in . Although not shown it follows that any files or content previously selected according to segments Document Library Journals and All Documents In 2002 would no longer be displayed in a corresponding file viewer and only those files or content selected according to segments Files and Picture Library would be displayed.

In accordance with another aspect of the invention a user may also wish to navigate to or select child filters or selection criteria of current segments in a virtual address. In a file tree structure a parent node or parent filter has children represented by child nodes. Each child node is a child filter or selection criteria and further restricts the parent node or parent filter or selection criteria. Each segment in a virtual address bar may have child filters or selection criteria. In segment is the child of segment . Selecting child filters or selection criteria of segments in a virtual address bar is described below in regard to and also in regard to .

An example of selecting a child filter or selection criteria will be described in connection with . To select a child filter or selection criteria with reference to a user first places the cursor over the child control for a predetermined amount of time i.e. hovers over the control to select the child control. Other selection operations are possible as well such as selecting the control by performing a left click operation on the child control . demonstrates the results of selecting the child control associated with the segment Files in the virtual address bar . As shown in after selecting the child control a child view is displayed including a list of child filters or selection criteria for the corresponding interactive segment and the corresponding icon for the child filter or selection criteria. The icon may identify a particular type for the child filter or selection criteria such as whether it represents a virtual or physical location and the particular type of virtual or physical location. In this example of the child view a split menu is shown with the icons in the left hand column and the child filters or selection criteria in the right hand column of the child view. It should be understood that the child filters or selection criteria presented in the child view and the icons are for illustrative purposes only and should not be construed as limiting upon the present invention. Also it should be appreciated that the icons may be displayed adjacent to any address type whether or not part of a child view peer view or otherwise.

In order to select a child filter or selection criteria as shown in the user positions the cursor over one of the child filters or selection criteria presented in the child view such as child filter or selection criteria and selects the child filter or selection criteria . As shown in after selecting the child filter or selection criteria the segment succeeding the parent segment associated with the child control is replaced with a new segment representing the selected child filter or selection criteria . Additionally those segments that followed the segment in the virtual address bar of specifically segments Journals and All Documents in 2002 are removed from the virtual address bar in . Although not shown it follows that any files or content previously selected according to segments Document Library Journals and All Documents In 2002 would no longer be displayed in a corresponding file viewer and only those files or content selected according to segments Files and Picture Library would be displayed.

Segments may be added to a virtual address in a virtual address bar through various user interactions at the end of the existing segments. To add a filter to a virtual address in a virtual address bar a user may manipulate an actionable control associated with a particular filter found on a window or file viewer with the virtual address bar. For example with reference to the file viewer of a user may click on the actionable control 2003 to add a corresponding filter to the virtual address in the virtual address bar . Alternatively not shown a user may manually enter in a known filter at the end of the virtual address by typing the filter s name. Numerous other ways of adding a filter to a virtual address exist all of which are contemplated as falling within the scope of the present invention. Thus it should be understood that the above examples are for illustration purposes and should not be construed as limiting upon the present invention.

When a filter is added to a virtual address in a virtual address bar a process is undertaken to ensure that the newly added filter does not conflict with any filters currently existing as part of the virtual address. If the newly added filter conflicts with an existing filter the existing filter is removed. A newly added filter conflicts with an existing filter in a virtual address if the newly added filter varies from the breadth of the existing filter being either more or less broad than the existing filter. Additionally a newly added filter conflicts with an existing filter if the newly added filter is mutually exclusive to the existing filter. However a newly added filter that is equivalent to an existing filter is not added because it has no effect. It should be understood that the above description of conflicts is given for illustration purposes and should not be construed as limiting upon the present invention. Those skilled in the art will recognize that other conflicts between filters may exist that are contemplated as falling within the scope of the present invention.

As shown in another filter is added to the virtual address represented by segment Author A. The process undertaken for adding this new filter determines that the new filter Author A would conflict with the filter represented by segment Author A F because the new filter Author A is narrower than the existing filter. Accordingly segment Author A F is removed from the virtual address bar and segment Author A is added to the end of the segments in the virtual address bar.

When a virtual address bar such as virtual address bar cannot completely display the virtual address due to size limitations of the virtual address bar a portion of the virtual address is displayed according to the size of the virtual address bar. However the undisplayed portions of the virtual address may still be accessed by the user. More specifically the virtual address bar displays actionable visual indicators to scroll the virtual path within the virtual address bar. illustrate an exemplary virtual address bar displaying a virtual address where the virtual address exceeds the virtual address bar s display capacity. As shown in scroll icons and indicate the direction the virtual address bar may scroll in order to display the previously undisplayed portions of the virtual address. However while the illustrative diagrams demonstrate the use of scroll icons it is for illustrative purposes only and should not be construed as limiting on the present invention. Those skilled in the art will recognize that there are numerous other ways of scrolling the virtual address in a virtual address bar all of which are contemplated as falling within the scope of the present invention.

According to another aspect if an overflow condition occurs such that the address bar is too small to fit all the interactive segments that comprise the address the interactive segments displayed are the most specific. For instance with reference to the broader interactive segment FILES is not included while the most specific interactive segments are displayed on the virtual address bar . The chevron serves as an overflow indicator to indicate that the adjacent interactive segment DOCUMENT LIBRARY has ancestors that are not displayed. The chevron has dual roles in that it also serves as a child control as well as an overflow indicator. As shown in the selection of the chevron provides the child filter or selection criteria list including filters POWERPOINT DOCUMENTS WORD DOCUMENTS VISIO DOCUMENTS and EXCEL DOCUMENTS for the interactive segment DOCUMENT LIBRARY and also displays an ancestor list for the interactive segment DOCUMENT LIBRARY including the ancestor FILES. Selection of an ancestor filter or child filter from the ancestor or child filter lists results in the address bar being modified to display that filter and remove all subsequent filters. It will be appreciated that the chevron could serve as a control for displaying an ancestor list and an independent child control may exist.

As shown in a virtual address bar may be configured to function as a conventional address bar. For example with reference to by placing a cursor in the empty space of the virtual address bar and clicking there the virtual address bar switches from displaying segments representing a virtual address to functioning as a conventional address bar displaying a conventional address as shown in . The conventional address in the virtual address bar of approximates the virtual address displayed in the virtual address bar of . However those filters in the virtual address bar of that do not correspond to physical locations in a computer file system cannot be displayed and are removed from the conventional address . Specifically segment Case Files and segment Contains Fax are not part of the conventional address .

In order to reconfigure a virtual address bar functioning as a conventional address bar to function normally as a virtual address bar the user must so indicate in a manner other than clicking on the empty area of the bar. When configured to function as a conventional address bar a virtual address bar must permit the user to click in the empty area for address editing purposes. Clicking in the empty area of a conventional address bar places an editing cursor at the end of the address path for editing purposes. Accordingly to reconfigure the virtual address to again function in its normal manner as described above a user must press a predefined key or key sequence such as the Esc or Tab key or by place the focus on another area of a window or view by clicking on another area of the window or view. Those skilled in the art will recognize that other user actions may also be utilized to reconfigure the virtual address bar to again function in its normal mode as described above all of which are contemplated as falling within the scope of the present invention.

At block a determination is made whether the new filter conflicts with an existing filter already in the virtual address. As previously discussed in regard to a new filter may conflict with an existing filter by substantially narrowing or broadening the scope of the existing filter. Alternatively a new filter may conflict with an existing filter because a new filter is mutually exclusive to an existing filter. If at decision block the new filter conflicts with an existing filter at block the existing filter is removed from the virtual address. Alternatively at if the new filter does not conflict with an existing filter or after removing the existing conflicting filter in block at block the new filter is added at the end of the virtual address. Thereafter the exemplary routine terminates.

Turning to a window represents a screen size display area for a graphical user interface of a shell browser. The window contains a preview pane area and a view area . The preview pane may include a preview control a user interface UI or edit control and a task control . Typically the preview control will provide the user with an image or other visual display of the item being previewed e.g. a selected file . The preview control may also present the user with controls such as iterator buttons which allow the user to shift the focus from one item to the next by clicking a mouse button. Metadata corresponding to one or more items and or metadata corresponding to the item container may be displayed in a variety of locations within the window . For example the edit control and metadata may be co located within edit control area so that the edit control area not only includes a display of key properties of the previewed item but also presents the user with the option of making edits to the metadata. The task control contains tasks relevant to the namespace and or the selection.

For purposes of the present invention the terms metadata and user modifiable metadata exclude the shell item name. The term shell item name refers to the property which is used for purposes of sorting and displaying the item within the shell browser. As mentioned above one unique aspect of the present invention is the ability of a user to edit metadata within a shell browser.

Those skilled in the art will appreciate that the present invention contemplates the presence of optional features within the window . For example the preview control and the task control are not essential features for purposes of the present invention. Moreover other non essential features which are not shown in such as a toolbar which includes iterator buttons or a show hide button so the user can open close the preview pane are also within the scope of the present invention. Nevertheless these and other optional features may assist the user in readily locating a particular item in the shell browser.

The view area provides a listview of one or more items such as file system files or folders. The term listview refers to an enumeration or list of items within a container. The terms item and shell item are used interchangeably herein to refer to files folders and other such containers and other non file objects which can be represented in a listview. Examples of non file objects may include but would not be limited to contacts favorites and email messages. The terms shell browser and file system browser are used interchangeably herein to refer to a browser which allows a user to navigate through various namespaces including files and other non file items.

Those skilled in the art will appreciate that the present invention contemplates many possible designs and layouts for the window . For example the preview pane is shown above the view area in . However other layouts such as placing the preview pane and the view area side by side are clearly within the scope of the present invention. The location of the edit control is also independent of the location of the displayed metadata and independent of the location of any other controls. There are also many possible view types for the items depicted in listview area such as details slide show filmstrip thumbnail tiles icons etc.

Referring next to a schematic illustration is provided of a welcome pane in a shell browser. A welcome pane is sometimes referred to as a null select pane because it represents a namespace or container as opposed to a selection. If the user has not yet made a selection a preview pane displays metadata and key tasks relating to the folder or shell library. If desired the tasks may be separated into premiered tasks and other relevant tasks . The welcome pane also includes a view area in which multiple files or other items may be viewed. The welcome pane metadata may include information such as properties of the container e.g. MyPictures in which case the metadata display may be static. Alternatively the welcome pane metadata may include information such as a sampling of metadata from each of the items within the container in which case the metadata display may change frequently. For example the metadata display may be limited to properties of one item at a time by cycling from one item to the next every 30 seconds.

Those skilled in the art will appreciate that the present invention contemplates means other than context menus for enabling user modifications to displayed metadata within a shell browser. Another such means for is for the user to click on the metadata to enter an editing mode. By contrast a user could enter an editing mode by hovering over the relevant text or object in the preview pane. Numerous alternative means are available and within the scope of the present invention.

In the event a user selects multiple items at the displayed metadata may include intersecting properties of the selected items a union of properties or perhaps a new property relevant to the selected items. Alternatively the displayed metadata may include a rotating sample of metadata from each of the selected items e.g. cycling from one selected item s metadata to the next selected item s metadata every 30 seconds . It is possible for the display of metadata which would result from a selection of all of the items to be identical to the display of metadata which would result from a null select.

The present invention enables a number of scenarios which were not possible with conventional shell browsers. As a first example a student can manage her projects using the preview pane. When she obtains new documents as part of a project she is working on she can select those documents in her document library and enter the name of the document author and the name of the project into keyword fields using the edit control. Now the new documents will show up in her favorite view Documents Grouped by Keyword and Listed by Author. A second example of a new scenario enabled by the present invention involves an employee looking for materials for an upcoming ad campaign. As he browses through his employer s stock collection of photos using the shell browser he selects a couple of pictures and from the preview pane adds a new keyword Summer 2003 Campaign. Having updated the metadata for a multiple selection the employee then pivots by keyword and can view all of the Summer 2003 Campaign files grouped together. Many other scenarios which take advantage of the present invention would be apparent to those skilled in the art.

A user can select any one of the thumbnail images which will cause a larger preview image of the user thumbnail selection image to be displayed within the preview control area. In addition user selection of a thumbnail image will also allow the user to select and perform any one of the tasks listed in the task option area with respect to the selected image. A first control button allows a user to quickly and successively preview an enlarged image of each of the thumbnail images within a given folder by iterating in one direction. In other words a user would not have to specifically click on each and every successive thumbnail image in order to preview the picture. Instead the user will merely click on the first control button repeatedly to move through the folder. A second control button performs a similar iteration function but only in the opposite direction.

Turning to a window represents a screen size display area for a graphical user interface of a general purpose shell browser. The window contains a preview pane area and a view area . The preview pane may include a preview control an edit or metadata control and a task control . Typically the preview control will provide the user with an image or other visual display of the item being previewed e.g. a selected file . The preview control may also present the user with controls such as iterator buttons which allow the user to shift the focus from one item to the next by clicking a mouse button. The edit control not only includes a display of key properties of the previewed item it also presents the user with a control for making edits to the metadata. The task control contains tasks relevant to the namespace and or the selection.

Those skilled in the art will appreciate that the present invention contemplates the presence of optional features within the window . For example the metadata control and the task control are not essential features for purposes of the present invention. Moreover other non essential features which are not shown in such as a toolbar which includes iterator buttons or a show hide button so the user can open close the preview pane are also within the scope of the present invention. Nevertheless these and other optional features may assist the user in readily locating a particular item in the shell browser.

The view area provides a listview of one or more items such as file system files or folders. The term listview refers to an enumeration or list of items within a container. The terms item and shell item are used interchangeably herein to refer to files folders and other such containers and other non file objects which can be represented in a listview. Similarly shell item refers to an item in a shell library. Examples of non file objects may include but would not be limited to contacts favorites and email messages. The terms shell browser and file system browser are used interchangeably herein to refer to a browser which allows a user to navigate through various namespaces including files and other non file items.

Those skilled in the art will appreciate that the present invention contemplates many possible designs and layouts for the window . For example the preview pane is shown above the view area in . However other layouts such as placing the preview pane and the view area side by side are clearly within the scope of the present invention. There are also many possible views for the items depicted in view area such as details slide show filmstrip thumbnail tiles icons etc.

Referring next to a schematic illustration is provided of a welcome pane in a shell browser. A welcome pane is sometimes referred to as a null select pane because it represents a namespace or container as opposed to a selection. If the user has not yet made a selection a preview pane displays metadata and key tasks relating to the folder or shell library. If desired the tasks may be separated into premiered tasks and other relevant tasks . The welcome pane also includes a view area in which multiple files or other items may be viewed. The welcome pane metadata may include information such as properties of the container e.g. MyPictures in which case the metadata display may be static. Alternatively the welcome pane metadata may include information such as a sampling of metadata from each of the items within the container in which case the metadata display may change frequently. For example the metadata display may be limited to properties of one item at a time by cycling from one item to the next every 30 seconds.

The extended controls represent a level of functionality beyond what is typically available from a shell browser. For example a default preview pane or preview control such as those shown in may simply display a preview image of a selected item. If the item is a word processing document or slide presentation the default preview image may be the first page of the document or slide deck. However by extending the functionality of the preview image to make it more interactive a user can quite easily manipulate extended controls to page through the document or slide presentation. This enhanced level of functionality improves the user experience because it allows the user to more comprehensively browse the previewed item without opening it which is particularly useful for files that are not readily identifiable based on the first page alone.

Extended controls can be made available to the user as part of an alternative previewer in a shell browser. The term previewer can refer to a preview control or to the a preview pane which includes a preview control. The present invention contemplates a shell browser which provides the user with a default previewer offering a standard level of functionality for multiple item types and one or more alternative previewers offering a different level of functionality for particular item types to enhance the user experience. Opening up the development of alternative previewers to independent software vendors ISVs and other third party developers adds value to the file browsing experience by showing relevant aspects of the file in an easily recognizable way. The present invention contemplates custom previewers for numerous file types and non file item types including but not limited to image files video files contacts games scanners video cameras document files spreadsheet files slide presentation files drawing files and tablet ink files.

The present invention enables a number of scenarios which were not possible with conventional shell browsers some of which have been described above. Third parties are allowed to describe and demonstrate their file types by providing code that can look inside the file type and provide a meaningful image that a user will understand. For example Apple could implement a QuickTime preview control which would be displayed when the user selects a QuickTime file in the shell browser. This preview control could provide an alternative or extended level of functionality beyond the default previewer in the shell of an operating system including functionality such as showing the first five seconds of a QuickTime movie and or offering buttons and controls for the user to launch the QuickTime player. An alternative previewer for a music file could provide similar extended functionality. As those skilled in the art will appreciate the possibilities for extended functionality in an alternative previewer are unlimited.

The context menu in presents the user with several options including the choice of selecting either the default previewer or an alternative previewer for the selected item. The generic text shown in the menu is of course merely one example of the type of options which may be presented to a user for selecting a previewer. A context menu can be provided in any window including a welcome pane to improve the user experience. As those skilled in the art will appreciate any number and variety of context menus could be supported by the present invention. For purposes of the present invention one means for enabling user selection of a previewer within a shell browser is to provide a context menu such as context menu . A user may summon the context menu for example by clicking on the corresponding text or object in the preview pane.

Those skilled in the art will appreciate that the present invention contemplates means other than context menus for selecting a previewer for the displayed items from a plurality of available previewers within a shell browser. Another such means is for the user to click on the preview control to enter a selection mode. Similarly the user may be prompted to select a previewer by right clicking within the preview pane. By contrast a user could enter a selection mode by hovering over relevant text or over a relevant object in the preview pane. Numerous alternative means are available and within the scope of the present invention.

At the system as opposed to the user automatically and transparently selects a default previewer from two or more available previewers for a particular item type. The system may select a previewer in response to an event such as display of a new item type or the presence of an alternative previewer. The system is configured to select a default previewer based on logical rules. Under exceptional circumstances the system may decide at to override the rules and select a previewer that would not have been selected under the applicable rules. For example if the rule is to select a newly available previewer over the current default previewer an installed application may generally have the authority to change the default previewer to the previewer now available from the installed application. However the shell browser for example may reserve the right to override the change proposed by the newly installed application. For instance an override may be appropriate when the newly installed application cannot be authenticated as a proper owner of the item type in question.

In any event the method then associates the selected previewer with the particular item type at . The selected previewer will remain in use until a different one is selected. However if the selected previewer is an installed application uninstalling the application will also terminate the use of the selected previewer.

Referring next to a flow diagram illustrates a method for enabling the use of third party previewers in a shell browser which supports multiple item types in accordance with an embodiment of the present invention. The method includes providing a shell browser having a default previewer for the multiple item types at . The method further includes providing an extensibility mechanism for third party development of an alternative previewer for at least one of the multiple item types at . The alternative previewer may be registered in the shell browser at . In the case of an installed application registration may occur substantially at the time of installation. For example if the application is installed by an OEM the alternative previewer may be registered before the user has acquired the computer. Alternatively the user may install the application locally or remotely.

There are many possible approaches for the extensibility mechanism referenced above in . One such approach involves exposing a set of application program interfaces APIs so that independent software vendors ISVs and other third party developers may develop alternative previewers. With the API approach a registration mechanism exists which allows an ISV to associate their preview control with an item type owned by the ISV. When an item or file of that type is selected in the shell browser the ISV s preview control is instantiated via this registration mechanism and the extensibility API. The API provides data to the preview control data representing the selected item s in the view and data representing the parent container of the items in the view. The preview control operates on this data and provides a user interface through the API which is presented in the shell browser. The user may provide input with keystrokes and mouse events which are passed by the shell browser to the preview control which can operate on those user input events.

Those skilled in the art will appreciate that many approaches are possible in the context of the extensibility mechanism of the present invention. In addition to the API approach similar functionality may be achieved via user configuration a pointer to HTML or hosting a flash. Moreover the extensibility model may require that only one application that owns the item type selected may provide only one alternative previewer. In other words the number of available previewers may be limited to a default previewer and one alternative previewer to avoid a poor user experience in which multiple registered extended previewers are in competition with one another. However another model would be to allow any application that can handle the selected item type to provide one additional previewer. An alternative model would allow any running code to provide one additional previewer for any item type. It may also be desirable under certain circumstances to allow replacement or removal of the default previewer. Many other models are possible and are contemplated by the present invention.

 Defining a Scope with Explicit Exclusions As discussed above with reference to a user or application may define a scope across multiple physical locations. According to an illustrative aspect of the invention a user or application may also define exclusions from the scope identifying specific locations which are not to be included in the scope using an advanced user interface that removes the ambiguities associated with tri state selection controls. Thus one or more aspects of the present invention may be used in a software input control in which the user defines a scope or range of items to be affected by a subsequent computer operation. Examples include defining a scope of software features to be installed or a scope of storage locations to be searched. These are but two examples provided for illustrative purposes and are not intended to limit the scope of the invention.

According to an illustrative aspect of the invention with reference to a scope selection control may in addition to providing a hierarchical selection tree include a basket identifying explicitly included items and explicitly excluded items . The scope selection control allows users to quickly visually see that which is included in and excluded from a scope by inspecting the basket. The control also provides the user detailed control at each folder level to specify what is included or excluded in the scope through interaction with the tree . According to various aspects of the invention further described below the scope selection control may use different visual indications to show the different states of inclusion in a resultant scope. By keeping the basket synchronized to the tree the scope selection control allows a user to quickly switch between hierarchy tree and exclusion basket modes of scope inspection providing a significant optimization of existing controls for scope creation and modification.

The operation of scope selection control will now be described with further reference to . The scope may be defined as the resultant set of items selected for inclusion by the user explicitly or implicitly via scope selection control minus items explicitly or implicitly selected for exclusion by the user. Explicit selection refers to the user affirmatively selecting a specific item for inclusion or exclusion. Implicit selection refers to descendants of an affirmatively selected item inheriting the inclusion exclusion status of the explicitly selected ancestor. An item is said to be unselected when the user has neither explicitly nor implicitly selected the item for inclusion or exclusion.

The hierarchical selection tree may include an expand collapse widget next to each folder having at least one subfolder as is known in the art. Clicking on or otherwise selecting an expand collapse widget expands or collapses the corresponding node of the tree. Clicking on or otherwise selecting any other location of a row may toggle selection of that location from the current scope as described herein. Double clicking on a row may both select the node for inclusion exclusion and may expand its children by one or more levels. The user may also select a checkbox corresponding to the selected item to toggle the status of the item.

When a user explicitly selects a row for inclusion the scope selection control may indicate the selection in the hierarchy by presenting a first inclusion indicator indicating the item is explicitly included for example by drawing or rendering an indicator or graphic on the display screen. For example in a user might be defining a scope of search locations to search for a sought after digital photo. Checkbox indicates the user has explicitly selected 2003 referring to photos taken during the year 2003. Checkbox is checked and the corresponding row may be highlighted. All files and folders contained within the checked folder are thus presently included in the scope. If the explicitly selected folder contains subfolders the control may automatically expand the subfolders one or more levels for display to the user.

Explicitly selecting 2003 also results in the implicit selection of all children and descendants of 2003. Implicitly selection for inclusion may be represented by presenting a second inclusion indicator indicating an item is implicitly included. For example in checkboxes corresponding to all descendants of 2003 are presented to include a faded check mark and each corresponding row may be presented with faded highlighting.

When the user explicitly selects an item the item may also be added to the basket in the appropriate location i.e. either included items inclusions or excluded items exclusions . The control preferably may maintain a 1 to 1 ratio between explicitly selected items and entries in the basket. For example in the user has explicitly selected the folder 2003 for inclusion in the scope. The control in addition to marking the folder 2003 as explicitly selected in the hierarchy also lists the explicitly selected item in inclusions . Because the user has not yet selected any other location for inclusion or exclusion there are presently no other entries in basket in .

According to an aspect of the invention a folder may be considered implicitly selected even when the user originally explicitly selected the folder for either inclusion or exclusion under certain circumstances. For example assume a user first explicitly selects the folder Vacation. The Vacation folder becomes explicitly selected and the Fiji and Europe subfolders are implicitly selected. Assume the user subsequently explicitly selects the 2003 folder. The 2003 folder is marked as explicitly selected and all subfolders including the Vacation subfolder are marked as implicitly selected. That is any time a user explicitly selects an item all sub items may be marked as implicitly selected regardless of their previous selection state. However according to an aspect of the invention the fact that the user previously explicitly selected an item may be stored for future use. For example suppose the user later de selects the 2003 folder realizing the 2003 folder was selected by accident in the first place. Each of the sub items of the 2003 folder may revert to their previous states and thus the Vacation folder returns to an explicitly selected state. Once the user is done editing the scope and desires to save the scope for future use the scope may be saved including each selection or the scope may be saved without information regarding selections that are irrelevant to the final saved scope. For example in the above example the fact that the user first selected the Vacation folder may be discarded when the scope is saved because the previous selection of the Vacation folder may be irrelevant to the final saved scope.

With further reference to when a folder is selected for exclusion by a user that folder and all descendants are removed from the scope. A user may select a folder for exclusion by explicitly selecting that folder after it has been implicitly selected for inclusion i.e. the user reselects the folder. When a user explicitly selects a row for exclusion the scope selection control may indicate the selection in the hierarchy by presenting a first exclusion indicator indicating the item is explicitly excluded. For example in checkbox indicates the user has explicitly excluded the Ex Girlfriends folder from the scope e.g. if the user does not want to include photos of ex girlfriends in the search results. Checkbox is marked with a solid X and the highlighting on the corresponding row is removed. All files and folders contained within the explicitly excluded folder are thus excluded from the scope. If the explicitly excluded folder contains subfolders the control may automatically collapse the subfolders thus only displaying the explicitly excluded folder to the user without descendants . If the user subsequently expands the widget corresponding to an explicitly excluded folder the descendants may be displayed with the second exclusion indicator illustrating implicit exclusion.

Explicitly selecting 2003 for exclusion also results in the implicit exclusion of all children and descendants of 2003 from the scope. Implicit selection for exclusion may be represented by presenting a second exclusion indicator indicating an item is implicitly excluded. For example in checkboxes corresponding to all descendants of Ex Girlfriends are presented including a faded X and the highlighting on each corresponding row may be removed.

When the user explicitly excludes an item the item may be added to exclusions of basket visually depicting each explicit exclusion as a property of an explicitly included item each exclusion also may optionally be stored as a property of an inclusion . For example in the user has explicitly excluded the folder Ex Girlfriends for exclusion from the scope. The control in addition to marking the folder Ex Girlfriends as explicitly excluded in the hierarchy may list the explicitly excluded item in exclusions list corresponding to explicitly included folder 2003 in inclusions .

If a user explicitly selects an explicitly included item the control may interpret the explicit reselection of the item to indicate the user changed his or her mind regarding that item s inclusion in the scope. However instead of explicitly excluding the reselected item the control may simply remove the explicit inclusion status from the reselected item as well as the implicit inclusion status of any descendants without marking the reselected item or any of its descendants as either explicitly or implicitly excluded. The items revert to the unselected state. Correspondingly the item is removed from basket the check box corresponding to the item in tree may return to its initial blank state and any highlighting may be removed. Thus according to an illustrative aspect of the invention only a previously implicitly included item can be explicitly excluded from the scope.

With further reference to a user may explicitly include an item from a previously implicitly excluded location. In the user has decided to include the folder Cindy in the scope e.g. because the user is still friends with his ex girlfriend Cindy but he still does not want to include photos of his other ex girlfriends in the scope. Upon explicitly selecting the folder Cindy for inclusion the scope selection control presents first inclusion indicator in checkbox and highlights the corresponding row. The implicit exclusion status of the folders Ex Girlfriends Janet and Karen remain unchanged because those folders are not descendents of Cindy but rather are ancestor and peers respectively. With the explicit inclusion of the folder Cindy the scope selection control adds a corresponding item to basket in inclusions .

In addition to interacting with tree a user may similarly interact with basket to view or modify the scope. The basket preferably displays an item name location and icon for each explicitly selected item although different information may be displayed as desired . The path may be truncated if the physical display size of the basket precludes displaying the entire path for an item e.g. with . . . as displayed in alpha blending may alternatively be used . Alternatively the truncation may occur in the middle of the path illustrated by the ellipses in the middle of the path in . Control may determine what portion of a path to truncate according to any desired algorithm. In one illustrative embodiment control may determine truncation according to the following priority show the immediate parent first show the root e.g. C D etc. second and finally fill in the path with the parent s sequential ancestors until the full path is displayed or until the allotted space is full.

Selection of a folder in basket e.g. may result in the tree automatically expanding and or scrolling to display the selected folder if not already visible in the current view of the tree . The tree may also automatically expand the selected folder to display any subfolders of the selected folder. Explicit exclusions may be defined as multi value properties MVP of explicitly included items where multiple exclusions corresponding to the same explicitly included item result not in an additional row in the basket but rather in another value added to the exclusions corresponding to the explicitly included item. For example the view in results from the user explicitly including the folder 2003 then explicitly excluding the folder Fiji and finally explicitly excluding the folder Janet. As the user hovers the mouse pointer over the exclusions from 2003 in basket the control may display the fully qualified MVP so the user can inspect the exclusions. As with inclusions when a user selects an exclusion from basket the control may automatically navigate tree to the selected item.

When the user completes his or her definition or modification of a scope the user may save the scope for future use e.g. to storage medium or the like. Saving scopes may be useful when the user repeatedly performs searches over the same scope with varying match criteria. When a scope is saved it may be saved as an ordered list of explicit inclusions with each entry in the list of explicit exclusions having zero or more associated explicit exclusions as an MVP. Thus the list may store all explicit selections by the user. However an item might not be included in the list when a user first explicitly selects the item and then subsequently explicitly deselects that same item for example realizing it was selected by accident in the first place . In this manner the proper scope can be recreated based on the ordered list and any new folder which is a descendant of an explicitly included or excluded item added between uses of the scope will be properly taken into account when the scope is reused.

For example according to an illustrative aspect of the invention a scope may be stored as an extensible Markup Language XML file. The below XML illustrates a scope identifying explicit inclusions and explicit exclusions wherein each exclusion is stored as a property of an inclusion and wherein order is inherently maintained by the order in which data is stored in the XML file 

In step the scope selection control determines whether the previously included item is previously explicitly included or previously implicitly included. If the item was previously implicitly included then in step the scope selection control explicitly excludes the explicitly selected item and implicitly excludes all descendants of the explicitly selected item. Next in step the scope selection control adds the explicitly selected item to exclusions in basket corresponding to the nearest explicitly included ancestor of the explicitly selected item.

If in step the explicitly selected item was previously explicitly included then in step the scope selection control removes the inclusion status for the explicitly selected item and reverts all descendants of the explicitly selected item to their previous state. In step the scope selection control removes the explicitly selected item from inclusions along with any corresponding exclusions . Those of skill in the art will appreciate that behavior when an item is unselected may vary. For example an explicitly included or excluded item might not revert to the unselected state when an ancestor is unselected.

After any of steps or in step the scope selection control determines whether any more modifications are desired. This determination may be implicit in that the user does not specifically request to make more modifications but instead simply continues to step to make another modification or on the other hand the user selects a Save or Search button in step to indicate to the computer that the user has completed defining the scope and the computer may use the scope for whatever purpose the user defined the scope. The scope may be said to be the resultant ordered list of explicitly included items with corresponding explicit exclusions defined by the basket.

It will be understood by one of ordinary skill in the art that one or more steps may be optional and steps may be rearranged to produce similar results. In addition where the above description indicates that the scope selection control performs some action or makes some decision the scope selection control may be operating in accordance with or under the control of control logic such as software or hardware instructions stored on computing device and executed by processor .

 List Pane for Manipulation of Static Lists As described above with reference to a shell browser also referred to as a file explorer explorer or file browser may be used to navigate among file and non file items. An additional illustrative embodiment will now be described with respect to . illustrates an explorer frame having a list pane primary view pane and navigation pane . Explorer frame may also include other features such as a breadcrumb bar alternatively referred to as a virtual address bar menu bar search window and information or preview pane . List pane may behave similar to basket control described above. The list pane is thus a simple in frame module available for a user to manipulate collections e.g. static lists in the context of the main explorer window.

Thus for example a user may create a to do list and open the to do list in the list pane add several items to the to do list while browsing the system shell via primary view pane and then close the list pane optionally saving the revised to do list. As another example a user may select certain photos stored across multiple folders viewed sequentially in primary view pane place the selected photos in the list pane and print the collection of photos by selecting all the photos in the list pane by selecting print from a context menu or menu bar . The user can close the list pane with or without saving the new collection of photos as desired.

A user may open the list pane by selecting a Window menu in menu bar then selecting List Pane from the Window menu not shown . Selecting Window List Pane again may toggle the display status of the list pane equivalent to Window List Pane. In some embodiments a keyboard shortcut may be used e.g. Ctrl K to toggle the list pane . The act of a user selecting Window List Pane from the menu bar or inputting Ctrl K via a keyboard may be ambiguous as to whether the user desires to create a new persisted static list or whether the user desires to gather a few items for an immediate task at hand then close the list pane without saving the list. Thus according to an embodiment of the invention when a user opens the list pane any objects in the list pane are at least temporarily stored. If the user closes the list pane without explicitly saving the static list then the contents of the static list are discarded. However the user may save the static list to persist the static list e.g. to reuse the static list later to or share the static list with others etc. In one embodiment the temporary storage location may be LocalAppData Windows Temporary List.wpl. Each explorer window opened by the user may have a unique temporary storage location associated with it for the purpose of storing the temporary static list until the user optionally affirmatively saves the static list.

The user can use the temporary list in the same manner that any other list in the basket is used. Items can be added removed re ordered etc. When the list pane is open the user can right click on any item in the primary view and choose Add to List Pane from a context menu not shown or view the menu bar which will insert that item as a new last item in the list in list pane . The user may also drag and drop items into list pane . However as this is a temporary list similar to the now playing items in Windows Media Player the contents of this list are discarded when the user closes the frame or closes the list pane . The system may optionally notify the user if there are unsaved contents in the list pane before closing the list pane or frame .

If the user desires to save the temporary list the user may select the title textbox inputting a name for the list identified by the contents in list pane and selecting the Save icon . Selecting the Save icon may invoke the common file dialog to allow the user to select the location in which to store the static list. Alternatively the user may context select e.g. right click in the list background and select Save . . . from the context menu to invoke the common file dialog.

The user may also open the list pane by selecting File New List from the menu bar which will open the list pane if it is previously closed. If the list pane is already open selecting File New List results in the system discarding any items currently in the list pane and creating a new temporary list. The new temporary list behaves just as a list created by the user selecting View List Pane and has the same persistence model i.e. it is discarded when closed unless the user first saves it .

The navigation pane may include a lists node which may be representative of all static lists created by the user or of all static lists created by the user and stored in a specific location. A user may also be able to create a new list by context selecting the lists node and selecting New List from the context menu which results in the frame opening the list pane with an empty list with a default title e.g. New List or New List n where multiple default named new lists have been created. Optionally in the navigation pane the list name of the newly created list may automatically be in edit mode and or the user may edit the list name in title text box in the list pane . The new list is created in the default save location for the given explorer frame .

According to aspects of the invention the list title may always be editable to input a new name for the list in list pane which results in the system renaming the list on the storage device. If the user selects save button for an already persisted list i.e. the list is already saved the system may perform as if the user selected a Save as . . . option. Additionally when the user selects File New List from the menu bar there might be no change to the state of appearance of the navigation pane. That is if the lists node is presently expanded the new list appears hierarchically underneath the lists node provided there is space available or its alphabetic insertion allows it to be viewable. However if the lists node is not presently expanded then there is no visible change to the navigation pane . When the list in list pane is empty the list pane may display a message indicating to the user how to create a list e.g. Add files to this list by dragging them in here. 

A user may double click or otherwise select the list pane header to close the list pane and present the list contents in primary view . The user can alternatively press Shift double click to open a new explorer window rooted in the list displayed in list pane . The user can select the X or equivalent in the uppermost right corner of the list pane not shown to close the list pane without any navigation in the primary view . When persisted lists are edited in the basket there may be an explicit save model where when the user closes the list pane or the explorer frame or navigates the list pane to another list the system presents an explicit dialog box to ask the user whether the user desires to save any changes.

Items in the list pane may exhibit similar behavior as items in primary view . For example clicking or selecting any given item in the list pane selects that item. When focus shifts between the primary view and the list pane both the primary view and the list pane may continue to reflect their selection state using the soft select state for whichever pane does not have input focus . However only one pane truly has focus which is reflected in the view as a visual cue to the user as to what the arrow keys will do. When focus is in the list pane the same selection and keys may work as in the primary view Ctrl A to select all arrow keys to move etc.

Using the system described above a user can drag and drop to and within the list pane allowing the user to add delete re order and otherwise manipulate objects in a static list. When dragging into the basket the system may provide various visual cues to the user. First the explorer frame may highlight the outer edge of list pane to indicate that the list pane is an active drop target. The list pane may also provide an insertion bar not shown if there is more than one item in the list. As the user navigates the primary view the list pane remains rooted in a given list which provides the user an efficient and simple mechanism by which to build up contents of a collection by navigating a file system in primary view without requiring the user to engage in a plentitude of tedious cross window drag drops.

With further reference to after a user creates and saves a list the user may reopen the persisted list in the list pane by context selecting the persisted list to display a context menu and selecting a context option to open the list in the list pane . The user can select the list icon in the list pane header to select the entire contents of the list currently being edited in list pane . The user may context select e.g. right click the list icon to display context menu . Optionally the user may right click and drag the icon to a new location to move the storage location of the list or to make a copy of the list in a new location.

According to an aspect of the invention a static list may have a task associated with it e.g. Print photos Burn CD Make movie from video clips etc. In such an embodiment selection of the task may open a blank list with task specific controls. Alternatively when a user opens a static list with which a task is already associated the list pane may automatically display task specific controls dependent on the specific task. User interactions with the list pane remain the same however there is an overall optimized task the user is pushed toward while in a task based mode.

Thus for example illustrates a portion of an explorer frame prior to a user opening a list pane. The explorer frame includes menu bar having task options and . Task specifically refers to burning a CD. Tasks and might refer to e.g. printing photos and making a movie from video clips respectively. Upon selection of task the explorer frame opens list pane with integrated task specific control as further illustrated in . In this example the task specific control provides the user the option to write the contents of the static list to a CD or other optical media or storage device. In such a scenario the system may be adapted with logic to know that actual copies of the objects identified are to be written to the CD or other media and not simply shortcuts or pointers to the objects if the collection is a static list. The objects identified by the list in list pane may be written in their order prescribed by the static list with annotations as applicable.

Task based lists may also be temporary and be discarded when the pane or frame is closed unless the user first saves the collection as described above. After the user completes the main task burn print etc. the task control may automatically switch to be a Save button to re emphasize that the user will otherwise lose the task based list when the user closes the list pane or frame .

The list pane may be displayed in a countless number of ways with endless variations to display details formats etc. while still providing the functionality described above. Those of skill in the art will appreciate that the below description of an illustrative view is merely an example and does not limit the scope of the invention as defined in the claims. Variations are possible depending on artistic design allotted space and the like. In one illustrative embodiment the view state of the list pane may display tiles including 32 32 point icons with two rows of corresponding metadata. The icon size may optionally be locked Ctrl mouse may thus be disabled or variable by the system and or user. The list pane may optionally limit horizontal resizing such that tiles are never shown side by side which also assists the user to cognitively maintain the order of items in the collection by viewing their vertical order. Also the list pane preferably only sorts and displays items by their order in the static list.

Various additional optional features may be included in one or more illustrative embodiments of the invention. For example when the user closes the explorer frame and the list pane is open on a named list e.g. one that has an explicit name and not the temporary default name when the user next re opens a like explorer frame the list pane may remain open to the list the user was previously viewing. If a temporary to be discarded list is in the list pane when the frame is closed that list is discarded but the list pane may remain open and empty when the explorer frame is re opened.

The list pane preferably opens as the rightmost pane and may open by default to be 200 pixels wide. The cursor may become a resize grabber when hovering over the border between the list pane and primary view . The list pane can be resized to a minimum width e.g. 33 pixels and the list pane size is preferably persisted per explorer frame. The list pane can also be resized to a maximum size e.g. as large as the primary view allows the list pane to grow e.g. the list pane cannot be made larger than the smallest size of primary view . Those of skill in the art will appreciate that the default size may be other than 200 pixels and that the list pane may be presented in a position other than the rightmost pane. For example on a system wherein the language reads right to left instead of left to right as in most western countries the list pane may appear as the leftmost pane instead of the rightmost pane.

 Preview representation of saved files An aspect of the invention relates to a system and method for providing an improved user experience when creating files by offering users a preview representation of a file that is about to be created on a system. depicts an example view that may be found in a GUI when saving a file. In view various indicia are shown depicting files that exist according to the criteria used to generate the view . Such criteria may be varied depending on user preference. For example a view may be generated to display the contents of a given folder on the system. Alternatively view may display all files of a given file type e.g. MICROSOFT EXCEL Worksheet is shown in the example . View may also result from combinations of criteria. For example the view may be a view of all worksheets that belong to a certain user or to a certain project or that are stored in a certain folder. Possible criteria are near limitless and include in addition to the ones already listed above file size creation date edit date project owner memory location user file name etc.

View may depict a preview representation or ghost representing the file that is about to be saved on the system where the ghost shows the user where the new file will appear in the GUI should the save operation be performed and identifies the location or view in which the new file will be found if saved. In the example the file has not been given a name yet so it bears a label of Untitled. The ghost may have a distinct appearance to indicate that it represents a file that is not yet technically a stored file on the system. The distinction in appearance may be a transparency or opacity setting color font highlight or any other way of offering a different appearance. To help ensure that the user does not lose track of the ghost as the user navigates through different views e.g. selecting a different folder in which to store the file the ghost may be configured to always appear in a predetermined location in the view. For example and as shown in the ghost may be configured to appear as the first indicia shown. The difference in appearance may correspond to changes that occur when a file is selected. For example the ghost may be selected by default and its indicia may have whatever appearance is used in the system to denote selected objects e.g. may be the same distinction discussed above .

The ghost may be treated as any other indicia in the view . Users may select highlight modify drag and drop etc. the ghost as they would any other indicia. depicts an example of the view in which an indicia representing an existing file on the system has been selected by the user. That is indicia may be given a distinct appearance as well and may be given an appearance that is distinct from the ghost . However the ghost may include additional functionality not associated with the indicia for files that already exist. For example ghost may be associated with a unique context menu of functions and options that are applicable to files that aren t already saved.

Ghosts are not limited to GUIs and views in which large indicia are used. To the contrary they may appear in other types of views as well such as a listing as shown in . In ghosts give the user a preview representation of a file that is about to be saved in the example the file has been named Accounts Receivable .

The ghost may be incorporated into the GUI for a system file panel or common file dialog such as the Save File dialog shown in which may be shared by a plurality of applications on the system. In the dialog panel ghost may appear to provide the preview representation of how the new file will appear once it is saved. In this example three views are shown where one view contains indicia for MICROSOFT EXCELS worksheet files one view contains indicia for MICROSOFT POWERPOINT presentation files and one view contains indicia for MICROSOFT WORD documents. The ghost appears in the first view because the file is presently set to be saved as a MICROSOFT EXCEL worksheet. This setting is shown in the metadata portion of the display which may display a set of metadata e.g. author file type etc. for the file that is about to be saved.

The user can interact with the ghost to change the metadata of the file that is about to be saved. The user may drag and drop the ghost onto different views to change the new file s properties to match those of the new view in which the ghost is dropped. For example if a file type is to be changed by clicking and dragging the ghost from the worksheet view to the presentation view the system may automatically update the metadata to reflect that the new file will be of type presentation instead of type worksheet. Similarly other changes in metadata may be made by moving the indicia. For example if one view corresponds to items having a first priority and a second view corresponds to items having a second priority moving the indicia from the first to the second may change the document s priority level to match the second view.

Changes made to the metadata may also be automatically reflected in the ghost . For example should the user enter in a different file name or type in metadata the ghost may automatically change and or reposition itself to reflect the new metadata changing the title to the new name and repositioning itself into the correct view based on the new file type e.g. into view if the user changes the type to a presentation . As another example if a view shows a first priority and the priority is changed in the metadata the indicia may be moved to a different view showing documents having the new priority. In some instances this may cause the ghost to completely disappear from the user s current screen if the ghost is repositioned to a view or location that is not currently displayed on the screen.

The Save File dialog may also include a Save button and cancel button for performing or aborting the save process.

In step the system may check to determine whether the user has changed the current view to cause the new file to conform to the properties of the new view. Changing the view may simply refer to navigating through a display space or changing the criteria of a given display and may be done by entering different criteria e.g. requesting to view files of type .wav and or GUI navigation e.g. dragging and dropping the ghost into a new view or just clicking on a folder indicia to enter the folder . For example if the user requests to see a different view of files such as files of a different type a different location a different project etc. as discussed above then the process may proceed to step to determine whether the new view represents a valid save location physical location or logical location for the file. For example the user might not have privileges for saving files to certain locations or to certain views or the file to be saved is incompatible with the other files in the new view e.g. the user has changed views to a spreadsheet view and the new file is an incompatible image file . As another example ghosts from a common file dialog might be prohibited from being moved to a location outside of the dialog. Changing views does not necessarily always result in changing the new file s properties. In some instances the user may have simply changed views to view different files with no desire to update the properties of the new file to match those of the changed view. For example the user may have simply wanted to see what other documents exist for a particular priority without necessarily changing the priority of the file being saved. If no such updating of the properties is desired when the view is changed the process may move from step to step .

If the new location is invalid the system may move to step and take steps to alert the user that an invalid location has been selected. For example the preview ghost may simply disappear from the view. Furthermore a message may be provided to the user. If this occurs the system may simply remain in this state until the user selects a different view representing a valid location for the file. Alternatively the user may abort the process by for example pressing a Cancel button .

If the new view is a valid location the system may move to step and carry the change through. This may involve a step of relocating the preview ghost so that it appears in the new view. The file s metadata may also be automatically updated to reflect the metadata required if any of the newly selected view. For example if the user chooses a new view of all files in a given project then the Project metadata property may be revised to reflect the new project.

In step the system may check to determine whether the user has requested that the new file replace an existing file. This may be done by for example dragging and dropping the ghost preview indicia onto an indicia of an existing file. If this occurs in step measures may be taken to retain the original set of metadata properties for example by saving them to memory. The displayed metadata properties may be replaced by the properties of the file to be replaced to reflect the fact that the new file will assume the same properties as the file it is replacing. Saving the original properties may be helpful should the user change his her mind about the replacement. Of course dragging and dropping onto an existing file is not always required and in those instances where such functionality is not desired step may be skipped.

In step the system may wait to see if the user executes the save process for example by pressing a Save button . If the user executes the save process then the new file replaces the old in step . The previous properties retained in step may be discarded.

If the user decides not to execute the replacement process such as by selecting the ghost again then the process may turn to step in which the ghost may be displayed in its previous state. The original metadata properties saved in step may be used to repopulate the metadata fields of the ghost preview. Alternatively the new file may retain the properties of the file that was previously to be overwritten. This alternative may make it easy for users to duplicate an entire set of metadata properties without entering each one separately. For example the properties of the item that was but is no longer to be replaced may be retained as a stamp or new default set of properties that may be applied in the future to new saved files.

In step a check may be made to determine whether the user has edited a metadata property value using for example a metadata display area . If the user has edited the metadata the system may automatically move the ghost preview in step to a new location commensurate with the new property and if necessary update the appearance of the ghost preview to reflect the new metadata property e.g. selecting a different indicia if the file type has changed or revising the file name under the indicia .

In step the system may check to determine whether the user has requested to execute the save such as by pressing the Save button . If the user has requested the save operation then the new file is saved in step and the ghost preview is dismissed the new file now appears as a normal indicia .

If the user has not yet finalized the save a check may be made in step to determine whether the user has aborted the save operation by for example pressing Cancel button . If the user has canceled the save operation the ghost may be removed in step . The ghost s property data may also be deleted from the system.

 Specialization of explorer views According to an aspect of the invention an explorer shell browser window e.g. as described above with respect to may be specialized based on the context of use or the data files being navigated thereby providing an improved user experience when browsing files on a system. shows a relationship diagram illustrating how different panels such as display regions in an explorer window may be conceptually related. In some instances there may be a Start panel that may serve as an initial display region provided to the user to begin browsing through files available through the system. The Start panel may offer the ability to view a different panel for browsing files such as a Music browser Documents browser Pictures browser Computer browser or any other browser desired by the system and or user. Each of these browsers may be a top level panel for browsing through files that meet particular criteria. For example Music browser may display a listing of files on the system that meet certain music criteria such as audio music file types. The browsers may also offer sub browsers created using different criteria such as a Genre browser panel that displays files that meet one or more genre criteria or a Playlist browser panel that displays files relating to one or more playlists of songs. These panels may in turn allow the display of files meeting further criteria. For example the Genre panel might display a subset of music files that are songs having genre information and may offer a Rock sub panel that displays a further subset of music files having a genre of rock and roll. Any number of panels may be created to accommodate any desired relationship and method of displaying file data. The Documents browser may offer separate browsers for certain types of documents e.g. spreadsheets or documents pertaining to a given project e.g. XYZ project .

Each available browser may be defined by a template stored in memory of the computer system. The template could simply be a file identifying the contents of the view the organization the features to display etc. The template may also specify the actual files that are to be displayed in the browser view.

Display may include a list panel showing the available browser panels. The list may include a listing of all available views on the system which may be presented in a nested menu sub menu format to conserve display area. This range of views may be referred to as a pagespace. The list may alternatively list a subset of browser panels that are associated with the current panel resulting in a smaller pagespace. For example if the current display is a music panel the list may display Playlist and Genre view options or specific playlists and or genres that have their own panels.

Display may include a files panel which may contain a listing of the files that meet the criteria established for the current browser panel. The files panel may include indicia representing data files such as an icon and or text and one or more properties of the files e.g. their names authors file sizes file types project affiliation date of creation modification etc. . The properties may be arranged such as in columns and may be rearranged and or modified depending on what is appropriate given the criteria used for the selected display . For example a music browser might choose to list the Song Title as the first property with Artist and Album next whereas a browser for project XYZ might list the Edit Date first with File Size and File Type to follow. Certain browser types may wish to omit undesired properties e.g. the Album property may not be very useful for a spreadsheet document . Each browser display may have a customized arrangement of files and associated properties. Column width row size indicia appearance e.g. size color etc. grouping stacking and any other display properties may be included in this customization. For example some browsers may display their files as thumbnails e.g. picture browsers may do this while other browsers may simply display the files in a text listing of the files and their properties.

Display may also include a preview panel that provides a preview of the content of one or more selected files from the files panel . There may also be a properties panel that displays properties for one or more selected files from the listview data . The properties panel may provide greater detail and or amounts of properties than that shown in listview . Display may include other types of display and user interface elements as well such as navigation commands panel sizing commands etc.

Each of the various portions of display may be implemented as distinct software modules. For example there may be a Commands module that is responsible for defining the user interface elements that are to go into Commands display a Listview module for processing the display elements in the files panel a Preview module for generating the content of the preview panel etc. These modules may expose application program interface API elements to facilitate interoperability with other applications and the various modules may be provided with parameters such as the criteria for a given view its position its size etc. Having distinct modules may simplify the process of defining new panels with different layouts and arrangements.

Each browser display may also have differences beyond just having different contents in the display areas discussed above. For example each browser may have its own customized arrangement of display areas such that certain areas may be resized added removed based on the criteria and or contents of the particular browser. For example a music browser might wish to do away with preview panel and offer music commands e.g. play pause cue add to playlist burn to CD etc. in command area . The other display areas may be rearranged and or resized to take advantage of the space previously occupied by the preview panel. The particular layout of the browser may be set for example in the template defining the browser view. For example depicts an example of a different browser having elements arranged in a different manner. In that example the list of available browser views has been enlarged to occupy the space relinquished by the preview panel. As another difference each browser view may have its own unique display theme such as watermark pattern color theme font etc. to help further distinguish the view from other views on the system. Context menus e.g. available commands text etc. user interface behaviors default commands on left right mouse clicks and other display interaction attributes may also be different for each browser.

In step the criteria may be used to identify the various files on the system that satisfy or meet the criteria and which are to be included in the browser display. These files may be identified through a search of the system s memory or they may simply be identified from the template information if the template already identifies the files to be listed.

When the files are identified the system may assemble a specific browser view or panel in step . Assembling the panel may include consulting a predefined template to determine the various elements modules that are needed in the panel. In some instances the panel may be further customized and or modified when the files identified for display satisfy a different set of criteria from the ones established for the template or if the identified files are suitable for display in a different template that has narrower criteria. For example if the user requests a browser for all files associated with a given project such as XYZ Project the system may be expected to provide a project browser panel. Such a panel may have been defined with the possibility that a project may include files of multiple types and may have separate display regions to segregate files based on file type. However if a particular project only happens to have files of one type then the system may dynamically customize the browser panel for the current display. The further customized panel may offer extended command options applicable to the file type or remove display areas and or elements that normally would have been used to display files of other types. The browser views may be dynamically modified based on the identity of files that meet the criteria used to establish the panel. Other types of custom assembly may be performed. The browser may adjust the panels depending on the number of files to be displayed so that a portion of a first display area s screen space may be transferred to a different display area e.g. a smaller listview is shown but a larger properties area is shown . The browser may adjust the panels based on the search criteria used to identify the files for display e.g. the criteria may be incorporated into a predetermined portion of the display or the results may be arranged based on the criteria and how well the files matched them .

In step the browser view may be generated on a display device associated with the computer system. Then in step the system may check to determine whether the user has performed an interaction or supplied an input to the browser view. User interaction may include editing text navigating through the pagespace by selecting a different view and or interacting with any of the displayed elements on the browser. If the user has given an input then in step the system may revise the browser in response. The revision to the browser may include removing adding or modifying one or more of the displayed elements in the browser view and may result in a dramatically different display. For example the user viewing a Music browser view may select one of the music files and request to view a Project browser for a project associated with the selected music file the Project browser may have a completely different display format. The browser displays may be dynamically modified to add and or remove any of the features described above which results in a browser interface that continuously provides users with a high level of contextually appropriate information.

When changing or revising a particular browser the system may provide visual effects to smooth the transition. For example animation may be used to show a repositioning of a displayed element fading can be used to show the addition deletion of elements and morphing effects may be used to show one element changing into another one. Although different views are possible a user or the system or its applications may also specify that certain features e.g. display elements available commands menus etc. or formats are to remain constant in multiple browser views to help minimize user confusion.

In step which occurs after step or if no user input has been received in step the system may check to determine whether the browser is to be closed or left and if so the browser process for this browser may end. If not the process may return to step to await further user input.

The page description may include a reference to a browser page structure . The browser page structure may include a variety of properties that ultimately define the view. For example there may be a view property defining the basic attributes to be contained in this view those attributes may be the same preview pane left pane and task pane in the basic view frame . The page may also have a data source property which may identify a location from which the data that populates the particular view may be obtained. The source may for example include a static list of data. The page may also include a command property which may identify the various commands that are to be supported by the view. Each command may be implemented by a separate application and or routine and may include commands for handling preview pane tasks context menu options etc. Of course the above is just one example of how the various browser views may be managed and implemented.

The discussion above refers to browsers but the features described herein need not be limited to system shell browsers. Any application wishing to offer customized views of data files may take advantage of the features described herein.

Alternative embodiments and implementations of the present invention will become apparent to those skilled in the art to which it pertains upon review of the specification including the drawing figures. For example the various steps in the described processes may be rearranged modified and or deleted as desired to implement a selected subset of features described herein. Additionally in the above references to certain features being found in one or more aspects or embodiments of the present invention are made simply to illustrate various concepts that may be advantageously used alone or in combination with other concepts and should not be read to imply that there is only one inventive concept disclosed herein or that all of the described features are required in any of the claims that follow. Rather each of the following claims stands as its own distinct invention and should not be read as having any limitations beyond those recited.

 Page Space Control Tremendous volumes of information are stored on and or available through computer systems and networks and this information can be made available to computer users for a variety of different purposes. Although computers can provide this wealth of information to users the information is only valuable and useful to users if users can reliably locate and retrieve the desired information from the system or network. The stored information is of little or no value to users if it cannot be readily located and or retrieved without substantial searching time effort and or frustration. Thus various aspects of the invention relate to systems methods and computer readable media for storing searching navigating and or retrieving electronic information in and available through computing systems and or networks. This section is divided into sub sections to assist the reader. The sub sections include Terms General Description of Various Aspects of the Invention Example Systems Methods and Computer Readable Media According to the Invention and Conclusion.

Page Space Control Terms The following terms may be used in this section and throughout this specification and unless otherwise specified or clear from the context the terms have the meanings provided below 

 Hierarchical Property A type of property whose value may include an ordered collection of categorizing unique strings. Each string may be made unique for example by the path through which it is specified and this path also may be used to define the categories to which each property value belongs.

 Auto lists Lists of files or other data resulting from queries for information over a fixed scope matching a pre selected set of filter conditions. Examples of auto lists include but are not limited to file creation dates file creation time last edit date last edit time file rating data file author list last use yesterday last use last week etc. A navigation panel as described below may include one or more auto lists. 

 Lists Shortcuts or links to auto lists files file collections folders and the like. A navigation panel as described below may include one or more Lists. 

 Page A specific folder virtual folder list auto list or the like. A page may constitute a node in a hierarchical table to which users can navigate e.g. by selecting items from a menu from the navigational tool according to aspects of the invention etc. Individual pages or listings of pages at various levels in a storage system and or available through a computer system or network may appear in a navigation panel and or a display panel as described in more detail below.

 Computer Readable Medium any available media that can be accessed by a user on a computer system. By way of example and not limitation computer readable media may include computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage devices magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can be accessed by a computer. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media. 

Page Space Control General Description of Various Aspects of the Invention Storing Properties in a Hierarchical Relationship

Aspects of the present invention relate to computer readable media having data structures stored thereon. The data structure in accordance with at least some examples of this invention may include a a first data set containing at least some of content of an electronic file and b a second data set containing property data associated with the electronic file. This second data set may include a first flat path string indicating a first property associated with the electronic file wherein the first flat path string indicates a hierarchical structure of the property data. Optionally if desired the second data set may include multiple flat path strings of data indicating multiple properties associated with the electronic file e.g. in a hierarchical structure. The second data set may be provided in any desired manner for example as metadata included in and or associated with the first data set. Of course if desired a third data set or even more data sets containing additional property data may be included in and or associated with the electronic file wherein the third data set or additional data sets includes another flat path string indicating another property associated with the electronic file and wherein the additional flat path string indicates a hierarchical structure of the property data in the third or additional data set.

Additional example aspects of this invention relate to systems and methods for storing electronic data including hierarchical property information. Such systems and methods may include a creating an electronic file including electronic data for storage on a computer readable medium e.g. using one or more computer processing systems b receiving input data indicating a first property value to be included as part of the electronic file or associated with the electronic file e.g. via a mouse pen digitizer keyboard network connection disk drive etc. wherein the first property value includes a first data set including a first flat path string indicating the first property value and wherein the first flat path string indicates a hierarchical structure of the first property value and c storing the electronic file with the first flat path string included therein or associated therewith e.g. in an electronic memory device wherein the first flat path string is stored or associated with the electronic file in any desired manner e.g. through linking information as part of the file as metadata etc. Optionally systems and methods in accordance with at least some examples of this invention further may receive input data indicating a second property value to be included as part of the electronic file or associated with the electronic file wherein the second property value includes a second data set including a second flat path string indicating the second property value wherein the second flat path string indicates a hierarchical structure of the second property value and wherein the storing of the electronic file includes storing the electronic file with the second flat path string included therein or associated therewith. Any number of property values may be stored in and or associated with an electronic file in this manner in accordance with the invention.

Still additional example aspects of this invention relate to systems and method for processing electronic data that includes hierarchical property information associated with it. Systems and methods according to at least some examples of this invention may include a receiving data on a computer system or network e.g. into the computer system s or network s memory indicating a hierarchical structure of plural defined property values wherein each defined property value has an unique flat path data string associated with it as compared with all other defined property values in the hierarchical structure b receiving user input indicating a new property value to be included at a user desired location in the hierarchical structure e.g. via a mouse pen digitizer keyboard network connection disk drive etc. and c based on the user desired location in the hierarchical structure determining whether the new property value would have a flat path data string that differs from all other flat path data strings existing in the hierarchical structure. The flat path data string for the new property value may include for example at least a first parent property portion and a first child property portion optionally at least one of the first parent property portion or the first child property portion may be identical to a portion of at least one other defined property value in the hierarchical structure . The method further may include adding the new property value to the hierarchical structure at the user desired location when the flat path data string for the new property value is determined to differ from all other flat path data strings for properties existing in the hierarchical structure.

In use of various systems and methods in accordance with examples of the invention a user may enter input into the system indicating a search query wherein the search query includes selection of a search property that includes a property value in the hierarchical property structure. Once the search query is entered systems and methods in accordance with at least some examples of the invention may determine which electronic files stored on or available through a computer system or network optionally with a search scope that limits the scope of files to be searched meet the search query wherein the electronic files determined to meet the search query include the first search property stored therein or associated therewith. As another example the search query may include user selection of multiple properties in the hierarchical structure and determination of which electronic files stored on or available through the computer system or network optionally within a limited search scope meet the search query may include identification of electronic files that include at least one of the selected properties.

The property data included in the computer readable media systems and methods according to examples of this invention may be stored in any suitable or desired manner without departing from the invention e.g. in a manner so as to indicate a hierarchical structure of the property data in the property data set. As examples the property data structure may take on one of the following formats parent property value delimiter child property value parent property value delimiter child property value delimiter grandchild property value child property value delimiter parent property value and or child property value delimiter parent property value delimiter grandparent property value. Of course any number of levels in the property hierarchical structure and the data structure in the flat path data string may be provided without departing from this invention.

Additional aspects of the invention relate to computer readable media including computer executable instructions stored thereon for providing hierarchical property data and or using hierarchical property data e.g. for storing searching navigating and or retrieving electronic files and related information including computer readable media for performing the various methods and or operating the various systems described above.

Page Space Control General Description of Various Aspects of the Invention Multiple Property Selections Other aspects of the present invention relate to methods and systems for processing input data that include multiple user selections including multiple selections of electronic file property data. Such systems and methods may include for example a selecting a first search parameter from a hierarchical structure including plural search elements e.g. through a user input device such as a mouse pen digitizer keyboard network connection disk drive etc. b selecting a second search parameter from the hierarchical structure e.g. through a user input device such as a mouse pen digitizer keyboard network connection disk drive etc. and c determining whether the first search parameter is located within the same element set in the hierarchical structure as the second search parameter e.g. using a computer processing system . Various displays may be generated e.g. on a computer display device by the computer processing system depending on whether the first search parameter is determined to be located within the same element set as the second search parameter. In accordance with at least some examples of the invention search results indicating a union of electronic files meeting the first search parameter or the second search parameter may be displayed when the first search parameter is determined to be located within the same element set in the hierarchical structure as the second search parameter. Additionally or alternatively search results indicating an intersection of electronic files meeting both the first search parameter and the second search parameter may be displayed when the first search parameter is determined to be located outside the element set in the hierarchical structure of the second search parameter.

In accordance with at least some examples of this invention the hierarchical structure s of the various search elements may include plural properties arranged in a hierarchical manner. At least one of the search parameters may include one of these defined property values. Optionally in at least some examples at least one of the search elements will constitute a folder element a list element an auto list element or any other desired element in the hierarchical structure. Still additional features of at least some examples of the invention may include determining or defining a scope for the search activities optionally based at least in part on the hierarchical structure of the search elements and or user input selecting portions of the hierarchical structure for the search scope.

Additional aspects of the invention relate to computer readable media including computer executable instructions stored thereon for performing various search methods and or operating various searching systems including systems and methods like those described above.

Page Space Control General Description of Various Aspects of the Invention Grouping and Stacking in the Display Panel Still additional example aspects of the present invention relate to computer displays providing user interfaces for searching electronic files stored on or available through a computer system or network. User interfaces in accordance with at least some examples of this invention may include a a navigation panel also referred to as a page space control displaying a hierarchical structure of search elements page space wherein at least some individual search elements in the hierarchical structure may be expanded optionally in response to user input to display one or more child search elements in the hierarchical structure and wherein the navigation panel receives user input directed to one or more search elements and b a display panel displaying information relating at least in part to search results obtained from searching the electronic files wherein the search results are determined at least in part based on the user input received through the navigation panel. Once expanded the individual search elements in the hierarchical structure of the navigation panel may remain expanded to display the child elements in the hierarchical structure irrespective of the manner in which the search results are displayed in the display panel e.g. in a stacked manner in a grouped manner in a combined grouped and stacked manner etc. . The various search elements in the hierarchical structure may include for example property values list elements auto list elements folder elements etc. and the hierarchical structure may be at least in part defined by individual user input.

In accordance with at least some examples of the user interfaces in accordance with the invention user input selecting child search elements or otherwise changing search elements in the hierarchical structure of the navigation panel will produce and or drive corresponding changes in the search results displayed in the display panel of the user interface.

Additional example aspects of the invention relate to systems and methods for navigating electronic data stored on or available through a computer system or network. Such systems and methods may include a providing a navigation panel e.g. using a computer processing system displaying a hierarchical structure of navigation elements wherein at least some individual navigation elements in the hierarchical structure may be expanded optionally in response to user input to display child navigation elements in the hierarchical structure b receiving user input through the navigation panel selecting one or more of the navigation elements e.g. through a user input device such as a mouse pen digitizer keyboard network connection disk drive etc. and c displaying information relating at least in part to search results obtained from searching the electronic data e.g. on a display device wherein the search results are determined at least in part based on the user input received through the navigation panel e.g. using the computer processing system and wherein the information is displayed on a display device simultaneous with display of the navigation panel. Additionally systems and methods in accordance with at least some examples of this invention further may include receiving new user input through the navigation panel selecting one or more new navigation elements from the hierarchical structure e.g. via an input system as described above and changing the information displayed e.g. using a computer processing system at least in part based on the new navigation element or elements selected wherein the changed information is displayed on the display device simultaneous with the navigation panel. The new user input may constitute in at least some examples a child navigation element in the hierarchical structure from the navigation element initially selected to thereby filter down the information displayed. Again the various search elements in the hierarchical structure may include for example property values list elements auto list elements folder elements etc. and the hierarchical structure may be at least in part defined by individual user input.

Still additional systems and methods in accordance with at least some examples of this invention may include systems and methods for displaying information regarding electronic data stored on or available through a computer system or network. Such systems and methods may include for example a providing a navigation panel displaying a hierarchical structure of navigation elements e.g. on a display device generated using a computer processing system wherein at least some of the individual navigation elements in the hierarchical structure include folder elements b receiving user input through the navigation panel selecting at least one folder element e.g. using a user input device as described above and c displaying information on the display device relating at least in part to search results obtained from searching the electronic data wherein the search results are determined e.g. using a computer processing system at least in part based on the user input received through the navigation panel wherein the information is displayed simultaneous with display of the navigation panel and wherein the information is displayed such that any sub folders provided under the selected folder element are displayed as stacks. Additional features of at least some systems and methods in accordance with examples of this invention may include receiving new user input e.g. via a user input device through the navigation panel selecting one or more new navigation elements from the hierarchical structure and changing the information displayed at least in part based on the new navigation element or elements selected using a computer processing system to generate the display . The new user input may be used to select a property value in the hierarchical structure and the information displayed at least in part may correspond to electronic data having the selected property value associated with it.

Still additional aspects of the invention relate to computer readable media including computer executable instructions stored thereon providing user interfaces performing various searching and or displaying methods and or operating various searching and or displaying systems including use of the hierarchical searching and navigation elements including providing the user interfaces performing the various methods and or operating the various systems like those described above.

Page Space Control Example systems methods and computer readable media according to aspects of the invention In modern computer operating systems and application programs useful on them many file navigation searching listing and or retrieval operations occur via query operations as the systems attempt to locate items such as stored electronic files or other data that meet the various query parameters. Aspects of the present invention provide navigational tools that in at least some instances also can be used for item placement and file storage which assists the user in these file navigation searching listing and or retrieval efforts.

In accordance with example aspects of this invention users may use navigational tools in accordance with this invention e.g. to navigate to and or locate information relating to any page in a navigational control menu to add pages to the navigational control menu or listing to add items to any set such as a property set an auto list set a list set a folder set etc. to see the content of existing and or system folders e.g. a My Documents folder etc. to see expanded sub folders within folders to add properties or other data to files or other items e.g. optionally in a hierarchical manner even to files or items stored in an auto list or a system generated list and the like. Additionally in accordance with at least some example aspects of this invention users and or independent software vendors will be able to customize the system navigational tools for use in different application programs in different views in different modes of operation and or the like. If desired users also can be given various tools to restore the navigational panel to a previous state or to its original state.

As more specific examples if desired navigational tools in accordance with examples of the invention may be designed or customized with lists and or auto lists that allow users to quickly locate and view information relating to pages of interest. For example if desired systems may have lists or auto lists named Documents Stacked by Author or the like to allow users to quickly jump to a view showing stacks of files collected together based on the underlying authors named for the various documents the user can further drill down into the stacks if desired e.g. to locate specific documents by specific authors and or based on properties associated with the files when they are created stored edited downloaded modified or the like. Other potential groupings or listing of stacks may include listings such as important documents recent documents good music recently used recently obtained etc.

More detailed descriptions of various aspects of the invention follow. Those skilled in the art will appreciate that this description merely includes examples of various aspects of the invention and does not limit the invention.

Page Space Control Example systems methods and computer readable media according to aspects of the invention Storing Properties in a Hierarchical Relationship As described above certain example aspects of the present invention relate generally to systems and methods for storing and using properties in conjunction with individual stored files or data on and or available through a computer system or network. In general when saving new files to a computer system or network such as a PC a network of PCs a server or the like users typically can assign properties to the files. Examples of such properties include Comments AuthorID Keywords and the like. While this capability is useful and may be adequate in some instances for example when only a small set of properties is involved this conventionally available flat property structure can become difficult to manage and or use over time e.g. as the overall number of available properties increases . Also with this flat property data structure users must separately enter and or associate each desired property with an individual file. This can be a time consuming task. Additionally the failure to accurately and or completely associate properties with respective files may limit a user s ability to search for locate and or retrieve the desired data at later times. For example as the number of different individual available properties increases it becomes more difficult for users to reliably retrieve items when they must correctly name in a search query one or more of the individual properties associated with the file.

At least some example aspects in accordance with this invention provide users the ability to assign and store at least some file property data along with an electronic file e.g. as metadata wherein the assigned property data is part of a hierarchical structure. As more and more properties become available to users e.g. through user designation and or user definition of new properties providing the properties in a hierarchical structure in accordance with examples of this invention will allow users to quickly assign multiple properties to a file through a simple one property assignment action. The availability and use of hierarchical properties in accordance with examples of this invention also will allow users to have more control over ordering their property values e.g. in a display of the hierarchy to provide the most common or important elements high in the hierarchy etc. and it will allow users to express relationships between the values of a property and have these relationships reflected when retrieving items or assigning values to items. The availability and use of hierarchical properties in accordance with examples of this invention also will give users compelling ways to organize the values generated in a property and to browse through and retrieve their items using this organization. The use of hierarchical properties in accordance with examples of this invention as will be explained in more detail below may allow users to more easily navigate through files across different properties locate desired files and or retrieve files using a single property even at least in some instances when the property searched with was not explicitly assigned to the file by the user but was simply part of the hierarchy of a property assigned by the user .

Additional aspects of the present invention relate to systems and methods for entering or capturing a hierarchy that may exist between properties e.g. a user defined hierarchy an automatically generated hierarchy etc. . If desired this hierarchical property information may be stored e.g. as metadata contained in and or associated with the electronic file itself as a flat path similar to the manner in which hierarchical folders are stored in various commercially available systems and methods such as systems and methods with folders available in various operating systems and application programs available from Microsoft Corporation . More specifically systems and methods according to at least some examples of this invention will store one or more hierarchical properties for an electronic file as a flat path string akin to a known flat folder path string which allows the shell operating system to correctly stack filter group and or otherwise navigate or process information relating to the stored files using the hierarchical properties in the same or a similar manner to which a folder hierarchy may be navigated and or processed today in various conventional systems and methods that utilize folder structures. Similarly providing a hierarchical data structure for properties gives users the ability to drill into a sub property to get to lower child property levels in the hierarchy in a manner similar to the manner in which users can drill into sub folders in the known and conventional folder systems.

In the data structure e.g. in data sets or fields such as in metadata associated with a file the various property values may be differentiated by paths such as the flat path strings described above. In this manner an individual value e.g. an individual node name can appear multiple times in a hierarchy provided the paths to the identical node names or values are different at each place the name appears. illustrates an example. Specifically as shown in the value Jim appears under both the Family node and the Co Workers node. Because the paths to these two Jim values differ from one another i.e. People Family Jim v. People Co Workers Jim these two values including the same ultimate end name optionally on the same hierarchical level as shown in can co exist in the hierarchy without causing difficulties. A specific node name or value can appear any number of times in a hierarchy provided that the path to it in each instance is different from all other paths to the same name or value.

Additional example aspects of the invention relate to processes to disambiguate between properties in different branches of a hierarchical structure that utilize the same name or node value. In the example described above in conjunction with the name Jim is associated with both a family member and a co worker. To distinguish between these two cases systems and methods according to at least some examples of the invention need only compare the values in higher levels of the hierarchy for the two cases in question to determine whether the values in question have an uncommon parent property node or path. Using the example above systems and methods according to at least some examples of this invention can differentiate between the two common node names in the hierarchy by looking at each Jim node s parent node. This investigation shows that one Jim node has Family as a parent node while the other Jim node has Co Workers as its parent node. Because their immediate parent nodes are different and distinguishable these two Jim nodes can co exist in the property hierarchical structure . Of course the different parent node names need not be located at the immediate parent node of the node s under consideration e.g. the differently named parent nodes could be located at a grandparent node level at an even higher node level and or at different node levels in the hierarchical structure .

The hierarchical structure illustrated in however typically would not be permitted in at least some example systems and methods in accordance with this invention. More specifically as shown the hierarchical structure in is similar to the hierarchical structure in except with respect to certain nodes at the lowest level. In the Family node contains two child nodes on the same hierarchical level having the same name namely the two Jim nodes . Because the flat path string to each of these Jim nodes is the same i.e. People Family Jim it would not be possible for the operating systems and or application programs to distinguish one node from the other and therefore an ambiguity would exist any time the flat path string People Family Jim were used. If a user attempts to set up two identical property paths as shown in the example of systems and methods according to at least some examples of this invention will display an error message present a dialog box request entry of a new name and or otherwise indicate to the user that this name or value is not permitted in the hierarchical structure at this location.

Property values may be assigned to and or associated with an individual file in any desired manner and or at any desired time without departing from this invention. For example users may be given an opportunity to assign property values to a file when a new file is downloaded to and or saved onto a user s computer system or network. illustrates an example user interface through which a user may save a file to his her computer system or network and if desired through which he she may assign one or more properties to the file. As shown the user interface includes a navigation panel which displays at least some of the properties or other information that may be associated with and or assigned to a file e.g. when information relating to a new file is entered in an input panel in an edit profile procedure and or at any other desired time . Notably the properties in navigation panel are arranged in a hierarchical manner. The various properties can be assigned to and or associated with the file in any desired manner e.g. by typing or writing the node name in at the appropriate location in the input panel e.g. in a keyword input box by dragging and dropping a property name from the navigation panel to an appropriate location in the input panel etc. As another example if desired properties may be assigned by dragging an icon or other representation of a file e.g. from a file list onto the desired value or node name in the navigation panel and dropping the icon or other representation at that location if desired the hierarchy in the navigation panel may exhibit an auto expand behavior in which dragging an icon or other file representation onto a parent property value and holding it over that property value without dropping will expand the parent property value if possible to at least its next level of hierarchy e.g. in the same manner that some folders will auto expand in currently available systems and programs . In addition to assigning property values to files through a navigation panel like that shown in users of hierarchical property systems in accordance with at least some examples of this invention may navigate or search through their hierarchies manage and or edit their hierarchies and or take other actions as will be described in more detail below.

In accordance with at least some examples of this invention when a file or other item is assigned a property value that is a child of another property value e.g. the value Playoffs in the file or other item also will automatically inherit any and all parent property values associated with the assigned property value e.g. Sports Pics Basketball in this specific example . Moreover if desired a parent property value can be assigned to a file or item even if that property value has one or more child property values under it e.g. one can assign a Basketball property to a file . In such an instance in at least some example systems and methods in accordance with the invention while the parent property will be assigned to the file neither of its children property values i.e. Practice or Playoffs in this example will be automatically assigned to the file or item although its parent property would be assigned . Of course if desired systems and methods also could be set up to automatically assign or associate the children properties with the file in this situation without departing from the invention.

As will be described in more detail below in accordance with at least some examples of this invention a list files search or other query including a parent property value as a search element or parameter will return all items tagged with both the designated parent property value and any of its children property values. In this manner storage systems and methods in accordance with examples of this invention allow users to easily tag items with a relatively few highly specific descriptive properties e.g. at lower levels in the hierarchy but by arranging the properties under increasingly broader parent nodes in the hierarchical structure the tagged items may be made to readily appear even in response to relatively broad search queries. If desired in accordance with at least some examples of the invention when the search results list files results or file preview results are displayed in response to a search query the primary value assigned to the file e.g. the actual value assigned by the user will be highlighted and or made known or available to the user in some manner.

The available e.g. previously defined by the user system or another and or stored hierarchical properties may be displayed by systems and methods in accordance with examples of this invention at any desired time and or at any desired location without departing from the invention. For example as shown in the properties may be displayed during a Save or Save As operation e.g. in the navigation panel . They also may be displayed during file search list or viewing operations e.g. in the same hierarchical tree layout illustrated in navigation panel of . Also if desired hierarchical properties in accordance with examples of this invention may be displayed in any and or all places where conventional properties are shown by application programs and or operating systems today e.g. as properties shown in a list view display as properties shown in an item details display as properties shown in a file preview display etc. . Also if desired hierarchical properties in accordance with examples of this invention may be displayed in any controls used to navigate properties such as in a tree control supporting properties.

The property information may be entered and or associated with individual files at any desired time and in any desired manner without departing from the invention. In addition to including the property information with the files at the time they initially are saved onto the computer system or network properties associated with individual files may be added to deleted from and or modified at other desired times such as whenever a file is opened edited or used in response to an edit profile or edit properties command and the like. The properties may be entered via typing optionally with auto completion of matching strings optionally from any level in the hierarchy through drag and drop operations through right click operations through pen press and hold operations etc. Any tools useful for setting editing and or deleting properties associated with a particular file also may be accessed and used in the preview screen without departing from the invention.

Additionally the actual content of the properties in the hierarchical arrangement may be changed by the user at any desired time and or in any desired manner without departing from the invention including for example in the manner that conventional folder structures are added to deleted from and or otherwise edited in conventional application programs and operating systems. As examples new properties may be added under an existing property and or existing properties may be deleted via right click mouse button actions which may display an appropriate user interface e.g. a menu including insert new property delete existing property change node level or position cut copy paste or other appropriate actions or in any other desired manner. As another example if desired the locations of existing properties in a hierarchical structure may be changed e.g. moved via drag and drop operations as illustrated in . More specifically illustrates the navigation panel displaying a hierarchical property listing e.g. for an application program for storing and editing digital photographs. The left hand side of illustrates the user moving the icon for the keyword Ocean through a drag and drop operation illustrated by arrow from beneath the Camping parent node to the hierarchical level immediately beneath the Keyword node. Once positioned at the desired location e.g. immediately over the Keyword node in this example via the dragging operation e.g. with the left mouse button held down the Ocean node may be repositioned in the hierarchy by dropping it in that place e.g. by releasing the mouse s left button . This action will reposition the node Ocean as shown in the right hand side of . If desired the user can move the former children nodes Pacific and Atlantic to accompany the Ocean node through additional drag and drop operations. Alternatively if desired systems and methods according to at least some examples of this invention may operate such that repositioning a node also will result in automatically repositioning of its children nodes if any . If desired in accordance with at least some examples of this invention a user can press the Control button while dragging a property value in this manner or take other predetermined action to make another copy of the property value and optionally its children property values appear under a different property value e.g. using a paste command . Of course other ways and protocols for cutting copying and or repositioning nodes and or their respective children nodes may be used without departing from the invention e.g. repositioning a node with collapsed children may be used to reposition the node and all of its children in one action but repositioning a node with its children fully expanded and displayed may be used to only reposition the parent node without its children etc. . Other default methods and ways of moving nodes may be used in systems and methods without departing from this invention.

In at least some instances depending on the specific characteristics of systems and methods in accordance with the invention errors may be generated during this repositioning action for example if the same property name appears more than once in the new path or position for the moved property. Systems and methods according to examples of this invention may handle such situations in any desired manner e.g. by not completing the desired move by providing an interface to enable the user to change a name within the path by displaying a dialog box to advise the user of the problem with various options for rectifying the problem etc. As another example if desired systems and methods may be developed that will allow multiple uses of a single name within a path e.g. Location New York New York such that this error would not appear unless an attempt is made to produce multiple nodes having the same overall flat path string names.

Users that take advantage of the hierarchical property characteristics in accordance with examples of this invention may develop a relatively large hierarchical structure for properties such that the overall hierarchical structure when fully expanded spans longer than the available space in the navigation panel and or the height of their display screen. This situation can be handled in any desired manner without departing from the invention for example by providing scroll bars within the navigation panel by allowing children nodes to collapse under their parent nodes and to be fully expanded or collapsed based on user input e.g. in a manner similar to the way that hierarchical folder structures expand and collapse in conventionally available systems and methods etc. When opened navigation panels of the type illustrated in may open at any desired location within the hierarchical structure and or in any desired expansion contraction condition such as always at the top of the hierarchical structure location at the most frequently used location in the hierarchical structure at the most recently used location in the hierarchical structure at a location in the hierarchical structure that includes the open document if any in a fully expanded condition in a fully collapsed condition in the most recently used condition etc. Also the navigation panel may appear at any desired location on the display screen such as at the left or right side e.g. based on user preference default etc.

If desired systems and methods in accordance with at least some examples of this invention may include a basic hierarchical structure when shipped and this basic structure may be used by users as a starting point to build a more complete richer hierarchy e.g. one that is more targeted and customized to their own uses. Examples of such a pre determined basic hierarchical structure e.g. for storing digital picture audio video or other user data may include base nodes such as Keywords Events Places People e.g. potentially with child nodes such as Author Photographer Subject People etc Dates My Pictures My Music My Documents My Videos etc. Any desired information may be included in this basic hierarchy without departing from the invention.

Any desired form or format may be used for storing or representing the hierarchical properties with individual files without departing from this invention. For example if a child property value is assigned to a file the path to that property value through the hierarchical structure may be stored as part of and or associated with the actual file e.g. as metadata included in and or associated with the file . As an example the representation or data structure of the hierarchical structure may include at least Parent property value delimiter child property delimiter child property . . . . Returning to the more specific example illustrated in a file saved with the individual properties Football and Games Attended associated with it may have metadata associated with the file that would be displayed along with information about the file in at least some instances e.g. as shown in for example in the form of Keyword Sports Pics Football and Keyword Sports Pics Games Attended. In these examples the parent property value is Keyword the first child property value in each instance is Sports Pics the second property values are Football and Games Attended respectively and the delimiter is the slash the delimiter may be a special character used to separate property names and this delimiter may not be included in property names to avoid confusion in the system . Of course any number of children property levels may be included in the flat path data string without departing from the invention.

Properties listed in a navigation panel e.g. panel at least in part may behave in a manner similar to the way conventional folders behave in various known operating systems and application programs. For example the manner of expanding and or collapsing hierarchical properties in the navigation panel may be similar to expanding and or collapsing folders in similar folder navigation panels or controls. As more specific examples in order to view and display child property values under a parent property a user can click on a widget provided to the left of the property note for example the widget with the sign therein for the Summer keyword in the sign in the widget indicates the presence of one or more additional undisplayed child properties and a sign in the widget indicates that the specific property already has been expanded in this example system . In at least some examples if a property or node has no children the widget to its left may be omitted it may include no additional indicator e.g. a or sign etc. it may include another indicator or the lack of children nodes may be indicated in another desired manner. An indentation scheme e.g. as shown in also may be used to help better illustrate the hierarchical structure. Notably because an individual file may have multiple properties associated with it the same file or item may appear in multiple groupings in the display panel note for example that Pictures and appear in both the Sports Pic grouping and the Summer grouping in .

Systems and methods in accordance with at least some examples of this invention may support still other ways for users to change modify and or use the hierarchical property structure. As one example in situations when a property value in the navigation panel is selected via a right click action when no items in the display panel are selected the user then may be given an option e.g. via an interface to add a new hierarchical property as a child under the right click selected node e.g. a new node with an editable textbox may appear at the location of the new property value in the hierarchical structure to enable the user to type in or otherwise enter the new property value . A delete function or option may be provided e.g. via a right mouse button click to enable the user to delete any desired portion of the hierarchy such as an individual node a node and all of its child nodes etc. Promote and demote functions may be provided e.g. to allow a user to select a property value and move it optionally along with all of its own child values up or down a level in the hierarchy respectively e.g. promotion makes the selected node move to a level so that it now appears as a peer to its former immediate parent node . As still another example a rename function may be provided e.g. via a right mouse button click that will enable users to give any property value or node a different name optionally with limitations if the same name is used twice in a path and or if two identical flat path names are presented as described above . Potential functions that may be provided in accordance with examples of this invention e.g. via a right mouse button click when a file is selected in the display panel include a remove property function and an add property function which may be used to remove and or add one or more properties from to the metadata or other data stored with and or associated with the file. Of course other functions and or other ways of performing the above functions may be provided without departing from the invention. Where necessary all files or items tagged with a given property and or path that is changed via the various functions described above may have their corresponding property data and or path information updated to reflect the user made changes to the paths and or properties.

Additional features in accordance with at least some examples of the invention relate to sharing hierarchical properties e.g. when existing files including hierarchical property data are sent to another user having a system or network that supports hierarchical property data but does not necessarily have the same available hierarchical property structure corresponding to the newly received file s . Systems and methods in accordance with at least some examples of this invention may be constructed to allow sharing of files or other items with hierarchical property values in a manner similar to the manner in which files or other items having flat property values are shared. In accordance with at least some examples of systems and methods according to this invention the default behavior for when a file or other item comes into a system with hierarchical property values will be as follows a the hierarchy of the new file will be displayed in all areas where hierarchical keywords typically are displayed by the system or network e.g. in the same manner as if the newly received file originally had been created on the target system or network b if the same hierarchy as that required for the new file already exists on the new recipient s system or network the new file item will associate itself with the hierarchy already on the system or network c if only part of the path necessary for the new file exists on the recipient s system or network the remaining parts of the hierarchy to accommodate the new file will be created on the recipient s system or network and or d if none of the path necessary for the new file exists on the recipient s system or network the new hierarchy to accommodate the new file will be added to the recipient s system or network.

The following provides a more detailed example of property hierarchy sharing in situations where a file is received and saved to a new user s system or network. In this example the recipient user has an existing property hierarchy with the path property values Family Brothers Toby. A new file is received by a recipient user e.g. as an email attachment and this new file which is saved to the recipient s system includes metadata from the file sender s hierarchical configuration. Both the file sender and the file recipient operate programs systems and or methods with hierarchical data structures in accordance with an example of this invention. The following table describes the manner in which the recipient user s system may handle receipt of the new file in various different scenarios 

The various property values associated with a file may be displayed at any appropriate time and in any appropriate fashion without departing from the invention. For example as described above in conjunction with property information may be displayed in a preview panel associated with a file. As additional examples if desired the properties associated with a given file may be included with a property page or a display properties command associated with a file. Existing properties also may be displayed for example during save save as edit profile open file or other similar operations. If desired the stored properties associated with a file also may be displayed while the file is opening and or open e.g. in a toolbar and the user may have an interface available for editing the properties e.g. while actively working with the file after it is saved before it is opened etc. Many other options are available for displaying the saved property data associated with a given file without departing from this invention. Of course any number of properties may also be associated with a given file without departing from this invention.

Also any desired amount of the property data associated with a file may be displayed in the various locations without departing from the invention. For example if desired the entire hierarchical path may be shown for each property or at least some properties at any location where one or more of the properties associated with a file are displayed e.g. in preview or property panels like that shown in . As another example if desired only the assigned property value itself may be shown at the various locations and the remainder of the hierarchy can be seen for example via the navigational panel during a cursor hover action etc. as well as via the file information stacking and grouping features to be described in more detail below . As a more specific example if an individual file such as a digital picture has the following hierarchical keywords assigned to it Sports Pics Baseball Practices Cardio Drills this lengthy flat path string may be represented in at least some locations simply by providing the lowest child node in the path namely Cardio Drills. This truncated format of property listing however runs the risk of having name collisions and or being somewhat unclear to the user e.g. if the node Cardio Drills exists at multiple locations in the hierarchy . In such situations if desired additional hierarchical information may be displayed along with the lowest level keyword to distinguish the conflicting information. For example as described above in conjunction with each hierarchical node in systems and methods according to at least some examples of this invention has a different and unique path. This information may be used to resolve conflicts described above. Specifically for example when there is a conflict of the type described above defined as two hierarchical property values being visually represented in the same way systems and methods according to at least some examples of the invention will traverse the conflicting paths until a different parent property value is found and that value will be displayed optionally along with the conflicting lowest level node information . For example if a hierarchy contained and or an individual file was tagged with both Sports Pics Baseball Practices Cardio Drills and Sports Pics Basketball Practices Cardio Drills the displayed property information e.g. in a preview or property display may be represented for example as Cardio Drills. Baseball and or Cardio Drills . . . Basketball and or in some other appropriate manner to distinctly show the correct hierarchy.

As another example of practical use of hierarchical property information many businesses are arranged with at least some degree of hierarchical structure e.g. departments divisions locations etc. . More targeted operating systems methods and or application programs according to examples of the invention may be developed for such businesses that take advantage of the hierarchical nature of the individual corporation s structure. For example predetermined hierarchies may be provided for the computer systems networks and or application programs used by corporate employees that include a predefined hierarchical structure for properties in data stored for the corporation. Such systems and methods can enable at least some overall sensible hierarchical structure in the corporation s systems and networks in which its data may be organized and stored.

Aspects of the present invention also relate to computer readable media including hierarchical property data stored thereon and computer readable media including computer executable instructions stored thereon for allowing entry and or use of hierarchical property data in various operating systems application program environments and or various other systems and methods including the systems and methods described above. The computer readable media may constitute computer executable instructions stored on the various specific examples of computer readable media described above.

Page Space Control Example systems methods and computer readable media according to aspects of the invention Multiple Property Selections As described above additional aspects of the present invention relate generally to systems and methods for searching information contained on a computer system or network optionally taking advantage of the hierarchical property structures described above.

With its Windows computer operating systems Microsoft Corporation of Redmond Wash. introduced a real world analogy for saving organizing and retrieving electronic information from computer systems or networks namely folders. This folder system was strictly an end user concept introduced to give a real world feel to the electronic data and information stored on or available through the computer. Computer users typically think of their computer s hard drive as a big filing cabinet in which their files are organized. However to the computer system itself an electronic file is simply a series of bits that are encoded magnetically to a hard drive or in some other manner and a folder is simply a way for the computer system to reference those sets of files.

With Microsoft Corporation s NT File System NTFS the ability to support hard links was introduced. This feature enabled users to place electronic files in multiple folders. Of course physically this feature does not require that the bits representing those electronic files are duplicated multiple times on the computer s hard drive or other storage system e.g. once for each folder in which the file is placed. Rather the different folders reference back to the same file. However when initially released this ability was not exposed to end users because putting a single file into multiple folders did not match the user s real physical world concept i.e. the same physical piece of paper cannot be located in two separate physical folders at the same time .

In at least some operating systems in which at least some aspects of this invention may be practiced a new end user concept called a list is being introduced. As a physical analogy one may think of a list as a container that references sets of items e.g. electronic files . To better understand lists a more detailed explanation of a folder is described. A folder may be considered as a set or group of items that are considered as related to one another in some manner e.g. being present in the same folder may be one way that items in a set may be considered as related . Each item or file in a set or folder may include a property called PARENTFOLDER e.g. in the form of a path such as c users usera documents . Notably this path also is an end user metaphor and does not necessarily reflect the physical structure of the computer. In fact the concept of a drive itself also may be considered a metaphor as a single physical hard drive may be partitioned into multiple drives such as a c drive a d drive etc.

Another way users can define a set is through a list. Lists may be considered as related to folders because each may be thought of as defining a set of items. Unlike folders however lists in accordance with at least some examples of this invention do not define this relationship using a PARENTFOLDER property as described above. Rather lists will allow the same item e.g. an electronic file to exist in multiple locations e.g. in multiple independent lists . Like folders lists are an end user concept. Putting electronic files or other items in multiple lists does not cause the actual physical bits representing the underlying data to be duplicated but rather the underlying electronic files or items are referenced by or linked in some manner to that list. To tie this discussion back to a real world example a person may have a Shopping List and an Urgent To Do List in which they keep track of items they need to purchase and things that they need to do. Both of these lists may include an item such as birthday present for wife. The user understands that buying a gift is both something that must be done while shopping and something that must be done rather urgently. The user further understands however that just because this item is entered in two of his her lists this does not mean that they need to purchase two gifts. Rather the single act of buying the gift allows the user to remove each item from its respective list.

Operating systems in which at least some aspects of the present invention may be practiced further may include Auto Lists. Auto Lists like lists and folders define sets of items. These sets of items may be generated automatically based on common property values associated with items stored on or available through the computer system. For example if desired users can have an Auto List based on the property value rating 5 star. Using this Auto List feature users can easily locate and see information relating to all of their files that are rated 5 stars regardless of which specific folder or list they may appear in. As long as the file or item has a 5 star rating associated with it systems and methods according to at least some examples of this invention will automatically include this file or item as a member of this dynamically and automatically generated set e.g. any time a user s query asks to see the 5 star Auto List. Other examples of Auto Lists may include for example recently created files recently edited files frequently used files Author ID creation time date edit time date file type application name etc.

One aspect relating to the content of an Auto List relates to the list s scope i.e. the set of files and or locations that will be searched to generate the Auto List . Various limits on the scope of an Auto List may be set depending for example on the environment in which the computer is located user preferences the manner in which the computer or network is used and the like. For example the scope of an Auto List may be limited to a particular machine to a particular user s files on a machine or a network of machines and or in any other desired manner without departing from aspects of this invention. As a more specific example the scope of a 5 star Auto List may be limited to a set of specific files or folders to search across such as the files or folders on a given physical computer and or files or folders created by a given user. If desired however users can set an Auto List scope or other search scope to search across everything on the computer and or the network containing the computer such as to locate all 5 star files stored on either of the user s desktop or laptop computers.

With the increasing number of files users are saving on their PCs e.g. documents music video and picture files etc. and the increasing use of networked computer systems the ability for users to select smaller search scopes e.g. for Auto Lists or other searches may become important e.g. to avoid location and display of excessive irrelevant data e.g. data from other users or other locations to avoid search delays etc. . As a more specific example a graphics designer may want to scope an Auto List search to limit its search and returned content to a hard drive portion e.g. a directory or the like that contains only Photos or optionally only a specific user s photos . This user would not necessarily want to search everything on the PC and or everything on the network to which the PC may be connected. Such users may not wish to see other user s files that also may meet the search parameters set for the Auto List. 

Accordingly in systems and methods in accordance with at least some examples of this invention users may select and define sub item domains as part of search scopes. A sub item domain is a set of folders defining a smaller scope for the computer system to search across. This sub item domain may include a set of folders and or sub folders where users store their data items marked with certain properties etc.

The content of this settable sub item domain need not be limited to a single folder or even a single common branch of the folder hierarchy. Rather if desired in accordance with at least some examples of systems and methods in accordance with this invention a user may set a search scope such as an Auto List generation search scope to consider files located in multiple folders optionally in multiple branches of the network or computer memory. illustrates the example individual computer or network of but in this example the search sub item domain is set to search through data included only in folders available from two independent users as represented by sub item domain triangles and photo data from Users B and C in the illustrated example of . Again using this sub item domain scope the results of the Auto List or other searching activities may be much more relevant because the searching is more targeted to only the desired users data in this example and performance speed may be increased because the set of items to inspect is smaller.

Additional aspects of the present invention further extend from the aspects described above. In at least some example systems and methods in accordance with this invention multiple folders and or properties may be selected by users as the scope for searches and or displays of information stored on the computer. Such systems and methods may utilize navigation panels that display properties and or folders in a hierarchical manner as described above for example in conjunction with .

In conventional and currently available folder trees that display folders of items stored on a computer users cannot select more than one folder at a time. If a user wants to view the contents of multiple folders he or she has to open multiple windows e.g. one for each folder desired and or consecutively open and inspect the desired folders. Therefore the user cannot view all information from multiple folders in a common screen making it difficult to get an accurate overview of the available information stored on the computer system or network.

The availability of lists and Auto Lists further exacerbates this problem. As noted above lists and Auto Lists may comprise sets of property values that help define or categorize files and or other items stored on the computer system or network. Often users would like to further narrow down information presented via a list or Auto List procedure i.e. the relevant files identified as meeting a search criteria based on the requirement that the displayed information include multiple properties associated with it. For example users may wish to see all stored pictures from a specific trip locale that also include a specific person e.g. spouse . Without the ability to use multiple property selection techniques users may not be able to easily find the sub set of files that meet these two independent property criteria.

Aspects of this invention relate to systems and methods that allow for conducting searches interpreting search results and or displaying search results when multiple properties are selected as part of the search criteria e.g. from a hierarchical listing of properties provided in a navigation panel or otherwise made available to a user. Such systems and methods may be used for example when navigating searching displaying and or otherwise interacting with various lists Auto Lists and or folders.

One feature relating to this aspect of the invention relates to the manner in which information or files are determined to satisfy the search which includes multiple properties and or other search parameters. More specifically in some instances users would prefer to see the combined union of all information that satisfies either feature of a multiple property search query i.e. display information that satisfied either property A OR property B and in other instances users would prefer to see the intersection of only the information that satisfies both features of a multiple property search query i.e. display information that satisfied property A AND property B . As some more specific examples when users request retrieval of information identifying all files that contain Maui pictures taken with a member of the family contained therein they expect the searching systems and methods just to retrieve those pictures that contain both a family member AND were taken in Maui. With such a query users typically do not wish to see all Maui pictures including all pictures without family members contained therein and all family pictures including pictures not from Maui . On the other hand when users request retrieval of information identifying files that are rated either three stars or four stars they expect the searching systems and methods to retrieve files with either of these ratings because at least most files would not be simultaneously rated three stars and four stars by the user .

Accordingly at least some aspects of this invention relate to algorithms that automatically determine whether users likely wish to receive set union or set intersection information based on the information or multiple search parameters selected e.g. from a navigation panel of properties and or folders e.g. arranged in a hierarchical manner. In general as will be explained in more detail below systems and methods in accordance with at least some examples of this invention will return information e.g. during a search list files or other navigation task regarding files based on a union of the multiple parameters selected a logical OR operation when the searched multiple properties lists folders items and or other parameters belong to the same property in the hierarchy. On the other hand systems and methods in accordance with at least some examples of this invention will return information e.g. during a search list files or other navigation task regarding files based on an intersection of the multiple parameters selected a logical AND operation when the searched multiple properties lists folders items and or other parameters belong to or lie across different properties. More detailed examples of operation of this algorithm are described below in connection with . Of course if desired a user may be given an option and or opportunity e.g. via an interface screen right mouse button click etc. to override the automatically selected AND or OR operation for a given search query to customize and target the results for that specific query.

Page Space Control Example systems methods and computer readable media according to aspects of the invention Multiple Property Selections Multiple Selections Within a Single Multi Value Property illustrates an example display screen that includes a navigation panel which may include a hierarchical listing of properties folders and the like the various nodes in panel in the illustrated example . Information stored under and or associated with the nodes optionally may contain information identifying individual electronic files or items of information e.g. email files music files digital photo files electronic documents audio and or video files etc. that have been associated with that node e.g. automatically by user input by another s input when the file was downloaded from another source etc. . Information identifying at least some of the files corresponding to one or more criterion specified for the search query or list files activity is displayed in this example display screen in the display panel . Using the navigation panel a user may select one or more of the hierarchical nodes representing an assigned property associated with the file and the display panel will contain information identifying files or other collections of information that satisfy the user specified property criteria.

As shown in in this example the user has indicated that they wish the system to retrieve information identifying files that include pictures showing Person A and Person D as shown by highlighting in the figure . As a more general description in this example a user has selected multiple values within a single multi value property from the hierarchy i.e. selection of the hierarchical icon representing Person A and selection of the icon representing Person D from a single property People . The People property is called a multi valued property because the files under the People property may have multiple individual property entries e.g. a given picture may contain more than one identified person and thus may have multiple People child properties associated with it . In response to this query search or list files command systems and methods according to this example of the invention retrieve any pictures that contain either Person A or Person D to be retrieved the system automatically or some person must have at some time associated the Person A or Person D properties or keywords with the various picture files e.g. as metadata as discussed above thereby indicating the person s included in the picture . Notably in this example search query systems and methods in accordance with this example of the invention automatically retrieve union information i.e. information identifying files that contain either Person A OR Person D represented by the letters A and D respectively in the names included in the icons in including any pictures that contain both Person A and Person D i.e. pictures ABD ABD ACD AD and ABD in this example . In essence systems and methods in accordance with this example of the invention performed a logical OR operation based on the input parameters specified by the user in the navigation panel .

Accordingly from this example a first rule of a selection algorithm in accordance with at least some example systems and methods according to the invention may be derived. By this rule information returned from user selection of multiple sets within a single multi value property set automatically will be returned in a unioned or logical OR query language manner. Of course if desired systems and methods in accordance with at least some examples of the invention may provide a user with the ability to override this rule and or this automatic selection action and thereby run an AND operation .

Notably in the illustrated display panel the two selected data sets are shown or are available in their entirety and maintained separate from one another i.e. one sub panel for the Person A pictures and one sub panel for the Person D pictures in this example . Notably a single list item may appear in each sub panel and or in others if appropriate i.e. the icons representing pictures ABD ABD ACD AD and ABD appear in each sub panel and in this example . Of course many other ways of displaying the retrieved information e.g. in display panel may be used without departing from the invention including for example displaying a compiled listing of files or items without an indication of the source property and or without providing repeated representations of the same file or item. As another example if desired the display portion could also include a display sub panel or the like that includes the results of the logical AND operation i.e. pictures including both Person A and Person D in this example to make this information readily available to the user in the event the logical AND operation was desired.

Page Space Control Example systems methods and computer readable media according to aspects of the invention Multiple Property Selections Multiple Selections Within a Single Value Property As described above in the example of the People property is a multi valued property meaning that an item of information e.g. a file stored under that property may have more than one of the underlying child properties associated with it . Some properties however may be considered single valued properties which means that each item of information e.g. a file stored under that property contains only a single instance of an underlying child of this property. Examples of single valued properties may include but are not limited to size rating and the like. illustrates an example display screen in which a user has selected multiple properties e.g. in a list files search query or other action from a navigation panel including a hierarchical arrangement of properties or folders etc. wherein the selected properties lie under a single valued property Rating i.e. a user typically can and or will give only one rating to a file . Notably in this example the user has requested retrieval of all pictures having a 3 or 4 star rating as evident from the highlighting in the navigation panel .

In response to this query search or list files command systems and methods according to this example of the invention retrieve any pictures rated either as 3 stars OR 4 stars to be retrieved the system automatically or some person must have at some time associated a rating property with the various files e.g. as metadata as discussed above . Notably in this example search systems and methods in accordance with this example of the invention automatically retrieve union information i.e. information identifying files rated either 3 stars OR 4 stars. In essence systems and methods in accordance with this example of the invention performed a logical OR operation based on the input parameters specified by the user in the navigation panel . In fact in this example because the Rating property is a single valued property it would not make sense to perform a logical AND operation because the AND operation would return an empty set in each instance i.e. because each file contains one and only one rating no files will be located during the search that contain both a 3 star AND a 4 star rating 

Accordingly from this example another rule of a selection algorithm in accordance with at least some example systems and methods according to the invention may be derived. By this rule information returned from user selection of multiple sets within a single valued property set automatically will be returned in a unioned manner or in a logical OR query language manner. Of course if desired systems and methods in accordance with at least some examples of this invention may provide a user with the ability to override this rule and or this automatic selection action.

Notably in the illustrated display panel the two selected data sets are shown or are available in their entirety and maintained separate from one another i.e. one sub panel for the 3 star rated pictures and one sub panel for the 4 star rated pictures in this example . Notably in this instance no single list item appears in both sub panels and or in others because each file by definition in this example contains a single rating value. Of course many other ways of displaying the retrieved information e.g. in display panel may be used without departing from the invention including for example displaying a compiled listing of files or items without an indication of the source property.

Page Space Control Example systems methods and computer readable media according to aspects of the invention Multiple Property Selections Additional Logical OR Examples As noted above the above rules may apply to items in folder structures and or in a hierarchical property structures. illustrate some additional examples when user selection is applied to hierarchical properties in a navigation panel.

As shown in the display screen of a user has selected two independent entries in a hierarchical property table present in a navigation panel namely a Cars Import German property and a Cars American property. Because the selected properties still are located under a common multi valued parent property Cars in this example the above rule applies and the display panel will display the union of the two selected properties in response to this query search or list files operation. More specifically as shown in the display panel includes information identifying all stored files corresponding to the logical OR operation i.e. information that satisfies either search criterion namely stored digital pictures corresponding to German import cars OR stored digital pictures corresponding to American cars. A logical AND operation makes less sense or is less likely in this specific factual situation because typical cars would not be considered both imports AND American an AND operation could return a hit however for example if multiple cars were included in a given picture and properties were associated with the file for both cars in the picture .

Notably in this example the two selected items i.e. properties in the hierarchical structure were not located in the same hierarchical level. Nonetheless the logical OR operation was conducted in this instance because as noted above the algorithm s rule requires the OR operation to be performed when the selected properties are located under a common parent property this common parent property however need not be an immediate parent of both or either selected node .

Notably in the illustrated display panel the two selected data sets are shown or are available in their entirety and maintained separate from one another i.e. one sub panel for the German car pictures and one sub panel for the American car pictures in this example . Again in this instance no single list item appears in both sub panels and or in others but because a single picture may include more than one automobile overlapping pictures may be possible in the sub panels and . Of course many other ways of displaying the retrieved information e.g. in display panel may be used without departing from the invention including for example displaying a compiled listing of files or items without an indication of the source property with no duplicated photo listings etc. Also if desired the results of a logical AND operation also may be displayed in display panel optionally along with the results of the logical OR operation.

As with the various display panels described above display panel makes the two selected data sets available in their entirety and maintained separate from one another i.e. one sub panel for all the car pictures and one sub panel for the UK imported car pictures in this example . In this example system and method all of the UK car pictures in sub panel also are included within the more generic Cars sub panel because all UK car pictures must fall within the Cars parent node e.g. as described above with regard to the hierarchical properties when a child property is assigned to a file that file also automatically is assigned all parent properties to the assigned child property . Of course many other ways of displaying the retrieved information e.g. in display panel may be used without departing from the invention including for example displaying a compiled listing of files or items without an indication of the source property with no overlapping photos displayed etc.

Page Space Control Example systems methods and computer readable media according to aspects of the invention Multiple Property Selections Logical AND Examples The above examples for relate to multiple user selections within a given hierarchical grouping such as a folder a hierarchical property or the like. Another rule of the example algorithm for determining what data to display in response to multiple user selections in a hierarchical folder or property structure is illustrated with respect to .

In general this rule of the algorithm requires that when the multiple user selections are made across different parent property sets the intersection of the search results will be displayed or a logical AND operation will be performed and the results displayed . In the example illustrated in the display screen shows a navigation panel in which multi value hierarchical properties are displayed. The user has selected two properties that span across two of the highest level parent property sets namely Locations Toronto and People Person D. In situations of this type users typically expect a logical AND operation to be performed such that the displayed results include only pictures taken in Toronto that also include Person D e.g. typically with a search query of this type a user would not wish to see all Toronto pictures or all pictures including Person D . Therefore as shown in display panel in this example the resulting displayed results include only those pictures from the Toronto trip that include Person D therein. Because the intersection of both selected sets is displayed there is no reason to separately show the results from each user selected set as was shown above in i.e. each item in display panel would be present in the Locations Toronto listing and in the People Person D listing although these individual selected sets also may be shown if desired e.g. to cover the possibility that the user wanted to see both individual sets .

Of course any way of displaying the search results e.g. in display panel may be used without departing from this invention. Additionally if desired users may be provided with the ability to override the automatic AND operation produced by systems and methods in accordance with this example of the invention.

Application of the logical AND operation is not limited to use with multi valued hierarchical properties. For example if one or both of the user selections in had constituted a single valued property such as one of the star Rating properties shown in the navigation panel and the other selection had been located in a different parent property set such as in the People or Locations property sets the intersection of the selected star Rating property and the selected People or Locations property would have been displayed i.e. a logical AND operation still would have been performed and the results displayed because the selections spanned across different property sets .

The algorithm s rule for applying a logical AND operation also applies when selections are made across different hierarchical properties even when these selections are located at different depths within the hierarchical structure. illustrates an example. As shown in the display screen of the user has selected the properties Keyword Cars Import and Date 2004 in the navigation panel . Because the top level parent properties differ a logical AND operation is conducted and display panel displays the intersection of these two properties i.e. it displays files having both selected properties namely pictures of Import cars from the year 2004 . This AND operation is conducted despite the fact that one of the selected nodes has a different number of parent nodes as compared to the other selected node and therefore exists at an overall different level in the hierarchy .

This same algorithm rule may apply and similar intersection results may be obtained irrespective of whether one or both of the user selected properties is a single value property or a multi valued property.

Additionally the algorithm s rule for applying a logical AND operation also applies when selections are made across different hierarchical properties even when at least one of these selections does not include a low level item in the hierarchy. illustrates an example. As shown in the display screen of the user in this example has selected the properties Rating 4 Star and People in the navigation panel no particular person under the People node was selected . Because the top level parent properties differ a logical AND operation is conducted and display panel displays the intersection of these two properties i.e. it displays information relating to files having a People property e.g. any person included therein that is rated 4 stars .

Page Space Control Example systems methods and computer readable media according to aspects of the invention Multiple Property Selections Use of Multiple Selections in Hierarchies with Folders Lists or Other Structures As noted above aspects of the use of multiple user selections in hierarchies also may be applied to hierarchies that include conventional folders e.g. performance of the OR AND functions may be determined using the rules above even if one or both user selected elements includes a folder structure . Conceptually in accordance with at least some example aspects of this invention a folder may be treated as a single valued property. More specifically because an individual file will reside only in a single conventional folder as described above a folder may be treated as a single valued property in accordance with these aspects of the invention. Optionally if desired the multiple user selections may include a mixture of selections of folder elements and property elements in the hierarchical structure. Various examples follow.

As described above user files exist in a conventional folder hierarchy at a single location i.e. a single file or other item cannot exist in two independent and separate folders at the same time . Therefore a logical OR operation makes the most sense in the situation illustrated in because a logical AND operation would return an empty set as the results.

The same OR AND logical operation selection features may be applied to list elements in a hierarchical structure in accordance with at least some examples of this invention. Lists may be conceptually considered as simply constituting sets of items such as files or the like. shows an example display screen in which various list elements are included in the hierarchical structure shown in the navigation panel . Multiple elements under the All Lists node are user selected namely the Top Issues node and the Project Y node. In the display panel the generated display provides information regarding list items that satisfied either of these search criterions namely list elements designated as being Top Issues OR list elements designated as corresponding to Project Y. Notably some of the list items may be included under the groupings for both nodes e.g. items and . While the content of these selected sets may be displayed in display panel in any desired manner in this illustrated example the displayed list elements are identified in separate and distinct sub panels as generally described above for example in . Also if desired display panel could be designed to additionally show the results from a logical AND operation to cover the possibility that this AND result was desired by the user. Also as noted above if desired the user may be given the ability to override the automatic OR operation selection.

The above described OR AND logical operation selection determination algorithms and rules also may be applied in situations in which a user selects more than two hierarchical elements e.g. three or more folders list elements properties etc. . In general in such situations a logical OR operation i.e. the union is performed with respect to any selections made under the same hierarchical parent element set and a logical AND operation i.e. the intersection is performed with respect to selections made across different hierarchical parent element sets. Optionally operations within a given hierarchical parent element set i.e. the OR operations if any may be performed first. illustrates an example of this type of operation.

Specifically as shown in the display screen of a user has selected three elements from the hierarchical navigation panel namely a Dates 2004 property a Keyword Cars Import property and a Keyword Cars American property. In response systems and methods according to at least some examples of this invention will first perform an OR operation with respect to the selected Keyword properties to locate all saved files including stored keyword properties meeting either of these criterion. Then from those identified files meeting either of the Keyword criterion a determination is made as to which files also satisfy the date criterion by applying a logical AND operation . The displayed results in display panel then will show the imported car pictures and the American Car pictures from 2004. While the content of these selected sets may be displayed in display panel in any desired manner in this illustrated example the displayed information regarding the files is provided in separate and distinct sub panels directed to the different OR selections as generally described above for example in .

The above noted rules and application of these rules in determining whether to conduct a logical OR operation or a logical AND operation to multiple user selections are advantageous because they produce predictable and logical results when users use the hierarchical properties folders lists or other structures for storing searching and retrieving information from a computer system or network. Of course if desired and as noted above users may be provided an interface to allow them to override these automatic retrieval rules at any time e.g. if the rules produce the undesired results in any individual instances. As new information is introduced into the computer system or network the above rules can continue to be applied including to the newly added information regardless of whether the new information may be incorporated into the existing hierarchy or requires new additional hierarchy. Once placed in the hierarchical structure in some manner the above OR AND logical operation selection procedures can be carried out by determining whether the various selections are located within a given property or other hierarchy element level and or whether they span across different top level parent property or other hierarchy element levels.

Page Space Control Example systems methods and computer readable media according to aspects of the invention Multiple Property Selections Computer Readable Media Additional aspects of the present invention also relate to computer readable media including computer executable instructions stored thereon for performing the various multiple property or other value selection methods and or for use in various systems that include multiple property or other value selection methods including the systems and methods described above. The computer readable media may constitute computer executable instructions stored on the various specific examples of computer readable media described above.

Page Space Control Example systems methods and computer readable media according to aspects of the invention Grouping and Stacking in the Display Panel Today in Windows based computer operating systems e.g. available from Microsoft Corporation of Redmond Wash. it is possible to organize sets of files e.g. from a search query or a list files command into groups. For example grouping by file type may be used to place all PowerPoint presentations presentation software available from Microsoft Corporation within the search domain into one grouping and or all digital pictures into another grouping. It can be difficult however for users to efficiently and effectively deal with large sets of items because they still have to locate the correct grouping to ultimately locate the file that they wish to further consider. For example if a user has a folder with 100 000 files contained in it grouping those files may help sort through things somewhat but it still may be difficult for users to locate the specific file desired e.g. particularly if keyword searches or other search techniques are not effective to narrow down the grouped files .

In application programs and or operating systems in accordance with at least some examples of this invention users may take advantage of the ability to stack as a new additional way for visually organizing files into sets. For example if systems and methods were to stack by file type users would be able to see all of their files stacked into individual sets e.g. a set for PowerPoint presentation files a set for spreadsheets a set for digital pictures etc. Each of these sets may be represented e.g. in a computer generated display by a stack icon that conceptually acts as a virtual container for that set of items. Stacking is a very useful way to help users narrow down on a set of items they care about because stacking clearly enumerates and identifies to the user the various available stack options.

Applied to a more concrete real world example stacking can be conceptually thought of as going to a car rental location and asking them to tell you what color cars are on the lot. They may advise you that they have blue and red cars available today. Conceptually this is what happens when users stack their files by a property i.e. they may obtain stacks for each unique value of that property.

This stacking feature as well as other display features may be applied for example to user interfaces like those described above in conjunction with FIGS. and . In such user interfaces systems and methods in accordance with at least some examples of this invention may show information including things such as Lists Auto Lists Folders and properties including for example user defined properties. Each Auto List may be designed to provide a way for users to view information identifying their files in various ways for example by a certain property. As a more specific example a music Auto List may be stacked for example by the performing artist and searching by this performing artist property will allow the user to see stacks identified with all the artists included in the music collection e.g. Bjork Madonna etc. One issue however with simply showing a shortcut to this Auto List is that if the computer system has music from many different artists stored on it and available in the view it still may be difficult for the user to locate the desired individual artist and or the desired individual album CD or song s .

One aspect of systems and methods in accordance with examples of this invention relates to exposing the stacking structure of the available Auto Lists as sub nodes in the navigation panel and or the display panel associated with it. As one more specific example for the Artists Auto List situation described above systems and methods in accordance with at least some examples of this invention may enable users to expand the Artists or other nodes in the navigation panel and or the display panel to thereby enable them to control and or see all the unique Artists or other nodes saved on the computer network or system.

Other aspects of this invention relate to the manner in which information relating to groups and stacks of information is processed and or manipulated e.g. in a navigation panel and or a display portion of a user interface presenting such information. More specifically aspects of the present invention will treat grouped and stacked information in the same way and allow Auto Lists that are grouped to represent hierarchy in the navigation panel. In other words if a user has a view of music files grouped by Artist in the display panel systems and methods in accordance with examples of this invention may be used to generate sub nodes for the various artists in the navigation panel. In at least some instances the sub nodes may in fact constitute another stack and therefore when users click on one of these sub nodes the set of items in the view would filter down to only those results. This gives users a quick index of the items present in the view and allows them to actually narrow down to a set of files instead of just visually or mentally organizing them.

Still another example aspect in accordance with this invention relates to the ability of users of systems and methods according to at least some examples of this invention to stack in a parent folder and flatten its folder hierarchy. For example when a user stacks by file type in a hard drive directory or other collection of data e.g. a D Data grouping systems and methods in accordance with at least some examples of this invention will search through all sub folders and take those items and place them into stacks. This gives users the ability to navigate to any folder and view its contents organized by a desired property value instead of by its folder hierarchy.

In general aspects of this invention are useful because in systems and methods according to at least some examples of this invention grouping and stacking can be used to create a dynamic organizational structure in the navigation panel and it provides the ability to select a group in the navigation panel or the display panel and narrow down the items in the view to display only that set. Still additional general aspects of the invention relate to treating grouping and stacking as sub nodes to an Auto List and the ability to select a group in the navigation panel and or the display panel and through this selection thereby further narrowing down the displayed view. More specific examples of these aspects of the invention will be described below.

As noted above grouping and stacking are two different ways to visualize a set of items. illustrates a display screen that includes a navigation panel and a display panel which illustrates information relating to various stored files or items based on input received in the navigation panel . Notably in the navigation panel indicates that the property or keyword Carnivora has been selected and the corresponding display panel shows stacks for the individual child nodes in the hierarchy at the level immediately under the Carnivora parent node. More specifically as shown in the example of the display panel includes a stack of pictures for dogs Candiae and a stack of pictures for cats Felidae . Notably in the navigation panel the child nodes under the Candiae and Felidae nodes are fully displayed down to their lowest level despite the fact that these sets are shown as stacked in the display panel .

In at least some instances stacks may not constitute the most preferable way of displaying information in the display panel . For example as shown in stacking may be undesirable at least in some instances because the user is not able to easily see any information regarding the content within the stack e.g. the user cannot see thumbnail icons or much other displayed information regarding the content of the stack as shown in . Without displaying information in the display panel in an unstacked manner users may have to drill down to the deepest levels of the hierarchy at least in some instances to finally see the pictures or other more specific information relating to specific files . This requirement can be inconvenient particularly if the hierarchy has many levels if many files are included in the hierarchy and or if the user is not certain where the desired files are located within the hierarchy.

Notably in the example shown in information relating to all of the items contained under the specific node e.g. the Candiae node is provided in the respective sub panel e.g. in sub panel irrespective of the level in the hierarchy at which that information is located e.g. irrespective of whether the specific picture is stored with the Candiae property the Canis property the Lupus property or the Latrans property associated with it . This feature allows quicker and easier user access to and recognition of the desired information. Notably this same display panel may appear as a result of other search or list files commands e.g. if the user highlighted both the Candiae and Felidae nodes in the navigation panel .

Users also can quickly navigate in the hierarchical structure of the navigation panel to see different groupings of information. An example of potential changes may be seen by a comparison of with . Notably in as described above the Carnivora property was selected by the user in the navigation panel which provided a display of information stored with that property grouped based on the child nodes of the selected property i.e. grouped based on the Candiae and Felidae child nodes in this example . In the display screen of the user has changed the highlighted selection in the navigation panel to the more specific Panthera property a grandchild node under the Carnivora property . As shown in this change causes the display panel to provide groupings for the children under the Panthera property node namely groups of pictures labeled with the Leo and Tigris properties see sub panels and respectively . As evident from the navigation panels and and the display panels and along with the hierarchical properties used in conjunction with these panels allow users to store search and navigate their stored data in a meaningful way and get useful thumbnail or other preview information of the available data throughout the hierarchy. Notably the content and user input in the navigation panels drive the content provided in the display panels although user input also may be allowed through the display panels if desired.

A comparison of the display screens and of respectively illustrate additional features that may be present in accordance with at least some examples of this invention. When changing between various different auto lists in the navigation panel e.g. from Keyword Mammalia Carnivora Felidae Panthera in to Date Taken in the hierarchical structure in the navigation panel does not collapse but rather it remains as the user left it e.g. in the illustrated example the full hierarchy for the Mammalia property and its children remains exposed . In general in accordance with at least some examples of the invention the navigation panel does not reflect or change to reflect what is shown in the display panel e.g. in sub panels and but rather the navigation panel drives what is being presented in the display panel .

This non collapsing feature of the navigation panel may be useful for various reasons. For example in general users expect this hierarchy to remain exposed in this manner e.g. from their interactions with conventional electronic file and or folder systems. As another example keeping the hierarchy open expanded and available in this manner e.g. until closed by the user can be more convenient e.g. if the user decides to return to the hierarchy for example for additional searching navigation or previewing purposes for property assignment to file purposes and the like. Moreover by leaving the navigation panel in an unchanged state as the user navigates and potentially manually changes it the past locations visited by the user will remain readily available so that they can quickly return to where they have been if desired.

If desired in accordance with at least some examples of this invention combinations of grouping and stacking may be used in the display panel. An example of this combined use of grouping and stacking may be seen for example in the display panel of the user interface display screen shown in . More specifically illustrates a display screen having a navigation panel including information relating to a collection of stored digital music wherein at least some of the information relating to the stored music includes hierarchical properties. In this example display the user has highlighted an auto list entitled SuperMusicView in which the contained music data has been stored with properties including various different genre of music e.g. one child node for Classical music one for Jazz one for Pop one for Rap etc. . Of course any number of genres may be included in the hierarchical structure without departing from the invention.

By selecting the parent SuperMusicView node the systems and methods in accordance with this example of the invention display information in the display panel relating to stored music on the system grouped by the various genres e.g. sub panels and for the genres Classical Jazz and Pop respectively . Within each individual genre grouping in this example the information is stacked e.g. by the decades in which the albums or musical selections were released. If desired a user can further drill down into the hierarchical structure e.g. in the display panel or the navigation panel to see more detailed information relating to the information stored within the stacks e.g. individual CD or album titles in this illustrated example information stacked by performing groups or artists with the stack including individual albums etc. . Further drilling into the individual CD or album titles may be used if desired in at least some examples of systems and methods of the invention to display information regarding the titles of the individual songs or tracks included on the album or CD. Of course any number of stacks groupings and or any desired types of information may be included in the hierarchical property structures without departing from this invention.

Notably in the example navigation panel and display panel shown in at least some portion of the hierarchy of the Auto List is shown in the navigation panel regardless of whether grouping or stacking appears in the display panel . In fact in this example structure the display panel includes both grouped information and stacked information. In general grouped information is present as a transparent container meaning that the content in the grouping is readily available and visible to the user in the view. Information contained in stacks on the other hand may be considered as being in an opaque container meaning that at least some of the individual content may be hidden from the user due to the stacking display but the hidden content may be displayed or made available if desired by further highlighting or drilling down into the individual stacks via the navigation panel and or the display panel .

As with any of the windows display panels sub panels and the like contained in systems and methods in accordance with examples of this invention when the available information more than fills the available display area user access to undisplayed information may be gained in any desired manner for example through the use of scroll bars as shown in display panel through next page previous page buttons or icons and or in any other desired manner.

The hierarchical properties and other elements navigation panels and displays of groups and or stacks of information in accordance with examples of this invention may be used in combination with conventional folder structures without departing from this invention. In general stacking folders e.g. in a display panel is not useful to users because individual folders within a hierarchical structure may have vastly different and independent subjects and because users that organize information in folders often do not store many files on any given level of their folder hierarchy. Therefore in accordance with at least some examples of this invention stacking in a folder will flatten the folder hierarchy and re organize the items contained within the folder into sets based on that property. illustrates a display screen that includes a navigation panel with a folder hierarchical structure contained therein. When the Vacation folder is selected by the user in the navigation panel the display panel displays the underlying folder structure i.e. the Lunar Eclipse and Aurora folders under the Vacation folder in this example as well as the individual files contained within those folders thereby flattening out the folder structure to make the underlying information readily visible and available to users . This may be accomplished for example by creating an Auto List element or node scoped to look at the selected folder and all of its sub folders.

Of course other ways of presenting information from the folders in the display panel are possible without departing from this invention. For example if desired rather than flattening the hierarchical structure shown in the folder structure may be maintained in the display panel particularly in the situation where the highlighted folder itself includes several levels of hierarchy. For example if desired when a folder is selected in the navigation panel the information may be displayed in the display panel by removing the individual items from the sub folders and showing these items in stacks named after the sub folders. Of course other display techniques are possible without departing from this invention.

Various manipulations also may occur to data once highlighted or selected in a navigation panel and or information relating thereto is displayed in a display panel. illustrates an example display screen that may be used and or appear in accordance with at least some examples of this invention. In this example the user interface display screen includes a navigation panel in which a hierarchical folder structure appears and a display panel . Because of a deeper hierarchy in the folder structure in this example when a folder is highlighted e.g. the Vacations folder in this example in the navigation panel the information in the display panel is removed from the underlying sub folder structure i.e. the folders under the Vacations folder and placed in individual stacks. If the user then were to re organize the information e.g. by clicking on the Location icon or other property icon in the navigation panel selecting a property from a right click or drop down menu etc. the data could reorganize and stack by locations as shown in . Because this revised stacking of the data in stacked by Vacations and Location does not correspond to the contents of the Vacations folder in the manner provided in that folder no highlighting is shown in the navigation panel in . In effect this action is akin to a flattening out of all information contained in the selected folder i.e. the Vacations folder in this example and then a reorganization of this information into stacks based on the children properties contained under a selected property.

Of course many options for grouping and or stacking in response to user commands e.g. in a navigation panel of the type described above and other system actions in response to user commands may be provided in systems and methods without departing from this invention. The following includes at least some additional examples of options that may be included in at least some examples of this invention.

As one example when grouping or stacking by a property that is multi valued systems and methods in accordance with at least some examples of this invention may provide one group or stack for each top level value under the property and further children property values may not be exposed in the display panel although if desired the underlying information in those lower children property values may be displayed and or made available for display . In such systems if desired the user can expose the children property values by navigating into the various hierarchical level groups e.g. using the hierarchical navigation panel drilling down into stacks provided in the display panel etc.

If desired in accordance with at least some examples of this invention no way need be provided to view all keywords grouped or stacked as a flat list and the information highlighted in the navigation panel will control what is displayed in the display panel. If desired systems and methods according to at least some examples of this invention may allow users to unstack at any level e.g. by providing a menu item e.g. a button a right click menu a tool bar menu etc. that allows the user to expand all stacks expand this stack and or the like.

Other actions also may occur while information is grouped and or stacked e.g. operations relating to the hierarchical properties contained in the groups and or stacks. One example relates to dragging and or dropping operations. In at least some examples of this invention when dragging an item from one group to another group the item may be changed to have the property value s of the newly applied group and or stack applied to it i.e. changed to also include the property value s of the destination groups and or stacks from the drag and or drop operation and optionally at least to remove the property value s of the original source groups and or stacks if necessary and desired . Another example operation relates to paste operations. When an item is placed in a new group and or stack by a paste operation the destination property and its parent property value s may be applied to the newly placed item.

Also many different types of displays or display contents may be provided in response to navigating into a group and or a stack. As described above however in accordance with at least some examples of this invention all items with the group title property value may be shown in an initial display as well as all items tagged with children property values of this group parent property value if any . If desired an indicator of some type may be provided in the navigation panel and or the display panel to indicate that the item in the hierarchy can be further expanded to display children property values e.g. a sign is used with the icons or widgets in several of the illustrated examples shown in the figures of this specification . This same convention may be used in filtering menus without departing from this invention. illustrates an example display screen in which an example menu has been pulled up e.g. via a right click action or in any other appropriate manner that will allow further user filtering of information contained in the display panel of the display screen . More specifically in this example by clicking on the desired menu items to be used for the filtering changes in the information present on the display panel may be made. In this example a caret structure at the far right side of each menu item is used to indicate that further lower hierarchical levels are available for filtering if desired.

Additional aspects of the present invention also relate to computer readable media including computer executable instructions stored thereon for performing the various grouping and or stacking methods and or for use in various systems that display information such as properties folders lists and the like in grouped and or stacked manners including the systems and methods described above. The computer readable media may constitute computer executable instructions stored on the various specific examples of computer readable media described above.

 Multiple Roots in Page Space Control Because known navigation systems only incorporate a single root node a navigation tree restricts the organization of a user s folders and other structures to a single representation. Such a restriction may pose substantial obstacles to efficiently viewing and navigating folders of comparable relevancy. In one example a user may have limited space on each of his or her storage drives and is therefore forced to store his or her photographs on two separate drives. In known single root solutions the user is forced to access both storage areas by expanding the navigation tree significantly at two different storage points. Such a method of navigation hinders viewing both sets of photographs simultaneously. Thus according to aspects of the invention an application or user may establish multiple roots in the page space control e.g. a navigation panel described above.

Each root node and descendent page nodes may further comprise an expansion control widget an identifying icon and identification text . Generally identification text conveys the general category or description of the pages or files stored therein. For example root node may be labeled with Lyon s Doc Folder to identify the contents of that page as documents belonging to user Lyon. An identifying icon may be positioned adjacent to the identification text to allow a user to graphically differentiate between one or more root nodes or page nodes . For instance a user may create a unique icon to mark his or her ownership of certain pages or to indicate a type of files stored at the represented location. Similarly users may use different icons to represent different types of pages i.e. folders lists autolists . To access a page node and view its contents a user may either double click the identification text or toggle the expansion control widget associated with the particular node. By using either of these methods the user may expand the parent page node thereby revealing its descendant nodes. The absence of an expansion control widget may signal that the page node has no descendants and thus cannot be expanded. If an expansion control widget does exist the control widget may change to the corresponding page node s current state i.e. expanded or collapsed . For example the expansion control widget may comprise a clear arrowhead pointing away from the identifying text when the page node is collapsed i.e. hiding its descendant nodes . Conversely if the page node is in an expanded state the expansion control widget may comprise a darkened arrowhead pointing toward the displayed descendants of that page node. The expansion control widget may be implemented in numerous ways and using a variety of symbols colors and or animations such as and as is known in the art.

Upon receiving a user request for the creation of a new root node the navigation pane may identify the page type acquire the page s physical location determine the page s descendants and create a root node comprising a pointer to the page s physical location and an expandable collapsible list of descendants. In contrast to a simple pointer or shortcut a root node is a dynamic tool that permits a user to not only view a corresponding page by selecting the node but also to view or hide i.e. expand or collapse an associated list of descendants. For example if a user wants to make the folder Louie s Documents a root node in the navigation pane the navigation pane will identify that it is a folder page type. Subsequently the navigation pane will create a node structure in the pane with the name Louie s Documents pointing to the physical or virtual location of Louie s Documents. When a root node represents a static or dynamic list the root node may store information identifying a location of the definition of the list to which it refers. Additional pages root nodes may be similarly added to the navigation pane . In one embodiment of the present invention the list of root nodes is stored in a registry that may comprise data and settings corresponding to system options hardware and the like. Storage in a medium such as a registry allows a custom list of root nodes in a navigation pane to persist from browsing session to browsing session. Those of ordinary skill in the art will appreciate that the list of nodes may be stored using an array of other methods and in a variety of other mediums.

The user may remove a preexisting root node from the navigation pane by using a remove option available in a context menu. In one embodiment of the invention the user may access the context menu of a particular root node by selecting and or right clicking i.e. using a mouse on root node . Once the user selects the remove option from the context menu the navigation pane removes the selected root node and its associated list of descendants .

Referring to a user may further adjust the ordering of the root nodes by selecting and dragging root nodes to their preferred locations in navigation pane . The user may similarly reorder sibling nodes having a common parent. The destination location may be identified by a position indicator to ensure accurate relocation of root nodes. For example a user may reorganize Lyon s Doc Folder by dragging Work page to the location identified by position indicator . Alternatively a user may drag an existing page on the navigation pane to a desktop. By doing so the user may create a shortcut on the desktop to the selected page without removing the page node from the navigation pane . In such an instance the navigation pane may create a copy of the node pointer and place that copy on the desktop. Yet another alternative not shown permits a user to pin a parent and child node so that they appear on the same hierarchical level. For instance a user may pin Lyon s Doc Folder and child folder Work . By pinning the parent and child folder Lyon s Doc Folder and Work appear on the same hierarchical level in the navigation pane without actually modifying the underlying structure. Such a feature allows a user to temporarily modify the hierarchical view of the navigation pane without making permanent changes.

A user may also add remove rename and or reorder root nodes using a configuration dialog similar to that illustrated in according to an illustrative embodiment of the invention. The configuration dialog may comprise a displayed pages pane an available pages pane an add button a remove button reordering buttons a reset button a rename button and a set as homepage option . The configuration dialog permits users to view a list of available pages in one pane while modifying the contents of the navigation pane in the displayed pages pane . The available pages pane displays a list of selectable pages that correspond to a selected location. A user may change the selected location by using a drop down menu . Once the user has a list of available pages the user may then select an available page and choose add option to create a new root node corresponding to the selected page. Displayed pages pane may automatically update its contents to reflect the addition of new root nodes. In other words upon detection of a change the configuration dialog may refresh panes to reflect the most current information.

If the user wants to remove a current root node the user may select the root node in the displayed pages pane and choose the remove option . Upon removing the root node the navigation pane disassociates the node with the corresponding page and removes the node from the pane. Other options permit the user to rename a current root node or set a root node as the home page. A user may reorder a root node in the displayed pages pane by selecting a node and adjusting its relative position using arrow buttons . Should the user make a mistake in adding removing reordering or renaming one or more root nodes the user has the reset option to reset the changes he or she made to the navigation pane. Selecting reset button may revert any changes made by the user since the window was last opened or may revert to a default state undoing any changes the user has made.

In addition a user may change the substance and appearance of the identification text of the page node and the underlying page. This may be accomplished by editing the text within the navigation pane or alternatively through the property dialog . The property dialog may comprise options for adjusting font font size style italics bold smallcaps etc. and color. For example a user may increase the font size and alter the font color of a page of particular significance or importance and its representative node. Such features may allow a user to identify to others that the page is of high importance or relevance.

A further option of the page property configuration dialog may allow a user to hide a page node in the navigation pane so that the page node is not visible when viewing the navigation pane. In one embodiment of the invention when a page node is hidden its descendant nodes may be elevated to root node status in the navigation pane. Thus a hide option permits a user to create several root nodes simultaneously. A navigation pane comprising a hidden page node is illustrated in . Group comprises descendant page nodes of the hidden Autolist root node while the Folders page node not related to the hidden node is also visible. Hiding a particular root node may also be advantageous when a user is working extensively with the pages dependent on the hidden root node. By hiding the node a user is not required to continuously expand and collapse the root node to interact with the children nodes.

 Multi Valued Properties Further to the discussion above with respect to additional aspects of the present invention may provide a system and method for user modification of properties or metadata . In one aspect a shell browser is provided which includes a display of file properties that may include multi value properties. The user may edit the multi value property and the system may intelligently assist the user in editing the multi value property. The system may tokenize the multi value property values and may provide persistent prompt text within a multi value property field as a reminder to the user of the field s options.

The system may display aggregated property values and may incorporate visual differences to associate aggregated values with the files to which they apply. Editing of the aggregated values is possible and when editing aggregated multi value properties the system may intelligently assist the user in selecting or avoiding entries based on a variety of factors such as the entries already in use and the context in which the property values are used. When aggregating multi value properties for multiple selected files the system may also take steps to help preserve the order in which particular values appeared in the various files. Values that tended to appear more often in the beginning of a file s multi value property will tend to appear towards the beginning of the corresponding aggregated multi value property.

In step a check may be made to determine whether a new association is to be created for one or more previewers. An association may be any criteria and or request governing the times and types of previewers that are to be used. An association may be created to define the types of previewer s to be used for a given user identity or if a particular user wishes to disable previews altogether and or for certain predefined situations based on system conditions e.g. available resources memory current applications running number of previews generated or to be generated available power time of day status of other applications etc. and file type e.g. a user may prefer to use one type of previewer for home videos and a different previewer for compressed songs such that the default previewer used by the system may be user defined. A user may indicate that certain file types are only to have basic non interactive previews or the system can automatically disable a preview if it experiences a predefined number of failures crashes or hangs. An application may be associated with one or more previewers so that previews opened from the application or previews of files created by the application may always be previewed using the same previewer. These associations can be hierarchical in nature such that multiple previews are ranked in order of preference. The step of requesting a new association may occur at startup upon installation of an application upon execution of a predetermined application and or by user request.

If a request to create a new association is received then the association is created in step . The act of creating an association may be accomplished by querying the user for the specific criteria to be met when certain previewers are to be used or retrieving such criteria information automatically from an application and or the system itself. When created an actual association can take the form of data stored in the computer system s memory associating the previewer s with any of the criteria identified above.

In step a check may be made to determine whether a previewer needs to be opened. There are a number of events that can trigger the opening of a previewer. For example when a user opens a shell browser on the system and begins perusing files and or folders the browser may initiate a previewer to display a preview of one or more selected files or default files when none is selected . Alternatively a previewer may be triggered at the request of any other application. A previewer may also be triggered by the creation of common file dialogs that are shared by multiple applications. Common file dialog previews are discussed further below.

If a previewer is to be opened the system may receive the selection or selections that are to be previewed in step . This may involve receiving identifications of the file or files that are to be previewed. Such selections may be made by the user such as by the selection of one or more files by moving a mouse pointer to a listed file and pressing the left mouse button or clicking and dragging a selection box around multiple file listings. Alternatively selections may be made automatically. For example certain applications may default to a predetermined file and may automatically select that file for previewing upon first opening. A word processing program such as MICROSOFT WORD may default to a previewer that includes text editing features. The system may automatically select files for previewing as a result of conducting a search. A user might enter search criteria such as a keyword and the system or application may automatically select one of the search results for previewing. For example a user might type in peanut as a keyword in a system search tool and the resulting listing of files containing peanut may display with a preview of the first listed file.

Once the file s to be previewed are selected the system then selects and generates the appropriate preview in step . Selecting an appropriate preview may be based on one or more associations that have been created e.g. a user has selected a particular previewer for previewing all files of a certain type or for previewing certain files and may also be based on the system resources that are available or consumed . Alternatively the user may be requested to identify which previewer should be used for the current preview by for example selecting from a presented list of predetermined previewers that may be appropriate for the selection to be previewed.

In some situations it may be desirable to generate an initial basic preview that can be viewed while a richer interactive preview is being initiated. For example if a rich preview of a text document would require a few seconds to load and generate the user may be presented in the interim with a more basic preview that can be generated sooner. The more basic preview may have some or none of the interactive functionality offered in the rich preview and can at least get the user started in previewing the selection s .

Selecting a preview may include a prestored sequence of previewers that can be used. For example a particular application or view may have a hierarchical sequence of available previewers such as a full rich previewer a reduced feature previewer a basic thumbnail preview which need not be interactive and a basic icon similar to the desktop icons currently used in MICROSOFT WINDOWS operating systems. When a previewer is to be opened the system may start with one previewer such as the full rich previewer and fall back through the sequence of previewers to find the most appropriate one. For example the full rich preview might be the default for a particular view with a previewer that offers paging zoom and text editing capabilities that allow the user to modify the document from the preview and if there are insufficient system resources e.g. due to memory limitations other applications other previewers etc. to adequately offer that preview the system may check the next previewer e.g. a less featured one on the list. The next previewer may be slightly less featured for example by only offering the ability to navigate through e.g. paging and zooming the document but without the ability to edit. Such a previewer may require less system resources to run and may be preferred if resources are not available. If there still are insufficient resources to offer that second previewer the system can check the next previewer e.g. a basic thumbnail view with little or no interactivity and so on until a suitable previewer is found given the available resources.

When the preview is generated the preview may be initiated as a separate and distinct process from the application requesting the preview. For example if a previewer is provided in a system shell browser the previewer may be executed as an independent process from the shell browser. With the preview as a separate process the shell browser might not ever find itself in a position of having to wait for a response from the preview application thereby avoiding a crash or hang if the previewer encounters difficulty. Such difficulty can come from a variety of sources. The selected file might have corrupt data such that the preview application cannot process it the preview application itself might have an error or bug preventing its smooth operation the file may be mislabeled or misidentified such that the wrong preview application is chosen e.g. the file may indicate that it is an audio file when actually it is a text file or the system resources may encounter a problem such as a bad memory sector. Having the previewer as a distinct process provides a degree of crash hang resistance. If the previewer encounters an error crashes or hangs the problem will be confined to the preview panel itself and the shell browser will continue to function. In some instances the system may keep track of the number of times that a particular preview application encounters difficult crashes and or hangs and if a predetermined number is exceeded e.g. 3 then the system may take steps to reduce the frequency with which that particular previewer is used. For example the system may lower the priority of that previewer or create an association that calls for a different previewer.

In step a check may be made to determine whether the user has interacted with any displayed preview. Interaction can take any form of known computer interaction. For example an interaction may be a mouse click within the preview panel. An interaction may be a selection of one or more graphical interface elements in the preview panel such as paging buttons cursor arrows or the like. Interaction may take the form of keyboard keys such as cursor movement keys to move a cursor within a preview of a text document.

If an interaction occurs the appropriate processing will occur in step . Processing an interaction may take the form of any response to a user input. For example the processing may begin an editing process in response to a user clicking a mouse or other pointer within the preview panel. The editing process may allow the user to view and or edit the previewed file directly from the preview panel without requiring the user to leave the view having the preview panel.

In step a check is made to determine whether the preview panel has been resized. The panel may be resized for example by the user entering commands and or by clicking and dragging a boundary or resizing tool of the preview panel. If the panel is resized the new resized panel is displayed in step . If desired the resized panel may be configured to automatically retain the same aspect ratio found in the original panel. Some file types may be configured such as through association to always have the same aspect ratio e.g. videos may always be 4 3 . If properties or metadata were displayed accompanying the preview then the properties and or metadata display area may also be resized to correspond to the new preview panel size. For example the properties or metadata display area may be configured to always have the same height or width as the preview panel. Conversely the previewer may be resized in response to a resizing of the properties metadata display area. If desired the new size may be stored in the system as the new default size associated with the particular file type current view application and or user and used the next time a preview is needed.

In step a check may be made to see whether the new size of the preview panel has passed one or more predetermined thresholds for the preview. As noted above previewers may have one or more criteria for their use. One such criterion may relate to the amount of display area available to the previewer. For example different levels of interactivity and or functionality may be offered for different sizes of preview. Using a word processor such as MICROSOFT WORD as an example a larger preview may offer more detailed functionality such as navigating paging and zooming in the document changing font size or editing text using a cursor in the preview while a smaller preview of the MICROSOFT WORD document might still include the navigation and zooming features but omit the cursor text editing if the display is too small to reasonably use a cursor to edit the text. A previewer may have one or more threshold sizes associated with it which may be created during association stored in the computer system s memory and which may identify a replacement previewer for use when the threshold is met or passed. For example the previewer might require a minimum of 256 pixels of width to implement certain features while other features might only be included if there are 512 pixels.

If the new size passes a threshold such as a minimum or maximum threshold a replacement preview may be selected and generated in step . The generation of a replacement preview may be identical to the generation of the preview in step . So for example if a preview panel has been reduced in size beyond a certain minimum size a replacement previewer may be used that offers a smaller subset of those interactive features that can still be used at the smaller size. Alternatively if the preview panel has been enlarged beyond a certain maximum size a replacement previewer may be used that offers more features that can be useful given the larger size such as a previewer that has more user interface controls or allows detailed edits within the preview.

In step a check is made to determine whether a displayed property or piece of metadata is to be edited. Such data may be edited by for example clicking a mouse or pointer on a piece of displayed metadata and entering a value using a text entry or menu user interface. In step the appropriate steps are taken to edit the particular property. The actual steps may depend on the type of data being edited. A date field may bring up a calendar user interface element allowing a user to view and select a date and or time value for entry. Other types of data may be entered through a text entry box and other types may be selected from a menu such as a pull down menu.

In step a check is made to determine whether the system is awaiting the loading of a rich previewer. As noted above a more basic or generic preview may be provided while a rich preview is being initialized on the system. If the system is awaiting a rich previewer in step a check is made to determine whether the rich previewer is ready. If it is then the system will replace the existing preview with the rich preview in step . Step may also include a query to the user to determine whether the rich previewer is still desired. Although this step shows two previewers more than two may also be used. For example the system may display an icon while waiting for a thumbnail preview and then display the thumbnail while waiting for a rich preview etc.

In step a check is made to determine whether a previewer is to be closed and if so the previewer is closed in step . Then the process returns to step to begin again. Of course the process shown in is merely an example showing a way of arranging a number of steps and any of the steps may be reordered repeated removed or modified as desired to implement or remove any feature described herein.

Interactive preview panel may for example display one or more pages of text appearing in selected item when item is a file containing textual data such as a MICROSOFT WORD file or other word processing program. The interactive preview may allow the user to edit and or manipulate the displayed text directly in the preview panel. For example the user may be permitted to click a mouse pointer within the interactive preview to cause a cursor to appear in the panel and the user may manipulate the cursor or enter keyboard inputs to add delete and or otherwise modify the displayed text. Other types of controls such as paging controls font format controls scrolling controls file management controls input output controls and the like may also appear in the preview panel .

Different types of data files may have different types of interactive previews. For example the interactive preview for an audio file might include controls to control the play of an audio preview of the selected audio file on one or more speakers such as speakers of the computer system. A preview of a .wav file or .mp3 file may include such audio commands. There may be controls to play pause or cue the playing of the audio file. Some previews such as previews of pictures may include zooming panning controls to allow the manipulation of a displayed image. Video previews may have controls to play pause or cue the playing of a video on a display and audio on a speaker of the computer system.

The interactive preview may also be displayed in conjunction with a plurality of properties including metadata shown in as having labels and corresponding values . Any type of file property may be displayed with a label. Example properties may include file size folder location file name project name edit create date application type etc. The various labels and properties that appear may be customized according to the type of file chosen so that different sets of properties may appear for different types of files depending on what is appropriate for the selected file s type. For example a selected audio file containing a song may have properties for album name artist name of song and release date while a selected spreadsheet file might replace those properties with different properties such as group name project name project leader and project start date. The determination of which properties are to be displayed may be automatically configured or alternatively the user may be given the option of selecting and or deselecting properties to appear in the properties area for a particular file type. Properties may be prioritized by type e.g. an album name property type may be more important to a song file than an image file to facilitate in this display.

Other variations on the displayed information are also possible. For example some labels such as file name and file type may be considered optional or may be omitted from the display altogether. One example from may be the file name and file type which is already displayed elsewhere on the screen and would be redundant if displayed again in the properties area by the previewer. The space available for such non displayed labels might be used to display additional property information. Properties having no value may be omitted by default or may be flagged to appear despite being empty. As another variation some properties may be provided with different amounts of space to accommodate more lengthy properties.

The properties may be editable from the property display area. For example a user may simply click on or hover over a displayed property value and begin a process of entering editing data. The interface for entering editing the data may be dependent on the particular property or type involved. Some properties such as dates may have a calendar display and or pull down menu to select a value. For example the user can simply move a mouse pointer over a date field and a display of a calendar can appear to help the user enter a date by choosing from the calendar. Pull down menus or lists of possibilities may be displayed to simplify entry. For example by clicking a mouse pointer on a month field the system may display a list of months from which the user can choose to fill in the field. A simple textbox may be displayed with a cursor to allow the user to directly type in and or edit the property value form the preview display without requiring a separate dialog box for the data. The textbox may be a fill in the blank box in which the user can type using a cursor and keyboard. Any other form of data entry may be used. To help the user identify properties that may be edited those properties may be visually differentiated or accentuated in some fashion in the display. For example a different color e.g. yellow font e.g. bolded letters or ALL CAPS font appearance and or symbol may be used to indicate values that are editable by the user and values that are not. Highlighting can also be used to differentiate or accentuate certain fields. For example editable fields may have a certain color e.g. canary yellow in and or surrounding them similar to the effect created when a yellow highlighter is used on a printed document.

Some file types may have more properties than what will fit in a given preview display. In some embodiments there may be an option such as an ALL button that may allow a user to view all properties for a given file or at least view additional properties.

As noted above in step the user may be given the option of resizing the preview and or properties display used in the browser . For example a resizing tool may be used in the preview panel and by selecting and moving the tool the user can cause the browser to automatically adjust the display area occupied by the previewer and or properties area.

As noted above a change in the size of the preview may in some instances cause a change in the type of preview offered such that different sizes of preview panels result in different types of interactive preview. So preview may differ from preview in terms of the level of interactivity and or the types of features provided. As one example certain graphic editing features might not make sense if the preview is less than 256 pixels in width. The same type of resizing can occur if the user resizes the area used to display properties. For example the user could click and drag a mouse pointer on a border of the properties area and resize it and cause the preview area to change sizes to match the new properties area size.

In addition to resizing the preview panel and or properties display area these elements may be rearranged either automatically or by user request. For example the user may wish to move e.g. by selecting a preference by clicking and dragging the preview or some other user input the preview to have a different orientation and appearance. A different orientation may be preferable when certain types of files are previewed. For example previews of photographs taken in the landscape format or of video images may be more suitable to an orientation that is wider than it is tall e.g. landscape while other types of files e.g. text documents or portrait images may be more suitable in an orientation that is taller than it is wide. The selection between the formats can also be done automatically for example based on file type. The system may for example as part of the preview selection in step or association in step automatically examine the file type properties and or metadata to determine which preview orientation would be most appropriate for the selection to be previewed.

To facilitate the rearranging and the crash hang resistance noted above for the preview panel the preview panel and properties metadata area may be implemented as separate software modules. Each module may be executed as a distinct process on the system s processing unit s . Alternatively the preview and property metadata panels need not be implemented as distinct software or software modules in the system and may instead be implemented as a common module. The level of integration may be a design choice based on the level of extensibility desired software memory footprint and other factors.

As previously mentioned the preview panel may be incorporated into a computer system s common file dialogs. Common file dialogs may be user interface elements and or programs offered by the computer system to be shared by the various applications executed on the system. For example an operating system might offer a common Open File or Save File dialog that may be used by any application wishing to create a file on the system. Including a previewer in such common file dialogs allows multiple different types of applications to benefit from having previews and allows applications to effectively provide rich interactive previews of files that are not natively supported without requiring the application developers to develop their own previewer. Incorporating a previewer in the common file dialog also provides a consistent interface across multiple applications where user preferences and associations may be consistently used across the various applications. Furthermore offering the previewer in the common file dialog may allow an application to effectively provide a rich interactive preview of a diversity of file types even file types that the application does not natively support. For example a spreadsheet application may have installed its own rich interactive previewer to handle previews of data intensive spreadsheets. A separate word processing application which might not have any capability for editing the spreadsheet application s data files may nevertheless offer such a preview by using the common file dialog. shows an example of a previewer that is part of an Open File common dialog. These common file dialogs with their previews may be extensibly offered to other applications through certain APIs.

In some instances a user may wish to select multiple files at once or have multiple files actively selected at the same time. In those instances the previewer may operate as described above providing separate previews for each selected file. Alternatively the system may alter its behavior. For example if in step the system determines that multiple files are selected the step of generating a preview may involve a process of determining which selected file will be previewed and which ones will not. This determination may be made based on a variety of criteria e.g. first selection last selection newest selection largest selection simplest preview user previewer preference etc. such as the associations and preferences discussed above.

The system may also take steps to generate simultaneous previews corresponding to the multiple selections. As depicted in multiple preview panels may be given a stacked appearance to illustrate the multiple selections being previewed. A primary preview may appear on top and may have all of the same rich interactivity described above with other previews. Additional previews and for the other selections may appear stacked behind the primary preview and may have horizontal offset X and vertical offset Y. The offsets may be constant to present a uniform appearance. Alternatively the offsets for each successive preview may become smaller as more previews are placed in the background. There may be a predetermined maximum number of stacked previews beyond which a different appearance may be used. For example if the predetermined maximum number of previews is set to 6 can be set by the system or by the user and if more than 6 files are selected the stacked previews may have a different appearance as shown in . There the previews and beyond the first six 6 are shown as being stacked with smaller offsets. These additional previews may be rendered as simply blank previews with a predetermined pattern and or with a degree of transparency or opacity to indicate to the user that there are more selected files that are not previewed.

Alternative displays of multiple previews may also be used. For example a rotating 3 D carousel of previews such as that shown in may be used. The six sided carousel may display six separate previews on its different faces shown from back shown from back shown from back and . User interface elements may be provided to allow manual navigation through the carousel such as rotation or zoom or carousel may be rotated automatically or not at all . Other approaches include displaying multiple previews in a fanned out display displaying multiple previews resizing if desired side by side displaying them in a 3 D isometric view of a stack resembling a stack of papers and displaying them sequentially with automatic or manual navigation.

The preview of multiple selected files e.g. selected by clicking a mouse cursor on multiple files holding the SHIFT or CTRL keys and clicking or clicking and dragging a selection area around multiple files can also vary depending on the type of files chosen and different preview sequences may be used for different combinations of selected files. For example the system e.g. via the operating system hardware an application etc. may use a stacked presentation when multiple image files are selected and use a sequential video preview when multiple video files are selected. The system may also scale back or simplify the previews offered when multiple files are selected in order to conserve resources.

The various features above may be implemented as a single integrated piece of code or as a collection of subroutines or modules. For example there may be an iterator module to handle the preview of multiple files a commands module that is responsible for the user interface commands offered in the previews a preview module for generating the preview itself a properties module for handling the properties metadata portion of the preview display etc.

As noted above these preview features may be offered anytime a user is to be shown a listing of files or other data on the system. When the particular listing is generated through the use of one or more criteria such as when the display is the result of a user requested keyword search the previewer may use the search criteria to assemble the preview. For example an application may wish to notify the previewer of the keywords used in a search so that the previewer can determine which preview to use or how to sequence the previews when multiple previews are to be used. This may be an extensible feature where the previewer is provided with the search criteria.

As noted above multiple selections may be made and the displayed preview image may change as a result. These multiple selections may also cause a change in the display of properties and or metadata. For example shows an example view in which two files and have been selected. The selected files may be differentiated and or accentuated in a unique fashion or with a unique appearance such as having a distinct color font shape texture style size background color pattern etc. The properties and metadata for the selected files may display the same property for both files such as the project name for each and may have a corresponding appearance so that the user can easily match properties with their corresponding files. For example the properties may be color coded to identify the selected file to which they belong. The pattern shown for file may accentuate and or differentiate the file such as by a color e.g. red a highlighting e.g. a different color surrounding the text as with a highlighter on a paper document a font e.g. bolding underlining ALL CAPS Times New Roman etc. a size e.g. larger text etc. Property which may display a property of file may have the same accentuation and or differentiation used for that file to correlate the properties and their respective files.

Many properties and or metadata for multiple selected files may be aggregated and presented together as a compilation or sum. For example if one displayed property is file size e.g. how many kilobytes kb or megabytes Mb used and multiple files are selected the file size property may display an aggregated file size value totaling the file sizes of the selected files e.g. 4.3 Mb . As another example if one displayed property has keywords the keywords for multiple selected files may be aggregated together and presented as a single keyword property. Some aggregations may result in a larger property display and may use the same appearance accentuation differentiation described above to correlate aggregated properties with their corresponding files. Alternatively the properties may be further differentiated from the selected files e.g. a different color font highlighting appearance size etc. to indicate that the property is an aggregation of all selected files. depicts an example in which an aggregated property value is displayed with a distinct appearance represented by shading which is different from the patterns on the selected files individually. The shading may represent for example the color red while the patterns on files and may be green and yellow.

The accentuation and or differentiation of the aggregated values may in some cases be done in a manner to indicate the source of the values. For example depicts an enlarged properties metadata display of the view shown in . Some aggregated properties such as keywords may result in a listing of multiple property values aggregated from the multiple selections. These aggregated properties may be given distinct appearances that indicate which values came from which selected file. In the example values and are shown in one form of shading to indicate that those particular values e.g. keywords are common to both selected files and . That shading can reflect any of the types of differentiation and or accentuation described above e.g. the color red . Values and are shown with a first pattern to indicate that they are associated with one selected file which shares the same pattern e.g. a file and its values are both blue and value has a different pattern to indicate that it is associated with the other selected file which shares the same pattern e.g. this file and its values are green . A separation line may be used to delineate values that were common to all selected files from those that were not. Of course different appearances may be given different meanings when more files are selected. Label may also be visually differentiated and or accentuated to indicate that it is an aggregated property. For example label may also be in red.

Accentuation and or differentiation can also begin with user selections of certain values in the aggregated values. For example a user may select one of the values in the aggregated list and cause a subsequent display to appear that indicates which files share the selected value. The indication could come in the form of a common appearance where the selected value and its corresponding files are displayed in a common manner. For example by clicking on value the system may automatically change the font of that property value to a boldfaced font and may do the same to the file listing to identify the file whose property was selected.

Although the discussion above addresses properties and metadata displayed with the previews in a shell browser these features may be used in other contexts as well. Any situation involving the display of multiple properties and or metadata may benefit from the features described herein.

While some kinds of properties are easier to aggregate because they have numbers e.g. file size is simply a total of the individual sizes other types of properties may be more difficult to aggregate. For example some properties have text words as values e.g. keywords . Furthermore some individual properties and or metadata may have multiple values themselves known as multi value properties. For example a given file s keywords property may have none one two three or any number of distinct keywords as values e.g. one file may list peanut food and candy as keywords relating to the file . These multiple values may also be sequenced in a meaningful way for each file such that the first value listed may be more important e.g. an article that primarily deals with peanuts might list peanut as the first keyword because it is most important and may list food and candy second and third in descending order of importance . When multiple files each having multiple keywords are selected the process of aggregating those properties is not as simple as just adding numbers. When that occurs the system may display a listing of the values that are in some form of ranked order based on the order in which they appeared for the individual selected files. Steps may be taken to help ensure that the resulting list of aggregated values corresponds to the relative importance of the values as they appeared for the various selected files. For example five newspaper articles may have keywords identifying the cities that are discussed in the articles and ranked in the following order 

In this example Chicago was given first place twice e.g. Files 2 and 3 discuss Chicago a lot and second place twice e.g. Files 1 and 4 don t focus on Chicago but they do mention it . The resulting aggregation of these properties may remove redundancies and may display the properties in a sequence that represents the relative importance of Chicago and the other values to the files and also take into account the number of times a particular value appeared at all in the files properties Chicago Boston Detroit Austin. So with this example the multiple selected files as a whole deal mostly with Chicago and then with Boston and then Detroit and least with Austin.

In step a global integer constant C is established either automatically e.g. the computer system may detect the availability of system resources and adjust the constant to avoid bogging down the system or manually e.g. the user may be given the option to set C as high or as low as they want depending on how much detail they want in the aggregation of multi value properties . This constant represents a number of places or rankings for which the process will be carried out for example C may be ten 10 . A higher constant C will allow greater granularity in the ranking but would require greater processing power and more time. This value may be dynamically established depending on user preference system settings available resources system load etc.

In step a loop begins for each value present among the selected files. In step a nested loop is executed for the first C places in the voting. In step for each place the system tallies the number of votes that the current value received for that place. These two loops result in the system determining for each value how many votes it received for each of the first C places. Then in step another loop is begun to process each of the C places beginning with the top place first place and proceeding on through the Cth place.

In step a check is made to determine whether any single value received the most votes for the place under consideration. If a value received the most votes for this place that value is awarded this place and the value is removed from the remainder of the calculations in the vote tabulation process in step . So in the above example Chicago received the most votes for first place two votes .

If in step no single value had the most votes for this place then there is a tie for the current place either 2 or more values had the same number of votes for this place or all values had zero votes for this place and the process moves to step where a check is made to determine whether the current place being checked is the last place to be checked Cth place . If it is not the process moves to step . In step the system peeks ahead one place to identify the number of votes that the current tied values received for the next place. In step if one of the tied values had the most votes for the next place then that value is given the present place in step and the votes for the current place held by the other tied values are moved or transferred to the next place. In other words the losers at step have their votes for the current place added to their vote total for the next place so that for every value that received votes in the place under consideration but was not awarded that place its votes in the current round are carried over and added to its votes in the next round when computing a winner for that round.

If in step none of the tied values has the most votes for the next place then all of the tied values are ranked in alphabetical order for the current place in step and the next several places until the tied values are all given a place and the process returns to step . Similarly if in step the process happened to be examining the last place place C when the tie occurred then the process also moves to step to rank the tied values alphabetically and on to step .

From step if the last place Cth place has been processed then the process moves to step where all remaining votes for the remaining unranked values are treated as votes for Cth place and the remaining values are ranked in order of whomever has the most votes for Cth place with ties being broken using alphabetical order.

The algorithm shown in may keep a summary table in memory tabulating the various vote counts and values. The table may be advantageous in that the system can incrementally load the table into operating RAM as the process runs deleting portions from RAM that are not longer needed and thereby reducing the amount of run time memory required to run the process.

In some instances the various multi property values may undergo a normalization process. The normalization process may delete redundant appearances of values in a file s multi property field. For example a file may have keywords Dog Cat Dog and the normalization process may keep the first occurrence of the values and remove subsequent occurrences of the same value e.g. resulting in Dog Cat . Un normalized data may be stored in the system s memory and the normalized version may overwrite that data or the normalization data may simply be stored separately in the memory. In some instances normalization may occur when the user modifies a multi value property.

In some instances a user may wish to edit the multi value properties through interaction with the aggregated display. When that occurs the system may revise the multi value properties for each file in response to changes made to the aggregated multi value properties display. For example an addition of a new property to the end of the aggregated display may simply cause the new property to be appended to the multi value property for each of the files. The same thing may occur if a new property is inserted in the beginning of the aggregated multi value property display or any other insertion. Some changes such as reordering of the properties within the aggregated properties display may cause a corresponding reordering of the multi value properties for each of the files.

Multi value properties may also have a unique approach to editing data. For example fields for such properties may appear in a list similar to that shown in . Field may be an active text edit box in which the user may type to enter data and may have a number of values which may be delineated in the field by characters such as semicolons. Values may exhibit atomic behavior or token behavior such that the entire value may be selected as a single selection. Thus in some instances when an insertion point is placed in the field to edit data an atomic value may behave as a single unit as opposed to a plurality of characters e.g. NYC as opposed to N Y C and placing an insertion point within an atomic value might even be prohibited such that an attempt to place an insertion point within the atomic value e.g. by clicking a mouse within it may result in an insertion point being placed before or after the atomic value. Pressing arrow keys to navigate around an atomic value may also move from one side of the value to the other side in a single keypress. Furthermore when selection regions are possible such regions may be prohibited from selecting only a part of an atomic value such that selection of a predetermined portion e.g. half of the value results in a selection of the entire value. Hovering over an atomic value may cause the value to enter a hover state indicating that it is an atomic value. For example the hover state may include a box or highlighting or other visual differentiation or accentuation around the entire atomic value. With the atomic values the values may also be rearranged by drag and drop operation.

The token behavior is not limited to simply selecting the entire word at once. The word may be replaced by alternative user interface elements. For example a time could be replaced by a graphic image of a clock a date could be replaced by an image of a calendar. The atomic values may exhibit icon behavior such that clicking or right clicking on them may cause additional levels of interactivity such as bringing up command menus option lists other pop ups etc. Values can also be dragged onto other files and or properties and those values may be added to the other files and or properties.

At the end of the field s list there may be a prompt string reminding the user of what data the field contains. In some instances the prompt string may appear only when the field is in an edit state such as when it is given a keyboard focus for the entry of data and the prompt string is not treated as an actual value in the multi value field e.g. it is not saved to memory as a value in the field but is rather generated as part of the user interface .

The prompt string may have be visually differentiated and or accentuated using any of the types previously discussed e.g. it may have a highlighting of a certain color in the area around the letters and may exhibit some types of default behavior. For example the prompt string may automatically appear whenever the field is in an edit state and an insertion point is at the end of the string of values. Once the user starts typing to insert a new value at the insertion point e.g. by starting to type in a textbox and new characters are added the prompt string may automatically disappear. The prompt string may reappear automatically should the user complete or abort entry of the new value.

In the edit state the field may also display a dropdown menu providing the user with a list of potential values to add to the multi value field and the user can select an entry from the menu. The dropdown menu may include an autosuggest feature which may be implemented according to the process shown in . First the process may begin in step by collecting all values already in use for the given property and or used by the given user. In step the menu can omit values that are already present in the multi value property for the selected file s since the user is unlikely to want to add a duplicate. In step the list may be sorted by popularity alphabetically or by any other desired method. Then in step the menu may be displayed with the autosuggest. If some of the listed values are already present for some but not all of the selected files those values may be given a different appearance e.g. highlighting coloring pattern font etc. as discussed above to indicate that fact. Values that are not used in any of the selected files may also be given a different appearance to indicate that fact.

The field may also have an autocomplete feature as shown in . With the autocomplete feature when a user begins to type a new value to add to the multi value property such as by typing the D in the example the system may automatically attempt to complete the entry with an anticipated value. The autocomplete feature may be implemented using the process shown in . The anticipated value may be selected by first taking all of the values in use for the given property in step and filtering out the ones that already apply to the selected file s in step . A further filtering may occur in step to identify the values that begin with the letters that have already been entered by the user and selecting the first alphabetically value that starts with the letter s that the user has already typed. In step the remaining possibilities may be sorted by popularity alphabetically or by any other desired method and in step the remaining list may be displayed. The first entry in the list may be selected by default and may be highlighted and the remaining characters may automatically be placed in the field following the user s entered data with additional highlighting if desired.

The autosuggest and autocomplete features described above may include other types of filtering steps as well. For example filters may select the most recent values that were selected and or entered by the user or filter the possible values based on the context that created the listing of properties. For example if the selected files were selected for display as part of a project view e.g. displaying files that relate to a given project the system may automatically determine that certain possible values are more or less likely to be used in that project and may filter the list accordingly.

When the user is entering data in the field a check may be made to validate the entry. For example certain fields may be predetermined to only have a specified range or list of possible values e.g. day of week and if the user attempts to enter an invalid entry in the multi property field the system may simply reject the entry providing the user with a message indicating that the entry was invalid.

Alternative embodiments and implementations of the present invention will become apparent to those skilled in the art to which it pertains upon review of the specification including the drawing figures. For example the various steps in the described processes may be rearranged modified and or deleted as desired to implement a selected subset of features described herein. Additionally in the above references to certain features being found in one or more aspects or embodiments of the present invention are made simply to illustrate various concepts that may be advantageously used alone or in combination with other concepts and should not be read to imply that there is only one inventive concept disclosed herein or that all of the described features are required in any of the claims that follow. Rather each of the following claims stands as its own distinct invention and should not be read as having any limitations beyond those recited.

 Dynamic Scrolling Various aspects of the present invention may be used to enhance navigation through a conventional folder tree control e.g. a navigation pane navigation panel page space control or the like or navigation of other data. The traditional folder tree control in allows a user to view organize and retrieve data. Typically a vertical scroll bar and horizontal scroll bar accompany the folder tree control as one mechanism to permit user navigation through the folder tree structure. As a user navigates vertically through the hierarchy of the folder tree structure the relevant node may no longer be fully visible in the narrow viewable window pane. For example in in response to a user repeatedly pressing the down arrow key when the node labeled Installer in initially has focus the non visible or obscured nodes below the Installer node each in turn become highlighted and receive focus. These nodes however are not entirely visible in the narrow window pane. The user must subsequently horizontally scroll the narrow viewable window pane to the right to make those nodes fully visible.

In a folder tree in accordance with various aspects of the present invention is displayed. One skilled in the art will appreciate that is merely one example of a folder tree in accordance with various aspects of the present invention. Aspects of the present invention may be implemented with a variety of tree controls or other data navigation. In one example a folder tree may be a hierarchically tree shaped set of user interface controls that expose branches of the tree in hierarchical levels as navigated by the user. The user of a folder tree control may click on a node exposed by the tree control to expand the node in place the node can be collapsed if it is already expanded. A small widget such as one displaying or may be used to indicate whether a node is collapsed or expanded as is known in the art. The expansion of a node shows the nested nodes hierarchically under the currently selected node. The user may expand collapse a node by for example clicking on a button clicking on the node or clicking on the displayed widget.

A folder tree control enables a user to navigate across hierarchically arranged data as is known in the art. In a vertical scroll bar accompanies the folder tree control as one mechanism to permit user navigation through the folder tree structure. For example in in response to a user dragging the floating vertical scroll bar control towards the bottom of the window pane the folder tree control scrolls the visible content up thereby displaying previously undisplayed nodes from below the window .

According to an illustrative aspect of the invention when a user navigates along one dimension e.g. vertically the folder tree control may automatically scroll in another dimension e.g. horizontally to ensure that a node relevant to the user is within the visible area of the window . The relevant node may be a current node a node having input focus or an otherwise selected node. The relevant node may be a node in the tree structure for example that is horizontally alongside the mouse pointer s position. When the user scrolls expands or collapses any node of the folder tree control thereby causing the relevant node to no longer to be fully and or partially visible the folder tree control may automatically horizontally scroll the folder tree such that the relevant node is visible within the window .

Those of skill in the art will appreciate that while the present illustrative embodiment performs automatic horizontal scrolling other embodiments may automatically scroll vertically in response to horizontal scrolling by a user e.g. where the user is navigating other types of data which lend themselves to horizontal arrangement rather than vertical. For example various aspects of the invention may be implemented in a system where a substantial percentage of user input indicative of navigation is in the horizontal dimension. In that case one skilled in the art may implement various aspects of the invention such that there is automatic dynamic vertical scrolling.

For example at the instance of when the mouse pointer is at location to the immediate right of the then relevant node the displayed tree need not be scrolled horizontally because the folder name of node is fully visible. However when the user drags the floating vertical scroll bar control using the mouse pointer such that the mouse pointer is at location horizontally alongside the node then the displayed tree view may be automatically scrolled horizontally as further described below. In this example the mouse pointer is in horizontal proximity to node . Further in this example the displayed tree view is scrolled horizontally to the right resulting in the tree moving to the left by a predetermined distance such that the folder name is fully visible or as fully visible as possible given the width of the predetermined viewable area . If the folder name is truncated for any reason then the predetermined distance may be such that that the dynamic horizontal scrolling results in the entire truncated folder name being fully visible.

One skilled in the art after being provided with the teachings disclosed herein will appreciate that the predetermined distance for automatically scrolling a navigational control e.g. a folder tree control may vary among embodiments of the invention. In one example the predetermined distance for automatically scrolling is equal to the distance necessary to align a relevant node with a right edge of the predetermined viewable area . In a second example a relevant node is wider than the predetermined viewable area and the predetermined distance for automatically scrolling may equal the distance necessary to align a relevant node with a left edge of the predetermined viewable area . In a third example the predetermined distance for automatically scrolling may equal the distance necessary to align a relevant node in the center of the predetermined viewable area . These examples are merely illustrative of an appropriate predetermined distance to be used for approximately aligning the relevant node in the predetermined viewable area and they should not be narrowly construed to limit the scope of the claims.

In accordance with various aspects of the invention the dynamic horizontal scrolling discussed may be delayed by an appropriate time period. For example the horizontal scrolling may be set to occur immediately or may be set to occur 100 ms after a user first positions the mouse pointer alongside a relevant node. At least one benefit of implementing a time delay is to create or provide the appearance of smooth movement. One skilled in the art will appreciate that the amount of time delay set may be varied as appropriate.

In a node currently has focus responsive to user input. By way of just one example such user input may include a user moving a mouse pointer near or over the node . Upon receiving focus on the relevant node node the tree control determines whether horizontal scrolling is appropriate. In this case the folder name i.e. descriptor is entirely visible. Therefore automatic horizontal scrolling is not performed. However when the user moves the mouse pointer near or over node then node receives focus. illustrates just such a folder tree control in accordance with various aspects of the invention. The then relevant node currently has focus in . Node is the same data item as Node however Node has focus in while Node did not have focus in . Furthermore in the folder tree has automatically dynamically scrolled horizontally to the right by a predetermined distance to make the entire name of Node visible. In this case the node name is Folder Name and is not truncated. The predetermined distance that the folder tree control is horizontally scrolled may be determined by calculating the amount of distance required to approximately align the end of the node name at or near the edge of the internal window pane. Meanwhile the previously focused node is no longer highlighted and may not be fully visible.

The view of the navigational control is dynamically scrolled horizontally by an appropriate distance after it is determined that scrolling e.g. horizontal scrolling is desired. One skilled in the art will appreciate that at least one advantage of the instant invention is that it does not require the display of a horizontal scroll bar thereby resulting in additional viewable area on a limited display screen for displaying data of the folder tree. Although a horizontal scroll bar is not required the instant invention does not preclude a horizontal scroll bar from being included and or used. For example it is conceivable that a horizontal scroll bar could be beneficial to a user to visually indicate the current horizontal position of the displayed view in relation to the folder tree.

In accordance with various aspects of the invention illustrates a flowchart describing a computer implemented method for automatically dynamically scrolling content in one dimension responsive to user controlled scrolling or navigation of the content in another dimension. Those skilled in the art will appreciate that the steps illustrated in may be performed in other than the recited order and that one or more steps illustrated in may be optional.

In step a user is presented with an initial view of content. The content may be displayed in the form of a hierarchical folder tree control with multiple levels of nodes. is just one example of a first view of a hierarchical folder tree. is yet another example of a first view of a hierarchical folder tree.

In step the user scrolls content in a first dimension and or interacts with the content. These acts are just some examples of user inputs indicative of navigation of the content. Various user inputs scroll the relevant content by moving its position in the predetermined viewable area. For example a form of user navigation that results in vertical scrolling of content is when a user drags a floating vertical scroll bar control towards the top or bottom of a window pane containing a folder tree control. Meanwhile various non scrolling user inputs interact with the relevant content by updating the designation of which content is relevant to the user. An example is when a user presses the up arrow down arrow page up or page down button on an input device while the folder tree control window is active. Moreover an example of a non scrolling user input may be illustrated in . If a user presented with the view of content illustrated in moves a mouse pointer over or near node then node receives focus. In this example the user interacts with the content rather than scrolling the content in a first dimension. In another example the user may be both interacting with the content and scrolling the content in a first dimension simultaneously. In yet another example with respect to a user may interact with a folder tree by pressing an expand widget resulting in sub nodes of the node to which the widget corresponds being only partially displayed in the viewable area of the folder tree control.

In step if the relevant content is fully visible then no automatic scrolling may be necessary. If the relevant content is not fully visible or is at least partially obscured in the predetermined viewable area then the relevant content may be scrolled in a second dimension to a state where the relevant content has increased visibility. By way of just one example the relevant content in is node which has focus in that illustration. After a user interacts with the content displayed in e.g. in step by moving a mouse pointer over or near node then node will receive focus and become the relevant content. Since node is at least partially non visible obscured in the predetermined viewable area the relevant content may be automatically scrolled in a horizontal dimension as further described below. In another example with respect to if a user selected an expand widget corresponding to node causing sub nodes to be only partially displayed in the viewable area then the relevant content may comprise both the node and its sub nodes .

In step the performance of step is delayed for a predetermined amount of time. In various embodiments of the invention the amount of the predetermined time period of delay can be zero or any other value greater than zero. For example in a predetermined time period of delay of 100 ms may elapse before the folder tree control is dynamically scrolled horizontally by a predetermined distance resulting in the view illustrated in . One skilled in the art will appreciate that the amount of time delay set may vary as appropriate.

In step the content is automatically dynamically scrolled in a second dimension for a predetermined distance. For example in the case of the folder tree control in if the relevant node is found to be not entirely visible then the folder tree control may be horizontally scrolled by a predetermined distance such that the end of the node descriptor e.g. folder name is approximately aligned with the right edge of the predetermined viewable area. One of skill in the art will recognize that in various instances it may be desirable to approximately align the relevant node with the left edge of the predetermined viewable area or to approximately align the relevant node at or near the center of the predetermined viewable area. In each of these cases the node shall be construed to be approximately aligned with a predetermined edge of the viewable area. The predetermined distance in each instance may also vary accordingly. For example with respect to in response to a user selecting the expand widget corresponding to node the relevant content may be approximately aligned with the left edge of the predetermined viewable area such that sub nodes are provided with increase visibility.

Furthermore one should recognize that the use of the modifier second should not be construed to mean that a first dimension is necessary or required. For example if in step a user interacts with the content displayed in by moving the mouse pointer so that it changes focus from node to node then in step the content may be automatically dynamically scrolled in a horizontal dimension. In that case even though there was no initial scrolling in the vertical dimension the second dimension would be the horizontal dimension.

Finally in step the user is provided with an updated view of the content in the predetermined viewable area. For example is a scrolled content view of a folder tree resulting after step . The updated view provides a user with increased visibility of relevant content node in the narrow viewable area in .

 Common File Dialog Various aspects of the invention may communicate with other programs systems modules or the like via one or more programming interfaces. A programming interface or more simply interface may be viewed as any mechanism process or protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled regardless of whether the code segments are provided as source intermediate or object code regardless of whether the code segments are utilized in a runtime system or process regardless of whether they are located on the same or different machines or distributed across multiple machines and regardless of whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

A programming interface may be viewed generically as shown in or . illustrates an interface between two computers. illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although B and C show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction and or may only have an interface object on one side.

Aspects of a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this description should be considered illustrative and non limiting.

The concept of a programming interface is known to those skilled in the art. There are various other ways to implement a programming interface. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. Some illustrative alternative implementations of a programming interface are described in connection with .

Factoring. A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

Redefinition. In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario and as shown in it could be ignored or replaced with another parameter. In either event the functionality of Square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I to ignore unnecessary parameters or parameters that may be processed elsewhere. As is clear from the foregoing a programming interface may in some cases include aspects such as parameters which are not needed for some purpose and which may be ignored redefined or passed on for processing elsewhere for other purposes.

Inline Coding. It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I .

Divorce. A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1 st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Rewriting. Yet another possible variant is to dynamically rewrite code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention.

A file dialog may refer to a dialog created for the purpose of opening saving or otherwise indicating a file is to be processed and or how a file is to be processed. Although embodiments of the invention will be described by reference to examples of dialogs for opening and for saving files the invention is not limited in this regard. Other examples of file dialogs include dialogs for inserting file attachments for importing files etc. As used herein the word file is given a broad meaning and generally refers to a collection of information accessible by a computer. A file may include text programming instructions and or various other types of data. A file may be identified to a user as document a photograph or some other type of item for which the file contains data. A file may also be fragmented or otherwise stored in one or more physical locations on a disk or other storage medium.

The invention is not limited to files stored in conventional hierarchical file tree structures. In at least some embodiments files may have multiple metadata attributes alternatively referred to as properties as described above. Using values for those attributes files may then be grouped into collections of interest to a user. By way of illustration files on one computer may have metadata attributes such as file author a customer to which the file pertains and file type. User A then creates spreadsheet word processing and slide show presentation files regarding customers X Y and Z and stores all of those files in a directory subfolder C Users User A . User B creates spreadsheet word processing and jpeg image files for those same customers. User B stores spreadsheet and word processing files in C Users User B but stores image files in C Media Photos . All of these files are then accessible based on lists. For example a Client X list groups all spreadsheet word processing slide show and jpeg files for client X regardless of author. By specifying the Client X list the user is able to see a grouping of those files without having to separately navigate through multiple subdirectories. These author customer and file type metadata attributes are provided for purposes of illustration. Other examples include properties such as rating comments project etc. A very large number of metadata attribute types can be implemented and the invention is not limited by type of metadata attribute.

Shown in is an Open File dialog according to at least some embodiments of the invention. Although the example dialogs in the drawings are shown as independent windows in a graphical user interface GUI generated by an OS such as various versions of the WINDOWS OS the invention is not limited in this regard. For example a file dialog according to the invention might also be generated as a pane of or frame within a pre existing window. Open File dialog is contained in a frame of a dialog window and has a title . Controls respectively permit a user to minimize maximize or close dialog . Arrow is a back control which a user can select to return to file groupings which the user has previously viewed. Adjacent to title are a navigation bar and a search bar both of which are described below.

Open File dialog is divided into four regions . Browser region includes a places bar subregion and a pagespace subregion . Entries in places bar correspond to lists directory locations or other groupings of files and represent places to which a user may navigate to locate files. Selecting one of the entries in places bar causes a corresponding display in pagespace region . In some cases that display may be a collection of icons corresponding to files in the selected place e.g. the selected list or other grouping . In some cases and similar to the WINDOWS EXPLORER component of the WINDOWS XP OS selecting a particular places bar entry may display a collection of file icons together with icons for one or more folders directories or other locations to which a user might navigate. One or more entries in places bar may be expandable to show sublists or other subgroupings of documents. For example the People entry in could be expandable to reveal lists of files pertaining to i.e. having the appropriate metadata attribute values corresponding to different individuals.

In the example of the user has selected the places bar entry corresponding to a Recent Photos list and is thus presented in pagespace with a collection of thumbnail images corresponding to files in that list. The user can then sort those files based on property values for file name file size location event or date of file creation by selecting Name Size Location Event or Date at the top of pagespace . The categories by which files in pagespace can be sorted may change based on the selected entry on place bar . Similarly the manner in which files are shown in pagespace can vary based on file type. A text file may be represented as a thumbnail image of the first page of the document saved in that file. In some cases a file might be represented by an icon corresponding to the application program which created the file or with which the file is otherwise associated . A scroll bar allows the user to see additional files.

After selecting one of the files displayed in pagespace more detailed information for that file is provided in infopane region . Displayed in infopane region is a larger preview or ghost of the selected file together with values for various metadata attributes. Although the example of shows selection of an image file the invention is not limited in this regard. For example one or more of the files displayed in pagespace might be a text file. Upon selection of such a file an image of the first page of that text file would be shown as ghost . Of course the properties and values shown in infopane region for a selected file can vary. Using the earlier example of User A and User B selection of a file in a Client X list could show values for author and client in infopane region .

Returning to navigation bar the user is provided with information indicating the trail which the user followed to reach the current pagespace display. In the example of the user first navigated to a Photos Videos list and then to a Recent Photos sublist. The user can then use search bar to locate files within the current pagespace based on title or keyword values.

Below browser region and infopane region is an extensibility region . As explained in more detail below an extensibility region of a file dialog may contain any of a wide variety of user interface UI controls which may be specified by the developer of the software program which instantiates the dialog . As used herein a UI control includes various types of graphical elements which a user can select by e.g. hovering a cursor over the control and pressing a mouse button so as to interact with the application or other computer program that instantiated the dialog. UI controls include but are not limited to push or command buttons radio buttons check boxes text input or edit boxes etc. UI controls also include graphical elements which only provide information to a user i.e. which do not offer a user the chance to select something or otherwise provide input . Examples of such information only UI controls include a block of text or a spacer dividing other UI controls. only shows a set of radio button controls and a text label Options for those radio buttons. Examples of other types of controls are described below. In at least some embodiments extensibility region is optional and a developer could omit it altogether.

Below extensibility region is command region . Command region includes a text entry control which permits entry of the name of a file a user wishes to open. Although not shown command region could also include a control allowing a user to input or select from a drop down list the type of file which the user wishes to open. This control would be useful if e.g. two files of different types have the same title e.g. report.DOC and report.PDF . A view control allows a user to change the way in which files are shown in pagespace . Instead of a collection of icons for example a user may instead wish to see files identified in a details mode not shown providing a table of file names types sizes etc. In at least some embodiments the view mode is based on a default view associated with the list or other location to which a user has navigated in browser region . A developer can set the default view mode for any location and a user may be permitted to override the view mode settings. When in details mode the columns displayed are also based on the location to which a user has navigated but a developer can specify and a user can override which columns are visible.

Control allows a user to change the appearance of dialog such that infopane region is not displayed see or if infopane region is already hidden to show infopane region . Command button permits a user to open a file which has been selected in pagespace or identified in control . Command button permits a user to cancel dialog . A developer may also override the default button labels and specify other text e.g. change the Open button to Check Out .

Shown in is a Save File dialog according to at least some embodiments of the invention. Save File dialog is contained in a frame of a dialog window and has a title . Controls and back arrow operate similar to controls and in Open File dialog of . Navigation bar and search bar function similar to navigation bar and search bar of Open File dialog . Save File dialog also includes a browser region having places bar and pagespace . As with Open File dialog selection of an entry in places bar results in display in pagespace of information about files associated with a list directory folder or other file grouping and or a display of icons permitting navigation to other locations. Files displayed in pagespace can similarly be sorted using the controls Name Type etc. at the top of pagespace .

Save File dialog further includes an infopane region . In at least some embodiments and as shown in infopane regions for Save File dialogs are located beneath the browser region. Infopane region includes a ghost of the file to be saved. Depending on the type of file being saved ghost may be a thumbnail image of the document picture or other item stored in the file may be an icon corresponding to an application associated with the file or may be some other type of graphical representation. A file name control allows a user to enter a name for the file being saved. This field may have a file name suggested by an application program instantiating the File Save dialog e.g. the first words of the file being saved . In some cases the user may be replacing an existing file by selecting a file from pagespace in which case the filename for the replaced file may be automatically added to control . In other cases a user may be unsure about where a file should be stored. Using places bar page space control the user can navigate to one or more lists or other file groupings and find an appropriate location. As the user navigates through such groupings he can see information in pagespace regarding other files in those groupings and use that information to determine if the current file should be saved to one of those groupings. In some cases a ghost of the file being saved is also shown in pagespace as the user navigates through various possible locations for the file. In this manner the user is provided with a visual indication of the location in which he or she can later find the file. The presence of ghost in pagespace also signals that the current list or other grouping is a valid save location.

Also shown in infopane region are fields for various metadata regarding the file being saved. In some cases a user may select one or more of these fields to add a metadata value. For example the user might select the keywords field and add words which might make the file easier to find in a future keyword search. In other cases a value for one of the metadata fields may be populated at least initially by an application instantiating dialog . In still other cases a value of a metadata field might be automatically populated based on the selected storage location for the file. If for example a user saves a file in a project X list a metadata field for project not shown in the drawings would be automatically populated with X . As with Open File dialog the metadata categories and values shown in infopane region for a file can vary.

Below infopane region is an extensibility region . Similar to extensibility region of Open File dialog the extensibility region of a Save File dialog may contain any of a wide variety of user interface UI controls which a software developer may specify. Although a pair of check boxes are shown in other UI controls could be included. Extensibility region is optional in at least some embodiments. Stated differently a developer would be free to create a Save File dialog without an extensibility region.

Below extensibility region is command region . Command region contains a command button for saving a file to a selected location as well as a command button for canceling Save File dialog . Text for these buttons can be changed by a developer e.g. changing Save to Check In . Also included in command region is a control for hiding browser region . By selecting this control and as shown in browser region is no longer displayed. In this manner a more compact Save File dialog can be provided. Navigation bar and search bar and or the minimization and maximization arrows of controls may also be removed in a compacted Save File dialog. By reselecting control the label for which has changed to Show Browser in browser region is again displayed. A view selection control is visible when browser region is displayed and functions similar to view selection control of Open File dialog . As with Open File dialog the default view mode e.g. icons vs. details when the Save File browser is displayed is based on the list or other location to which a user has navigated. A developer can similarly set and a user can override a view mode setting and the columns shown when in the details view mode.

As seen by comparing the location of infopane region in Open File dialog is different from that of infopane region of Save File dialog . This repositioning corresponds to the different purposes of these two types of dialogs. A user is typically looking for a particular file in an Open File dialog. A graphical depiction of the file contents is often more helpful than detailed metadata. Accordingly the focus of the infopane region in an Open File dialog is typically on file preview and the infopane is positioned to allow for a larger ghost image. The focus of the infopane region in a Save File dialog is on editing and on proper storage of a file for future retrieval. Thus the infopane region of a Save File dialog is positioned to encourage entry and or modification of metadata.

In at least some embodiments metadata fields are displayed in an infopane region of both Open File and Save File dialogs based on a predetermined order. In particular system required metadata attributes e.g. file name file type location for saving are shown first. Next shown are metadata attributes required by an application instantiating the dialog but which are not necessarily required in all applications e.g. compression ratio file protection . Remaining properties are then shown. The infopane region and the entire dialog if necessary is automatically resized so as to show all system and application required properties. In at least some embodiments an application program cannot specify what metadata is required but the application can promote metadata types to have a priority such that corresponding fields will be displayed in a default sized dialog.

Shown in are two of the various types of UI controls which a developer can place in an extensibility region of an Open File or a Save File dialog. A developer may include multiple controls of the same type and or may combine controls of different types. shows a pair of verification or check box UI controls. Such a UI control can include text Option 1 and Option 2 and may contain a label applicable to multiple check boxes Save Options . A user can place a check in or remove a check from a check box with a mouse. The checked unchecked state of the control is then returned to a program. In at least some embodiments implemented in LTR left to right languages text for a check box control is left aligned and wraps to the column in which the control is located. Labels in an extensibility region may be automatically aligned with metadata field labels in an infopane region. As seen in the Save Options label in extensibility region is aligned with Save In and File Type in infopane region . As explained in more detail below UI controls in an extensibility region may also be organized into one or more groups and displayed in multiple columns.

Shown in are various other types of UI controls which a software developer can specify for inclusion in an extensibility region. Although show these other types of UI controls in an extensibility region of a Save File dialog these UI controls could also be included in an Open File dialog or other type of file dialog extensibility region. shows a drop down box control. As seen in a drop down box permits a user to expand a box to show a list of possible selections. An option selected from the drop down list is then automatically placed in the box. shows a combo box control. This UI control allows a user to expand a box into a list of possible selections similar to a drop down box but also permits the user to type text into the box shown in as type here .

In some embodiments a drop down menu UI control can be included in a command region as shown in . Selection of the menu reveals a list of selectable options. Selecting some options may result in display of submenus and or other dialogs. In some cases a drop down menu and command button can be combined into a split button UI control which can also be located in the command region. A split button UI permits a user to select an option in a drop down menu. The split button is then relabeled with the selected option and the user can then press the button to act on the selected option. Other controls can also be added to a command region as shown in push button UI control and B check box UI control . This may be desirable if a developer only needs to include a single specialized control and avoids consuming display area for an extensibility region. In at least some embodiments a developer is not able to add radio button groups and labels to a command region. Inclusion of a control in the command region also permits a developer to emphasize that control and or to separate that control from controls in an extensibility region. Thus a developer might specify certain controls for the extensibility region and a control for the command region. In other embodiments however no additional controls are placed in a command region if the extensibility region will be displayed e.g. if there are to be two or more UI controls added with the exception of menu UI controls. Menus often contain choices applicable to multiple dialogs instantiated by an application and allowing a menu in the command region may be more efficient in some cases. In some embodiments menus are always located in the command region.

In at least some embodiments arrangement and appearance of UI controls in an extensibility region is automatic. The application instantiating the dialog simply identifies to the OS via one or more programming interfaces the UI controls and or groups desired. The OS then controls the arrangement and appearance. A control not explicitly added to a group is treated as its own group. The OS places each group in the extensibility region based on the order in which the UI control or group is first identified in the programming interface s . illustrates the automatic layout of control groups in a Save File dialog. As seen in the metadata field label value pairs in a Save Dialog infopane region form two columns. Control groups are then added in the extensibility region aligned with those columns so as to minimize height of the extensibility region. Spacing between groups as well as between individual controls within a group is also automatic. In other words an application developer need not precisely specify the position of each UI control. Similarly the appearance of text for UI controls group labels and plain text is automatically controlled by one or more OS theme files.

In addition to specifying UI controls for inclusion in an extensibility region and in some cases a command region an application developer can customize a file dialog in various other ways. Using appropriate programming interfaces as discussed below a developer can override the dialog titles e.g. Open File title in Save File title in and cause some other title to be displayed. A developer can also make choices which will affect the locations to which a dialog will navigate when a dialog is opened. In particular when a dialog such as shown in or is first opened the dialog will often show a particular list or other file grouping as a suggested location in which to save or from which to open a file. In some embodiments a file dialog first attempts to navigate to one of the following locations listed in order of preference 1 a location that the instantiating application specifies e.g. the last location visited by the application 2 last location to which a file was opened or saved by that application as tracked by the OS 3 a default location specified by the application or 4 an OS specified default location e.g. a root directory the desktop in the WINDOWS OS etc. .

An application developer can also specify the initial browser mode. In some embodiments for example a Save File dialog automatically opens with the browser region hidden unless an application requests otherwise. In certain embodiments Open File dialogs are always displayed with a browser region. An OS generating a file dialog in response to an application request may also render the dialog at a default size and in a default location on the screen. For example the OS may automatically locate the dialog in the center of the display and limit the dialog and or various regions of the dialog to certain sizes. An application developer can override these default values by specifying a size and or location for the dialog. This may occur by explicitly supplying values for size and or location. This may also occur implicitly. For example an application may specify more controls for an extensibility region than can be contained within a default size.

As with other windows in a display a user may also be able to move and or resize the dialog. Similarly a user can resize the browser region if shown and the infopane region. As the infopane region is expanded by e.g. selecting the edge of the infopane region with a mouse and pulling the edge across the screen additional metadata property value pairs become visible. As the infopane region is contracted fewer property value pairs can be seen. User changes to size or position of a dialog or dialog region as well as changes to view mode visible columns in a details view mode etc. can be persisted until the user completes or cancels the dialog. In some embodiments some or all of such user changes may be persisted in subsequent dialogs.

If an application developer wishes to customize a default dialog so as to include custom UI controls additional steps are needed. Specifically the developer must create a custom template for the portion s of the default dialog that define the region s to hold the customized UI controls. A pointer to that template is then included in the DialgStr structure. The OS retrieves data from the custom template and uses that data to create the customized controls within a child window of the default dialog.

At first glance the procedure of seems straightforward. However the custom template must specify all the desired custom UI controls and their positions how the controls will be displayed etc. Creating a custom template can be a significant effort for the application developer. Moreover the developer must also create callback functions to deal with user input received by the custom UI controls.

The procedure of also poses problems to the OS developer. Few limits are imposed upon what an application developer may include in a customized region of a default dialog. Similarly few limits are imposed on where an application developer may place a customized region within a default dialog. Although shows all the customized controls inside a single contiguous block this is not always the case. A custom template can specify numerous custom controls to be placed in multiple child windows of the default dialog and the customized region s may have various shapes. In view of all these factors it is difficult if not impossible for the OS developer to know all of the ways in which various applications customize default dialogs. In turn this increases the difficulties in upgrading the OS. For example a change to the default dialog format that adds a new element in a particular location may be incompatible with applications instantiating dialogs with customization in the same location.

Based on the methods called shown as arrows from the dialog object in the OS creates the requested dialog. As previously discussed the arrangement of UI controls is set by the OS. Accordingly detailed placement information for the UI controls e.g. specifying pixel x and y offsets from a reference location need not be provided by the application developer. Because dialog customization is facilitated by calls to methods within the dialog object and because the manner in which those methods can customize a file dialog are known to the OS developer the OS developer is more able to know how OS modifications will affect applications. In particular customized controls are limited to those which can be specified via one of the method calls. Because those UI controls will be placed within a known region of a dialog the OS can later be modified to change other parts of the dialog.

In addition a number of dialog object methods can be called by the OS to inform the application of various events. The application can then perform desired actions in response. For example user selection of a control corresponding to password protection of a specified file could result in the application taking appropriate steps to protect that file either directly or via a programming interface to the OS or to another application . Set forth below are examples of events about which the OS can inform an application via calls to such methods.

Although specific examples of carrying out the invention have been described those skilled in the art will appreciate that there are numerous other variations and permutations of the above described systems and techniques. As but one such variation some or all of the UI controls in the extensibility region or elsewhere in the dialog may be selectable using a keyboard. For example a user might press a tab key to highlight a particular control and then activate that control by pressing the Enter key. As another example a particular control may have a corresponding key combination e.g. Alt S . In at least some embodiments an application developer can modify aspects of how a user accesses a dialog via a keyboard. There might also be multiple simultaneous instances of file dialogs for a given application. Embodiments of the invention also include a computer readable medium having instructions recorded thereon which when executed by a processor perform steps of a method and or that implement a software architecture. As used in the claims the phrase data indicative of includes pointers or other references to data located elsewhere as well as the actual data itself.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention. For example it will be appreciated that the locations of the various UI features that are shown herein are illustrative and may be altered and that different placements of the various UI features will still fall within the spirit and scope of the invention. Furthermore the different aspects of the invention described herein may be formed in various combinations also without departing from the spirit and scope of the invention. In addition the various steps in the described processes may be rearranged modified and or deleted as desired to implement a selected subset of features described herein. Also in the above references to certain features being found in one or more aspects or embodiments of the present invention are made simply to illustrate various concepts that may be advantageously used alone or in combination with other concepts and should not be read to imply that there is only one inventive concept disclosed herein or that all of the described features are required in any of the claims that follow. Rather each of the following claims stands as its own distinct invention and should not be read as having any limitations beyond those recited.

