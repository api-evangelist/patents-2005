---

title: Architecture and system for host management
abstract: According to some embodiments, a system provides a resource service module, a resource data record repository, and a provider module. The resource service module exposes an interface, receives an invocation of the interface from a system management module, and requests managed resource data associated with a manageable resource based on the invocation. The resource data record repository includes a resource data record indicating a memory location of a managed host in which the managed resource data is stored, and the provider module receives the request and retrieves the managed resource data from the memory location of the managed host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424711&OS=07424711&RS=07424711
owner: Intel Corporation
number: 07424711
owner_city: Santa Clara
owner_country: US
publication_date: 20050629
---
A conventional computing platform may include diagnostic and management software tools. An operator may employ these tools to maintain monitor and or troubleshoot the computing platform. Such tools are typically executed within the operating system environment of the platform. Accordingly the usefulness of these tools is limited if the operating system environment crashes is compromised or tampered with by a computer worm virus or malicious user is disabled by a user or is otherwise unavailable.

Next generation platforms include an execution environment that is isolated from host operating system processes. Some proposed execution environments allow for isolated monitoring management of hardware resources. Regardless there is a need for a system that may provide more efficient and more comprehensive host management than what currently exists.

In one example of operation resource service module of management platform may receive a request from a system management module not shown via an external management interface. The request may request managed resource data associated with one of manageable resources through of managed host . Resource service module then identifies one of resource data records RDRs that corresponds to the request. More particularly resource service module identifies an RDR that is associated with the subject one of manageable resources through and that indicates a memory location of managed host in which the requested managed resource data is stored.

Resource service module instructs provider module to retrieve the managed resource data from the indicated memory location. Provider module therefore communicates with managed host over bus to retrieve the managed resource data. According to some embodiments the managed resource data is passed from provider module to resource service module and to the requesting system management module via the external management interface.

Some embodiments of the foregoing may provide an extensible system for managing hardware and software resources of a host platform via a consistent interface.

Management platform may comprise any one or more execution units including but not limited to a processor a co processor a controller one or more microengines of a network processor a virtual machine a logical partition and a firmware extension. In some embodiments management platform may manage hardware and software resources of managed host independent of an operating system environment provided by managed host .

In this regard management platform may provide an operating environment and memory separate from those of managed host . Accordingly some embodiments of management platform may manage host before boot after shutdown or post crash of the operating system environment of managed host . The separate environment may provide security advantages over a management service running local to host . Specifically a management service running on host can be more easily compromised by a virus or worm attack if other resources on host are compromised.

Managed host may comprise a processor a motherboard a main memory a chipset a network interface card other expansion cards a power supply a cooling system and or any other hardware components. Managed host may also execute program code of an operating system device drivers and applications. Any hardware and software components of managed host may comprise manageable resources. Examples of these resources are abstracted in as manageable resources through each of which may comprise a hardware or software resource. Managed host may comprise any computing platform including one or more manageable resources.

A manageable resource may be associated with managed resource data comprising one or more sensors effectors and events. For example a fan speed and a processor temperature may comprise sensors associated with a fan resource and a processor resource respectively. Network packet count statistics may constitute a sensor associated with a device driver for a network interface card. Values associated with each of these sensors may be stored in a memory location of managed host . As used herein a memory location may describe a memory mapped location e.g. Read Only Memory ROM option ROM Random Access Memory removable storage etc. and an I O port or bus over which management platform must traverse to retrieve data. According to some embodiments management platform may manage a manageable resource by reading a sensor configuring an effector or subscribing to an event associated with the manageable resource.

Management platform of includes core comprising hardware resource service module software resource service module and RDR repository . Core exposes external interface which includes Discovery application programming interface API Access API and Event API . System management modules executing on management platform invoke interface to read sensors configure effectors and subscribe to events associated with manageable resources of managed host .

In particular system management modules may use Discovery API to dynamically discover what manageable resources are present in managed host . Such discovery allows modules to then invoke Access API to query for managed resource data associated with resources with which they wish to interact. Event API constitutes a set of APIs that would be used to subscribe to host generated events and to publish events.

Interface may therefore provide an efficient mechanism for instrumenting managed host that provides a common namespace and common access methods. Interface may also provides a layer of protection that prevents system management modules from randomly accessing physical components or memory of host that could cause system instability. In this regard interface may protect system integrity by restricting possible actions to a confined set of operations that logically apply to a particular sensor or effector.

Resource service modules and handle sensor read effector write event subscription requests that are received via external interface . Hardware resource service module interacts with managed resource data associated with manageable hardware resources on managed host in response to invocations of interface . Hardware resource service module may comply with existing protocols e.g. Hardware Platform Interface Intelligent Platform Management Interface to interact with these resources either directly via an appropriate one of bus drivers or via one of providers .

Software resource service module interacts with managed resource data associated with manageable software resources of host . Examples include network statistics associated with a network interface card maintained by a network device driver hard disk statistics associated with a hard disk maintained by a hard disk driver etc. Manageable software resources may comprise legacy instrumented host software resources with which platform interacts using corresponding platform software driver and or host software resources that are instrumented in view of management platform and may therefore directly interact therewith.

As shown in modules and of core interact with manageable resources of host via providers . More particularly modules and may use providers to access transport mechanisms of host in order to reach managed resource data stored therein. Each of providers abstracts low level communication with one or more corresponding bus drivers to a single provider API. For example mailbox provider may expose a mailbox provider API to core for communication between core and two or more bus protocols. The number and type of providers in a given implementation of platform may vary among embodiments.

Resource service modules and are also responsible for discovering manageable resources on host . The discovered resources specified in the form of RDRs are stored in RDR repository . is a representation of an RDR of RDR repository according to some embodiments. RDRs may be used to provide a consistent mechanism for describing manageable resources their relationships and the operations which can be performed on them.

As shown an RDR may describe managed resource data of host including data type RDR type type of provider used to access the data and other context information used by a provider to access a sensor effector or event associated with the RDR. Generally a sensor RDR describes a resource capable of reading operational or health data e.g. fan speed or Network Interface Card NIC statistics an effector RDR describes a resource capable of platform control e.g. powering on a fan or enabling a NIC s auto negotiation feature and an event RDR describes resource s capability to generate asynchronous events. Sensor effector and event RDRs logically belong to one parent entity RDR that identifies an associated manageable resource.

An association RDR describes a logical relationship between two RDRs of any type. The meaning of the relationship is determined by the type information included with the association RDR. As will be described in detail below management platform may discover RDRs associated with managed host and then use the RDRs to manage resources of host .

An RDR also specifies the provider which is used to access the managed resource data associated with the RDR. For example an HPI IPMI RDR could describe a legacy resource represented by an IPMI based data record and accessed via an I2C bus. A DMA mailbox RDR could describe a software resource owned by a host device driver which would be accessed via a DMA mailbox provider.

Initially at a request for managed resource data is received. The request may be received from a system management module via an external interface. As an example of software resource service module may receive a request from system management module A via Access API . The request may request access to managed resource data associated with one of manageable resources of managed host .

Next an RDR is identified at . The RDR indicates a memory location of a managed host in which the requested managed resource data is stored. Continuing with the above example software resource services module identifies an RDR of RDR repository at . The identified RDR includes a record ID that corresponds to the managed resource data. The RDR also specifies a type of provider needed to access the data and a memory location at which the data resides.

The managed resource data is retrieved from the indicated memory location at . In some embodiments one of providers communicates with managed host over bus drivers to retrieve the managed resource data. The provider may correspond to the provider type indicated in the identified RDR. The particular method used to retrieve the data may at depend upon the type of provider used. Examples of data retrieval using a mailbox type provider and a memory scan type provider will be described below.

Next at the retrieved managed resource data is transmitted to the requesting system management module via the external management interface. More particularly the provider may pass the resource data to software resource service module via a corresponding provider API and module may in turn pass the information in a callback to the interface of Access API that was invoked prior to .

System includes management platform and managed host . Managed host executes manageable software resources including NIC device driver and application . Each of these manageable software resources is capable of providing instrumentation data to a managing entity e.g. management platform . Managed host may also include other manageable software resources such as other device drivers non device driver kernel mode modules and application layer software.

Manageable software resources and are represented in by legacy instrumented host software resources . In this regard resources and may be configured to provide instrumentation data via a legacy instrumentation protocol such as the Windows Management Instrumentation WMI protocol. Host management driver may communicate with resources and via the legacy protocol while also supporting a mailbox protocol to provide instrumentation data to platform as described below.

Briefly system management module may utilize core and mailbox provider to retrieve managed resource data of managed host as described with respect to method . Mailbox provider transmits a message to host using first in first out buffer FIFO . Host management driver receives the message and controls application in conjunction with the above mentioned legacy protocol so as to receive the subject managed resource data. Host management driver then passes the managed resource data back to mailbox provider via FIFO .

FIFO and FIFO therefore queue messages from platform to host and from host to platform respectively. FIFO and FIFO may be implemented in various manners according to some embodiments. One or both of FIFO and FIFO may be located in memory of managed host management platform specially allocated bus memory e.g. PCI and or any other suitable memory locations. Any number of FIFOs may be employed according to some embodiments. For example each software resource of managed host may be associated with a dedicated message receiving FIFO and a dedicated message transmitting FIFO.

The mailbox protocol may also be employed to access managed resource data associated with manageable resources over a network interface. For example proxy Webserver may be configured to listen on a particular TCP IP port. Messages may therefore be sent from a managed resource such as the NIC device driver to host management driver by directing such messages to the particular port. The messages may be placed in FIFO in packet form received by mailbox provider and passed from core to network stack . Network stack strips off a network header and presents the remaining data to network based system management module . Messages may be sent from network based system management module to NIC device driver by reversing the foregoing process. Additional secure protocols such as Transport Layer Security may be incorporated into either process.

Initially system management module invokes an interface to access managed resource data associated with a manageable software resource of managed host . Core receives the message and determines an RDR that is associated with the resource based on header information of the RDRs stored in or accessible to core . As mentioned above each RDR is also associated with a provider type. Accordingly core identifies a provider of the associated type and sends a request for the managed resource data to the provider.

According to the present example the associated provider is mailbox provider . Mailbox provider constructs a message based on the request and deposits the message in FIFO . Host management driver picks up the message from FIFO in response to an interrupt triggered by storage of the message in response to a periodic poll of FIFO or by another mechanism.

Host management driver determines the resource associated with the message e.g. using an embedded resource ID or the like and constructs a query that is suitable to return the requested managed resource data from the resource. The query may be based on and an operating system specific management instrumentation interface supported by the resource. The query then delivered to the resource according to the operating system specific management instrumentation interface.

At the outset of method manageable software resource constructs a response to the previously received query. The response may comply with an operating system specific instrumentation interface and may be passed to host management driver using such an interface. Host management driver receives the response and translates the response to a message that can be interpreted by core of management platform .

The translated message is deposited in FIFO . Mailbox provider may pick up the message from FIFO in response to an interrupt triggered by the deposit of the message or by other means. Mailbox provider associates the message with a Request ID identifying the request that resulted in the message and passes the ID and the message to core using a suitable provider API. Core then passes the message which includes the requested managed resource data to the system management module associated with the Request ID. Embodiments of the foregoing may be used to manage software resources that are not natively instrumented for management platform . Moreover some embodiments may leverage operating system specific management instrumentation protocols supported by the resources.

Methods and rely on RDRs for identification and access of manageable resources. In order to provide these RDRs to management platform method may be preceded by an initialization phase in which the manageable software resources of managed host register their associated management instrumentation data i.e. managed resource data using existing operating system specific management instrumentation protocols. Host management driver then queries the protocol framework to identify the available management instrumentation data. In the case of the WMI protocol such a query may comprise a query for all registered Globally Unique IDs. Host management driver may construct an in memory RDR repository based on the results of the query and on a pre configured mapping between the operating specific management instrumentation data type and the RDR type spaces.

After the initialization phase is complete host management driver may transmit a registration message to core via the above described mailbox protocol to indicate that initialization is complete. In response to the message core queries management driver for its in memory RDR repository. Host management driver then returns the RDRs to core via the mailbox protocol.

Initialization of system may also comprise provisioning core and host management driver with symmetric keys using suitable and well known out of band provisioning channels. Core and host management driver may also negotiate algorithms to be used for integrity computation during initialization. Accordingly both core and host management driver may use the keys and algorithms to process each outgoing message for authentication and integrity checking and to authenticate and check the integrity of each incoming message.

The above described method for RDR discovery utilizes operating system specific management instrumentation protocols implemented by a software resource as well as a host management driver to map operating specific management instrumentation data type to RDR type spaces. Some embodiments may provide discovery of manageable resources without such prerequisites.

At initialization resource i.e. a manageable software resource that wishes to advertise associated managed resource data allocates contiguous page aligned and non cached memory. The allocated memory may be located in option Read Only Memory associated with device or in any other memory elements. Resource stores in the allocated memory a uniquely identifiable marker and pointers to other memory locations. Resource also stores RDRs in the other memory locations that describe the managed resource data maintained by manageable software resource .

The initialization may cause device e.g. a NIC in a case that resource comprises a NIC device driver to issue an event to core to trigger discovery of manageable resources. Core uses memory scan provider not shown to search host memory for the uniquely identifiable marker. Upon finding this marker core can identify all the RDRs describing manageable resource data associated with resource . In some embodiments core may initiate RDR discovery in response to a command received from system management module via an external interface.

Initially a manageable software resource allocates a host driver Direct Memory Access DMA window in host memory. As described with respect to system the window may comprise a contiguous page aligned and non cached memory location. Next the manageable software resource updates the DMA window with resource related information. The information may include a marker identifying the window and RDRs associated with the manageable software resource.

Window includes management platform memory marker that is used to uniquely identify the start of a host driver DMA Window to a management platform. The marker may comprise a platform specific 128 bit programmable value. The management platform requires this value for discovery according to method and may obtain the value during initialization.

Also included is header data structure with fields specifying a key Id a hash type a replay avoidance number a hash integrity value an RDR space physical address and an RDR space size. The key Id may identify a key used to generate the hash value below while the hash type may identify a hash algorithm used to generate the hash value. The replay avoidance number may be a monotonic increasing counter i.e. during the lifetime of a system boot used for generating the hash value. The integrity check value is a hash based on the algorithm identified by the hash type field and covers memory marker all the fields in header data structure and the RDRs in RDR space .

In this regard the RDR space physical address represents the physical address of first RDR space and the RDR space size specifies the size of space . Space itself consists of RDR list header consisting of a Next RDR Space field and a Next RDR Space Size field. The Next RDR Space field specifies a physical address of a next RDR space in the chain and the Next RDR Space Size field indicates a size of the next RDR space. As shown the Next RDR Space Size field is equal to 0 if no other RDR space follows.

RDR space also includes RDR list . RDR list includes RDRs that describe sensors effectors and events for the manageable resource associated with DMA window . Each RDR points to host memory locations for storing data related thereto although only two such locations are illustrated in .

Returning to method the manageable resource registers the DMA window with a host management driver located on the managed host which in turn generates a device driver Id corresponding to the resource. The host management driver then allocates a host to management platform FIFO and a management platform to host FIFO e.g. FIFOs and for bidirectional communication between the managed host and the management platform.

The host management driver registers the manageable resource and the associated DMA window with the management platform by passing the device Id and the address of the DMA window via the host to management platform FIFO. The management platform s mailbox provider receives this information from the FIFO and passes it on to the core. The core then issues a command to scan the DMA window at the DMA window address.

A memory scan provider of the management platform scans the DMA window to retrieve data therefrom. The data may comprise data such as that shown in DMA window . The data is returned to the core and is parsed thereby to retrieve the RDRs stored therein. The core may first authenticate the data and check the data for integrity using the above described hash integrity value. The core may then store the RDRs in an RDR repository in association with the previously received device Id.

System includes manageable software resource associated hardware device host memory core and system management module . The elements of system may instantiate any similarly named elements described herein. The method illustrated by system assumes that core has previously discovered RDRs associated with managed resource data of manageable software resource .

The previously discovered RDRs may be associated with managed soft resource data including soft effectors and soft sensors. and illustrate RDRs used by core to interact with managed soft resource data. The soft DMA sensor RDR of specifies a soft sensor type and information required to access the soft sensor. Such a sensor may indicate operational or health data of its associated manageable software resource. The soft DMA effector RDR of describes an effector that may be used to control operation of the managed host e.g. a NIC s auto negotiation feature . The effector RDR also includes information for direct memory access of the associated effector.

In one example of operation resource of system writes changes to soft sensor data to locations of host memory that are associated with the soft sensor data. These locations are specified by RDRs associated with the soft sensor data as described above. In the meantime system management module which may comprise diagnostic code written specifically for resource may issue a request to read a sensor associated with resource . Core checks an RDR associated with the sensor to determine that the sensor being read is instrumented for core and if so forwards the request to a memory scan provider not shown of the management platform. The provider reads the sensor by accessing a memory location specified by the associated RDR. The sensor data is returned to system management module via a callback or other mechanism.

Although the sensor data is illustrated as being stored in host memory some embodiments provide storage of the sensor data in alternative or additional memory locations. For example the sensor data may be stored in and accessed from kernel non paged memory set up by resource to store its code and or data. The sensor data may be stored in and accessed from data buffers set up by resource but owned by device .

Turning first to method a manageable software resource initially sets an update in progress bit to indicate that an update to associated soft sensor data is in progress. The bit may be located in any memory location accessible to the managed host and to a management platform. Next the manageable software resource updates a sync counter that is also associated with the particular soft sensor data to be updated and is located in a memory location accessible to the managed host and to the management platform. The soft sensor data is then updated and the update in progress bit is reset to indicate that no update is in progress.

Method commences with reading of the update in progress bit. If the bit indicates that an update to the desired soft sensor data is in progress the bit is read periodically until the bit indicates that no update is in progress. The core then reads the sync counter stores the read value as a Start Sync value reads the soft sensor data using the memory scan provider reads the sync counter and stores the read value as an End Sync value. If the Start Sync value is not equal to the End Sync value the read soft sensor data is rejected and an error message is passed to the requesting system management module. If the two values are equal the read data is provided to the system management module. Some embodiments also provide integrity checking of the read sensor data by associating an integrity check value into the stored sensor data during method and by evaluating the value during method .

The several embodiments described herein are solely for the purpose of illustration. Therefore persons in the art will recognize from this description that other embodiments may be practiced with various modifications and alterations.

