---

title: Data access architecture
abstract: Methods and apparatuses for remotely accessing data through a wireless device are disclosed. Preferably, the wireless device includes an ability to link data between software components operating on the wireless device. Additionally, the wireless device preferably includes an ability to reduce remote data access by identifying a first data type and a second data type used by a software component, retrieving data corresponding to the first data type from a service provider, retrieving data corresponding to the second data type from the portable device, and displaying on the portable device a return content result including both the first data type and the second data type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761871&OS=07761871&RS=07761871
owner: Handmark, Inc.
number: 07761871
owner_city: Kansas City
owner_country: US
publication_date: 20050310
---
The present application claims the benefit of and priority to U.S. Provisional Patent Application No. 60 551 636 filed on Mar. 10 2004 entitled Wireless Data Access Architecture. The entire contents of the 636 application are incorporated by reference herein in its entirety.

The present invention relates generally to remotely accessing data by a wireless device and interaction between data areas within the wireless device.

Internet browsers for accessing data via the Internet are known. Existing Internet browsers download all of the icons formatting information text etc. used for displaying Internet content each time a WebPage is accessed by a user. Such information may be transferred from the data service provider to the accessing device in differing data formats. Transmitting large files is cumbersome for wireless devices however due to the limited bandwidth wireless devices commonly use for accessing service providers. Further even where broadband wireless access is available a reduction or elimination of large file transfers is desirable to hasten the speed at which the wireless device accesses information from the data service provider.

Wireless devices often also present other limitations beyond mere bandwidth constraints. As an example cellular phones personal digital assistants PDA and palmtop computers are often limited in their processing presentation storage capacity and or user ability to navigate through the data provided in comparison to desktop computers and other non wireless devices. These wireless devices may also have limited intelligence such as the ability to make use of information available on the wireless device to derive useful information or the ability to manipulate the data meaningfully with other applications on the device. This limits both the inherent capabilities of the wireless device as well as a user s ability to use interact and or respond to the information presented. Thus a need exists for an improved remote data access architecture for wireless devices and or improved wireless devices themselves.

Other problems with the prior art not described above can also be overcome using the teachings of the present invention as would be readily apparent to one of ordinary skill in the art after reading this disclosure.

Appendix A includes exemplary code for a Token Parser class according to an embodiment of the present invention.

Appendix B includes exemplary code for a Cache File Tool Class Overview class according to an embodiment of the present invention.

Reference will now be made in detail to exemplary embodiments of the present invention. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

Various embodiments of the present invention are directed at providing data to and or accessing data from a wireless device. The term wireless device refers to any device capable of accessing data using a wireless communication link. As an example wireless devices include personal digital assistants PDA pocket personal computers PC palmtops and cellular phones. Many different platforms and communication protocols are contemplated for use with embodiments of the present invention such as Palm OS Microsoft operating systems Windows Mobile WM Pocket PC Windows Mobile Smartphone and Windows CE Symbian UIQ and Nokia Series 60 Series 80 and Series 90 Java Java 2 Platform Micro Edition J2ME both MIDP1 MIDP2 and RIM Binary Runtime Environment for Wireless BREW WAP 2.0 Qualcomm Trig ML and Linux. For voice based communications it is contemplated to use Code Division Multiple Access CDMA Time Division Multiple Access TDMA and Global System for Mobile communications GSM communication protocols. The above communication protocols are all for voice communication. For data based communications it is contemplated to use 1xRTT 1xEV DO and 1xEV DV for CDMA networks general packet radio service GPRS and enhanced data GSM environment EDGE for GSM networks communication protocols. Thus the following embodiments are described in reference to these platforms and communication protocols. It should be appreciated however that the embodiments of the present invention may be extended to other technologies that communicate over a communication link including non wireless technologies. It should further be appreciated that the appearance and operation of various embodiments will differ from one device to another from one operating system to another and from one communication protocol to another. As such the embodiments provided below are for purposes of illustration only.

Various embodiments of the present invention are also directed at launchers applications channels and plugins. Plugins typically manage a certain type of content for a user such as Weather News Sports Movies 411 and Maps. A plugin may register itself in a registry on the wireless device which allows a launcher to be described to be aware of the existence of the plugin and programmatically execute the plugin when desired. A channel typically manages user specified settings of the overall content. As such channels often are provided as optional entities inside a given plugin. An example is a weather channel that resides in a weather plugin where the channel is defined by geographic location or forecast type e.g. 7 day forecast 2 day detailed forecast ski report etc. . Applications comprise groupings of plugins and related channels. Thus it should be appreciated that the terms plugin and channel may be construed as data management sub routines of a higher level program referred to as an application. As different providers may offer individual applications with corresponding optional plugins and channels a launcher may also be provided. A launcher is aware of the existence of applications plugins and or channels on a given wireless device preferably by periodically checking a registry on the wireless device. For discussion purposes launchers applications channels and plugins including 3rd party products corresponding to any one of these four will be referred to collectively as software components as they each form one component of the software operable on a wireless device. It is contemplated to use various embodiments of the present invention with other software components as would be readily understood by those of skill in the art after reading this disclosure.

A wireless data access architecture according to a first embodiment of the present invention is shown in the block diagram of including subparts A and B . Generally an architecture may refer to a server e.g. a server at a data service provider and components operating on the server and or a wireless device. The architecture depicted in includes a data service provider Handmark.com in communication with a plurality of wireless devices via a wireless communication link e.g. wireless Internet . Additionally the data service provider may be in communication with one or more content providers via a hardwired or wireless communication links e.g. native Internet . This wireless data access architecture may be used with one or more of various embodiments of the present invention with or without the noted processing capabilities summarized in . Exemplary embodiments using this wireless data access architecture are described in greater detail below.

A second embodiment of the present invention is directed at reducing the amount of data transmitted between a wireless device and a data service provider . More specifically a reduction in transmitted data may be achieved by i increasing the amount of data stored on the wireless device itself preferably to a maximum amount and or ii reducing the amount of data provided from data content providers and or data service provider to the wireless device preferably to a minimum amount . By way of example and in contrast to traditional WebPages application files may be stored on the wireless device rather than being transmitted each time a data source is accessed by the wireless device . In this regard an application file may comprise data and or technology elements such as 

In this manner only the status update information required to update the presentation on the wireless device is transmitted from the data service provider to the wireless device via the wireless communication link. According to one embodiment of the present invention full presentation information is presented to the data service provider e.g. in 25 Mb files from the content providers . The data service provider then distills down only the status update information e.g. in less than 15 kb files for the wireless device which is then transmitted to the wireless device . Alternatively the content providers may distill down only the status update information before presenting this information to the data service provider .

To more fully illustrate this transmitted data minimization concept an exemplary weather report plugin channel is shown in . This weather report may comprise for example a presentation on a wireless device where a user has accessed the weather report for a given location using the wireless device . The icons for various weather conditions e.g. rain snow cloudy sunny etc. and the page formatting information or template e.g. where the icon appears in relation to the high and low temps etc. may be stored on the wireless device at a time prior to accessing the weather report. To display the weather report on the wireless device the wireless device then only has to retrieve the forecast data from the data service provider which may in turn retrieve the forecast data from a content provider . In other words the icons and page formatting information do not have to be transmitted to the wireless device to present the response to the user s request. Thus the present embodiment achieves a reduction in the amount of data transmitted from the data content provider to the wireless device when a page is accessed and also achieves a decrease in the amount of time required to respond to the user s request.

A method of presenting data for a software component on a wireless device that takes advantage of a reduction in the amount of data transmitted between the wireless device and the data service provider is shown in the flow chart of . In particular in step data is accessed using the wireless device . Step may comprise for example a user initiating a request for the weather report shown in . To present the weather report to the user data must be provided by the data service provider to the wireless device . This data can be divided into a first type and a second type as described below.

In step the wireless device or application running on the wireless device and or the data service provider identifies a first data type and a second data type used by the wireless device to present the requested information. The first data type comprises data that must be retrieved from the data service provider . As an example the first data type may comprise needed status update information e.g. the weather conditions for a given day . The second data type comprises necessary data that has already be retrieved by the wireless device or that is otherwise present on the wireless device . As an example the second data type may comprise application files icons etc. as previously described. It is further contemplated that the present embodiment may evaluate the first data type and re categorize current status update information as part of the second data type as there is no need to update previously retrieved status update information if the previously retrieved status update information is already up to date. It is further contemplated that the first data type might include data corresponding to new data. As an example at 9 00 am there may be ninety new news stories. At 10 00 am there may be only fifteen additional news stories or news stories that have changed. Hence at 9 00 am data corresponding to ninety news stories falls into the first data type at 10 00 am only fifteen news stories fall into the first data type.

As described above the wireless device and or the data service provider may identify the first data type and second data type e.g. as a result of interaction between the wireless device and server at the data service provider . Preferably step is performed automatically on or by the wireless device and communicated to the data service provider as part of a request for data from the data service provider that corresponds to the first data type. It is further contemplated however to provide user related data as part of step . User related data may include for example i user preferences expressly set by the user in an application on the wireless device ii data determined from prior usage of an application or wireless device by the user iii data available from other applications on the wireless device such as location or iv a combination of one or more of i iii . To illustrate the wireless device may provide a list of data available for presentation to the user such as a listing of movie theaters with a given radius of the wireless device . The user may then select a subset of the list of data available such as the user s preferred two movie theaters. The first data type then comprises the selected data e.g. movie listings corresponding to the selected two movie theaters and excludes the unselected data e.g. movie listings corresponding to the other movie theaters . Other techniques for identifying the first and second data types are also contemplated.

Once the first and second data types have been identified in step the wireless device and or system generally then retrieves in step data corresponding to the first data type from the data service provider . As an example the wireless device may contact the data service provider via the wireless communication link and request data corresponding to the first data type. The data service provider may authenticate the contact from the wireless device and maintain the contact e.g. manage the wireless communication link for the duration of communications between the data service provider and the wireless device .

Preferably the data service provider determines in response to a request from the wireless device the necessary content provider . The data service provider the retrieves data from the content provider parses the retrieved data determines required messaging and or updates assembles the data for delivery and delivers the data to the wireless device . If the communication between the wireless device and data service provider involves an e commerce activity e.g. purchasing tickets for a movie theater the data service provider may process the e commerce transaction and deliver an e commerce receipt to the wireless device and or a user s other electronic mail account.

Upon receipt of the data from the data service provider the wireless device may interpret the data to determine whether any missing elements exist. Interpretation generally refers to an application on the wireless device evaluating the received data to determine what other elements of the display are required e.g. if the data code means sunny the application has to determine that and know to display the sun image for that particular day . Missing elements can then be re requested from the data service provider . When the data transmission is completed the wireless device may close the contact with the data service provider . Other forms of performing step are also contemplated.

The application on the wireless device further retrieves in step data corresponding to the second data type from the wireless device itself e.g. from flash memory or the like . The data is aggregated for presentation to the user e.g. as a return content result on the wireless device and in step displayed on the wireless device . Step may be followed by other processing steps such as updating databases on the wireless device displaying follow up messages on the wireless device and or updating various software components on the wireless device .

As data corresponding to the second data type is not retrieved from the data service provider the total amount of data that must be retrieved from the data service provider by the wireless device can be reduced thereby improving the efficiency and performance of the wireless device .

According to another embodiment of the present invention the wireless device in particular one or more applications running on the wireless device may be provided with data linking capabilities for integrating one or more of various plugins channels or applications on the wireless device . The phrase data linking refers to the wireless device or application running on the wireless device having the capability to link data between or exchange data with multiple resources on the wireless device including between an application launcher and an application or plugin channel in an application between a plugin channel and another plugin channel in the same or different application between an application or any plugin channel within the application and other applications e.g. 3rd party software on the wireless device or some combination of these exchanges. This allows a user to seamlessly move from one software component to another where the data used overlaps e.g. to only have to enter common data once which is forwarded between software components .

To more fully illustrate this concept data linking between a calendar address book application and a mapping driving direction channel plugin is described below typically involving data linking of a channel plugin to a third party application . Wireless devices can include mapping driving direction channels plugins such as the exemplary mapping driving direction channel plugin is shown in i.e. . Wireless devices can also include calendar address book applications which include personal information management PIM applications the address book provided in Palm operating system based devices and the like. Other calendar address book applications and mapping driving direction channels plugins are also contemplated.

A user may access his her calendar to see upcoming appointments such as a business trip to Kansas City Mo. on Jul. 4 2005. If the wireless device is also equipped with the mapping driving direction channel plugin the user may use the calendar address book application to look up the Kansas City meeting information which data is then used by the mapping driving direction channel plugin to present the user with driving directions or a map on the wireless device . This concept of data linking with the mapping driving direction channel plugin is described below in greater detail in reference to .

By way of example when the address of the plant for the Kansas City Mo. visit is displayed originally by pulling up the appointment information in the calendar address book application the present embodiment may provide the user with a plurality of navigation and or interaction options such as links buttons or menu selection items MapIt to channel data linking AddIt to 3rd party application data linking DialIt to 3rd party application data linking and or DirectIt to channel data linking etc. . The MapIt function automatically loads a mapping plugin channel in the application populates the required fields and initiates a request to the data service provider to return a map. The DirectIt function automatically loads a driving direction plugin channel in the application populates the required fields and initiates a request to the data service provider to produce directions as will be described in regards to further embodiments below. The AddIt function automatically adds the contact information to the any third party address book application on the wireless device . Finally the DialIt function automatically dials the telephone number provided in contact information whether or not the user stored the information in the wireless device s address book using wireless voice capabilities in the wireless device if available. In all four of these functions information is linked from the appointment to the follow on applications or channels plugins i.e. an application including the plugins channels and other applications on the wireless device are data linked to provide the user with more efficiency and greater functionality in the use of the wireless device .

Similarly data linking may be used with the weather plugin channel previously described. As an example a user could launch the weather plugin channel from a link or other navigational element such as a button or menu item in the calendar address application on the wireless device the travel plugin channel or the mapping driving direction plugin channel to pull up a weather report for a location indicated in the screen from which the weather plugin channel was launched e.g. Kansas City in the previous example .

Those of skill in the art will appreciate that data linking as presently described is distinct from linked WebPages at least in that different sources of data are implicated i.e. independent WebSites versus a single source the method of presentation is different accumulation of data by the wireless device versus separate presentations in known Internet browsers retention of data by a wireless device versus expiring WebPages on known Internet browsers and the exchange of and interaction with data presented by the present embodiment its plugins channels other applications on the wireless device and or a combination of these. Further as individual plugins channels are being linked the data exchange format between plugins channels differs substantially from that of providing via HTML common data for a subsequent WebPage to the same Internet browser in accessing that subsequent WebPage by way of example plugin channel linking typically requires both a sharing of data and a call to pull up the second plugin channel. Other distinctions also exist.

A method of linking data between software components on a wireless device will now be described in reference to the flow chart shown in . In particular in step the wireless device loads a first software component such as the previously described weather plugin channel mapping driving direction plugin channel calendar address book application etc. Step may be initiated by user selection of a software component using the wireless device or in response to an action taken by the user e.g. a default operation performed upon device power up .

in step the wireless device or more specifically an application running on the wireless device retrieves data from the data service provider for the first software component loaded in step . As an example an application may retrieve data in a manner as previously described in reference to the method depicted in .

At some point during operation of the first software component an application e.g. the first software component itself on the wireless device may initiate a call to load a second software component. As an example a user viewing an address in a 411 plugin channel a first software component may select MapIt for a mapping driving direction plugin channel a second software component as previously described in reference to . In step the second software component is then loaded in response to the call initiated in step .

During the loading of the second software component or after loading has occurred linked data is exchanged between the second software component and the first software component it may be forwarded from the first software component to the second software component or retrieved by the second software component from the first software component. As an example the calendar address book application a first software component may exchange address information linked data with the mapping driving direction plugin channel a second software component . In this regard it should be appreciated that in order for data linking to occur at least a portion of the data retrieved by the first software component must be linked to the second software component. Thus it is contemplated for a portion of the data retrieved or presented by the first software component to not be linked to the second software component. Similarly it is contemplated that the second software component may retrieve from the data service provider or other software components on the wireless device additional data that is necessary to present the response to the user s request related to the second software component. Other variations are also contemplated.

This data linking capability is further shown in . In particular in screen a user inputs data into a 411 channel plugin and initiates a request to the data content provider . In screen data is returned to the 411 channel plugin interpreted and displayed accordingly. In screen the user initiates an action requiring a mapping driving direction channel plugin. The 411 channel plugin then makes a call to the mapping driving direction channel plugin which is launched activated. In screen data is exchanged between the 411 channel plugin and the mapping driving direction channel plugin and supplemental data is requested by the mapping driving direction channel plugin to the data content provider . The data is then returned to the mapping driving direction channel plugin interpreted and displayed accordingly.

By providing the noted data linking capability the amount of data the wireless device has to retrieve from the data service provider can be reduced e.g. exchanged information does not have to be re retrieved . In addition the wireless device has improved efficiency and ease of use the user does not have to re key data and intelligence the applications on the wireless device have increased productivity because they can utilize data available in the wireless device rather than just in the given software component by automatically exchanging linked data. As such the data linking capabilities disclosed enhance the operation and capabilities of the wireless device .

Another embodiment of the present invention is directed at features involving the noted launcher software component. In particular the launcher may serve as i an aggregator or framework to manage present launch and close all plugins ii a single point of common data entry retrieval and management such as the user profile iii a resource for routines and features that are common to channels such as an auto update scheduling mechanism iv a common interface between the wireless device and the data service provider to assist in the management of the communications between them v a centralized location for communications and or transactions e.g. e commerce with the user and or vi a mechanism to update some or all of the software components on the wireless device including updating existing plugins channels adding new plugins channels removing old plugins channels and or implementing new features. In this regard the launcher may communicate with the plugins channels through any number of application program interfaces API . One launcher API includes UPDATECONTENT which for example launches the plugin channel performs the default update and returns to the launcher. This may be used for full updates of the data in an application as each plugin channel is updated in succession. Another such API includes LAUNCH which launches the plugin channel and returns to the launcher when the user exits the plugin channel. This allows the user to view the content in the plugin channel and return to the plugin channel list in the launcher. In other words the launcher presents the plugins channels buttons then when clicked the plugin channel is launched when the plugin channel is closed the user returns to a default plugin channel or list of plugins channels. Yet another such API includes RETRIEVEUPDATESUMMARY which retrieves the last content update time and a short summary of the update from the plugin channel. This will allow the launcher to display a summary and date time of the last update in the list up plugins channels. A final such API includes USERINFO directed at a means of accessing updating common user information for the account verification and other default data used in plugins channels across all applications. This may simply be a database that all applications will access to pull default location setting and account management information.

Preferably the launcher will call a plugin channel via one of at least two methods a sub call SysAppLaunch method and a switch SysUIAppSwitch method. The sub call method expects control to be returned to the launcher when the plugin channel exits. This method can be used in cases when a plugin channel does not fully launch such as notifying a plugin channel to update with a proxy server or showing a dialog if needed . In contrast the switch method preferably turns over control to the plugin channel itself. This method can be used when the plugin launches fully. Under a switch call control is typically passed back to the launcher only if the plugin channel explicitly launches the launcher via SysUIAppSwitch. It should be appreciated that calling the plugin channel via the switch method allows the plugin channel to have access to global variables. Thus during a switch method call before making a SysUIAppSwitch call the calling application should use MemPtrSetOwner to change ownership of the parameter block if any to the OS to insure the memory is not freed before the plugin channel is called. Generally this will only apply if the parameter block is used. It should be appreciated that the system calls noted above are all Palm OS specific. Similar mechanisms are used on other platforms but have different names.

Yet another embodiment of the present invention is directed at customization of a wireless device . Using the weather plugin channel shown in as an example a user may purchase this plugin channel and reprogram a hard button on the wireless device with the weather plugin channel. Once reprogrammed tapping the hard button once launches the weather plugin channel and tapping it twice launches the weather update similar to a snappermail application . However if the user has the launcher installed then the launcher could be reprogrammed on the hard button and two clicks button presses will launch the wireless updates for the plugins channels. Other configurations are also contemplated such as tapping on information pushing a menu button on the wireless device etc. In this regard any means for activating a function may apply such as activating a touch screen on the wireless device using other navigation input methods provided on the wireless device e.g. a 5 way navigation device as present on the Treo 600 etc.

It should be appreciated that in addition to the aforementioned techniques customization can take on many other forms. Customization may include auto population of fields in a plugin or channel. As an example a wireless device may auto populate content channels with the user s default location. Once the user enters their default zip code that zip code will automatically deliver internet content for that location. By way of example the user enters 94022 as their default zip code and a Current and 7 Day weather forecast will be created for the Los Altos Calif. area within the weather plugin channel.

According to another embodiment of the present invention a common database may be created for storage of data to be accessed by the launcher and plugins channels. Since it will be possible for a plugin channel to be installed in the absence of the launcher the plugin channel and launcher may both be capable of creating this database if it does not exist.

The common database typically contains account information and the data common to more than one software component including preferences that will be set by the launcher or user such as default city state zip. The common database may also contain data used to manage the plugins channels such as an overview record for each plugin channel that the launcher will access to display a highlight of the plugin channel information. For the weather plugin channel this might be just the high low and current temperature for today. Each plugin can be sub called with a command to update its information via the proxy server to insure the overview record is up to date. This overview record may contain the following information creator id of plugin short description of plugin such as Weather overview details of plugin such as Currently 85 Low 72 High 89 timestamp of last update etc.

According to another embodiment of the present invention this common database may contain plugin channel registration records for the management of the plugins channels. Each record may contain a creator id of a registered plugin channel. The plugin channel may be responsible for insuring that it is registered so the launcher will be able to call and manage it. If the launcher finds a registration that is no longer valid plugin channel has been removed then the launcher may remove that record from the database allowing the data service provider to turn plugins channels on and off. Implementation of the common database can be one database with different types of records described above and each record having a type field. Alternatively each type of record could reside in a separate database of the same type of data. It should be appreciated that each plugin channel may additionally or alternatively create maintain and or use its own database s and record format to store data such as comprehensive data that is retrieved from the data service provider . It is further contemplated to upload a profile created on the wireless device to the data content provider . If the user then changes to a different wireless device the new wireless device will be able to retrieve the profile from the data content provider such that the user is not required to re input preferences.

According to yet another embodiment of the present invention the launcher calls plugins sub call or switch with one of the following launch codes sysAppLaunchCmdNormalLaunch and sysAppLaunchCmdUpdateInfo . The launcher calls SysUIAppSwitch with sysAppLaunchCmdNormalLaunch when a plugin channel is to be fully launched. Calling via this method insures the plugin channel has access to global variables i.e. the method of the call results in global access . Upon launch the plugin channel performs as designed. A user can return to the launcher via tapping a Done button or equivalent. If the user exits the plugin via tapping on the Done button on the screen or any other means the plugin preferably displays the main screen.

The sysAppLaunchCmdUpdateInfo launch code is a custom launch code. The launcher and plugin channel code may contain the definition define sysAppLaunchCmdUpdateInfo 0x8001 for this launch code example specific to Palm OS . The launcher calls SysAppLaunch with sysAppLaunchCmdUpdateInfo to request the plugin channel to update its overview record in the relevant database given there may be a variety of data structures . The launcher may establish a network connection to the data service before calling each plugin channel. Then the launcher may keep the network connection open long enough for the each plugin channel to update during the same network connection. Each plugin channel should also call NetLibClose and pass false for the immediate parameter before returning control to the launcher. Where the present embodiment is used with a Palm OS the plugin channel should return control to the launcher by returning from it s PilotMain function with a zero or error code.

Screen shots are shown in i.e. for a flight information plugin channel usable with the aforementioned launcher. In this regard it should be appreciated that a user is preferably able to access data from a particular plugin channel from different approaches to reach the ultimate information the user desires. For example in the airline plugin channel a user can go by number time or airport. A user also has ability to search service provider for the necessary information e.g. airline code for flight info and upon selection the information is automatically added to the main search criteria.

Preferably when the flight plugin channel is launched it defaults to display the Find a Flight by Flight Number screen shown in and the date defaults to today s date. The user selects the date and enters the airline code and flight number to search for a flight. If the user does not know the airline code the user can press the Lookup button which will display the airline code lookup page. The user then enters the airline name then presses the search button to retrieve a list of airlines shown in . The user will select an airline and press the OK button which will take them back to the find a flight page with the airline code populated. The user will press the Search button to search for the flight information requested.

If the user chooses the Airport Airport button the search area will change to display the date departure time departure airport code and arrival airport code shown in . The date should default to today s date. The user can choose the date and arrival or departure time with the drop down lists. The exemplary time selections are 12 am 6 am 6 am 12 pm 12 pm 6 pm or 6 pm 12 am. The user can tap the Lookup button to search for the flights that fall within the defined search. When selected it populates the field in the previous find a flight.

If more than one flight is found from the search a list should be displayed as shown in . This list functions like all other lists in the launcher and or plugin channel yellow selection 5 way etc. . The Done button of left 5 way should return the user to the flight search page. If only one flight is found from the search as in a flight search the launcher should navigate directly to the flight summary page see and skip the flight list see . If multiple results are found the user can make a selection to reach the summary information for the particular item in the list presented. As an example this may include clicking on items on a touch screen using handset buttons to highlight the desired choice etc. For example the flight summary page shown in .

The flight summary page shown in displays the arrival and departure times of the information retrieved. It also allows the user to update the information from the Update button or pull more information such as gate baggage claim current flight status etc. through the Details button. The flight inquiry returns as many as 4 times for each arrival departure. An exemplary display format includes 

According to one embodiment of the present invention the user is provided with the ability through various means to examine any detailed information available that is not presented in summary page. Preferably if the user taps the Details from the summary page then another query will pull e.g. initiate a new connection with the service provider or just retrieve relevant data from device databases or other software components on the wireless device the full details for this flight. The details may include gate baggage claim meal flight comments cancellation notes meal on time performance and flight tracking information lat long speed altitude flight image etc. . This information may all be available on this scrollable form though it may or may not be depending on the amount of data to be depicted or based on the particular plugin channel at hand.

Once the desired flight is retrieved the user can use the data in different ways including transferring it to other plugins channels or 3rd party applications via data linking on the wireless device . For example the user has the option to add it to their calendar. The information added to the calendar may include one or more of airline flight number departure time arrival time departure airport and gate information and arrival airport.

Screen shots for a movie information plugin channel with the aforementioned launcher according to another embodiment of the present invention are shown in i.e. . A first task is to search and display show times for all movies or a specific movie at the user s favorite theaters. Preferably this is part of the base information that the user provides either by selecting particular theaters or providing other relevant address information or is gathered from the wireless device for example the current location of the wireless device all of which is either requested at the time of the query or is stored in the database for use by the plugin channel. The user may primarily be interested in the list of movies with the movie name genre rating time playing show time and theater name. The user may secondarily be interested in the movie details including the cast description etc. Hence the launcher or plugin channel may control the amount of the data downloaded based on user defined preferences and or its ability to self detect the network speed such that in the present embodiment this information may only be available if the user chooses the Include Movie Details in the search as low bandwidth users may not want to bring this information down for all movies. Users who do not pull the full movie details on the initial search may choose to do so from the movie details screen for a selected movie. Users may also be interested in the theater details related to a show time. This includes the address ticket prices etc. The address of the theater may be linked into the mapping driving directions plugin channel as previously described in regards to data linking. The user may also search for a movie name with the same user defined location or theater. In the case of an update of the movie channel the update would update all defined theaters as well as information based on other approaches to the topic. Hence there are at least three distinct types of updates i at a launcher level update all which updates all plugins channels ii at a plugin channel level which updates just the plugin channel and particular type of current or default search and iii within the plugin channel which only updates detailed information as needed by the user.

A secondary task is to search and display show times for all movies or a specific movie name at a user defined location or theaters. This is useful for travelers who typically do not want to search for movies outside their favorite theater list. The user may search for a location with a City State or Zip. This will return all movies and theaters show times in that local area assuming they don t hit the maximum number of returned locations or show times. For instance there are 185 theaters in New York N.Y. so it is not feasible to return all the movies for these theaters. Hence a warning message may be generated when such a search is entered the warning message notifying the user to enter more specific search criteria. This may be true for other plugins channels as well. E.g. on the 411 plugin channel the user may get a similar warning message if it returns too much information as defined by the application either server side or device side and or other means e.g. user bandwidth device available memory etc . The user may also search for a movie name with the same user defined location or theater.

Selecting a movie from the show time list will display the movie details shown in . In other words once the initial results have been returned the user will have the ability to expand the information obtained the navigating through the particular details such as the cast director time release date running time and review. The user can choose the Theaters button to view the detailed information on the theaters returned in the show times search.

If the user chooses not to return all the movie details in the show time search then only the name genre rating and length are displayed. A button for Movie Details will query e.g. initiating a new connection to the service provider or looking to the local database s for the full details on that movie and display it. Selecting Theaters from the movie details list displays all details on the theaters displaying showing movie that were returned in the results . From here a user should be able to select a theater to add it to their favorites list if it is not already there or map it.

From the New Search button on the main show times listing users will have the ability to search either by a specific movie name or all movies at a specific location or theater or using their My Theaters list . Since this may be a dynamic form the fields are displayed or removed based on the drop down selections see . This will drastically simplify the user interface UI from the user s perspective. This exemplifies another way that the volume of data may be managed i.e. by having dynamic forms search queries data presentations based on a variety of factors available bandwidth user preferences subject matter and search approach to subject matter etc. The theater name city state and zip are only displayed if the user chooses to search by location. The user may choose to search for a specific theater or just a City state or zip location. However there may be limits to the number of results so the user may be asked to add more criteria if their results returns too many results. Clicking the Search button will run the search and display the show times list. Clicking the Done button will return the user to the old show times list.

The My Theaters list may be accessible from the menu of any list page. In this regard each channel as well as the application may have any number of both unique and application wide Menu items associated with it. The items are accessed by activating the menu function on the particular wireless device . In the present embodiment the user may enter a theater name and a city state or zip. The user may also enter just the city state or zip. If one theater is returned it should be added to the list. If more than one theater is returned then a list will be displayed similar to the my theaters list where the user can choose which theater to add . The user may also select a theater from their My Theaters list and remove it by tap and hold or use the drop down menu to remove a theater or by any other activation means as previously described.

According to one embodiment of the present invention the user may also be able to purchase tickets via the wireless device by selecting an appropriate quantity from a drop down menu in the theater listing plugin channel. The information is then passed to a third party application using data linking as previously described.

Screen shots for a mapping plugin channel roads topographical or other usable with the aforementioned launcher according to another embodiment of the present invention are shown in i.e. as previously described. When the mapping plugin channel is launched it may default to the screen shown in mapping or B driving directions depending on the user s preferences.

Using the mapping plugin channel A as an example the user may enter appropriate address information or use the Lookup Address button to retrieve the entered location shown on a map including surrounding area based on scale of display with or without points of interest restaurants ATMs gas stations etc. within a given distance of a particular location . See the exemplary map display of . According to one embodiment of the present invention an entire map program or entire map program for a region of interest is stored on the wireless device to eliminate the need to retrieve data from the data content provider . While the Zoom feature is shown other mapping features may also be provided such as panning or depiction of points of interest POI .

From the map display of the user may obtain driving directions to a given place of interest. In particular the user may select the Origin or Destination buttons to enter an address on the form shown in . This may include the ability to lookup in a third party address book on the wireless device such as that previously described in order to retrieve an address from another application. Such a technique is shown in F and G where a contact information entry e.g. the Kansas City Mo. plant visit previously described is used as an address entry for a obtaining a map or the Origin Destination of driving directions .

According to an alternative embodiment of the present invention the wireless device includes location awareness capabilities global positioning system GPS or cellular tower triangulation which may be used to provide origin address information. In this regard it is contemplated to use GPS locating and similar techniques that are limited in their accuracy e.g. only as accurate as the plugin channel requires . As an example if the GPS location is being used for the mapping plugin channel described above the GPS location information may be accurate up to a single city block. Similarly if the GPS location is being used for movie theater locations or weather the GPS location information may be accurate up to a single zip code.

Limited GPS accuracy may be performed through use of GPS application programming interface API that allows for various levels of accuracy to be requested. In such an embodiment the plugin channel can set the accuracy it needs 

When placing the GPS request the wireless device can check to see the accuracy needed from the plugin channel.

Location information can then be provided by the GPS and used to populate location related fields of a given plugin channel. This may be used for example with the mapping driving direction plugin channel previously described. Display of a map and or driving directions using such a feature is disclosed in greater detail below.

With localization information provided e.g. using the aforementioned techniques direction information may be presented by the mapping driving direction plugin channel in a number of ways. For example images can be provided to give the user instant recognition of each step e.g. a right turn arrow the user could be shown a highlighted route on the displayed map and or the user could be shown a set of turn by turn directions. Turn by turn directions can be depicted by retrieving a route information from a data content provider. The plugin channel may include voice features which could read the instructions to the user through the speaker or other voice communications capabilities of the wireless device .

Screen shots for a storyboard news plugin channel usable with the aforementioned launcher according to another embodiment of the present invention are shown in i.e. . Preferably the user has the ability to choose the categories of news number of stories per category 3 5 or 10 and either a full or summary story from the news setup screen shown in . If the user chooses summary the user can still choose to download the full story when viewing the summary. When the user selects a story the full or summary will be displayed based on their selection in the setup screen .

The main story list shown in displays all the currently downloaded stories and the last updated date time. Stories may be organized in any number of ways by the user. Possible ways include sub channels or icons such as an icon may be added to the left to identify the news category e.g. top stories politics science business world sports entertainment etc. .

The story summary page shown in is displayed if the user has selected to download just the summaries in the setup screen. If the user taps the Full Story button it may query the service provider for the full story and take the user to the full story screen shown in . The Done button will take the user back to the main story list shown in . Note there is no need for the summary screen if the user chooses a Full Story button in the setup screen as generally this will not display the summary.

The full story screen shown in is similar to the summary screen shown in except there is no full story button since the full story is already on the wireless device . If the user selected full story in the setup screen then this screen is displayed when the user chooses the story from the main story list. When they select done it takes the user back to the main list shown in . The user can also download other components of the story such as images if such components are available.

If the user navigates to this screen by pressing the full story button from the summary screen thus querying for the full story then tapping the done button takes them back to the main list shown in .

Screen shots for a 411 phone listings plugin channel similar to common white yellow pages plugin channel usable with the aforementioned launcher according to another embodiment of the present invention are shown in i.e. . Preferably this plugin channel defaults to one of the search categories shown in B C D and E depending on user preference set by the user in the launcher or prior usage or the user may just choose each time. This includes 

Preferably any one of the searches shown in generates a listing page such as that shown in . This listing page may be encoded with data linking capabilities where selecting the returned information will give the user the ability to perform one or more of 

Additionally each of these capabilities may also or alternatively be available through the selection drop down and menu drop down.

The previous several embodiments were directed at specific plugins channels usable with the wireless device . Another embodiment of the present invention is directed at tools for developing the plugins channels themselves. More specifically one embodiment of the present invention is directed at a plugin channel developer s kit that allows developers to easily create a plugin channel for a wireless device or applications running on a wireless device . A significant portion of the registration code may be provided within the development kit such that the developer simply needs to pass a few parameters to make the new plugin channel recognized by the application launcher. After the new plugin channel is recognized by the application launcher the plugin channel can receive and choose to respond to update messages from the application launcher.

Another embodiment of the present invention is directed at classes useable with the aforementioned developer kit. A class describes a particular kind of object. It may contain related methods and or variables. The following embodiments are directed at exemplary classes.

This class allows the developer to add support for vertical scrolling to their view class by simply deriving from CSupportScrolling and providing a method that returns the total size of the viewable window. In addition this message will also manage handling the Scrolling messages sent by the window. An example of using this class is to create an object that is derived from CWindow and add code to derive from CSupportScrolling. The example provided below allows one to turn on scrolling for the dialog in this case a Ski Report dialog in a Weather plugin 

The user then adds a handler for the WM VSCROLL message and passes it to the base CSupportScrolling class.

Finally the class implements a function called GetHeight that will return the total height of the viewable area. With this information the base classes can manage all aspects of the scrolling. It should be appreciated that scrolling in windows for custom rendered applications is often a code intensive process. Many times it is implemented through cutting and pasting from one class into another. The present embodiment simplifies the process for the developer to add scrolling support to their class by generalizing this effort.

This class allows the developer to add support for a vertical scrolling list to their view class by simply deriving from CSupportScrollingList. CSupportScrollingList derives from CSupportScrolling and utilizes all of the functionality of that base class. In addition it adds awareness to a variable number of items that is contained in the list and manages a selected item. The CSupportScrollingList helper class allows one to provide support for vertical scrolling derived from CSupportScrolling above as well as supporting the concept of a list. This is accomplished by a member variable in the CSupportScrollingList class that keeps track of the currently selected item. To provide support for a scrolling list of rendered items the user needs to derive from the CSupportScrollingList class. Here s an example from a 7 day forecast dialog in the weather plugin 

The user will then need to ensure that all stylus events are passed to the base class. This allows the base class to determine if the selected item needs to change.

The user typically should also provide implementations of two functions that will let the underlying base class determine the size of the viewable area. These functions are GetItemSize and GetNumItems . It is often the responsibility of the user defined class to return the appropriate values. GetItemSize should return the size required to display a single item. GetNumItems should return the total number of items to display. Since by multiplying the results of these functions together gives one the total size it is not necessary to provide an implementation of GetHeight as described in CSupportScrolling.

Finally during the rendering of the screen the developer can determine what item is currently selected by querying the member variable m ndxSelected. This will allow the rendering function to draw that item in the manner indicative of a selected item e.g. as a yellow highlight .

This class allows the developer to provide support for a rendered image to their view class by simply deriving from CSupportRenderedUI. CSupportRenderedUI stores the viewable portion of the screen as a bitmap. The developer gets a significant benefit during scrolling of the item because it s only necessary to draw it once so scrolling can be achieved by simply drawing a different section of the bitmap image. To more fully explain this concept in many implementations the majority of screens provided on a wireless device may be rendered rather than using standard controls. This provides the developer with pixel level control over the user interface. By avoiding standard controls the developer can make a richer interface to display the desired content. In known techniques such a process results in a more difficult and time consuming development process. The present embodiment provides support classes to make it easier to have a custom rendered view by generalizing much of the necessary coding.

To utilize this helper class the user should derive from CSupportRenderedUI. It should be appreciated that this class is typically used in conjunction with CSupportScrolling unless the content is expected to only exist on a single page. Provided below is an example of a class that utilizes CSupportRenderedUI the weather alerts dialog in the weather plugin 

The CSupportRenderedUI class manages whether the image needs to be redrawn. This is only necessary if the consumer of this class determines it is necessary. The default implementation allows the user to render the bitmap once and if scrolling occurs it will draw from the previous bitmap of the view. This is particularly beneficial for drawing something that is image intensive and resource intensive as it only needs to be drawn once and can be scrolled around without inflicting the overhead of rendering a second time. This is accomplished with a Boolean variable in the base class that is used to maintain the necessity for a drawing operation. The consumer class can check this variable in the rendering method to determine if they need to re render the image or just use the one that is there.

This class allows the developer to provide support for a rendered image that represents a list of items by simply deriving from CSupportRenderedUIList. CSupportRenderedUIList derives from CSupportRenderedUI and utilizes all of the functionality of that base class. In addition it stores a selected version of the bitmap. For example each concept in the list should have a graphical representation in two states selected and unselected. The disclosed list supports the concept of one selected item which when rendered should be rendered from the selected bitmap image. Everything else is typically rendered from the unselected image. This is a specialized version of the CSupportRenderedUI class above. It adds the ability to support a list of items. It is often used in conjunction with CSupportScrollingList. It adds another bitmap to the consumer class that represents the selected item. Because the disclosed lists have selected items the visual aspect of the view can change if the user is moving around in the list even though the underlying content does not change. If the rendering process is resource intensive the interface can appear sluggish. This may be addressed by keeping two bitmaps that contain the view of everything selected and nothing selected. The rendering function can then cut and paste from the appropriate cached image to render the view. To provide support for a rendered list of items one simply derives from CSupportRenderedUIList as in the example below 

Everything else works in a manner similar to CSupportRenderedUI except the rendering function needs to draw the selected bitmap as well as the non selected bitmap.

This class allows the developer to provide support for a custom rendered form window with labels and data fields . This architecture allows for the developer to simply derive from the CSupportRenderedForm class define some files and have the class manage the drawing and acquire user input. An exemplary screen definition is 

One reason for this class is to get away from the clunky look of the WM controls. Using WM standard controls one can only display a few fields at a time on the screen. The present embodiment in contrast looks visually appealing on the screen and allows for similar functionality as the standard controls. This is addressed by rendering the form from a developer description see code above and letting the base class determine when something requires editing. Based on the type the appropriate control is displayed typeEdit edit control typeList drop down control . To provide support for a rendered form the developer should derive from this class from the New Location dialog in the Weather plugin 

This will allow the user to add code to describe the form as above. The user should then add a message handler for WM PAINT and call RenderItems which is defined in the base class and will render the items as specified by the user.

WndUpdateChannels is a custom class that was developed to add support for drag drop. This is a custom interface that allows the user to check items for inclusion or uncheck for exclusion from updates. In addition if the user clicks and drags on an item they can manipulate the ordering of the update. Unlike the other classes above this class is not a utility used as building blocks for other user interface UI classes. Its primary function is to provide support for managing whether a plugin should be updated from Update All and the order in which it appears in the display in PageOne. One benefit of this embodiment is that this custom control allows the user to drag and drop the selected item.

This class provides data reading from different input streams. Its generic nature enables a developer to use it to parse data coming from either a file or HTTP data transfer. Different read methods may require the data be converted to a native format as expected by the application or plugin channel . This can also be used to specify different delimiters and character encodings e.g. ISO88591 to give a broad range of flexibility at a low level. This class has the ability to recognize embedded binary data e.g. PNG images along with text data allowing the developer to mix the two. See the exemplary code in Appendix A.

A summarized example below shows use of a CacheFileTool class and a HTTProxyHelper Class. Both of these classes use methods inherited from the Token Parser Class. Using the movie plugin as an example initially the plugin loads the movies data from the wireless device using CacheFileTool. When movie details are requested by the user the helper variable is connected via HTTP to a server at the data service provider and the returned data is read in the same manner using this method loadMovieDetails Movie movie . The two different data sources are read by movie object using Token Parser methods.

This class can be derived from the Token Parser Class described above and thus may inherit that functionality. In addition this class provides a capability of reading and writing to file systems. By encapsulating generic read write functions into this class the developer can port the resulting interface from WM to a J2ME environment. Data objects can then be coded using this class to use different file systems in essentially the same manner even though the underlying file systems may be very different. Exemplary code showing such functionality is provided below. See also the exemplary code in Appendix B.

The foregoing description of various embodiments of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. By way of example any number of plugins channels may be provided those set forth in the description above are thus a few examples of contemplated plugins channels. Other such plugins channels are also contemplated such as a plugin channel to access selected corporate databases e.g. CRM which would allow some personnel e.g. sales department to get up to the minute data on a customer before a sales call without having to possess the data on the wireless device . Additional plugins channels contemplated include investment management plugins channels e.g. stock tickers updates sports information rental car information reservation plugins channels and information forwarding plugins channels e.g. to forward a reservation to one s secretary or other interested party . Thus the embodiments were chosen and described in order to explain the principles of the invention and its practical application to enable one skilled in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated.

