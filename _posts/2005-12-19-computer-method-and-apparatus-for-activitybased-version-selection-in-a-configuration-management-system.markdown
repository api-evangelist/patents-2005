---

title: Computer method and apparatus for activity-based version selection in a configuration management system
abstract: A computer method, system and apparatus for selecting version of a software program artifact includes history means and processor means. The history means indicate (a) a baseline version of each artifact in a given plurality of artifacts forming a subject software program configuration, and (b) respective change-set information per artifact. Different change sets correspond to different versions of the artifacts. The processor means determine version of an artifact in the subject software program configuration using the indicated baseline versions and change-set information. The processor means enable the configuration management system to display the determined version of the artifact to a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08359571&OS=08359571&RS=08359571
owner: International Business Machines Corporation
number: 08359571
owner_city: Armonk
owner_country: US
publication_date: 20051219
---
Software development is typically performed as group projects. A subject software system is developed through design efforts test efforts implementation efforts and maintenance efforts. There may be different groups and different group members participating in each of these efforts. Throughout these efforts and among the work group members various modeling and other development tools are used for increased communication and consistency in developing the subject software system. A software configuration management system is one such tool.

Software configuration management systems allow teams of users software developer engineer to work with artifacts of a subject software system. An artifact is the persistent result of work done by a user typically persisted in a file system such as a model and source code.

Software configuration management SCM systems must provide a way for users to configure their work areas to select appropriate versions of the artifacts e.g. files with which they are working. Traditional SCM systems focus the configuration of work areas on the selection of individual artifacts using file names version numbers or patterns of each to select the appropriate versions.

The present invention addresses the problems of the prior art and provides an activity based version ABVS configuration management system. In a preferred embodiment the invention employs artifact history means and processor means. The artifact history means indicate a a baseline version of each artifact in a given plurality of artifacts forming a subject software program configuration and b respective change set information per artifact. Different change sets correspond to different versions of the artifacts. The processor means determine version of an artifact in the subject software program configuration using the indicated baseline versions and change set information. The processor means enables the configuration management system to display the determined version of the artifact to a user.

The processor means routine is preferably rules based and includes gap selection error resolution and conflict selection error resolution.

Embodiments include computer method apparatus and program product of selecting a software program artifact version. Further embodiments include an artifact selector for a configuration management system.

Illustrated in is a subject software program formed of one or more artifacts . Each artifact has respective versions A B etc. Thus one configuration of subject software program employs version A of artifact version B of artifact and version A of artifact . Other configurations of subject software program use other versions of artifacts . A configuration management system enables users to produce and work with e.g. edit test redesign etc. such different configurations of subject software program . Thus a major part of configuration management system is the version selector which selects the proper software program artifact version at the various times of user operation on interaction with a subject program and its various configurations . The version selector supports the workspace of a user and contents displayed therein as further explained below. The present invention is an improved or novel version selector as heretofore unachieved by the prior art.

The present invention provides activity based version selection ABVS in configuration management system . The invention system abstracts the selection method to better express the configuration of a work area in terms of the projects with which the user is working along with the logical units of incremental work he is doing.

An artifact is a persistent result of work done by a user typically persisted in a file system such as models and source code.

An activity is used to track the results of work done by a user. The change set of an activity is the set of changes to artifacts made by the practitioner to perform that activity.

A project is used to group related sets of artifacts and related sets of activities. A project is also used to group related sets of projects which are called sub projects of that project.

A baseline is a persistent state of a project which identifies versions of each artifact in the project as well as which other projects are sub projects of the project. The persistent state of the sub project relationship is called a sub baseline .

A workspace is used to define the work environment of a user to contain the artifacts required by that user and the activities that track the results of performing those tasks. A workspace is said to accept the project baselines and activity change sets that define its configuration.

The basic motivation behind the present invention ABVS is that it is based on objects that should seem intuitive to users baselines of projects are what I m starting with and change sets are natural units of work representing deltas from those baselines. ABVS allows users to specify a working environment based on a specification that at a high level says I want to see the versions in baselines of these projects and their sub projects combined with the changes indicated by the following change sets. 

While some SCM systems provide an activity or change set mechanism for organizing work none combine activity information with project information to select versions nor use the aggregation of projects via a sub project relationship to select versions. The present invention ABVS does both. Thus embodiments of the present invention combine change sets and baselines to define a configuration as will be made clear below.

One ABVS scenario is where the workspace s configuration refers only to project baselines and no change sets and no two baselines refer to versions in the same artifact history. In this case the workspace version selector selects the versions specified in the baselines and displays the same to the end user.

Next consider a less trivial ABVS scenario a workspace configuration contains one project baseline that references version A of an artifact history and one change set that references version B a direct successor of version A. In this case the version selector selects version B for the workspace i.e. to display to the end user .

Things get more complicated when a workspace s configuration references multiple versions spread arbitrarily across a single artifact history graph. The question is which version does the user want to see when accessing the artifact 

One multiple selection case has a clear answer. If the version referenced by the baseline and all the versions referenced by the change sets are a contiguous sub graph of the artifact history s version graph where exactly one version in the sub graph does not have any successors then the invention system picks that one version. This case corresponds to the logical situation where the user has identified a set of baselines and change sets that modify the same artifact history and logically build on each other.

For example in the artifact history illustrated in baseline L change set A and change set A reference versions A B D and F which from a contiguous sub graph of the artifact history. Because versions A B D and F are a continuous sub graph a workspace that accepts these change sets A and A and baselines L selects version F utilizing version selector . The motivation here is F is the product of work introduced in versions A B D i.e. version F s predecessors and F itself baseline L represents the work done in versions A and B change set A represents the work done in version D and change set A represents the work done in version F. Altogether then these change sets and baselines add up to the set of versions A B D F that produced version F. So version F must be the correct version to select in a workspace that accepts those change sets A and A and baselines L .

To generalize a bit a single version can be thought of as representing the sum of all the work done in that version and all its predecessor versions. By extension a baseline can be thought of as representing the sum of all the work done in a set of versions of a set of artifact histories one version and its predecessor versions per artifact history . Applicants say that in the invention ABVS method and technique at a baseline activates all these versions. A change set on the other hand is thought of as representing only the work that was done to produce its set of versions it activates only the versions in the change set and not the predecessors of those versions .

The starting point for version selection in the invention ABVS system is the calculation of the set of all versions activated by the workspace s configuration. After this point how the versions got into the configuration i.e. whether because of baselines or sub baselines or because of change sets is irrelevant to the selection process. For ABVS system to select a version it must be possible to describe the activated version set as containing and only containing a single version and all its predecessor versions.

With reference to consider a more complex example. Suppose that the workspace accepts baseline L change set A change set A and change set A indicated in by underlining . The activated version set indicated by shaded circles is thus the set containing versions A B C D and E or A B C D E. Where versions A B C D and E form a continuous sub graph the activated version set can be described as version E and all its predecessors. As a result the invention system allows the workspace to select and display version E upon acceptance of base L and change sets A A and A.

Referring to consider a problematic example. Suppose that the workspace accepts baseline L and change set A. The subject change sets and baseline in the configuration underlined produce the activated version set A B F shaded . There is no one version in the graph that represents only the work done in this activated version set. Version F logically contains work done in version D a version not activated by the subject change sets A and baseline L and hence cannot be the version that the workspace invention system selects. Since this set of change sets A and baselines L does not select all the predecessors of a single version i.e. does not form a contiguous sub graph the configuration is invalid and the workspace is unable to select a version of the artifact history. Applicants call this a gap selection error. When there are such gap errors the invention system provides to the user a list of change sets that can be added to eliminate the gaps.

To consider another problematic example attention is brought to . Suppose a workspace accepts baseline L and change sets A A A and A each shown underlined . This produces an activated version set A B C D E F shown shaded in . The problem here is that the activated version set does not activate a single version and all its predecessors but rather activates two versions E and F and all their respective predecessors. Applicants term this a conflict selection error. However unlike a gap selection error a conflict selection error can be resolved by creating a new version H. In this case invention system creates new version H as direct successor of versions E and F. That is invention system merges those versions E and F using version D the nearest common ancestor as the base of the merge and produces new version H. Version H is then employed or utilized as part of some new or existing change set which the workspace includes in its configuration.

A similar conflict selection error occurs if the workspace configuration includes baseline L change set A and change set A underlined activating the version set A B C D as illustrated shaded in . However in this case the error is resolved by accepting change set A into the workspace making the activated version set A B C D E. As a result the workspace through invention system selects version E.

Since multiple baselines of the same project history can appear in a workspace configuration the invention ABVS system is also used to determine which baseline of a project history to select for a workspace. Although ABVS for project histories is conceptually analogous to that for artifact histories it has a couple of key differences.

The first difference is that composite baselines graphs add the sub baselines of activated baselines as new activated baselines and then ABVS is used to select a baseline from the new set of activated baselines. This selected baseline is then used to select versions from artifact histories.

The second difference is that no gap selection errors can occur during baseline selection. This is important because a baseline can have members that are earlier than the members of its predecessor and thus it is incorrect to say that a baseline must include everything that its predecessors include. In fact the whole point of a new baseline might be to roll back some changes in a previous baseline.

Baseline conflict selection errors are still possible though. If conflict errors arise during baseline selection the baselines that conflict must be merged or the workspace must be reconfigured to accept different baselines or activities before a new baseline of the project can be created.

In a preferred embodiment the activity based version selection system of the present invention is implemented or specified as a sequence of rules. Each rule has a set of conditions and a set of actions. If all conditions of a rule are satisfied the actions of that rule are executed. A rule is executed as many times as possible before the next succeeding rule in the sequence is executed.

Conflict Multiple versions of the same artifact are selected. Resolve as described above by merging the multiple versions using the nearest common ancestor version as the base of the merge.

Gap An activated version has a predecessor that is not activated. Resolve as described above by providing to the user a list of change sets that if added eliminate the gap.

Client computer s devices and server computer s provide processing storage and input output devices executing application programs and the like. Client computer s devices can also be linked through communications network to other computing devices including other client devices processes and server computer s . Communications network can be part of a remote access network a global network e.g. the Internet a worldwide collection of computers Local area or Wide area networks and gateways that currently use respective protocols TCP IP Bluetooth etc. to communicate with one another. Other electronic device computer network architectures are suitable.

In one embodiment the processor routines and data are a computer program product generally referenced including a computer readable medium e.g. a removable storage medium such as one or more DVD ROM s CD ROM s diskettes tapes etc. that provides at least a portion of the software instructions for the invention system. Computer program product can be installed by any suitable software installation procedure as is well known in the art. In another embodiment at least a portion of the software instructions may also be downloaded over a cable communication and or wireless connection. In other embodiments the invention programs are a computer program propagated signal product embodied on a propagated signal on a propagation medium e.g. a radio wave an infrared wave a laser wave a sound wave or an electrical wave propagated over a global network such as the Internet or other network s . Such carrier medium or signals provide at least a portion of the software instructions for the present invention routines program .

In alternate embodiments the propagated signal is an analog carrier wave or digital signal carried on the propagated medium. For example the propagated signal may be a digitized signal propagated over a global network e.g. the Internet a telecommunications network or other network. In one embodiment the propagated signal is a signal that is transmitted over the propagation medium over a period of time such as the instructions for a software application sent in packets over a network over a period of milliseconds seconds minutes or longer. In another embodiment the computer readable medium of computer program product is a propagation medium that the computer system may receive and read such as by receiving the propagation medium and identifying a propagated signal embodied in the propagation medium as described above for computer program propagated signal product.

Generally speaking the term carrier medium or transient carrier encompasses the foregoing transient signals propagated signals propagated medium storage medium and the like.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

While this invention has been particularly shown and described with references to preferred embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.

For example the computer architecture and network configuration of are for purposes of illustration and not limitation. Other computer architectures and configurations are suitable.

Further artifact history graphs indicating change sets baselines project and artifact versions of a subject workspace may be implemented as linked lists data arrays tree structures objects or other programming structures known in the art.

