---

title: Method and system for providing an interface through which an application can access a media stack
abstract: A communications system provides a media sender object and a media receiver object that provide an interface between a media stack and an application. The application can use the media sender object to send content to a source media stack and the media receiver object to receive content from a sink media stack. The application programming interface of the media sender object and the media receiver object provides functions for registering and un-registering buffers for storing and receiving content. When a source media stack is ready to send content, it invokes each registered source to collect content to be sent. When a sink media stack has received content, it invokes each registered sink to provide the received content. An application interfaces with a media sender object and a media receiver object to add content to a channel or to receive content from a channel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716359&OS=07716359&RS=07716359
owner: Microsoft Corporation
number: 07716359
owner_city: Redmond
owner_country: US
publication_date: 20050509
---
This application is related to U.S. patent application Ser. No. 11 124 911 filed May 9 2005 entitled Method and System for Generating a Routing Table for a Conference and filed concurrently now U.S. Pat. No. 7 593 986 issued on Sep. 22 2009 which is hereby incorporated by reference.

The described technology relates generally to communication systems and particularly to communicating via a channel having a media stack.

Video conferencing allows conference participants who are at different locations to participate in a conference. Typically each conference participant has a computer based video conferencing system that includes a video camera a microphone a display device and a speaker. The video conferencing system of a conference participant captures the video and audio of that conference participant using the video camera and microphone and transmits the video and audio to the video conferencing systems of the other conference participants. When a video conferencing system receives the video and audio from the other conference participants it presents the video on the display device and outputs the audio to the speaker. A video conferencing system may display each video in a different window on the display device or in a different area of a window. Thus the conference participants can view the video and hear the audio of the other conference participants.

To support video and audio conferencing the participant computer systems need to be interconnected in some way. Each connection has a video channel and an audio channel between participant computer systems. Each channel includes a send stream and a receive stream for sending and receiving content of the channel. Each endpoint of a channel includes a source and a sink that are connected to the streams of the channel. For example the source and the sink of an audio channel are microphones and speakers respectively. For both streams of an audio channel a microphone is connected at one endpoint and a speaker is connected at the other endpoint.

Each endpoint of each stream of a channel may have a media stack of components that implement the functions of the stream. The components of the media stack of an audio channel for a source may receive audio content in PCM format convert the audio content from PCM format to G.722 format packetize the audio content that is in the G.722 format and transmit the packetized content to the sink at the other endpoint. The components of a media stack of an audio channel for a sink may receive packetized audio content from the source at the other endpoint de packetize the received content convert the de packetized content from G.722 format to PCM format and provide the content in PCM format to the local sink.

The existing channel structure allows only actual devices e.g. microphones and speakers to be sources and sinks of a channel. If for example a developer wants to intercept and record the content that is received at the sink then the sink device driver will need to be modified to perform the intercepting and recording. In addition if a developer wants to provide additional content not provided by a device then the developer will also need to modify a source device driver. Each developer who wants to provide additional functions will need to modify the drivers accordingly. It would be desirable to have a technique that would allow for the intercepting of content and providing of content in a uniform manner to make it easier for developers to intercept content and provide additional content.

A communications system provides a media sender object and a media receiver object that provide an interface between a media stack and an application. The application can use the media sender object to send content to a source media stack and the media receiver object to receive content from a sink media stack. The application programming interface of the media sender object and the media receiver object provides functions for registering and un registering buffers for storing and receiving content. When a source media stack is ready to send content it invokes each registered source to collect content to be sent. When a sink media stack has received content it invokes each registered sink to provide the received content. An application interfaces with a media sender object and a media receiver object to add content to a channel or to receive content from a channel.

A method and system for interfacing with a media stack in a uniform manner is provided. In one embodiment a communications system provides a media sender object and a media receiver object that provide an interface between a media stack and an application. The application can use the media sender object to send content to a source media stack and the media receiver object to receive content from a sink media stack. The media objects provide a uniform interface for the application and for the media stack. The application programming interface of the media sender object and the media receiver object provides functions for registering and un registering buffers for storing and receiving content. The buffers may be represented by a media buffer object. An application that is to send and receive content registers buffers containing the content with a media sender object and registers buffers to receive the content with a media receiver object. When a media object has completed its use of a buffer it signals the application. If the buffer contains received content the application can then access the content of the buffer. If the buffer contains content that was sent then the application can reuse the buffer when sending additional content. An application registers media sender objects and media receiver objects with the streams of a channel. Drivers of actual devices also register with a media stack. Media sender objects and media receiver objects may be considered to be virtual sources and sinks and drivers for actual devices may be considered to be non virtual sources and sinks. The media stack provides the channels with the opportunity to send or receive content. When a channel is ready to send content it invokes each registered source to collect content to be sent. When a channel has received content it invokes each registered sink to provide the received content. An application interfaces with a media sender object and a media receiver object to add content to a channel or to receive content from a channel. For example an application may provide background music to an audio channel using a media sender object and may intercept and archive the content of the audio channel using a media receiver object. In this way applications can use a common interface to interface with the media stack of a channel.

Tables 1A 1B 2A 2B 3A and 3C list the methods and properties of the application programming interface API for the media sender object the media receiver object and the media buffer object in one embodiment. Tables 1A and 1B list the methods and properties of the media sender object. The media sender object provides methods for enqueueing media buffer objects containing content to be sent and dequeueing media buffer objects whose content has already been sent canceling queued media buffer objects and activating and deactivating the functions of the media sender object. The media sender object provides properties indicating status of the current pending and completed media buffers threshold specifications and media formats. The threshold specifications indicate a threshold mode and a threshold used by the media sender object to notify an application via an event when the threshold of that threshold mode is reached. The application can set the threshold mode to the remaining bytes i.e. that have not yet been sent in the pending media buffer objects remaining pending media buffer objects or remaining bytes in the current media buffer object. When the application defined threshold is reached for the application defined threshold mode then the media sender object sets an event to notify the application.

Tables 2A and 2B list the methods and properties of the media receiver object. The media receiver object provides methods for enqueueing media buffer objects for storing content that is to be received and dequeueing media buffer objects that contain received content canceling queued media buffer objects and activating and deactivating the functions of the media receiver object. The media receiver object provides properties indicating status of the current pending and completed media buffer objects threshold specifications and media formats. The threshold specifications indicate the threshold mode and threshold used by the media sender object to notify an application via an event when the threshold of the threshold mode is reached. The application can set the threshold mode to the remaining bytes i.e. bytes that do not yet have content stored in them in the pending media buffer objects remaining pending media buffer objects or remaining bytes in the current media buffer object. When the application defined threshold is reached for the application defined threshold mode then the media sender object sets an event to notify the application.

Tables 3A and 3B list the methods and properties of the media buffer object. The media buffer object provides methods for setting the length of an allocated media buffer and for copying media buffers between managed and unmanaged memory. The media buffer objects provide properties for the media buffer such as the allocated length and processed length.

The computing device on which the communications system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives . The memory and storage devices are computer readable media that may contain instructions that implement the communications system. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communications link. Various communications links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the communications system may be implemented in various operating environments that include personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and so on. The computer systems may be cell phones personal digital assistants smart phones personal computers programmable consumer electronics digital cameras and so on.

The communications system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

From the foregoing it will be appreciated that specific embodiments of the communications system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. In one embodiment the media receiver object may provide metadata associated with a buffer to be transmitted. The metadata may be an array of structures with each structure corresponding to a certain amount of content e.g. 10 milliseconds . When the content is audio the structure may identify whether the content was modified by an audio healer e.g. to perform error concealment or delay reduction in voice over IP compressed or stretched. The structure may also identify whether a frame contains concealed audio or comfort noise audio generated by an audio healer. Accordingly the invention is not limited except as by the appended claims.

