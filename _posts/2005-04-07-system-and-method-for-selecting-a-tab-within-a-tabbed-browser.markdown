---

title: System and method for selecting a tab within a tabbed browser
abstract: The techniques and mechanisms described herein are directed to a method for managing and selecting one out of large set of open tabs in a tabbed browser. Browsing software is configured to provide a quick pick user-interface that visually displays the content of the several tabs, such as a by displaying a thumbnail for each tab. The thumbnails allow a user to easily distinguish between each opened tab. The browsing software may also be configured to recognize a user selection from within the quick pick user-interface and in response, switch back to a tabbed window view and display the selected tab in that view. The browsing software may adjust the tab row so that the selected tab is positioned in a favorable position within the tab row. In addition, within the quick pick user-interface, the user may reposition the thumbnails and/or close the thumbnails, thus affecting the associated tab in the tab row.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07596760&OS=07596760&RS=07596760
owner: Microsoft Corporation
number: 07596760
owner_city: Redmond
owner_country: US
publication_date: 20050407
---
This document generally relates to browsing software and more particularly to tabbed browsing software.

Browsing the World Wide Web the web the graphical portion of the Internet has become quite popular in recent years. A software program commonly referred to as a web browser or just browser provides an easy to use point and click interface for accessing various content on the web. Upon entering a web address or URL of a particular website the browser requests web pages from a web server hosting that website. The browser then interprets the web pages and displays the content on a display. The web pages include hypertext and hyperlinks that when selected cause the browser to request additional content associated with them. By selecting the hypertext and hyperlinks a user may conveniently navigate through pages of information commonly known as browsing or surfing the Internet.

Each time one of the hypertext or hyperlinks is selected the new content is downloaded into the current window. Depending on the network bandwidth this may cause a brief to extensive delay. For convenience additional windows may be opened to view multiple web pages. However after opening several web pages each in its own window the taskbar may become quite cluttered. This makes it difficult to re locate a particular web page. Tabbed browsers have been introduced to help manage the viewing of multiple web pages.

Tabbed browsers load web pages in tabs within the same browser window. Therefore only one item appears on the taskbar even though multiple web pages are loaded. New tabs may be opened via a hotkey a context menu item on a link or the like. The new web page downloads in the background into the new tab. This allows a user to continue viewing the current web page without automatically switching to the other web page. At any time the user may click on the associated tab and view that web page. Tabbed browsing makes it easier and more convenient to view multiple web pages. However when multiple tabs are open users may experience difficulty switching between them.

The present mechanism further enhances the tabbed browsing experience especially with selecting one out of a large set of open tabs.

The techniques and mechanisms described herein are directed to a method for managing and selecting one out of several open tabs in a tabbed browser. Briefly stated browsing software is configured to provide a quick pick user interface that visually displays the several tabs. The quick pick user interface displays a rich set of information for each tab such as a thumbnail meta data describing each tab e.g. title and or other adornments. The thumbnails allow a user to easily distinguish between each opened tab. The browsing software may also be configured to recognize a user selection from within the quick pick user interface and in response switch back to the tabbed window view and display the selected tab in that view. The browsing software may adjust the tab row so that the selected tab is positioned in a favorable position within the tab row. In addition within the quick pick user interface the user may reposition the thumbnails and or close the thumbnails thus affecting the associated tab in the tab row.

Briefly the techniques and mechanisms described herein are directed to managing and selecting one out of a large set of open tabs within a tabbed window displayed by a browser. A quick pick user interface is provided that visually displays a rich set of information such as thumbnails meta data describing each tab e.g. title and the like. The thumbnails may be selected and or moved within the quick pick user interface. Upon switching back to the tabbed window view the tab row and the contents of the tabbed window are modified based on the interactions that occurred in the quick pick user interface. The following discussion describes the quick pick mechanism within a tabbed browser that supports tabbed heterogeneous windows. However after reading the following description one skilled in the art could incorporate the quick pick mechanism into other types of tabbed browsers. As will be described in more detail below the present quick pick mechanism provides a convenience that was unavailable until now.

The various embodiments of the quick pick mechanism may be implemented in different computer environments. The computer environment shown in is only one example of a computer environment and is not intended to suggest any limitation as to the scope of use or functionality of the computer and network architectures. Neither should the computer environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in .

With reference to one exemplary system for implementing a quick pick mechanism includes a computing device such as computing device . In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Thus computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connection s is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Various modules and techniques may be described herein in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implement particular abstract data types. These program modules and the like may be executed as native code or may be downloaded and executed such as in a virtual machine or other just in time compilation execution environment. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

Thread boundary represents a boundary between a single thread i.e. a frame thread that handles the processing for the components shown to the left of thread boundary and multiple threads that handle the processing for the components on the right of thread boundary . Each instance of content window is associated with at least one of its own threads. That thread also handles the processing for the associated toolbars menus custom bars status bars and content .

By having multiple threads at least one for each content window the architecture prevents a potential bottleneck caused by having only one thread handle the messages for all HTML rendering across the multiple tabs. In addition having multiple threads reduces the likelihood of unnecessary delays or timeouts when downloading web pages. Having multiple threads also makes the architecture more resilient because if a tab hangs only one tab hangs instead of potentially hanging all of the tabs. This is in contrast with other tabbed browsers that host their tabs on a single UI thread. In these tabbed browsers the entire application hangs when a single tab is blocked. Each individual thread may be prioritized.

Each of the components in architecture is now described. As mentioned above each content window is associated with its own toolbars menus custom bars status bars and content as needed. For example if there are five tabs open five instances of each add on e.g. custom bar toolbar etc are created and hooked to their own content. Similarly if menus or status bars are modified via internal logic HTML document hosting add ons or the like the menu or status bar associated with that content window is changed. The add ons and the content window operate in a well know manner. Because the add ons do not know about tabs the architecture does not modify the operation between the add ons and the content window. Instead the architecture wraps each set of content windows into one browser frame . While not shown there may be multiple browser frames each with a set of tabbed heterogeneous windows.

Content window maintains state for the content window such as size position visibility of frame elements and the like. The state may be persisted into a stream when the tabbed browser closes and then may be read when a new content window is launched. Alternatively the state may be saved in a registry and read from the registry when the new content window is launched.

The tab window lives on the frame thread. Each tab window is configured to manage communication between the outer frame components e.g. navigation bar browser frame etc and an individual tab. The tab window holds pointers to its associated content window and interfaces so that it can manage cross thread communication between the outer frame components and the individual content window . The cross thread communication may involve cross thread calls. In one embodiment calls from the browser frame to the content window may be asynchronous. The tab window is then responsible for marshalling the parameters and posting a message to the main window of content window . In contrast calls from the content window to the frame browser may be synchronous. The tab window is then responsible for marshalling the interfaces of the corresponding tab window . The tab window may also convert synchronous calls into asynchronous calls in order to reduce the likeliness that a tab will hang.

The tab window may also cache a limited amount of state. This allows the tab window to provide a quick synchronous lookup of state to other components. When the tab window receives an event from the content window that modifies the state the tab window propagates these events up to the tab window manager .

In addition the tab window exposes several operations that can be performed on a tab such as destroy set visibility set size set position and order. The tab window also exposes operations that the frame needs for asynchronously invoking a tab. These operations may be exposed via individual application programming interfaces API or through a generic API. For the present quick pick mechanism each tab window may have its own set of characteristics. For example one of the tab windows may be a quick pick window which has a different navigation characteristic than other tabbed windows. As will be described and illustrated in the navigation characteristic for the quick pick window may modify a tab row and modify content displayed within a tabbed view of the tabbed browser.

The tab window manager hosts multiple content windows via multiple tab windows . The tab window manager manages the overall state of each of the tabs. The state may include a top level URL a page title a back forward button availability a favorite icon for the current page a progress state for the current page security information reflected in the user interface e.g. HTTPs info and the like. The tab window manager may synchronously query the tab window for per tab data. In addition the tab window manager manages the operations performed on the tabs such as open close select move set size set position set order and the like. This is achieved by accessing the operations exposed via the tab window .

The browser frame hosts the navigation bar frame command bar tab window manager and the tab UI . The browser frame may also directly or indirectly host a rebar control not shown . The browser frame brokers communication between these hosted components.

The tab UI is configured to render the user interface for the collection of tab windows . As will be described later in conjunction with the Tab UI may provide a quick pick user interface for implementing the functionality for the present quick pick mechanism. In addition the tab UI controls the rectangle for the tabs browser region. Tab UI receives events from tab window manager via browser frame . The events pertain to the tabs being managed by tab window manager . The events include an OnTabListChanged event an OnTabChanged event and the like. The OnTabListChanged event is sent by tab window manager when changes are made to a collection of tabs e.g. Open Close Reorder etc . The OnTabChanged event is sent by tab window manager when a single tab changes e.g. progress title URL . The corresponding tab window sends a notification to tab window manager which forwards the notification to tab UI . The notification identifies the tab. This method of communication keeps the communication serialized. In an alternate embodiment individual tab windows may directly call into tab UI . In addition there may be multiple tab UI components each one handling the same set of tabs but for a different location on the user interface. For example one tab UI may handle a tab row along the top of the display and another tab UI may handle a tab listview along the side of the display.

The frame command bar provides a set of commands that have been determined to be the most useful. By having this set of commands readily available for any tab a user can conveniently locate one of the commands for any tab.

The tabbed window includes a tab band or tab row one or more tabs e.g. tabs and content associated with the tab currently in focus e.g. tab shown in . In addition tabbed window may include a new tab for creating a new tab within the tabbed window . As additional tabs are opened the visible portion of each tab is reduced to accommodate the additional tabs. Once there is inefficient space for an additional tab some of the tabs are visually removed from the tabbed window . However visually removed tabs are still maintained as tab windows tab window and are managed by the tab window manager shown in . The visually removed tabs may be accessed by clicking either a left or right overflow indicator and respectively. The left and right overflow indicator and appear within the tabbed window when one or more of the open tabs are visually removed from the tab row . When there are a limited number of open tabs e.g. four tabs the text within each tab may be sufficient to distinguish between the tabs however once a user has opened several tabs it is difficult to distinguish among the several open tabs because the text associated with each tab is reduced and some of the tabs may not even be visible. For illustrative purposes the present example displays the text for the title of each tab using its original order e.g. 1 appended with Site . As one can see as more tabs are opened titles for certain tabs e.g. tabs and display limited useful information about the content of the associated open tab.

In accordance with the present quick pick mechanism the tabbed browser provides a mechanism for accessing a quick pick user interface. The mechanism may be a quick pick button a context menu selection not shown and or the like on the user interface . The mechanism may also be a hot key not shown entered through a keyboard. A user may select the quick pick button to access the quick pick user interface.

The navigation bar may include an address bar a back button a forward button and a search box . The content of the address bar may be maintained for each tab. Thus when clicking through the tabs the address bar may display the address for the currently selected tab i.e. the tab in focus . The search box allows text to be entered and searched for in the currently selected tab.

In one embodiment items in the user interface that are per frame include the navigation bar and the tab band . Items in the user interface that are per tab include content . In one embodiment content may include different type of data sources. For example content may be a web page a shell folder a navigation based application and the like. This heterogeneous content may be hosted in a single frame. In another embodiment the content associated with each tab may all be web pages.

Each thumbnail may include a close indicator e.g. close indicator . If a user selects close indicator the corresponding thumbnail e.g. thumbnail is removed from the quick pick window and its associated tab e.g. tab is removed from the tab row . In addition the rich set of information may include a page title or other adornment for each item in the quick pick window . When a user hovers a pointer e.g. pointer over one of the thumbnails e.g. thumbnail the thumbnail may visually change appearance such as changing its color. In addition the tab tab associated with the hovered thumbnail may change its appearance such as changing color bolding text and the like. The user may select any one of the thumbnails to view its corresponding content in the tabbed window.

State may occur from state . At state the tabbed browser adds a new tab and changes the in focus tab to the new tab. In addition the tabbed browser may visually remove some of the tabs displayed on the tab row if the addition of the new tab makes the number of tabs in the tab row more than a pre determined number. After the new tab is added the state transitions back to state .

State may occur from state . At state the tabbed browser responds to the user s selection of a tab or overflow indicator. The tabbed browser adjusts the in focus tab and adjusts the tabs that are displayed on the tab row accordingly. After the tabbed browser handles the user s selection the state transitions back to state .

State may occur from state . State is responsible for handling the present quick pick mechanism. From state several transitions may occur.

State may occur from state . State exits the quick pick mechanism such as via a close button on the quick pick user interface. From state the tabbed browser transitions back to state .

State may occur from state . At state the tabbed browser closes a thumbnail in response to a user s action within the quick pick user interface. For example the user may have selected a close button within the quick pick user interface. Upon closing the thumbnail the tabbed browser may also perform other operations associated with closing the thumbnail such as removing the associated tab from the tab row deleting the associated tab window and informing the tab window manager that the associated tab window is no longer open. After the tabbed browser handles closing the thumbnail the state transitions back to state .

State may occur from state . At state the tabbed browser may rearrange the thumbnails in response to a user s action within the quick pick user interface. For example the user may have selected one of the thumbnails dragged it to another location and dropped it next to different thumbnails. The tab browser will change the order of the thumbnails displayed in the quick pick user interface. In addition the tab browser will change the order of the tabs within the tab row to reflect the re positioned thumbnail. After the tabbed browser handles the re arranging of the thumbnails the state transitions back to state .

State may occur from state . At state the tabbed browser may perform operations in response to the user s selection of one of the thumbnails displayed in the quick pick user interface. For example the tabbed browser may set the in focus tab to be the tab associated with the selected thumbnail. In addition the tabbed browser may intelligently slide the tabs within the tab row so that the selected thumbnail is displayed in a favorable position. For example if the selected thumbnail corresponds to a tab in the overflow on the left side of the tab row each tab in the tab row may move to the right until there are not any more items in the overflow on the left. Alternatively each tab in the tab row may move to the right until the selected item moves to a favorable position on the tab row such as in the center. Likewise if the selected thumbnail corresponds to a tab in the overflow on the right side of the tab row each tab in the tab row may move to the left until there are not any more items in the overflow on the right. Alternatively each tab in the tab row may move to the left until the selected item moves to a favorable position on the tab row. The favorable position may be user definable. Once the tabbed browser handles the processing based on the selected thumbnail the state transitions to back to state .

As one can see the present quick pick mechanism allows a user to conveniently select any one of several open tabs. They can easily view each open tab rearrange the tabs close a tab and the like. Thus the present quick pick mechanism provides an enhanced and convenient viewing experience to users.

Reference has been made throughout this specification to one embodiment an embodiment or an example embodiment meaning that a particular described feature structure or characteristic is included in at least one embodiment of the present invention. Thus usage of such phrases may refer to more than just one embodiment. Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One skilled in the relevant art may recognize however that the present mechanism may be practiced without one or more of the specific details or with other methods resources materials etc. In other instances well known structures resources or operations have not been shown or described in detail merely to avoid obscuring aspects of the present consistent visual appearance technique.

While example embodiments and applications have been illustrated and described it is to be understood that the present technique is not limited to the precise configuration and resources described above. Various modifications changes and variations apparent to those skilled in the art may be made in the arrangement operation and details of technique disclosed herein without departing from the scope of the claimed invention.

