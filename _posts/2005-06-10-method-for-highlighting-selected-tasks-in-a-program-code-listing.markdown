---

title: Method for highlighting selected tasks in a program code listing
abstract: Certain exemplary embodiments provide a method for highlighting selected tasks in a program code listing comprising: converting the program code listing to a mark-up language; inserting instructions at a starting point and at an ending point; and testing if highlighting is to be turned on at a point in the program code listing by the instructions provided at the starting point.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08117593&OS=08117593&RS=08117593
owner: Siemens Industry, Inc.
number: 08117593
owner_city: Alpharetta
owner_country: US
publication_date: 20050610
---
This application claims priority to and incorporates by reference herein in its entirety pending U.S. Provisional Patent Application Ser. No. 60 578 514 filed 10 Jun. 2004.

To assist software programmers particularly programmers new to a particular language environment and or programming task a code listing is often included in help topics to illustrate a point. Conventional help systems and methods however do not typically support the display of numerous code listing examples in multiple programming languages. Conventional systems can usually display the code relevant to each help topic with separate pop up windows for each programming language and or environment. Often this is neither practical nor efficient however since the number of pop up windows can multiply with each additional programming language environment and or programming task of interest and these pop up windows might need to be modified with every program code change.

Certain exemplary embodiments can comprise an application programming interface API for developing instructional web based and or browser displayable material in a document object model such as a help system for computer programming tasks in any of various predetermined computer languages and or environments. For a given help topic and for each predetermined computer language and or environment certain exemplary embodiments can programmatically highlight segments of a code listing that illustrate a particular programming task that is relevant to that help topic. For any given code listing as many programming tasks as desired can be highlighted.

Certain exemplary embodiments can ease and or enhance a developer s efforts to create a help system that is aimed as assisting other software developer s learn various programming tasks and or techniques in any of a multitude of programming languages. The help system can conform to the document object model. The help content can be web based such as transferable from a server to a client provided via a mark up language such as HTML SGML XML etc. and or be renderable via a browser such as Internet Explorer FireFox Opera etc. The programming language can be any programming language such as C C C Basic Visual Basic Pascal Fortran Cobol etc.

Certain exemplary embodiments can highlight segments of a code listing that illustrate a particular software task. For any given code listing as many programming tasks as desired can be highlighted.

In certain exemplary embodiments any given help screen can include a hyperlink the hyperlink potentially identified as linking to a code listing which includes code for a programming task discussed functionally generally and or particularly in the help screen. Activation of the hyperlink can cause certain parameters to be passed such as the programming language of interest to the viewer the name of the file containing the code listing and or the programming task relevant to the help screen containing the hyperlink etc. Upon receiving the passed parameters a link processor can retrieve a file containing the code listing in the specified programming language identify one or more starting points and ending points of those portions of the code listing that deals with the relevant programming task highlight and or insert instructions to highlight that portion of the code listing falling between the starting point and the ending point inclusive and or exclusive and cause the code listing to be rendered with the relevant portion highlighted.

Thus certain exemplary embodiments provide a method for highlighting selected tasks in a program code listing comprising converting the program code listing to a mark up language inserting instructions at starting points and at ending points and testing if highlighting is to be turned on at a point in the program code listing by the instructions provided at the starting point.

In order to provide the help content and or user documentation the actual code listings in each environment can be converted to a mark up language such as HTML. In the HTML code listings HTML extensions externals and or plug ins such as JavaScript calls can be inserted at the starting points and ending points for code segments that perform certain software programming tasks. The JavaScript can accept a parameter for the name of the software task to which the code corresponds. The starting point JavaScript can test if highlighting should be turned on at that point and the ending point JavaScript can test if highlighting should be turned off at that point for that particular task.

For certain exemplary embodiments the following results are what the user sees and what is going on behind the scenes 

In the exemplary HTML code below the first JavaScript checks whether Include IFeatureCallback is set and if so sets the background color to yellow. The second JavaScript checks if Include IFeatureCallback is set and if so resets the background color. The exemplary HTML code is as follows 

In the exemplary JavaScript code provided below the function If Highlight On checks to determine whether the Code to Highlight property of either the current window the parent of the current window or the window that opened the current window is equal to the setting that is being tested as defined in the this code parameter for example 

The If Highlight Off JavaScript function can check to see if the Code to Highlight property of either the current window the parent of the current window and or the window that opened the current window is equal to the setting that is being tested as defined in the this code parameter for example Include IFeatureCallback.

The HTML topic files that link to the code listing files can call JavaScripts to set the highlight variable to whatever section needs to be highlighted. The following example displays a link into the .html file that corresponds to the C code listing for DemoDlg.cs. The exemplary JavaScript for the link opens a new window and passes in a variable that indicates the code to be highlighted as well as the filename. When the user clicks the link View Code in DemoDlg.cs CMI Demo Panel Cs a window pops up showing DemoDlg.vb with the portion pertaining to Include IFeatureCallback highlighted.

The user can see the result of these JavaScripts as illustrated in . When the user clicks the link shown in View Code in DemoDlg.cs CMI Demo Panel Cs can be rendered which includes highlighted code.

In certain exemplary embodiments via one or more user interfaces such as a graphical user interface a user can view a rendering of a partially highlighted code listing.

Certain exemplary embodiments can comprise a Controller Management Interface CMI that can serve as and or utilize an API to a WinAC Controller. The CMI can comprise many functions and or serve as a user interface to the controller. In certain exemplary embodiments the CMI can be used to provide a help system that supports any number of programming languages environments.

In a particular exemplary embodiment 28 different software programming tasks of the Controller Management Interface documentation can be displayed to a user in any or all of six programming language environments.

Certain exemplary embodiments can be utilized with and or by a Siemens SIMATIC Windows Automation Center WinAC which is a PC based and or Windows based control solution within the Siemens SIMATIC automation system family. WinAC can be viewed as an integrated solution for control networking and data processing all running on one platform. Thus WinAC can be considered an integration platform for all parts of the automation solution that runs on a PC from controlling to IT integration data entry and or motion control.

WinAC can be based on Windows 2000 Windows XP and or standard interfaces e.g. ActiveX OPC . WinAC can be available as a Soft SPS or as a slot PLC i.e. as pure PC software or as a hardware card in the PC.

The WinAC Basis software PLC can be particularly suitable for data intensive automation tasks without hard deterministics. The WinAC RTX version can offer higher deterministic and realtime requirements e.g. for motion control and or fast regulating tasks.

The controlling section can act just like a hardware PLC for running logic control programs. WinAC can run as a Windows e.g. Windows 2000 Windows XP etc. task on the PC or can use a WinAC slot PLC a PC board that plugs into the PC. The programming can be fully compatible with all Siemens SIMATIC PLCs such as the S7 controller family so a user can switch from a WinAC application to a hardware PLC if desired. Thus like the other SIMATIC controllers WinAC can be configured and programmed with STEP .

The Open Development Kit ODK add on section of WinAC can provide an open interface to program the control application in other languages than the STEP programming package for example Visual C Visual Basic and or other standard Windows programs. The system s Open Development Kit ODK can make it easy to integrate various motion vision networking and or real time control tasks via open interfaces such as OPC ActiveX and COM.

Thus WinAC can allow you to use your personal computer as a programmable logic controller PLC for running your process. WinAC can use the same programs and common I O that any other S7 controller can use. In addition to the standard software the package can include a network interface card for the network connection along with all the software connections for closed loop control positioning and or communicating with a human machine interface HMI . The result can be a PLC that operates inside and with a standard industrial PC.

Siemens WinAC ODK Open Development Kit can serve as an interface for WinAC via for example C C code and or a combination of C C and STEP programming. For example WinAC ODK can allow creation of custom COM objects that can for example create an object that can communicate directly to a library such as a motion card library passing data in real time into or out of the PLC scan. This toolkit can expand the integration capabilities of the PC controller with potentially virtually unlimited possibilities such as enabling user written code e.g. C C Visual Basic and or C or third party applications to be executed as part of the WinAC software PLC scan cycle. The user functions can be simply integrated as function blocks into the standard PLC program written in Ladder Logic or any of the other available PLC programming languages.

In addition the resulting supplementary functions C C in the form of STEP components or STEP libraries can be covered so that they can be used and switched easily and homogeneously with standard STEP Engineering Tools. Function libraries with interface modules SIMATIC FBs can be created adapted to the respective additional product or function which can then be used for function extensions in PC based projects.

An OPC server which can be part of the WinAC product family can provide open access to process data flag memory and or data blocks within the WinAC Controller.

Certain exemplary embodiments can provide a unique online help system such as to a WinAC ODK Controller Management Interface.

Still other embodiments will become readily apparent to those skilled in this art from reading the above recited detailed description and drawings of certain exemplary embodiments. It should be understood that numerous variations modifications and additional embodiments are possible and accordingly all such variations modifications and embodiments are to be regarded as being within the spirit and scope of this application. For example regardless of the content of any portion e.g. title field background summary abstract drawing figure etc. of this application unless clearly specified to the contrary such as via an explicit definition there is no requirement for the inclusion in any claim herein or of any claim of any application claiming priority hereto of any particular described or illustrated characteristic function activity or element any particular sequence of activities or any particular interrelationship of elements. Moreover any activity can be repeated any activity can be performed by multiple entities and or any element can be duplicated. Further any activity or element can be excluded the sequence of activities can vary and or the interrelationship of elements can vary. Accordingly the descriptions and drawings are to be regarded as illustrative in nature and not as restrictive. Moreover when any number or range is described herein unless clearly stated otherwise that number or range is approximate. When any range is described herein unless clearly stated otherwise that range includes all values therein and all subranges therein. Any information in any material e.g. a United States patent United States patent application book article etc. that has been incorporated by reference herein is only incorporated by reference to the extent

