---

title: Methods and system for simulation of chemical and biological processes in a distributed technical computing environment
abstract: Methods and systems are provided for simulating chemical and biological processes in a distributed technical computing environment. A technical computing client may associate a job, comprising one or more tasks, with a chemical or biological process. The technical computing client can distribute these tasks to technical computing workers for execution of the task. The technical computing workers execute the task and may provide a result of the task for the technical computing client. As such, the present invention allows the use of multiple computing resources on a network to perform simulation to facilitate decreasing the computation time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183347&OS=09183347&RS=09183347
owner: The MathWorks, Inc.
number: 09183347
owner_city: Natick
owner_country: US
publication_date: 20050217
---
The present invention generally relates to simulation of chemical and biological processes and particularly the distribution of the processing of simulations of chemical and biological processes.

The development of new drug targets by the pharmaceutical industry is time consuming and expensive because a large number of possible targets need to be tested before the molecule or compound with the desired properties is found or formulated. Along the same argument but not for the purpose of new drug development are the activities or synthetic biology. Here biological entities are designed to perform a particular function. A particular example of this case is the development of biological nanomachines that might for example be used as programmed drug delivery systems. See J. Panyam V. Labhasetwar Biodegradable nanoparticles for drug and gene delivery to cells and tissue Advanced Drug Delivery Reviews 55 2003 329 347. As in drug discovery efforts the formulation of a compound with desired properties is difficult due to the large variety of possible targets and the even larger context or system in which they must perform their function. Currently much of the work done to investigate the properties of these compounds is done in a wet lab requiring many tedious and error prone experiments.

Development of chemical substances and nanomachinery in addition to being time consuming can generate potentially dangerous intermediate substances. For example a molecule used as transport for a drug in a drug delivery system could by its mere presence in the organism stimulate the overproduction of some other protein. The overexpressed protein could act as a lethal toxin for the organism. Another possible complication is that the nanomachinery itself may mutate over time and either lose its original function or worse adversely interfere with the viability of the organism.

Another problem facing the drug development activity is that due to the cumbersome nature of experimental data collection it is typical to limit experiments by narrowing the range of tested inputs and in general isolating the subsystem of interest. This limitation allows for the possibility that new drugs have unforeseen side effects.

Moreover current methods of obtaining data for biological processes are even more time consuming than those associated with chemical processes because the latter generally require laboratory experiments that lead to animal experiments and clinical trials. From these trials and experiments data are obtained which again usually focus on a very narrow part of the biological system. Only after numerous costly trial and error clinical trials and constant redesigning of the clinical use of the drug to account for lessons learned from the most recent clinical trial is a drug having adequate safety and efficacy finally realized. This process of clinical trial design and redesign multiple clinical trials and in some situations multiple drug redesigns requires great expense of time and money. Even then the effort may not produce a marketable drug. While conclusions may be drawn by assimilating experimental data and published information it is difficult if not impossible to synthesize the relationships among all the available data and knowledge.

The various challenges faced by the aforementioned activities in chemical and biochemical research make it desirable to have software and methods for modeling simulating and analyzing biological processes in silico rather than in vitro or in vivo. The goal of this approach is to provide a more comprehensive view of these biological systems prior to costly experiments and to clinical trials thereby reducing the search space for drug targets and useful nanoparticles.

The simulation of biological systems requires the use of many modes of computation such as continuous time discrete step hybrid particle level among others. The need for these arises from the various simplifying assumptions made in order to make the problem tractable using today s computer technology and resources. At the most basic level the particle based approach every molecule in a cell is accounted for individually. Given the number of molecular components in a cell this approach is prohibitively expensive unless it is used for a relatively small number of molecules in the overall system. Approximations can be made which result in a significant reduction in the computational cost. One class of simplifications group like molecules and treat the entire group as one variable. This approach allows the development of probabilistic methods and well as differential ones which are much less expensive in terms of computational cost. In effect there is a continuum of methods varying from high fidelity compute intensive to approximate and less expensive methods. Hybrid solvers are those that mix one or more of these methods to optimize the use of computational resources while achieving a high level of fidelity.

One such method which accounts for the random nature of molecular interactions is called a stochastic simulator it may be used to simulate the time varying behavior of a collection of chemically interacting molecules in a chemical or biological system. In this case the simulator maintains a list of reactions in the chemical or biological system that could happen and moves the state of the system forward through time in a two step process. First the simulator determines which reaction in the list of reactions will be the next to occur and the time at which that reaction will occur. Second the simulator simulates the reaction adjusting the quantities of each type of molecule as specified by the stoichiometry of the reaction. This process is repeated iteratively as the system is marched forward in time. D. Gillespie J. Phys. Chemistry 81 25 1977 . 

However a single workstation can be limiting to the size of the problem that can be solved because of the relationship of the computing power of the workstation to the computing power necessary to execute computing intensive iterative processing of complex problems in a reasonable time. For example a simulation of a large complex biological model may take a reasonable time to run with a single computation with a specified set of parameters. However the analysis of the problem may also require the model be computed multiple times with a different set of parameters to understand the behavior of the model under varied conditions. This could require thousands of computations to analyze the problem as desired and the single computer would take a substantial amount of time to perform these simulations. In this case the single computer would be allocated full time to performing the computation while many computer resources on the network may be idle. Additionally the benefit of the interactive features of the software is reduced as the computation time increases.

With many biological and chemical systems requiring larger and more complex modeling computations accordingly become more resource intensive and time consuming. When a computation becomes so large and complex that it cannot be completed in a reasonable amount of time on a single computer a solution to decrease the computation time is needed.

However a single workstation can be limiting to the size of the problem that can be solved because of the relationship of the computing power of the workstation to the computing power necessary to execute computing intensive iterative processing of complex problems in a reasonable time. For example a simulation of a large complex biological model may take a reasonable time to run with a single computation with a specified set of parameters. However the analysis of the problem may also require the model be computed multiple times with a different set of parameters to understand the behavior of the model under varied conditions. This could require thousands of computations to analyze the problem as desired and the single computer would take a substantial amount of time to perform these simulations. In this case the single computer would be allocated full time to performing the computation while many computer resources on the network may be idle. Additionally the benefit of the interactive features of the software is reduced as the computation time increases.

With many biological and chemical systems requiring larger and more complex modeling computations accordingly become more resource intensive and time consuming. When a computation becomes so large and complex that it cannot be completed in a reasonable amount of time on a single computer a solution to decrease the computation time is needed.

The present invention provides methods and a system for simulating chemical and biological processes in a distributed technical computing environment. A technical computing client may associate a job comprising one or more tasks with a chemical or biological process. The technical computing client can distribute these tasks to technical computing workers for execution of the task. The technical computing workers execute the task and may provide a result of the task for the technical computing client. As such the present invention allows the use of multiple computing resources on a network to perform simulation to facilitate decreasing the computation time.

In accordance with a first aspect the invention involves a method for simulating chemical reactions in a distributed technical computing environment. The method comprises the steps of associating on a technical computing client a first task with a simulation of a chemical reaction and submitting the first task to an automatic task distribution mechanism to make the first task available to a technical computing worker. The automatic task distribution mechanism may then provide the first task to a first technical computing worker. The first technical computing worker has a technical computing environment for executing the first task. The result of the executed task may then be provided back to the automatic task distribution mechanism and technical computing client.

In accordance with another aspect a method is provided for simulating a chemical reaction in an object oriented distributed technical computing environment. The method comprises the steps of associating on a technical computing client a first task object with a simulation of a chemical reaction and submitting by the technical computing client the first task object for distribution to a technical computing worker.

In accordance with another aspect the invention involves a system for simulating chemical reactions in a distributed technical computing environment. The system comprises a technical computing client associating a first task with a simulation of a chemical reaction and submitting the first task to distribute for processing in a technical computing environment and an automatic task distribution mechanism in communication with the technical computing client the automatic task distribution mechanism receiving the first task submitted by the technical computing client and making the first task available to a technical computing worker. The system may also include a first technical computing worker in communication with the automatic task distribution mechanism the technical computing worker having a technical computing environment for performing technical computing of a task the first technical computing worker obtaining the first task from the automatic task distribution mechanism.

In accordance with another aspect the invention involves a medium holding instructions executable in an electronic device. The instructions comprise associating on a technical computing client a first task with a simulation of a chemical reaction and submitting the first task to an automatic task distribution mechanism to make the first task available to a technical computing worker. The instructions may also include providing by the automatic task distribution mechanism the first task to a first technical computing worker to execute the first task the first technical computing worker having a technical computing environment.

In accordance with another aspect the invention involves a method for distributing the processing of a simulation of a chemical reaction in a technical computing environment. The method comprises the steps of associating on a technical computing client a first job with a simulation of a chemical reaction the first job object associated with one or more tasks a first task of the one or more tasks associated with a simulation of a chemical reaction providing to a first job manager the first job object and providing by the first job manager the first task to an automatic task distribution mechanism to make the first task available to a technical computing worker for execution. The technical worker may then execute the first task and provide the result back to the automatic task distribution mechanism job manager and technical computing client.

In accordance with another aspect a method is provided for simulating a chemical reaction in an object oriented distributed technical computing environment. The method comprises the steps of associating on a technical computing client a first job object with a simulation of a chemical reaction the first job object associated with one or more tasks objects a first task of the one or more tasks associated with a simulation of a chemical reaction providing to a first job manager the first job object and providing by the first job manager the first task object to an automatic task distribution mechanism to make the first task object available to a technical computing worker for execution.

In accordance with another aspect the invention involves a method for simulating a biological process comprising a plurality of chemical reactions in a distributed technical computing environment. The method comprises a associating on a technical computing client a first job with a simulation of a biological process the first job comprising one or more tasks associated with the chemical reactions of the biological process being simulated and b providing to a first job manager the first job object and c providing by the first job manager the first task first job to an automatic task distribution mechanism to make the first task available to a technical computing worker for execution. The first task may then be provided to the first technical worker. The first technical computing worker has a technical computing environment for executing the first task. The result of the executed task may then be provided back to the automatic task distribution mechanism and technical computing client.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below. Other features and advantages of the invention will become apparent from the description the drawings and the claims.

Certain embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not made express herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the present invention provides for dynamic distribution of simulations of chemical and biological processes by associating tasks with the chemical or biological processes. The tasks are distributed from a technical computing client to remote technical computing workers for execution of the tasks on multiple computers systems. Tasks associated with the simulation of chemical and biological reactions on a technical computing client and may be additionally organized into jobs. A job is a logical unit of activities or tasks that are processed and or managed collectively. A task defines a technical computing command such as a MATLAB command to be executed and the number of arguments and any input data to the arguments. A job is a group of one or more tasks. The task can be directly distributed by the technical computing client to one or more technical computing workers. A technical computing worker executes a task and may return a result to the technical computing client.

Additionally a task or a group of tasks in a job can be submitted to an automatic task distribution mechanism to distribute the one or more tasks automatically to one or more technical computing workers providing technical computing services. The technical computing client does not need to specify or have knowledge of the technical computing workers in order for the task to be distributed to and computed by a technical computing worker. The automatic task distribution mechanism can distribute tasks to technical computing workers that are anonymous to any technical computing clients. The technical computing workers perform the task and may return as a result the output data generated from the execution of the task. The result may be returned to the automatic task distribution mechanism which in turn may provide the result to the technical computing client.

Furthermore the illustrative embodiment provides for an object oriented interface in a technical computing environment to dynamically distribute tasks or jobs directly or indirectly via the automatic task distribution mechanism to one or more technical computing workers. The object oriented interface provides a programming interface for a technical computing client to distribute tasks for execution by technical computing workers.

Dynamic systems such as biological processes and chemical reactions are typically modeled as sets of differential difference algebraic and or recursive equations. At any given instant of time these equations may be viewed as relationships between the system s output response outputs the system s input stimuli inputs at that time the current state of the system the system parameters and time. The state of the system may be thought of as a numerical representation of the dynamically changing configuration of the system. For instance in a physical system modeling a simple pendulum the state may be viewed as the current position and velocity of the pendulum. Similarly a signal processing system that filters a signal would maintain a set of previous inputs as the state. The system parameters are the numerical representation of the static unchanging configuration of the system and may be viewed as constant coefficients in the system s equations. For the pendulum example a parameter is the length of pendulum and for the filter example a parameter is the values of the filter taps.

Types of mathematical models used in the study of dynamic systems include differential equations difference equations algebraic equations and hybrid models. For modeling biological processes and chemical reactions a stochastic model may be useful. This model describes systems using stochastic techniques such as Gillespie Gibson Bruck and leaping.

For example the Gillespie stochastic technique uses an algorithm to numerically simulate the time evolution of a given chemical system. In the Gillespie technique reaction events given selected probabilities of occurring and the events which occur change the probabilities of subsequent events. The algorithm determines for a system in a given state the next reaction to occur and the time that the next reaction occurs using probability. The algorithm is based on a quantity P t u which is the probability that a reaction u will occur at the time interval t. The probabilities are based on the classical rate coefficients k the volume of the container which can be a cell a partition of a cell a compartment of the cell such as the nucleus or other organelles or other container and the concentration of reactants in a given reaction. Once a time and reaction have been computed the method carries out the reaction i.e. it updates the state of the system to reflect the transformation of reactants into products then increments the time by t and determines another reaction to occur and when the reaction will occur. The Gillespie technique is described in detail in the article Gillespie D. T. 1977 Journal of Physical Chemistry vol. 81 pp. 2340 2361.

The Gibson Bruck stochastic technique is a variation of the Gillespie algorithm and described in the journal article Gibson M. A. and J. Bruck 2000 Journal of Physical Chemistry A vol. 104 pp. 1876 1889.

One skilled in the art will recognize that any suitable stochastic technique for simulating the time evolution of a given chemical system may be utilized in the present invention. When simulated stochastically this reaction occurs at a random time determined according to a probability distribution associated with that reaction. The reaction time may be determined by drawing a random number from the probability distribution.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one embodiment each of the client server and workstation are configured to and capable of providing at least a portion simulation distribution of the present invention. As a distributed system there are one or more software components that run on each of the client server and workstation respectively and work in communication and in collaboration with each other to meet the functionality of the overall application. For example the client may hold a graphical modeling environment that is capable of specifying block diagram models and technical computing tasks to analyze the model. The client may have software components configured to and capable of submitting the tasks to the server . The server may have software components configured to and capable of receiving the tasks submitted by the client and for determining a workstation to assign the task for technical computing. The workstation may hold software components capable of providing a technical computing environment to perform technical computing of the tasks assigned from the server and submitted by the client . In summary the technical computing environment and software components may be deployed across one or more different computing devices in various network topologies and configurations.

The technical computing client can be a technical computing software application that provides a technical computing and graphical modeling environment for generating block diagram models and to define mathematical algorithms for simulating models of biological and chemical processes. The technical computing client may include all or a portion of the functionality provided by the standalone desktop application of MATLAB . One ordinarily skilled in the art will appreciate the various combinations of client types that may access the functionality of the system.

With an application programming interface and or programming language of the technical computing client functions can be defined representing a biological or chemical process to be executed by either a technical computing environment local to the client computer or remote on the workstation . The local technical computing environment may be part of the technical computing client or a technical computing worker running on the client computer . The programming language includes mechanisms described below in more detail to define a task to be distributed to a technical computing environment and to communicate the task to the technical computing worker on the workstation or alternatively on the client .

The distributed functionality features of the client allows the technical computing client to use the computing resources that may be available from a technical computing worker on the workstation to perform simulation of a biological or chemical reaction. This frees up the technical computing client to perform other tasks or the client computer to execute other software applications.

The technical computing worker of the system can be a technical computing software application that provides a technical computing environment for performing technical computing of tasks such as those tasks defined or created by the technical computing client . The technical computing worker can be an application module service software component or a session which includes support for technical computing of functions defined in the programming language of MATLAB . A session is an instance of a running technical computing worker by which a technical computing client can connect and access its functionality. The technical computing worker can include all the functionality and software components of the technical computing client or it can just include those software components it may need to perform technical computing of tasks it receives for execution. The technical computing worker may be configured to and capable of running any of the modules libraries or software components of the MATLAB product family. As such the technical computing worker may have all or a portion of the software components of MATLAB installed on the workstation or alternatively accessible on another system in the network . The technical computing worker has mechanisms described in detail later to receive a task distributed from the technical computing client . The technical computing worker is capable of performing the task as if the technical computing client was performing the task in its own technical computing environment. The technical computing worker also has mechanisms to return a result generated by the execution of the task to the technical computing client .

The technical computing worker can be available on an as needed basis to the technical computing client . When not performing technical computing of tasks from the technical computing client the workstation of the technical computing worker can be executing other software programs or the technical computing worker can perform execution of tasks from other technical computing clients.

The automatic task distribution mechanism comprises one or more application software components to provide for the automatic distribution of tasks from the technical computing client to the technical computing worker . The automatic task distribution mechanism allows the technical computing client to delegate the management of task distribution to the automatic task distribution mechanism . For example a task can be defined and submitted to the automatic task distribution mechanism without specifying which technical computing worker is to perform the technical computing of the task. The technical computing client does not need to know the specifics of the technical computing worker . The technical computing client can define a function to submit the task to the automatic task distribution mechanism and get a result of the task from the automatic task distribution mechanism . As such the automatic task distribution mechanism provides a level of indirection between the technical computing client and the technical computing worker .

This eases the distributed programming and integration burden on the technical computing client . The technical computing client does not need to have prior knowledge of the availability of the technical computing worker . For multiple task submissions from the technical computing client the automatic task distribution mechanism can manage and handle the delegations of the tasks to the same technical computing worker or to other technical computing workers e.g. and and hold the results of the tasks on behalf of the technical computing client for retrieval after the completion of technical computing of all the distributed tasks.

As part of the system a job manager module or job manager is included as an interface to the task and result management functionality of the automatic task distribution mechanism . The job manager can comprise an object oriented interface to provide control of delegating tasks and obtaining results in the multi tiered distributed system . The job manager provides a level of programming and integration abstraction above the details of inter process communications and workflow between the automatic task distribution mechanism and the technical computing worker . The job manager also provides an interface for managing a group of tasks collectively as a single unit called a job and on behalf of a technical computing client submitting those tasks making up the job and obtaining the results of each of the tasks until the job is completed. Alternatively the automatic task distribution mechanism can include the functionality and object oriented interface of the job manager or the automatic task distribution mechanism and the job manager can be combined into a single application or software component. In an exemplary embodiment the job manager comprises both the functionality of the job manager and the automatic task distribution mechanism . One ordinarily skilled in the art will recognize the functions and operations of the job manager and the automatic task distribution mechanism can be combined in various software components applications and interfaces.

Referring now to an exemplary embodiment of the present invention is shown with multiple technical computing workers A N hosted on a plurality of workstations A N. The technical computing client may be in communication through the network communication channel on the network with one some or all of the technical computing workers A N. In a similar manner the automatic task distribution mechanism may be in communication through the network communication channel on the network with one some or all of the technical computing workers A N. As such the technical computing client and or the automatic task distribution mechanism can distribute tasks to multiple technical computing workers A N to scale the distributed system and increase computation time of tasks. As also shown in the technical computing workers A B can be hosted on the same workstation A or a single technical computing worker C can have a dedicated workstation B. Alternatively one or more of the technical computing workers A N can be hosted on either the client or the server .

The computing devices depicted in can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the MacOS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Furthermore the software components can be capable of and configured to operate on the operating system that may be running on any of the computing device e.g. . Additionally each of the client the server and the workstation can be running the same or different operating systems. One ordinarily skilled in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices and .

Although the present invention is discussed above in terms of distributing software components across the computing devices of a client server and workstation any other system and or deployment architecture that combines and or distributes one or more of the technical computing client job manager automatic task distribution mechanism and technical computing worker across any other computing devices and operating systems available in the network may be used. Alternatively all the software components can run on a single computing device such as the client server or the workstation .

The system of the present invention provides flexibility in methods of task distribution with multiple modes of operation. In B and C three modes of task distribution of Simulation distribution software are shown. depicts a direct distribution mode an automated distribution mode and a batch mode of automated distribution. Additionally depicts an exemplary embodiment of the batch mode of automated distribution.

The direct distribution system of is intended for those users who desire a high level of control over which technical computing worker A N executes a particular task. In brief overview of the direct distribution system the technical computing client is in communications with a plurality of technical computing workers A N each running on their own workstation A N. In an alternative embodiment one or more of these technical computing workers A N can be running on the same computing device e.g. workstation A or on the client or the server . This direct distribution system allows a task to be sent to a particular technical computing worker e.g. technical computing worker A of a plurality of technical computing workers A N. Then the technical computing client can continue with other work while the specified technical computing worker e.g. technical computing worker A is performing technical computing of the submitted task. Some time after submitting the task to the technical computing worker A the technical computing client can then obtain the result of the task from the technical computing worker A. Furthermore each technical computing worker N can process multiple tasks e.g. TaskN M and for each task produce a result e.g. ResultN M.

Alternatively the technical computing worker A may perform technical computing of a task without returning a result or may return information acknowledging completion of the task. This mode of task distribution is useful for a computer network with a relatively small number of known workstations A N and technical computing workers A N. A task can be delegated to a specified technical computing worker running A on a workstation A that has a higher speed configuration than the other workstations B N. For example a longer task could be executed on such a workstation A in order to speed the overall computation time.

As further depicted in the technical computing client of the direct distribution system can submit multiple tasks e.g. TaskN M to each of the multiple technical computing workers A N. For example the technical computing client submits task to technical computing worker A submits task to technical computing worker B and submits task N to technical computing worker N. The technical computing client can submit task task and taskN M one immediately after another or within a certain time between each other. As such the technical computing workers A N can be performing technical computing of their respective tasks independently and in parallel to each other. Alternatively the technical computing workers A N may perform technical computing of their respective task while the other technical computing workers are idle.

In another embodiment the technical computing workers A N may include interfaces and communication channels to interact with each other as depicted by the phantom arrowed lines between the technical computing workers A N in . In such an embodiment technical computing worker A may perform a portion of technical computing on task and then submit task and optionally any generated result or other data for further technical computing by technical computing worker B. Also the technical computing worker A may also submit the result of its technical computing of task to the technical computing client before or after submitting the task to technical computing worker B for further processing. Technical computing worker B may in turn perform technical computing of task and subsequently submit task for further processing by technical computing worker N. For additional configurability the technical computing workers A N can obtain information with the task about the identification of other technical computing workers A N in the system. This information would be used to communicate and interact with another technical computing worker. Alternatively a technical computing worker A may find another technical computing worker B N by making a function or system call or a method call to a service provider on the network . In such a configuration technical computing workers A N can either execute tasks independently and in parallel to each other or also execute tasks serially and subsequent to each other.

Referring now to the automated task distribution mode embodied in system is intended to provide a configuration where the user does not want to control which technical computing worker A N executes a particular task. In brief overview of the automated distribution mode of system a technical computing client is in communication with the automatic task distribution mechanism running on the server . The automatic task distribution mechanism is in communications with a plurality of technical computing workers A N. Under this mode of operation the technical computing client is not required to have any specific knowledge of the technical computing workers A N e.g. the name of the workstation running a technical computing worker A N or the availability of the technical computing worker A N to perform technical computing of a task. In alternative embodiments it may have prior knowledge of all or a portion of the technical computing workers A N available on the network. Even with knowledge of the name or availability of technical computing workers A N on the network the technical computing client can choose not to specify the name of a particular technical computing worker to perform the task and let the automated distribution mechanism distribute the task to any available technical computing worker A N.

In the technical computing client submits one or more tasks Task TaskN M to the automatic task distribution mechanism . These tasks can be submitted sequentially or in an order and frequency as specified by the technical computing client . The automatic task distribution mechanism obtains the tasks Task TaskN M to make then available for distribution to any of the technical computing workers A N. A technical computing worker A N takes a task from the automatic task distribution mechanism for technical computing of the task computes a result for the task and provides the result to the automatic task distribution mechanism . For example technical computing worker A takes task from the automatic task distribution mechanism computes a result Result for task and submits Result to the automatic task distribution mechanism . The automatic task distribution mechanism makes the results Result ResultN M available to the technical computing client as they get submitted from the technical computing worker A N generating and submitting the respective result. At a time or method determined by the technical computing client the technical computing client obtains the results of the computed tasks from the automatic task distribution mechanism . For example the technical computing client may obtain all the results Result ResultN M at the same time after all the results have been computed or each result may be obtained after it becomes available in the automatic task distribution mechanism . Accordingly the technical computing client can determine the order and frequency of obtaining one or more of the results. As with the direct distribution mode the technical computing workers A N can also communicate and interact with each other as depicted by the phantom arrowed lines between the technical computing workers A N in to execute tasks both serially and in parallel by submitting a task to another technical computing worker A N.

The batch mode of automated task distribution embodied in system of is intended to provide a configuration where the user can specify a group of related tasks as a job and provide the batch of tasks or the job to the automatic task distribution mechanism . In brief overview of the batch mode of the automatic distribution system a technical computing client is in communication with the job manager on the server . The job manager interfaces and communicates with the automatic task distribution mechanism running on the same server . Each of the technical computing workers A N is in communication with the automatic task distribution mechanism . A job manager interfaces with and is associated with one automatic task distribution mechanism . Alternatively the job manager and the automatic task distribution mechanism could be on different servers e.g. and . Additionally a plurality of job managers and automatic task distribution mechanisms could be running on a single server or each on their own server etc . Each of the plurality of job managers interface with and are associated with one of the plurality of automatic distribution mechanisms. This allows the distributed system to scale the number of instances of the job manager and the automatic distribution mechanism to handle additional multiple technical computing clients distributing tasks.

In batch mode as depicted in the technical computing client defines the job. The technical computing client has a programming language environment by which it can declare tasks declare a job and associate the tasks with the job. Instead of submitting each task separately as depicted in the technical computing client submits the job containing all the associated tasks to the job manager . The job manager is a software component that provides an object oriented interface to the automatic task distribution mechanism . The job manager obtains the tasks from the job and provides the tasks to the automatic task distribution mechanism for technical computing workers A N to take and compute results. For example technical computing client associates a job Job with a set of three tasks Task Task and TaskN M with a chemical process. The technical computing client then submits Job to the job manager . The job manager obtains Job and obtains each of the tasks Task TaskN M from Job . Then according to the configured logic of the job manager described in more detail below the job manager submits each of the tasks to the automatic task distribution mechanism for execution by a technical computing worker A N. Technical computing worker A may take Task from the automatic task distribution mechanism compute a Result for Task and provide the Result to the automatic task distribution mechanism . Technical computing worker B and technical computing worker N in a similar fashion compute and provide results for Task and TaskN M respectively. The job manager then obtains the set of results for the completed job of Job and provides the results of each of the tasks to the technical computing client .

The job manager further comprises a queue for arranging and handling submitted jobs. For example the job manager may handle jobs in a first in first out FIFO manner. In this case the job manager does not process the next job until all the tasks from the current job have been processed by the automatic task distribution mechanism . Additionally the job manager using the queue supports handling multiple job submissions and task distribution from multiple technical computing clients . If a first technical computing client submits a job Job the job manager places that job first in the queue . If a second technical computing client e.g. submits a second Job for example Job the job manager places the job in the queue behind the Job from the first client. In this manner all technical computing clients accessing the services of the job manager get serviced for task distribution. One ordinarily skilled in the art will recognize that the job manager could implement a variety of algorithms for processing jobs in a job queue and for handling multiple technical computing clients . For example a user may be able to specify a priority level for a specified job or the logic of the job manager may make task distributing and processing decisions based on the configuration and availability of technical computing workers A B to determine a preferred or optimal selection of technical computing of jobs and tasks.

As with the other distribution modes of and the technical computing workers A N in batch mode can also communicate and interact with each other as shown by the phantom arrowed lines between technical computing workers A N in . This allows the technical computing workers A N to execute tasks both serially and in parallel by submitting a task to another technical computing worker. As part of the information associated with the task obtained by a technical computing worker or by other means such as a system or function call or a method call to a service a technical computing worker A can obtain information about the other technical computing workers B N assigned to or working on tasks associated with a specific job or available on the network .

The exemplary embodiment of the batch mode of automated task distribution system of depicts a configuration where the job manager contains the automatic task distribution mechanism . In brief overview of system a technical computing client is in communication with the job manager on the server . The job manager comprises a task distribution mechanism running as part of the job manager on the same server . The job manager further comprises a queue for arranging and handling submitted jobs. The technical computing workers A N are in communication with the job manager to receive tasks from the automatic task distribution mechanism of the job manager .

In batch mode operation as depicted in the technical computing client defines the job comprised of related tasks. Instead of submitting each task separately as depicted in the technical computing client submits the job containing all the related tasks to the job manager . The job manager obtains the tasks from the job and submits the tasks via an automatic task distribution mechanism to the technical computing workers A N to perform technical computing. For example technical computing client associates a job Job having a set of three tasks Task Task and TaskN M with a chemical reaction. The technical computing client then submits Job to the job manager . The job manager obtains Job and obtains each of the tasks Task TaskN M from Job . Then the automatic task distribution mechanism of the job manager submits each of the tasks to a technical computing worker A N for execution. For example the job manager may submit Task to technical computing worker A to compute and produce a Result for Task. Technical computing worker A provides the Result to the job manager . In a similar fashion the job manager may submit Task and TaskN M to technical computing worker B and technical computing worker N with each technical computing worker A and B providing the results for Task and TaskN M respectively to the job manager . When all the results from each of the tasks of Job are received the job manager then provides the results of each of the tasks of Job to the technical computing client . The result is then available for display or review by a user on the technical computing client .

In the batch mode of operation of depicted in Figured C and D the job manager or automatic task distribution mechanism can be configured to define the minimum and maximum numbers of technical computing workers A N to perform the tasks associated with a job. This feature can be configured on a job by job basis. Alternatively it may be configured for a portion or all of the jobs. The configuration of these settings can be facilitated through parameters associated with a submitted job such as in one or more properties of a job object or in one or more fields of a data structure representing a job. Alternatively these settings may be facilitated through any interface of the job manager or automatic task distribution mechanism such as in a configuration file graphical user interface command or message or any other means by which values for these settings may be set.

The system e.g. or can compare the number of technical computing workers A N registered or otherwise available with the job manager or automatic task distribution mechanism against the configured setting of the minimum number of technical computing workers parameter. The system may not start a job unless there is a minimum number of technical computing workers A N registered or available to work on the job. In a similar manner the system can check the number of available or registered technical computing workers A N against the setting of the maximum number of technical computing workers parameter. As the system distributes tasks of a job it can make sure not to distribute tasks to more than the defined number of technical computing workers A N. In some embodiments the minimum number of technical computing workers will be set to a value equal to the setting of the maximum number of technical computing workers. In such a case the system may only start the job if the minimum number of technical computing workers A A are available or registered to start the job and may not use any more technical computing workers A N than the minimum setting. This is useful for cases where the user wants to configure a job to have each task be assigned to and run on separate technical computing workers A N. For example a job may have 5 tasks and the minimum and maximum technical computing worker settings may be set to 5.

Additionally in any of the embodiments depicted in the system can determine or select the technical computer worker A N to work on a task by operational and or performance characteristics of the technical computing worker A N and or workstation A N. For example a technical computing worker A may work on a task based on the version of simulation software that is installed on the workstation A or that the technical computing worker A is capable of running. Additionally the technical computing worker A N and workstation A N may have a specification or profile such as a benchmark comparison results file which provides a description of any operational and performance characteristics of the version of software running on that specific computing device of the workstation A. This profile can be in comparison to known benchmarks of operational and performance characteristics of Simulation distribution software running on certain computing devices with specified versions of Simulation distribution software operating systems and other related software or any other system component or attribute that may impact the operation or performance of simulation software. This profile may be described in a file accessible over the network or retrievable through an interface mechanism of the technical computing worker A N. Furthermore the system may determine the technical computing worker A N to work on a task by any configuration or properties set on the technical computing worker A N or workstation A N. For determining a technical computing worker A N to work on a task the system may discover any configuration properties and operational and performance characteristics of the simulation software of a technical computing worker A N running on a workstation A N through any interface of the technical computing worker A N or workstation A N such as for example in a file graphical user interface command or message.

The present invention also provides additional flexibility in that the multiple modes of task distribution can be performed concurrently in the distributed system. is an illustrative embodiment of the present invention showing the distributed application performing concurrently the combination of the modes of operation depicted in . Additionally the distributed system is depicted supporting multiple clients A N communicating with multiple job managers A N and multiple automatic task distribution mechanisms A N. With these multiple modes of operation any technical computing client A N can distribute tasks directly to a technical computing worker A N submit tasks to the automatic task distribution mechanism or submit a job to the job manager . In the depicted multi client distributed system a plurality of technical computing clients A N are in communication with one or more job managers A N. The job manager A can be a separate component interfacing to the automatic task distribution mechanism A or the job manager N can be a single application comprising the functionality of the automatic task distribution mechanism N. The one or more technical computing workers A B are in communication with the one or more job managers N or the one or more automatic task distribution mechanisms A. The distributed architecture of the present invention allows for a scalable and flexible distributed technical computing environment supporting a variety of deployments and network topologies.

For example as shown in a technical computing client A can operate in both the direct distribution mode and the batch automated distribution mode. As such technical computing client A can submit a task to and receive a result from the automatic task distribution mechanism A without using the job manager A. In another instance technical computing client A can submit a job Job to the job manager A for task distribution by the automatic task distribution mechanism A to receive results from the job such as JobResults. In another example of technical computing client B can operate in batch automated distribution mode but submit jobs separately to a first job manager A running on a first server A and a second job manager N running on a second server N. In yet another example technical computing client N operates in both the automated distribution and direct distribution modes. Technical computing client N submits a task Task to automatic task distribution mechanism N and receives a result TaskResult from computing by a technical computing worker A N assigned by the system . Technical computing client N also directly submits a task to technical computing worker N and receives a computed result directly from the technical computing worker N. One ordinarily skilled in the art will appreciate the various combinations of deployments that can occur with such a distributed system with multiple modes of operation. As such the present invention offers scalability and flexibility for distributed processing of complex technical computing requirements.

In another aspect the present invention relates to methods for distributing the simulation of chemical or biological processes or reactions to technical computing workers A N for processing either directly or indirectly and automatically as described above in reference to the embodiments depicted in . B and C each show a flow diagram of the methods of the three modes of distribution. depicts the method of direct distribution the method of an automated distribution and a batch mode method of automated distribution.

Referring now to one embodiment of the method to distribute a task from a technical computing client to a technical computing worker is illustrated. Method is practiced with the direct distribution embodiment of the invention depicted in . On the technical computing client a task is associated with a chemical reaction to be simulated step . The task defines a function command or operation such as may be available in the programming language of MATLAB and the number of arguments and input data of the arguments. The technical computing client then submits the task step to the technical computing worker . The technical computing worker receives the task step and performs the requested technical computing as defined by the task step . In performing the technical computing on the task an associated result may be generated step . In alternative embodiments either no result is generated or no result is required to be returned to the technical computing client . After generating the result of the task the technical computing worker provides the result step to the technical computing client and the technical computing client obtains the result from the technical computing worker step .

Referring now to an embodiment of the method of simulating a chemical process or reaction in a distributed technical computing environment is illustrated. Method is practiced with the automatic task distribution embodiment of the invention depicted in . A technical computing worker registers to receive notification of one or more tasks step becoming available or appearing in the automatic task distribution mechanism . On the technical computing client a task is associated with a chemical process or reaction to be simulated step . The technical computing client then submits the task step to the automatic task distribution mechanism . The automatic task distribution mechanism receives the task and makes the task available for distribution step to a technical computing worker . The technical computing client registers step with the automatic task distribution mechanism to receive notification when a result associated with the task submitted in step is available or appears in the automatic task distribution mechanism . The automatic task distribution mechanism registers the technical computing client for notification when the result appears step . The automatic task distribution mechanism provides notification step to the technical computing worker of the availability of the task. In response to receiving the notification step the technical computing worker obtains step the task provided step from the automatic task distribution mechanism . The technical computing worker performs the task step . In performing the task an associated result may be generated step . In alternative embodiments either no result is generated or the result is not required to be returned to the technical computing client . After generating the result from computing the task step the technical computing worker provides the result step to the automatic task distribution mechanism . After obtaining the result from the technical computing worker step the automatic task distribution mechanism notifies step the technical computing client that the result is available. The technical computing client obtains step the result provided step by the automatic task distribution mechanism .

Referring now to one embodiment of the method to distribute a task from a technical computing client to a technical computing worker in a batch mode of operation is illustrated. Method is practiced with the batch mode of the automatic task distribution system e.g. or . A technical computing worker registers to receive notification of one or more tasks step becoming available or appearing in the automatic task distribution mechanism . In an exemplary embodiment the technical computing worker registers to receive a task from the job manager or automatic task distribution mechanism as notification to perform computing on the task. On the technical computing client one or more tasks are associated with a chemical reaction to be simulated step . The technical computing client groups one or more tasks of the tasks into a job associated with the chemical reaction to be simulated step . The technical computing client then submits the job step to the job manager . The job manager obtains the job step from the technical computing client and provides the one or more tasks of the job step to the automatic task distribution mechanism which makes the one or more tasks available for distribution step to one or more technical computing workers A N. In an exemplary embodiment the job manager or the automatic task distribution mechanism may submit the one or more tasks to the one or more technical computing workers A N. In another embodiment the technical computing worker may take the task from the job manager or the automatic task distribution mechanism .

The technical computing client registers step a callback function with the job manager . The technical computing client may setup and or register other callback functions based on changes in the state of processing of a task or job or changes in the state of the job manager or other events available to trigger the calling of a function. The job manager calls this function when the job is completed i.e. when each of the one or more tasks of the job have been completed. In turn the job manager may register step with the automatic task distribution mechanism to receive notification of the results of the submitted tasks appearing in the automatic task distribution mechanism or being received from the technical computing worker A N. In one embodiment the automatic task distribution mechanism registers the notification request of the job manager step . Then the automatic task distribution mechanism provides notification to the technical computing worker of the availability of the task step . In an exemplary embodiment the task is sent by the job manager to the technical computing worker as notification to perform the task. In response to receiving the notification or the task step the technical computing worker obtains step the task provided step from the automatic task distribution mechanism or the job manager . The technical computing worker executes the task step . In executing the task an associated result may be generated step . In alternative embodiments either no result is generated or the result is not required to be returned to the technical computing client . After generating the result from computing the task step the technical computing worker provides the result step to the automatic task distribution mechanism or the job manager . After obtaining the result from the technical computing worker step the automatic task distribution mechanism notifies step the job manager that the result is available. In an exemplary embodiment the job manager receives the results from the technical computing worker . In response to receiving the notification or the result step the job manager obtains the result step provided by step the automatic task distribution mechanism . If the job manager received the last result of the job the job manager will notify the technical computing client that the job is completed via the registered callback function step . After triggering the completed job callback function step the technical computing client obtains step the result provided step by the job manager .

With the methods of simulation distribution described above methods and in view of the embodiment of the concurrent multiple distribution modes of operation depicted in system of one ordinarily skilled in the art will recognize the application of the above methods to the multiple modes of operation for each technical computing client A N in .

In similar fashion biological systems having multiple chemical reactions can be simulated by on the technical computing client associating a job with the biological system to be simulated. The job comprises multiple tasks associated with the chemical reactions of the biological system. The technical computing client then submits the job to the job manager . The job manager obtains the job from the technical computing client and provides the one or more tasks of the job to the automatic task distribution mechanism which makes the one or more tasks available for distribution to one or more technical computing workers A N.

In certain embodiments a user may model a chemical reaction using a graphical user interface GUI . An example of this can be seen in . depict an embodiment of a tabular graphical user interface that may be used to receive input manufactured by a user for creating a model. As shown in the user interface may include a model pane . In the embodiment shown in the model pane lists one or more models in a tree structure familiar to users of computers operating under control of an operating system such as the WINDOW operating system manufactured by Microsoft Corp. of Redmond Wash. or another suitable operating system using graphical controls. In the particular embodiment depicted by a single model of a chemical reaction is contained in the model pane indicated by the folder labeled FieldKorosNoyesModel . That model contains three subfolders Compartments Reactions and Species . The subfolders represent pieces of the modeled reaction. Other graphical user interface schemes may be used to present this information to the user. In some embodiments the model pane may display a number of folders representing models. User selection of a particular folder causes the system to display folder in the model pane that represent pieces of the reaction e.g. compartments reactions and species. In still other embodiments each model and all components of all models may be displayed in the model pane and each model may be associated with a radio button. Selection of the radio button associates with a model causes that model and its constituents to be actively displayed. In some of these embodiments unselected models are displayed in grey type or may have a transparent grey overlay indicating that they are not currently the active model.

The illustrative graphical user interface also includes a reaction table and a species table . The reaction table is associated with the Reactions folder displayed in the model pane . Similarly the species table is associated with the Species folder displayed in the model pane . In some embodiments collapsing the associated folder causes the table to not be displayed. The respective tables may be displayed in their own graphical user interface window rather than in the same window as the graphical user interface as shown in .

The reaction table lists each reaction present in a modeled biological process or chemical reaction. In the embodiment shown in the modeling environment displays reactions present in the Field Koros Noyes model of the Belousov Zhabotinsky reaction and includes four columns a reaction column a kinetic law column a parameter column and a reversible column . Each row of the reaction table corresponds to a particular reaction. The number and format of columns displayed by the reaction table may be selected by the user. In other embodiments the number and format of columns to be displayed may be based on the type of reaction selected by the user.

The reaction column displays a reaction represented in an abstract format e.g. Ce Br. In other embodiments the reaction may be represented as a differential equation in stochastic format or as a hybrid of two or more of these formats. In some embodiments the reaction table includes a column identifying modifiers of the reaction. For example some reactions can be catalyzed by a substance. This may be represented in the tabular format as Ce m s Br meaning that the presence of the species s accelerates the conversion of Ce into Br.

In the embodiment shown in the reaction table also includes a kinetic law column which identifies the kinetic law expression the identified reaction follows. In the embodiment shown in the kinetic law associated with the Ce Br reaction is Ce k5 meaning that Ce is consumed at a rate controlled by the parameter k5 and the amount of Ce present. In the embodiment shown in the parameters for the kinetic law expression are listed in the parameter column . In some embodiments the reaction table includes a column identifying the name of the kinetic law associated with a particular reaction e.g. mass action or Michaels Menten. In other embodiments the reaction table includes a column identifying the units in which the kinetic law parameters are expressed e.g. 1 seconds 1 moles seconds etc.

Still referring to the embodiment shown in the reaction table includes a reversible column which indicates whether the associated reaction is reversible. A reversible reaction is one which occurs in either direction i.e. Ce Br. In some embodiments the reaction table may include a column identifying dynamics of the reaction e.g. fast or slow. In some of these embodiments the rapidity with which a reaction occurs is identified on a scale of 1 to 10. In still other embodiments the user may be presented with a slide control that allows the rapidity of various reactions to be set relative to one another. In still further embodiments the reaction table may include a column for annotations or notes relating to the reaction.

The modeling environment shown in also displays a species table . In the embodiment shown in the species table includes a name column an initial amount column and a constant column . The species table depicts the initial conditions and amounts of material used in the modeled biological process or chemical reaction. Thus in the embodiment shown in the modeled biological process begins with 0.003 molar units of bromine i.e. 0.003 multiplied by Avrogado s number. The constant column is set to true if the model should assume that there is an infinite supply of a particular species. In other embodiments the species table includes other columns such as a column identifying units e.g. moles molecules liters etc. whether a particular species is an independent variable in the model i.e. whether the species is an input to the system a column for annotations or a column for notes.

In still other embodiments the modeling environment allows a user to represent a biological process or chemical reaction as a block diagram. depicts an embodiment of a block diagram modeling environment. In the embodiment depicted in a block diagram showing heat shock reaction in bacteria is under construction. As is well known heat shock response in is a protective cellular response to heat induced stress. Elevated temperatures result in decreased growth in large part from protein unfolding or misfolding. The heat shock response via heat shock proteins responds to heat induced stress by refolding proteins via chaperones or by degrading nonfunctional proteins via proteases.

The block diagram shown in depicts the expression of five particular gene sequences involved in the heat shock response. In part depicts pathways for the expression of proteases involved in heat shock response. Pathways represent the expression of heat shock proteins ftsH Hs1VU and other proteases respectively. The pathways are activated by the interaction of with RNA polymerase at the promoter of the respective sequence. Each pathway depicts the transcription of the mRNA mediated by the and RNA polymerase interaction at the promoter and the subsequent translation of the protease. The heat shock proteases including ftsH and Hs1VU serve to degrade proteins rendered nonfunctional by heat stress. Similarly the diagram depicts the pathways involved in the expression of the heat shock proteins and DnaK respectively. The expression of the protein is activated by the interaction of and RNA polymerase at the promoter. The mRNA is transcribed and subsequently is translated . In a closely related pathway the heat shock protein DnaK is translated. The interaction of and RNA polymerase at the promoter activate the transcription of DnaK mRNA and subsequently the translation of DnaK. DnaK in turn may either interact with so as to stabilize or alternatively may refold the proteins unfolded by heat stress.

A block diagram editor allows users to perform such actions as draw edit annotate save and print out block diagram representations of dynamic systems. Blocks are the fundamental mathematical elements of a classic block diagram model. In some of these embodiments the modeling environment includes two classes of blocks non virtual blocks and virtual blocks. Non virtual blocks are elementary dynamic systems such as the and RNA polymerase interaction . A virtual block may be provided for graphical organizational convenience and plays no role in the definition of the system of equations described by the block diagram model. For example in the block diagram of the heat shock mechanism in E. bacteria depicted in gene transcription mediated by 32 to produce proteins represented by and may be represented as a single virtual block. In this case the virtual block adds hierarchy to a model for the purpose of improving the readability of models.

The block diagram editor is generally a graphical user interface GUI component that allows drafting of block diagram models representing a chemical or biochemical reaction by a user. depicts an embodiment of a GUI for a block diagram editor that features a floating element palette. In the embodiment shown in the GUI tools include various block tools various wiring line connection tools an annotation tool formatting tool a save load tool a notification tool and a publishing tool . The block tools represent a library of all the pre defined blocks available to the user when building the block diagram. Individual users may be able to customize this palette to a reorganize blocks in some custom format b delete blocks they do not use and c add custom blocks they have designed. The blocks may be dragged through some human machine interface such as a mouse or keyboard on to the window i.e. model canvas . The graphical version of the block that is rendered on the canvas is called the icon for the block. There may be different embodiments for the block palette including a tree based browser view of all of the blocks. In these embodiments the floating element palette allows a user to drag block diagram elements from a palette and drop it in place on the screen. In some of these embodiments there may also be a textual interface with a set of commands that allow interaction with the graphical editor. For example dragging a polymerase block to the model may cause the system to prompt the user for the protein to be used in the polymerase reaction.

As one can see from B and a model of a biological or chemical reaction such as the heat shock response in bacteria can involve several reactions or processes. The simulation of these reactions can be expedited by divided them up into tasks grouping the tasks into jobs and providing the jobs for distribution and execution on a distributed system.

The worker pool contains a list of technical computing workers A N that are available to work on a task. These technical computing workers A N may on startup register with a job manager . The name of the job manager the technical computing worker A N is associated with may be configurable by an interface of the technical computing worker A N or by a command line startup parameter or an external configuration or registration file. The worker pool may keep a list of good technical computing workers A N or those workers to which the job manager can communicate with and can determine has such a status to be available for processing tasks. The job manager can update the worker pool by going through the list of technical computing workers A N registered in the worker pool and sending communications to each of the technical computing workers A N to determine their status and if they are available. Accordingly the worker pool can be updated to determine the current set of technical computing workers available or otherwise able to receive tasks from the job manager .

The job runner is responsible for determining the next task to work on and for submitting the task to a technical computing worker A N. The job runner works with the job queue and takes the next task for processing from a job in the job queue . The job runner obtains from the worker pool a name of or reference to a technical computing worker A N and submits the task for processing to the obtained technical computing worker A N. The job runner may be configured to have business rule logic to determine the next task to take from the job queue either in a FIFO manner supported by the job queue or any other manner based on priority availability task and job option settings user configuration etc. The job runner in conjunction with the worker pool and the job queue can form a portion of or all of the functionality of the automatic task distribution mechanism . The job runner can have such logic to determine from the worker pool which technical computing worker A N should be assigned and sent a task from the job queue . Alternatively a separate automatic task distribution mechanism can be responsible for determining the technical computing worker A N to be assigned a task and to send the task to the assigned technical computing worker A N. In any of these embodiments the technical computing worker does not need to know the identity such as via a hostname or an interne protocol address of the technical computing worker A N assigned to perform technical computing on a task.

The job manager also has a database for storing and retrieving job manager job and task objects and data or other objects and data to support the operations described herein. For example jobs in the job queue the list of workers of the worker pool the tasks of any jobs in the job queue the properties of any of the task job or job manager objects may be stored in the database . The database can be a relational database or an object oriented database such as database software or applications from Oracle or SQL Server from Microsoft or any other database capable of storing the type of data and objects supporting the operations described herein. The database can be an in process database of the job manager or it can be a remote database available on another computing device or another server . Furthermore each instance of the job manager A N could use a different database and operating system than other instances of the job manager A N or be using a local database while another job manager A N uses a remote database on another server . One ordinarily skilled in the art will appreciate the various deployments of local or remote database access for each of the one or more job managers A N.

The job manager can be configured to execute certain functions based on changes of the state of a job in the queue . For example the technical computing client can setup functions to be called when a job is created in a job queue when the job is queued when a job is running or when a job is finished. The job manager is to call these functions when the appropriate change in the state of job occurs. In a similar manner the task and job can be configured to call specified functions based on changes in state of the task or job. For example a job may be configured to call a function when a job is added to the queue when a task is created when a task is completed or when a task starts running. A task may be configured to call a function when the task is started or running.

Referring still to the technical computing client submits a job Job comprised of one or more tasks such as Task and Task to the job manager . The job manager receives the job e.g. job and places the job into a job queue . The job runner then obtains the one or more tasks from the first job submitted to the job queue . A technical computing worker registers with the job manager and is listed in the worker pool of the job manager . From the worker pool the job runner determines a technical computing worker A N to submit the task for processing. The technical computing worker A N obtains the function to be executed from the definition of the function in data structure of the task object performs the function and generates a result of the function for the task. Then the technical computing worker updates the task object to provide a result of the task. For example the task object may have a field representing the output arguments from the execution of the function defined by the task. The output arguments may contain one or more arrays of data as allowed by the programming language of MATLAB . Additionally the task object may contain an error field to which the technical computing worker A N updated to indicate any error conditions in performing the task or executing the function of the task. The job manager checks to see if this is the last result to be obtained from a technical computing worker A N for the job currently being processed. If the result is the last result the job manager can provide the set of task results for the completed job to the technical computing client .

The MATLAB programming enables you to write a series of MATLAB statements into a file referred to as an M File and then execute the statements in the file with a single command. M files can be scripts that simply execute a series of MATLAB statements or they can be functions that also accept input arguments and produce output. Furthermore the MATLAB programming language enables the association of a callback function with a specific event by setting the value of the appropriate callback property. A variable name function handle cell array or string can be specified as the value of the callback property. The callback properties for objects associated with Simulation distribution software are designed to accept any of the above described configurations as the value of the callback property and may accept any other command function or input parameter value that are or may become available in the MATLAB programming language. This allows users of the MATLAB programming language to use the function calls they are familiar with without learning the object oriented mechanism and take advantage of the distributed processing of tasks offered by Simulation distribution software of the present invention.

In the exemplary object oriented distributed system of the technical computing client creates or declares a job object residing in the job manager . The job object comprises one or more task objects A N. The job object further defines properties associated with the job such as those job properties described in further detail below. For example a timeout property to specify the time limit for completion of a job. Additionally the minimum and maximum number of technical computing workers to perform the tasks of the job can be set. The task object A N is an object that defines a function to be executed by a technical computing worker . The function contains a MATLAB command input data and number of arguments. The task object A N defines additional task properties such as those defined below. For example the task object A N may have a state property to indicate the current state of the task. Additionally the technical computing client may interface with the job manager through a job manager object residing on the job manager . In a similar manner to the job object and task objects A N the job manager object may have properties to define configuration and other details about the job manager as described below. For example the job manager object may have a hostname property to indicate the name of the computer where a job queue exists or a hostaddress property to indicate the internet protocol address of the computer. For any of the job manager object job object or task objects A N the technical computing client may not instantiate a local object but may just have a proxy or facade object to reference the object existing in the job manager .

Still referring to the technical computing client submits the job to the job manager via the job object . The job manager obtains each of the task objects A N from the job object . The job manager puts the job of the job object into the job queue . The job runner obtains the one or more task objects A N from the job object . The job runner with the worker pool determines a technical computing worker to process a task. The job runner then submits a task via a task object A N to an assigned technical computing worker . The technical computing worker obtains the function to execute from the properties of the task object A N and performs technical computing of the task in accordance with the function. The technical computing worker then obtains the results of the function and updates one or more properties of the task object A N with information about the results. In the case of any errors the technical computing worker may update any error properties of the task object A N. In a similar manner as the technical computing client the technical computing worker may use proxy or facade objects to interface with the job job manager or task A N objects residing in the job manager . The job manager then updates the job object with updated task objects A N containing the results of each task. The job manager may also update other properties of the job object such as start and finish times of the job to reflect other information or status of the job. The job manager then provides the updated job object to the technical computing client . The technical computing client then can retrieve the results of each task from the updated job object . One ordinarily skilled in the art will recognize the various combinations of uses of the properties and functions of these objects in performing the operations described herein and in support of any of the multiple modes of distribution as depicted in .

In an exemplary embodiment of the invention as depicted in and by way of example the follow provides an example of simulating a reaction in which one reactant exponentially decays into a product i.e. X Z. A Stochastic Simulation Algorithm SSA is used for the simulation. The steps for setting such a distributed simulation and plotting the results are set forth below.

The results of the distributed simulation can be seen in . In this example the M file called is expdecay.m. The contents of this M File are shown below.

In addition to the object oriented interface to task and job management functionality of the distributed system the programming language of Simulation distribution software may also support task distribution via high level functional procedure calls. The MATLAB programming language includes procedural function calls such as eval and feval that provide a quick and powerful procedure to execute functions. Additionally the MATLAB programming language supports anonymous functions and function handles. Function handles are useful when you want to pass your function in a call to some other function when that function call will execute in a different workspace context than when it was created. Anonymous functions give you a quick means of creating simple functions without having to create M files each time and can be viewed as a special subset of function handles. An anonymous function can be created either at the MATLAB command line or in any M file function or script. Anonymous functions also provide access to any MATLAB function. The sign is the MATLAB operator that constructs a function handle or an anonymous function which gives you a means of invoking the function. The MATLAB programming language enables the association of a callback function with a specific event by setting the value of the appropriate callback property. A variable name function handle cell array or string can be specified as the value of the callback property. The callback properties for objects associated with Simulation distribution software are designed to accept any of the above described configurations as the value of the callback property and may accept any other command function or input parameter value that are or may become available in the MATLAB programming language. This allows users of the MATLAB programming language to use the function calls they are familiar with without learning the object oriented mechanism and take advantage of the distributed processing of tasks offered by Simulation distribution software of the present invention.

An example of this wherein three stochastic solvers SSA Explicit Tau and Implicit Tau Leaping are used is provided below.

In alternative embodiments the object oriented interfaces and or functional procedures available in the programming language may be available in one or more application programming interfaces and may be available in one or more libraries software components scripting languages or other forms of software allowing for the operation of such object oriented interfaces and functional procedures. One ordinarily skilled in the art will appreciate the various alternative embodiments of the above class definitions class method and properties package scope methods functional procedures and programming instructions that may be applied to manage the distribution of tasks and jobs for distributed technical computing processing of the present invention.

From an overall perspective and in view of the structure functions and operation of the system as described herein the current invention presents many advantages for distributed streaming and parallel technical computing processing systems. The system can handle a wide variety of user configurations from a standalone system to a network of two machines to a network of hundreds of machines and from a small task granularity to an extremely large task granularity of parallel and parallel and serial technical computing.

Referring to the distributed system supports the delegation of tasks from a technical computing client to remote technical computing workers A N leveraging the processing capability of each of the workstations A N hosting each of the technical computing workers A N. The tasks are executed independently of each other and do not require the technical computing workers A B to communicate with each other.

Still referring to the streaming or serial processing system allows serial processing to occur via multiple technical computing workers A N on multiple workstations A N. A technical computing client A submits a job requiring a task to be processed serially from technical computing worker A to technical computing worker B then to technical computing worker N. When technical computing worker A completes its technical computing of the task technical computing worker A submits the task to technical computing worker B for further processing. In a similar fashion the task can be submitted to additional technical computing workers N for further processing until the task is complete in accordance with its task definition. The last technical computing worker N to perform technical computing on the task submits the result to the technical computing client .

The streaming processing system can take advantage of specific workstations A N that may have faster processors for performing processor intensive portions of technical computing of the task or take advantage of technical computing workers A N with access to specific data sets or external control instrumentation as required for computation of the task.

In a parallel system is depicted which combines the distributed and streaming configuration of the systems and in . In brief overview technical computing workers A and B and N can be executing a set of tasks independently of each other. Additionally these technical computing workers can then submit tasks to other technical computing workers to perform technical computing of a task in a streaming fashion. For example technical computing worker A can submit a task for further processing to technical computing worker B and in turn technical computing worker B can submit the task for further processing by technical computing worker N. The technical computing worker N when it completes processing may return a result back to the automatic task distribution mechanism or the technical computing client . This configuration provides for great flexibility in determining how to best distribute technical computing tasks for processing based on many factors such as the types and availability of computing devices network topology and the nature and complexity of the technical computing problem being solved.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

