---

title: Resolution independent image resource
abstract: In aspects, a class hierarchy is defined that provides definitions of methods for operating on at least bitmaps and vector graphics. A software developer may instantiate an object according to a class definition of the class hierarchy and assign it to any variable (e.g., a control's property) having a type of an ancestor class of the class. The object may be associated with an image internally represented as bitmap, vector graphics, or some other representation. The control does not need to be aware of how the image is represented. Rather, to draw an image associated with the object, a draw method associated with the object may be called.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07626595&OS=07626595&RS=07626595
owner: Microsoft Corporation
number: 07626595
owner_city: Redmond
owner_country: US
publication_date: 20050801
---
User interface platforms provide a number of interfaces for referencing and using a bitmap image. These bitmaps are then often contained in user interface elements that let a software developer for instance to tile scale or stretch them. However when bitmap based images are stretched they become blocky and of lower quality. Vector graphics on the other hand allow scaling that maintains high quality regardless of the degree of scaling. But vector graphics typically aren t represented as an image but rather as a series of instructions.

Briefly aspects of the subject matter described herein relate to images. In aspects a class hierarchy is defined that provides definitions of methods for operating on at least bitmaps and vector graphics. A software developer may instantiate an object according to a class definition of the class hierarchy and assign it to any variable e.g. a control s property having a type of an ancestor class of the class. The object may be associated with an image internally represented as bitmap vector graphics or some other representation. The control does not need to be aware of how the image is represented. Rather to draw an image associated with the object a draw method associated with the object may be called.

This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The phrase subject matter described herein refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term aspects should be read as one or more aspects . Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.

Other aspects will become apparent from the following Detailed Description when taken in conjunction with the drawings in which 

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the subject matter described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media or communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other storage medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen of a handheld PC or other writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A programming interface or more simply interface may be viewed as any mechanism process or protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s and the like of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s and the like of other component s . The term segment of code is intended to include one or more instructions or lines of code and includes for example code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects and which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium . In the view of one may consider interface objects and as separate interfaces of the same system and one may also consider that objects and plus medium comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation for example depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. Below are some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 as 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface may be subdivided to convert the communications of the interface into multiple interfaces and so on while achieving the same result.

As illustrated in the function provided by interface may be subdivided into multiple interfaces and so forth while achieving the same result. Similarly interface of the second code segment which receives information from the first code segment may be factored into multiple interfaces and so forth. When factoring the number of interfaces included with the 1code segment need not match the number of interfaces included with the 2code segment. In either of the cases of the functional spirit of interfaces and remain the same as with respectively.

The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface of includes a function call Square input precision output that includes three parameters input precision and output and which is issued from the 1Code Segment to the 2Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. An additional parameter of no concern may also be added. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment.

Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface is replaced by interface redefined to ignore or add parameters to the interface. Interface may similarly be redefined as interface redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. As can be seen in some cases a programming interface may include aspects such as parameters that are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1and 2Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface may still be in effect. Similarly shown in part or all of interface from may be written inline into interface to form interface . As illustrated interface is divided into A and B and interface portion A has been coded in line with interface to form interface .

For a concrete example consider that the interface from may perform a function call square input output which is received by interface which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface to conform them to a different interface in this case interfaces and . This might be done for example where there is an installed base of applications designed to communicate with say an operating system in accordance with an the first interface s protocol but then the operating system is changed to use a different interface in this case interfaces and . It can be seen that the original interface used by the 2Code Segment is changed such that it is no longer compatible with the interface used by the 1Code Segment and so an intermediary is used to make the old and new interfaces compatible.

Similarly as shown in a third code segment can be introduced with divorce interface to receive the communications from interface and with divorce interface to transmit the interface functionality to for example interfaces and redesigned to work with but to provide the same functional result. Similarly and may work together to translate the functionality of interfaces and of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1Code Segment to the 2Code Segment i.e. to conform them to a different interface as may be required by the 2Code Segment either the original or a different 2Code Segment . This is depicted in .

As can be seen in this approach is similar to the Divorce scenario described above. It might be done for example where an installed base of applications are designed to communicate with an operating system in accordance with a first interface protocol but then the operating system is changed to use a different interface. The JIT Compiler may be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the subject matter described herein i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

A graphics framework may be used to display the grid and images displayed within the cells of the grid . The graphics framework may use a visual tree such as the one represented in which is a block diagram generally representing a visual tree in accordance with aspects of the subject matter described herein. The visual tree may include visual elements and which represent elements to display. Such elements may include grids list boxes combo boxes buttons text graphics and the like. Some elements in the visual tree may include other elements in the visual tree. For example a button element may include a text element and a rectangle element. To render an element all of the element s descendants need to be rendered.

Turning back to a software developer may desire to display images within some of the cells . One approach to displaying such images is to store them as bitmaps and to call routines that display the bitmaps at the appropriate locations. Provided that a bitmap and the cell into which it is drawn have the same number of pixels in the appropriate dimensions this approach works well. When the bitmap is smaller than the cell pixelation may occur when resizing the bitmap to fit the cell. Alternatively if the bitmap is not resized it may fill a very small portion of the cell depending on how much bigger the cell is than the bitmap.

To deal with this problem images may be drawn using drawing commands sometimes referred to as vector graphics . Each drawing command may indicate for example a direction and distance to draw a line a center point radius and arc length a path ellipse geometry character definitions or some other geometric means for drawing the image. Such images may be expanded or shrunk without becoming pixelated by scaling the distances involved in each drawing command by a scaling factor and changing coordinates if needed for example. Drawing commands may be stored in metafiles.

Some images are difficult to resize while retaining fidelity to the original image. Such images include bitmaps which may be represented by JPG GIF and other bitmap oriented schemes video images and so forth. In the future more images may be represented by drawing commands or their equivalent to allow better scaling of such images. Below is presented a resolution independent mechanism for maintaining compatibility with bitmap type images while taking advantage of easily scalable types of images.

The class ImageSource may comprise an abstract class and may be the parent of classes . The class BitmapSource may be the parent of classes . It will be understood that the arrangement of the classes in the hierarchy may be changed and that more fewer or other subclasses may be included without departing from aspects of the subject matter described herein.

It will also be understood that with object oriented languages having the class ImageSource as the parent class allows a software developer to declare a variable with the type of ImageSource and then to assign this variable to an object derived from any of the descendant classes of the class ImageSource .

Height and Width may represent physical dimensions e.g. millimeters inches or some other unit of measure as opposed to pixel dimensions. By defining Height and Width in physical dimensions the resolution may be variable. The properties AreaOfInterest and AreaOfInterestUnits may specify which portion of the image is to be used when displaying the image. The BrushMappingMode may indicate whether the AreaOfInterest is given in relative coordinates or in absolute coordinates.

In such embodiments the entire image associated with an ImageSource object i.e. an object instantiated in accordance with a definition of a descendant of the ImageSource class may be displayed as compared to a portion defined by AreaOfInterest.

In addition to its public interface the ImageSource class descendants may also implement non public methods such as a drawing method that may be used to produce a visual rasterization of the image associated with an ImageSource object. This drawing method may be used to draw the image in a particular region of the display.

The implementations above are exemplary and may be changed without departing from the spirit or scope of the subject matter described herein.

The class HWndImage allows a software developer to treat a window as an image source. As the content displayed in the window changes the image displayed by an HWndImage object may also change to reflect what is displayed in the window. This may be useful in a windows manager for example to switch between applications. Instead of displaying an icon representing a particular application live contents included in a window of the application may be displayed.

The class DrawingImage allows a software developer to treat an image created by drawing commands e.g. vector graphics as an image source.

The class BitmapSource allows a software developer to treat bitmaps as an image source. A bitmap source object may create a bitmap on demand but may or may not store the bits internally with which to create the bitmap. For example a bitmap source object may use a file or stream or use an object from which a bitmap may be created to create a bitmap. For example a bitmap source object may reference a JPG file. A JPG file does not store a bitmap but rather stores a compressed representation that may be used to generate a bitmap.

The CroppedBitmap class may be used to create a cropped bitmap object which may be used to treat a cropped bitmap as an ImageSource. Note that an object instantiated in accordance with the CroppedBitmap class may or may not store a copy of a bitmap. In some embodiment the CroppedBitmap object may store a reference to another BitmapSource object. When the CroppedBitmap object is asked to render itself it may work in conjunction with the other BitmapSource object to render the image associated with the CroppedBitmap object. In other embodiments the CroppedBitmap object may store a copy of a bitmap instead of or in addition to storing a reference to another object. This feature of storing a reference to another ImageSource object and using the other ImageSource object to render an image may also be used by other ImageSource classes without departing from the spirit or scope of the subject matter described herein.

The BitmapImage class may be used to create a bitmap object which may be used to treat a standard bitmap as an ImageSource.

The VideoImage class may be used to treat a video as an ImageSource. A video may include one or more frames that may be accessed as bitmaps.

The ExternalBitmapImage class may be used to treat a program that periodically generates new bitmaps as an ImageSource. For example presentation software may show frames of a slideshow on a periodic basis. Game software may provide frames related to a game. Such software may provide an indication as to when a new frame is available.

A VisualImage is an image that is made up of user interface UI elements. For example a VisualImage may comprise a dialog box with buttons combo boxes tree view controls and or other UI elements. The class VisualImage allows a software developer to treat a visual image as an ImageSource. Referring to a VisualImage may be one of the elements of the visual tree. Each time an element changes which is associated with a VisualImage object the VisualImage object may be notified of the change so that it may re render its associated image.

Allowing a VisualImage to be treated as an ImageSource allows a software developer to create interesting visual effects. For example software may display a VisualImage of a reflection of a button so that it appears that the button is resting on a plane of glass or pool of water. This may be done by instantiating a VisualImage object and pointing it to the actual button and then creating a routine the fades the ImageSource since VisualImage is an ImageSource and flips it upside down to create a reflection of the button. When the button is pressed and its image changes notification may be sent to the VisualImage object so that the VisualImage object may change the reflection of the button to also appear as being pressed so as to reflect the appearance of the button.

ImageSource objects may be used by a variety of programs. For example in a user interface platform an image control may have a property which is of type ImageSource class . This allows the image control to reference and use an ImageSource object in manipulating or displaying the image. For example if the image control is called Image and the property of the image control is called Source then the Source property may be set to an ImageSource object by any of the following exemplary instructions 

The list above is not intended to be all inclusive and other ways of setting the Source property to an ImageSource object may be used without departing from the spirit or scope of the subject matter described herein.

Another component that may use an ImageSource object is an ImageBrush component. An ImageBrush component may use an ImageSource object to fill a shape with the image associated with the ImageSource object. For example by using an ImageSource object the ImageBrush component may repeat the image as many times as need to fill the shape flip the image as it repeats center it in the shape or perform any number of manipulations to fill the shape with the image.

A pen component may use a brush component to fill the line drawn by the pen. Thus the pen component may also indirectly e.g. via a brush component use an ImageSource object to draw lines. Similarly text may use an image brush component to fill the text with an ImageSource object.

Another component that may use an ImageSource object is an image drawing component. A drawing may comprise a group of objects that are to be manipulated or displayed together. Through an ImageSource object an ImageDrawing may treat the image associated with the ImageSource object as a drawing.

More fewer or other components may use an ImageSource object without departing from the spirit or scope of the subject matter described herein.

The presentation framework is exposed to software developers and includes APIs by which various requests may be made. Top level objects of a graphics framework e.g. the graphics framework described in conjunction with such as the image control described previously buttons list boxes combo boxes scroll bars splitters and the like may reside in the presentation framework .

The presentation core is also exposed to software developers through APIs by which various requests may be made. Interfaces described previously may be exposed through the presentation core . The properties of a top level object of a graphics framework such as an ImageSource object brushes pens shapes animation support text and the like may reside in the presentation core or the presentation framework .

The milcore implements functionality provided by the APIs of the presentation framework and the presentation core . The milcore may be accessed by the presentation core and the presentation framework .

The runtime component may provide an environment for running intermediate language created from one or more programming languages. For example the runtime component may be used to execute intermediate language created from code that implements the presentation core the presentation framework and the program .

The codecs may be used by the presentation core and the milcore for imaging tasks such as encoding and decoding images.

The DirectX component may provide APIs to enable a software developer to access specialized hardware features such as video and sound hardware features without having to write hardware specific code. The program and milcore may use the DirectX component to access the features.

The GDI allows processes to display graphics and formatted text on a video display and may interact with device drivers that display graphics and formatted text on behalf of such processes.

Although some lines have been drawn between various components of the environment of to represent the capacity to communicate between these components more fewer or other communication paths may exist without departing from the spirit or scope of the subject matter described herein. Furthermore while various components of the environment have been described it will be recognized that more fewer or other components may be used or configured in other configurations without departing from the spirit or scope of the subject matter described herein.

At block an ImageSource object is instantiated. This may be done by calling new and providing the name of an ImageSource class i.e. any of the descendant classes in the class hierarchy described in conjunction with as described previously.

At block the draw method of the ImageSource object is called. This method may be called with a height and width. Area of interest and brush mapping style may also be passed in this call as previously indicated.

At block in response to the call to the draw method the ImageSource object may rasterize an image associated with the ImageSource object.

At block the actions stop. The actions above or a portion thereof may be repeated each time it is desired to have an image associated with the ImageSource object rasterized.

Aspects of the subject matter described herein allow a software developer ability to provide different representations for objects that can be displayed in a defined region as images. A software developer for example may provide an image in any format supported by an ImageSource object.

Furthermore aspects of the subject matter described herein allow sending ImageSource objects to other components without those other components knowing how the image is made or rendered. For example as described previously an ImageSource object may be provided to an image brush which fills the geometry with an image. The image brush does not need to know whether the image associated with the ImageSource object is a video clip a metafile or a visual image i.e. an image that is made up of other UI elements in a scene and may simply cause the image to be rendered at a desired location by calling a drawing method associated with the ImageSource object.

As can be seen from the foregoing detailed description aspects have been described related to images. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of various aspects of the subject matter described herein.

