---

title: Integrated instrument driver network
abstract: A mechanism for transparently identifying and retrieving an instrument driver to an application development environment tat is associated with a user-selected instrument is disclosed. Following a user selection of an instrument through a user interface generated by the application development environment, an instrument driver associated with the selected instrument is programmatically identified. If the required instrument driver for the selected instrument is missing from the application development environment, an embodiment of the present invention retrieves the instrument driver from a remote location and installs the instrument driver in the application development environment without the involvement of the user. The present invention also generates a user interface from the application development environment which enables a user to see currently installed instrument drivers as well as available instrument drivers that are located both locally and remotely.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07400997&OS=07400997&RS=07400997
owner: The MathWorks, Inc.
number: 07400997
owner_city: Natick
owner_country: US
publication_date: 20050526
---
The illustrative embodiment of the present invention relates generally to the use of instrument drivers and more particularly to the transparent installation and use and sharing of instrument drivers from within an application development environment.

Instrument control applications require instrument drivers so that they may be easily utilized by end users. An instrument driver differs from a regular OS driver in that an instrument driver does not extend the capabilities of an application development environment ADE in the way OS drivers typically extend an operating system s ability to communicate with new devices. Instrument drivers generally provide a layer of convenience functions that simplify communication with a specific instrument model using an existing communication and hardware interface layer that is already supported by operating system drivers. Current application development environments such as MATLAB SIMULINK both from The MathWorks Inc. of Natick Mass. test and measurement and other ADEs ship instrument drivers on a CD with the ADE. Alternatively the instrument drivers may be made available to the end user for download via a website.

Unfortunately both the technique of pre shipping the instrument driver on CD with the ADE and the technique of providing the instrument drivers via a web site fail to leverage the benefits of integrated instrument driver access from within the application development environment. Current techniques of retrieving remotely located instrument drivers require a web interface to browse and download drivers. Additionally current techniques do not allow the user to verify current instrument drivers in the ADE while determining what other instrument drivers are available. The instrument drivers cannot be used directly from the web interface but rather must be downloaded and installed before use in the application development environment.

Another problem with current techniques of using instrument drivers in an application development environment is that while the user may be notified of instrument driver changes in an instrument driver repository by email or similar manner conventional methods do not inform the user that an instrument driver in the ADE is out of date. Further the conventional methods of updating an instrument driver do not allow a user to submit updated drivers from the ADE to a centralized repository. Rather the user is forced to utilize a web interface and add a lot of information manually that may already be present in the driver. Further while companies provide web interfaces for their own repositories of instrument drivers the companies do not provide a mechanism for a customer working with their own repository of drivers that they want to make available internally.

The illustrative embodiment of the present invention provides a mechanism for transparently identifying and retrieving an instrument driver to an application development environment that is associated with a user selected instrument. The instrument driver is software providing an API Application Programming Interface appropriate for the hardware interface of the selected instrument. The instrument driver includes a library of executable functions that programs or models in the application development environment may call to establish and control communication with the selected instrument. Following a user selection of an instrument through a user interface generated by the application development environment an instrument driver associated with the selected instrument is programmatically identified. The application development environment is checked to see if the required instrument driver is missing. If the required instrument driver for the selected instrument is missing from the application development environment the present invention retrieves the instrument driver from a remote location and installs the instrument driver in the application development environment without the involvement of the user.

In one aspect of the illustrative embodiment of the present invention metadata associated with the instrument driver is examined before any installation of the instrument driver takes place. The present invention also generates a user interface from the application development environment which enables a user to see currently installed instrument drivers as well as available instrument drivers that are located both locally and remotely. Additionally the present invention provides the ability for a user to contribute an instrument driver from an application development environment to a repository or multiple repositories.

In one embodiment in an application development environment a method of selecting instrument drivers includes the step of selecting an instrument through the application development environment. The method further includes the step of determining without user involvement that an instrument driver associated with the selected instrument is missing from the application development environment. The method additionally includes the step of retrieving the missing instrument driver to the application development environment from a remote location without involvement of a user.

In another embodiment in an application development environment a method of selecting instrument drivers includes the step of providing a user interface within the application development environment that identifies at least one currently installed instrument driver and enables the selection of an instrument driver from a group of instrument drivers located locally and remotely. The method further includes the step of selecting one of the multiple instrument drivers through the user interface. Additionally the method includes the step of examining a collection of metadata associated with the selected instrument driver prior to an installation of the selected instrument driver.

In an embodiment in an application development environment a method of selecting instrument drivers includes the step of selecting an instrument in a block diagram model displayed by the application development environment. The method programmatically queries without user involvement the selected instrument to obtain information about an associated instrument driver needed to communicate with the selected instrument. The method further determines without user involvement that the instrument driver associated with the selected instrument is missing from the application development environment. Additionally the method retrieves the missing instrument driver to the application development environment without involvement of the user.

In one embodiment in an application development environment a system for selecting instrument drivers includes a user interface generated from the application development environment that enables the selection of an instrument. The system further includes at least one storage location holding an instrument driver associated with the selected instrument. The system further includes means for programmatically determining without user involvement that an instrument driver associated with the selected instrument is missing from the application development environment. The system additionally includes means for retrieving the missing instrument driver to the application development environment from a remote location without involvement of a user.

In an embodiment in an application development environment a method of uploading instrument drivers includes the step of selecting an instrument through a user interface in the application development environment. The method further includes the step of querying programmatically without user involvement the selected instrument to obtain instrument driver information for the instrument. The method uses the instrument driver information to automatically determine whether the instrument driver associated with the selected instrument is missing from a repository of instrument drivers. Missing instrument drivers are uploaded to the repository of instrument drivers from the application development environment.

The illustrative embodiment of the present invention provides the ability for a user to transparently use a remotely located instrument driver as instrument drivers associated with selected instruments are automatically downloaded and made available without the user s knowledge. The result of the automatic acquisition of the instrument driver is a seamless experience for a user within the application development environment ADE which allows the user to concentrate on application development rather than retrieval of the instrument driver. Users may be automatically notified of an updated instrument driver in a centralized repository when attempting to use an out of date instrument driver in the ADE. Once notified the illustrative embodiment addresses the need for a unified interface in an ADE which shows both currently installed instrument drivers and instrument drivers that are available for downloading at both local and one or more remote locations. The illustrative embodiment also enables a user to contribute an instrument driver from the ADE to a centralized repository and have metadata associated with the instrument driver handled automatically by the repository.

In conventional instrumentation systems a computer or other electronic device equipped with a processor communicates with control instruments such as oscilloscopes and function generators that can obtain data about dynamic real world systems under test. Users can model simulate or analyze data in the application development environment by establishing communication with the control instruments. Similarly data acquisition devices such as multi function input output boards dedicated digital I O boards sound cards and devices collecting data from network data sources and image acquisition devices such as an image capture boards scanners and cameras collect data which may be utilized by electronic devices supporting application development environments. The application development environment may be a block diagram environment such as SIMULINK or a command line environment like MATLAB.

Users connect the computer or electronic device to the control instruments data acquisition device or image acquisition device through various interface options depending upon the hardware interface implemented by the particular control instrument or acquisition device. Interface options include but are not limited to serial general purpose interface bus GPIB virtual machine environment extended for instrumentation VXI VXI GPIB IEEE 1394 PCI ISA and USB Universal Serial Bus . The electronic device or computer system usually executes a software instrument driver having a distinct API Application Program Interface appropriate for the hardware interface of the particular control instrument or acquisition device the term acquisition device as used herein encompasses both image acquisition devices and data acquisition devices . The instrument driver includes a library of executable functions that a computer program may call to establish communication with the control instrument or acquisition device and control the parameters of communication. In one implementation the instrument driver is used to create a device object that is used to communicate with an instrument using properties and functions defined in the instrument driver for a specific instrument model. The device object and an interface object may be used together to create an instrument object representing the instrument in the application development environment.

As noted above block diagrams environments are one type of application development environment that may also be used to communicate with an instrument. During system modeling and simulation in the block diagram environment it is frequently necessary to send simulation data from a block diagram being executed in the block diagram environment to a control instrument or acquisition device. Similarly it is also frequently necessary to receive data from the control instrument monitoring an external system or acquisition device for use in a simulation being run in a block diagram environment. In order to interact with a control instrument or acquisition device a proper instrument driver must be utilized by the computer system or electronic device for communication.

The application development environment also may include an instrument driver that has been previously installed. The instrument driver enables communication to occur between the application development environment and the instrument . The instrument driver may have associated metadata . The metadata includes additional information about the parameters of the instrument driver . The electronic device may also include an instrument driver with associated metadata and instrument driver with associated metadata that are present on the electronic device but have not been installed within the application development environment . It should be noted that for the purposes of the discussion contained herein that any instrument driver that is located outside of the application development environment is considered a remotely located instrument driver regardless of whether it is located on the same electronic device as the application development environment. Thus instrument drivers and would be considered remotely located from application development environment even though they are located on the same electronic device.

The electronic device communicates over a network with a server and . The server may include a plurality of instrument drivers and and their respective associated metadata and . Similarly server may include instrument driver with associated metadata . The network may be a local area network LAN a wide area network WAN an internet intranet the Internet a wireless network or some other type of network over which the electronic device may communicate with the servers and . Those skilled in the art will realize that alternate implementations in which the instrument drivers and are located on other storage locations accessible over the network are also possible without departing from the scope of the present invention.

As noted above the application development environment may be a block diagram environment in which a user is attempting to establish communication between a block diagram model and an instrument the user is selecting. depicts a block diagram of an application development environment used in an alternate embodiment of the present invention. The application development environment generates a user interface which displays a block diagram system model . Included within the block diagram system model are multiple components including instruments and . Those skilled in the art will recognize that although for clarity of depiction the user interface is depicted as being generated on the electronic device that is hosting the application development environment the user interface may be located on a display device separate from the electronic device hosting the application development environment. The application development environment also includes an instrument driver and metadata associated with the instrument driver that has been installed in the application development environment. The instrument driver enables the system model to communicate with the selected instrument represented by the block diagram system model instrument component or .

The present invention provides a mechanism that relieves a user from having to depart an application development environment in order to update or acquire an instrument driver. depicts the sequence of steps followed by the illustrative embodiment of the present invention to programmatically retrieve an instrument driver necessary to communicate with a selected instrument from within an application development environment. The sequence of steps may begin when the user indicates the selection of a particular instrument through the application development environment step . The instrument driver associated with the selected instrument is then programmatically identified without user involvement step . This may be performed by querying the selected instrument such as by automatically sending a command to the instrument asking the instrument to identify itself. The instrument responds with identifying information including the name of an instrument driver needed to communicate with the instrument. The application development environment is then programmatically checked to determine whether or not the identified instrument driver is installed in the application development environment step . If it is determined that the required instrument driver for the selected instrument is not present or needs updating in the application development environment the illustrative embodiment of the present invention programmatically retrieves the instrument driver from a storage location and installs the instrument driver in the application development environment step . The retrieval and installation happens without the participation of the user. In some implementations the user may be automatically notified of the occurrence of the retrieval and installation. The notification may be made via a pop up window within the application development environment or other similar mechanism or through a non immediate notification such as updating a list to which the user has access.

The instrument drivers may be associated with metadata. The metadata includes information about the instrument driver such as version information. In some implementations of the present invention this information may be programmatically or manually examined prior to installation of the retrieved driver in the application development environment. The information in the metadata may be programmatically compared to a predetermined value so as to verify the correct driver is being retrieved. Alternatively the user may be presented with the information.

The metadata associated with the selected instrument driver is then examined by the user step to determine whether the instrument driver is acceptable step . In the event the information is not acceptable the instrument driver is not retrieved or installed in the application development environment step . Alternatively if the metadata associated with the instrument driver is acceptable the instrument driver is retrieved and installed in the application development environment without user assistance step .

In another implementation the present invention enables a user to select an installed instrument driver in the ADE to be added to an instrument driver repository. The sequence of steps followed by the present invention to upload an instrument driver directly from an ADE to a central repository of instrument drivers is depicted in . The sequence begins when the user indicates a selection of a particular instrument through the user interface in the ADE step . After the user selects an upload option in the ADE and selects a target repository step the selected instrument is programmatically queried to obtain instrument driver information step . The metadata from the selected instrument driver is then automatically compared to the instrument driver information in the target repository step . The instrument driver is then uploaded without further user intervention if the instrument driver is missing or out of date in the target repository step . It will be appreciated that the target repository may be a default option rather than being manually selected by the user. It will be further appreciated by those skilled in the art that the present invention may be configured so that the instrument driver of any instrument selected through the UI in the ADE is automatically processed for possible uploading without the user affirmatively selecting an upload option or entering an upload command. Thus in contrast to conventional techniques the illustrative embodiment of the present invention enables the instrument drivers to be submitted directly from the ADE without using a web interface or manually adding instrument driver information which is duplicative of information already contained in the driver.

The process by which an instrument driver is automatically retrieved to a block diagram environment is depicted in . The sequence begins with the selection by the user of an instrument displayed in a block diagram step . The instrument is programmatically queried to obtain instrument driver information step . The response to the query to the instrument indicates the particular instrument driver that should be used to communicate with the instrument. The block diagram environment is then examined to determine the presence or absence of the desired instrument driver step . In the event the required desired instrument driver is absent from the block diagram environment or needs updating it is programmatically retrieved to the block diagram environment without the assistance of the user step . The retrieved instrument driver is then used for communication with the selected instrument from the block diagram environment step .

The present invention may be provided as one or more computer readable programs embodied on or in one or more mediums. The mediums may be a floppy disk a hard disk a compact disc a digital versatile disc a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language. Some examples of languages that can be used include C C C or JAVA. The software programs may be stored on or in one or more mediums as object code.

Since certain changes may be made without departing from the scope of the present invention it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention.

