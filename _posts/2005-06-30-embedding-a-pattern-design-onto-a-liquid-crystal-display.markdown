---

title: Embedding a pattern design onto a liquid crystal display
abstract: A method and system for presenting data on a medium for capture by an input device is described. The method embeds a symbol design, such as an embedded interaction code (EIC), in an image on a display screen, such as a liquid crystal display (LCD). A grid with a plurality of pixels defines a size of an EIC pattern on an LCD. An area of the grid is used to embed position data and/or metadata information. The area may be defined by a sub-pixel of the plurality of pixels and/or the edges of the grid itself. The sub-pixel with the EIC pattern may be configured to have a grey value based upon a color of an underlying image associated with an application program being displayed on the LCD. The method also allows for decoding of the position data and/or metadata information in the EIC pattern on the LCD.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07619607&OS=07619607&RS=07619607
owner: Microsoft Corporation
number: 07619607
owner_city: Redmond
owner_country: US
publication_date: 20050630
---
The advent of the computer has boomed to a point of prolific use in a variety of different areas. Computers are used throughout the world for everything from controlling speed and direction in a vehicle to making an online order for a new product to allowing a young child to learn how to count or read. Within the business industry the use of the computer has greatly increased the efficiency for performing tasks.

Computer users are accustomed to using a mouse and keyboard as a way of interacting with a personal computer. Despite the advances in technology most computer users tend to use documents printed on paper as their primary editing tool. Some advantages of printed paper include its readability and portability. Others include the ability to share annotated paper documents and the ease at which one can archive printed paper. In the case of annotations the printed document assumes a greater significance because of the annotations placed on it by the user. One of the difficulties however with having a printed document with annotations is the later need to have the annotations entered back into the electronic form of the document. This requires the original user or another user to wade through the annotations and enter them into a personal computer. In some cases a user will scan in the annotations and the original text thereby creating a new document. These multiple steps make the interaction between the printed document and the electronic version of the document difficult to handle on a repeated basis. Further scanned in images are frequently non modifiable. There may be no way to separate the annotations from the original text. This makes using the annotations difficult.

Computer technology has advanced in some areas in order to attempt to address these problems. With the advent of the tablet style personal computer a computer user can input handwritten strokes onto the display regions of the monitor. As such annotations may be entered directly into a document. However many problems exist with respect to tracking the movement of an input device for the handwritten annotations.

One technique of capturing handwritten information is by using a pen whose location may be determined during writing. One type of pen functions by using a camera to capture an image of paper encoded with a predefined pattern. This pattern is used by the pen to determine a location of a pen on a piece of paper. However the pattern is encoded onto a paper document. A user must still maintain a paper document for use with the pen to be uploaded to a personal computer.

Aspects of the present invention are directed generally to presenting data on a medium for capture by an input device. More particularly aspects of the present invention are directed to a method and system for embedding a symbol design such as an embedded interaction code EIC in an image on a display screen such as a liquid crystal display LCD . A grid with a plurality of pixels defines a size of an EIC pattern on an LCD. An area of the grid is used to embed position data and or metadata information. The area may be defined by a sub pixel of the plurality of pixels and or the edges of the grid itself. The sub pixel with the EIC pattern may be configured to have a grey value based upon a color of an underlying image associated with an application program being displayed on the LCD. Another aspect of the present invention provides for decoding of the position data and or metadata information in the EIC pattern on the LCD.

In the following description of various illustrative embodiments reference is made to the accompanying drawings which form a part hereof and in which are shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a digital camera not shown a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a pen stylus and tablet microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface . A digitizer and accompanying pen or stylus are provided in order to digitally capture freehand input. Although a direct connection between the pen digitizer and the user input interface is shown in practice the digitizer may be coupled to the processing unit directly via a parallel port or other interface and the system bus as known in the art. Furthermore although the digitizer is shown apart from the monitor the usable input area of the digitizer may be co extensive with the display area of the monitor . Further still the digitizer may be integrated in the monitor or may exist as a separate device overlaying or otherwise appended to the monitor .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface D to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

Aspects of the present invention include placing an encoded data pattern in a liquid crystal display LCD form. For example the encoded data stream may be represented as an encoded image overlying the displayed image or may be a physical encoded image on a display screen so any image portion captured by a pen is locatable on the display screen . In accordance with one aspect of the invention the design pattern hides position information ad or metadata information. The pattern is displayed on an LCD screen so when a camera samples pictures from the LCD screen the camera or computing device associated with the camera may determine its position on the LCD screen accordingly and or any metadata stored within the pattern. Aspects of the present invention provide an embedded interaction code EIC pattern that is embedded into sub pixels of an LCD showing up temporally.

An embedded interaction code EIC symbol is the smallest unit of visual representation of an EIC array which is a single or multiple binary array that are used to represent x y position and metadata. An EIC symbol includes one or more bits encoded in one symbol visual representation of the bits and physical size of the one symbol. For LCD embodiments the EIC pattern design may be represented by LCD pixels or sub pixels. is a sketch figure of an EIC symbol composed of LCD sub pixels which represents the design of an EF diamond 8 bit a 16. illustrates a symbol of 12 4 LCD pixels where each sub pixel may be embedded with 8 bits. An EF diamond 8 bit a 16 was originally designed for operation on printed documents. In accordance with at least one aspect of the present invention such a symbol may also operate on LCD screen. As shown dots may be dots which are shown as clock dots dots may be dot positions which are left blank to help detect orientation of the EIC pattern and dots may be dot positions which are used to embed a bit for x y position and metadata.

Although utilizing an EIC pattern on paper is known and used there are issues when one attempts to directly use an EIC pattern for paper on an LCD. Some of these issues include the symbol size the visual effect and the algorithm complexity. As such an EIC symbol for an LCD are redesigned and optimized in accordance with features of an LCD.

An LCD screen utilizes the open and shutter operation of liquid crystal cells arranged uniformly in the screen to show images. The operation of the lighting and non lighting of pixels and sub pixels are well known by those skilled in the art. Behind the crystal cells are many lamps that are lit when the displayer is electrified. If all the liquid crystal cells are open back light comes into an individual s eyes fully so the screen is white. When displaying each pixel s state of being open or close may be determined through the analog to digital conversion of the display signals so the picture may be shown by controlling the state of each LCD pixel. Because the lighting rate of the back lamp in an LCD is higher than the refresh rate of a cathode ray tube CRT device the pictures on an LCD are very steady. A displayer emits three kinds of light namely red green and blue.

The liquid crystal cells and sub pixels arranged in the LCD are formed as shown in . An LCD pixel may be composed of an arrangement of 4 4 sub pixels . One sub pixel is shown by a dashed line. Within a sub pixel the red green and or blue channels may be used to embed code which decreases the stimulus to eyes in spatial distribution as compared to the application of an EIC pattern onto a paper surface. The LCD grid may be used to detect the grid information. A black dot used as clock dot in an EIC pattern on a paper surface may be neglected for application on an LCD screen. Sparser distribution of coded dots also contributes to a decreased affect on a user during normal reading of an LCD screen as described below.

For an LCD screen an EIC pattern may be configured and displayed with the detection functionalities of a standard EIC paper based design pattern while being less sensitive to the human eye. Aspects of the present invention describe an EIC symbol pattern to embed into an EIC array. Features of LCD technology may be used to decrease the algorithm complexity and affect on the human eye.

In one embodiment when embedding code at a red channel R sub pixel position the gray value of red channel R equals zero and the grey value of green channel G and blue channel B equals 255 respectively. The red channel R sub pixel is dark with no light irradiating whereas the green channel G and blue channel B sub pixels are fully open and are shown as white. In accordance with another embodiment the grey value of each of the red channel R green channel G and blue channel B may be changed based upon a color of an underlying image displayed on the LCD. Moreover as shown in in order to make the codes sparser there is no black dot in the symbol design and only one dot is shown of four possible positions and in each symbol. For example if the code is 00 then a dot is displayed at red channel 0 0 sub pixel position . If the code is 01 then a dot is displayed at red channel 0 1 sub pixel position .

In addition in each configuration such as the 4 4 configuration shown in the right most column Cand bottom most row Rmay remain blank. Such a design with the right most column and bottom most row remaining blank ensures that two embedded codes are not connected potentially causing an error when attempting to read information. The configuration to leave a column blank and a row blank of code may be different such as shown in where the left most column remains blank and the top most row remains blank of possible code positions. It should be understood by those skilled in the art that other configurations may be implemented in accordance with aspects of the present invention including the use of all row and or columns for positioning of code data.

Because the code is embedded into a sub pixel e.g. the red channel as shown in the illustrated Figures the orientation of the EIC pattern is known if the LCD grid is known. In implementation the grid of an LCD may be captured by a camera as shown in . Because the left side of an LCD pixel value is dark and the right side is white determination of the orientation of the pattern may be done. If the orientation of the pattern has been determined then the black dots may be decoded in the symbol. Consequently the position information and or metadata information may be decoded as is done in paper type EIC pattern applications.

In accordance with another aspect of the present invention an EIC symbol pattern may also be embedded into other areas for the sub pixels. For example as shown in an EIC symbol pattern may also be embedded into a black matrix e.g. the LCD grid. As shown in as opposed to positioning code within a color channel sub pixel such as the red channel R position in a sub pixel an edge of a sub pixel may be darkened. The code may be configured to include some of the region of the sub pixel designated for a particular color channel.

With respect to actually embedding an EIC pattern on an LCD screen one point may be to decrease the appearance of the pattern in temporal and spatial distribution so as to decrease the stimulus to the human eye. In accordance with one implementation an overlay technology such as Microsoft DirectX by Microsoft Corporation of Redmond Wash. may be used to show the EIC pattern periodically switching to the LCD screen surface. In such an implementation the pattern is flashing. The interchanging frequency depends on the refresh time of the particular LCD. For example if the refresh time of an LCD screen is 12 ms and the ratio to show the pattern versus screen content is set to 1 1 then the EIC pattern presentation frequency is approximately 40 Hz.

In accordance with another implementation of aspects of the present invention an image on an LCD screen may be watermarked with an EIC pattern. In such an implementation the EIC pattern may not flash. Instead the EIC pattern is updated when content refresh is refreshed on the LCD screen. The process of watermarking may be performed in a memory of the LCD with graphics processing units GPU or by other means and methods.

As shown in a portion of an LCD screen is shown with an EIC pattern watermarked on the screen image. The grey value of the sub pixels used to embed code may be changed in accordance with the background color of the underlying image displayed on the LCD. For example illustrates a portion in which sub pixels are shown with EIC code embedded therein. illustrates the portion in a magnified form to illustrate how one sub pixel with an embedded EIC code has a different grey value from another sub pixel with an embedded EIC code. In the example shown the grey value of sub pixels used to embed the code is changed in accordance with the background color of the screen image displayed on the LCD. As such if a user changes a general location of an image on the LCD display screen the sub pixel of that portion of the LCD screen for display of an image and embedded EIC code is changed as well in accordance with the background color of the underlying image. Methods and systems for changing the color may include alpha blending with a standard implemented color for the EIC code on a white background varying the grey of the sub pixel by a certain percentage with respect to the background image grey value or other methods and systems.

An m array may be used to represent the X Y position in an array and multiple m arrays may be used to represent metadata. These multiple m arrays may be encoded in EIC symbols. In each EIC symbol one bit from each m array may be encoded. EIC symbols in place of the bits of the m array representing X Y position and or metadata information form an EIC symbol array visually the tiling of EIC symbols forms the EIC pattern . shows an EIC symbol array of EIC symbol 8 a 16 in an m array with the order of 28 .

EIC pattern analysis includes two main steps. First images may be processed to improve contrast or undergo other preprocessing. Next features of an EIC pattern in the image are analyzed. A pen type input device may be used to analyze the image. The input device is assumed to capture images from a plane. The spatial transform converts the plane to a resulting image which is also assumed to be a plane . This transformation may be a perspective transform. Here an EIC pattern in image is expected to lie on grid lines that are a perspective transform of the grid lines in the EIC symbol array. The perspective transform is first assumed to be an affine transform i.e. evenly spaced parallel lines are kept evenly spaced and parallel but perpendicular lines may not be perpendicular anymore . Rotation scale and translation of the affine transform are estimated from analyzing the EIC pattern in image. The perspective transform can then be obtained by fitting an effective EIC pattern to the affine transformed grid lines.

As described above an x y position and metadata information may be embedded on an LCD screen and a pen type device with a camera assembly may track the position by reading the embedded data. In accordance with further aspects of the present invention position data and metadata information may be decoded from the images captured by a camera such as a pen type input device with a camera when the camera moves over an LCD screen. As such the position data and metadata information in an EIC pattern in an image may be decoded by a camera and or a computer associated with a camera that captures the EIC pattern. The algorithms described herein illustrate methods and systems for decoding 4 4 LCD pixels where each sub pixel may be embedded with 2 bits. illustrates liquid crystal cells and sub pixels arranged in an LCD with four possible positions and in the red channel R of a sub pixel for embedding an EIC pattern.

In accordance with aspects of the present invention there are two steps for decoding x y position data and or metadata information from captured images. The first step is vision processing of a captured image where the input is the captured image and the output is an extracted bit stream. The second step is decoding the x y position data and or metadata from the extracted bit stream.

One aspect of the step of pre processing is to obtain effective pixels that form the LCD grids i.e. the LCD grid mask. All pixels on the LCD grids are not needed for further data processing just the pixels near the grid vertex for the algorithm within the next step to determine the perspective transform of the LCD grids from the LCD screen plane to the sensor plane.

As described above the input of the pre processing step is a captured image such as the image shown in . The output is an effective LCD grid mask. illustrates a normalized image of with an effective LCD grid mask indicated by the white dotted pixels .

In the descriptions below an image sensor size of 128 100 pixels is utilized. Pixels are indexed from the top left corner. illustrates an example pixel index utilized in the examples described below. In accordance with aspects of the present invention a morphological approach is used to separate the LCD grid mask.

First pixels that lie on the edge and vertex of the LCD grids are separated. The size of an LCD grid cell in a captured image is known roughly. Therefore a rough ratio is determined so that the number of pixels that lie on the edge or vertex of the LCD grids in a small block may be estimated. For example the ratio may be determined to be 2 3. The grey level value of pixels that lie on the edge or vertex of the LCD grids is lower than the grey level values of the pixels that lie on the center of grids. From this information the captured image may be divided into small blocks e.g. the block size may be 6 6 and the darkest 24 pixels 2 3 6 6 may be selected as the estimated pixels that form the LCD grids. illustrates pixels that lie on the edge and vertex of the LCD grids. By dividing the image into small blocks the pixels that lie on both edge and vertex of the LCD grids are separated as a mask M. A mask such as Mis a binary array the same size as the captured image 1 means valid and 0 means invalid. If a pixel x y lies on an edge or vertex of the LCD grids then M x y is equal to 1 else M x y is equal to 0.

The next step is the binary erosion of the mask M. A binary erosion operator may be used in this step. The input of the operator is the mask Mobtained in the last step and the output is a new mask M. For each pixel x y M x y is equal to 1 if M x y is equal to 1 and there are 3 or more neighboring pixels of x y which equal to 1 else M x y is equal to 0. The concept and associated algorithms of binary erosion is readily understood by those skilled in the art.

Two pixels are neighbors to each other if they are directly below above or next to each other. shows neighboring pixels in accordance with aspects of the present invention. Pixel is a given pixel x y . Pixels and are neighboring pixels of pixel x y . Some neighboring pixels are shown in the cardinal directions up down left right of pixel . Others pixels and are on the diagonals from pixel . By using a binary erosion operator many pixels that lie on the edge of grids are thrown off as shown by mask Min .

The third step of pre processing includes separating large connected regions of mask M. Two new masks Mand Mare obtained by judging the size of connected regions of the mask M. Mask M x y is equal to 1 if pixel x y belongs to the small size e.g. size 

R x y M x y 1 x y are neighbors the size of a connected region means the count of pixels in the region.

If mask M x y is equal to 1 the pixel x y is considered to lie on the vertex of the LCD grids as shown by the pixels in . The pixels that lie on the large connected regions as represented by mask Mand as the pixels shown in are further processed in the next step.

The fourth step of pre processing includes thinning the mask M. Mask Mis processed by another binary erosion operator and a new mask Mis obtained. Mask M x y is equal to 1 if M x y is equal to 1 and the value of 3 or 4 neighbor pixels of x y in mask Mare equal to 1. The pixels that belong to the small connected regions of Mform another mask M. Mask Mand mask Mare illustrated in respectively. The LCD grid mask is obtained by merging the mask Mand mask M as shown in .

The second step of vision processing LCD pixel grid analysis is described below. As shows using the result of pre processing LCD pixel grid analysis may be applied to retrieve the accurate perspective LCD pixel grid. It is understood by those skilled in the art that various methods may be used for LCD pixel grid analysis. One example method for LCD pixel grid analysis is described below.

EIC pattern analysis obtains a homography matrix describing the perspective transform from a grid to an image. A perspective transform is a planar transform that is a perspective projection. With a perspective transform a line is still a line. Parallel lines may not be parallel anymore. Instead they may appear to converge to a vanishing point. To obtain the perspective transform the affine transform is first obtained. Then the affine transform is used as an initial estimate of perspective transform and a perspective transform is determined. An affine transform keeps evenly spaced parallel lines evenly spaced and parallel but perpendicular lines may not remain perpendicular. This step obtains the rotation scale distance between parallel lines and translation distance between the origins of the affine transform. The output of this step is a homography matrix that describes the affine transform.

First the system finds two main directions of EIC symbols. This step looks at all the directions formed by pairs of connected effective EIC pattern regions and finds two directions that occur the most often.

As described above given effective EIC pattern mask regions R where t 1 2 . . . T of pixels x y are identified EIC Pattern Mask 1 are neighbors.

Next gray level centroids of the regions are identified. For each region R where t 1 2 . . . T gray level centroid is 

Once all the directions are obtained a histogram of directions can be created. The X axis is . The Y axis is the frequency count of .

Next the histogram is first normalized using template 0.1 0.1 0.1 0.1 0.1 0 0 0 1 0 0 0 0.1 0.1 0.1 0.1 0.1 . That is for every x where x 0 1 . . . 179 

Next four candidates of the main directions are identified. The X value that has the highest Y value is set as Candidate 1. Y values of adjacent X are suppressed to 0 i.e. Y x 0 where x is in the range of mod Candidate 1 30 180 . Find the next X value with the highest Y value and set as Candidate 2. Y values of adjacent X are suppressed to 0 i.e. Y x 0 where x is in the range of mod Candidate 2 30 180 . Repeat the process to find Candidate 3 and Candidate 4. The reason for the suppression of the regions is that these angles are where EIC symbols are not expected to lie.

From the 4 candidates 2 pairs of near perpendicular directions are identified. That is for a candidate x select another candidate x such that abs 90 abs x x is minimized. abs x is a function that returns the absolute value of x. For example abs 1.8 1.8 abs 1.8 1.8.

In the step one looks for the scale and translation of the affine transform. Scale is the distance between two adjacent parallel lines. Translation is the distance between the image center and the origin of the coordinate system formed by the grid lines. Both scale and translation are measured in pixels.

Note that the H V coordinate system shown in is the coordinate system of the grid. Grid lines are not seen in image. But as explained before if one assumes an affine transform is from a paper plane to an image plane the EIC pattern in the image may appear to lie on grid lines that are an affine transform of the grid lines in the EIC symbol array. Therefore one can draw grid lines in image the gridlines parallel to lines and and the H V coordinate system based on an affine transform of the grid lines in EIC symbol array.

The X Y coordinate system shown in is the coordinate system of the image. Facing the image the X is always horizontal and Y is always vertical. The image center is the origin of the X Y coordinate system.

From here with the affine transform obtained the perspective transform may be obtained from the affine transform. It should be understood by those skilled in the art that there are a number of different way in which to retrieve the LCD grid and that the examples provided herein are but illustrative examples. After successfully retrieving the LCD grid three algorithms apply the grid and image to recognize the embedded EIC information EIC symbol orientation symbol analysis and EIC bits extraction. First to determine the EIC symbol orientation in the image steps may be utilized as described below.

As shown in eight 8 points of each LCD pixel are sampled. The positions h v of the 8 sampling points G 0 p 7 in each LCD pixel grid i j are 

Next the average grey level difference D 0 q 3 of four orientations for each valid LCD pixel grid is calculated. One method for calculating the grey level difference follows the equation 

Then smallest 25 differences Dfor each orientation q from all valid LCD pixel grids are selected and their average grey level difference D 0 q 3 of each orientation is averaged. The threshold 25 is the average visible EIC symbol on an LCD in a captured image by a camera. It should be understood by those skilled in the art that the threshold value of 25 is one illustrative value but other smaller or larger values may be utilized. Next most possible correct orientation q which has the smallest D 0 q 3 is determined. As shown in the reference frame for the LCD pixel grids is redefined so that an axis is consistent with an ideal reference frame. Finally the average grey level difference Dof all valid LCD pixel grids is recalculated in the new reference frame.

The second algorithm to recognize the embedded EIC information is symbol analysis. EIC symbol orientation has been determined above however the EIC symbol on the LCD reference alignment remains unknown. For symbol analysis two algorithms may be used to retrieve horizontal and vertical alignment respectively. First the smallest 25 differences Dfrom all valid LCD pixel grids are selected. The threshold 25 is the average visible EIC symbol on an LCD in a captured image by a camera. It should be understood by those skilled in the art that the threshold value of 25 is but one value and other smaller or larger values may be utilized.

Then EIC symbol horizontal alignment is calculated. First a histogram count H 0 p 3 of the selected Dis obtained by Mod j 4 . Second the correct horizontal alignment position is obtained as the histogram index P with the biggest value H 0 p 3 .

Next EIC symbol vertical alignment is calculated. First a histogram count V 0 p 3 of the selected Dis obtained by Mod i 4 . Second the correct vertical alignment position is obtained as the histogram index P with the biggest value V 0 p 3 .

Finally the third algorithm to recognize the embedded EIC information is the EIC bits extraction algorithm where EIC bits for each EIC symbol in the image are calculated. First as shown in the smallest D of four possible information LCD pixels for each EIC symbol is identified. Second two EIC bits BB are retrieved from the EIC symbol as shown in . Finally bit arrays are constructed from the retrieved bits such as shown in .

The extracted EIC bits are a piece of single m array bits that are used to decode x y position data and or metadata information. It should be understood by those skilled in the art that various methods may be used for EIC decoding of the EIC bit stream. One example method for EIC decoding of the EIC bit stream is described below.

In order to determine the position of an image relative to an LCD using an m array it is necessary to determine the position of a bit captured in the bit relative to the m array. That is it is necessary to determine if the bit is the first bit second bit etc. in the m sequence to determine the position of the bit in the m array.

Again the addition and multiplication operations are binary operations i.e. addition is XOR and multiplication is AND.

If an image captures K bits b bbb. . . b of m K n and the relative distances between the positions of the bits in the m sequence are s d b b where i 0 1 . . . K 1 and s 0 selecting the s 1 th bits of R and the s 1 th columns of circumflex over M will result in b rM where bis the transpose of b M is a sub matrix of circumflex over M and consists of the s 1 th columns of circumflex over M where i 0 1 2 . . . K 1.

If M is a non degenerate matrix and b does not contain error bits then r can be solved by selecting n bits from b by solving for r tilde over b tilde over M where tilde over M is any non degenerate n n sub matrix of M and tilde over b is the corresponding sub vector of b consisting of the selected n bits.

In most cases however an image cannot capture a set of bits b that does not contain error bits. For example improper illumination document content dust and creases can all obscure the visual representation of bits in an image preventing these bits from being recognized or causing the value of these bits to be improperly recognized. The solution of r becomes difficult when there are error bits in b. Further decoding becomes even more difficult because the coefficient matrix M is not fixed when the pen moves changing the image from frame to frame. Moreover the structure of M is irregular. Therefore traditional decoding algorithms cannot effectively be applied to solve r under practical circumstances.

To address these difficulties stochastic solution techniques provide a high decoding accuracy under practical conditions. As will be described in more detail these techniques solve the equation b rM incrementally so that many solution candidates are readily available without having to solve this equation exactly.

According to various examples of the invention independent n bits i.e. the sub matrix consisting of the corresponding columns of M is non degenerate are randomly selected from the group of b that are captured in an image of a document. Supposing that bare the n bits chosen a solution for r can then be obtained as r b M where Mcontains the corresponding columns of the array M for the chosen bits.

For simplicity the n bits chosen from b to make up bcan be moved to the beginning of b with the remaining bits making up b moved to the end of b. This leads to the relationship 0 where bare the chosen n bits are the remaining bits from the set b Mis the corresponding columns of M for the chosen bits is the corresponding columns of M for the remaining bits 0 0 0 . . . 0 r b M and e r .

The value 0 e refers to the difference vector between b and r M or simply the different vector of r and the number of 1 s in 0 e is called the number of different bits. The vector containing different bits between b . and r M alternately can be identified as D. If D 0 e then the number dof 1 s in Dis d HammingWeight D HammingWeight e . That is dis the number of different bits between b and r M .

Next some of the chosen bits n from the set b are switched with some of the remaining bits from the set b. In particular J bit pairs k l are switched between the original chosen bits n and the remaining bits from the set of bits b where k k . . . k n n

With the above choice of l l . . . l the number of different bits in eis The number of 1 s in e 1EP J

It should be noted that EPEactually means choosing the k . . . k th rows and l n . . . l n th columns of P while 1EPactually means summing the k . . . k th rows of P. No matrix computation is needed.

Thus the decoding steps can be summarized as follows. First an independent n bit combination is generated from the group of bits b captured in an image. It should be noted that with various embodiments of the invention the selection of the n bits can be combined with bit recognition confidence techniques to help ensure that the most accurately recognized bits are selected for the n bit combination.

Next the relationship b r M 0 e is solved to determine d HammingWeight D HammingWeight e . If the number of different bits dis 0 then the process is stopped and the solution ris output. Otherwise all J 1 and 2 bit pairs are switched and the number of different bits d is again determined using the relationship e 1EP J. It should be noted however that this relationship can only be evaluated when the rank of EPEis J. In this case there is no need to specify l l . . . l. Next the minimal number d of different bits is determined.

The above process has to be repeated several times in order to ensure a high enough probability of successful decoding. To estimate the times of selecting the n bit bfrom b the number r of the error bits in b is first predicted to be d. If r is changed then

Illustrative components for a system for creating an EIC pattern on an LCD is shown in . System is shown to include a design component a processor component an embedding component an LCD and a decoder component . Design component may be configured to define a size of the EIC pattern for display on the LCD . The size may be defined by a grid with pixels arranged into columns and rows. Processor component may be configured to determine an area of the grid for embedding position data associated with the dimensions of the LCD .

Embedding component may be configured to embed the position data in the determined area of the grid. LCD may be configured to display the position data in the EIC pattern on a screen. LCD may be configured to intermittently display the EIC pattern and or display the EIC pattern as a watermark on an underlying image associated with an application program. Decoder component may be configured to decode the embedded position data and or metadata information. Decoder component may be configured to include a camera configured to capture an image of the EIC pattern and an extractor configured to extract the embedded position data and or metadata information from the captured image of the EIC pattern.

If the determined area is not a pixel in step the process moves to step where the position data and or metadata information is embedded in a portion of the black matrix of the grid itself. Such a portion may be an edge that separates two sub pixels of one pixel or two sub pixels of two different pixels. Proceeding to step the grey value of the portion of the grid may be changed based upon a background color of an underlying image currently displayed on the LCD screen. The process then moves to step . At step an orientation of the EIC pattern is determined. Moving to step the position data and or metadata information is decoded and the process ends.

Illustrative components for a system for decoding an EIC pattern on an LCD is shown in . System is shown to include an input component a processor component and a decoding component . Input component may be configured to receive captured images. Decoding component may be configured to decode position data and or metadata information from an extracted bit stream to determine a position of the capture images with respect to a screen of the LCD. Processor component may be configured to process the captured images and output an extracted bit stream.

Processor component may be configured to include a preprocessing component a definition component a recognition component and an extracting component . Preprocessing component may be configured to determine pixels corresponding to LCD pixel grids associated with the EIC pattern. Definition component may be configured to define the LCD pixel grids based upon the determined pixels. Recognition component may be configured to recognize the EIC pattern from the LCD pixel grids and extracting component may be configured to extract a bit stream of EIC bits based upon the recognized EIC pattern.

Preprocessing component may further be configured to include a pixel separator a binary erosion component a separation component a mask definer and a mask merger. The pixel separator may be configured to separate pixels that lie on edges and vertexes of the LCD pixel grids as a first mask. The binary erosion component may be configured to erode the first mask to obtain a second mask the second mask including fewer pixels than the first mask. The separation component may be configured to separate connected regions of the second mask in accordance with a first threshold to obtain a third mask and a fourth mask. The mask definer may be configured to define a sixth mask as pixels that belong to regions of the fifth mask and the mask merger may be configured to merge the third and the sixth masks to define the LCD pixel grids. The binary erosion component may be further configured to erode the fourth mask to obtain a fifth mask and a second threshold may be defined to correspond to a region of the fifth mask.

Recognition component may further be configured to include an orientation component an alignment retriever and a calculation component. The orientation component may be configured to determine an orientation of the EIC pattern in the captured image. The alignment retriever may be configured to retrieve horizontal and vertical alignment information for the orientation and the calculation component may be configured to calculate EIC bits for the EIC pattern.

With respect to an application programming interface API various aspects of the present invention may be performed by an API. For example public APIs may interface with an operating system to allow the operating system to provide the various features of the present invention. In one illustrative embodiment a software architecture for processing data representative of positioning information on an LCD screen and or metadata information may include a component configured to recognize the position of an input device with respect to an area of an LCD screen and an application program interface to access the component. An API may receive a request to recognize the position of an input device access the necessary function s to perform the operation and then send the results back to an operating system. The operating system may use the data provided from the API to perform the various features of the present invention. In another embodiment the component may be configured to process a captured image to output an extracted bit stream to decode position data and or metadata information from the extracted bit stream and to determine a position of the captured image with respect to a screen of an LCD.

As can be appreciated by one skilled in the art a computer system with an associated computer readable medium containing instructions for controlling the computer system can be utilized to implement the illustrative embodiments that are disclosed herein. The computer system may include at least one computer such as a microprocessor digital signal processor and associated peripheral electronic circuitry.

While illustrative systems and methods as described herein embodying various aspects of the present invention are shown it will be understood by those skilled in the art that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive of the present invention.

