---

title: Interfaces for creation and access of extensible markup language paper specification documents
abstract: XPS documents are created and accessed via a collection of interfaces of various classes of an application programming interface. The application programming interface includes a document sequence class for reading and writing the document sequence of the XPS document, a fixed document class for reading and writing the fixed documents of the document sequence, a page class for reading and writing the pages of the fixed documents, and a resource class for accessing the resources of each page. Applications seeking to create or read XPS documents may utilize the application programming interface such that the complexities of creating and accessing the XPS document are abstracted away.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716570&OS=07716570&RS=07716570
owner: Microsoft Corporation
number: 07716570
owner_city: Redmond
owner_country: US
publication_date: 20051212
---
Electronic documents are convenient in that they can be created edited and transported by a user of a personal computer. However electronic documents are often tied to a specific computer application of the computer application. Furthermore the specific computer application is tied to a specific operating system of the personal computer. While it may be convenient to create edit and transport the electronic document exchanging the document between computer systems such as when electronically sending the electronic document to a different user requires that the personal computer of the different user also have the same application and to the extent the application is limited to a specific operating system then also have the specific operating system to implement the application.

Even for ubiquitous computer operating systems and corresponding application programs there is no guarantee that a user being sent an electronic document will have the correct application necessary to view and print the electronic document. Furthermore where the application being used to generate the electronic document is a custom application written for a specific operating system the probability is much greater that at some point a user being sent the electronic document for purposes of viewing and or printing the electronic document will not have the appropriate application. As an additional problem there may be instances where there are multiple electronic documents corresponding to multiple applications that are being transferred to another user or personal computer for display and printing such that the probability is higher that the destination user and personal computer will not have all of the applications necessary to view and print all of the electronic documents.

The extensible markup language paper specification XPS document has been developed to address these issues and others. The XPS document is a format that allows a known set of rendering rules to be used to reproduce a fixed document via display or printing without tying client devices or applications to operating systems or service libraries. An XPS document is created following a known hierarchy as provided in an XPS specification that encapsulates the document structure.

In order to facilitate the creation and access to the XPS document in conformance with the XPS specification embodiments provide an XPS conformant application programming interface in order to abstract away the complexities of creating a well formed XPS document. The application programming interface provides a set of interface that allow for reading and writing a document sequence individual fixed documents of the document sequence and individual pages of fixed documents that make up the XPS document.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments provide for the creation of and access to an XPS document in accordance with an XPS specification. An application programming interface API may be provided so that an application intending to create or access an XPS document may call upon the API so that the complexities of the XPS document conversion is abstracted away from the user. In addition to the basic creation of and access to the XPS document the API may provide for higher level functionality including adding and verifying digital signatures as well as specifying various properties for the XPS document.

In the example of the processor implements instructions stored in the mass storage in the form of an operating system . The mass storage also includes an XPS Document API for creating and accessing XPS documents in conformance with the XPS specification which is incorporated herein by reference and which can be found at http www.microsoft.com and in particular http www.microsoft.com whdc xps xpsspec.mspx or http go.microsoft.com fwlink LinkID 51859 clcid 0x409. The mass storage includes one or more application programs that may be used to originate electronic documents and that utilize the XPS Document API to create an XPS document from the original electronic document s .

As noted above the XPS Document API provide services to application programs attempting to create or display XPS documents in the form of classes and various related interfaces for receiving input from the application for specifying information about the XPS document and for producing corresponding outputs that correspond to XPS document components. The XPS Document API represents the persistence layer which contains the logic of how to persist different components including the sub documents of a document sequence the individual pages of the sub documents and the resources of the individual pages including fonts images and the like. The XPS Document API is also driven by the resource packaging and interleaving policies set forth within the XPS Document specification identified above. It will be appreciated that the XPS Document API also works in conjunction with a serialization phase that provides serialization services between the XPS Document API and the applications . However the aspects of the serialization phase are beyond the scope of the present document. Various figures and related discussion are provided to illustrate the structure and operations of the XPS Document API . However it should be appreciated that the screenshots structure and related operation are provided only for the purposes of illustration and are not intended to be limiting of the scope of the claims set forth below.

The computer system of typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media.

Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system .

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The XPS document class is the entry point to the XPS Document API and provides access to the highest level of functionality. The XPS document class provides access to XPS digital signatures and signature definitions. As discussed below the digital signatures may be inherited down the hierarchy of levels of the XPS Document API and in doing so when an XPS document part such as an individual fixed document is moved to a different XPS document the digital signature associated with the individual fixed document is present once it has been moved to the different XPS Document. Furthermore the XPS document properties can be modified from this XPS document class . The XPS document class exposes an interface whereby the higher level functions in particular the digital signatures and signature definitions may be accessed for an existing XPS document.

From the XPS document class the root component of the XPS Document API which is the document sequence can be created or accessed. The document sequence class provides reader and writer functions at the document sequence level for an XPS document. An XPS document can contain a collection of sub documents like separate sections of a patent document that includes a text section or sub document and a drawings section or sub document. The document sequence represents this collection of sub documents. The XPS Document API provides access to the document sequence for an XPS document through interfaces exposed by the document sequence class . Namely a document sequence writer interface for creating the document sequence of an XPS document and a document sequence reader interface for consumption i.e. displaying and or printing of the document sequence of the XPS document once it has been created.

At the document sequence class a print ticket may be defined for the document sequence. The print ticket is a set of meta data that describes how a document can be printed. The print ticket associated with a document sequence of an XPS document via the document sequence class may be applied to all of the sub documents of the document sequence if any of the sub documents do not have print tickets of their own. Properties may also be specified for the document sequence or they may be inherited from the XPS document class . Furthermore digital signatures may be specified via a separate interface or by inheritance from the XPS document class .

From the document sequence class an individual fixed document of the document sequence can be created or accessed. The XPS Document API provides access to the individual fixed documents of the document sequence for an XPS document through interfaces exposed by a fixed document class . The fixed document class provides reader and writer functions at the fixed document level. Namely a document writer interface is provided for creating the fixed documents as a collection of pages and a document reader interface is provided for consumption of the individual fixed documents once they have been created as a collection of pages.

At the fixed document class a print ticket may be defined for the fixed document. As discussed above the print ticket is a set of meta data that describes how the fixed document including all of its individual pages that do not have their own print ticket can be printed. Properties may also be specified for the individual fixed documents or they may be inherited from the XPS document class . Furthermore digital signatures may be specified via a separate interface or by inheritance from the XPS document class .

From the fixed document class lowest layer in the hierarchy which is the page can be created or accessed. The page contains the actual data of describing how to render. The page class provides reader and writer functions at the page level for an XPS document. The XPS Document API provides access to the individual pages of the individual fixed documents for an XPS document through interfaces exposed by the page class . Namely a page writer interface for creating the individual pages and a page reader interface for consumption of the individual pages of the fixed documents once they have been created.

At the page class a print ticket may be defined for the page. As discussed above the print ticket is a set of meta data that describes how a document and particular pages of the document can be printed. Properties may also be specified for the individual pages or they may be inherited from the XPS document class . Furthermore digital signatures may be specified via a separate interface or by inheritance from the XPS document class .

A page of an XPS document may have a number of resources associated with it. These resources all derive from a common class the XPS resource class . The types of resources that derive from the XPS resource class include images of an XPS images class and fonts of an XPS fonts class . Other types of resources may also derive from the XPS resource class such as color context and resource dictionaries which also have representative XPS classes.

In practice the user of an application wishing to create an XPS document from an original document utilizes an application that utilizes the XPS Document API . Via the read and write interfaces of each of the levels of the XPS Document the authoring application may provide the corresponding data to XPS Document API in the particular sequence to build the XPS document per the XPS specification. Initially the authoring application may submit the document sequence information via the document sequence writer interface then submit the fixed document information for each of the fixed documents of the document sequence via the document writer interface and then may submit the details of each page of each fixed document via the page writer interface . The XPS Document API generates the XPS document in accordance with the XPS specification based on the information submitted by the authoring application.

The information generated via the document sequence and fixed document classes includes organizational data as well as the data of the higher functions including any print ticket data properties or annotation data as well as digital signature definition and digital signature data. For the document sequence class the organization data is that which specifies the sequence of the fixed documents set forth by the document class . For the fixed document class the organization data includes that which specifies the order of the individual pages of each of the fixed documents.

The details of one illustrative implementation follow. Specifically for this implementation the fixed document sequence mark up contains paths to the individual fixed documents. The fixed document mark up contains paths to the individual pages and the digital signature definitions as well as link target information for hyperlinks which can be referenced in the page. Certain fonts may have flags indicating restrictions on copy and use of these flags is indicated by creating a specific relationship to the fixed document. Each layer is responsible for serializing its Print Tickets.

The page layer is responsible for maintaining a relationship part that maintains a list of all associated resources. These relationships have types associated with them. This mechanism is used to identify fonts that have been obfuscated to prevent simple illegal copying. The page layer also maintains embedded link information.

As discussed below with reference to there are separate virtual files parts used for document properties and signature information within an XPS Document. A determination is made as to the list of these parts that need to be collected to be part of a hash for digital signing purposes. In practice the markup may be parsed to regenerate the structure of the original document being represented by the markup and the part relationships and relationship types are maintained.

The hierarchy of the XPS Document object is reflected in the primary payload of the XPS Document . A fixed document sequence part is at a top level of the payload . The fixed document sequence part specifies the document sequence for the XPS document. The fixed document sequence part is associated with a print ticket part that specifies how the documents of the fixed document sequence should be printed if the documents do not have their own print tickets.

The next level which is associated with the document sequence part includes a fixed document part a fixed document part and so on. The fixed document part is associated with an annotations part that includes such things as highlights comments etc. for the document . It should be noted that there is a separate specification for annotation mark up. Annotations allow for comments and editing suggestions for a fixed document. The XPS Specification states that the annotation should be in a separate part virtual file and that a relationship exists from the fixed document of a specific type.

Returning to the fixed document part is associated with fixed page part fixed page part N and so on. The fixed document part is associated with an annotations part a print ticket part as well as fixed page part fixed page part N and so on.

The fixed page part itself is associated with a print ticket that specifies how the fixed page part should be printed. The fixed page part is also associated with a thumbnail part that is a thumbnail view of the fixed page part an image part that provides the images contained within the fixed page part and a font part that provides the fonts of the text contained within the fixed page part . The fixed page part N is associated with the image part that provides the images contained within the fixed page part N and is also associated with a thumbnail part that is a thumbnail view of the fixed page part N .

The fixed page part is associated with is associated with the font part that provides the fonts of the text contained within the fixed page part . The fixed page part is also associated with a thumbnail part that represents a thumbnail view of the fixed page part . The fixed page part N is associated with font page that provides the fonts of the text contained within the fixed page part N . The fixed page part N is also associated with a thumbnail part that provides a thumbnail view of the fixed page part N .

During creation of the XPS document or at some later time it may be desirable to add properties for the XPS document. The application utilizing the XPS Document API may provide a graphical user interface such as the example shown in to allow a user to enter the properties data and may then utilize a writer interface of one or more of the classes of the XPS Document API to add that properties data to the primary payload of the XPS Document. In the example shown the graphical user interface includes a set of fields for receiving the data. Field receives a name of the creator of the electronic document field provides an identifier for the electronic document field provides a content type for the electronic document such as Spreadsheet or Financial Analysis for example. Additional fields include field which receives the title of the electronic document field which receives a subject of the electronic document field which receives a brief description of the electronic document field which receives keywords for the electronic document field which receives a language which the electronic document is written in and field which receives the category information of the electronic document. It will be appreciated that the fields and associated properties shown in are provided only for purposes of illustration and the number and type of properties may vary from one XPS document to another.

Thus the XPS document may be created and later accessed by applications including authoring applications and reader applications for purposes of reading digitally signing printing and so forth. The creation of and access to the XPS documents may occur by applications utilizing embodiments of the XPS Document API as disclosed herein.

While the invention has been particularly shown and described with reference to various embodiments thereof it will be understood by those skilled in the art that various other changes in the form and details may be made therein without departing from the spirit and scope of the invention. For example the levels for which print tickets and properties of the XPS document are provided by vary and whether those are inherited from a higher lever or are explicitly defined per level may vary.

