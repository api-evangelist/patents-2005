---

title: Method and apparatus for re-authentication of a computing device using cached state
abstract: Automatically re-authenticating a computing device seeking access to a network or a resource. A method comprises forwarding a request received from the computing device to an authentication device to enable the authentication device to authenticate the computing device using a full-authentication mechanism. State information related to authenticating the computing device is created from authenticating the computing device. The state information is received and stored. For example, an authenticator device that forwarded the initial authentication request from the computing device to the authentication device receives and stores the state information. The computing device is re-authenticated using the stored state information without again contacting the authentication device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716721&OS=07716721&RS=07716721
owner: Cisco Technology, Inc.
number: 07716721
owner_city: San Jose
owner_country: US
publication_date: 20051018
---
The present invention generally relates to authenticating computing devices that communicate over a network including wireless and landline networks. The invention relates more specifically to a method and apparatus for re authentication of a computing device using saved state information.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

Computing devices that access resources over a network are commonly subjected to an authentication process. The authentication process determines whether a device requesting access to the network or to a particular resource actually is the device that it purports to be. If the device is authenticated then depending on its identity role and other policy data the device may be permitted to access the network or selected resources within the network.

Wireless local area networks such as those that use an 802.1x protocol for wireless communications now commonly use some form of user authentication protocol. For example Extensible Authentication Protocol EAP as defined in IETF RFC 2284 may be used. In EAP over LAN authentication a wireless client device such as a laptop computer that is seeking to obtain network access is termed a supplicant. An AAA server provides user authentication services to an access device or authenticator typically a router which intercepts requests of the supplicant the access device has the role of a client with respect to the AAA server.

Providing authentication services with an AAA server or the like allows centralization of policy decisions. Moreover having a centralized AAA server avoids attacks from access points. However performing authentication involves communicating numerous messages between the supplicant and the AAA server. If the supplicant requires re authentication the same process with multiple round trip messages is used. This is time consuming and computationally expensive. As a result this approach is undesirable for mobile devices that frequently cross boundaries of wireless networks.

This approach is particularly unworkable because re authentication can be triggered by numerous events. For example re authentication is typically required whenever the supplicant device is powered up or rebooted when a user logs off the supplicant device when the supplicant device is moved to a new access point or when the supplicant device moves in and out of range of an access point. In addition partial or unintended authentication may take place if the supplicant device is temporarily or transiently brought in or out of range of an access point.

Based on the foregoing there is a clear need for an improved method for re authenticating devices in networks. There is a specific need for an improved method for efficiently re authenticating devices that use wireless networks. There is also a need for an approach for efficiently re authenticating supplicant devices that use wireless networks that eliminates performing unnecessary round trip messages whenever re authentication is needed. There is also a need for an approach that can reduce processing and network load on the authentication infrastructure.

A method and apparatus for re authenticating a computing device is described. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

The needs identified in the foregoing Background and other needs and objects that will become apparent for the following description are achieved in the present invention which comprises in one aspect a method of automatically re authenticating a computing device seeking access to a network or resource. In this aspect the method comprises forwarding a request received from the computing device to an authentication device to enable the authentication device to authenticate the computing device using a full authentication mechanism. State information related to authenticating the computing device is created from authenticating the computing device. The state information is received and stored. For example an authenticator device that forwarded the initial authentication request from the computing device to the authentication device receives and stores the state information. The computing device is re authenticated using the stored state information without again contacting the authentication device. For example the authenticator device re authenticates the computing device without again contacting the authentication device. The re authentication may be performed with a fast authentication mechanism. Herein a fast authentication mechanism is one that uses information saved from a previous e.g. full authentication in order to simplify the re authentication.

In one feature the re authenticating the computing device comprises the authenticator device determining if it has valid state information for the computing device stored thereon.

In other aspects the invention encompasses a computer apparatus and a computer readable medium configured to carry out the foregoing steps.

In another aspect the invention comprises an apparatus for re authenticating a computing device over a network. The apparatus comprises a network interface that is coupled to the network for receiving one or more packet flows therefrom a processor and a computer readable medium. The computer readable medium has stored thereon one or more sequences of instructions which when executed by the processor cause the processor to carry out the steps of receiving a request for authentication from the computing device determining if cached state information that is usable for a re authentication of the computing device is stored in the computer readable medium responsive to a determination that the cached state information is not stored in the computer readable medium forwarding the authentication request to an authentication device and responsive to a determination that the cached state information is stored in the computer readable medium authenticating the computing device using the cached state information wherein the authentication is performed with the re authentication mechanism.

Client is any network compatible end station such as a personal digital assistant PDA cellular telephone personal computer or workstation. Network may be any local area network wide area network or one or more internetworks. Enterprise network is any network including a WLAN that holds one or more network resources that client is seeking to access. In certain embodiments networks may be the same thus is intended to broadly encompass any network arrangement in which an untrusted client is seeking access to a resource that is held in a secure network.

Access server is in one embodiment a network router that is configured to perform access control functions. The EAP compliant embodiments described herein may be implemented using any EAP capable platform including switches routers network elements that support VPN wireless gateways firewalls etc.

Authentication server is a computer that is configured to securely store user authentication information such as usernames and passwords and to perform authentication protocols algorithms and supporting processes such as one time password OTP validation encryption and decryption message digest evaluation etc. In one embodiment authentication server communicates with access server using a secure protocol that is optimized for use in authentication. An example of a suitable protocol is RADIUS. The authentication server is substantially compliant with an authentication server in an 802.1x architecture in one embodiment.

Optionally a policy server is communicatively coupled to network and or to authentication server or is integrated with the authentication server . The policy server provides a repository of authentication policies that the authentication server may consult to determine how to interact with client . For example policy server may specify a minimum required authentication method that client must be capable of using for authentication a particular kind of credential that the client must present in addition to completing successful authentication etc.

In this arrangement client may initially authenticate itself to access server in cooperation with authentication server to gain access to resource . Any of several authentication protocols may be used to perform authentication. Exemplary suitable authentication protocols include but are not limited to EAP TLS PEAP EAP SIM and EAP FAST. More generally any authentication protocol may be used for which there is an authenticator device and an authentication device and for which state is maintained between a first authentication and a second authentication. The first authentication may be a full authentication and the second authentication may be a fast authentication.

In an object oriented environment logic that defines messages and actions performed as part of the authentication protocol can be structured as an authentication method A that client accesses or calls using an application programming interface API A. A compatible authentication method B is callable by authentication server using API B.

In general under EAP when client attempts to access enterprise network access server contacts the client and requests identity information which the client provides in a response. Thus client and access server establish a logical connection A. Access server is able to pass subsequent messages involved in the authentication protocol and issued by client to authentication server and to forward related messages directed from the authentication server to the client. Accordingly client and authentication server effectively establish a logical connection B until the authentication protocol terminates. As a result authentication server can use authentication method B to determine its authentication behavior since it represents the logical endpoint of the authentication protocol conversation.

The access server is configured to re authenticate the client using state information from the initial authentication. After the authentication server completes the initial authentication the authentication server transfers the state information to the access server . The access server stores the state information in the state cache . The state information may be used in a re authentication of the client without repeated contact with the authentication server in one embodiment. The access server is able to perform at least some of the authentication protocol used by the authentication server . In an object oriented environment logic that defines messages and actions performed as part of the re authentication protocol can be structured as an authentication method C that the access server accesses or calls using an application programming interface API C.

Thus re authentication can take place between the client and access server entirely on logical connection A. However during re authentication with the access server the client need not be aware of whether the access server is re authenticating the client at the access server or the access server is forwarding messages to the authentication server for authentication.

For purposes of illustrating a clear example the following discussion of and reference communications among elements of . However represents merely one example of a network arrangement and the techniques described herein may be used in many other network arrangements.

In block the state information is received at the authenticator device from the authentication device. For example the authentication server transfers state information to the access server . The state information may include a session ID cryptographic information and session expiration information. The cryptographic information comprises a Transport Layer Security TLS master secret in one embodiment. The state information may also include authorization information such as access control policies that determine what type of access the client should have to protected resources.

In block the state information is stored at the authenticator device. For example the access server stores the state information in the state cache . However embodiments are not limited to transferring the state information to and storing the state information on the access server . In one embodiment the state information is transferred to and cached on an entity other than the access server on the network that has knowledge of the active sessions on the network .

In block the computing device is re authenticated at the authenticator device using the state information stored on the authenticator device. The re authentication may be performed with the re authentication mechanism described herein

As a result the computing device such as client is re authenticated in a streamlined manner without requiring numerous round trip messages to an authentication server to obtain authentication data. Moreover the authentication server is not required to maintain state information which may otherwise require considerable storage as when the authentication server is servicing hundreds or thousands of supplicant devices. Because the authentication server is not required to maintain state information the authentication server is more reliable and more tolerant to restarts. Moreover pushing the re authentication decision from the authentication server to the authenticator relieves the authentication server from unnecessary requests. This unburdening frees the authentication server to handle more complex policy evaluations.

The authentication device may push the state information to more than one authenticator device. For example the authentication server may push the state information to different network access servers to which the client may roam. This allows the client to re authenticate with any of the network access servers having the state information. While the authentication server is not required to save the state information in one embodiment the authentication server does save the state information. This allows the authentication server to push the saved state information to other network access servers if the client should roam for example.

In block the authenticator device determines if state information that is usable for a re authentication mechanism of the computing device is stored at the authenticator device. The state information may include a session ID associated with a previous authentication of the computing device with a device other than the authenticator device. For example the other device may be an AAA server. The session ID is used to index the state cache to determine if the state information is cached in one embodiment. Embodiments are not limited to using a session ID to determine if the state information is in the state cache . In another embodiment PACs are used to determine if the state information is in the state cache .

The state information may further comprise cryptographic information as well as expiration information for a session associated with a previous authentication of the computing device. For example the session ID relates to an initial authentication between client and authentication server with the network access server acting as an intermediary. The cryptographic information comprises a Transport Layer Security TLS master secret in one embodiment.

In block responsive to a determination that the cached state information is not stored at the authenticator device the authentication request is forwarded to an authentication server. For example the authentication request is forwarded from the access server to the authentication server .

In block responsive to a determination that the cached state information is stored in at the authenticator device the computing device is re authenticated at the authenticator device using the state information stored on the authenticator device. The re authentication may be performed with a fast authentication mechanism.

In block the network access server sends an identity request to the client . In block the network access server receives an identity response from the client . In block the network access server enters a pass through mode wherein the authentication server is actively involved in the authentication of the client and the network access server passes messages between the client and the authentication server. In block the network access server initiates the pass through mode by sending an access request to the authentication server including the identity response that was received from the client .

In block the network access server then acts as a relay for additional messages transferred between the client and the authentication server to complete the authentication in accordance with the EAP TLS protocol. In the pass through mode the network access server acts as an AAA client to the authentication server in one embodiment.

The authentication server serializes the TLS session and includes it in a message transferred to the network access server in block . Serialization involves transforming session data in an abstract data structure into a series of values that can be carried in a payload of a messaging protocol e.g. a series of TLVs. In block the authentication server further sends an EAP TLS access accept message to the network access server indicating that it has completed its authentication of the client . The access accept indicates that authentication was successful provides access parameters and includes the serialized state information in a portion of the access accept payload. The state information is related to authenticating the client and is usable for a re authentication mechanism. The state information may also include a session timeout which the network access server may use to invalidate the state information associated with the session ID.

It is not required that the state information be transferred in an access accept message. In another embodiment the state information is transferred to the network access server in any convenient manner responsive to a request from the network access server for the state information. In yet another embodiment the state information is transferred to the network access server via a Change of Authorization CoA request message from the authentication server to the network access server using the general format defined in RFC 3576. RFC 3576 defines a Change of Authorization message for the RADIUS protocol which an AAA server may send to cause an access device to change authorization characteristics for a single supplicant.

In block the network access server stores the state information. This may include storing a session timeout value such that the network access server can invalidate the session and initiate re authentication of the client .

In block the network access server sends an EAP Success message to the client . This completes the initial authentication of the client . Moreover the network access server is able to use the stored state information for a later re authentication of the client . Optionally the authentication server can delete the state information it maintains because the network access server holds a copy.

In block the network access server sends an identity request to the client . The request of block may occur in response to a trigger event that requires re authentication. For example if the network access server determines that the session times out the access server may require that the client re authenticate. Alternatively assume that client is powered up or rebooted or a user logs off the client the client is moved to a new access point the client moves in and out of range of an access point etc. In response to such a trigger event the network access server informs client that the client needs to re authenticate.

In block the network access server receives an identity response from the client . In block the network access server determines if it has valid policies associated with the identity response. Block is optional. If the network access server does not have the policies then the network access server enters a pass through authentication mode in block wherein the authentication server is actively involved in the authentication of the client . Details of one embodiment of a pass though mode are depicted in blocks of . The network access server initiates the pass through mode by sending an access request to the authentication server including the identity response as depicted in block of .

Referring again to in block the network access server initiates a re authentication to be performed at the network access server responsive to a determination that the network access server has policies for the client device associated with the identity response. The network access server may temporarily store the identity response in case it does not have appropriate state information for re authentication.

In block the network access server sends an EAP TLS record message to the client containing a Start TLS operation. In block the client sends an EAP TLS record message to the network access server containing a ClientHello.

In block the network access server determines if it has cached state associated with the client . For example the network access server uses the session ID in the ClientHello to determine if it has the cached state. If the network access server does not have the cached state the network access server initiates a pass through mode in block . In an embodiment that uses a protocol other than EAP TLS a parameter other than the session ID may be used to determine if the state information is cached.

In block if the network access server does have the state information for the client then the network access server performs the re authentication using the cached state information in blocks and .

In block the network access server sends to the client a ServerHello message a ChangeCipherSpec message to reactivate the session s security options and a Finished message to let the client check the newly activated security options.

In block the client responds with a ChangeCipherSpec message to reactivate the negotiated options and a Finished message to let the network access server check the newly activated security options.

In block the network access server sends an EAP Success message to the client . This completes the re authentication performed at the network access server .

In block the network access server determines if it has cached state associated with the client for this session. The network access server may use the active network access session to determine if the cached state information is stored. If the network access server does not have the cached state the network access server initiates a pass through mode in block . Details of one embodiment of a pass though mode are depicted in blocks of . The network access server initiates the pass through mode by sending an access request to the authentication server including the identity response as depicted in block of .

If the network access server determines in block that it has the cached state then the access server performs the re authentication of the client based on the cached state data and without again contacting the authentication server in block . Blocks depict message flow during the re authentication. In block the network access server sends an EAP TLS record message to the client containing a Start TLS operation. In block the client sends an EAP TLS record message to the network access server containing a ClientHello.

In block the network access server sends to the client a ServerHello message a ChangeCipherSpec message to reactivate the session s security options and a Finished message to let the client check the newly activated security options.

In block the client responds with a ChangeCipherSpec message to reactivate the negotiated options and a Finished message to let the network access server check the newly activated security options.

In block the network access server sends an EAP Success message to the client . This completes the re authentication for the same session performed at the network access server .

When an administrator changes the policies the authentication server pushes this information to the network access server in one embodiment. Depending on the nature of the changes the authentication server may provide updated policies and allow the session associated with the authentication server to continue or require immediate invalidation of all or some of the sessions associated with the authentication server .

The updated policies can be sent to the network access server in any convenient fashion. In one embodiment the policies are transferred to the network access server via a Change of Authorization CoA request message using the general format defined in RFC 3576.

In block the authentication server analyzes the policy changes to determine if the session should be invalidated or if the session can be continued with the updated policies. If the authentication server determines that the session should be invalidated the authentication server indicates this to the access server in block . In block the access server invalidates the identified sessions.

If the authentication server determines in block that the session can be continued with the updated polices then the authentication server forms in block a Change of Authorization CoA request message using the general format defined in RFC 3576. Such a message has a RADIUS message type value of . The Service Type value is set to Authorize Only the user session information is encoded in the additional attributes.

In one embodiment optimized for use with Cisco Network Admission Control CNAC components the Cisco vendor specific attribute VSA service may be included in the CoA Request in the form 

A VSA of this form expressly instructs a network access server that is compliant with CNAC to perform re validation.

In block the CoA Request is sent as a RADIUS protocol message to network access server . In block network access server validates the user session information contained in the CoA Request to verify that the network access server is actually engaged in a user session matching the provided user session information. If the user session information is valid as tested in block then in block the network access server sends a CoA acknowledge message ACK of the form defined in RFC 3576 back to the authentication server .

If the user session information is invalid then a non acknowledge NAK message is sent back as shown in block . The ACK and NAK messages may have the form defined in RFC 3576.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse trackball stylus or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for re authenticating computing devices. According to one embodiment of the invention re authenticating computing devices is provided by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another computer readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus .

Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface . In accordance with the invention one such downloaded application provides for re authenticating computing devices as described herein.

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

