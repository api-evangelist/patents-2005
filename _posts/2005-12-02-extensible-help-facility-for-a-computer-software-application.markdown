---

title: Extensible help facility for a computer software application
abstract: Content obtained from a help file containing at least two interactive links in a sequence may be displayed in a help facility. Each interactive link may be associated with at least one user-activated step in a computer software application to perform in connection with a help topic according to the sequence so that once a user activates one of these links out of sequence, an operation in the computer software application may be invoked to effect the at least one user-activated step.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07415696&OS=07415696&RS=07415696
owner: Adobe Systems Incorporated
number: 07415696
owner_city: San Jose
owner_country: US
publication_date: 20051202
---
The present application is a continuation of U.S. patent application Ser. No. 09 966 806 now U.S. Pat. No. 7 024 658 filed on Sep. 28 2001 entitled Extensible Help Facility For A Computer Software Application which is incorporated herein in its entirety.

Many computer software applications such as word processors image editors spreadsheets email clients and the like include a help facility to aid users in performing discrete operations and or comprehensive tasks in the application. Help facilities come in many different forms including wizards which present a sequence of steps for a user to perform to accomplish a particular task context sensitive help systems which automatically display help topics relevant to the current state of the application and conventional text based help systems which present a user with an index that can be manually searched to look for a help topic of interest.

Once opened the user can navigate the help guide using various different mechanisms. For example the user can scroll through the help guide as if reading a book by using the scrolling controls for the window . Alternatively the user can select a particular bookmark such as Annotating PDF Documents bookmark which will cause a corresponding help page to be presented to the user. The user also can jump to desired locations within the help guide by selecting e.g. clicking on links with a help page such as link in page . The link points to another page for example Using the annotation tools within the help guide and upon being clicked causes that page to be displayed in the window . In any event the user can peruse the help guide to gather information about how to use various features of the application to perform operations and tasks.

The present inventors recognized that conventional help systems tended to be difficult or inflexible to extend and or limited in the ability to instruct users how to operate the application. Consequently the present inventors developed a help facility that is easily and flexibly extendible easy to use and provides intelligent and interactive interoperability with the application for which help is being sought.

Implementations of the help facility described here may include various combinations of the following features.

In one aspect a help facility for a computer software application is provided by enabling an author to generate one or more help files that specify content to be displayed and at least one interactive link e.g. a hyperlink a hotspot or a graphical button that when activated performs an operation in the computer software application associated with the specified content. The help facility is enabled to access while executing the generated one or more help files upon detecting that the one or more help files exist in a predetermined location within a local file structure accessible to the help facility.

Prior to enabling the help facility to access the generated help file the help file may be placed in the predetermined location in the hierarchical file structure for example either by the author of the help file or automatically by a software process. The generated help files may be retrieved from an external source for example a remote resource on a network or a removable storage medium.

Enabling the help facility to access the help files may include displaying the one or more help files as a help page in the help facility. Alternatively or in addition enabling the help facility to access the generated one or more help files may include causing the help facility to traverse the local file structure to identify existing help files. The help facility may dynamically generate a listing of available help topics and or a table of contents file based on help files identified during traversal. The help facility may be caused to detect the existence of one or more help files in response to a user action or automatically for example when a change in a help file or the addition of a new help file is detected.

Enabling an author to generate one or more help files may include enabling the author to record a sequence of one or more user activities performed in the computer software application. Alternatively or in addition enabling the author to generate one or more help files may include providing a markup language extension that enables an activity in the computer software application to be performed indirectly.

The operation in the computer software application associated with the interactive link may be an atomic step of a complex operation or may involve a plurality of steps associated with a complex operation. Moreover the operation in the computer software application associated with the interactive link may correspond to a menu item in a graphical user interface of the computer software application or may correspond to an operation available through an application program interface of the computer software application.

In another aspect a help facility for a computer software application may be provided by enabling a computer software application to record a sequence of one or more user operations performed within the computer software application and enabling a user to generate one or more help files that that specify help content to be presented and at least one interactive link that when activated performs the recorded sequence of one or more operations. The generated help files may be displayed as a help page in the help facility.

The help facility may be enabled to access the generated one or more help files while executing upon detecting that the one or more files exist in a predetermined location within a local file structure accessible to the help facility. In response to user input the help facility may selectively perform the one or more operations associated with the interactive link based on a state of the computer application. Such selective performance of the one or more operations may for example involve refraining from attempting to perform an operation if the computer software application is in an improper state for performing the operation. The help facility further may inform the user of one or steps to undertake to place the computer software application in a proper state to perform the operation.

In another aspect a help facility for a computer software application may be controlled by enabling a user to generate one or more help files that specify content to be presented and at least one interactive link that when activated performs an operation in the computer software application associated with the content. The help facility is enabled to detect a state of the computer software application and to selectively cause the operation to be performed by the computer software application based on the detected state. The help facility may refrain from causing the operation to be performed if the computer software application is in improper state for performing the operation. Moreover the user may be information of one or steps to undertake to place the computer software application in a proper state to perform the operation.

In another aspect an extensible help facility for a computer software application may include a graphical user interface for communicating with a user help files arranged in a hierarchical file structure and software processes configured to perform operations such as i enabling a user to generate or modify help files that specify content to be displayed and include an interactive link that when activated performs an operation in the application associated with the specified content ii causing the help facility while executing to access the generated help files upon detecting that the help files exist in a predetermined location within the hierarchical file structure and or iii causing the help facility to detect a state of the computer software application and to selectively cause an operation corresponding to an interactive link to be performed by the computer software application based on the detected state.

One or more of the following advantages may be provided. The systems and techniques described here may result in a help facility that can be easily extended using standard document formats e.g. HTML PDF MS Word etc. and standard editing environments which for example do not require extensive programming experience or knowledge of the help facility s application program interface API . Moreover the help facility may be able to recognize and access newly generated or newly retrieved help files without having to re start the help facility or its associated application. The help files that the help facility uses are able not only to display instructive content e.g. text to the user but also can include interactive links e.g. hyperlinks hotspots or graphical buttons that when activated cause the help facility to drive the application that is perform one or more operations in the application . By doing so the help facility may provide an enhanced ability to explain to the user the individual steps involved in accomplishing a particular task. Accordingly help files can be generated retrieved and or modified to customize the help facility to a specific user environment or context. Moreover by examining the application s current state before attempting to drive the application the help facility can provide intelligent interoperability with the application such that for example the help facility will refrain from instructing the application to perform operations that are inappropriate or impossible based on the application s current state.

Details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

Details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

The help facility also may be able to collect from the application or otherwise examine state information relating to the application s current state e.g. whether a work file is currently open or closed attributes of the work file the application s current mode of operation etc. . As described in more detail below this state information can be used by the help facility to determine whether the application is in a proper or correct state to perform a particular operation.

A user for example a human user or an automated entity such as a computer process can interact with the help facility and or the application in order to accomplish tasks or learn about how to operate the application . When the user interacts with the help facility for example the user can cause the help facility to selectively display help files having content e.g. text images that instructs the user about how to operate the application and how to use it to accomplish desired goals. The help files also may include one or more interactive links that when selected or otherwise activated by the user cause the help facility to send commands to the application to perform a particular operation or set of operations.

The help files may be stored in a predetermined location for example in a logical arrangement in a hierarchical file structure local to e.g. on the same computer system platform as the help facility . Upon being launched and or refreshed the help facility may examine the file structure and use the help files that it finds to dynamically build a table of contents of and pointers to available help topics for presentation to the user. The user may interact with an editing application e.g. HTML editor word processor or PDF file writer to create new help files or modify existing help files. These new or modified help files then can be accessed by the help facility upon recognizing the existence of the new help files within the file structure for example either automatically or upon being instructed to refresh the help facility s awareness of the currently available help files. The help files can be generated using standard formats such as HTML PDF MS Word or virtually any other format that supports text or other content display and the ability to embed links to external resources. Alternatively or in addition new or modified help files can be received from an external source such as a website accessible through a network connection or a removable medium such as a CD ROM or floppy disk.

As shown in the application window may include a menu bar and a work space in which subwindows can be displayed such as subwindow in which an image has been opened and displayed. The Recipes help facility is presented in a separate window which need not be bounded by the application window as shown in but rather can be moved and resized to appear as a separate window on the computer s desktop. In the implementation shown the help files are created and stored as standard HTML files and the Recipes window is an instance of a browser that retrieves and displays the HTML based help files. However other implementations could use help files in other formats e.g. PDF MS Word and a suitable renderer for rendering help files in the chosen format.

The Recipes window includes a dropdown menu that includes five different Recipe categories each of which contains one or more individual Recipes under that category. The dropdown menu also includes a menu option for downloading new Recipes from a remote source such as a website accessible on the Internet.

In this example assume that a user selects the Recipe category Add Elements from the dropdown menu . In that case the Recipe window changes its appearance to display the ten different Recipes that fall under the Add Elements category . Each of the ten different Recipes is represented as a hyperlink that when clicked causes the help facility to jump to an associated help file stored at a specified location in the file structure. For example if the user clicks the link for the Add a Drop Shadow or Bevel Recipe the Recipe window retrieves the help file pointed at by the HREF associated with that link and displays it as shown in .

As shown in the Add a Drop Shadow or Bevel Recipe includes five steps numbered 1 through five and two interactive links also referred to as Do it for me buttons. The user can now examine and experiment with this Recipe in a non modal manner. That is unlike conventional wizards a Recipe does not constrain the user as to which steps to perform or the order in which they are performed. For example the user may chose click button before clicking button even though button is associated with step and button is associated with step . Or the user may chose to forego clicking either or both of the buttons. As a result of this non modal behavior the Recipe help facility provides a user with enhanced flexibility and experimentation opportunities.

In the typical contemplated interaction with a Recipe however the user will read and follow each of the Recipe steps in order and click the Do it for me buttons in the appropriate sequence in order to learn how to perform the task under consideration in this example adding a drop shadow or a bevel to an image. Accordingly after reading the text associated with steps and a user typically will click Do it for me button which will cause the help facility to instruct the application to perform the corresponding function. In this example as indicated by the text in step clicking button will cause the application to display the Layer Styles palette as shown in . Also as indicated by text accompanying step clicking button has the same effect as if the user had clicked the Window menu header from the menu bar and then had moved the cursor down and selected the Show Layer Styles menu item . Accordingly by providing users with text describing how to perform steps and with interactive buttons that can perform those steps automatically the Recipes help facility represents an easy to use yet effective tool for learning how to use an application.

In order to allow the interactive links in Recipes help files to cause the application to perform operations any of three extensions to standard HTML may be used PlayAction PlayMenuByName PlayBuiltinCommand A link in an HTML file can specify one of these extensions as an attribute in order to cause the application to perform one or more specified operations.

PlayAction is an HTML extension that enables predefined Actions to be performed. As used herein an Action is a type of macro defining a set of one or more application operations. Typically Actions are implemented as files in a predetermined format and having an .atn extension. Both Adobe Photoshop and Photoshop Elements provide the ability to play pre defined Actions and Photoshop further provides the ability to create new Actions by recording a sequence of user activities. In the example Recipe shown in Add a Drop Shadow or Bevel the corresponding HTML file defining that Recipe includes two PlayAction statements one to invoke the Action associated with Do it for me button i.e. display the Layer Styles palette and another to invoke the Action associated with Do it for me button i.e. fine tune the style settings . As an example the format of the first PlayAction statement is as follows 

href . . . . . . Desktop PlayAction photoshop elements.atn show styles where photoshop elements.atn is the Action set name and show styles is the Action name essentially a pointer to a particular item within the named Action set.

PlayMenuByName can be specified as an attribute of a link in order to perform an operation corresponding to a specified menu item in the application that is any menu item that is accessible to the user through the application s GUI. For example if a link had the attribute PlayMenuByName Fresco the application would perform the same operation on an image as if the user had selected Filter Artistic Fresco from the menu bar in the application s GUI.

PlayBuiltinCommand keyword can be specified as an attribute of a link in order to perform an operation corresponding to a built in application operation that is an operation available through the application s API and typically not accessible or visible to the user through the application s GUI.

At initialization the application loads the HTML renderer parser used for displaying help files through the help facility e.g. depending on platform either Microsoft Internet Explorer for Windows or HTMLRenderingLib for the Apple Mac OS and registers to be informed whenever the user clicks on a link. In the Apple Mac OS such registration is accomplished by an API call to RegisterURLToFSSpecCallbackProc . Consequently when the renderer parser detects that a link has been clicked the specified help facility function is called and the argument s are passed. If any of the PlayAction PlayMenuItem or PlayBuiltinCommand attributes have been specified in the link the help facility function processes the link click. Otherwise the function simply returns and lets the renderer parser process the link click.

For example if the user clicks the Do it for me button in the HTML renderer parser based on the prior registration calls the specified help facility function with the PlayAction attribute and its associated arguments Action set name Action name . If the named Action set exists the help facility causes the specified Action to be played and the corresponding operations are performed by the application. If the named Action does not exist the help facility fails gracefully for example by presenting a pop up window to the user stating The command you are trying to run is unavailable. If the associated help page is located and being presented to a user on a remote machine or server but the Action set is present locally i.e. local to the machine or server on which the help facility is executing the help facility still can drive the application even though the link having the PlayAction attribute originated on a remote machine.

If the process determines based on the state information that the application operation can and or should be performed the operation associated with the interactive link is performed . On the other hand if the process determines based on the state information that the application operation cannot and or should not be performed the operation associated with the interactive link is not performed and appropriate action is undertaken for example the user is alerted .

The alert provided to the user either can be a simple notice that the requested operation cannot be performed under the current application state for example as shown by popup window in or the alert can be more elaborate for example providing details of why the application s current state prevents performance of the operation and or listing steps or activities that the user can take to place the application in the correct state for performing the operation associated with the interactive link. In this manner accordingly the help facility can fail gracefully when the user requests an application operation not currently performable and potentially can outline corrective measures to place the application in the proper state. As a result the robustness and instructive value of the help facility may be enhanced.

In one implementation two help files e.g. index.html and listing.html may be used for each help topic or Recipe. In that case the file index.html may include HTML statements and or code that collectively define the Recipe s content layout and interactive links that are presented to the user. The file listing.html may include a link pointing to the corresponding index.html file and specifying the name of the help topic to be displayed to the user in a table of contents.

Upon being launched and or upon refreshing its knowledge of the contents of the hierarchical file structure the help facility will traverse the file structure and will use the directory names at levels and and the listing.html files at level to build a table of contents and content dynamically. In particular the name of each category directory residing in level of the file structure is added to a list of available help categories displayed to the user in a menu see e.g. the list of five different Recipe categories displayed in dropdown menu in . Moreover the listing.html files in level are used to dynamically generate one or more HTML files at level that identify and point to each of the individual help topic s index.html files. For example each of Recipe and Recipe under Category in will have corresponding index.html and listing.html files. When the help facility traverses the file structure the listing.html files for Recipe and Recipe will be used to automatically generate another HTML file at level that identifies and points to Recipe s and Recipe s respective index.html files.

Because the help facility may dynamically build and update its available help content in the manner described above new help categories topics can be added to the help facility or existing help categories topics can be modified with relative ease and simplicity. For example the help facility content represented in containing two help categories having two Recipes a piece can be expanded simply by adding at level a category directory New Category having a sub directory Recipe which in turn includes associated listing.html and index.html files. When the help facility next traverses the file structure this New Category of help information will be visible to and accessible by the user.

One method for generating a macro of one or more operations is to create a new Action by recording a series of user activities a feature available in Adobe Photoshop . To do so the author uses various GUI mechanisms such as dialog boxes to specify an Action name an Action set and to start and stop recording user activities e.g. selecting menu items changing application modes performing operations on images and the like. The recorded activities define the Action which may be invoked through a specified function key through the application GUI or indirectly through the help facility using interactive links. Accordingly by enabling the generation of new or modified help files and associated macros of application operations in the manner described authors are provided with a highly flexible and extensible help facility that may be used to customize the help facility for specific contexts or uses.

As an alternative to generating new help content or in addition the help facility can be extended by retrieving new or modified help content from an external source for example from a website accessible via a network or from a removable medium such as a CD ROM. Retrieving new help content in this manner can be performed either in response to user commands or actions e.g. selection of the Download New Recipes menu item as shown in or transparently to the user for example based on the automatic detection of updated material being available at a predetermined URL universal resource locator address.

Next the generated or retrieved help file s are placed at predetermined location s within the file structure used by the help facility . Placement of the help files can be performed manually by a user or author or can occur automatically for example in the event of downloading new help content from an external source such as a website.

Next the help facility recognizes the existence of new help file s in the file structure . This recognition can be triggered either by an express user action e.g. clicking a refresh button in the help facility s GUI or can occur automatically for example by traversing the file structure periodically e.g. once every 10 seconds or whenever a change in the file structure is detected.

Finally the help facility makes the new help content accessible to the user for example by updating menus or other displays and or dynamically building new tables of content to include the identities of and links to the new content .

Various implementations of the systems and techniques described here may be realized in digital electronic circuitry integrated circuitry or in computer hardware firmware software or combinations thereof.

