---

title: Support for multiple interface versions
abstract: Multiple interface versions including a current interface version and at least one earlier interface version are supported. A call is received at an interface version. A data structure from the current interface version data structures is retrieved. An event comprising a reference to the call is fired. Listeners for events are provided. A listener initiates the processing of a side effect of the current interface version, if appropriate to the call, wherein a side effect is a process in addition to the main purpose of the interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07954085&OS=07954085&RS=07954085
owner: International Business Machines Corporation
number: 07954085
owner_city: Armonk
owner_country: US
publication_date: 20051004
---
This invention relates to the field of supporting multiple interface versions and more particularly to supporting multiple versions of an interface where the interface involves side effects in addition to the main purpose to the interface.

Distributed computer systems have become more widespread as computer networks have developed. Distributed computer systems comprise multiple computer systems connected by one or more networks such that the resources of the computer systems can be shared. Processes instructed by a local computer system can be executed on a remote computer system. The connecting networks can include Local Area Networks LANs Wide Area Networks WANs and global networks such as the Internet.

One form of distributed architecture in which multiple computer processes may cooperatively perform tasks is under a client server relationship. In such a relationship a client or calling computer process issues or sends a request for a remote procedure to a server or receiving computer process that executes the procedure. It will be appreciated that whilst one computer process may function as a client which issues a procedure request and another may function as a server when it executes the procedure any computer process may function as both a client and a server in different capacities. The terms client and server may also be applied to peer systems.

Requests are passed between application programs running on the client and server computer systems by communication described by the application programming interface API . As new functionality is implemented in computer processes and environments remote procedure APIs often may be enhanced to support the new functionality. As is common practice with computer applications enhancements to an API are embodied in a new version of the API.

To support a new version of an API both the client and the server utilizing the API must support the new version. However in many distributed computer systems it is impossible or impractical to upgrade all clients and servers at the same time to a new version of a remote procedure API. This is particularly true in shared or public networks. Consequently multiple versions of an API may exist in a distributed computer system.

In existing systems multiple API versions are handled by allowing servers to support multiple versions with clients usually supporting only single versions of an API. Clients can access both old and new versions simultaneously for as long as the clients may need to access the old versions.

The development of the Internet has resulted in the use of open or shared computing in which applications are freely and dynamically available to users via the Internet. Such systems result in loss of control and influence over the version of APIs used. Recent trends in the Internet are towards the use of Web Services whereby standard functions associated with a particular industry or infrastructure requirement are established by a consortium of companies and thus represent a standard interface. These include 

1. Mapping one version of an API call to another. For example mapping a version call to a corresponding version call.

2. Re implementing the older API version s to incorporate any new requirements introduced with the newest version.

According to one aspect of the present invention a method supports multiple interface versions comprising a current interface version and at least one earlier interface version. A call is received at an interface version. A data structure from the current interface version data structures is retrieved. An event comprising a reference to the call is fired. Listeners for events are provided. A listener initiates the processing of a side effect of the current interface version if appropriate to the call wherein a side effect is a process in addition to the main purpose of the interface.

According to another aspect of the present invention a system supports multiple interface versions comprising a current interface version and at least one earlier interface version. The system includes a receiving device receiving a call at an interface version aa retrieving device retrieving a data structure from data structures associated with the current interface version a firing device firing an event comprising a reference to the call an event manager receiving events and having one or more listeners registered at the event manager and a listener initiating the processing of a side effect of the current interface version if appropriate to the call wherein a side effect is a process in addition to the main purpose of the interface.

According to yet another aspect of the present invention a computer program product supports multiple interface versions. The multiple interface versions comprise a current interface version and at least one earlier interface version. The computer program product comprises a computer usable medium having computer useable program code embodied therein. The computer useable program code comprises computer usable program code configured to receive a call at an interface version computer usable program code configured to retrieve a data structure from the current interface version data structures computer usable program code configured to fire an event including a reference to the call computer usable program code configured to provide listeners for events and computer usable program code configured to initiate the processing of a side effect of the current interface version if appropriate to the call wherein a side effect is a process in addition to the main purpose of the interface.

Other aspects and features of the present invention as defined solely by the claims will become apparent to those ordinarily skilled in the art upon review of the following non limited detailed description of the invention in conjunction with the accompanying figures.

As will be appreciated by one of skill in the art the present invention may be embodied as a method system or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects all generally referred to herein as a circuit or module. Furthermore the present invention may take the form of a computer program product on a computer usable storage medium having computer usable program code embodied in the medium.

Any suitable computer readable medium may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a nonexhaustive list of the computer usable or computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java7 Smalltalk or C . However the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer. In the latter scenario the remote computer may be connected to the user s computer through a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Referring to the drawings a distributed computer system is described. is an illustration of a distributed computer system which provides an example of the possible configurations of such a system . The nature of a distributed computer system means that there is an infinite number of possible arrangements or configurations.

In four computer systems are shown which are interconnected by a public network which may be for example the Internet. One of the computer systems is also connected to two further computer systems by a local area network LAN .

Each computer system may function as a client a server or both. Each computer system generally includes a central processing unit CPU a non volatile program storage device such as read only memory ROM a workspace such as random access memory RAM and a mass storage device such as a hard disk.

It should also be appreciated that although this description refers to communication between computer systems functioning as a client and a server it also includes communication between computer processes operating on the same multi tasking computer or processing system.

One of the computer systems of is shown functioning as a client and a second computer system is shown functioning as a server. In distributed applications the client and server engage in a relationship described by an interface that enables communication among distributed computer systems via a network . Through the interface application programs distributed across a network can work together communicating with each other and exchanging data to accomplish processing tasks. A sequence of communications between two application programs can accomplish one or more processing tasks.

The application programs include client applications which are also referred to as invoking applications which are resident on computer systems functioning as clients and which accomplish tasks for end users. The application programs also include service applications which are resident on computer systems functioning as servers and which provide services to other programs. Together the application programs distributed across one or more networks perform distributed processing.

An API is a description of the operations and associated parameter types used to invoke a service. The description can be used by a human programmer probably making use of programming tools to create a service application which contains an invocation of the service. The interface description represents a contract between an invoking application and a target service application .

An example which is used throughout this description is an implementation of the Universal Description Discovery and Integration UDDI specifications. Web Services is a family of standards for working with businesses developers and programs through open protocols languages and APIs. The protocols include XML Extensible Markup Language SOAP Simple Object Access Protocol WSDL Web Service Definition Language and UDDI Universal Description Discovery and Integration . UDDI is the service discovery protocol for Web Services through which companies can find one another to conduct business.

UDDI has API versions and . It is a matter for implementations of UDDI to consider which versions should be supported however support for all three may be required as many clients may only have one of the earlier versions. Each new version may place a burden of complexity on the implementation.

As is demonstrated by UDDI the server may require corrections or desire improvements to the API or its implementation and in order to provide a reasonable quality of service to the client these must be introduced without disrupting the client who may be using an earlier version of the API.

A server supports multiple versions of an API as these are developed in order that clients can access the API using the version available to the client. This is illustrated in . A server has three versions of an API V V V . A first client uses a second version V of the interface and a second client uses a third version V of the API which in this case is a most recent version of the API published by the server .

A new version of an API may have side effects which are procedures carried out by the API in addition to the main purpose of the API. Additional side effects may be added with new versions of an API.

Referring to an embodiment is shown of a system supporting multiple versions of APIs in which the most recent version V has data structures used by the implementation of the API. Data structures are forms of organizational schemes such as records or arrays that can be applied to data to facilitate interpreting data or performing operations on it. Data structures of previous superceded versions of an API i.e. V and V are replaced by facades or wrappers . The facades map the superseded data structures to the current version of the data structure . This allows the existing superceded API code to continue to work in the context of the most recent API version code without change. The facades allow the underlying data structures of the most recent API version to be retrieved when necessary.

Referring to a server is shown with multiple API versions. In the illustrated embodiment there are two API versions V and V shown. The interfaces through which the API versions are driven are unaware of the multiple versions of APIs and maintain constant public interfaces. Such interfaces may be for example interfaces using SOAP calls or graphical user interfaces for manually driving an API etc. which drive a common API code.

An event manager is provided and additional side effects are registered as listeners to the event manager . The API versions fire events . The side effects operating as listeners are written in the latest version code and expect data structures of the latest version of the API.

The described method and system also provide a means of dynamically registering or unregistering listeners which enables side effects of the latest version of the API to be added and removed. Referring to a detail of the server of is shown. The superseded API version has additional functionality provided as a modification to the API code to retrieve objects behind the facades and to fire events. A facade includes a method to obtain a reference from the data structures of the most recent API version and this reference is included in the event fired by the superseded API version . Only the additional functionality of the superseded API versions has knowledge of the multiple versions. The data structure classes are separate from the API code but related to it and the data structures are reimplemented in terms of the latest version data structures.

An embodiment of the described method and system is now given in the context of a UDDI registry. A UDDI registry provides the facility for businesses to register their service and consumers to obtain details of registered businesses. The registry provides these facilities through an interface that may be upgraded in order to add improved and new functionality.

As an example versions and of the UDDI API both provide support for an API call to save details of a business but in version this has an additional subscription side effect of sending out details of the business to subscribers who have registered an interest in businesses of the type of the newly saved business. A problem occurs when it is required to provide the new version side effects for calls made through the version API because this requires the code that implements the version API to be modified to provide the new support. Another example of a side effect would be replication which copies definitions to other UDDI implementations.

According to the described method and system this problem is solved by registering the side effects with an event manager as listeners to events which are generated by the processing of an API call which requires their effect and generating an event when processing an API call relevant to the function of the API call. As a result for example the processing of an API call in UDDI to save business details generates a save business event and the subscription side effect registers as a listener to the save business events. Now whether the implementation of the version or version API generates a save business event the subscription side effect is called and accordingly the version implementation adopts the version side effect without modification.

Superseded API versions require a small change to the API code to retrieve the underlying data structure of the most recent API version and to fire an event indicating for example a call type such as a business entity being published . The superseded API version code does not know how many listeners there are for the event so once this small change has been made the code is isolated from the details of how many listeners there are and what they will do with the event.

The corresponding most recent API version code does exactly the same thing except that it is natively working with the most recent data structures so it does not need to retrieve them but it fires exactly the same event. The registered listeners do not know if the event was fired as a result of a superseded API version request or a most recent API version request.

If a new API version is produced e.g. V the previously superseded data structure facades V V will need to be updated to use the native data structures of the new most recent API version V but apart from that the existing API code V V will not need to be updated. The previously most recent API version code V will need to be updated to use also new data structure facades to the most recent API version V data structures. The previously most recent API version code V that fires events will also need to be updated to retrieve the underlying data structure when it fires the event.

Referring to UML class diagrams are provided to illustrate the use of facades. shows a version class for registering a person s details in a directory. The class consists of private storage for a name and an address for the person and public methods for getting and setting the name and address. shows a version equivalent class which has private storage of a phone number added with corresponding public methods for getting and setting the phone number of the person.

When an instance of the version facade is created it automatically creates an instance of the version class and the public methods are delegated to the version class. The facade also has an extra method get V3Delegate which returns a reference to the underlying version class instance. This method is called by the new version code that fires an event and the instance of the version person class that it returns is the object that is associated with the event.

The facade also has a constructor method to construct an instance of the class. This is optional in the latest version data structures but necessary in the facades to allow the underlying latest version objects to be created.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

It is apparent to one skilled in the art that numerous modifications and departures from the specific embodiments described herein may be made without departing from the spirit and scope of the invention.

