---

title: Acceleration of graphics for remote display using redirection of rendering and compression
abstract: A system and method are disclosed for improving the remote display of graphics images by the redirection of rendering and the optional use of image data compression. Instead of sending graphics commands over a network and rendering on a remote computer system, graphics commands may be automatically redirected by modified OpenGL functions to local graphics devices without explicit involvement by the graphics application. The modifications to a set of the OpenGL functions on the local system are transparent in the normal mode of rendering and displaying locally. After an image is rendered locally, it may be read back and sent across the network. A standard X Server on the remote system may be sufficient to support this methodology. An X Extension for data decompression on the remote system, however, may allow for more efficient image transmission through the use of image data compression.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07564461&OS=07564461&RS=07564461
owner: Sun Microsystems, Inc.
number: 07564461
owner_city: Santa Clara
owner_country: US
publication_date: 20050705
---
This application is a division of U.S. patent application Ser. No. 10 117 441 entitled ACCELERATION OF GRAPHICS FOR REMOTE DISPLAY USING REDIRECTION OF RENDERING AND COMPRESSION filed Apr. 5 2002 now U.S. Pat. No. 6 989 836 whose inventor is Paul Ramsey which is also hereby incorporated by reference as though fully and completely set forth herein.

This invention relates generally to the field of telecommunication and more particularly to a system and method for more effectively rendering on a server computer system and transferring the image data across a network to a remote computer system.

Many graphics applications use the standard OpenGL library for rendering and displaying 3D graphics on local graphics hardware. There are times when it would be desirable to render locally and display remotely because a remote device at the remote system may not be as powerful as the local device or the remote system may have no 3D capability at all. Unfortunately OpenGL does not provide an efficient mechanism for local rendering and remote display. Thus an OpenGL application may slow down dramatically when operating in this mode.

OpenGL may be used to render and display on a remote system by sending commands over a network. However when a graphics application running on a local computer system is required to display graphics images on a remote computer system rendering time may be significantly increased because protocols are not designed for efficient remote rendering and display. The standard OpenGL library functions create a window for the remote system based on the characteristics of the graphics devices in the remote system. The local computer system then renders image data to the remote window.

There exists a need for a system and methodology capable of local rendering and remote display without modification to the graphics software application especially an OpenGL application executing on the local computer system.

The problems set forth above may at least in part be solved by a system and method for improving the remote display of graphics images by the redirection of rendering and the optional use of image data compression. Instead of sending graphics commands over a network and rendering on a remote computer system graphics commands may be automatically redirected by modified OpenGL functions to local graphics devices without explicit involvement by the graphics application. The modifications to a set of the OpenGL functions on the local system may be transparent in the normal mode of rendering and displaying locally. After an image is rendered locally it may be read back and sent across the network. A standard X Server on the remote system may be sufficient to support this methodology. An X Extension for data decompression on the remote system however may allow for more efficient image transmission through the use of image data compression.

In some embodiments a network connection may be established between a local computer system and a remote computer system. A user may assert a request to a graphics application for remote display of graphics images. The graphics application uses an OpenGL library which includes modified OpenGL functions to create a remote window and a context for the remote window for remote display. A set of the OpenGL functions are modified to redirect the graphics application s device queries to local graphics devices rather than the remote graphics devices. This set may include but is not limited to the OpenGL functions glXChooseVisual glXQueryExtension and glXGetConfig . These modified OpenGL functions and other modified query functions return information about a local graphics device rather than the remote display device. With this modified information most applications may be willing to create windows on the remote system for use with OpenGL even though the remote system may not actually have any OpenGL capabilities.

To create a context for the remote window the graphics application may use a modified OpenGL function glXCreateContext. This function may be modified so that when the application attempts to create an OpenGL context for use with the remote window a context is instead created for a graphics device in the local computer system. The OpenGL function glXMakeCurrent may also be modified so that when the graphics application attempts to attach the context to a remote window a local pbuffer of the same size as the OpenGL viewport is created and the context is attached to the pbuffer instead of the remote window. The OpenGL function glViewport may be modified so that if a viewport is changed the pbuffer size may be changed accordingly.

Graphics image frames are rendered to the pbuffer using standard OpenGL functions. Because the context is attached to the pbuffer the standard rendering functions do not require modification. Subsequent rendering will simply happen to the pbuffer instead of the remote window.

A particular modified OpenGL function glXSwapBuffers may be used to read the graphics image frames from the pbuffer and display the graphics image frames on the remote display. In some embodiments the OpenGL function glXSwapBuffers may be modified so that when the application calls the function the rendered image may be read back from the pbuffer using glReadPixels and displayed on the remote system using XputImage.

One additional benefit of this method may be that modified OpenGL functions perform according to standard OpenGL behavior when a remote display is not specified. A second additional benefit of this method may be that usage of the OpenGL function glXSwapBuffers may ensure that an image frame will be completely rendered to the pbuffer before it is read and sent to the remote display. This may ensure that a combined image of portions of two sequential frames an image tear will not be read and sent to the remote display.

In other embodiments the method may also reduce the transmission time by compressing the rendered image frame using a compression algorithm before sending the compressed image to the remote system for decompression and display. Usage of the modified OpenGL function glXSwapBuffers may ensure that a compression algorithm is applied to complete frames to take full advantage of instances where only a portion of the pixels change values in a sequence of frames. An optional X Extension and a decompression software program may be used in the remote system to decompress the graphics images. Using image data compression may achieve a significant improvement in frames per second display capability for the remote system.

While the invention is susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore note that the word may is used throughout this application in a permissive sense i.e. having the potential to being able to not a mandatory sense i.e. must . The term include and derivations thereof mean including but not limited to . The term connected means directly or indirectly connected and the term coupled means directly or indirectly connected .

As shown the computer system includes a system unit and a video monitor or display device coupled to the system unit . The display device may be any of various types of display monitors or devices e.g. a CRT LCD or gas plasma display . Various input devices may be connected to the computer system including a keyboard and or a mouse or other input device e.g. a trackball digitizer tablet six degree of freedom input device head tracker eye tracker data glove or body sensors . Application software may be executed by the computer system to display graphical objects on display device .

Host processor may include one or more processors of varying types e.g. microprocessors multi processors and CPUs. The system memory may include any combination of different types of memory subsystems such as random access memories e.g. static random access memories or SRAMs synchronous dynamic random access memories or SDRAMs and Rambus dynamic random access memories or RDRAMs among others read only memories and mass storage devices. The system bus or host bus may include one or more communication or host computer buses for communication between host processors CPUs and memory subsystems as well as specialized subsystem buses.

In a graphics system is coupled to the high speed memory bus . The graphics system may be coupled to the bus by for example a crossbar switch or other bus connectivity logic. It is assumed that various other peripheral devices or other buses may be connected to the high speed memory bus . It is noted that the graphics system may be coupled to one or more of the buses in computer system and or may be coupled to various types of buses. In addition the graphics system may be coupled to a communication port and thereby directly receive graphics data from an external source e.g. the Internet or a network. As shown in the figure one or more display devices may be connected to the graphics system .

Host CPU may transfer information to and from the graphics system according to a programmed input output I O protocol over host bus . Alternately graphics system may access system memory according to a direct memory access DMA protocol or through intelligent bus mastering.

A graphics application program conforming to an application programming interface API such as OpenGL or Java 3D may execute on host CPU and generate commands and graphics data that define geometric primitives such as polygons for output on display device . Host processor may transfer the graphics data to system memory . Thereafter the host processor may operate to transfer the graphics data to the graphics system over the host bus . In another embodiment the graphics system may read in geometry data arrays over the host bus using DMA access cycles. In yet another embodiment the graphics system may be coupled to the system memory through a direct port such as the Advanced Graphics Port AGP promulgated by Intel Corporation.

The graphics system may receive graphics data from any of various sources including host CPU and or system memory other memory or from an external source such as a network e.g. the Internet or from a broadcast medium e.g. television or from other sources.

Note while graphics system is depicted as part of computer system graphics system may also be configured as a stand alone device e.g. with its own built in display . Graphics system may also be configured as a single chip device or as part of a system on a chip or a multi chip module. Additionally in some embodiments certain of the processing operations performed by elements of the illustrated graphics system may be implemented in software.

A communication system for remote display of graphics images using redirection of rendering is illustrated in . In some embodiments the communication system includes a computer system performing as a server system and a computer system performing as a remote system . The server system may include graphics rendering hardware and a pbuffer . As is well known in the art the server system may also include a server memory e.g. main memory and a server processor e.g. host CPU coupled to the server memory. The server memory stores a graphics software program or graphics application and an OpenGL Library of software functions. In some embodiments the OpenGL Library of software functions may include standard OpenGL functions a set of modified OpenGL functions and a modified particular OpenGL function. The server processor may be operable to execute the graphics software program to implement calling one or more of the set of modified OpenGL functions to create and attach a graphics window context created for a remote window to the pbuffer instead rendering an image to the pbuffer and calling the particular OpenGL function which may be modified to induce transfer of the image from the pbuffer to a window in the remote system.

The remote system may comprise a remote display a remote memory that stores an X Server software program and a remote processor coupled to the remote memory. The processor may be operable to execute the X Server software program to receive an image from the server system and display the image on the remote display .

The communication system may also include a compression software program stored on the server memory an X Extension for the X Server stored in the remote memory and a decompression software program stored in the remote memory.

A set of the OpenGL functions are modified to redirect the graphics application s device queries to local graphics devices rather than the remote graphics devices step . In some embodiments this set may include but is not limited to the Open GL functions glXChooseVisual glXQueryExtension and glXGetConfig . These modified Open GL functions and other modified query functions return information about a local graphics device rather than the remote display device. With this modified information most applications may be willing to create windows on the remote system for use with OpenGL even though the remote system may not actually have any OpenGL capabilities.

To create a context for the remote window the graphics application may use a modified OpenGL function glXCreateContext. This function may be modified so that when the application attempts to create an OpenGL context for use with the remote window a context is instead created for a graphics device in the local computer system.

The OpenGL function glXMakeCurrent may also be modified so that when the graphics application attempts to attach the context to a remote window a local pbuffer of the same size as the OpenGL viewport is created and the context is attached to the pbuffer instead of the remote window step . The OpenGL function glViewport may be modified so that if a viewport is changed the pbuffer size may be changed accordingly.

Graphics image frames are rendered to the pbuffer using standard OpenGL functions step . Because the context is attached to the pbuffer the standard rendering functions do not require modification. Subsequent rendering will simply happen to the pbuffer instead of the remote window.

A particular modified OpenGL function glXSwapBuffers may be used to read the graphics image frames from the pbuffer step and display the graphics image frames on the remote display steps . In some embodiments the OpenGL function glXSwapBuffers may be modified so that when the application calls the function the rendered image may be read back from the pbuffer using glReadPixels or other device specific functions and displayed on the remote system using XputImage or other remote image display functions may be used . In other embodiments the OpenGL functions glFinish or glFlush may be modified for transferring the rendered image to the remote system.

One additional benefit of this method may be that modified OpenGL functions perform according to standard OpenGL behavior when a remote display is not specified. A second benefit may be that a remote system with only an X Server no OpenGL capabilities may be sufficient to support this method. A third benefit may be that usage of the OpenGL function glXSwapBuffers may ensure that an image frame will be completely rendered to the pbuffer before it is read and sent to the remote display. This may ensure that a combined image of portions of two sequential frames an image tear will not be read and sent to the remote display.

In other embodiments the method may also reduce the transmission time by compressing the rendered image frame using a compression algorithm step before sending the compressed image to the remote system step for decompression step and display step . Usage of the modified OpenGL function glXSwapBuffers may ensure that a compression algorithm is applied to complete frames to take full advantage of instances where only a portion of the pixels change values in a sequence of frames. An optional X Extension and a decompression software program may be used in the remote system to decompress the graphics images. There are a number of codecs compression decompression algorithms that may be used. In some embodiments a codec invented by Russ Brown based on the discrete cosine transform DCT may be utilized. Please see U.S. patent application Ser. No. 09 779 333 entitled Entropy Coding Using Adaptable Prefix Codes filed on Feb. 8 2001. Using image data compression may achieve a significant improvement in frames per second display capability for the remote system.

Although the embodiments above have been described in considerable detail other versions are possible. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Note the section headings used herein are for organizational purposes only and are not meant to limit the description provided herein or the claims attached hereto.

