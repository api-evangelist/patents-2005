---

title: Template configuration tool for application servers
abstract: A template configuration tool includes a template tool core and template processor plug-ins. The template processor plug-ins auto-configure components of an Application Server (“AS”) instance based on component templates containing configuration information. The template tool core loads the components templates and the processor plug-ins and invokes functions of the template processor plug-ins to auto-configure the components of the AS instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07984119&OS=07984119&RS=07984119
owner: SAP AG
number: 07984119
owner_city: Walldorf
owner_country: DE
publication_date: 20050421
---
This disclosure relates generally to installation and configuration of enterprise software and in particular but not exclusively relates to automated configuration of Application Servers instances deployed in an enterprise environment.

Each AS instance may include one or more virtual machines VMs to interpret programs providing the presentation and business logic to service work requests . These VM machines may be Java VMs JVMs compliant with the Java 2 Standard Edition J2SE standard the NET framework from Microsoft or the like.

Web dispatcher implements a load balancing mechanism distributing work requests from client nodes among server nodes within cluster . Web dispatcher may be one of server nodes having the task of dispatching work requests among server nodes of cluster or a stand alone hardware node. Work requests are processed by server nodes and may subsequently be provided to database node . Database node offers up the requested data to server nodes which in turn process and format the results for display on client nodes . Each AS instance may further include its own dispatcher mechanism to distribute work requests assigned to it among its individual VMs .

Installation files for installing AS instances may be centrally stored within database . To deploy each AS instances installation files are copied from database node to each server node via a network link. Once copied installation files are installed generating a file system and establishing AS instances on each server node . When freshly installed each AS instance is deployed with a default configuration installation for VMs and the applications and services deployed therewith. AS instances may be operated using the default configuration installation however this does not guarantee that all available resources will be utilized optimally or that AS instances will function properly.

Typically once each AS instance is up and running with the default installation configuration a user manually configures each AS instance . Manual configuration generally requires a sophisticated knowledge about the hardware and OS platforms as well as the tasks to be performed by each AS instance . The user configuring a default installation configuration may need to determine and input a large number of parameters unique to each AS instance in a time consuming and error prone processes.

A template configuration tool is described herein. The template configuration tool includes a template tool core and template processor plug ins. The template processor plug ins auto configure components of an Application Server AS instance based on component templates each containing configuration information. The template tool core loads the components templates and the processor plug ins and invokes functions of the template processor plug ins to auto configure the components of the AS instance based on the component templates.

The above attributes may be implemented using a computer program a method a system or apparatus or any combination of computer programs methods or systems. These and other details of one or more embodiments of the invention are set forth in the accompanying drawings and in the description below.

Template processor plug ins are template engines which operate using component templates illustrated as including virtual machine VM template A and other component templates B to setup and configure installation configurations illustrated as including VM configuration A and other component configurations B of AS instance . Component templates may include software platform settings hardware platform settings and or use case settings which are applied to installation configurations by template processor plug ins .

Template configuration tool may be thought of as a tool suite to automatically configure and performance tune up a pre existing installation configuration. Template configuration tool may be applied to a default installation configuration that is initially deployed upon installing AS instance for the first time on a server node but has not yet be configured for operation on the particular software hardware platform and or use case scenario. Subsequently template configuration tool may be ran to performance tune up a pre configured AS instance installation that has degraded over time to update a pre configured AS instance with new configuration settings or after an application service or hardware update.

Each installation configuration may represent installation files folders and settings related to various components of AS instance . For example VM configuration A may represent the files folders and settings related to one or more VMs installed within AS instance . In one embodiment these VMs may include Java VM JVMs compliant with the Java 2 Standard Edition J2SE standard or the Java 2 Enterprise Edition J2EE standard. In one embodiment these VMs may include JVMs compliant with the .NET framework by Microsoft. Installation configurations B may represent the files folders and settings related to other components of AS instance such as business logic components presentation logic components integration logic components discussed in detail with respect to or the like.

As illustrated each component template may correspond to a different component of AS instance and is therefore used to automate the setup and configuration of existing installation configurations related to each of the components. In one embodiment component templates may be provided by the vendors or developers of the various components of AS instance who have the intimate knowledge to optimally setup and configure the components they develop. Embodiments of the invention do not specify the requirements or structure of each component template but rather describe an overall framework for applying component templates to the components of AS instance . The specifics of each component template are left to the individual developers or providers of component templates . Similarly the same developers may also generate and provide template processor plug ins . Accordingly a developer may bundle a template processor plug in with a corresponding component template with their component for sale to end users.

For example the developer of the JVMs implemented within AS instance may also create and provide VM template A and VM template processor A. The developer may create a number of different VM templates A optimized for configuring their JVM or other component on different software and or hardware platforms and for different specialized use case scenarios. The developer can then provide the end user their JVM bundled with the appropriate VM template A and VM template processor A to automate the setup and configuration of the JVM.

While illustrates a one to one correspondence between a component of AS instance a template processor plug in and a component template it should be appreciated that this need not be true in all cases. A single component template may be used by a number of template processor plug ins to configure a number of components. For example VM template A may be used by other components than just the VM component which may require access to configuration settings of the VM. Correspondingly multiple component templates may be used to configure and setup different aspects of the same component.

Since component templates and template processor plug ins are modular in nature new and or updated component templates and template processor plug ins may be added to removed from template configuration tool at anytime. During operating template processor plug ins may be plug into template configuration tool in real time using common interface . The functionality of template configuration tool may be initiated controlled and monitored by template tool core while access to each template process plug in is provided via common interface . By providing common interface as an abstraction interface between template processor plug ins and template tool core any number of template processor plug ins may be plugged in and out with ease. In one embodiment template processor plug ins implement various methods functions guided by component templates to configure the current installation configurations of the various components of AS instance .

Template tool core provides functionality for managing the general flow of the auto configuration process. Some of this functionality includes generating a graphical user interface GUI to enable a user to interact with template configuration tool and set advance settings of the auto configuration process monitor the progression and results of the auto configuration process log the results of the auto configuration process as wells as perform other tasks described below.

In a process block AS instance is installed onto a server node e.g. one of server nodes in having a default installation configuration. In some cases the default installation configuration of AS instance may not operate at all without some level of configuration while in other cases the default installation configuration may operate at some level but at reduce capacity or with limited functionality. In a process block template tool core is invoked by a user to initiate the auto configuration process on the default installation configuration of AS instance . Upon invocation of template tool core one or more dialog boxes may be displayed providing the user an opportunity to select various user settings. In one embodiment these user setting are configured to a default setting and therefore need only be manipulated if the user desires to deviate from these default settings. Some example user settings include indicating whether or not to backup the current installation configuration prior to commencement of the auto configuration process whether or not to apply local or global settings to the auto configuration process and the like. Global settings may including setting that are applied to all AS instances within a cluster while local settings may include those setting that are applied to a single AS instance only.

In a process the auto configuration process begins when template tool core extracts component templates from a template file and places component templates into a template buffer . In one embodiment template file stores component templates in a compressed format or archive file e.g. zip .rar .gz .tar etc. with the files associated with each component template saved in subfolders named with the component name. It should be appreciated that other techniques for archiving component templates may be implemented with embodiments of the invention.

In a process block template tool core inspects a registration file to determine which template processor plug ins are registered and therefore which template processor plug ins to load from a processor plug in folder and plug in to common interface . The various different template processors are initially stored in processor plug in folder . In one embodiment processor plug in folder stores files related to each template processor plug in in subfolders labeled with the name of the corresponding component of AS instance . Each subfolder may contain the plug in code e.g. PLUG IN.CODE as well as a plug in properties file e.g. PLUG IN.PROPERTIES . The properties file may specify the class or classes to be loaded when the particular template processor plug in is initialized and the class path relative to subfolder . In a process block template tool core loads the registered template processor plug ins .

Registration file not only indicates to template tool core which template processor plug ins to load but also provides a mapping between a particular template processor plug in and its corresponding component template . As illustrated the name of the component template subfolder is mapped to the name of the corresponding template processor plug in subfolder . Registration file enables template tool core to match template processor plug ins with the proper component templates .

In a decision block template tool core determines whether to backup the current installation configuration of AS instance . In one embodiment the default setting is to backup the installation configurations which will be modified during the auto configuration process by template processor plug ins . However as mentioned above a user may override this default setting. If template tool core determines to backup at least a portion of AS instance then process continues to a process block . Process block is described in detail in process illustrated in . However if template tool core is set not to backup any installation configurations then process continues to a process block .

In process block template tool core invokes the APPLY CONFIG method within common interface for each registered template processor plug in . In response each template processor plug in invoked proceeds to configure its corresponding component of AS instance based on its corresponding component template process block and the settings parameters passed from template tool core .

As discussed above component templates may include software platform dependent parameters hardware platform dependent parameters and or use case dependent parameters which are applied to installation configurations . Many of the parameters used to auto configure may be extracted from the platform itself during the auto configuration procedure by template processor plug ins . The software platform dependent parameters enable template processor plug ins to auto configure components of AS instance based on the software environment present on the particular server node e.g. OS applications drivers etc. . Table 1 below lists some example software platform dependent parameters.

Component templates may further include static parameters and or dynamic parameters for auto configuring AS instance . A static parameter is a parameter that is predetermined and may be listed in a component template as a value string or the like. A dynamic parameter is a parameter that is dynamically determined during the auto configuration process and may be listed within a component template as an equation relation or arithmetic expression for determining the dynamic value based on variables automatically extracted from the software and or hardware environments during the auto configuration procedure. The structure of a dynamic parameter may be a combination of parameters constants simple operators and brackets. The hardware platform dependent parameters listed in Table 2 are examples of parameters that can be dynamically determined. An example dynamic parameter for determining the maximum thread count within a VM may look something like maxThreads EXPR 200 min 10 max CPU COUNT AVERAGE CPU SPEED 10 NUMBER SERVER N ODES . For this example the maximum thread count is dynamically determined based on the CPU COUNT the AVERAGE CPU SPEED and the NUMBER SERVER NODES automatically extracted from the platform during the auto configuration procedure.

Returning to if AS instance is successfully configured decision block then the auto configuration process is completed in a process block . However if the auto configuration process fails to validly auto configure one or more components of AS instance decision block then process continues to a decision block . If the particular installation configuration that failed to auto configure was backed up in process block then the backup installation configuration corresponding to the failed component is restored to AS instance in a process block . Process block is described in detail in process illustrated in . It should be noted that the entire installation configuration of AS instance need not be restored. Rather in some embodiments only the particular installation configuration corresponding to the failed component is restored. However in some failures the entire installation configuration of all the components of AS instance may need to be restored if the failure is severe. If the failed installation configuration was not backed up then the auto configure process fails process block .

The illustrated embodiment of enterprise system includes one or more clients communicatively coupled to one or more AS instances which are in turn communicatively coupled to one or more database . A user interface provides a graphical user interface GUI to enable users of clients to interact with databases e.g. submit queries input data etc. through AS instances .

AS instances may each include business components presentation components and integration components which together form subcomponents of the Application Server e.g. WebAS by SAP AG . Business components provide the business logic of AS instance enabling complex business processes to be implemented. In a J2EE environment business components may include one or more Enterprise JavaBean EJB containers each including one or more EJBs. The EJBs are Java based software modules that contain the actual business logic while EJB container encapsulates the EJBs in a Java based runtime environment that provides a host of common interfaces and services to the EJBs.

Presentation components describe the specific manner in which the results of business components are formatted for display on the user interface . The results may be formatted with aid of a web container that supports both servlets and JavaServer Pages JSPs . The servlets provide server side processing to generate the GUI and the JSPs are extensions of the Java servlet technology for providing dynamic content within the GUI. In the example of WebAS the servlets may include SAP Enterprise Portal which provides a uniform and personalized access to various different back end systems via a browser Web Dynpro which uses JSPs to provide a development and runtime environment for Web applications or other presentation logic.

Integration components enable access to business functionalities from external resources. This is done using various services connectors middleware communication protocols and support for general data exchange formats e.g. extensible markup language . For example integration components may contain support for the following services Java Database Connectivity JDBC Application Programming Interface API the Java Naming and Directory Interface JNDI the Java Messaging Service JMS the Java Transaction Service JTS the Java Transaction API JTA the J2EE Connector Architecture JCA and the like.

Template configuration tool may be used to auto configure any or all of the components of enterprise system described above including the business presentation and integration components. Furthermore template configuration tool may be used to auto configure the underlying engines that operate these components. As discussed above these underlying engines may be various types of JVMs such as the J2EE engine. In fact in some embodiments template configuration tool may be used to auto configure applications within clients various components of database a dispatcher for distributing work requests between the AS instances e.g. web dispatch in or an internal dispatcher within each AS instance see a message server see or the like.

The elements of processing system are interconnected as follows. Processor s is communicatively coupled to system memory NV memory DSU and communication link via chipset to send and to receive instructions or data thereto therefrom. In one embodiment NV memory is a flash memory device. In other embodiments NV memory includes any one of read only memory ROM programmable ROM erasable programmable ROM electrically erasable programmable ROM or the like. In one embodiment system memory includes random access memory RAM such as dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM static RAM SRAM and the like. DSU represents any storage device for software data applications and or operating systems but will most typically be a nonvolatile storage device. DSU may optionally include one or more of an integrated drive electronic IDE hard disk an enhanced IDE EIDE hard disk a redundant array of independent disks RAID a small computer system interface SCSI hard disk and the like. Although DSU is illustrated as internal to processing system DSU may be externally coupled to processing system . Communication link may couple processing system to a network such that processing system may communicate over the network with one or more other computers. Communication link may include a modem an Ethernet card a Gigabit Ethernet card Universal Serial Bus USB port a wireless network interface card a fiber optic interface or the like.

It should be appreciated that various other elements of processing system have been excluded from and this discussion for the purposes of clarity. For example processing system may further include a graphics card additional DSUs other persistent data storage devices e.g. tape drive and the like. Chipset may also include a system bus and various other data buses for interconnecting subcomponents such as a memory controller hub and an input output I O controller hub as well as include data buses e.g. peripheral component interconnect bus for connecting peripheral devices to chipset . Correspondingly processing system may operate without one or more of the elements illustrated. For example processing system need not include DSU .

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of the phrases in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

The processes explained above are described in terms of computer software and hardware. The techniques described may constitute machine executable instructions embodied within a machine e.g. computer readable medium that when executed by a machine will cause the machine to perform the operations described. Additionally the processes may be embodied within hardware such as an application specific integrated circuit ASIC or the like. The order in which some or all of the process blocks appear in the processes should not be deemed limiting. Rather one of ordinary skill in the art having the benefit of the present disclosure will understand that some of the process blocks may be executed in a variety of orders not illustrated.

The above description of illustrated embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. In some examples above well known structures materials or operations are not shown or described in detail to avoid obscuring certain aspects. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize.

These modifications can be made to the invention in light of the above detailed description. The terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification and the claims. Rather the scope of the invention is to be determined entirely by the following claims which are to be construed in accordance with established doctrines of claim interpretation.

