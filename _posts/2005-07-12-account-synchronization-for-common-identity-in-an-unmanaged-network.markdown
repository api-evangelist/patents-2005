---

title: Account synchronization for common identity in an unmanaged network
abstract: A platform supports an unmanaged secured workgroup, without a server, for common user access and secure resource sharing among the computers in the group. User accounts are synchronized by replicating and modifying the accounts at each computer of the unmanaged secured workgroup. A computer advertises a change in account information to other computers in an unmanaged secured workgroup. If one of computers in the unmanaged secured workgroup determines that the change is not reflected in the current account information, the computer requests the updated account information from the advertising computer. Any conflicts between user accounts at different computers are resolved before synchronizing the user account in the unmanaged secured workgroup. Also, an application program interface (API) enables an application to query properties of a networked computer system and an unmanaged secured workgroup and to join the unmanaged secured workgroup.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07958543&OS=07958543&RS=07958543
owner: Microsoft Corporation
number: 07958543
owner_city: Redmond
owner_country: US
publication_date: 20050712
---
With the advancements in computer network technologies large computer networks have become quite complicated with sophisticated administration schemes for managing user access and security of the network. For instance a large computer network typically has multiple domains each having a primary domain controller that contains a database of usernames passwords and permissions for machines in its domain.

In contrast small scale local networks such as home networks and small business networks have remained rather simple and unsophisticated. Most of the small scale networks are unmanaged in that there are no dedicated entities such as domain controllers in a large network for handling account information in a centralized manner. The machines in such an unmanaged network typically are connected to the same network hub and operate as a loose peer to peer group sometimes called a workgroup intended only to help users find such things as printers and shared folders within the workgroup. Otherwise the machines operate like stand alone machines. As a result the unmanaged network offers little additional value to the users.

There is no effective security administration and the machines are not well integrated to facilitate network access and resource sharing. Local accounts must be manually created on every machine and there is no relationship between accounts on different machines in the workgroup. Thus a user may be able to log onto one machine but not another machine in the same network because the user s account has not been set up on the other machine. There is no reliable mechanism to enumerate the computers in the network. Also the sharing of resources on the machines can be difficult to implement and maintain and difficult to manage to provide security.

A networked computer system often supports a user that may migrate from one computer to another computer. In view of the foregoing the present invention provides a platform for organizing multiple computers on a computer network in an unmanaged secured workgroup without a server. The unmanaged secured workgroup provides common user access and secure resource sharing among the computers in the group. According to an aspect of the invention user accounts are synchronized at each computer of the unmanaged secured workgroup if user account information is modified or added at one of the computers of the unmanaged secured workgroup. User accounts may be replicated or modified to synchronize the account information in the unmanaged secured workgroup.

With another aspect of the invention a computer advertises a change in account information to other computers in an unmanaged secured workgroup. If one of computers in the unmanaged secured workgroup determines that the change is not reflected in the current account information the computer may request the updated account information from the advertising computer.

With another aspect of the invention the invention determines whether a conflict exists in a user account before synchronizing the updated user account in an unmanaged secured workgroup. When the conflict is resolved the changed user account is replicated at the computers of the unmanaged secured workgroup.

With another aspect of the invention an application program interface API enables an application to query properties of a networked computer system and an unmanaged secured workgroup. In an illustrative embodiment of the invention an API provides a list of unmanaged secured workgroups within the computer network provides information about a specified unmanaged secured workgroup provides information about a specified computer within the unmanaged secured workgroup creates a new unmanaged secured workgroup and allows a computer to join or to leave an unmanaged secured workgroup.

With another aspect of the invention a requesting computer joins an unmanaged secured workgroup by establishing trust with a member computer in the unmanaged secured workgroup. The member computer authenticates the requesting computer. The requesting computer establishes an account on the member computer using a self signed certificate. The requesting computer subsequently stores information regarding the unmanaged secured workgroup and publishes itself as a member of the unmanaged secured workgroup.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Turning to the drawings wherein like reference numerals refer to like elements the invention is illustrated as being implemented in a suitable computing environment. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Definitions for the following terms are included to facilitate an understanding of the detailed description 

The following describes a general purpose computing device that may be used in a small scale unmanaged secured workgroup in accordance with illustrative aspects of the invention. Turning now to a general purpose computing device is shown in the form of a conventional personal computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media.

The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories read only memories storage area networks and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more applications programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB or a network interface card. A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the WAN . The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that the acts and operations described hereinafter may also be implemented in hardware.

Referring now to an illustrative embodiment of the present invention is directed to a platform for a small number of computers e.g. ten 10 member computers or less on an unmanaged local network to form an unmanaged secured workgroup to provide group wide control over user access and resource sharing without the need to use a centralized management component. In an illustrative embodiment unmanaged local network is configured with a peer to peer association. Unmanaged local network is classified as unmanaged because no central server manages and stores the user account information. In an unmanaged secured workgroup security policies and access controls are implemented group wide to prevent unauthorized access and use of resources by computers or users not in the group while allowing the sharing of resources within the group on a per user basis.

In an illustrative embodiment of the invention shows a small local network which is typical of home networks and small business networks. The local network is unmanaged in the sense that it does not have a centralized management component such as a domain controller or the like. As shown in the local network has a network hub or switch and a plurality of computers or computing devices connected thereto. The connections between the computers may be wireless. For example the device is a wireless device that communicates with the network through an access point .

In accordance with illustrative aspects of the invention some of the computers on the local network may form an unmanaged secured workgroup. It will be appreciated that the unmanaged secured workgroup does not depend on the particular topology of the network. For instance an unmanaged secured workgroup may be established in an ad hoc network formed by wireless devices. Due to the management concerns and the need to replicate data the unmanaged secured workgroup platform works more effectively when the number of computers in the group is kept small. For example the number of computers that can join a given unmanaged secured workgroup may be limited to a predetermined maximum number of computers e.g. ten members in an unmanaged secured workgroup .

By way of example as illustrated in the computers and have formed an unmanaged secured workgroup indicated schematically by the dashed lines connecting the computers that has a user friendly name TobyClub . A new unmanaged secured workgroup can be created if there is no existing group to join or if the user of a computer does not want to join any existing group. In this regard in an illustrative embodiment of the invention each computer can belong to only one unmanaged secured workgroup. As will be described in greater detail below the computers in the unmanaged secured workgroup have established trust among themselves and share information such as user account data and user profile data within the group. A new computer such as the computer can join the unmanaged secured workgroup and computers in the group can leave the secured workgroup and in special cases be evicted from the group.

The concept underlying the formation of a small scale unmanaged secured workgroup on an unmanaged local network is illustrated in . For a computer to join another computer in order to form an unmanaged secured workgroup the computer has to first establish trust with the second computer . This happens either when the computer wants to join an existing secured workgroup to which the computer belongs or when the computer responds to an invitation from the computer to form a new group. There are many different ways to establish trust between the two computers. Typically establishing trust requires one computer to authenticate itself to the other by showing that it knows some secret known to the other. In an illustrative embodiment of the invention the secret is the user name and password of a group administrator accepted by the other computer. In another illustrative embodiment the secret is a random personal identification number PIN generated by the other computer. In some implementations mutual authentication between the two computers may be required. It will be appreciated that the particular way to establish trust between the two computers is not critical to the invention.

After the trust between the computers and has been established the computers form an unmanaged secured workgroup or if the computer belongs to an existing unmanaged secured workgroup the computer is accepted into that group. To that end in an illustrative embodiment each unmanaged secured workgroup and each node in the secured workgroup is assigned a GUID Globally Unique Identifier which is a unique identifier. When a computer becomes a member of an unmanaged secured workgroup either by creating a new group or joining an existing group the machine s GUID and GUIDs of user accounts on that machine are changed or recreated to the group s GUID to reflect the network group s authority identities.

After the formation of an unmanaged secured workgroup user account data and user profiles are replicated to each computer in the group. As illustrated in the user account data on the computer are replicated to the computer and vice versa. After the user accounts are replicated user profiles associated with the user accounts are replicated to the other computers. The term user profile is used herein to mean data pertaining to a specific user. For instance the user profile may include registry settings for that user selected documents of the user and security policies the user tile i.e. an iconic representation of the user and settings configurations and files for personalizing user sessions etc. The particular contents of the user profile depend on the implementation. An administrator of the secured workgroup can create user accounts and set security policies on one computer in the group and the accounts and security policies are replicated to all the machines in the secured workgroup. Since each computer in the group has all the user accounts and user profiles a user that has a valid account can log on to any computer in the group using her user name and password. Replicating data such as user tiles and settings configurations and files for personalized user sessions also allow the user to have a uniform user experience across the computers in the unmanaged secured workgroup. In an embodiment of the invention a subset of account data and user profiles may be virtually unified rather than literally synchronized. An embodiment of the invention supports application virtualization synchronization in which a user installs an application on a member of the unmanaged secured workgroup and may use the application from any other member of the unmanaged secured workgroup without installing the software on the other member.

Returning to in an illustrative embodiment of the invention a computer capable of participating in an unmanaged secured workgroup is provided with a secured group service module for handling the creation joining and operations of unmanaged secured workgroups. The computer also has a local security authority LSA and a security account manager SAM . The local security authority is a user mode process that is responsible for the local system security policies user authentication and sending security messages to an event log of the operating system. The security policies specify for example which users are allowed to log onto the machine password policies privileges granted to users and groups and system security auditing settings etc. The security account manager manages a database stored in the system registry of the computer that contains data identifying users and groups allowed to access the machine along with their passwords and other attributes. The computer further includes one or more authentication modules such as the Windows NT LAN Manager NTLM module or Kerberos module for performing authentication operations according to a selected authentication protocol. Furthermore a File Replication Server FRS is used for replicating data and files including user accounts and profiles to other computers in the unmanaged secured workgroup.

In the embodiment shown in an application interfaces with secured group service module for handling the creation joining and operations of unmanaged secured workgroups through API layer module . As will be discussed API layer module supports an application program interface API for obtaining information about unmanaged secured workgroups creating an unmanaged secured workgroup joining an unmanaged secured workgroup and leaving an unmanaged secured workgroup.

Referring now to both in an illustrative embodiment of the invention when a standalone computer is connected to the local network and turned on step its operating system automatically discovers whether there are unmanaged secured workgroups existing on the local network step . To that end the computer broadcasts a discovery request according to the Simple Service Discovery Protocol SSDP to detect the other machines connected to the local network. In this regard the secured group service module on a computer that belongs to a secured workgroup has already registered the friendly name and GUID of the secured workgroup with a SSDP service of the computer. In response to the SSDP request each computer on the local network returns a response. The response identifies the responding computer and whether it is part of an unmanaged secured workgroup and if so information regarding that group. For instance the response from the computer includes a group name indicating that it is a member of the unmanaged secured workgroup called TobyClub. 

In an embodiment of the invention if the computer detects one or more existing unmanaged secured workgroups on the local network step when its user Patrick in logs in a user interface window pops up asking whether the user wants the computer to join any of the existing unmanaged secured workgroup step . An example of the user interface window is shown in . The user interface window provides a list of existing unmanaged secured workgroups on the local network the computer has detected and the user can select one to join by clicking on the name of the group. If no existing unmanaged secured workgroups on the local network have been detected the list will be empty. The user interface also includes a query to give the user the option of creating a new unmanaged secured workgroup. Thus in the absence of an existing unmanaged secured workgroup the user can select to create a new one step . Even if there are unmanaged secured workgroups existing on the local network the user can still choose to create a new one instead of joining any existing group. For example if the computer detects that the computer on the local network is not a member of any secured workgroup i.e. the computer is a standalone machine the user may decide to create a new secured workgroup a secured workgroup of one step and invite the computer to join the group step .

If the user Patrick selects the option of creating a new unmanaged secured workgroup step the secured group service module creates a new GUID for the new group and changes the computer s account domain GUID to the new GUID of the group. The secured group service module then creates a Secured Group Nodes group which is a local security group that contains computer accounts representing the computers in that unmanaged secured workgroup. Secured Group Nodes is an example of a group name. The embodiment supports other group names as well. Only computers listed in the Secured Group Nodes group can perform replication with other computers in the group. Accounts may be created with strong random passwords.

The secured group service also creates a Secured Group Administrators group for holding credentials of the administrator s of the new unmanaged secured workgroup. Only an administrator identified in the Secured Group Administrators group is allowed to add or remove nodes in the secured group. A Secured Group Admin account is created and the user is prompted to enter a good non blank password. Secured Group Administrators is an example of a group name. As will be discussed embodiments of the invention support a personal identification number PIN which may be used as an alternative to or in addition to a password. The embodiment supports other group names as well. After the user enters a password the Secured Group Admin account is added to the Secured Group Administrators group.

If on the other hand the user chooses to join an existing unmanaged secured workgroup detected by the computer step one of the nodes in that group that have responded to the SSDP request is chosen and a connection is established to the remote procedure call RPC interface of the secured group service of that selected node. In the example illustrated in the computer has chosen to talk to the computer . The computer then issues a request for the computer to authenticate itself. By properly authenticating itself the computer establishes trust with the computer step . In doing so the computer also establishes trust with the remaining nodes of that group since they trust the computer and are supposed to trust any computer trusted by the computer . In an alternative embodiment however a computer that wants to join an unmanaged secured workgroup may be required to establish trust individually with each of the computers in the group.

As described above a common way to establish trust is for the computer to present a secret known to the other computer. In an embodiment of the invention self signed certificates for mutual authentication among peers are utilized. A target node s certificate may be passed back to the authenticated joining computer. In an illustrative embodiment of the invention the secret is the name and password of a group administrator that is registered in the Secured Group Administrators group of the target node computer . In response to the challenge from the target node computer the computer prompts the user to enter a valid administrator name and password. In one illustrative implementation the administrator illustrated in as Toby may simply walk over to the computer that wants to join the unmanaged secured workgroup and enter his user name and password. The computer transmits the entered administrator name and password to the target node computer . The target node computer checks the administrator name and password returned by the computer . If they are valid and correspond to an administrator account found in the Secured Group Administrators group computer becomes a member of the unmanaged secured workgroup . The target node computer creates a computer account for the joining computer and passes back the target node computer s secret to the joining computer . The joining computer then saves the target node computer s secret. At this point the joining computer will initiate a sync operation with the target node computer . After completion of the sync operation full trust is established.

Thereafter user accounts and user profiles are replicated upon change among the members of the unmanaged secured workgroup step . In one illustrative implementation a computer that is a member of an unmanaged secured workgroup periodically e.g. every 4 minutes sends a Hello message to all other nodes in the group. The Hello message contains the group GUID the node s current system time and the last update count of the replication. The other group members are not required to respond but will update their table of group members accordingly and record the last time that a Hello was received from that member. When a SAM change is received from the LSA the secured group service on the computer sends a Notify message to all nodes in the secured workgroup. When a group node receives the Notify message it compares the UpdateCount in the message to its current UpdateCount. If the received UpdateCount is newer than the current UpdateCount the recipient calls back to the sender for a specific list of changes and applies those changes locally.

In an alternative illustrative embodiment instead of using the administrator name and password as a secret the target node computer generates a random personal identification number PIN as the secret. The user Toby of the target node computer gives the secret PIN to the user Patrick of the computer that wants to join the group. The user then enters the PIN into the computer in response to the prompt and the PIN is delivered to the target node via the network connection in order to establish trust.

It will be appreciated that communications during the phase of establishing trust and the subsequent communications among the group members for duplicating user accounts user profiles and other data in connection with the operations of the group should be properly protected by digital signatures and encryption to protect the integrity and confidentiality of the data. In an embodiment of the invention a public private key based authentication mechanism PK SChannel authentication is used. The public key is placed in a self signed certificate that is later used to verify the identity of the holder of the private key. To that end the communications may follow a suitable authentication protocol such as the NTLM or Kerberos. In one illustrative implementation the nodes of the unmanaged secured workgroup replicate using DCE RPC employing the NTLM authentication mechanism. The channel is protected with call level authentication and privacy and access control is based on server based checks for the caller being a member of the unmanaged secured workgroup. The use of authentication measures prevents other computers on the local network from eavesdropping and tampering with the communications between the nodes in the unmanaged secured workgroup.

After joining an unmanaged secured workgroup a computer can voluntarily leave the group. To do so the user logs onto the machine to be removed from the unmanaged secured workgroup and through an appropriate user interface window chooses to leave the group. In one illustrative implementation when a computer leaves the unmanaged secured workgroup the computer is removed from the Secured Group Nodes group and its corresponding computer account is deleted. This action breaks the trust used to replicate the accounts. With the computer leaving the group the Secured Group Administrators and Secured Group Nodes groups are deleted along with all computer accounts. The computer GUID however is left the same as it had while joined to the group. After being removed from the group the computer becomes a standalone computer on the local network so that workgroup becomes an unmanaged secured workgroup of one. However computers may subsequently join workgroup after becoming an unmanaged secured workgroup of one. It is no longer trusted and will not receive any further updates of user accounts and profiles.

In some special situations a computer may be evicted from an unmanaged secured workgroup. For instance if a computer in the group has been stolen it may be necessary to evict that computer from the group so that someone cannot later use it to access the data and resources of the group. The evicted computer is removed from the Secured Group Nodes group and its account in the group is deleted. This prevents replication of account information to the evicted computer in the future. Nevertheless other measures may be used to completely cut the evicted computer off from the group. Since the evicted computer has a full copy of the account database including passwords the evicted computer may try to authenticate itself as any other user or computer and still gain access to the secured workgroup. As such measures should be taken so that the residual secrets can be changed without the evicted computer being able to eavesdrop on the communications and see the passwords. As part of the eviction process the computer s secrets may have to be changed off line before any user secrets are changed. The changing of the computer s secret may be done out of band on a private channel such as by using a floppy disk to carry the secret. In one implementation after evicting a computer the administrator of the unmanaged secured workgroup has to recreate the group without the computer being evicted. As part of the recovery process one computer the recovery computer remaining in the group is isolated i.e. removed from the network and used to stage the group recovery. A new random LSA secret is generated for each computer remaining in the group and stored as the new computer password for the computer in the recovery computer s local account database. The new secrets however cannot be transmitted over the network to the other computers due to the risk that the machine to be evicted may receive the updates. To deal with this problem the administrator creates an eviction floppy disk or any other portable medium such as CD ROM for each remaining computer in the secured workgroup that contains the new LSA secret for that computer. The administrator logs on to each computer he wants to keep in the unmanaged secured workgroup with his administrator account and runs the eviction disk on the computer to change the password of that computer. Once the eviction disk is run on the machines remaining in the group all users are required to change their passwords when they log onto computers in the group because the evicted computer has all of the users existing passwords or at least the derived keys .

One advantage of the unmanaged secured workgroup according to at least some aspects of the invention is to make machine to machine communications secure. According to one aspect of the invention self signed certificates may be used between a member machine and a machine that requests to join an unmanaged secured workgroup. Also the creation of an eviction floppy disk as discussed above may be distributed in which all machine accounts are reset to new random passwords at essentially the same time. With the resetting of passwords the member machines will lose the ability to communicate however machines will gain the ability to communicate as the eviction floppy disk makes its rounds. Machines e.g. the evicted machine which never obtains the eviction floppy disk only possesses old passwords and are unable to communicate with the unmanaged secured workgroup. Another advantage of the unmanaged secured workgroup according to at least some aspects of the invention is to prevent unauthorized access via user accounts. According to one aspect of the invention all user accounts are changed. According to another aspect of the invention passwords may be set to expire on the next login.

One advantage of the unmanaged secured workgroup according to at least some aspects of the invention is that each user has an identity known to all computers in the group. As a result a user can log onto any of the computers in the secured workgroup with the same user name and password. For instance in a small business setting an employee can log into any of the computers on the local office network that form a secured workgroup with the same user name and password without the need to set up a user account separately on each of the computers. Also when the user changes his password on one of the computers in the group the change will be replicated to the other computers. Thus an unmanaged secured workgroup may significantly simplify the creation and modification of user accounts and make the computers in the group much more accessible to authorized users.

The improved network integration of the computers in an unmanaged secured workgroup also allows user to enjoy the benefits of computer networking. After logging into any of the computers in the group a user can access all of the user s documents using the user s own settings regardless of where the documents and settings are actually stored. This is again made possible because all the documents of the user are associated with a single user identity that is recognized by all the computers. Thus a query can be made to identify all the documents and setting of the given user. This enables a user to have a unified view of all her documents and settings over the entire secured workgroup.

As described above the user profiles replicated among the computers in a secured workgroup may include documents of the users. In one illustrative embodiment a pre selected set of documents of a given user e.g. those in the user s MyDocuments folder are replicated to each computer in the secured workgroup automatically. When the user has modified one of the documents the document revision is detected and the modified document is replicated to the other computers in the group by the file replication service FRS . In an illustrative embodiment of the invention to reduce the amount of memory used by the computers for storing replicated documents files that exceed a threshold size are not replicated. Instead if a file exceeds a threshold size only a link to the file on the computer that stores the file is replicated to the other computers.

The unmanaged secured workgroup also enables secured sharing of files between users of the group. A user that wants to share the user s document with a second user can modify the properties of the document to indicate that the second user is allowed to access the document. When the second user uses an application to access the document the document properties are checked to confirm that the second user has been given access to the document. In one illustrative implementation a user of a secured workgroup in a small business network can share a document only with one other user. In an alternative illustrative embodiment a user of an unmanaged secured workgroup can share the user s files with all users of the group. This implementation may be applicable in a home network setting.

The unmanaged secured workgroup may allow computers that have not joined the group to have limited access to the group. For instance a user may bring his laptop from work and connect it to his home network but select not to join the secured workgroup on the home network. In such as case the non member computer may be given a guest status and be allowed to access a pre selected set of resources. Similarly a legacy computer i.e. one without the software for operations relating to an unmanaged secured workgroup may still communicate with the computers in the unmanaged secured workgroup in the same way as it would in a conventional workgroup.

Once computers machines become part of an unmanaged secured workgroup the user accounts and user groups are replicated and synchronized between member computers as changes occur for any member of the unmanaged secured workgroup. A change may correspond to user account information being modified or user account information being added. Computers participating in an unmanaged secured workgroup are peers with no designated master computer. Computers in an unmanaged secured workgroup may advertise changes over the network. This operation allows member computers to initiate replication and thus stay in synchronization with each other.

Computers participating in replication maintain the state of the data that the computers would replicate. The computers keep track of the following 

Replication may be a pull oriented replication in which each computer advertises its computer version number when it changes. When a member of an unmanaged secured workgroup detects that another member has advertised a new version number the member checks that version number with the version number that it has in its record for that computer. If the member determines that newer data has been published by another computer then it initiates a replication.

In an illustrative embodiment all user accounts are replicated. All account groups are replicated thus a user who is an administrator on one computer will be replicated as an administrator on the other computers. The following data is replicated 

While updated account information may be obtained in accordance with flow diagram embodiments of the invention support other account updating processes. With an embodiment of the invention a first member computer broadcasts an advertisement with an updated version number to indicate that a change in accounting information has occurred. A second member of the unmanaged secured workgroup in response to the advertisement from the member computer sends account version information to the first member computer. Consequently the first member computer returns a list of newer user accounts to the second member computer.

When a new computer joins an unmanaged secured workgroup it has no account data related to the unmanaged secured workgroup. At that time it updates itself with unmanaged secured workgroup data. Whenever any user account or group is changed on any participating members of an unmanaged secured workgroup the change may be advertised via Function Discovery or another publishing mechanism e.g. SSDP . The advertisement triggers a replication sequence between members of an unmanaged secured workgroup. Computers in the unmanaged secured workgroup advertise their changes to other computers by publishing their Computer Version Number via Function Discovery.

When a member leaves the unmanaged secured workgroup the user may decide to delete certain accounts from that computer. This change as well as the updated membership of the unmanaged secured workgroup can be replicated to remaining members. When a member is evicted the secrets of the unmanaged secured workgroup are changed. The change in secrets is propagated to other members in the unmanaged secured workgroup.

When a machine first joins an unmanaged secured workgroup the initial trust between the machines is established by the logon of an administrator with a password. Once trust has been established the machines may exchange self signed certificates and authentication is performed by certificate based mutual authentication. As previously discussed other authentication mechanisms may be used. Once a computer has authenticated with another computer the computer can then replicate the account information.

With an illustrative embodiment of the invention the security account manager SAM database is extended by storing new properties in an auxiliary property file. The security account manager database contains defined users and groups along with corresponding passwords and other attributes. The auxiliary property file corresponding to data that is locally stored is replicated when accounts are replicated. Moreover the auxiliary property file can be expanded to include additional properties e.g. user tile password hint account GUID and account certificate.

An unmanaged secured workgroup includes multiple machines which are peers to each other. This means that changes to the same object can be made on any of the participating machines by a person with appropriate rights. Changes may be made both when the member machines are on line as well as when the machines are off line . The changes made to machines when they are off line may result in changes that conflict with user accounts or account groups as described in greater detail below. The unmanaged secured workgroup feature may utilize a mechanism to detect conflicts. Subsequently the conflicts may be automatically resolved or resolved with the assistance of an authorized user.

A change to an account is defined as a change to any property of that account. The conflict resolution and detection may be performed at the whole account level. Additionally conflict resolution and detection may be performed at the per property level. As an example if one changes the tile on one machine on an account and changes the password of the same account on another machine both accounts will be considered changed and thus will require conflict resolution even though at the property level the changes are non overlapping.

Synchronization between two member machines is influenced by the time duration that the machines have been out of synchronization. If the machines have been apart for a long duration then the differences between the machines are considered to be conflicts. In an illustrative embodiment the differences are resolved by manual intervention using a management user interface UI . An illustrative long duration would be when the last updated timestamp difference between the machines is at least 30 days and an illustrative short duration is a disconnect between two member machines when the last updated timestamp between the machines is less than 30 days. The illustrative 30 day threshold is set so that most normal off line scenarios e.g. a machine being shut down on a daily basis can be handled automatically for conflict resolution. Since the user accounts and groups may not change very frequently the above criterion is also used to determine how synchronization happens when a computer is restored from backup.

Long duration synchronization happens when Machines have been apart for a significant time period such as a long duration as defined above with the occurrence of a change between the machines. A synchronization blocking error is posted into the Sync Handler of the older machine. The users on the older machine whose accounts are not in conflict with the rest of the unmanaged secured workgroup are able to use the machine normally. In an illustrative embodiment of the invention a synchronization blocking error allows the administrator on that machine to resolve the synchronization by offering the following choices 

Short duration synchronization occurs when machines have been apart for a short duration from the last occurrence of changes between the machines. Handling of short duration synchronization depends on the nature of the changes to be synchronized. An illustrative embodiment of the invention supports the following changes with the associated resolutions.

With an embodiment of the invention all conflicts are treated uniformly. There is no differentiation between long duration and short duration conflicts. All conflicts are treated as short duration conflicts.

With an embodiment of the invention a conflict is generated if a new account does not match any local account by GUID and has a same name as a local account.

Conflicts in accounts of an unmanaged secured workgroup are presented via integration with a conflict management user interface. An individual user if on the current machine is notified about the conflict when the user s account is in conflict. An administrator on any member machine is notified of all the account conflicts within the unmanaged secured workgroup as viewed from the machine on which the administrator is logged in. In other words if different machines in the unmanaged secured workgroup have different accounts in conflict on different machines the view is different on each machine.

A resolution of a conflict is considered to have converged if the resulting choice of the account change is replicated to all the member machines. As account conflicts are resolved on an individual machine corresponding changes are replicated on other machines. Depending on the nature of the conflict resolved some existing conflicts on other machines may be resolved as conflicts on the current machine are resolved.

The unmanaged secured workgroup depends on the ability of multiple machines to communicate over a network and to be able to change their state in response to changes to member machines. The network and the participating machines may fail in a number of ways. Therefore there is a need to have the unmanaged secured workgroup function in such a way that a member machine and the unmanaged secured workgroup as a whole can predictably handle errors failures and do the cleanup and recover from such errors and failures. The unmanaged secured workgroup may handle errors and failures in general by employing a marker flag before starting an atomic transaction. If the transaction fails for any reason the flag is noted and cleanup is performed when the service is started the next time. The replication action is designed to automatically resume when machines become available and thus failures during replication are handled automatically. If the feature installation on a machine is damaged in any way the service stops on that machine and the machine no longer participates in an unmanaged secured workgroup.

The unmanaged secured workgroup in accordance with aspects of the invention supports numerous user scenarios. By way of example one user scenario involves roaming parental control in a home network. A parent can create parental control restrictions that limit how a child can use the computers. The parental control restrictions are replicated to all the computers in the group. Thus when the child logs onto any of the computers in the group the parental control restrictions follow the child regardless of which computer the child is using. In addition the audit report of the child is updated with all of the child s activities on each computer in the group. In accordance with illustrative embodiments of the invention user scenarios support among other features roaming sharing data objects and backing up data objects for a user in an unmanaged secured workgroup. The user scenarios are built upon the trust and user data replication within the unmanaged secured workgroup.

An illustrative embodiment of the invention provides a set of interfaces application programming interface API that can be used by applications or other services to query properties and the members of the unmanaged secured workgroup and to initiate actions within the unmanaged secured workgroup.

The IWorkgroupInformation interface provides information about a given unmanaged secured workgroup including attributes of the unmanaged secured workgroup as a whole and a list of member computers.

The IWorkgroupComputerInformation provides information about a computer within an unmanaged secured work group.

The IWorkgroupNetControl interface is acquired via QueryInterface QI from an IWorkgroupNetInformation.

An application programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 time 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA Interface B Interface C etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1code segment need not match the number of interfaces included with the 2code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of Figure A includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1Code Segment to the 2Code Segment If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1and 2Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2Code Segment is changed such that it is no longer compatible with the interface used by the 1Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1Code Segment to the 2Code Segment i.e. to conform them to a different interface as may be required by the 2Code Segment either the original or a different 2Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

As can be appreciated by one skilled in the art a computer system with an associated computer readable medium containing instructions for controlling the computer system can be utilized to implement the exemplary embodiments that are disclosed herein. The computer system may include at least one computer such as a microprocessor digital signal processor and associated peripheral electronic circuitry.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

