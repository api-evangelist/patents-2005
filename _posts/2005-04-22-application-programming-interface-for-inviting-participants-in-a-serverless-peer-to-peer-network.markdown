---

title: Application programming interface for inviting participants in a serverless peer to peer network
abstract: Methods and computer readable mediums are described that facilitate inviting user entities on a network. The method may include initiating a first application for sending an invitation by a first user entity on a first endpoint, selecting a second user entity to receive the invitation, and selecting an activity. The method may also include sending from the first endpoint to the second user entity the invitation to participate in the activity if the first endpoint determines the activity is supported by a computing application on the first endpoint.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08036140&OS=08036140&RS=08036140
owner: Microsoft Corporation
number: 08036140
owner_city: Redmond
owner_country: US
publication_date: 20050422
---
The subject matter of the present application is generally related to the following commonly owned applications filed on the same day as the present application 

U.S. patent application Ser. No. 11 112 134 U.S. Patent Publication No. 2006 0242235 A1 entitled PRESENCE MONITORING IN A SERVERLESS PEER TO PEER SYSTEM 

U.S. patent application Ser. No. 11 112 135 U.S. Patent Publication No. 2006 0239279 A1 entitled CONTACT MANAGEMENT IN A SERVERLESS PEER TO PEER SYSTEM and

U.S. patent application Ser. No. 11 112 133 U.S. Patent Publication No. 2006 0239234 A1 entitled AN APPLICATION PROGRAMMING INTERFACE FOR DISCOVERING ENDPOINTS IN A SERVERLESS PEER TO PEER NETWORK .

Server based communication services such as the Messenger service provided by MSN communication services permit users to sign into a server based network and then use the services of the network e.g. e mail text messaging etc. . A server may store a contact list for the user and the user can add and delete persons from the contact list. When the user signs in a server or servers may notify persons in the user s contact list that the user is online. Similarly the server or servers may notify the user of persons in the user s contact list that are online. 

The MICROSOFT Corporation also provides Peer to Peer Networking software for use with its WINDOWS operating systems. With this system users can create a network of peer computers and can communicate with one another without having to sign into a central server. For example users can create a peer to peer group and then create a chat room in which all members of the group can post messages and see messages posted by others in the group. The system may also allow peers to invite others to participate in collaborative activities. The chat room is maintained using the peer computers and without the need for a central server.

Methods and computer readable mediums are described that facilitate inviting user entities on a network. The method may include initiating a first application for sending an invitation by a first user entity on a first endpoint selecting a second user entity to receive the invitation and selecting an activity. The method may also include sending from the first endpoint to the second user entity the invitation to participate in the activity if the first endpoint determines the activity is supported by a computing application on the first endpoint.

Additionally the method may include that the first application for sending the invitation is the computing application that the first application for sending the invitation is a messenger application and initiating a name resolution mechanism to locate a second endpoint for the second user entity. The method may further include querying a presence store to locate a second endpoint for the second user entity sending the invitation synchronously or asynchronously canceling an asynchronous invitation at the first endpoint and sending the invitation in a secure or unsecure manner.

Furthermore methods are described that facilitate receiving invitations on a network. The method may include initiating at a receiving endpoint a first application for receiving an invitation from a sending endpoint to participate in an activity receiving the invitation at the receiving endpoint and launching a computing application on the receiving endpoint to execute the activity if the receiving endpoint determines the activity is capable of being executed by the computing application at the receiving endpoint.

Additionally the method may include the first application for receiving the invitation is the computing application the first application for receiving the invitation is a messenger application and the receiving endpoint receives the invitation by at least one of a generic invitation listener application a messenger application or the computing application at the receiving endpoint. The method may further include registering activity capabilities of the computing application at the receiving endpoint with a presence store receiving the invitation synchronously or asynchronously receiving the invitation in a secure or unsecure manner and retrieving by the sending endpoint status information of the invitation sent to the receiving endpoint.

Although the following text sets forth a detailed description of numerous different embodiments it should be understood that the legal scope of the description is defined by the words of the claims set forth at the end of this patent. The detailed description is to be construed as exemplary only and does not describe every possible embodiment since describing every possible embodiment would be impractical if not impossible. Numerous alternative embodiments could be implemented using either current technology or technology developed after the filing date of this patent which would still fall within the scope of the claims.

It should also be understood that unless a term is expressly defined in this patent using the sentence As used herein the term is hereby defined to mean . . . or a similar sentence there is no intent to limit the meaning of that term either expressly or by implication beyond its plain or ordinary meaning and such term should not be interpreted to be limited in scope based on any statement made in any section of this patent other than the language of the claims . To the extent that any term recited in the claims at the end of this patent is referred to in this patent in a manner consistent with a single meaning that is done for sake of clarity only so as to not confuse the reader and it is not intended that such claim term by limited by implication or otherwise to that single meaning. Finally unless a claim element is defined by reciting the word means and a function without the recital of any structure it is not intended that the scope of any claim element be interpreted based on the application of 35 U.S.C. 112 sixth paragraph.

The steps of the claimed method and apparatus are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the methods or apparatus of the claims include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The steps of the claimed method and apparatus may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The methods and apparatus may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the steps of the claimed method and apparatus includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

The system may include a presence system that monitors the presence of other entities on the communication network. An entity may be for example a particular person a device e.g. a printer a copier a computer a scanner etc. a position in an organization e.g. manager customer service representative etc. an organization etc. Presence on a network may generally refer to a current status of an entity with regard to their willingness or ability to communicate via the network but may also refer to additional or alternative information regarding the entity such as a current activity of the entity. Presence on a network may be represented by presence information. Examples of presence information may include but are not limited to one or more of an indication that an entity is online an indication that an entity is out to lunch an indication that an entity is away an indication that an entity will be right back an indication that an entity is idle an indication that an entity is busy an indication that an entity is on the phone an indication that an entity is watching a movie an indication that an entity is playing Halo an indication that an entity is helping another customer an indication of a device status e.g. a printer with status busy idle etc . Presence information may include one or more enumerated strings and or rich presence e.g. custom strings generated by a user entity . For example a user entity could define a custom presence state as I am out of the office. Will return tomorrow. Presence information obtained by the presence system may be stored in a presence store .

The presence system may facilitate a user entity to monitor or subscribe to presence information of other entities. This may include the presence system polling other computing systems periodically for example. Additionally or alternatively other computing systems corresponding to other user entities may transmit event indications to the system that notify the presence system of events such as a change in presence state. For example an event may occur when a user s presence changes from offline to online and the presence system may detect this event. The presence system could then notify other applications or software modules e.g. such as the application that the event occurred.

The presence system may also monitor capabilities of other entities published on the network . Capabilities of an entity may include for example static capabilities such as whether a computing system of the entity is configured to execute a particular software application whether a computing system of the entity has a particular hardware device etc. Capabilities of an entity may also include for example dynamic capabilities such as real time capabilities of an entity with respect to a game software application currently being executed on the entity s computing system etc. An entity publishing capabilities on the network may refer to permitting other entities to be able to monitor the capabilities via the network . Capability information obtained by the presence system may be stored in a capability store .

The presence system may also monitor objects of other entities published on the network . Objects of an entity may include for example data objects such as files structures pictures sounds a description such as meta data a name value pair etc. An entity publishing objects on the network may refer to permitting other entities to be able to monitor the objects via the network . As just one example publishing an object may permit an entity to provide other entities with information specific to an application being executed by a computing system of the entity and or real time information. With respect to a game application for instance a published object could include information regarding a player s current score a weapon currently in possession of the player etc. Objects information obtained by the presence system may be stored in an objects store .

The presence system may also provide or publish presence information associated with a user entity i.e. the entity associated with the system to other entities on the network . The presence information associated with the user entity may be stored in the presence store or some other storage. Similarly the presence system may also provide or publish information regarding capabilities of the user entity to other entities on the network . The capability information associated with the user entity may be stored in a capability store . Further the presence system may also provide or publish information regarding objects of the user entity to other entities on the network. The object information associated with the user entity may be stored in an object store or some other storage. Similarly the presence system may facilitate an ability for the user entity to monitor or subscribe to presence information. As such when presence information is monitored by the user entity subsequent changes may elicit events for which the user entity is notified. For example if the monitored presence information changes from away to playing Halo an event may trigger thereby notifying the user entity of a change.

The presence system may interface with a contact store that stores information regarding other entities. The contact store may store information for an entity such as one or more of a secure identifier a human readable alias an indicator of whether presence information for this entity is to be monitored and an indicator of whether to allow this entity to obtain presence information regarding the user entity. An entity as represented in the contact store may be referred to as a contact.

Each user entity may have one or more communication endpoints with which it is associated. Generally different communication endpoints associated with a user entity may include different communication termination points associated with the entity such as different computing systems. As an example endpoints for a particular entity may include a desktop computer at work a desktop computer at home a personal digital assistant PDA etc. Optionally different communication endpoints associated with a user entity may also include different software applications being executed by a single computing system. Endpoint information may include a peer name a machine name or a device type to name a few.

The presence system may also interface with a communication system which is coupled to the communication network . The communication system may establish connections between the system and other peer computing systems associated with other entities. Establishing a connection may include for example one or more of determining an endpoint associated with an entity resolving an address of the endpoint authenticating communications encrypting and decrypting communications etc. In one implementation the communication system may include a Peer Name Resolution Protocol PNRP or similar. The PNRP may resolve a name e.g. a peer name for a contact to derive its IP address without reliance upon a Domain Name System DNS commonly used by server computers. In another implementation the communication system may interface with an authentication system that is itself coupled to the contact store . In attempting to establish a connection with another computing system the communication system may receive from the other computing system an indication of an identifier associated with an entity. The authentication system may then check whether information about the entity with the security identifier presented is stored in the contact store . If the identifier is not found in the contact store the connection may be refused.

A connection may be secured. Establishing a connection and communicating over a connection may include for example one or more of utilizing a secure channel utilizing secure socket layer SSL techniques utilizing transport layer security TLS techniques utilizing public private key pairs utilizing authentication techniques e.g. X.509 certificates encrypted signatures utilizing a pretty good privacy PGP program etc. utilizing a peer name resolution protocol PNRP transmission control protocol TCP internet protocol IP internet protocol version six IPv6 etc. Resolving an address of an endpoint may include for example resolving a PNRP identifier to an IP address and a port.

A software application or some other software module may communicate with the presence system to obtain presence information capabilities information and or objects information associated with other user entities on the communication network . For example the presence system may provide a set of application programming interfaces APIs that permit software applications to request and receive information regarding presence capabilities and or objects associated with other user entities. The presence system may retrieve the requested information from the presence store capabilities store and or the objects store . Additionally or alternatively the presence system could obtain requested information from the other user entities via the communication system and the communication network . Generally speaking availability may refer to presence information capabilities and objects. A user entity has the ability to publish all some or none of this information.

An Invitation API may permit an application used by a user entity to invite other contacts or user entities of a serverless network to participate in a collaborative activity. The Invitation API may employ the use of the Presence System to determine contacts from the contact store . Additionally the Presence System may retrieve capability information located in the capability store . If a particular contact in the contact store has no associated capability information the Invitation API or alternatively the Application may employ a Capabilities API to determine the capabilities of another user entity s endpoint. A capability may be a collaborative activity including any activity which is supported by an application on multiple endpoints. For example a contact may support the activity of Halo game play because the contact s endpoint has the Halo gaming application installed. The Invitation API may allow the contact owner to determine other contacts on a serverless network that may support the activity of Halo game play.

When the Invitation API locates a contact that supports the activity an invitation may be sent by the user entity invitor to that contact invitee thereby allowing the invitee to respond to the invitation. A response may include standard invitee options of accept reject or ignore. Other response options may include standard or custom text such as busy now please invite me later or please try again after 9 pm. However if the invitee is not present at the endpoint or simply chooses not to acknowledge the invitation with accept reject or ignore then the invitation may time out. Upon expiration of a time out period the invitation may disappear from view at the invitee s endpoint thereby minimizing clutter on the invitee s desktop. Optionally an invitee may configure alert settings so that for example invitation dialog boxes do not interrupt an invitee while giving a presentation. As such any incoming invitations may automatically receive an indication that the invitee is unavailable. The invitee may further customize such indications for example Presentation ongoing please try after 4 pm. 

Alternatively if the user entity s endpoint supports the activity the method may determine if the messenger or some other application sends the invitation at block . The method may include a default setting in which the messenger always performs the invitation or the particular application supporting the activity performs the invitation. The method may also prompt the user entity to choose one of the aforementioned options. If the messenger performs the invitation then via the Invite API s the method may launch the corresponding application which supports the activity at block . On the other hand the application supporting the activity may perform the invitation by calling the Invite API which may also set environment variables to the application and launch such application at block . The Invite API may also permit the invitation to hold application specific data and or pass parameters to the application. Such data and parameters may be useful for handshaking of remote applications. Environment variables may include a list of invitees or other information pertaining to the activity the application supporting the activity and the contacts invited to participate in the activity. Once those variables are set at block they may be read by the application at block . The application may then use a function call from the Invitation API at block to send the invitation. If however a contact has multiple points of presence the Invitation API may send the invitation to all endpoints for which the invitee is associated.

Notice that in the alternative if the computing application is to perform the invitation in lieu of the messenger control passes from the computing application to block where the user entity may select a contact with which to perform a collaborative activity.

An invitation function call from the Invitation API may require sending parameters derived from the calling application whether the calling application is the messenger or the application supporting the activity. For example the sending parameters may include the receiving name or names the receiving contact endpoint e.g. an IP address and port activity information and a function call handle to name a few. The Communication System may determine whether a particular endpoint for a contact name is known at block . If unknown block may use the Communication System to determine a corresponding IP address and port for the contact and then establish a connection with that endpoint at block . The Communication System may employ PNRP or similar to resolve such endpoint credentials without a server. The activity information may also include a globally unique identifier GUID to identify an appropriate application to the invitee recipient that may support the desired activity. The activity information may also include an invitation message e.g. Let s talk about the TPS report now. and other information to support various requirements of any particular activity. The handle may allow the function call to receive event information after the invitation is sent to an invitee. Such a handle is particularly useful for asynchronous function calls however the function calls employed by the Invitation API may also be synchronous in which case a response is promptly received or the function call times out. Additionally another handle may identify the invitation instance so that a cancellation function call may correctly identify a specific invitation to cancel. Generally speaking upon the user making the function call to send an invitation an invitation session is created having a corresponding GUID. This GUID may be used to identify responses received as a result of this particular invitation. The Invitation API may serialize the invitation in XML or other format before sending to the invitee via the Communication System .

However if the activity is supported by the listener endpoint then the invitee may acknowledge the invitation perhaps via a dialog box by accepting rejecting or ignoring . Again a decline message may be sent at block in which the message may further describe potential reasons for the decline e.g. activity is not supported at this endpoint user did not allow the activity etc. . The response may also be sent automatically by the invitee through a default setting e.g. always reject invitations from Bob to play Halo . For example the invitee may accept all invitations by default reject all invitations by default or ignore all invitations by default. Additionally the invitee may have a default setting of accept reject or ignore based on the specific identity of the inviter. For example the invitee may choose to accept all invitations by default if the inviter is a buddy reject all invitations by default if the inviter is unknown not in the invitee s contact store or ignore an invitation by default if the inviter is an in law. Similar to block in environment variables are set and the application supporting the activity is launched at block . The application reads the environment variables at block sends back acceptance notification and starts its collaborative activity at block . Additionally or alternatively the Capabilities API may be called at block to obtain relevant information discussed in further detail below.

If the invitee s endpoint is running the messenger application then the messenger application may already have appropriate environment variables. As such blocks through accomplish receipt of the invitation and initiation of the collaborative activity. Similarly blocks through may execute if the invitee already happens to have the application running that supports the collaborative activity. In such a case the method does not need to query the invitee s endpoint for the application supporting the collaborative activity because it is already running but the invitee may still choose to accept reject or ignore at block .

Returning briefly to block of and blocks and of the Capabilities API determines whether the endpoint supports a requested activity. Before the Invitation API may launch an activity or a specific application that supports the activity the capabilities supported at that endpoint must be known. As such the Capabilities API may include functions for registration unregistration enumeration of capabilities and retrieval of information regarding the capabilities. A peer registration function may allow a user entity to add an entry to an operating system registry containing information relating to the capabilities supported by a particular application. Additionally this information may include a GUID to identify the application application configuration and a description of the capability. The peer registration function may further allow the user entity to specify which other user entities or contacts may access the registered application. Alternatively the user entity may unregister capabilities with an unregister function which removes the capability information from the registry.

A user entity may call via the application a capability query function to learn about application capabilities when the GUID is known. However the user entity may first call a capability enumeration function to obtain a list of all capabilities currently registered at an endpoint including the endpoint of the user entity. The user entity may then select one capability from the enumerated list and call the capability query function for more specific capability information supported by that particular application.

The following exemplary scenario illustrates Invitation API functionality. A user entity named Toby has friends named Bob and Alice in his contacts list. Bob and Alice have each allowed publication of their presence information and Toby notices that Bob is online and has the game Halo installed. Toby selects Bob from his contact list and sends an invitation to Bob containing a request to play Halo . The Invitation API determines that no endpoint connection is currently available and consequently employs the Communication Module which may use PNRP to resolve an endpoint from Bob s contact information in Toby s contact store. When such endpoint is determined the Communication Module may optionally authenticate a connection via the Authentication System between Bob and Toby and then send the invitation. Assuming Bob has his Messenger application running it receives the invitation and the Capabilities API is called to verify that Halo is supported on Bob s computer. If it is supported the Invitation API presents Toby with an option via a pop up user interface to accept reject or ignore the invitation. Bob accepts the Halo application is launched and an accept message is returned to the invitor Toby .

Although the forgoing text sets forth a detailed description of numerous different embodiments it should be understood that the scope of the patent is defined by the words of the claims set forth at the end of this patent. The detailed description is to be construed as exemplary only and does not describe every possible embodiment because describing every possible embodiment would be impractical if not impossible. Numerous alternative embodiments could be implemented using either current technology or technology developed after the filing date of this patent which would still fall within the scope of the claims.

Thus many modifications and variations may be made in the techniques and structures described and illustrated herein without departing from the spirit and scope of the present claims. Accordingly it should be understood that the methods and apparatus described herein are illustrative only and are not limiting upon the scope of the claims.

