---

title: System and method for event driven publish-subscribe communications
abstract: The present invention provides a system and a method for delivering an event from an event publisher to an event subscriber via an event broker. The event broker is a web server infrastructure which performs several functions such as receiving the published event on a server, authenticating the publisher with the published event, validating the event with XML schema definition, processing the event based on a set of predefined rules and further delivering the processed event to an authorized event subscriber.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941448&OS=07941448&RS=07941448
owner: AT&T Intellectual Property II, LP
number: 07941448
owner_city: Atlanta
owner_country: US
publication_date: 20050826
---
The present invention is related to an event driven communication mechanism and more particularly to eventing mechanism for communication between any device person and system.

Software platforms traditionally offered a publish subscribe mechanism as one of the core platform services. With help from this mechanism an application could raise events or express interest in events produced by other applications. The Internet and Web services are emerging as the next generation platform for distributed applications.

Typically publish subscribe service is well known in the art. It includes an event broker or an event intermediary. From the point of view of the event broker the world is divided into two types of entities event publishers and event subscribers. Event publishers advertise event types and raise events by sending messages to the event broker. Event subscribers express interest in events by registering event subscriptions with the event broker. The event broker matches the two parties by forwarding events sent by the publishers to endpoint registered by the subscribers.

The Event driven or Notification based interaction pattern is a commonly used pattern for inter object communications. Examples exist in many domains for example in publish subscribe systems provided by Message Oriented Middleware vendors or in system and device management domains. This notification pattern is increasingly being used in a Web services context.

The Event driven communications are very useful and attractive for many purposes especially in situations where timely information dissemination is required where notice of changes or status must constantly occur where real time information monitoring is required. Event driven communications also offer an advantage of reducing traffic below the level typically required by resource based or demand driven communication systems. Another advantage of publish subscribe communication systems is that they function with both multiple subscribers and multiple publishers.

Publish subscribe communications are asynchronous and thus allow a publisher or a subscriber to be on line as it desires. Thus a failure of equipment used by a subscriber has no effect on the service. The publication by a publisher simply continues and other subscribers desiring to do so remain on line with no indication that any other subscriber has left. This emphasizes another great advantage of a publish subscribe communications service the manner in which the individual publishers and subscribers are decoupled from one another. In theory apart from system administrators no publisher or subscriber need know that any other publisher or subscriber is publishing or receiving data on any publication channel.

Because of these and other advantages much work has been done to implement event driven communications utilizing the various data access protocols which exist to facilitate the transfer of data between disparate systems. However none of the publish subscribe or event driven mechanisms in the industry are fully compliant with standards such as with J2EE Web Services eventing definitions available in the industry.

The present invention provides a method for providing a publish subscribe communications systems. The method includes receiving on a web service infrastructure at least one event published by at least one publisher checking on the authenticity of the publisher and authorizing said publisher. The method further includes validating structure of the event with XML schema definition registering said event upon validation and processing said event based on a set of predefined rules wherein said rules include definitions on managing the events prioritizing the events queuing the events for delivery communication means for delivery of the events authorized subscribers and combinations thereof.

An event broker is an entity which routes events. Brokers typically aggregate and publish events from other publishers and forward them to the subscribers. An event broker can also apply some transformation to the events it processes.

A notification is an XML element representing an event. One or more event notifications are emitted by event publishers and received or retrieved by one or more event subscribers through an event broker.

Basically publishing can be thought of as broadcasting an event. The event type is analogous to a radio station. Applications interested in a particular station subscribe or tune in to a specific event type. Just as in radio broadcasting where all parties involved must agree in advance on a set of possible frequencies applications in the present invention must agree in advance on a predetermined format of events. Subscribers specify what they want preferably based on the type of the event and on content of the event. In the preferred embodiment the system buffers event so that even if a publisher is off line a subscriber can still retrieve events. Similarly a publisher can publish events even if a subscriber is off line.

Referring to there is shown a block diagram illustrating a publish subscribe communication system according to an embodiment of the present invention. The system includes at least one or more event publishers and at least one or more event subscribers connected to an event broker . Event Publishers and event subscribers are connected to the broker through respective Web service WS servers . Each publisher subscriber and WS server of can be located in a separate server in the same server or in some combination of separate servers and the same server.

According to the present invention any to any publish and subscribe mechanism for communication for an enterprise is provided. In other words the event publisher could be a human or a system or data communication devices such as pagers cell phones e mail etc. Similarly the event subscriber could preferably be a human or a system or data communication devices. So there are many different ways to communicate between the publisher and a subscriber. The event broker is a web server infrastructure including a database . So in the present invention any appropriate communications protocol can be utilized to implement the present invention.

The present invention according to one embodiment thereof implements a push only model of delivering event notifications from the event publisher to the event subscriber . The event notifications are pushed to the event broker whereupon the event broker pushes the event notifications to the event subscriber . Even though the present invention is fully described in terms of the push push model it is understood that other event notification models may also be implemented within the context of the present invention such as pull pull pull push or push pull.

In the described embodiment the event publisher publishes one or more events of certain types to the event broker or web server infrastructure and the event subscriber subscribes to events of certain types. The event publisher and the event subscriber operate asynchronously and are unaware of each other s existence.

In computer operations asynchronous operation means that a process operates independently of other processes. In the present application the publisher and the subscriber operate independently of each other. The publisher will publish events without knowing anything about the subscriber and will continue to publish events without receiving any response whether the event has been received by the subscriber . Similarly subscriber will continue to subscribe for the events without knowing of publisher s existence and without acknowledging receipt of event.

The described embodiment includes a Web Service Application Programming Interface API for publishers and for subscribers . The API defines a plurality of procedures that allow respective publishers and subscribers to interface to the web server infrastructure . Thus various types of publishers and subscribers can be connected to the web server infrastructure as long as they use the interface procedures defined in accordance with the API.

The described embodiment also includes predefined routines in the Web Service API which are available to the publisher and the subscriber to perform various functions. An example of a Web Service API routines available to the event publisher for event registration is shown below 

As seen in the above example the event publisher has various options on the types of events for registration. The publisher can publish a new event modify an existing event or delete an existing event. Additionally the publisher can optionally authorize a subscriber to receive the event.

The event broker exhibits the events in several ways. The event broker can preferably list all events or list events based on the publishers or list events based on the subscribers . Additionally the event broker can preferably obtain events by the name of the event or via a partial name of the event. The event broker may also obtain the list of subscribers for each of the exhibited events.

Furthermore a Web Service API for event subscription is also available to the event subscriber . An example of such API is shown below 

As seen in the above example the event subscriber may preferably subscribe to an event may remove itself as a subscriber for an event or even modify the formats available to the subscribers for event subscription. Similarly the API routines further allow to add subscriber users humans modify subscriber users or even delete subscriber users.

Finally a Web Service API available to the event publisher for event submission is to publish the event as shown below 

Referring to the flow diagram of described herein is a process flow of event from the event publisher to an event subscriber . The event publisher first registers itself with the event broker to which it is connected to prior to publishing an event. This registration process includes the event broker authorizing the event publisher and creating a service for that publisher in the infrastructure. The event broker may also preferably create priority for the publisher and or the service for that publisher. The highest priority in the infrastructure is when the publisher may publish an event and the broker will stop other functions and process that event first. The event broker provides an event structure for registration to the event publisher . A typical example of an event structure for registration is shown below.

Similarly the subscriber also registers itself with the event broker to which it is connected to prior to receiving an event. This registration process includes the broker authorizing the subscriber to receive the service they want to subscribe to. A typical example of registration data structure for the subscriber is shown below.

Each subscriber is assigned to a particular domain and priorities are given to the subscribers based on the domain to which the subscribers belong. Basically events are categorized into domains so there is no security issue as to whether the subscribers are to receive certain events. So the subscriber has to declare the domain to which the subscriber belongs in order to validate the authenticity of the subscriber and give the subscriber permission to access the event.

In the example of the process flow diagram shown in a system is the event publisher which needs to be invoked using a web source. So the event publisher publishes an event using the web server at step . A typical example of a published event structure is shown below.

The event broker which is on a web service server infrastructure is programmed to listen for events of different types for that event publisher . Upon receipt of the event via the web server the broker at step authenticates and authorizes the publisher that sent the event. In other words the event broker checks to see if the event publisher who sent the event is registered or not is the publisher still valid or has the publisher s registration time expired. The event broker checks the IDs of the publishers to cross reference against the IDs already registered by the publishers for communication. For security reasons the publishers are not allowed to change their IDs. Other miscellaneous issues include checking to see if the event is published in the same machine or not. Upon authenticating and authorizing of the publisher the next step is to validate Event with its XML Schema Definition. The event received by the event broker is checked to see if it is coming in the structure format already set up by the publisher for that event. There are certain generic schemas created on the infrastructure which are flexible enough to deal with n number of scenarios. The event publishers can freely choose one of the generic schemas to publish the events. However there is an option for any event publisher to publish their own XML. That is an application could deposit its own structure schema for all the events it publishes and the broker stores this structure format for that event publisher . So the event broker measures and compares all events coming from that event publisher to the schema given by that event publisher or to the generic schema created by the event broker .

Upon completion of the validation process the events that are considered to be legitimate are kept persistent by the event broker . Once the events are validated the event broker would never lose the event if the servers go down or even crash. In other words these events are fully secured by the event broker . Then at step the events are processed by the event broker . At this time the event broker will check the database specifying rules to be evaluated before delivery of the associated events occurs. Such rules may contain database access language expressions such as for example JMS SQL and or PL SQL statements or other ANSI ISO compliant language expressions for example to access the events message s properties history and content. Alternatively the rules may include a procedure written in PL SQL for example that calls an external procedure or function written in another programming language such as the C programming language for example. In this manner even though a subscriber may have subscribed and registered to receive an event delivery of the associated event may not occur until the rules specified in the database are applied. As the event is tightly integrated with the database the full functionality native to the database is brought to bear upon the generation and delivery of data and or system events to the subscribers. The database will include rules on how to manage the events such as which subscribers will be receiving which events and how the events will be queued for delivery and what communications means will be used to deliver these events as well as other rules.

Moreover the rules may preferably include that a particular published event never expires on the infrastructure. On the contrary the rule may include a publisher s request to expire an event in 24 hours and it becomes irrelevant. Then the event broker configures those events to expire in 24. Or preferably the rule may include a publisher s request for a delivery of event to a certain set of subscribers to receive and to retry until the subscribers receive the event. Such events are put in a round robin queue and they won t expire until they are received by the subscriber. The rule may also preferably include a request from the publisher for an acknowledgment of the receipt of the event.

Queues may be stored in queue tables within the database of the event broker . A queue table is a database table that contains one or more queues preferably for the order of delivering the events. Some of the orders of delivery of events include last in first out LIFO event priority of the event expiry date of the event or a random order. All of these order of delivery of events will require queuing and will be stored in the queue table with the corresponding event. However the order of delivery including first in first out FIFO will not require queuing of the events at the event broker.

The event broker will continue to manage the queue until the events are delivered to the subscriber via the web server one at a time. The events will be eventually queued according to the rules applied in the database. The event may preferably need to be broadcasted to several destinations. This step includes forcing or pushing the event out to be delivered to one or more destinations. This feature is well known as push only in which the events are pushed out for delivery to the communications devices not the communications devices coming and taking the events. Although not shown an event pull implementation may alternatively be applied for delivery of the events. This requires queuing of the events at the event broker on behalf of the event subscriber . The next step is to deliver the queued events to the communications devices one at a time. One such delivery mechanism may preferably be sending event notification to the event subscriber via a web service. In this case the event subscriber who may have subscribed for an event may preferably upload a web service to receive published events. Another delivery mechanism may preferably include sending event notification to the event subscriber via an e mail server to Outlook blackberry etc. Still another means to send event notification to the event subscriber is through a various numeric and or alphanumeric pager. The event broker is intelligent enough to realize the limitations of the pagers and the blackberry and may need to reduce the size of the events sent to these communication devices.

The present invention provides a system and a method for migrating data from legacy software applications to universal applications. The system includes a migration platform for handling extraction of needed data transformation and data mapping to the target or universal infrastructure. The migration platform includes tables for reporting the data received from the legacy platform and further mixing and matching the data in accordance with the needs of the universal platform. The migration platform also provides a real time reporting to track the progress of the migration.

