---

title: Method and apparatus for managing software errors in a computer system
abstract: A method for managing a system includes monitoring a plurality of applications running in the system for errors. A prediction is made as to whether errors detected would result in a failure. Fault recovery is initiated in response to a failure prediction. According to one aspect of the present invention, monitoring the plurality of applications includes reading error recorders associated with error occurrence. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07702966&OS=07702966&RS=07702966
owner: Intel Corporation
number: 07702966
owner_city: Santa Clara
owner_country: US
publication_date: 20050907
---
An embodiment of the present invention relates to error management of applications run on a computer system. More specifically an embodiment of the present invention relates to a method and apparatus for detecting errors and predicting failure of applications on a computer system.

Software applications running on computer systems may experience a variety of errors that may affect its operational state. Errors which software applications may experience include for example errors relating to memory allocation memory corruption segment violation unexpected state transitions interprocess communication between applications and timer related system calls. It is important for a computer system to recognize an application s operational state in order to allow for the computer system to take recovery actions and prevent the degradation of operational services.

Some software applications are capable of logging errors internally to be reviewed by the computer system user or a system manager. Other software applications are capable of generating an error report that may be transmitted outside the computer system to be reviewed by a software developer. These logs or reports typically include information about the error such as the time it occurred and information about the nature of the error. Although these applications are capable of logging and reporting errors no further action is typically taken during the application run time. Eventually if the errors reach a high enough severity level the result may be a software application failure or worse an operating system failure. These failures may cause valuable data to be lost from the application. In the event of an operating system failure data may also be lost from other applications and operational services may be interrupted.

Thus what is needed is an effective method and apparatus for managing errors in a computer system to predict failures in advance and to take appropriate recovery action.

In the following description for purposes of explanation specific nomenclature is set forth to provide a thorough understanding of embodiments of the present invention. It will be apparent to one skilled in the art that specific details in the description may not be required to practice the embodiments of the present invention. In other instances well known circuits devices and programs are shown in block diagram form to avoid obscuring embodiments of the present invention unnecessarily.

The fault prediction module includes a fault detection unit . The fault detection unit monitors a plurality of applications running in a system for errors. According to an embodiment of the fault prediction module the fault prediction module manager provides an application program interface API to applications running on the computer system to allow the applications to inform the fault prediction module manager when an error has occurred and forward error information. The error information may include error type severity of error and other related information. The fault detection unit may include a plurality of error recorders that record error information. According to an embodiment of the present invention the error recorders may be implemented using error counters. In one embodiment an application may have a corresponding set of error recorders. The number of occurrence of each error type may be tracked by the error recorders . In another embodiment the fault detection unit monitors an application by reading the error recorders associated with error occurrence. For an application that does not utilize application program interfaces the fault detection unit may also monitor the application by utilizing error handlers. The error handlers may read one or more system log files or private log files associated with the application for error occurrence and update the error recorders to reflect the occurrence of an error.

The fault prediction module includes a failure prediction unit . The failure prediction unit analyzes the errors detected by the fault detection unit and predicts whether an application or operating system will experience a critical failure ahead of time. The failure prediction unit may correlate the various errors detected and isolate the root cause of the software problem.

The failure prediction unit may utilize numerous prediction techniques. For example the failure prediction unit may perform prediction without a time window. In one embodiment performing prediction without a time window involves predicting whether the errors detected will result in a failure by determining whether a number of errors of a particular type reach a threshold. The failure prediction unit may perform adaptive error count prediction. In one embodiment performing adaptive error count prediction involves comparing a number of faults detected against a critical threshold where the number of errors is decremented periodically to age the error information. The failure prediction unit may perform adaptive time window prediction. In one embodiment performing prediction with a time window involves determining whether a number of errors of a particular type reach a threshold within a time window. The failure prediction unit may also adjust the time window adaptive time window to include a smaller period of time if error rate increases or a larger period of time if error rate decreases. This may also include tuning critical thresholds depending on the error rate besides time windows. The failure prediction unit may use training mechanisms to learn appropriate values of heuristics parameters for various errors. In one embodiment the training mechanisms may monitoring application failures and scan error records for determining data sets of sequence of errors or individual errors and its associated heuristics parameters. The training mechanisms may choose a data set having a highest probability of causing an application failure for each error individual or a unique sequence . Heuristics parameters may include error rates threshold counts time windows probabilities and other parameters. In other embodiments failure prediction unit may use statistical variations to determine the probability of a critical failure.

It should be appreciated that the failure prediction unit may apply a combination of these techniques or other techniques to a variety of applications and error types. In one embodiment error types may be given a severity level such as high medium and low. In this embodiment when analyzing the errors the error types may be weighted according to the severity levels. According to an embodiment of the present invention errors relating to memory allocation memory access violation and buffer overruns may be given a high severity level. Errors relating to interprocess communication mechanisms to send messages or information may be given a medium severity level. Errors relating to timer related systems call may be given a high severity level if the timer is critical to the proper functioning of the application. Errors related to invalid parameter or argument values being passed to the function invocations may be given a low severity level. Errors related to mismatch of the states of correlated software components may be given a high severity level. It should be appreciated that the categorization of errors into severity type may be used in the prediction techniques described earlier to determine probability of a critical failure of a given application.

The failure prediction module includes a fault recovery unit . The fault recovery unit operates to initiate fault recovery of an application or an operating system in response to a failure prediction made by the failure prediction unit . According to an embodiment of the failure prediction module the fault recovery unit may initiate a diagnostic of an application or an operating system. The fault recovery unit may also restart an application or an operating system save data from one or more applications or initiate failover. Saving data may include saving data onto a storage medium for use later when the system is available. The fault recovery unit may also initiate selective restart of a sub component of the application which is causing failure e.g. an individual thread of a multi threaded application. The fault recovery unit may also perform audits to check communication links with other applications with which it is interacting with if a predicted failure is due to errors in interprocess communication mechanisms.

According to an embodiment of the fault prediction module the fault detection unit also monitors the sanctity of applications by checking the status of an application upon the expiration of a watch dog timer. The status of the application may be checked by reading a strobe or a watch dog counter corresponding to the application. The status may also be checked by sending messages to the application and getting acknowledgement back. The fault recovery unit initiates recovery of the application after expiration of a recovery period.

It should be appreciated that watch dog counters and error recorders may be implemented for example using any interprocess communication mechanism such as a shared memory message queues semaphores sockets or other mechanisms. Exemplary watch dog application program interface which may be implemented by the fault prediction module are listed below.

Exemplary fault detection application program interface which may be implemented by the fault prediction module are listed below.

The fault prediction module may be implemented on a number of different types of computer systems. illustrates a first computer system in which a fault prediction module may be implemented. The computer system includes a processor that processes data signals. The processor may be a complex instruction set computer microprocessor a reduced instruction set computing microprocessor a very long instruction word microprocessor a processor implementing a combination of instruction sets or other processor device. In an alternate embodiment the processor can be a network processor having multiple processing elements or it can have multiple general purpose processing cores or combination of general purpose cores and specialized cores. The processor is coupled to a CPU bus that transmits data signals between processor and other components in the computer system .

The computer system includes a memory . The memory may be a dynamic random access memory device a static random access memory device read only memory and or other memory device. The memory may store instructions and code represented by data signals that may be executed by the processor . According to an embodiment of the present invention the processor may execute an operating system and applications shown collectively as as well as implement a fault prediction module to manage errors generated by the operating system and applications . The fault prediction module may be implemented by the fault prediction module shown in .

A bridge memory controller is coupled to the CPU bus and the memory . The bridge memory controller directs data signals between the processor the memory and other components in the computer system and bridges the data signals between the CPU bus the memory and a first IO bus .

According to an embodiment of the present invention the processor and bridge memory controller may support virtualization where a plurality of virtual machines may function as a self contained platform that runs its own software stack. In this embodiment the fault prediction module may reside and run in a protected partition of the processor while the operating system and applications reside and run in an open partition of the processor. This allows the fault prediction module to monitor errors from the operating system and applications while being isolated and protected from the impact of the errors.

According to an embodiment of the present invention the computer system may also include an embedded microcontroller where the fault prediction module can execute. The embedded microcontroller gives an isolated environment independent on the host processor to monitor the applications and OS es for predicting failures in these components.

The first IO bus may be a single bus or a combination of multiple buses. The IO bus may also be connected through a controller to the memory controller. The first IO bus provides communication links between components in the computer system . A network controller is coupled to the first IO bus . The network controller may link the computer system to a network of computers not shown and supports communication among the machines. A display device controller is coupled to the first IO bus . The display device controller allows coupling of a display device not shown to the computer system and acts as an interface between the display device and the computer system .

A second IO bus may be a single bus or a combination of multiple buses. The second IO bus provides communication links between components in the computer system . A data storage device is coupled to the second IO bus . The data storage device may be a hard disk drive a floppy disk drive a CD ROM device a flash memory device or other mass storage device. An input interface is coupled to the second IO bus . The input interface may be for example a keyboard and or mouse controller or other input interface. The input interface may be a dedicated device or can reside in another device such as a bus controller or other controller. The input interface allows coupling of an input device to the computer system and transmits data signals from an input device to the computer system . An audio controller is coupled to the second IO bus . The audio controller operates to coordinate the recording and playing of sounds and is also coupled to the bus . A bus bridge couples the first IO bus to the second IO bus . The bus bridge operates to buffer and bridge data signals between the first IO bus and the second IO bus .

It should be appreciated that although a single processor is shown in that the computer system may also include a plurality of processors. It should further be appreciated that each of the processors in computer systems and may include a plurality of processor cores.

Server blades and include management microcontrollers MMs and respectively. The management microcontrollers and provide monitoring and control functionality to its corresponding server blade. Each of the management microcontrollers and may maintain event logs manage sensor data and support other functions for its corresponding server blade. In one embodiment each of the management microcontrollers and may also include a fault prediction module FPM and and provide isolation from errors in the applications and host memory. The fault prediction modules and manages the errors generated by operating systems and applications and . In another embodiment fault prediction modules may execute on a virtual partition of one of processing cores or elements of the blade. Each of the fault prediction modules and may be implemented by the fault prediction module shown in .

The blade server system includes shared resources . The shared resources may include a network interface storage device power supply cooling ventilation system and or other resources that may not be available on the server blades and and must be shared among the server blades and .

The blade server system includes a chassis management module CMM . The chassis management module performs hardware management of the server blades and . For example the chassis management module may manage power allocation insertion extraction and compatibility checks for the server blades and .

It should be appreciated that the fault prediction module shown in may be implemented in a variety of environments using various techniques or procedures. For example the fault prediction module may be implemented as a set of native instructions on a processor. The instructions may be specifically designed and optimized for performing failure prediction. The fault prediction module may be implemented in an application specific integrated circuit field programmable gate array in one or more processor core and or processor chipset or on a dedicated core in a multi core processor system.

At error recorders related to operating system OS errors are read. According to an embodiment of the present invention system log files may be read to determine the occurrence of errors for operating systems and applications that do not utilize application program interfaces to update error recorders. According to an embodiment of the present invention the error recorders may be implemented with error counters.

At it is determined whether an error that corresponds to or impacts the operating system has been detected. If an error is detected control proceeds to . If an error is not detected control proceeds to .

At it is determined whether an operating system failure is predicted. According to an embodiment of the present invention failure may be predicted by analyzing the detected errors and their severity utilizing a number of prediction techniques including prediction with or without a time window adaptive error count prediction adaptive time window prediction statistical variations using conditional probabilities and or other techniques. If an operating system failure is predicted control proceeds to . If an operating system failure is not predicted control proceeds to . According to an embodiment of the present invention where multiple operating systems are running on a processor using virtualization the procedures described repeat for all the operating systems before proceeding to .

At a notification of the predicted operating system failure is generated. According to an embodiment of the present invention updating the probability of the instance error set is performed.

At operating system recovery is initiated. Operating system recovery may include initiating failover saving data and restarting the operating system.

At the prediction techniques are tuned. According to an embodiment of the present invention if a time window is used in the prediction technique the time window may be adjusted based on the increase or decrease of the error rate. The tuning also includes updating probability of instance being used for prediction analysis of a given error set and determining the instance of the highest probability.

At error recorders related to application errors are read. According to an embodiment of the present invention system log files may be read to determine the occurrence of errors for applications that do not utilize application program interfaces to update error recorders. According to an embodiment of the present invention the error recorders may be implemented by error counters.

At it is determined whether an error that corresponds to or impacts an application has been detected. If an error is detected control proceeds to . If an error is not detected control proceeds to .

At it is determined whether an application failure is predicted. According to an embodiment of the present invention failure may be predicted by analyzing the detected errors and their severity utilizing a number of prediction techniques including prediction with or without a time window adaptive error count prediction adaptive time window prediction statistical variations and or other techniques. If an application failure is predicted control proceeds to . If an application failure is not predicted control proceeds to .

At a notification of the predicted application failure is generated. According to an embodiment of the present invention updating the probability of the instance error set is performed.

At application recovery is initiated. Application recovery may involve initiating failover saving data or restarting the application or other appropriate actions.

At the prediction techniques are tuned. According to an embodiment of the present invention if a time window is used in the prediction technique the time window may be adjusted may be adjusted depending on in response to an increase or decrease of an error rate. The tuning may also includes updating probability of instances being used for prediction analysis of a given error set and determining the instance of the highest probability.

At it is determined if the error recorders for all applications have been checked. If all of the error recorders for all the applications have been checked control proceeds to . If not all of the error recorders for all the applications have been checked control returns to . According to an embodiment of the present invention error recorders may be implemented using error counters.

At it is determined whether the application is alive. According to an embodiment of the present invention the determination may be made by invoking an interprocess communication mechanism to read a strobe or watch dog counter for the application. If the application is not alive control proceeds to . If the application is alive control proceeds to .

At the error is recorded and a recovery period timer is started. According to an embodiment of the present invention recovery is initiated after the recovery timer expires and the application is determined to still not be alive. Recovery may include writing data into storage restarting an application and or initiating failover.

At a fault leading to the application failure is recorded. Exemplary faults may include stack overflow or memory allocation failure. According to an embodiment of the present invention a recorder is incremented to indicate the number of occurrence of the fault.

At it is determined whether a platform needs to be reset. According to an embodiment of the present invention the platform may be reset in response to a particular type of fault occurrence. If the platform is to be reset the platform is reset and control returns to . If the platform is not to be reset control proceeds to .

At the fatal fault that led to the application failure is determined. According to an embodiment of the present invention the fatal fault is determined by scanning the faults recorded at .

At the relevant errors associated with the fault is identified. According to one embodiment the relevant errors may be determined by scanning all previous error information recorded.

At it is determined whether all relevant error information recorded has been scanned. If not all relevant error information recorded has been scanned control proceeds to . If all relevant error information has been recorded control proceeds to .

At statistics are computed for the error to generate error sets. According to an embodiment of the present invention an error set includes a combination of parameters such as a sequence or order of errors time window error count and or error rate. The conditional probability of the occurrence of an error may be determined. The conditional probability may take into account the probability of parent errors. According to an embodiment of the present invention a time window error count and error rate is calculated for an error such as memory allocation failure. The number of occurrences of this instance may also be determined for a present training set to determine the conditional probability of the error set.

At it is determined whether a training period is over. According to an embodiment of the present invention the training period is timed and control checks to see whether a predetermined period of time has expired. If the training period is not over control returns to . If the training period is over control proceeds to .

At scan instances of heuristics parameters. According to an embodiment of the present invention all instances of heuristic parameters determined in the training set are scanned.

Embodiments of the present invention may be provided as a computer program product or software or firmware that may include an article of manufacture on a machine accessible or a machine readable medium having instructions. The instructions on the machine accessible medium may be used to program a computer system or other electronic device. The machine accessible medium may include but is not limited to floppy diskettes optical disks CD ROMs magneto optical disks or other type of media machine accessible medium suitable for storing or transmitting electronic instructions. The techniques described herein are not limited to any particular software configuration. They may find applicability in any computing or processing environment. The term machine accessible medium used herein shall include any medium that is capable of storing encoding or transmitting a sequence of instructions for execution by the machine and that cause the machine to perform any one of the methods described herein. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application module unit logic firmware and so on as taking an action or causing a result. Such expressions are merely a shorthand way of stating that the execution of the software by a processing system causes the processor to perform an action to produce a result.

In the foregoing specification embodiments of the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the embodiments of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense.

