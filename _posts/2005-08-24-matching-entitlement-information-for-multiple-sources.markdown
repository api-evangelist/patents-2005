---

title: Matching entitlement information for multiple sources
abstract: A method, apparatus and computer-usable medium for executing, at an Entitlement Broker Service (EBS), a request from a requesting user for a protected computer resource that is available only to entitled users. Entitlement identifications are located using a Standardized Entitlement Credentials Data Store (SECDS) in the EBS. The SECDS contains entitlement identification in a standardized format that can be used to contact an Entitlement Source (ES) for entitlement information regarding the requesting user and the requested protected computer resource. The located entitlement information, for the requesting user, is then transmitted from the EBS to an External Client Application (ECA) that manages the protected computer resource, thus affording the requesting user access to the protected computer resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09137227&OS=09137227&RS=09137227
owner: International Business Machines Corporation
number: 09137227
owner_city: Armonk
owner_country: US
publication_date: 20050824
---
The present invention relates in general to the field of computers and similar technologies and in particular to software utilized in this field.

Early computers were stand alone units which accessed and processed only local databases using local computer programs. Today however modern computers are often networked thus providing client computers on a network access to a variety of resources including data computer programs hardware devices including storage drives and printers etc. This resource availability is especially prevalent with the advent of the Internet World Wide Web private intranets and extranets etc. which provide access to web pages databases programs and similar resources. However access to such resources is often limited to only authorized users and or client computers.

The present invention includes but is not limited to a method apparatus and computer usable medium for receiving at an External Client Application ECA that regulates access to protected computer resources a request from a requesting user for a protected computer resource wherein the protected computer resource is available only to entitled users sending from an External Authentication Application EAA to an Entitlement Broker Service EBS an entitlement credential identifying one or more entitled users who are entitled to access protected computer resources sending from the EBS to an Entitlement Source ES a request for entitlement information for the requesting user receiving at the EBS entitlement information for the requesting user and transmitting the entitlement information for the requesting user from the EBS to the ECA wherein the requesting user is able to access protected computer resources according to information in the entitlement information.

The above as well as additional purposes features and advantages of the present invention will become apparent in the following detailed written description.

A method apparatus and computer usable medium is presented for executing at an Entitlement Broker Service EBS a request from a requesting user for a protected computer resource which is available only to entitled users. An External Client Application ECA controls protects offers access to a Repository of Protected Computer Resources RPCR . When the requesting user attempts to access a protected computer resource in the RPCR the ECA sends a query to the EBS asking for entitlement information that will allow the requesting user to access the protected computer resource. The EBS obtains an entitlement credential i.e. identifier for the requesting user from an External Authentication Application EAA and stores the entitlement credential in a local Standardized Entitlement Credentials Data Store SECDS . The entitlement credential includes customer numbers user identifiers IDs passwords and other identifying information for users. Using the requesting user s entitlement credential from the SECDS the EBS contacts one or multiple Entitlement Sources ESes for entitlement information for the requesting user. This entitlement information includes information that reflects specific users entitlement to access particular computer resources.

The entitlement information is returned to the EBS which then forwards the entitlement information to the ECA that controls access to the protected computer resource that was requested by the requesting user thus permitting the requesting user to access the protected computer resource. In one embodiment the entitlement information is cached in a Persistence Mechanism PM in the EBS. Similarly the SECDS can contain status information about previous requests for entitlement information thus providing an indication of availability non availability of entitlement information for a specific user and a specific computer resource and or the existence of a copy of the entitlement information in the PM.

With reference now to the figures and in particular to there is depicted an overview of resources utilized by the present invention. An Entitlement Brokering Service EBS contains a Standardized Entitlement Credentials Data Store SECDS . EBS contains a Conversion Logic CL which is capable of converting users entitlement credentials i.e. identifiers stored in SECDS into a format used by a protected computer resource such as those found in Repository of Protected Computer Resources RPCR which are managed supported accessed by External Client Applications ECA .

When a user requests access to a computer resource from RPCR via an ECA such as ECA then ECA transmits a message to EBS asking for all entitlement information that EBS has for user . EBS communicates via an extensible set of Entitlement Connectors EC a request for this entitlement information from a set of known Entitlement Sources ES . EBS also makes use of an External Authentication Application EAA to identify user . In one embodiment ECAs also use EAA which contains user identification data for each user including user . EAA thus allows EBS and ECAs to both identify user according to a same user criteria. As described below user may also be able to directly access EAA to update user s user identifier ID .

Once ECA receives all of the requested entitlement information from EBS then ECA decides whether user is authorized to access RPCR and affords such access if so authorized. Thus EBS does not need to understand any business requirements rules logic that an ECA may use to determine user s authority to access one or more protected computer resources in RPCR . Rather EBS simply brokers entitlement information from known sources i.e. ESes and presents that entitlement information to ECA in a format that allows the ECA to make the authorization decision.

Details of are provided below in to which are presented in exemplary manner to provide an expanded explanation of some or all of the novel features of the present invention.

Referring now to a block diagram is presented showing components used by EBS to communicate with ECs using a Standardizing Application Programming Interface SAPI which includes a set of definitions for EBS to communicate with ECs .

An exemplary set of steps taken by EBS to communicate with ESes is shown in . After initiator block a user sends a request for access to a specific protected computer resource in one or more ECAs such as ECA block . The requested protected computer resource from RPCR shown in may be a website a database a computer program a piece or group of hardware including a computing device a storage device a printer etc. ECA then sends a request for entitlement information for requesting user to EBS block . EBS then sends a request for entitlement information to an appropriate EC such as EC which is associated with one or more specific ESes including ES block . EC then sends back a message to EBS informing EBS which user credentials are required to identify and authenticate user as an authorized user of the requested ECA block . Examples of such required credentials are an active e.g. paid membership subscription program service that is known to ES membership in a particular user age group or geographical region employment status with a particular enterprise enrollment in an education institute etc.

EBS then passes the required user credentials block extracted from EBS s SECDS to EC . EC then communicates these user credentials to multiple ESes including ES block . Note that different ECs may be passed different types of user credentials which may or may not include user identification data provided to EAA . For example ES may use a customer number to identify each user while ES might require a user ID and a password. EBS thus may rely on SECDS to maintain these various entitlement credentials in a record identified as belonging to user e.g. by user s identifier data as supplied by EAA .

As described at block EC receives the requisite entitlement information from ES . This entitlement information describes which specific protected computer resource or group of protected computer resources from RPCR are available to authorized for user . EC forwards this entitlement information to EBS block which sends it on to ECA block allowing ECA to afford user access to the protected computer resource that is managed by ECA block . The process thus ends at terminator block .

Referring now to components used to gather user entitlement credentials are depicted. EBS provides an Adjunct User Interface Application AUIA which allows user to populate his record in SECDS . Note that AUIA is dynamic and adaptable and is able to associate correlate user with entitlement credentials for one or more users. If an Entitlement Source e.g. ES determines that user does not possess an appropriate entitlement information to access the resource he is requesting e.g. ES then ES directs user to AUIA in order to provide additional entitlement credentials if available to user to EBS and SECDS . By referencing a set of ESes identified by ECA AUIA configures itself to gather only those credentials that are appropriate to the set of ESes that could provide access to the requested ECA . Furthermore AUIA can provide access to additional resources such as online e commerce processes help documentation and other resources that can enable user to obtain requisite entitlement information if he does not already possess it. Thus AUIA gathers entitlement credentials about user which are stored in SECDS and validated by ESes .

Note that while correctly illustrates that user is able to communicate with ES the process of gathering user entitlement credentials does not normally incorporate this communication. That is user is not primarily communicating with ES during the process described above. Thus ES does not direct user to AUIA but rather the lack of entitlement for user is communicated through EBS to ECA which causes ECA to direct user to AUIA .

Steps for gathering user entitlement credentials are represented in exemplary manner in starting at initiator block . The user requests access to a specific one or more protected computer resources that are managed by External Client Applications ECA as described at block . EBS queries the appropriate Entitlement Sources ES for authorization for user to access the requested protected computer resource s managed by ECA e.g. ECA as shown at block . EBS and or ECA and or ES may determine that user possesses the appropriate entitlement to access ECA s protected computer resource s query block . If so then user is permitted to access ECA s protected computer resource s block and the process ends terminator block . If not then user may provide additional entitlement credentials if available to AUIA as described at block . Another entitlement query is made query block similar to that made at query block . If user is entitled to access ECA s protected computer resource s then it does so block . Otherwise the process ends terminator block .

A query is made query block as to whether logic in AUIA has determined that a user is stuck in a loop in his request for entitlement information. If so then user may be directed to additional resources block and the process ends terminator block . Note that while the flow chart in includes terminator block to comport with standard flow chart convention it is understood that any of the steps depicted may be kept in an open state by any appropriate logic system shown in the figures.

As described at block in EBS queries the appropriate Entitlement Sources ES for authorization for user to access the requested protected computer resource s managed by ECA . In one embodiment EBS may query all known ESes or ECA may instruct EBS to query only certain ESes . ECA may choose to limit the query when it knows in advance that only certain ESes could possibly provide the entitlement information needed to access a particular protected computer resource. When multiple ESes are involved EBS may choose to communicate with all requested ESes simultaneously via ECs shown in rather than sequentially. This reduces the total amount of time needed to receive entitlement information from all queried ESes . Each EC uses whatever communication methods and formats that are appropriate to request and receive entitlement information from its ES . Once all ECs have finished their communications with the ESes EBS retrieves the entitlement information from each successful EC . ECs provide this entitlement information in a standardized format and via AUIA thus decoupling EBS from the specific data formats used by the individual ESes .

Note that the query EBS makes to ESes does not include information about ECA . That is while information about ECA may be logically inferred by ESes such information is not explicitly communicated. Thus it is possible for ESes to operate without knowledge of any of the ECAs .

In its query to EBS ECA may choose to supply a List of Entitlement Identifiers LEI as shown in that user must possess to be granted access to the desired resource e.g. ECA . If so EBS upon receiving the responses from ES via EC may filter each response so that EBS returns to ECA only those identifiers e.g. user s Entitlement Identifier EI that match those found in LEI using a Pattern Matching Logic PML .

Additionally ES or EC may implement business logic that allows it to return to EBS an Entitlement Wildcard EW for user s . If EBS receives such an EW from ES or EC and if ECA has provided an LEI then EBS uses pattern matching algorithms to match the wildcard of EW against LEI . If any matches are found they replace the wildcard in the response that is returned to the querying ECA . Thus EW allows filtering at EBS that permits the requesting user to access the protected computer resource if the requesting user has only an incomplete portion of entitlement criteria required by the protected computer resource for access to the protected computer resource. Note that ESes or ECs provide the wildcards rather than the request for the user s entitlement information from the ECA

Thus as shown in the exemplary steps of after initiator block ECA includes a list of entitlement identifiers in a query to EBS for authorization for user to access ECA block . If there is an entitlement wildcard EW sent from the Entitlement Connector EC or the Entitlement Source EC as queried at query block then EBS uses PML to return to ECA all entitlement identifiers that match against the entitlement wildcard block . If there is no EW then the EBS filters the requests normally as described above block and the process ends terminator block .

EBS may provide a Persistence Mechanism PM as shown in to store locally the results of recent queries to the known Entitlement Sources ES in EBS or EC . This makes subsequent entitlement queries more efficient if user continues to request protected resources that are entitled by the same set of ESes . The efficiency results from being able to retrieve user s entitlement information from a local fast data store in EC or EBS rather than having to make a request to an external ES .

The steps for caching entitlement responses are shown in exemplary steps in beginning at initiator block . As shown in block results entitlement information from previous entitlement queries is stored in PM either in EBS or in an EC such as EC . EBS then receives a subsequent request for entitlement information block . If access to the requested protected resource is based on a same set of entitlement sources previously queried query block then previously retrieved and stored entitlement information is retrieved block from the local cache in PM shown in . This entitlement information is then sent to the computer resource block and can be used to permit the user to access the computer resource block to end the process terminator block . Otherwise a new entitlement information search is performed block using techniques described above.

With reference now to there is depicted a block diagram of an exemplary client computer in which the present invention may be utilized. Client computer includes a processor unit that is coupled to a system bus . A video adapter which drives supports a display is also coupled to system bus . System bus is coupled via a bus bridge to an Input Output I O bus . An I O interface is coupled to I O bus . I O interface affords communication with various I O devices including a keyboard a mouse a Compact Disk Read Only Memory CD ROM drive a floppy disk drive and a flash drive memory . The format of the ports connected to I O interface may be any known to those skilled in the art of computer architecture including but not limited to Universal Serial Bus USB ports.

Client computer is able to communicate with a service provider server via a network using a network interface which is coupled to system bus . Network may be an external network such as the Internet or an internal network such as an Ethernet or a Virtual Private Network VPN . Using network client computer is able to use the present invention to access either directly or through the use of service provider server the protected computer resources found in RPCR .

A hard drive interface is also coupled to system bus . Hard drive interface interfaces with a hard drive . In a preferred embodiment hard drive populates a system memory which is also coupled to system bus . Data that populates system memory includes client computer s operating system OS and application programs .

OS includes a shell for providing transparent user access to resources such as application programs . Generally shell is a program that provides an interpreter and an interface between the user and the operating system. More specifically shell executes commands that are entered into a command line user interface or from a file. Thus shell as it is called in UNIX also called a command processor in Windows is generally the highest level of the operating system software hierarchy and serves as a command interpreter. The shell provides a system prompt interprets commands entered by keyboard mouse or other user input media and sends the interpreted command s to the appropriate lower levels of the operating system e.g. a kernel for processing. Note that while shell is a text based line oriented user interface the present invention will equally well support other user interface modes such as graphical voice gestural etc.

As depicted OS also includes kernel which includes lower levels of functionality for OS including providing essential services required by other parts of OS and application programs including memory management process and task management disk management and mouse and keyboard management.

Application programs include a browser . Browser includes program modules and instructions enabling a World Wide Web WWW client i.e. client computer to send and receive network messages to the Internet using HyperText Transfer Protocol HTTP messaging thus enabling communication with service provider server .

Application programs in client computer s system memory also include an Entitlement Brokering Service Program EBSP . EBSP includes code for implementing the processes described in by and for Entitlement Brokering Service EBS . In one embodiment client computer is able to download EBSP from service provider server .

The hardware elements depicted in client computer are not intended to be exhaustive but rather are representative to highlight essential components required by the present invention. For instance client computer may include alternate memory storage devices such as magnetic cassettes Digital Versatile Disks DVDs Bernoulli cartridges and the like. These and other variations are intended to be within the spirit and scope of the present invention.

As noted above EBSP can be downloaded to client computer from service provider server shown in exemplary form in . Service provider server includes a processor unit that is coupled to a system bus . A video adapter is also coupled to system bus . Video adapter drives supports a display . System bus is coupled via a bus bridge to an Input Output I O bus . An I O interface is coupled to I O bus . I O interface affords communication with various I O devices including a keyboard a mouse a Compact Disk Read Only Memory CD ROM drive a floppy disk drive and a flash drive memory . The format of the ports connected to I O interface may be any known to those skilled in the art of computer architecture including but not limited to Universal Serial Bus USB ports.

Service provider server is able to communicate with client computer via network using a network interface which is coupled to system bus . Access to network allows service provider server to access protected resources in RPCR and to use EBSP and the present invention to control access of such protected resources in RPCR to client computer and user .

System bus is also coupled to a hard drive interface which interfaces with a hard drive . In a preferred embodiment hard drive populates a system memory which is also coupled to system bus . Data that populates system memory includes service provider server s operating system which includes a shell and a kernel . Shell is incorporated in a higher level operating system layer and utilized for providing transparent user access to resources such as application programs which include a browser and a copy of EBSP described above which can be deployed to client computer .

The hardware elements depicted in service provider server are not intended to be exhaustive but rather are representative to highlight essential components required by the present invention. For instance service provider server may include alternate memory storage devices such as flash drives magnetic cassettes Digital Versatile Disks DVDs Bernoulli cartridges and the like. These and other variations are intended to be within the spirit and scope of the present invention.

Note further that in a preferred embodiment of the present invention service provider server performs all of the functions associated with the present invention including execution of EBSP thus freeing client computer from using its resources to access protected resources in RPCR .

It should be understood that at least some aspects of the present invention may alternatively be implemented in a computer useable medium that contains a program product. Programs defining functions on the present invention can be delivered to a data storage system or a computer system via a variety of signal bearing media which include without limitation non writable storage media e.g. CD ROM writable storage media e.g. hard disk drive read write CD ROM optical media and communication media such as computer and telephone networks including Ethernet the Internet wireless networks and like network systems. It should be understood therefore that such signal bearing media when carrying or encoding computer readable instructions that direct method functions in the present invention represent alternative embodiments of the present invention. Further it is understood that the present invention may be implemented by a system having means in the form of hardware software or a combination of software and hardware as described herein or their equivalent.

As described above in one embodiment the process described by the present invention including the functions of EBSP are performed by service provider server . Alternatively EBSP and the method described herein and in particular as shown and described in can be deployed as a process software from service provider server to client computer . Still more particularly process software for the method so described may be deployed to service provider server by another service provider server not shown .

Referring then to step begins the deployment of the process software. The first thing is to determine if there are any programs that will reside on a server or servers when the process software is executed query block . If this is the case then the servers that will contain the executables are identified block . The process software for the server or servers is transferred directly to the servers storage via File Transfer Protocol FTP or some other protocol or by copying though the use of a shared file system block . The process software is then installed on the servers block .

Next a determination is made on whether the process software is to be deployed by having users access the process software on a server or servers query block . If the users are to access the process software on servers then the server addresses that will store the process software are identified block .

A determination is made if a proxy server is to be built query block to store the process software. A proxy server is a server that sits between a client application such as a Web browser and a real server. It intercepts all requests to the real server to see if it can fulfill the requests itself. If not it forwards the request to the real server. The two primary benefits of a proxy server are to improve performance and to filter requests. If a proxy server is required then the proxy server is installed block . The process software is sent to the servers either via a protocol such as FTP or it is copied directly from the source files to the server files via file sharing block . Another embodiment would be to send a transaction to the servers that contained the process software and have the server process the transaction then receive and copy the process software to the server s file system. Once the process software is stored at the servers the users via their client computers then access the process software on the servers and copy to their client computers file systems block . Another embodiment is to have the servers automatically copy the process software to each client and then run the installation program for the process software at each client computer. The user executes the program that installs the process software on his client computer block then exits the process terminator block .

In query step a determination is made whether the process software is to be deployed by sending the process software to users via e mail. The set of users where the process software will be deployed are identified together with the addresses of the user client computers block . The process software is sent via e mail to each of the users client computers block . The users then receive the e mail block and then detach the process software from the e mail to a directory on their client computers block . The user executes the program that installs the process software on his client computer block then exits the process terminator block .

Lastly a determination is made on whether to the process software will be sent directly to user directories on their client computers query block . If so the user directories are identified block . The process software is transferred directly to the user s client computer directory block . This can be done in several ways such as but not limited to sharing of the file system directories and then copying from the sender s file system to the recipient user s file system or alternatively using a transfer protocol such as File Transfer Protocol FTP . The users access the directories on their client file systems in preparation for installing the process software block . The user executes the program that installs the process software on his client computer block and then exits the process terminator block .

The present software can be deployed to third parties as part of a service wherein a third party VPN service is offered as a secure deployment vehicle or wherein a VPN is build on demand as required for a specific deployment.

A virtual private network VPN is any combination of technologies that can be used to secure a connection through an otherwise unsecured or untrusted network. VPNs improve security and reduce operational costs. The VPN makes use of a public network usually the Internet to connect remote sites or users together. Instead of using a dedicated real world connection such as leased line the VPN uses virtual connections routed through the Internet from the company s private network to the remote site or employee. Access to the software via a VPN can be provided as a service by specifically constructing the VPN for purposes of delivery or execution of the process software i.e. the software resides elsewhere wherein the lifetime of the VPN is limited to a given period of time or a given number of deployments based on an amount paid.

The process software may be deployed accessed and executed through either a remote access or a site to site VPN. When using the remote access VPNs the process software is deployed accessed and executed via the secure encrypted connections between a company s private network and remote users through a third party service provider. The enterprise service provider ESP sets a network access server NAS and provides the remote users with desktop client software for their computers. The telecommuters can then dial a toll bee number or attach directly via a cable or DSL modem to reach the NAS and use their VPN client software to access the corporate network and to access download and execute the process software.

When using the site to site VPN the process software is deployed accessed and executed through the use of dedicated equipment and large scale encryption that are used to connect a companies multiple fixed sites over a public network such as the Internet.

The process software is transported over the VPN via tunneling which is the process the of placing an entire packet within another packet and sending it over a network. The protocol of the outer packet is understood by the network and both points called runnel interfaces where the packet enters and exits the network.

The process for such VPN deployment is described in . Initiator block begins the Virtual Private Network VPN process. A determination is made to see if a VPN for remote access is required query block . If it is not required then proceed to query block . If it is required then determine if the remote access VPN exists query block .

If a VPN does exist then proceed to block . Otherwise identify a third party provider that will provide the secure encrypted connections between the company s private network and the company s remote users block . The company s remote users are identified block . The third party provider then sets up a network access server NAS block that allows the remote users to dial a toll free number or attach directly via a broadband modem to access download and install the desktop client software for the remote access VPN block .

After the remote access VPN has been built or if it been previously installed the remote users can access the process software by dialing into the NAS or attaching directly via a cable or DSL modem into the NAS block . This allows entry into the corporate network where the process software is accessed block . The process software is transported to the remote user s desktop over the network via tunneling. That is the process software is divided into packets and each packet including the data and protocol is placed within another packet block . When the process software arrives at the remote user s desk top it is removed from the packets reconstituted and then is executed on the remote users desk top block .

A determination is then made to see if a VPN for site to site access is required query block . If it is not required then proceed to exit the process terminator block . Otherwise determine if the site to site VPN exists query block . If it does exist then proceed to block . Otherwise install the dedicated equipment required to establish a site to site VPN block . Then build the large scale encryption into the VPN block .

After the site to site VPN has been built or if it had been previously established the users access the process software via the VPN block . The process software is transported to the site users over the network via tunneling block . That is the process software is divided into packets and each packet including the data and protocol is placed within another packet block . When the process software arrives at the remote user s desktop it is removed from the packets reconstituted and is executed on the site users desk top block . The process then ends at terminator block .

The process software which consists code for implementing the process described herein may be integrated into a client server and network environment by providing for the process software to coexist with applications operating systems and network operating systems software and then installing the process software on the clients and servers in the environment where the process software will function.

The first step is to identify any software on the clients and servers including the network operating system where the process software will be deployed that are required by the process software or that work in conjunction with the process software. This includes the network operating system that is software that enhances a basic operating system by adding networking features.

Next the software applications and version numbers will be identified and compared to the list of software applications and version numbers that have been tested to work with the process software. Those software applications that are missing or that do not match the correct version will be upgraded with the correct version numbers. Program instructions that pass parameters from the process software to the software applications will be checked to ensure the parameter lists matches the parameter lists required by the process software. Conversely parameters passed by the software applications to the process software will be checked to ensure the parameters match the parameters required by the process software. The client and server operating systems including the network operating systems will be identified and compared to the list of operating systems version numbers and network software that have been tested to work with the process software. Those operating systems version numbers and network software that do not match the list of tested operating systems and version numbers will be upgraded on the clients and servers to the required level.

After ensuring that the software where the process software is to be deployed is at the correct version level that has been tested to work with the process software the integration is completed by installing the process software on the clients and servers.

For a high level description of this process reference is now made to . Initiator block begins the integration of the process software. The first tiling is to determine if there are any process software programs that will execute on a server or servers block . If this is not the case then integration proceeds to query block . If this is the case then the server addresses are identified block . The servers are checked to see if they contain software that includes the operating system OS applications and network operating systems NOS together with their version numbers which have been tested with the process software block . The servers are also checked to determine if there is any missing software that is required by the process software in block .

A determination is made if the version numbers match the version numbers of OS applications and NOS that have been tested with the process software block . If all of the versions match and there is no missing required software the integration continues in query block .

If one or more of the version numbers do not match then the unmatched versions are updated on the server or servers with the correct versions block . Additionally if there is missing required software then it is updated on the server or servers in the step shown in block . The server integration is completed by installing the process software block .

The step shown in query block which follows either the steps shown in block or determines if there are any programs of the process software that will execute on the clients. If no process software programs execute on the clients the integration proceeds to terminator block and exits. If this not the case then the client addresses are identified as shown in block .

The clients are checked to see if they contain software that includes the operating system OS applications and network operating systems NOS together with their version numbers which have been tested with the process software block . The clients are also checked to determine if there is any missing software that is required by the process software in the step described by block .

A determination is made is the version numbers match the version numbers of OS applications and NOS that have been tested with the process software query block . If all of the versions match and there is no missing required software then the integration proceeds to terminator block and exits.

If one or more of the version numbers do not match then the unmatched versions are updated on the clients with the correct versions block . In addition if there is missing required software then it is updated on the clients also block . The client integration is completed by installing the process software on the clients block . The integration proceeds to terminator block and exits.

The process software is shared simultaneously serving multiple customers in a flexible automated fashion. It is standardized requiring little customization and it is scalable providing capacity on demand in a pay as you go model.

The process software can be stored on a shared file system accessible from one or more servers. The process software is executed via transactions that contain data and server processing requests that use CPU units on the accessed server. CPU units are units of time such as minutes seconds hours on the central processor of the server. Additionally the assessed server may make requests of other servers that require CPU units. CPU units are an example that represents but one measurement of use. Other measurements of use include but are not limited to network bandwidth memory usage storage usage packet transfers complete transactions etc.

When multiple customers use the same process software application their transactions are differentiated by the parameters included in the transactions that identify the unique customer and the type of service for that customer. All of the CPU units and other measurements of use that are used for the services for each customer are recorded. When the number of transactions to any one server reaches a number that begins to affect the performance of that server other servers are accessed to increase the capacity and to share the workload. Likewise when other measurements of use such as network bandwidth memory usage storage usage etc. approach a capacity so as to affect performance additional network bandwidth memory usage storage etc. are added to share the workload.

The measurements of use used for each service and customer are sent to a collecting server that sums the measurements of use for each customer for each service that was processed anywhere in the network of servers that provide the shared execution of the process software. The summed measurements of use units are periodically multiplied by unit costs and the resulting total process software application service costs are alternatively sent to the customer and or indicated on a web site accessed by the customer which then remits payment to the service provider.

In another embodiment the service provider requests payment directly from a customer account at a banking or financial institution.

In another embodiment if the service provider is also a customer of the customer that uses the process software application the payment owed to the service provider is reconciled to the payment owed by the service provider to minimize the transfer of payments.

With reference now to initiator block begins the On Demand process. A transaction is created than contains the unique customer identification the requested service type and any service parameters that further specify the type of service block . The transaction is then sent to the main server block . In an On Demand environment the main server can initially be the only server then as capacity is consumed other servers are added to the On Demand environment.

The server central processing unit CPU capacities in the On Demand environment are queried block . The CPU requirement of the transaction is estimated then the servers available CPU capacity in the On Demand environment are compared to the transaction CPU requirement to see if there is sufficient CPU available capacity in any server to process the transaction query block . If there is not sufficient server CPU available capacity then additional server CPU capacity is allocated to process the transaction block . If there was already sufficient Available CPU capacity then the transaction is sent to a selected server block .

Before executing the transaction a check is made of the remaining On Demand environment to determine if the environment has sufficient available capacity for processing the transaction. This environment capacity consists of such things as but not limited to network bandwidth processor memory storage etc. block . If there is not sufficient available capacity then capacity will be added to the On Demand environment block . Next the required software to process the transaction is accessed loaded into memory then the transaction is executed block .

The usage measurements are recorded block . The usage measurements consist of the portions of those functions in the On Demand environment that are used to process the transaction. The usage of such functions as but not limited to network bandwidth processor memory storage and CPU cycles are what is recorded. The usage measurements are summed multiplied by unit costs and then recorded as a charge to the requesting customer block .

If the customer has requested that the On Demand costs be posted to a web site query block then they are posted block . If the customer has requested that the On Demand costs be sent via e mail to a customer address query block then these costs are sent to the customer block . If the customer has requested that the On Demand costs be paid directly from a customer account query block then payment is received directly from the customer account block . The On Demand process is then exited at terminator block .

While the present invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. Furthermore as used in the specification and the appended claims the term computer or system or computer system or computing device includes any data processing system including but not limited to personal computers servers workstations network computers main frame computers routers switches Personal Digital Assistants PDA s telephones and any other system capable of processing transmitting receiving capturing and or storing data.

