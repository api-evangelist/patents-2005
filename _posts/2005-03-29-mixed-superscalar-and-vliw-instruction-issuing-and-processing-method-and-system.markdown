---

title: Mixed superscalar and VLIW instruction issuing and processing method and system
abstract: Techniques for processing transmissions in a communications (e.g., CDMA) system. A method and system for issuing and executing mixed architecture instructions in a multiple-issue digital signal processor receives in a mixed instruction listing a plurality of digital signal processor instructions. The plurality of digital signal processor instructions includes a plurality of parallel executable instructions (e.g., VLIW instructions or instruction packets) mixed among a plurality of series executable instructions (e.g., superscalar instructions). The series executable instructions are associated by various instruction dependencies. The method and system further identify in the mixed instruction listing the plurality of parallel executable instructions. Once identified, the parallel executable instructions are first executed in parallel irrespective of any such instruction's relative order in the mixed instruction listing. Then, the series executable instructions are executed serially according to said various instruction dependencies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07590824&OS=07590824&RS=07590824
owner: QUALCOMM Incorporated
number: 07590824
owner_city: San Diego
owner_country: US
publication_date: 20050329
---
The disclosed subject matter relates to data communications. More particularly this disclosure relates to a novel and improved method and system for mixed superscalar and VLIW instruction issuing and processing in a digital signal processor.

A modern day communications system must support a variety of applications. One such communications system is a code division multiple access CDMA system that supports voice and data communication between users over a satellite or terrestrial link. The use of CDMA techniques in a multiple access communication system is disclosed in U.S. Pat. Nos. 4 901 307 entitled SPREAD SPECTRUM MULTIPLE ACCESS COMMUNICATION SYSTEM USING SATELLITE OR TERRESTRIAL REPEATERS and 5 103 459 entitled SYSTEM AND METHOD FOR GENERATING WAVEFORMS IN A CDMA CELLULAR TELEHANDSET SYSTEM both assigned to the assignee of the claimed subject matter.

A CDMA system is typically designed to conform to one or more standards. One such first generation standard is the TIA EIA IS 95 Terminal Base Station Compatibility Standard for Dual Mode Wideband Spread Spectrum Cellular System hereinafter referred to as the IS 95 standard. The IS 95 CDMA systems are able to transmit voice data and packet data. A newer generation standard that can more efficiently transmit packet data is offered by a consortium named 3Generation Partnership Project 3GPP and embodied in a set of documents including Document Nos. 3G TS 25.211 3G TS 25.162 3G TS 25.213 and 3G TS 25.114 which are readily available to the public. The 3GPP standard is hereinafter referred to as the W CDMA standard.

Digital signal processors DSPs may find valuable use in wireless handsets complying with the above standards. In particular wireless handsets are requiring and increasingly will require that the DSP execute instructions from user orientation scientific and multimedia applications as well as many other types of applications. The processor resource requirements may vary widely and dynamically for applications such as television broadcasts streaming message tickers electronic mail including messages with attached documents as well as resident applications such as photography and PDA applications all from the same DSP.

In such DSPs different applications may require the use of instructions that are best formed and operable in different processor architectures. For example some instructions may be best formed and operable in an architecture known as a superscalar architecture. On the other hand other instructions may be best formed and operable in an architecture known as the VLIW Very Long Instruction Word architecture. A superscalar architecture uses dynamic scheduling e.g. the hardware controls the issue of instruction dynamically. For static scheduling the VLIW architecture depends on a compiler to schedule concurrent instructions and rearranges them into a long instruction word. Such a compiler performs issue scheduling for parallel execution of the VLIW instructions.

The superscalar architecture improves performance by concurrent execution of scalar instructions in more than one instruction per cycle. That is a scalar processor executes one instruction at a time. In contrast the superscalar architecture allows concurrent execution of instructions in the same pipeline stage. The superscalar architecture improves the performance of the execution of scalar instructions but not without certain limitations. For example the performance limitations of the superscalar architecture include dealing with data dependencies procedural dependencies and resource conflicts.

As the superscalar architecture of a processor becomes more complex the difficulties of scheduling instruction issue become more complex. As such hardware devoted to resolving dependencies and deciding on instruction issue must grow as a proportion of the total processor hardware. Another way of understanding the superscalar architecture is as a dynamic instruction scheduler. As such the processor hardware decides dynamically which instructions to execute in parallel.

An alternative approach causes the compiler to statically schedule execution. This is the basic concept behind the VLIW architecture. The VLIW architecture demonstrates both advantages and disadvantages. The main advantage is the saving in processor hardware. In the VLIW architecture the compiler decides what can be executed in parallel and the hardware simply executes the instructions. There is no need to check for dependencies or decide on scheduling. The compiler has already resolved these issues. This means that much more processor hardware may be devoted to useful computation larger caches and other resources. As a result higher processor performance becomes possible.

There are however disadvantages associated with the VLIW architecture. First compilers may be harder to build. Secondly as application programs increase in size it may not always be practical to find enough instructions that can be done in parallel to fill all the available slots in an instruction queue. It is likely therefore that the majority of instructions in typical applications will have empty instruction or issue slots. This results in wasted space and larger code.

For a wireless handset DSP therefore there are advantages and disadvantages associated with both superscalar and VLIW architectures. A DSP capable of demonstrating the beneficial aspects of both superscalar and VLIW architectures while avoiding the detrimental or disadvantageous aspects of these architectures could result in significant processing and operational improvements. Accordingly there is a need for a wireless handset DSP capable of beneficially and synergistically integrating a superscalar architecture with a VLIW architecture for operating a wide variety of applications.

Techniques for mixed superscalar and VLIW instruction issuing and processing are disclosed which techniques improve both the operation of the processor and the efficient and more rapid processing of digital signal processor instructions for increasingly robust software applications for personal computers personal digital assistants wireless handsets and similar electronic devices as well as increasing the processor speed and service quality.

According to one aspect of the disclosed subject matter there is provided a method and a system for issuing and executing mixed architecture instructions in a multiple issue digital signal processor. The digital signal processor receives in a mixed instruction listing a plurality of digital signal processor instructions. The plurality of digital signal processor instructions includes a plurality of parallel executable instructions e.g. VLIW instructions or instruction packets mixed among a plurality of series executable instructions e.g. superscalar instructions . The series executable instructions are associated by various instruction dependencies. The method and system further identify in the mixed instruction listing the plurality of parallel executable instructions. Once identified the parallel executable instructions are first executed in parallel irrespective of any such instruction s relative order in the mixed instruction listing. Then the series executable instructions are executed serially according to said various instruction dependencies.

These and other aspects of the disclosed subject matter as well as additional novel features will be apparent from the description provided herein. The intent of this summary is not to be a comprehensive description of the claimed subject matter but rather to provide a short overview of some of the subject matter s functionality. Other systems methods features and advantages here provided will become apparent to one with skill in the art upon examination of the following FIGUREs and detailed description. It is intended that all such additional systems methods features and advantages that are included within this description be within the scope of the accompanying claims.

At a receiver unit the transmitted signal is received by an antenna and provided to a receiver RCVR . Within receiver the received signal is amplified filtered down converted demodulated and digitized to generate in phase I and Q samples. The samples are then decoded and processed by a receive RX data processor to recover the transmitted data. The decoding and processing at receiver unit are performed in a manner complementary to the coding and processing performed at transmitter unit . The recovered data is then provided to a data sink .

The signal processing described above supports transmissions of voice video packet data messaging and other types of communication in one direction. A bi directional communications system supports two way data transmission. However the signal processing for the other direction is not shown in for simplicity.

Communications system can be a code division multiple access CDMA system a time division multiple access TDMA communications system e.g. a GSM system a frequency division multiple access FDMA communications system or other multiple access communications system that supports voice and data communication between users over a terrestrial link. In a specific embodiment communications system is a CDMA system that conforms to the W CDMA standard.

IQ in IU keeps a sliding buffer of the instruction stream. Each of the six threads T T that DSP supports has a separate eight entry IQ where each entry may store one VLIW packet or up to four individual instructions. Decode and issue circuitry logic is shared by all threads for decoding and issuing a VLIW packet or up to two superscalar instructions at a time as well as for generating control buses and operands for each pipeline SLOT SLOT. In addition decode and issue circuitry does slot assignment and dependency check between the two oldest valid instructions in IQ entry for instruction issue using for example using superscalar issuing techniques. PLC logic is shared by all threads for resolving exceptions and detecting pipeline stall conditions such as thread enable disable replay conditions maintains program flow etc.

In operation general register file GRF and control register file CRF of selected thread is read and read data is sent to execution data paths for SLOT SLOT. SLOT SLOT in this example provide for the packet grouping combination employed in the present embodiment. Output from SLOT SLOT returns the results from the operations of DSP .

The present embodiment may employ a hybrid of a heterogeneous element processor HEP system using a single microprocessor with up to six threads T T. Processor pipeline has six stages matching the minimum number of processor cycles necessary to fetch a data item from IU . DSP concurrently executes instructions of different threads T T within a processor pipeline . That is DSP provides six independent program counters an internal tagging mechanism to distinguish instructions of threads T T within processor pipeline and a mechanism that triggers a thread switch. Thread switch overhead varies from zero to only a few cycles.

DSP therefore provides a general purpose digital signal processor with high performance and low power across a wide variety of signal image and video processing applications. provides a brief overview of the DSP micro architecture for one manifestation of the disclosed subject matter. Implementations of the DSP micro architecture support interleaved multithreading IMT . In this execution model the hardware supports concurrent execution of multiple hardware threads T T by interleaving instructions from different threads in the pipeline. This feature allows DSP to include an aggressive clock frequency while still maintaining high core and memory utilization. IMT provides high throughput without the need for expensive compensation mechanisms such as out of order execution extensive forwarding networks and so on. Moreover the DSP may include variations of IMT such as those variations and novel approaches disclosed in the commonly assigned U.S. patent Publication Nos. 20060206902 and 20060218559 which are entitled Variable Interleaved Multithreaded Processor Method and System and Method and System for Variable Thread Allocation and Switching in a Multithreaded Processor such disclosures are here referred to as the IMT Variations. 

The subject matter here disclosed deals with the execution model of a single thread. The software model of IMT can be thought of as a shared memory multiprocessor. A single thread sees a complete uni processor DSP with all registers and instructions available. Through coherent shared memory facilities this thread is able to communicate and synchronize with other threads. Whether these other threads are running on the same processor or another processor is largely transparent to user level software.

Turning to the present micro architecture for DSP includes control unit CU which performs many of the control functions for processor pipeline . CU schedules threads and requests mixed 16 bit and 32 bit instructions from IU . CU furthermore schedules and issues instructions to three execution units shift type unit SU multiply type unit MU and load store unit DU . CU also performs superscalar dependency checks. Bus interface unit Blu interfaces IU and DU to a system bus not shown .

SLOT and SLOT pipelines are in DU SLOT is in MU and SLOT is in SU . CU provides source operands and control buses to pipelines SLOT SLOT and handles GRF and CRF file updates. CU accepts external inputs such as interrupts and reset and supports emulation unit EU . CU also handles exceptions due to protection violations occurring during address translations. Mixed 16 and 32 bit instructions can be issued in parallel up to four at a time in one embodiment of micro architecture . However many different variations of 16 bit 32 bit and other length instructions may be implemented in other embodiment all within the scope of the disclosed subject matter. Micro architecture furthermore may also support moving two 64 bit double words from CU for each cycle.

GRF holds thirty two 32 bit registers which can be accessed as single registers or as aligned 64 bit pairs. GRF also holds all pointer scalar vector and accumulator data and provides flexibility for service as a compiler target. CRF holds special purpose registers such as program counter status register.

Micro architecture features a hybrid execution model that mixes the advantages of superscalar and VLIW execution. Superscalar issue has the advantage that no software information is needed to find independent instructions. There is no added code size or encoding inefficiencies to provide multi issue execution. Additionally superscalar issue can find parallel instructions over branch boundaries which can be difficult for a compiler.

The advantage of VLIW execution is that the software may identify many more than two instructions for parallel execution especially in software pipelined loops which are typical of DSP code. Micro architecture therefore combines the strengths of both execution models by creating a hybrid model. The execution model of micro architecture communicates VLIW packet information for packets of three or more instructions. For parallelism of one and two instructions micro architecture is responsible for multi instruction execution via dual superscalar issue. In this way micro architecture can deliver wide issue parallelism with a minimal code size penalty. Parallelism over branch boundaries in control code may also be exploited.

As described in further detail below instructions are encoded using either 16 bit instructions or 32 bit instructions. The two instruction sizes can be freely mixed in a program. These mixed size instructions can be packetized in groups for parallel execution. The packets may be of variable size. The 16 bit instruction set is chosen to carefully match the needs of a compiler generating dense control code. For a more complete understanding of the approach that one embodiment of the disclosed subject matter may employ for distinguishing instruction sizes and packets of mixed size instructions refer to commonly assigned U.S. patent Publication No. 20060218379 entitled Method and System for Encoding Variable Length Packets with Variable Instruction Sizes. 

DSP using micro architecture specifically supports the following classes of applications 1 communications signal processing e.g. modems 2 video processing e.g. H.264 format 3 image processing 4 audio processing 5 3 D graphics front end software and 6 supporting control code protocol stacks RTOS etc. As such DSP issues both VLIW instruction packets as well as and individual superscalar issue instructions. Issue width for individual instructions can range from one instruction per issue slot to maximum VLIW packet plus one. As an example DSP may issue as many as four instructions in a VLIW packet per issue slot. Also DSP may issue one or two instructions using superscalar issue.

In operation DSP constantly looks at the instruction stream to find a VLIW instruction packet that may be inserted into IQ . If such an instruction packet exists then IU inserts the VLIW instruction packet into IQ . Similarly DSP looks for an individual instruction in the instruction stream and loads the instruction into IQ . These instructions are issued in superscalar mode provided that the two such instructions do not possess registry dependencies and no hardware hazard exists described in more detail below .

CU therefore operates at the center of the DSP core in terms of both connectivity and physical placement to support interleaved multi threading IMT . IMT allows for high throughput without complex out of order execution logic. In IMT the DSP switches to a different thread after each instruction fetch. Since IMT eliminates control and data dependencies between instructions in the pipeline pipeline hazards cannot arise and the processor pipeline can be easily build without the necessity of complex forwarding paths. This leads to processor pipeline demonstrating no hardware interlocking. Moreover the context switching overhead is zero cycles. IMT requires at least as many threads as pipeline stages in the processor.

In each of pipelines slots SLOT SLOT six pipeline stages occur beginning with a decode stage and ending with a write back stage for register update. After the decode stage decodes an instruction and initiates a register file read a register file stage performs a register file read and launches the data to execution units. Register file read is possible in both decode and register file stages because of DSP s IMT micro architecture which provides a dedicated GRF and CRF file for each thread. The staggered access of register files in the decode and register file read stages reduces the number of read ports required for the register file. Data from the GRF or from the instructions is provided to the four execution slots with the opcode during the register file stage. Branch instructions are resolved during the register file stage and IR is directed to get the next sequential or the target address of the branch.

Two execution stages support instruction execution while a third execution stage provides both instruction execution and register file update. Moreover a fourth stage provides for registry file updating. During the execution and write back stages IU builds the next IQ entry to be executed. Finally a write back stage performs register update. The staggered write to register file operation is possible due to IMT micro architecture and saves the number of write ports per thread. Because the pipelines have six stages CU may issue up to six different threads.

The following discussion describes the operation of one embodiment of decode and issue circuitry . Decode and issue circuitry decodes the instructions provided by IU and issues the opcode and immediate operands to the execution units SU MU and DU . If decode and issue circuitry receives a VLIW packet the instructions align with the slots and no steering is required. Because VLIW instructions within the packet do not have any register dependencies no dependency check occurs. IQ may provide up to four superscalar instructions to decode and issue circuitry at a time. And DSP can issue maximum of two instructions if there are no resource collisions or register dependencies.

In case of superscalar instructions slot allocation and dependency check for the two instructions is necessary. Decode and issue circuitry performs slot allocation for assigning an instruction to a slot. At such slot the instruction may be executed. Decode and issue circuitry also performs registry dependency checking to ensure that younger instruction I does not use results generated by older instructions I . If the dependency checks pass I I are issued. In the case of a dependency between I and I only I is issued.

Decode requirements of superscalar instructions and VLIW packets are slightly different. Not much decoding is required for VLIW packet. This is because with VLIW instructions the compiler assures that that there are no register dependencies within the packet. Similarly VLIW packets require no instruction steering or execution slot allocation because the compiler also aligns instructions with the execution slots. The only decode performed with VLIW instructions is for detecting whether the instructions have certain Rs or Rt fields described below and whether operand sizes are 32 bits or 64 bits. DSP uses this information to turn on the enables for GRF for 32 or 64 bit reads so as to reduce energy consumption.

In contrast for superscalar instruction issue slot assignments according registry dependences and hardware hazards must occur. In addressing superscalar instructions decode functions recall that DSP may issue a maximum of two superscalar instructions in a cycle. A main reason that DSP becomes a single issue machine is that slot resource collision and register dependencies arise between the two instructions. Moreover superscalar instruction issue requires instruction steering as I can be steered to any of the four slots SLOT SLOT according to the instruction class. Slot collision detection and register dependency check may occur in the decode stage.

One embodiment of the disclosed subject matter includes a slot collision avoidance algorithm to resolve a slot collision or resource hazard between I and I. When such occurs I the younger instruction is not issued in the decode stage. Instead I is issued once the I instruction is committed. The optimal slot allocation solution for I and I includes I slot allocation being dependent on I slot allocation and vice versa. therefore shows one embodiment of table for depicting the result of slot allocation algorithm for instructions I and I.

In each entry indicates the slot allocated to I and slot allocated to I. The term NG no go indicates that I the older instruction will not be issued. Those cells with the X indicate that such a situation cannot happen. As an example indicates I is allocated to SLOT and I is allocated to SLOT. Similarly NG indicates I is allocated to slot and I is not issued. The cells with horizontal hash shading indicate cases where I slot allocation depends on I. Similarly cell with vertical shading marks indicate cases where I slot allocation depends on I.

In certain situations DSP operates as a single issue superscalar machine due to structural hazards. These hazards occur when both I and I are ST ICLASS S ICLASS M ICLASS. Register dependency can make DSP a single issue machine. There are the following types of dependencies between the older and younger instruction. These include a write after write hazard WAW wherein two instructions are writing to the same target. A read after write RAW hazard occurs when a younger instruction is reading the target of the older instruction. However if the older and younger instructions issue together the read receives the old data. In the present embodiment a WAW hazard is not common. Accordingly one embodiment of DSP does not detect this type of register hazard. So the older and younger instructions are issued even if they have a WAW hazard. Then the younger instruction may be discarded in the decode stage. The RAW hazard is detected in the decode stage and in this case the younger instruction is not even issued. It will be issued in the future thread cycle.

VLIW packet instructions are aligned to their corresponding slots and do not require steering. In decode stage instruction steering DSP can issue two superscalar instructions in one cycle and they could go to any of the four execution slots SLOT SLOT if no resource collision occurs.

At node slot allocation dependency checks and issue for I and I may occur. Path depicts I being replayed to node . Path shows I being committed and I not being valid for flow back to node . Alternatively in path I collides with I and I is committed to move to node .

At node slot allocation dependency checking and issue of I and I occurs. From node I may be replayed along path back to node . Or along path I may be committed and I is not valid causing flow to return to node . Alternatively if I collides with I and I is committed then flow goes along path to node .

At node I issue occurs. From node I replay may occur along path back to node . From node along path I is committed and process flow returns to node .

Now no dependency checking or slot allocation is required for VLIW packet operations since the instructions are parallel. In case of superscalar issue however slot allocation and RAW register and predicate dependency check are required. For I and I dependency checks and slot allocation occurs during the decode stage.

DSP always tries to issue two instructions per cycle to maximize performance. As a result of the DSP circuitry the micro architecture and the various slot allocation dependency checking and instruction issue steps and processes described above the present embodiment provides an efficient process for the mixed issuing and processing of superscalar and VLIW instructions. The helps to establish a robust digital signal processing environment for wireless handset operations.

In summary therefore the disclosed subject matter provides a method and a system for issuing and executing mixed architecture instructions in a multiple issue digital signal processor receives in a mixed instruction listing a plurality of digital signal processor instructions. The plurality of digital signal processor instructions includes a plurality of parallel executable instructions e.g. VLIW instructions or instruction packets mixed among a plurality of series executable instructions e.g. superscalar instructions . The series executable instructions are associated by various instruction dependencies. The method and system further identify in the mixed instruction listing the plurality of parallel executable instructions. Once identified the parallel executable instructions are first executed in parallel irrespective of any such instruction s relative order in the mixed instruction listing. Then the series executable instructions are executed serially according to said various instruction dependencies.

The approach of the disclosed subject matter may be used in operating systems for combining the advantages of both VLIW and superscalar instruction processing. In an operating system VLIW instruction issuance may occur frequently. This is because operating system instructions are frequently of the form requiring 1 the checking of a certain condition and 2 executing a responsive instruction. This creates minimal dependencies and allows for the rapid identification and issuance of VLIW instructions.

The processing features and functions described herein can be implemented in various manners. For example not only may DSP perform the above described operations but also the present embodiments may be implemented in an application specific integrated circuit ASIC a microcontroller a microprocessor or other electronic circuits designed to perform the functions described herein. The foregoing description of the preferred embodiments therefore is provided to enable any person skilled in the art to make or use the claimed subject matter. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without the use of the innovative faculty. Thus the claimed subject matter is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

