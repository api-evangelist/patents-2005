---

title: Adaptive picker for selecting data in disparate information systems
abstract: An adaptive picker for selecting data in disparate information systems is provided. The adaptive picker may be implemented by an application to pick items from one or more data stores, which are associated with other applications. The adaptive picker determines items provided by the data store that are available for picking and the types of data associated with the items. The adaptive picker receives key information provided by a user through the first application and searches for the available items based on the key information. The adaptive picker also filters the items to identify a desired item. The adaptive picker can determine the filtering capabilities associated with the data stores and automatically adapt to these filtering capabilities. The adaptive picker can retrieve a desired item with a key information search that matches the key information with a unique identifier associated with desired item. The key information search enables a user to pick an item without browsing. If the search returns multiple items, the adaptive picker can provide a disambiguation menu for selecting the desired. The search results can also be filtered by context determined by the adaptive filter. The context may include any parameter, such as the identity of a user, the time of day, an application the user is working within, an organizational discipline of the user, or the like.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07647304&OS=07647304&RS=07647304
owner: Microsoft Corporation
number: 07647304
owner_city: Redmond
owner_country: US
publication_date: 20050909
---
This application is related to U.S. Non provisional application Ser. No. 11 191 771 filed on Jul. 28 2005 the content of which is hereby incorporated by reference.

Applications in today s computing environment enable users to perform more tasks than ever before. To effectively perform a task with a given application it is often desirable to access and use data that are generated and managed by other applications. Enabling one application to pick data handled by another application is typically not an easy undertaking. Generally the picker component is tightly bound to the data source s application programming interface API and the user interface of the component is tailored to the type of data being picked. This tight binding presents a problem in dynamic applications such as portal applications where users want to connect to new data sources and pick new data types without writing code.

An effective solution for providing the ability for picking data from disparate data sources without undue complexity continues to elude those skilled in the art.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

The present example provides an adaptive picker for selecting data in disparate information systems. The adaptive picker may be implemented by an application to pick items from one or more data stores which are associated with other applications. The adaptive picker determines items provided by the data store that are available for picking and the types of data associated with the items. The adaptive picker receives key information provided by a user through the first application and searches for the available items based on the key information. The adaptive picker also filters the items to identify a desired item. The adaptive picker can determine the filtering capabilities associated with the data stores and automatically adapt to these filtering capabilities. The adaptive picker can retrieve a desired item with a key information search that matches the key information with a unique identifier associated with desired item. This search enables a user to pick an item without browsing. If the search returns multiple items the adaptive picker can provide a disambiguation menu for selecting the desired item. The search results can also be filtered by context determined by the adaptive picker. The context may include any context parameter such as the identity of a user the time of day an application the user is working within an organizational discipline of the user or the like.

Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.

Adaptive picker is configured to enable applications to pick data from disparate data sources such as data stores . As shown in adaptive picker may include filters application user interface API and registration manager . Adaptive picker is configured to interact with data stores using API . API is configured to interact with any type of data stores and to determine metadata associated with the data in data stores . The metadata may include any information about the data in data stores such as data types formats or the like. The determined metadata may also identify and describe what items in data stores are available for picking. The items can be any type of data in data stores such as records documents files and the like. Adaptive picker is configured to enable users to pick available items in data stores . Adaptive picker interacts with the users through picker UIs . An example picker UI will be discussed below in conjunction with .

Adaptive picker may include many different mechanisms for determining the items available for picking. For example adaptive picker may be configured to gather information about the data that are provided in data stores . Adaptive picker may also include registration manager to handle metadata from data stores . Registration manager is configured to enable data stores to register with adaptive picker . Data stores may identify items that are available for picking in the registration. Registration manager may be configured to maintain information about the items that are available from each data store and to provide these items for picking. Adaptive picker is then configured to retrieve data associated with the picked items from data stores .

Adaptive picker is configured with various mechanisms for picking items from data stores . For example adaptive picker is configured to pick items with a key. This mechanism enables a user to pick data without browsing by simply entering a key in the picker UI. Adaptive picker may also be configured to retrieve a set of close matching items associated with the key where there are multiple items associated with the key. This mechanism allows a user to select a desired item from the set of returned items. For example adaptive picker may configure a picker UI to show a disambiguation menu in response to the user entering a non unique key.

Adaptive picker is also configured to pass data retrieved from data store through a set of filters. Adaptive picker can employ one or more of these filters to filter the retrieved data such as by exact match by wildcard by range by user and the like. Filtering the results enables a user to pick from a set of relevant items associated with a search without inundated the user with items that are not relevant to the search terms or the user. Example filters will be discussed below in conjunction with .

Adaptive picker is configured to determine filtering capabilities associated with data stores and to automatically adjust the filtering based on the determined filtering capabilities. In this manner when a new data store is added or if the existing data stores are modified with new capabilities adaptive picker can automatically determine and provide new filtering experience to the user without requiring new code. Adaptive picker is also configured to determine context information about the user and applications . The context information may include specific information about the user the applications within which the user is working the current tasks performed by the user or the like. Adaptive picker may be configured to provide the context information to data stores to facilitate data filtering.

The components and their configurations shown in are shown as an example. In actual implementation different components may be used to achieve the same functionalities. For example in another implementation the registration manager may be a separate component from adaptive picker . Likewise in alternative implementation rather than a separate component adaptive picker may be incorporated into an application.

User input filter may include filters . Limit filter is configured to limit the number of items returned from a search. Exact match filter is configured to filter search results to obtain items that are an exact match with the search string or items with a certain field column characteristic that exactly matches the search string. Wild card filter is configured to filter search results to identify items that include the search string. Wild card filter may be configured to implement the functionalities of start match filter end match filter and contain match filter . Start match filter is configured to filter search results to identify items that starts with the search string while end match filter is configured to identify items that ends with the search string. Contain match filter is configured to identify items that contain the search string somewhere in the middle of the data associated with the items. Range filter is configured to filter search results that fall within a specified range.

Filters shown in may be implemented by the adaptive picker along or in combination. Example filters are shown for illustrative purpose. In actual implementation more less or different filters may be implemented by adaptive picker to achieve similar functionalities. Adaptive picker does not need to implement a specific set of filters and is configured to perform the picking functionalities with any filtering capability offered by the backend systems. The abstractions provided by adaptive filter described above can map to one or more backend filtering constructs.

At block an input method selection for item search is received. At decision block a determination is made whether the selected method is key information search or field specific search. If the selected method is field specific search process moves to block where a field searching process is enabled. An example field searching process will be discussed below in conjunction with .

Returning to decision block if the selected method is key information search process continues at block where the key information is received. At block a key information search is performed with the received key information as input. The key information search enables the adaptive picker to determine an item in data stores that is identified by the key information. For example the item may be a record that is identified by an identifier unique to that record. At decision block a determination is made whether any item is found by the key information search. If so process moves to decision block .

Returning to block if no item is found by the key information search process goes to block where an exact match filter is called with the key information as input. The exact match filter enables the adaptive picker to determine items that include a text string that exactly matches the text string provided in the key information. For example items returned by the exact match filter may include a title that matches the key information. At decision block a determination is made whether any item is found using the exact match filter. If so process moves to decision block .

Returning to block if no item is found using the exact match filter process continues at block where a wild card filter is called with the key information as the input. The wild card filter enables the adaptive picker to determine items with data that include a text string containing the text string provided in the key information. For example the key information may match a portion of the title associated with the items returned by wild card filters. At decision block a determination is made whether any item is found using the wild card filter. If so process moves to decision block . If no item is found process goes to block where a message for no matching item is returned.

At decision block a determination is made whether more than one items are returned. If not the process goes to block . If multiple items are returned process moves to block where a disambiguation menu for selecting an item is presented. The disambiguation menu enables the user to select the exact item that is desired from among the multiple returned items. At block the item selected by the process is retrieved from the data store and returned.

It is to be appreciated that process also includes context filtering based on the system filters. The context is automatically determined by the adaptive picker. Values associated with the context are sent to the backend system for the searches described above.

Returning to decision block if at least one item is found process moves to block where a determination is made whether more than one items are found. If not process goes to block . If multiple items are found process goes to block where the process enables a selection of an item from the multiple returned items. For example a disambiguation menu may be presented to enable the selection. At block the selected item is retrieved from the data store and returned.

User interface includes two mechanisms for picking items managed by the CRM application. The first is a key information searching mechanism. Key information may be entered in textbox . Key searching may be initiated by activating trigger . The string entered in textbox will be used as the key information for the key searching. The second mechanism for picking items managed by the CRM application is field specific searching which may be initiated by activating trigger . Field specific searching will be discussed in conjunction with . As shown in screenshot items associated with products may also be picked using the same mechanism.

As shown in user interface may include a field selector and a textbox . Field selector is configured to display all of the fields available in the data stores. Field selector enables a user to select one or more available fields to be searched. The user may enter a string in textbox as a search key for searching in the selected field. The field specific search may be initiated by activating trigger .

Depending on the exact configuration and type of computing device memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. Additionally computing device may also have additional features functionality. For example computing device may include multiple CPU s. The described methods may be executed in any manner by any processing unit in computing device . For example the described process may be executed by both multiple CPU s in parallel.

Computing device may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by storage . Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory and storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may also contain communications device s that allow the device to communicate with other devices. Communications device s is an example of communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both computer storage media and communication media. The described methods may be encoded in any computer readable media in any form such as data computer executable instructions and the like.

Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well know in the art and need not be discussed at length.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

