---

title: Document generation apparatus and file conversion system
abstract: A document generation apparatus has a comparator that compares the type of language of original document data and the type of language provided at a reproduction terminal that reproduces the original document data, and a generator that generates document data with font based on the original document that does not include a character font when results of a comparison performed by the comparator indicate that both types of languages match, and generates document data with font based on the original document that does include a character font used in the original document data when the results of the comparison performed by the comparator indicate that both types of language do not match.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07570374&OS=07570374&RS=07570374
owner: Canon Kabushiki Kaisha
number: 07570374
owner_city: Tokyo
owner_country: JP
publication_date: 20050518
---
This invention relates to a document generation apparatus for creating a document file capable of carrying fonts such as PDF for example and more particularly to a file conversion system installed in a client server system.

In order to further an understanding of the present invention a description is given first of the conventional technology for the Web. Amid the rapid development of the Internet and the proliferation of Web servers Web based business processing is being propelled forward. A Web server can support HTTP Hyper Text Transfer Protocol and FTP File Transfer Protocol and the like specify a computer or the like connected to a network and in response to a request transmit to a client on the network a document data file or the like specified by a URL Uniform Resource Locator and written in HTML Hyper Text Markup Language . A client computer such as a personal computer or the like then executes an application program called a Web browser having the ability to display the data the HTML document written in HTML and displays the HTML document received from the Web server. Usually the Web browser hereinafter called simply a browser is equipped with the ability not only simply to display the HTML document but also in accordance with the HTML description to input data on a display screen and to send that input data back to the Web server. It should be noted that Web based refers to the ability to specify a URL from the client and to exchange data with the server.

In a Web based business system a browser that can display and input data is installed in the client computer and an operator executes such business processes as display and input of the browser as a user interface. In this case information input from the client browser is accepted by the Web server the Web server or another server that is connected to the Web server processes the information and information showing the result obtained is then transmitted back to the client browser. At the client operations such as displaying the information received from the server and the like are carried out as necessary. Thus business is conducted by a procedure like the foregoing and the operator can obtain results information .

As described above when data such as a document or an image is transferred to the Web browser from the server a file such as these data files and the like are placed in a particular directory indicating a document route in HTTP terminology hereinafter called a directory in the Web server file system that can be accessed from the client. If the client requests that file the URL for that file is transferred to the client. At the client if the URL is specified and an FTP or the like used processing is carried out on the server and the desired file is transmitted to the client.

As one type of information processing by the server a conversion from an application file created using an application program for creating documents charts images figures and the like to an intermediate format file an intermediate file such as a PDF file or the like is known for example see Japanese Laid Open Patent Publication No. 2000 284937 . When the intermediate file obtained as a result of that conversion is reproduced sometimes character rendering does not go as planned due to differences in the font environments of the client and the server. It should be noted that reproduction of the intermediate file means reproducing a document from an intermediate file by displaying or printing the document that comprises the content of the intermediate file. In addition the font environment includes in the operating system that manages the resources of the computer the type of language managed as one resource and the types of font that can be used by the computer. The operating system language is English if for example the operating system is an English language version or Japanese if the operating system is a Japanese language version. It is possible to switch languages depending on the operating system type but even in that case typically a fixed language is specified.

The intermediate file contains rendering commands that describe the objects that form the document and the operands that indicate the positions sizes and so forth of the objects. Broadly the rendering commands can usually be divided into three main types depending on the type of object Rendering commands related to characters that output characters rendering commands related to images that output bitmap images and the like and rendering commands related to graphics that output such figures as lines circles squares and the like.

A description is now given of the rendering commands related to characters of Microsoft Corporation s Windows registered trademark operating system. is a schematic diagram showing information required for character rendering. Although shows but one example generally the character rendering commands require the following four types of font information as operands 

Information that identifies the character. Uses character codes in accordance with previously determined code systems such as ASCII ShiftJIS Unicode etc.

Includes such information as font face names suitable for character rendering whether there is an italic bold instruction indicating modification of a glyph the number of points indicating the size of the characters and so forth.

Includes information indicating the character rendering shape specified by such face names as Gothic Mincho and the like. Has a glyph for each character. Two main types of font information formats bitmap font and outline font defining a variety of formats such as TrueType registered trademark OPENTYPE registered trademark and so forth.

Unless all of the foregoing information is in good order character rendering will not take place as the user intends. Ordinarily the character rendering data in the intermediate file includes character rendering commands using the three types of font information described above that is character code font attributes and rendering attributes. Then usually when executing character rendering on a computer or the like that is when reproducing the intermediate file based on the font face name included in the character rendering commands the computer checks the font form information for the same font face name that the OS Operating System that manages the computer has and renders the character.

However the specified font form information is not always present in all computer environments it can also be said to be a resource that is provided by the OS . In other words it is also possible that the font form information present in the computer environment in which the user creates the intermediate file called the intermediate file creation environment is not present in the computer environment in which character rendering is carried out called the character rendering execution environment . If the font desired by a user who has created application data does not exist in the computer environment in which character rendering is carried out then three techniques conventionally are known for carrying out character rendering using the font that the user desires or in a font of a form close to the desired font namely font substitution bitmap substitution and font embedding. The following is a description of each of these three techniques with reference to which is a diagram showing rendering results in cases in which each of these techniques is used.

Font substation is a method in which in the character rendering execution environment rendering is carried out using a different font that resembles the font attributes in the character rendering data intermediate file . Common methods of designating the different font are a method that uses a conversion table in which the application that carries out the character rendering is predefined and a method that uses a conversion table in which the OS is predefined. During character rendering data creation the normal character rendering commands character code font attributes rendering attributes are created but because the largest data size font form information is not required this method has the advantage that the character rendering data size is small. On the other hand a drawback of this method is that because a different font is used there is a possibility that character rendering of a form completely different from that which the user desires may be carried out as shown by character pattern in . Where the font that corresponds to the desired character code does not exist in the character rendering execution environment rendering in which the output is not recognizable as a character might be carried out. For example ordinarily a Japanese language font does not exist in the computer environments used in the United States and Europe. Accordingly if an intermediate file is created under a typical Japanese capable OS and that intermediate file is then reproduced in a typical U.S. or European character rendering execution environment for example under an English capable OS the font that corresponds to the character code in the intermediate file creation environment does not exist in the character rendering execution environment and as a result rendering of an unidentifiable character is carried out.

Bitmap substitution is a method in which the character is converted into a bitmap at the time the character rendering data intermediate file is created and the character rendering is converted into a bitmap rendering. To the ordinary observer the output is the same as the character rendering desired by the user. However because it is a bitmap as shown by character pattern in the quality of the character may be adversely affected by the resolution of the bitmap during enlargement and reduction.

Font embedding is a method in which in addition to the character rendering commands character code font attributes rendering attributes font form information is embedded in the character rendering data intermediate file and the font form information used by the character rendering data is imported into the character rendering execution environment. The font form information embedded on the character rendering data in the character rendering execution environment is registered as a font provided by that environment and the character rendering data is character rendered using that font. Accordingly font embedding has the advantage of begin able to obtain the output desired by the user even if the font specified by the character rendering commands in the character rendering data does not exist in the character rendering execution environment. However because the font form information is embedded in the character rendering data the character rendering data size tends to grow large. This problem becomes particularly acute when embedding fonts with many character types such as the Japanese language font.

Of the three techniques described above 1 font substitution is a process conducted in the character rendering execution environment. By contrast 2 bitmap substitution and 3 font embedding are processes conducted during character rendering data creation. In addition which of these three techniques is used typically is determined by a user on the character rendering data creation side specifying the technique for each font on for example a user interface hereinafter UI .

Of the three techniques described above it is preferable to use 3 font embedding in order to render faithfully in the character rendering execution environment the font desired by the user on the character rendering data creation side. This is because 3 font embedding as described above registers the embedded font information in the character rendering execution environment prior to character rendering and thus securely renders characters in a format desired by the user on the character rendering data creation side.

In order to render faithfully the font desired by the character rendering data creation side user in the character rendering execution environment it is preferable to use font embedding in the character rendering data. However a problem with embedding the font in the character rendering data is that the character rendering data size increases. That is from the standpoint of data size it can be said to be preferable to embed only the fonts that are used in the character rendering data and that moreover do not exist in the character rendering execution environment without embedding the fonts that do exist in the character rendering execution environment. In order to accomplish that it is necessary for the character rendering data creation side user to know in advance which fonts are contained in the character rendering execution environment. However determining which fonts should be embedded from among the many existing types of fonts imposes a heavy burden on the user who creates character rendering data.

In addition which of the three techniques described above to use is ordinarily determined for each font when converting using for example a user interface UI of a program that executes the conversion. However the very act of the user on the character rendering data creation side specifying which of the fonts should be embedded from among the many different types of fonts itself imposes a heavy burden on the creation side. This problem becomes particularly acute when the font environment in which the character rendering data is created and the font environment in which the character rendering is carried out are very different.

In addition it can happen that even after embedding a character font when it comes time to execute character rendering the font specified by the character rendering commands in the character rendering data does not exist in the character rendering execution environment. In a case such as this the computer that reproduced the intermediate file carries out the 1 font substitution described above. However as described above due to font substitution a character of a form different from that intended when the original data was created may sometimes be reproduced. Consequently in order to reproduce the intermediate file faithfully and as intended in the character rendering execution environment an ability to obtain the font environment of the computer that is to execute the character rendering and automatically determine the font to be embedded in the character rendering execution environment is desirable.

The present invention is conceived in light of the foregoing conventional examples and has as its object to provide a document generation apparatus and file conversion system that can generate an intermediate file in which font embedding is optimized without the need for an awareness of the user s own font environment.

In addition the present invention has as its object to provide a document generation apparatus and file conversion system that when generating the intermediate file from the original data creates an intermediate file that can reproduce the original data faithfully without the user specifying the font environment on the terminal that reproduces the intermediate file.

In addition the present invention has as its object to provide a document generation apparatus and file conversion system that when generating an intermediate file transmitted as an attached file to an e mail from the original data creates an intermediate file that can reproduce the original data faithfully in the recipient font environment.

In addition the present invention has as its object to provide a document generation apparatus and file conversion system that satisfies all the requirements of intermediate file readability size restriction and operator operability.

The above described objects of the present invention are achieved by a configuration like that of the following.

That is the present invention provides a document generation apparatus that generates document data with font that can include a character font based on original document data comprising 

a comparator that compares the type of language of the original document data and the type of language provided at a reproduction terminal that reproduces the original document data and

a generator that generates document data with font based on the original document that does not include a character font when results of a comparison performed by the comparator indicate that both types of languages match and generates document data with font based on the original document that does include a character font used in the original document data when the results of the comparison performed by the comparator indicate that both types of language do not match.

Alternatively the above described objects of the present invention are achieved by a configuration like that of the following.

That is the present invention provides a file conversion system that connects a server device and a client device 

an acquisition unit that obtains a font environment of a reproduction client device that reproduces an intermediate file and

a font environment transmission unit that transmits a conversion request for converting an application file created using an application program to an intermediate file of a predetermined format as well as the font environment of the reproduction client device to the server device 

a converter that converts the application file to an intermediate file based on the conversion request and the font environment received from the client device 

an embedding unit that carries out font embedding according to the font environment when converting to an intermediate file and

According to the present invention the user can generate an intermediate file that optimizes font embedding automatically without the need for an awareness of the font environment of the user.

In addition because file conversion takes place on the server an intermediate file that optimizes font embedding can be generated and provided to the client even for an application file that includes a font that does not exist on the client provided that that font is on the server.

In addition because the intermediate file is generated by the server there is no need for the client to have a program for carrying out any special process. As a result the client processing capability can be relatively limited thus making it possible to provide a low cost client device.

In addition when generating an intermediate file from original data it is possible to create an intermediate file that can reproduce the original data faithfully in the font environment of the terminal that reproduces the intermediate file without the user having to specify the font environment for such reproduction terminal.

In addition when generating an intermediate file transmitted as an attachment to e mail from original data an intermediate file can be generated that reproduces the original data faithfully in the recipient font environment.

Other features objects and advantages of the present invention will be apparent from the following description when taken in conjunction with the accompanying drawings in which like reference characters designate the same or similar parts throughout the figures thereof.

Preferred embodiments of the present invention will now be described in detail in accordance with the accompanying drawings.

In the client is a personal computer or other such information processing apparatus. The client includes a Web browser an image display unit to which a display is connected a font environment acquisition unit a data input output unit and an intermediate format analyzer . Furthermore a data storage unit is also contained in the client for storing application data files created with a document processing program or other such application program not shown and for storing PDF files and other such intermediate files received from the server. In addition to these system information such as a Language ID and font files that the operating system of the client holds are also saved in the data storage unit . In addition a database of software resources and hardware resources that the client has as well as data that the client in the present embodiment checks are also saved in the data storage unit .

The Web browser displays HTML documents received from the server through the data input output unit on the display through the image display unit . The typical Web browser can display an HTML document received from the user. In addition if there is some description in the displayed HTML document data to input some sort of data on the display screen the typical Web browser enables the user to input that data into a column corresponding to that description. Moreover a description can be given to transmit the data thus input to the server and the input data can be transmitted to the server if the user acts in accordance with the description. It should be noted that such description is typically supported by any commercially available representative Web browser.

The font environment acquisition unit obtains the font environment from the OS. In the present embodiment a Language ID that is language identification information is used as the font environment. The OS maintains the current country setting information of that system. For example with the Windows registered trademark operating system the OS always maintains the system locale. In addition to the language environment the locale also includes descriptive methods for dates times and the like currency units and so forth. A unique ID assigned to each country region is one type of locale information and it is this ID that in this invention is called Language ID. Although the present embodiment uses Language ID any means may be used provided that such means is capable of acquiring the client font environment. In addition if the user specifies on the Web browser the Language ID of the computer that reproduces the intermediate file then it is also possible to create an intermediate file suitable for the specified language region font environment instead of the font environment of the client that requests creation of the intermediate file which will be described in detail with reference to a third embodiment .

The data input output unit communicates and exchanges data with the server through a telephone line LAN or the like . In addition in an input output device such as a keyboard a pointing device or the like is also connected to the data input output unit .

If the HTML document received from the server is a file in intermediate format that is an intermediate file then the intermediate format analyzer analyzes the intermediate file and displays it on the display through the image display unit or alternatively prints out the file from a printer connected to the client. Specifically the Adobe Reader or the like from Adobe Systems Incorporated used when the intermediate file is a PDF file corresponds to the format analyzer .

The network that connects the client and the server may be a LAN the Internet a wireless network or the like the particular form of which is unimportant so long as it can support Web environment communications procedures.

The server is at least a Web server that supports HTTP and like the client is a personal computer or other information processing apparatus. The server must further support file transfer protocols such as FTP or WebDAV. The server contains a network communications controller a data storage unit a file conversion manager and a file converter .

The server receives data from the Web browser analyzes the data and in some cases depending on the data received replies to the Web browser with data searches and results from the data storage unit . At these times if there is a description provided in the HTML document to input by button from the Web browser and transmit the results to the server then the Web browser displays the buttons and data is transmitted to the server when the user performs an operation such as pressing the buttons on the Web browser . The server analyzes the data received based on the HTML document transmitted to the client and if necessary responds to the Web browser .

The network communications controller because the server functions as a Web server transmits data to the client or receives data from the client so that.

The data storage unit is a database and stores application data files that comprise the original data to be converted. An application data file may for example be a data file created using an application program such as a document creation program. It should be noted that although the present embodiment is described terms of an arrangement in which an application data file targeted for conversion is stored in the server in advance alternatively the application data file to be converted may be input from the client through the Web browser .

The file conversion manager when it receives an application data file to be converted from the client determines whether or not an application program that can handle that application data file is present in the server and issues a conversion instruction to the file converter if such an application program is present. This determination if the Windows registered trademark file system is being used can be carried out on the basis of the application data file extension for example and if the application data file has as attributes the name of the application that handles the file a determination can be made on the basis of those attributes. The file converter accepts the application data file to be converted from the client and converts the file into an intermediate format in which the embedded font is optimized according to the font environment of the computer that reproduces the intermediate file in this embodiment the Language ID . The file converter as shown in is composed of an application capable of printing the application data file a graphic engine and a printer driver . The printer driver here is not a driver that controls the printer as a logical device but software that converts data commands input from the graphic engine into an intermediate file command sequence and outputs it as an intermediate file.

An image is displayed on the display in the case of the client which is connected to the network or the like through an I O interface . An operator enters necessary input using a keyboard and or pointing device

Next a description is given of the outlines of the system of the present invention using the flow chart shown in . When a server document application data file from the client is read first in a step S the browser program is started at the client. The browser may be any commonly used Web browser or the like.

Next in a step S the user inputs the URL that executes the service of the system into the URL field using a keyboard and the like. When the URL is input the HTML document corresponding to the input URL is read out and displayed. In the present embodiment the input URL is an address for providing a document in an intermediate format by the server . Then when that URL is specified a connection is made to the server and the HTML document including columns is read from the server and displayed. The drop down menu is a field in which a list of application data files provided by the server is displayed. The client user can select a desired application data file from this list. A database table that correlates file IDs and file names as shown for example in is held in the data storage unit of the server . In addition a description to display in the drop down menu all the file names in the database table as file selection buttons is included in the HTML document that the server transmits to the client . The browser that receives that HTML document in accordance with that description displays the file selection buttons . In other words because the application data file names are displayed as buttons in accordance with the address URL input into the URL field the file selection buttons display the file names read from the server data storage unit . In addition besides the selection buttons a conversion button for starting the conversion process is included in the HTML document displayed at the client .

Next in a step S the user presses one of the file name selection buttons displayed in the drop down menu using a pointing device or a keyboard. When the file name selection button is pressed a description is given to store a file ID that corresponds to a file name selected in a step S in the file ID column of a client request table like that shown for example in .

Similarly in a step S the user presses the conversion button using the pointing device or keyboard thus writing into the HTML document transmitted from the server a description to process in the manner described below when the conversion button is pressed.

When the conversion button is pressed first in a step S a font environment request is submitted to the browser font environment acquisition unit . In the present embodiment Language ID is used as the font environment. Typically because Language ID is held by the OS the font environment can be obtained by querying the OS. The Language ID thus obtained is then stored in the Language ID in the client request table .

Next in a step S the held client request table is transmitted to the server . The succeeding steps from S to S inside the dotted lines shown in are executed by the server .

Next in a step S the server searches the database table stored in the data storage unit using the file ID which is the entry in the client request table thus received as the key and obtains the file that matches the file ID. Then in a step S the file conversion manager issues a target file conversion command to the application that can handle the target file. The target file is a file that corresponds to the file ID recorded in the file ID of the client request table . Designation of the application that can handle the target file is a capability that is typically provided to the OS. For example with Windows registered trademark information that correlates the file extension and the application is saved by the operating system so that when an instruction is given to open a file the corresponding application is executed. Next in a step S the file converter that receives the conversion command from the file conversion manager generates an intermediate file. A detailed description of the process of intermediate file conversion will be given immediately after a description of . Then in a step S the server transmits the intermediate file thus created to the client . Here in order to simplify the description the intermediate file is transmitted to the client . In actuality however it is preferable that the URL of the created intermediate file be sent to the client without the created intermediate file itself being transmitted to the client .

Next in a step S the client downloads the intermediate file received at the Web browser or the intermediate file held by the URL received the intermediate format analyzer analyzes the download converts it into displayable bitmap data and displays it on the display through the image display unit . Then further in response to user input the intermediate file is saved. Alternatively the intermediate file can be analyzed by the intermediate format analyzer converted into a printable data format such as PDL adapted to a printer and printed out by the printer.

In steps S and S display and printing are carried out using an alternative font if the font face specified by the intermediate file character object operand is not installed in the client . The alternative font is specified in advance for the font. Alternatively a default font may be determined and the document reproduced using the default font if the specified font does not exist.

Next a detailed description is given of the procedure for conversion to the intermediate file by the file converter . In the present embodiment a print function installed on the OS is used as the file conversion means. First a description is given of the structure of the print function.

The host computer runs application software such as a word processor or a spreadsheet hereinafter application on so called basic software i.e. the operating system hereinafter OS such as Windows registered trademark . When printing from the application from among several sub programs that the OS provides from within that program a graphic engine function is used. The graphic engine is for example in Windows registered trademark called a GDI Graphic Device Interface and controls processing of image information for the display and the printer. In order to absorb dependency on devices such as the display and the printer the GDI dynamically links modules called device drivers and outputs to each of the devices. The module for the printer is called a printer driver . The printer driver must prepare a function group called a DDI Device Driver Interface that is determined in advance to be installed in the device driver according to the capacity and capabilities of the device. The GDI converts an application API Application Programming Interface call into device driver data and the DDI function group is configured so as to be called from the GDI as appropriate and a predetermined print process executed. The graphic engine sequentially processes print requests from the application through this type of printer driver .

Depending on the use application the printer driver can be broadly divided into printer output systems and file output systems. The printer output system converts rendering commands into an intermediate format called PDL Printer Description Language . The printer output system intermediate format PDL is designed to install on the printing device side a controller that is capable of processing PDL control commands and prints using the printer on the printing device side.

By contrast sending data to the printing device side is not the direct purpose of the file output system which converts rendering commands accepted from the DDI functions into an intermediate format defined in advance which it then stores as an intermediate file on a disk system of the host computer . PDF Portable Document Format and SVG Scalable Vector Graphics are typical intermediate formats. The intermediate file is saved on the host computer file system displayed on the host computer by a particular application capable of interpreting the intermediate format and can be printed by the printing device at the instruction of the user again through the graphic engine .

The DDI functions include a job start request that announces the start of printing a page start request that announces the start of a page a logic rendering request expressing characters figures and the like described in a page a page end request that announces the end of a page and the like. When printing multiple pages the number of page start requests and page end requests output is the same as the number of pages printed and the number of logic rendering requests output is the number of logic renderings contained in the pages. The printer driver generates commands in an intermediate format such as PDL PDF or the like for each request.

Using a detailed description is now given of the flow of processing within the file converter having received a conversion command from the file conversion manager . When the file converter receives a file conversion command first the application starts conversion by outputting a request to convert the target file into an intermediate format to the printer driver through the graphic engine S .

The application reports the start of a conversion job to the graphic engine through the GDI function. The graphic engine then converts the reported GDI function to a DDI function and transfers it to the printer driver S . The printer driver then generates a job start command S .

The application reports the start of a page to the graphic engine through the GDI function. The graphic engine then converts the reported GDI function to a DDI function and transfers it to the printer driver S . The printer driver then generates a page start command S .

The application reports a logic rendering request to the graphic engine through the GDI function. The graphic engine then converts the reported GDI function to a DDI function and transfers it to the printer driver S . The printer driver then generates a logic rendering command S .

Steps S and S are repeated until a page end request is reported from the application . The application then reports the end of the page to the graphic engine through the GDI function S . When the graphic engine converts the reported GDI function into a DDI function and transfers it to the printer driver the printer driver then generates a page end command S .

Steps S to S are repeated until a job end request is reported from the application . When the application reports the end of a job to the graphic engine through the GDI function S and the graphic engine converts the reported GDI function into a DDI function and transfers it to the printer driver the printer driver generates a job end command S .

Next a description is given of the character rendering commands in the logic rendering process of step S using the flow chart shown in . In step S is part of step S shown in performed by the application and the graphic engine and steps S S are part of step S carried out by the printer driver. Although a similar rendering process is carried out on the graphics and images such process is omitted from .

The application reports the character code font attributes and rendering attributes to the graphic engine through the GDI function. The graphic engine then converts the GDI function into a DDI function and transfers it to the printer driver S .

Next the printer driver queries the graphic engine for the font Language ID based on the font face name included in the font attributes accepted as GDI index parameter data. If for example the font Language ID is a TrueType registered trademark font then the font Language ID is stored in a name table in a TrueType registered trademark font table. In terms of Windows registered trademark there is a TrueType registered trademark font in the font table which is a table that can be utilized in Windows registered trademark and which can be checked in order to obtain the font Language ID S .

Next the printer driver checks the Language ID in the client request table held in the data storage unit and obtains the Language ID S .

If the locales match the font Language ID and the Language ID are the same value. For example the Language ID value that indicates Japan is and the font Language ID that indicates the Japanese language font is also similar set at . Then the Language ID value and the font Language ID value are compared and if the two do not match the process proceeds to a step S in order to embed font form information. If the two values do match then the process proceeds to a step S S .

Based on the font attribute face name and character code the printer driver queries the graphic engine for and acquires the font form information S .

The printer driver using the character code font attributes rendering attributes and font form information thus obtained generates character rendering commands in an intermediate format. By contrast if the font is one for which embedding is deemed unnecessary then the above described acquisition of font form information is unnecessary and therefore the printer driver generates character rendering commands in an intermediate format using the character code font attributes and rendering attributes S .

As described above in the document processing system of the present embodiment when reproducing a document file at the client if the font Language ID of the font that comprises the document file the intermediate file and the client Language ID match the client reproduces the file using the font form information of the font installed in the client and does not embed the font form information in that document file.

In addition even if the same font as the font used in the document file is not installed in the client that reproduces the document file the client that reproduces the document file uses a font that resembles the font used in the document file. Accordingly even if the reproduced style is different from the original style of the created document because the document is reproduced in characters of the same language the contents of the reproduced document can be read out.

In addition because the operator is not burdened with determining whether or not to embed a font in a document file and determining the font to be embedded the operator does not need to be knowledgeable about computer systems and fonts thus improving operability. Moreover the procedure for specification is unneeded and therefore file generation productivity also improves. Moreover mistaken embedding of a font or failure to embed a font can be prevented.

In the first embodiment the font environment acquisition unit obtains the Language ID. However in a second embodiment the font environment acquisition unit queries the OS for the fonts that the client holds transmits to the server all the face names of the fonts that the client can use the server creates an intermediate file suitable for the font environment and the intermediate file thus created is transmitted to the client . The details of this process are described below.

Next a description is given of the second embodiment focusing on the difference with the first embodiment described above. In the second embodiment in the flow chart shown in the operations and process of from step S through step S are the same as in the first embodiment. In the second embodiment in a step S when the font environment is acquired the OS is queried for the fonts that the client holds and the face names of all the fonts that the client can use are stored in a font list in a client request table shown in . It should be noted that the client request table used in the first embodiment is not used in the second embodiment.

Next the process of from step S to S is the same as with the first embodiment of the present invention although the conversion to the intermediate file S differs from that of the first embodiment.

Next a detailed description is given of the procedure for conversion to an intermediate file in the second embodiment. Fundamentally although the procedure for conversion to an intermediate file in the second embodiment is the same as that of the first embodiment the procedure for character rendering differs from the procedure of the first embodiment. Here a description is given of the character rendering procedure using . shows a procedure in which steps S and S of are executed by the server in place of of the first embodiment.

In when the application issues a character rendering request the character code font attributes and rendering attributes are reported to the graphic engine through a GDI function. The graphic engine then converts the GDI function into a DDI function and transfers it to the printer driver S .

Next the printer driver ascertains whether or not a font that is the same as the face name of the accepted font is present in the font list in the client request table S . If such a font is not in the font list then the process shifts to a step S in order to embed that font and shifts to a step S if such a font is present in the font list S . Based on the printer driver font attribute face name and character code the printer driver queries the graphic engine and obtains the font form information described above S . The printer driver then generates character rendering commands in an intermediate format using the character code font attributes and rendering attributes thus obtained. By contrast if the font is one for which embedding is deemed unnecessary then the above described acquisition of font form information is unnecessary and therefore the printer driver generates character rendering commands in an intermediate format using the character code font attributes and rendering attributes Sl .

In other aspects the configuration and procedures of the second embodiment are the same as those of the first embodiment. According to the configuration and procedure described above the document processing system of the present embodiment because it does not embed font form information installed in the terminal computer that reproduces the document file the intermediate file in that document file expansion of the size of the document file by unneeded font form information can be prevented. Furthermore because the font form information that is not embedded in the document file is surely installed in the terminal that reproduces that document file the created original document is reproduced as is including the style of the characters.

In addition because the operator is not burdened with determining whether or not to embed a font in a document file and determining the font to be embedded the operator does not need to be knowledgeable about computer systems and fonts thus improving operability. Moreover procedures for specification are unneeded and therefore file generation productivity also improves. Moreover mistaken embedding of a font or failure to embed a font can be prevented.

In the first embodiment of the present invention the client Language ID is automatically used as the font environment. However a third embodiment of the present invention uses a Language ID that the client specifies.

In the third embodiment of the present invention the font environment acquisition method differs from that of the first embodiment described above. Here a description is given of only the font environment acquisition method. The third embodiment instead of displaying a screen like that shown in in step S of the first embodiment displays on a browser a screen like that shown in . shows a screen that adds a country region selection button to the screen shown in . When the user presses the country region selection button using a pointing device or keyboard a country region list is displayed as shown in the drop down menu . The data storage unit is provided with a Language ID list table like that shown in for example with all the country names in the Language ID list table shown in displayed as selection buttons in the drop down menu .

A Language ID is linked to each of the country names and when a country region displayed in the drop down menu of an HTML document is specified on a screen using the pointing device or the keyboard a Language ID in the Language ID list table corresponding to the selected country name is stored in the client request table Language ID shown in .

Hereinafter of the processes of from step S to S shown in in the first embodiment in step S the font environment acquisition unit automatically obtains the client Language ID. However in the third embodiment because the Language ID is obtained by the means described above that is by operator input the process of step S is not carried out. The rest of the process is the same as that of the first embodiment and thus a description thereof is omitted.

According to such a configuration in the document processing system of the present embodiment even if the terminal computer that requests a document file intermediate file from the server is different from the terminal that reproduces the document file if the Language ID of the terminal that reproduces the document file and the font Language ID of the document match font form information is not embedded in that document file and therefore expansion of the size of the document file by unneeded font form information can be prevented. In other words a document file of the minimum required size suitable for the destination can be created.

In addition even if the same font as the font used in the document file is not installed in the terminal that reproduces that document file the reproduction terminal uses a font that resembles the fount used in the document. Accordingly even if the reproduced style is different from the original style of the created document because the document is reproduced in characters of the same language the contents of the reproduced document can be read out.

In addition because the operator is not burdened with determining whether or not to embed a font in a document file and determining the font to be embedded the operator does not need to be knowledgeable about computer systems and fonts thus improving operability. Moreover procedures for specification are unneeded and therefore file generation productivity also improves. Moreover mistaken embedding of a font or failure to embed a font can be prevented.

In a fourth embodiment of the present invention a description is given of a document processing system that combines the ability to upload application data files from the client to the server with the acquisition of intermediate files from the server of the first and third embodiments. is a flow chart illustrating a procedure executed in place of the process shown in of the first and third embodiments. show an example of an HTML document displayed at the client in place of the screen shown in . In items indicated by reference numerals are identical to the same parts shown in . However in addition to these an upload button is included in .

In addition in the HTML document displayed in step S is shown in and a procedure for uploading is included between step S and step S and it is these two points that are different from . Accordingly a description of those portions that are the same as those in is omitted.

When the screens shown in are displayed in step S it is determined in a step S whether or not an upload has been performed. An upload is as follows. When the upload button is pressed a pop up window shown in is displayed. This may be described in the HTML document. After a file name to be uploaded has already been written in an OK button is pressed and the file uploaded. It should be noted that a cancel button can erase the pressing of the upload button . Moreover pressing a search button displays the file system at that client terminal enabling the operator to select therefrom the desired file or files for uploading.

When it is determined in step S that an upload has been performed in a step S the specified file that is the file having the file name designated by the file name is transmitted to the server from the client by FTP or the like. At this time in addition to the file if that file contains a character object then the font used therein may also be uploaded because the fonts installed in the client that produced the file are not always installed in the server. The server having received the file stores the received file in the data storage unit together with the application data file provided to the client. In addition if the font is received simultaneously with the file and if that font is not installed in the server then that font is registered in the system resource database as a new font.

The remainder is the same as the first and third embodiments. By such a configuration the document processing system of the present embodiment can distribute via the server a document uploaded from the client achieving the same effects as the first and third embodiments.

As a fifth embodiment of the present invention an embodiment is shown that converts a file attached to an e mail at transmission into an intermediate file. is a block diagram of an e mail terminal in which components that are the same as those shown in are given the same reference numerals. The terminal in addition to the client configuration is equipped with a file converter and a file conversion manager. Furthermore as a unique configurational element of the present embodiment the terminal has a client e mail processor . The e mail processor corresponds to a user agent UA in a message handling system and is electronic mail client software. However it differs from ordinary e mail software insofar as it can perform the processes shown in to be described later. The rest of the configuration is the same as the configurational elements of the client and the server of the first embodiment and therefore a description of individual elements is omitted. A description is now given of the outlines of the processes performed in the present embodiment in a system such as this.

 3 The presence or absence of an attached file is determined and if an attached file is present the user specifies from the UI whether or not to put the file into PDF.

 4 When the operator issues an instruction to transmit the country or region of the addressee is identified from the domain name of the address.

 7 The attached file is converted into an intermediate file. At this time if the font Language ID and the address Language ID do not match font form information of the font used in the attached document is embedded in the intermediate file.

Thereafter a request is issued from the e mail processor to the file converter to convert the attached file into an intermediate file. The file converter activates the application and carries out step S. The application reports the character code font attributes and rendering attributes of the character objects used in the attached file to the printer driver S . Step S to step S are then performed by the printer driver receiving such a report. The printer driver queries the graphic engine for the font Language ID based on the font face name included in the font attributes accepted as a GDI function parameter. If for example the font Language ID is a TrueType registered trademark font then the font Language ID is stored in the name table in the TrueType registered trademark font table. In terms of Windows registered trademark there is a TrueType registered trademark font in the font table which is a table that can be utilized in Windows registered trademark and which can be checked in order to obtain the font Language ID S .

Next the e mail Language ID stored at the predetermined address and the font Language ID are compared. If they do not match then the font form information used in the attached file is obtained from the operating system S . Then character rendering commands in which the font form is embedded that is an intermediate file is created S . In addition other rendering commands for objects other than characters are created S .

When an attached file is thus converted into an intermediate file the e mail processor carries out an encoding process of attaching the attached file to the e mail S and transmitting it to the network S .

If in step S it is determined that the e mail Language ID and the font Language ID do match then the attached file is converted into an intermediate file without embedding the font form information. In addition if it is determined in step S that an intermediate file is not necessary then the attached file is attached as is as an application data file. If it is determined in step S that there is no attached file then the e mail is transmitted without attachment.

It should be noted that if the top level domain name of the address is not registered in the database in step S for example if the top level domain name is not the name of a country such as net or com then the user inputs the e mail Language ID via the UI.

According to the e mail terminal of the present embodiment as described above when converting a file attached to a piece of electronic mail to an intermediate file an increase in the size of the attached file beyond what is necessary in order to determine whether or not font form information suited to the address domain name is embedded in the attached file can be prevented. In addition the contents of the attached file can be securely reproduced at the address terminal computer . Moreover it is not necessary for the operator to ascertain whether or not font form information is embedded in the file and thus the operability for the operator can be improved. In addition mistaken embedding of a font or failure to embed a font can be prevented.

The process of determining whether or not a font has been embedded can be also be further simplified. shows a procedure for doing so. Steps S S shown in are substituted for steps S S in .

Step S and step S are the same as steps S and S respectively. In a step S the sender s top level domain name and the recipient s top level domain name are compared. If the two names do not match then the character code font attributes and rendering attributes are reported to the graphic engine.

As described above by directly comparing the domain names the process of determining font embedding at the e mail terminal of the fifth embodiment can be simplified. In this embodiment if the sender s top level domain and the recipient s top level domain match an intermediate file is generated in which all fonts are not embedded. Conversely if the two top level domains do not match then an intermediate file is generated in which all fonts are embedded.

Although in the present embodiment processes are performed with a single terminal the embodiment can also be configured as a server client system like the first embodiment. In that case the client registers the Language ID corresponding to the country identified from the recipient s domain name in the client request table and transmits it to the server. The server processes in generally the same way as in the first embodiment and returns the intermediate file to the client. The client then transmits electronic mail with the intermediate file as an attached file.

Thus as described above in a client server system as well the size of the attached file can be restricted to the maximum size necessary while maintaining the readability of the attached file. It should be noted that the present variation can also be combined with the first variation of the fifth embodiment described above.

It should be noted that although the embodiments described above are described with reference to the division of roles among the application the graphic engine and the printer driver in actuality the division of roles is not limited to that described in these embodiment. In other words because the embodiments are premised on an existing operating system the division of roles is fixed. However it is logically possible for the processing procedures that the printer driver carries out in the embodiments to be performed by the graphic engine or vice versa.

In addition although the first through fourth embodiments are server client systems a document processing system can also be compromised of a single computer. In that case one computer is both the client and the server shown in .

Note that the present invention can be applied to an apparatus comprising a single device or to a system constituted by a plurality of devices.

Furthermore the invention can be implemented by supplying a software program which implements the functions of the foregoing embodiments directly or indirectly to a system or apparatus reading the supplied program code with a computer of the system or apparatus and then executing the program code. In this case so long as the sister or apparatus has the functions of the program the mode of implementation need not rely upon a program.

Accordingly since the functions of the present invention are implemented by computer the program code itself installed in the computer also implements the present invention. In other words the claims of the present invention also cover a computer program for the purpose of implementing the functions of the present invention.

In this case so long as the system or apparatus has the functions of the program the program may be executed in any form e.g. as object code a program executed by a interpreter or scrip data supplied to an operating system.

Examples of storage media that can be used for supplying the program are a floppy disk a hard disk an optical disk a magneto optical disk a CD ROM a CD R a CD RW a magnetic tape a nonvolatile type memory card a ROM and a DVD DVD ROM and a DVD R .

As for the method of supplying the program a client computer can be connected to a website on the Internet using a browser of the client computer and the computer program of the present invention or an automatically installable compressed file of the program can be downloaded to a recording medium such as a hard disk. Further the program of the present invention can be supplied b dividing the program code constituting the program into a plurality of files and downloading the files from different websites. In other words a WWW World Wide Web server that downloads to multiple users the program files that implement the functions of the present invention by computer is also covered by the claims of the present invention.

Further it is also possible to encrypt and store the program of the present invention on a storage medium such as a CD ROM distribute the storage medium to users allow users who meet certain requirements to download decryption key information from a website via the Internet and allow these users to decrypt the encrypted program by using the key information whereby the program is installed in the user computer.

Furthermore after the program read from the storage medium is written to a function expansion board inserted into the computer or to a memory provided in a function expansion unit connected to the computer a CPU or the like mounted on the function expansion board or function expansion unit performs all or a part of the actual processing so that the functions of the foregoing embodiments can be implemented by this processing.

As many apparently widely different embodiments of the present invention can be made without departing from the spirit and scope thereof it is to be understood that the invention is not limited to the specific embodiments thereof except as defined in the appended claims.

This application claims priority from Japanese Patent Application No. 2004 148302 filed May 18 2004 which is hereby incorporated by reference herein.

