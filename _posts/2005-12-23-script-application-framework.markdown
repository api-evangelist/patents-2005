---

title: Script application framework
abstract: A script application framework is provided to abstract common scripting patterns and to provide a structure for scripting. The script application framework encapsulates scripting logic into script components, manages lifetime of script objects, and builds relationships among different script objects. The script application framework can be applied to any scripting environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07861219&OS=07861219&RS=07861219
owner: Microsoft Corporation
number: 07861219
owner_city: Redmond
owner_country: US
publication_date: 20051223
---
This application claims the benefit of U.S. Provisional Patent Application No. 60 716 169 filed on Sep. 12 2005 titled SCRIPT APPLICATION FRAMEWORK the disclosure of which is hereby expressly incorporated by reference and the filing date of which is hereby claimed under 35 U.S.C. 119 e .

As known by those skilled in the art of computers a programming language or computer language is a standardized communication tool for expressing instructions to a computer so the computer can execute the instructions to perform specific acts. Programming languages come in various styles. Some are procedural languages such as C. Some are object oriented such as C and Java. Some are functional such as Haskell. A scripting language tends to be a simple programming language designed for ease of programming and for performing special or limited tasks. For example nowadays JavaScript is often used to provide additional functionality and or interactivity for Web applications. Visual Basic Script Perl and TCL are other examples of scripting languages. In general a scripting language has simpler syntax and fewer programming constructs than a traditional programming language such as C C or Java. In addition scripting languages do not need to be compiled and they can be interpreted at run time though can be executed immediately.

Scripting is the process of using a scripting language to create a set of instructions to achieve a specific function using a scripting language. Unlike traditional programming using programming languages such as C C or Java that manipulate the processes of a computer scripting tends to involve a fast smaller set of simple instructions. A script tends to accomplish a specific purpose such as controlling the process of connecting a computer to another computer via a modem or controlling how content in a Web page changes according to user input. On the World Wide Web a scripting language can be used to create scripts to customize or add interactivity to Web pages and Web applications. For example when inserted into a Web page a script can control various elements of the Web page such as the user interface styles and HTML markup of the Web page.

Over time traditional programming has integrated concepts such as abstraction and encapsulation into a programming language and generated programming languages such as C and Java that provides predetermined patterns and structures. On the other hand scripting has remained ad hoc involving no patterns or structures and often resulting in error prone code that is hard to maintain. For example a scripting environment generally lacks an application framework layer. Scripting thus occurs without any abstractions to hide the complexity of different functionalities and to address common scripting patterns.

While specific disadvantages of existing systems have been illustrated and described in this Background Section those skilled in the art and others will recognize that the subject matter claimed herein is not limited to any specific implementation for solving any or all of the described disadvantages.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Aspects of the invention provide a script application framework to ease the development of scripts. The script application framework encapsulates scripting logics into components provides script object models binds properties and methods of different script objects and manages the lifetime of script objects etc. The script application framework can be applied to any scripting environment.

In accordance with one aspect of the invention the script application framework may provide an Application class encapsulating common functionalities for a script application. The script application may include a plurality of script objects. The Application class may include functionalities for managing the plurality of script objects.

A Component class may be provided for defining behavior and at least one object attribute associated with a script object. The object attribute may be a property of the script object a method for the script object or an event for the script object. Preferably a TypeDescriptor class is provided for describing object model of the script object.

In accordance with another aspect of the invention script objects may communicate with each other through mechanisms such as binding and actions. A Binding class provides functionalities for connecting a first script object with a second script object by transferring data from an object attribute of the first script object to an object attribute of the second script object. Preferably a Transformer class is used to convert type of the data of the object attribute of the first script object to type of the object attribute of the second script object when necessary.

Meanwhile an Action class can be used to invoke a specific action upon occurrence of a specific event in a script object. The specific action can be for example to invoke a method of another script object or to configure a property of another script object. An Event class may be used for to maintaining one or more event handlers and signaling an occurrence of an event for a script object. In addition a Condition class may be used to provide specific criteria for deciding whether to perform the specific action when the specific event occurs.

In addition the script application framework may further include an IDispose interface that can be implemented for disposing a script object and or clearing up its relationships to other script objects.

The following text illustrates and describes exemplary embodiments of the invention. However those of ordinary skill in the art will appreciate that various changes can be made therein without departing from the spirit and scope of the invention.

As shown in the illustrated script application framework includes an Application class. The Application class is the top level class that brings together all components of the script application framework and performs tasks such as managing the lifetime of script objects in an application and providing access to services to different parts of the application. In an exemplary embodiment of the invention an individual Web page includes one instance of the Application class. The following pseudo code illustrates an exemplary Application class 

The Component class is the base class for all script components. The Component class is a mechanism to encapsulate a set of specific functionalities for a script component that can be used by an application developer or by other script components. In exemplary embodiments of the invention the Component class describes a script object s behavior and object model attributes such as properties methods and events. The Component class also may enable a script object to participate in lifetime management of script objects in the application to raise change notifications when a property of the script object changes and to manage events specific to the script object. The following pseudo code illustrates an exemplary implementation of the Component class 

The TypeDescriptor class allows a script object to describe its object model which includes properties along with type and associated attributes events and methods along with associated parameters . For example the TypeDescriptor object for a TIMER script object may include an Interval property of numerical type and an Enabled property of Boolean type a Tick event and methods such as Start and Stop . For example the TypeDescriptor object for an Array script object may provide information on what types of objects are in the array. The following text illustrates an exemplary implementation of the TypeDescriptor class 

Embodiments of the invention provide one or more mechanisms to connect script objects with each other. illustrates two such mechanisms a Binding class and an Action class. The Binding class can be used to transfer data from one object property to another object property and vice versa. For example if a script object Counter has a Value property and another script object Label has a Text property. An instance of the Binding class can bind Counter.Value to Label.Text. As a result the script object Label is able to display Counter.Value. In exemplary embodiments of the invention an instance of the Binding class may be associated with arbitrary property paths instead of specific property names. For example Label.Text may be bound to Foo.Bar.Baz an expression of the referenced script object that is the source of the data for Label.Text. In exemplary embodiments of the invention data may be allowed to only transfer into a property to only transfer out of a property to another property or both i.e. to be transferred out and into a property.

In embodiments of the invention the Binding class may be associated with a Transformer class that converts the type of one property into the type of another property. For example the exemplary Counter.Value is of a numerical type while the exemplary Label.Text is of a string type. Therefore when a binding between these two properties occurs an instance of the Transformer class implicitly converts the Counter.Value from the numerical type to the string type the type of Label.Text.

Embodiments of the invention may also provide an Event class that may be used to maintain a list of event handlers and to signal events as they occur. The follow text illustrates an exemplary implementation of the Event class 

Another exemplary binding mechanism is provided by the Action class which allows a specific action to be invoked when a specific event occurs. For example a script object Timer may include a Counter property and a Tick event. In an exemplary implementation of the script object Timer whenever the Tick event occurs an instance of the Action class increments the value of the Counter property. Such an action may be called an InvokeMethod action. Exemplary embodiments of the invention provide multiple types of actions. For example a SetProperty action may be provided to set the property of a script object to a particular value. In an exemplary embodiment of the invention the Action class may be further associated with a Condition class that can be used to decide whether to perform an action even though the designated event has occurred. The following text illustrates an exemplary implementation of an IAction interface and the Action class 

In embodiments of the invention services data transfer e.g. provided by an instance of the Binding class may need to be triggered explicitly or automatically in response to change notifications. Change notifications can be a property change notification or a collection change notification. For example when the exemplary Counter.Value associated with the script object Timer changes a property change notification is issued to the corresponding instance of the Binding class which then updates Label.Text with the current Counter.Value. Collection change notification occurs when a change occurs to a collection script object such as a DataSource. A collection script object includes a collection of data. A DataSource can be for example a database. The DataSource may have a Data property. A Repeater script object may have a Data property as well. Assuming Repeater.Data is bounded with DataSource.Data. When new records of data are added to the DataSource.Data a collection change notification is issued to the corresponding instance of Binding class which then updates Repeater.Data accordingly. For example the instance of the Binding class may populate a table of the Repeater with the new data. The following pseudo code illustrates an exemplary implementation of the change notification functionalities 

Once script objects reference each other such as through instances of the Binding class they create circular references. The IDisposable interface implementation can then be used to break a circular reference. The IDisposable implementation includes logic and mechanism for disposing and cleaning up a script object and its references to other script objects. The following pseudo code illustrates an exemplary implementation of the IDisposable interface 

In summary the script application framework encapsulates common scripting logics into components provides definitions for script objects and enables script objects to communicate with each other through mechanisms such as binding and actions. The script application framework thus provides a structure for traditionally ad hoc scripting.

It is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or implementations described above. Rather the specific features and implementations described above are disclosed as example forms of implementing the claims.

