---

title: Type server caching the proxy/stub generation
abstract: A type server provides the proxy and stub code needed by client and server programs on demand (dynamically), when the code is needed during execution. When an interface for a resource is defined, the proxy code and the stub code for the type of resource is generated and stored within the type server. The client and server programs each keep a local table of type identifiers/resource type translations for each resource referenced. The local table acts like a cache: when a type identifier is not found in the table, the type server is contacted, and the type identifier for that resource type is retrieved and stored in the cache. Another local table acting as a cache stores type ID and associated proxy and stub code for the resource type. When a program needs the proxy code for a resource type, it checks its cache and it the proxy code is not found the type server is contacted, the proxy (and stub) code is retrieved from the type server and is stored in the cache.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07434235&OS=07434235&RS=07434235
owner: Microsoft Corporation
number: 07434235
owner_city: Redmond
owner_country: US
publication_date: 20050516
---
This application is related in subject matter to U.S. patent application Ser. No. 11 130 308 entitled Coordinating Reference Counting Between Entities Executing Within Separate Address Spaces filed May 16 2005 U.S. patent application Ser. No. 11 129 848 entitled A Cancellation Mechanism for Cooperative Systems filed May 16 2005 U.S. patent application Ser. No. 11 130 301 entitled Self Registering Objects for an Inter Process Communication Mechanism filed May 16 2005 U.S. patent application Ser. No. 11 129 847 entitled Structuring An Operating System Using A Service Architecture filed May 16 2005 and U.S. patent application Ser. No. 11 130 300 and entitled Coordination of Set Enumeration Information Between Independent Agents filed May 16 2005.

The invention relates to sharing resources in computer systems and in particular to a mechanism that allows greater flexibility in managing resource sharing.

A standard way to communicate between two processes A and B running on the same machine or running on different machines is to send a message. Often for example it is desirable to enable process A to send a message to process B asking process B to execute code on behalf of process A. Typically process A must have knowledge of a port or contact point for process B in order to do this.

One way to enable process A to call process B is via a remote procedure call RPC . A remote procedure call enables a process on one computer to cause code to be executed in another process on the same or on a different computer without requiring explicit code to be written by a developer or programmer to perform that particular call. An RPC is initiated by the caller process client sending a request message to a remote system or second process server to execute a certain procedure using supplied arguments. A result message is returned to the caller. For example in a remote procedure call a function call may be made by process A in which the name of the procedure that process B is to execute on behalf of process A and a set of parameters for the procedure are specified. Process B executes the code and returns a message to process A. When the code in question is written using principles of object oriented programming RPC is sometimes referred to as remote invocation or remote method invocation.

A remote procedure call typically follows a particular protocol another way of saying this is it uses a particular interface so that potentially unrelated processes can communicate. The protocol or interface defines the methods and the values which the processes agree upon in order to cooperate.

The procedure of transforming the function call into a message is called marshalling. Marshalling may include gathering data from one or more applications or non contiguous sources in computer storage putting the data pieces into a message buffer and organizing or converting the data into a format that is prescribed for a particular receiver or programming interface. Marshalling typically converts what the code in process A sees as a function call into a message to be sent to process B. The message typically includes the name of the function and a set of parameters coded in a way that process B understands. Process B receives the message and has to transform the message into a call to process B s internal function. The process of converting a message into a function call is called unmarshalling. The piece of code that performs marshalling in process A is called a proxy and typically resides in the client process. The corresponding piece of code on the server side that performs unmarshalling is called a stub.

Within the context of object oriented programming process A and process B can be viewed as objects encapsulating data and functions. Some well known technologies that take this approach are Sun Microsystem s JAVA and Microsoft s COM and DCOM. That is process B may be viewed as a container for one or multiple objects whose methods are the functions invoked by process A. In object oriented systems therefore process A invokes a method of a particular object of process B instead of invoking a function in process B. To do this process A must have some way of identifying the object in process B that process A wishes to invoke.

The data stored in process A which enables process A to identify the object of process B is known as a reference to the object. The reference stores information concerning how to locate the object that is the reference must be sufficient to identify the process and within the process to identify the object whose method is to be invoked.

It is often desirable to share resources within a computer system. As described above one convenient way to share resources is through an interface that provides programmatic access to the shared resource. The program responsible for the resource is called the server and employs a stub program to handle access requests for the particular type of resource being shared. The program seeking access is called the client and employs a proxy program to make the request for the particular type of resource being requested.

A server that exports a reference to one of its objects should also ensure that the right stub programs to handle possible incoming invocations for that object are available. Similarly the client receiving the reference should be able to correctly associate the reference with a proxy program for one of the interfaces the object implements. Typically however the client and proxy programs are compiled and linked together to generate a single executable image on the client for the type of resource being requested. Similarly the server and the stub programs are typically compiled and linked together to generate a single executable image on the server for the type of resource being shared. This approach requires knowledge at the time of compilation and linkage of the types of resources that a client might use. However the types of resources that a client might use may not be known at compile link time. It would be helpful if there were a mechanism that enabled proxy and stub code to be served on demand when needed during execution instead of being compiled into an executable image before execution.

Greater flexibility in managing resource sharing is provided by a type server that provides the proxy and stub code needed by client and server programs on demand dynamically when the code is needed during execution. When an interface for a resource is defined the proxy code and the stub code for the type of resource is generated and stored within the type server. Because the names of the resource types may be long and it is not efficient to send long names in inter process communications the resource types are assigned type identifiers type IDs . The client and server programs each keep a local table of type identifiers resource type translations for each resource referenced. The local table acts like a cache when a type identifier is not found in the table at the client the type server is contacted and the type identifier for that resource type is retrieved and stored in the client cache. Another local table at the client acting as a cache stores type ID and associated proxy and stub code for the resource type. When a program needs the proxy code for a resource type it checks its cache and if the proxy code is not found the type server is contacted the proxy and stub code is retrieved from the type server and is stored in the cache.

When the type server receives a request for a proxy for a resource type it checks to see if the proxy code has already been generated. If the proxy code has already been generated the code is sent to the requestor. If the proxy code has not already been generated the code is generated saved in the proxy stub store and is sent to the requester. Alternatively the type server may generate the proxy stub code for a resource type when the type description is received by the type server. Type description may be received whenever a new resource type is defined within the code in the computer system.

When a client receives a reference to an object inheritance relationships between different interfaces must sometimes be determined to associate a correct proxy program to the reference. The type server may be accessed to obtain the set of interfaces from which a particular interface inherits.

In accordance with the invention a mechanism that allows greater flexibility in managing resource sharing is provided. A type server provides the proxy code needed by the client and the stub code needed by the server on demand dynamically when the program needs the code to either access a resource or share the resource. For example to request a resource a first process may send a message to a second process referencing an object in the second process. In order for the second process to be able to understand the message received from the first process an agreed upon interface is used. The interface defines the methods and the data types of the arguments the methods take agreed upon by the processes. Marshalling is the process of transforming internal method invocations into a message understandable by the receiver. That is marshalling typically converts what the code in the first process understands as a method invocation into a message to be sent to the second process. The code that performs this conversion is called a proxy and resides in the first process. In order to communicate successfully proxy code for the type of the interface used must be available. That is if the object being referenced is of type I it will implement an interface of type I and therefore proxy code for an interface of type I must be available.

The second process receives the message and has to transform the message into a method invocation on its object. The process of converting a message into a method invocation is called unmarshalling and is performed by a piece of code residing in the second process called a stub. The proxy of the first process and the stub of the second process are complementary pieces of code. That is just as performing a call from the first process using a reference to an object in the second process requires a proxy corresponding to the type of the interface associated with the object of the second process a stub for that interface type must also be available at the server for receiving the request. Hence it is desirable that proxy and stub code for a particular interface type be generated at the same time.

For example suppose the first process acting in a particular interaction as a client process is process A and the second process acting as a server process in this particular interaction is process B. Assume that process B provides process A with a reference to one of process B s resources object . Suppose further that object implements interface I. In order for process A to invoke object process A must have access to a proxy code that performs marshalling of the request that is able to invoke the methods of object defined by interface I. In accordance with some embodiments of the invention a type server manages interface types and provides proxy and stub code for the interface type to a process i.e. during execution of a program rather than at compilation time . In some embodiments of the invention proxy and stub code for an interface type associated with an object is received when a reference from another process is received. Thus loading of the proxy and optionally stub code may be delayed until execution of the program.

The reference held by a process to an object of another process stores information concerning how to locate the object and what methods can be invoked on the object. The set of methods the object supports is often referred to as the object s interface and it is said that the object implements the interface. To facilitate the definition of interfaces interfaces may be subject to the principles of inheritance. According to general principles of inheritance when a class of objects is defined any subclass that is defined can inherit the definitions of one or more general classes. For the programmer this means that an object in a subclass need not carry its own definition of data and methods generic to the class or classes of which it is a part. In addition to easing development inheritance also provides an inherent validity to the defined subclass object that is what works and is consistent about the class will also work for the subclass . The principles of inheritance applied to interfaces mean that if all objects implementing the methods of interface I should also implement the methods of interface J interface I can inherit from interface J. Thus an object may implement more than one interface.

In accordance with the invention when a client receives a reference to an object the reference must be associated with the proxy program for one of the interfaces the object implements. To properly associate a proxy program to the reference knowledge of inheritance relationships between different interfaces may be required. In accordance with some embodiments of the invention therefore when passing an object reference the type information of the object reference is also passed. A type server may provide the information concerning inheritance relationships such as the set of interfaces from which a particular interface inherits.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

In some embodiments of the invention the operating system includes entities that are processes agents services components or modules comprising containers for objects or resources that are described through interfaces. illustrates an exemplary client service and an exemplary server service although it will be appreciated that any number of client services and server services may exist in the operating system. Moreover a client service in one interaction may act as a server service in another that is client and server terminology refers to roles within a particular interaction rather than to intrinsic differences in hardware software and so on. Each service may be implemented through the use of one or more objects. For example in the client service includes a proxy object . The client service may also include one or more other objects or resources as represented by object . Similarly the server service may include a stub and one or more objects as represented by object . A service may require support from one or more other services and the code specifying the service may require the loading of specific run time support to run correctly. Services may reside in the same address space in the local machine or in a computer of a computer network. Services alternatively may reside in different address spaces in the local machine or on different computers of a computer network.

A trusted entity may be viewed as a unique distinctive process module component agent or service that mediates communications between processes in the system. In some embodiments the trusted entity is able to distinguish between data parameters and reference parameters in messages passed between processes. In some embodiments the trusted entity has a trusted channel to every agent service module component or process for mediating resource access and reference. Communications with the trusted entity therefore are secure meaning that processes other than the trusted entity are unable to access or modify transmissions or messages sent between processes. Moreover the trusted entity may be capable of identifying the originator of a message.

In some embodiments of the invention the trusted entity is the kernel . The kernel can implement and expose its objects not shown to other services such as to services and in . In some embodiments of the invention the kernel is trusted code. In some embodiments of the invention the only trusted code is the kernel . In some embodiments to avoid forgery of object references only trusted code is able to manipulate an object reference. Hence in some embodiments of the invention only the kernel is able to manipulate an object reference. A service that holds a reference to an object refers to the reference by a representation referred to herein as a reference or as a local reference id. In some embodiments of the invention the local reference id is understood only by the kernel . Hence for example a communication sent by client service to a server service invoking a method of object would be mediated by kernel . Kernel in some embodiments of the invention creates and maintains one or more reference tables as represented by reference table in to resolve the object reference received from client service to the address of an object to be invoked.

A service may communicate with another service by sending a method invocation to another object via an object reference e.g. via a remote call . All communications among services are assumed to be and are treated as though they are remote. The client and server services may be in separate remote containers or may be co located in the same container but in either case the semantics of the call is remote.

A service interface may be specified in an interface definition language or via a contract. In some embodiments of the invention a subset of an existing language such as but not limited to C is used to define the contract. In some embodiments of the invention a subset of the application implementation language such as but not limited to C is used to define the interfaces. A service written in C therefore will seamlessly integrate with the C contract without requiring the mapping necessitated in traditional systems which use an IDL language for contracts. Services written in other languages such as for example unmanaged C may have a translation table which maps constructs from the C interface to constructs in C . Resultant C services can interoperate with the C service as long as the system service model and interface definitions are not violated.

Services may be mapped in a one to one relation to an address space. If such is the case protection ensues as a consequence of the address space provided by the memory management unit. Alternatively in some embodiments multiple services can be located within the same address space. In this case protection is obtained by a managed code run time such as for example Microsoft s CLR or Common Language Runtime . Services communicate with each other independent of their location.

Failure and security boundaries in the system may exist at the service level and may be reinforced by hardware protection at the address space and machine levels. Service recovery actions including the ability to restart and dependency tracking are provided by the operating system. Optimizations may accrue for services that are located within the same address space.

A method invocation can only be interpreted by the receiving object. The receiving object decides what action or actions are to be taken based on the information passed with the invocation. The information passed may include specific data structures and or references the invoker passes to the object being invoked.

The set of invocations an object accepts through a particular reference and the way the object is supposed to react to such an invocation is referred to as the interface supported by the object through that reference. Hence the kernel will not necessarily know what the particular interface implemented by a referenced object is and does not need access to that information. It will be appreciated that it is possible to have different references designating the same object implementation through different interfaces.

An object in some embodiments is an implementation of an interface within some service and is an independent unit of failure. An object may be expressed and coded in any programming language capable of passing parameters and control.

An object reference in some embodiments identifies the object to which the reference refers and is not able to be forged. A reference confers to the holder the authority to invoke any of the methods of the interface for which the reference to the object was created. An object reference may be revoked and may be passed optionally with restrictions to another service or to other services as an argument of an invocation or as return results.

Use of an interface so defined enables the definition of a class implementing the interface and whose method implementations are stubs which perform the task of parameter marshalling. Instances of such a class are herein referred to as proxies the proxies sitting in for the actual objects to which they refer and having the same interface.

A system for caching proxy stub generation may include one or more processes entities agents or services including one or more objects or resources that may be shared with one or more other processes agents or services. The system may also include one or more tables for storing information about shared objects or resources and or an independent entity process service or agent that mediates communications between processes entities agents or services. is a block diagram of a system for caching proxy stub generation in accordance with one embodiment of the invention. The system of or portions thereof may reside on one or more computers such as the computer described above with respect to .

A system for caching proxy stub generation may include one or more of the following elements or components a type server contract files represented by contract file one or more tables such as exemplary tables and a proxy stub store one or more client processes modules components or agents such as exemplary client process A and one or more server processes modules components or agents such as exemplary server process B . One or more client processes such as exemplary client process A and one or more server processes modules components or agents such as exemplary server process B may include caches in memory tables for storing proxy and stub code such as for example proxy and stub . Processes such as process A and process B a trusted entity tables associated with the trusted entity such as exemplary tables and as well as other elements not here shown. It will be appreciated that although process A is denoted as a client process in the interaction illustrated process A may also act as a server in another interaction. Similarly although process B is denoted as a server in the interaction illustrated process B may be a client in another interaction. That is client and server terminology refers to roles within a particular interaction rather than intrinsic differences in hardware software and so on.

A type server in some embodiments of the invention is a component module agent or process that may receive a request message from another component module agent or process and return a result message to the requester. The type server may be associated with one or more tables such as interface table and type ID table . Alternatively the two tables may be combined into one table indexed by both interface name and interface type ID. The type ID table may include one or more entries each entry including a type ID element a pointer to a location of a proxy for that type ID and a pointer to a location of a stub for that type ID. In some embodiments of the invention the pointer points to a location in the proxy stub store described below. The interface table in some embodiments includes one or more entries each entry including a name of an interface type and the type ID assigned to the interface.

The type server may also be associated with a proxy stub store . In some embodiments of the invention the proxy stub store may comprise proxies and stubs for interfaces. In some embodiments of the invention the proxy stub store is indexed by interface type ID. In some embodiments of the invention whenever a software component is added to the system any new types of interfaces introduced by the component are defined in one or more contract files as represented by contract file . A contract file may include one or more definitions of resources or object interfaces and may define a set of related interfaces and data types required to define the interfaces. For example an interface definition may include a list of data types the interface uses a list of parameters or arguments expected or allowed by the interface a list of methods that the interface is used for inheritance relationships and so on. In response to receiving the contract file the type server may analyze the contract file and extract from it if present one or more new interface types defined within the contract file. For each new interface type found in the contract file the type server may determine any inheritance relationships involved with the new interface type and correlate any inheritance relationships found in the new interface with inheritance relationships associated with existing interface types. The type server may assign a type identifier type ID to the new interface type encountered and may generate an entry for the new interface type in a table of interface types e.g. interface table and or type ID table . The table of interface types may be indexed by type ID and may include one or more of the following elements an interface type identifier type ID and a list or ordered set representing inheritance relationships. For example suppose that an interface I inherits from interface Iand interface Iand that interface Iand interface Iinherit from interface I. The list representing this inheritance relationship may be represented as I I I. The type server may also generate a proxy and stub for the new interface type. The type server may persist the proxy and stub in a proxy stub datastore .

The type server may receive a request from a client process e.g. process A for information associated with a type identifier. In response to the request the type server may access the type ID table and return the type name and a proxy and stub for the type ID. The type server may also receive a message from a process e.g. process A or process B to whom a reference to an object has been exported or passed. The process may send a message to the type server requesting information concerning the interface implemented by the exported or passed object and may request a proxy for the interface type the object implements.

The type server may access a table such as the type ID table indexed by type ID and send the requesting process information including one or more of the name of the interface type identified by type ID the type ID of the interface implemented by the object the proxy required for that interface type and the stub required for that interface type. For reasons of efficiency the proxy and stub code for the interface type may both be sent even though the requesting process may only require proxy code or stub code at the present time. It will be appreciated that it may be advantageous to send both the stub code and the proxy code at the same time because the proxy code and stub code for an interface type are very closely related and even minor changes to the interface are likely to require corresponding changes to the proxy and stub code. In another embodiment the proxy code may be sent without the stub code and vice versa. The receiving process may store the information received from the type server in a cache e.g. exemplary cache .

The type server may also receive a message from a process e.g. process A or process B that is exporting an object to another process. In some embodiments of the invention when a reference to an object is exported to another process a reference is exported when a reference to the object is sent by the owner of the object to another object the message that is sent to the receiving process includes the type ID of the interface the object implements. The exporting process may send a request to the type server to provide a type ID for the interface if the exporting process does not already know the type ID assigned to the interface. In response to this request the type server may access a table such as the interface table indexed by interface name and return to the requesting process the type ID assigned to that interface.

In some embodiments of the invention a client or server process may request proxy code stub code or other information associated with a interface identified by interface type ID. In response to such a request the type ID table indexed by type ID may then be accessed. The information sent to the requesting process may include one or more of the name of the interface type identified by the type ID the type ID of the interface implemented by the object the proxy required for that interface type and or the stub required for that interface type. For reasons of efficiency the proxy and stub code may both be sent even though the requesting process may only require proxy code or stub code at the present time. It will be appreciated that it may be advantageous to send both the stub code and the proxy code at the same time because the proxy code and stub code for an interface type are very closely related and even minor changes to the interface are likely to require corresponding changes to the proxy and stub code. In another embodiment the proxy code may be sent without the stub code and vice versa. The requesting process may store the information received from the type server in a cache e.g. cache .

For example a process such as process B for example may send the type server a message including the interface name for which the type identifier type ID is desired. In response the type server may access a table e.g. table indexed by interface type name and retrieve the type ID associated with the interface type name. The type server may return this message to process B . The type server may also receive a message from a process such as exemplary process A or process B including the type ID of an interface type associated with an object or resource. For example process A may send a message to the type server including type ID the type ID of an interface implemented by object . In response the type server may return a proxy and stub for the interface represented by type ID . Process A may save this information in cache .

Process A and process B may include one or more objects. In process B as illustrated includes object object . . . object n . Similarly process A as illustrated in includes exemplary object x although it will be appreciated that process A and process B may include any number of objects. Process A may export one or more of its objects e.g. object x to other processes e.g. to process B . Similarly process B may export one or more of its objects e.g. one or more of objects object object . . . object n to other processes e.g. to process A . Process A may import or reference an object that has been exported to it such as for example one or more of objects object object . . . object n by other processes such as for example by process B . Similarly process B may import or reference an object such as for example object x exported to it by other processes such as for example by process A .

A trusted entity in some embodiments of the invention mediates communications between processes such as those between process A and process B and vice versa. In some embodiments of the invention trusted entity is the kernel of an operating system. Communication channels between processes and the trusted entity are secure. Furthermore the trusted entity can identify the originator of a message. The trusted entity may maintain a table of imported and exported object references for each process e.g. tables and . Tables maintained by the trusted entity for each process may include one or more of the following for each object in the table an index an even numbered index may indicate that the object is an exported object an odd numbered index may indicate the object is an imported object a location of the object in the originating process and an identification of the process to which the object was exported or from which the object was imported.

In some embodiments of the invention whenever a software component is added to the system any new types of interfaces introduced by the component are defined in a contract file. The contract file may include one or more definitions of resources or object interfaces. For example an interface definition may include a list of data types the interface uses a list of parameters or arguments expected or allowed by the interface a list of methods that the interface is used for and so on. At the contract file is received by the type server described above with respect to . At the type server in some embodiments analyses the contract file and extracts from it if present a new interface type defined within the contract file. At for the new interface type found in the contract file the type server may determine any inheritance relationships involved with the new interface type and correlate any inheritance relationships found in the new interface with inheritance relationships associated with existing interface types. At the type server may assign a type identifier type ID to the new interface type encountered. At the type server may generate an entry for the new interface type in a table of interface types. The table of interface types may be indexed by type ID and may include one or more of the following elements an interface type identifier type ID a list or ordered set representing inheritance relationships and other information associated with the interface. For example suppose that an interface I inherits from interface Iand interface Iand that interface Iand interface Iinherits from interface I. The list representing this inheritance relationship may be represented as I I I. At a proxy and stub may be generated for the new interface type. At the type server may persist the proxy and stub in a proxy stub datastore. Acts through may be repeated for each new interface type in the contract file.

In some embodiments of the invention the proxy code may be available to the first process because the proxy code and optionally the associated stub code was compiled into the program code of the first process. In some embodiments in addition to searching the cache table the portion of the address space used for storing executables may be searched for the appropriate proxy code for the interface identified by the type ID. Alternatively in some embodiments of the invention an indicator may be placed in the cache so that this separate search is not required. If the appropriate proxy code is not found the first process may send a message at to the type server requesting information associated with the type ID.

At the type server may search its proxy stub datastore and return the requested proxy stub to the first process. The first process may receive the requested information including one or more of the name of the interface type identified by type ID the proxy required for that interface type and the stub required for that interface type. One or more pieces of the received information may be stored in the proxy stub cache for the first process at . The cache may be implemented as an in memory table associated with the process and table may be indexed by type ID. It will be appreciated that although the stub code may not be needed by the first process at this time because the first process is acting as a client in this particular interaction in another interaction the first process may be acting as a server and would in that case need the stub code. For reasons of efficiency the proxy and stub code may be sent in the first interaction. In another embodiment the proxy code may be sent without the stub code and vice versa. At the proxy stub code may be loaded and an instance of the proxy stub created and associated with the received reference .

For example suppose process A receives a message from process B including a reference to object of process B. The message may also include the type ID of an interface implemented by object . Suppose the type ID of the interface implemented by object is type ID . If process A s cache table already includes the proxy code for type ID a new instance of the proxy code is created and associated with the received reference enabling process A to access object in process B. In some embodiments process A may already have the proxy code for type.

If process A s cache table does not include the proxy code for type ID process A may send a message to the type server requesting information about type ID using a reference to one of type server s objects received by process A upon startup. Process A may receive the requested information from the type server. The information received from the type server may include one or more of the following items the interface name of type ID proxy code compatible with the interface identified by type ID and stub code compatible with the interface identified by type ID . Process A may store one or more pieces of the received information in process A s cache table load the proxy code into the executable portion of the process container create an instance of the proxy and associate it with the received reference.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

