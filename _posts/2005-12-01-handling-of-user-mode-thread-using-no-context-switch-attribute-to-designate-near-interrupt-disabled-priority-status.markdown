---

title: Handling of user mode thread using no context switch attribute to designate near interrupt disabled priority status
abstract: A method, apparatus and program storage device for providing a no context switch attribute that allows a user mode thread to become a near interrupt disabled priority is disclosed. A thread includes a no context switch attribute. Control of a thread based on the no context switch attribute is much more efficient than the real-time priority because the no context switch attribute bypasses the overhead of scheduling. Moreover, the no context switch attribute may be used to detect whether a thread performs any undesirable operations that can cause the thread to become suspended while in a critical section. The no context switch attribute is configurable to indicate whether execution of the thread can be suspended.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07971205&OS=07971205&RS=07971205
owner: International Business Machines Corporation
number: 07971205
owner_city: Armonk
owner_country: US
publication_date: 20051201
---
This invention relates in general to a computer operating systems and more particularly to a method apparatus and program storage device for providing a no context switch attribute that allows a user mode thread to become a near interrupt disabled priority.

In computing an operating system OS is the system software responsible for the direct control and management of hardware and basic system operations. Additionally it provides a foundation upon which to run application software such as word processing programs and web browsers. Many modern operating systems support multitasking by which multiple threads share common processing resources such as a processor. A thread in computer science is short for a thread of execution or a sequence of instructions. Threads are basically processes that run in the same memory context. Multiple threads can be executed in parallel on many computer systems. This multithreading generally occurs by time slicing where a single processor switches between different threads or by multiprocessing where threads are executed on separate processors . Threads are similar to processes but differ in the way that they share resources.

In the case of a computer with a single processor only one thread is said to be running at any point in time meaning that the processor is actively executing instructions for that thread. Multitasking solves the problem by scheduling which thread may be running at any given time and when another waiting thread gets a turn. The act of reassigning a processor from one thread to another one is called a context switch. Each time a process is removed from access to the processor sufficient information on its current operating state must be stored such that when it is again scheduled to run on the processor it can resume its operation from an identical position. This operational state data is known as its context and the act of removing the process s thread of execution from the processor and replacing it with another is known as a process switch or context switch. When context switches occur frequently enough the illusion of parallelism is achieved. Even on computers with more than one processor multitasking allows many more tasks to be run than there are processors.

An operating system manages the system and runs third party application software for that system. Thus the common understanding is that an operating system includes not only the low level kernel that interacts directly with the hardware but also libraries required by applications as well as basic programs to manipulate files and configure the system. The operating system kernel allows programmers to manipulate threads via the system call interface.

Operating systems may adopt one of many different scheduling strategies which generally fall into one of the following categories. In multiprogramming systems the running task keeps running until it performs an operation that requires waiting for an external event e.g. reading from a tape . Multiprogramming systems are designed to maximize processor usage. In time sharing systems the running task is required to relinquish the processor either voluntarily or by an external event such as a hardware interrupt. Time sharing systems are designed to allow several programs to execute apparently simultaneously. In real time systems some waiting tasks are guaranteed to be given the processor when an external event occurs.

The architecture of an operating system includes two main layers a user mode and a kernel mode. Programs and subsystems in user mode are limited in terms of what system resources they have access to while the kernel mode has unrestricted access to the system memory and external devices. The user mode is a nonprivileged state where the executing code is forbidden by the hardware from performing certain operations such as writing to memory not assigned to it that could destabilize the system or constitute a security hole.

Today s operating systems e.g. Linux Windows Unix support programs running in user mode and programs running in kernel mode. For example all of the Windows 2000 subsystems and applications run in user mode and each subsystem and application runs in its own protected address space. Thus a process is always running in either user mode or kernel mode. The main body of a user program is executed in user mode and system calls are executed in kernel mode. The kernel mode includes code for providing a protected memory mode with full privileges. The user mode includes privileges to access its own memory area. User applications and environmental subsystems execute in this mode. In addition user mode is a mechanism in certain operating systems e.g. Linux Windows etc. that lets the user install a separate instance of the operating system within the larger installation. User mode thus lets the user create a virtual machine within the computer thereby providing he ability to create test situations for example without running the risk of creating problems within the main system.

There are several advantages to operating in user mode. Operating in user mode allows an engineer to debug code without having a separate test machine to setup different versions of the software kernel main memory and processing area of the software and to train new users. User mode can also isolate the processes that are running inside it so that a virus or other malicious code may be prevented from infecting the larger machine thereby saving hours of unplanned reinstallation and rebuilding. User mode is also helpful for testing new network configurations and creating disaster recovery drills because it insulates the main installation from unintentional or intentional damage.

The Open Source Initiative OSI was formed in February 1998. OSI hoped that the usage of the label open source would eliminate ambiguity particularly for individuals who perceive free software as anti commercial. Thus the OSI sought to bring a higher profile to the practical benefits of freely available source code and wanted to bring major software businesses and other high tech industries into open source. Open source software refers to computer software and the availability of its source code as open source under an open source license to study change and improve its design. Thus open source refers to software in which the source code is freely available for others to view amend and adapt. Typically it s created and maintained by a team of developers that crosses institutional and national boundaries. As such open source software can t be appropriated by one large proprietary vendor.

Linux is one of the most prominent examples of free software and of open source development unlike proprietary operating systems such as Windows and Mac OS all of its underlying source code is available to the public and anyone can freely use modify and redistribute it. In the narrowest sense the term Linux refers to the Linux kernel but it is commonly used to describe entire Unix like operating systems also known as GNU Linux that are based on the Linux kernel combined with libraries and tools from the GNU project and other sources. Most broadly a Linux distribution bundles large quantities of application software with the core system and provides more user friendly installation and upgrades. But Linux or more accurately GNU Linux is just the tip of the iceberg. Today there is a wide range of open source software available and new projects are being started all the time.

With the popularity of open source kernel e.g. Linux more and more controller programs are moving to user mode. However a controller program constantly requires access to hardware in real time fashion and therefore needs to allow a user mode thread to run in a near interrupt disabled priority. Some real time operating systems offer special real time priority. However to provide flexibility they still might share the priority with other threads at the same real time priority.

It can be seen then that there is a need for a method apparatus and program storage device for providing a no context switch attribute that allows a user mode thread to become a near interrupt disabled priority.

To overcome the limitations in the prior art described above and to overcome other limitations that will become apparent upon reading and understanding the present specification the present invention discloses method apparatus and program storage device for providing a no context switch attribute that allows a user mode thread to become a near interrupt disabled priority.

The present invention solves the above described problems by providing a no context switch attribute that is much more efficient than the real time priority because the no context switch attribute bypasses the overhead of scheduling. Moreover the no context switch attribute may be used to detect whether a thread performs any undesirable operations that can cause the thread to become suspended while in a critical section.

A data structure for an execution thread embodied in computer readable memory is provided in accordance with an embodiment of the present invention. The data structure includes a no context switch attribute. The no context switch attribute is configurable to indicate whether execution of the thread can be suspended.

In another embodiment of the present invention a computer system is provided. The computer system includes an operating system for performing processes required by an application a scheduler controlled by the operating system for coordinating execution of threads and manage access to system resources and a thread for providing executable instructions wherein the thread includes a no context switch attribute the no context switch attribute being configurable to indicate whether execution of the thread can be suspended by the scheduler.

Other embodiments of the present invention includes program storage device that includes program instructions executable by a processing device to perform operations for configuring a user mode thread as a near interrupt disabled priority. A method for configuring a user mode thread as a near interrupt disabled priority is also provided.

These and various other advantages and features of novelty which characterize the invention are pointed out with particularity in the claims annexed hereto and form a part hereof. However for a better understanding of the invention its advantages and the objects obtained by its use reference should be made to the drawings which form a further part hereof and to accompanying descriptive matter in which there are illustrated and described specific examples of an apparatus in accordance with the invention.

In the following description of the embodiments reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration the specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized because structural changes may be made without departing from the scope of the present invention.

The present invention provides a method apparatus and program storage device for providing a no context switch attribute that allows a user mode thread to become a near interrupt disabled priority. The no context switch attribute that is much more efficient than the real time priority because the no context switch attribute bypasses the overhead of scheduling. Moreover the no context switch attribute may be used to detect whether a thread performs any undesirable operations that can cause the thread to become suspended while in a critical section.

The computer system and the allocation of system resources to the computer system are controlled by operating system . For the purpose of the present discussion it is assumed that operating system is resident within primary memory although those skilled in the art will appreciate that certain infrequently utilized segments of operating system may be swapped out to secondary memory by memory manager . Operating system includes kernel which comprises the lowest layer of operating system that interacts most directly with the computer system . Kernel dispatches kernel threads to processors for execution provides services to device drivers interfacing with hardware within computer system and implements system services memory management network access and the file system utilized by computer system . In addition to kernel primary memory also stores frequently utilized segments of application software . As is well known to those skilled in the art application software communicates with operating system through an Application Programming Interface API .

Computer system also includes bus interface through which multiple nodes can interface to system resources available within computer system . As will be appreciated by those skilled in the art computer system may also include additional hardware coupled to system bus that is not necessary for an understanding of the present invention and is accordingly omitted for simplicity.

Thread scheduling is an important aspect of implementing threads. In a first category there are cooperative threads which do not rely on a scheduler and cooperate among themselves to share the processor. Because of the complexities involved in programming such threads and because they cannot react quickly to external events cooperative threads are not utilized much in the art nowadays. In a second category are pre emptive threads. Such threads rely on a scheduler that can decide to switch the processor from one thread to another at any point during the execution. Pre emptive threads react quickly to external events because the currently running thread could be pre empted out of the processor and another thread takes over to handle the emergency if needed. Unlike cooperative threads pre emptive scheduling relieves the programmer from the burden of implementing the scheduling mechanism within the application program.

Pre emption of a running thread can generally occur at any point during program execution. Typically pre emption occurs when a timer expires allowing the scheduler to intervene and switch the processor among threads. In the art this is referred to as time slicing the processor among threads and each thread is said to run for a time slice. This form of intervention allows the scheduler to implement various scheduling mechanisms including round robin priority scheduling among others. Additionally pre emption could also occur in response to external events that may require the immediate attention of some thread.

As described above the popularity of open source kernel e.g. Linux is leading to more and more controller programs moving to user mode. However a controller program constantly requires access to hardware in real time fashion and therefore needs to allow a user mode thread to run in a near interrupt disabled priority. Some real time operating systems offer special real time priority. However to provide flexibility they still might share the priority with other threads at the same real time priority.

According to an embodiment of the present invention threads are provided a no context switch attribute to control whether the threads are to be preempted. A system call is provided to allow the no context switch thread attribute to be set and or cleared. The no context switch attribute are on a per thread basis i.e. each thread includes a no context switch attribute . The scheduler checks the no context switch attribute any time the scheduler is invoked. When a no context switch attribute is set the scheduler will bypass all scheduling process and just allow the thread to continue. If one of the threads are forced to be suspended when their no context switch attribute is set the scheduler will clear the no context switch attribute and send a signal to the thread to indicate that an exception occurred. With the no context attribute is attribute set the threads will continue to run with no respect to the priority and the time slices. Only the interrupt handler can preempt a thread that has its no context switch attribute set. When the interrupt handler exits control comes right back to the interrupted thread having the no context switch attribute set.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus . The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly to the system or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the system to become coupled to other data processing systems remote printers or storage devices through intervening private or public networks . Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

Accordingly the computer program comprise instructions which when read and executed by the system of causes the system to perform the steps necessary to execute the steps or elements of the present invention

The foregoing description of the embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not with this detailed description but rather by the claims appended hereto.

