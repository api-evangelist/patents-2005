---

title: Interface chaining to populate a class-based model
abstract: Some embodiments include utilization of a first interface to query a data source using a first configuration and to return a first data set including a plurality of records, each of the plurality of records comprising data of a plurality of fields of the first data set, and reception of the first data set from the data source. Also included may be utilization of a second interface to query the data source using a second configuration and to return a second data set for each of the plurality of records, at least one field of the second configuration being associated with one of the plurality of fields of the first data set, each utilization using the received data of the one of the plurality of fields of a respective record that is associated with the at least one field of the second configuration, and reception of a respective second data set from the data source for each utilization of the second interface. Moreover, a class-based component model representing tag-based data and non-tag-based data may be populated with data of the respective second data sets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700559&OS=08700559&RS=08700559
owner: Siemens Aktiengesellschaft
number: 08700559
owner_city: Munich
owner_country: DE
publication_date: 20050906
---
This application claims priority to Provisional Application Ser. No. 60 666 032 filed Mar. 28 2005 and entitled Connecting Third Party Software to a Tag Based System .

The embodiments described below relate generally to systems for importing operations data into a class based model.

Conventional industrial systems often rely to some extent on computer based automation and monitoring. In some examples of automation and monitoring data arising from the operation of a manufacturing plant is acquired analyzed and responded to if necessary. The data may arise from independent sources with each source configured to provide substantially raw or native point data at pre defined intervals in real or near real time. The point data may be presented to an operator in real or near real time and may include such as numerical values produced by gauges and or monitors e.g. speed temperature or pressure .

Examples of systems that may acquire analyze and act on point data include industrial automation systems supervisory control and data acquisition SCADA systems and general data acquisition systems. In such systems point data may be associated with a tag to create a structural data element that is made accessible to other components systems applications and or users. In general point data obtained from selected sources is subject to dynamic change and is monitored and reported through various operations and functions associated with processing the point data. In industrial automation and control systems decision support and reporting capabilities may be provided based on tag associated point data that is monitored over very short timeframes ranging in the sub second to sub minute range.

Many conventional systems provide only limited capabilities to access interpret and or manipulate tag based point data collectively or in connection with non point data. Non point data relates to a broad category of context providing information that is associated with point data and may extend the functionality and meaning of the point data. Non point data may include descriptive and or attribute information characterizing the point data as well as other information such as limits ranges etc. In conventional systems integral and flexible manipulation of tag based point data and non point data is restricted due to the inherent differences between and properties of the two types of data.

Conventional systems also possess a limited ability to integrate and relate tag based point data and non tag based data. Non tag based data may originate from numerous sources and relate to disparate aspects of an enterprise environment. For example non tag based data may comprise data associated with conventional database applications environments and include transactional information production data business data etc. Conventionally attempts to integrate non tag based data with tag based point data may be hindered or prevented completely as a consequence of underlying differences in structure and content between these data types. As a result generating and implementing logical constructions or schema in which both tag based data and non tag based data are integrally used is problematic in conventional systems. Such limitations limit overall flexibility and increase the difficulty of scaling to complex enterprise level environments.

The foregoing difficulties in managing tag based point data non point data and non tag based data also hinder efficient access to such data. For example a data storage system typically provides one or more mechanisms by which an external system may access the data stored therein. A database management system is a mechanism that may be capable of receiving and responding to queries that comply with a standardized query language. An external system may therefore issue such queries to access or to otherwise manipulate data associated with the database management system.

Some data storage systems support proprietary mechanisms for accessing their stored data. Accordingly if access to the stored data is desired external systems are limited to using the proprietary mechanisms. Some proprietary mechanisms provide external systems with rather comprehensive access capabilities. However the capabilities of such proprietary mechanisms are inherently limited in comparison to standardized open mechanisms such as Structured Query Language SQL . In either of the foregoing cases inefficiencies in accessing the data are exacerbated if the data itself is not coherently and effectively managed.

In order to address the foregoing some embodiments concern a system a method an apparatus a medium storing processor executable process steps and means to utilize a first interface to query a data source using a first configuration and to return a first data set including a plurality of records each of the plurality of records comprising data of a plurality of fields of the first data set and reception of the first data set from the data source. Also provided may be utilization of a second interface to query the data source using a second configuration and to return a second data set for each of the plurality of records at least one field of the second configuration being associated with one of the plurality of fields of the first data set each utilization using the received data of the one of the plurality of fields of a respective record that is associated with the at least one field of the second configuration and reception of a respective second data set from the data source for each utilization of the second interface. Moreover a class based component model representing tag based data and non tag based data may be populated with data of the respective second data sets.

According to further aspects the class based component model may represent assets and geographies of a manufacturing organization. In some embodiments the tag based data and non tag based data are derived from an industrial process which may comprise a continuous process and or operations of facilities involved in at least one of manufacturing assembly natural resource procurement natural resource refinement chemical synthesis water treatment power generation power transmission food processing beverage processing raw materials processing agricultural processing and materials processing.

In some embodiments an apparatus includes a medium storing computer executable program code the program code comprising code to utilize a first interface to query a data source using a first configuration and to return a first data set including a plurality of records each of the plurality of records comprising data of a plurality of fields of the first data set code to receive the first data set from the data source code to utilize a second interface to query the data source using a second configuration and to return a second data set for each of the plurality of records at least one field of the second configuration being associated with one of the plurality of fields of the first data set each utilization using the received data of the one of the plurality of fields of a respective record that is associated with the at least one field of the second configuration code to receive a respective second data set from the data source for each utilization of the second interface and code to populate a class based component model with data of the respective second data sets wherein the class based component model represents tag based data and non tag based data.

In some embodiments the code to populate the class based component model comprises code to populate a collection of components of a class with data of at least one of the plurality of fields of the first data set and data of the second data set.

In some embodiments the second data set includes a second plurality of records each of the second plurality of records including data of a second plurality of fields and the program code further comprising code to utilize a third interface to query the data source using a third configuration and to return a third data set for each of the plurality of records at least one field of the third configuration associated with one of the second plurality of fields each utilization using the received data of the one of the second plurality of fields of a respective record that is associated with the at least one field of the third configuration code to receive a respective third data set from the data source for each utilization of the third interface and code to populate the class based component model with data of the respective third data sets.

In some embodiments the tag based data and non tag based data are derived from a continuous industrial process.

In some embodiments the continuous industrial process comprises operations of facilities involved in at least one of manufacturing assembly natural resource procurement natural resource refinement chemical synthesis water treatment power generation power transmission food processing beverage processing raw materials processing agricultural processing and materials processing.

The appended claims are not limited to the disclosed embodiments however as those in the art can readily adapt the teachings herein to create other embodiments and applications.

System may be used to aggregate real and or near real time operations data arising from the operation of an industrial plant and stored in data source based on a component model. Such a component model may represent tag based operations data and non tag based operations data that are generated by an industrial mechanical process. The operations data may represent any type of operation including but not limited to batch processes discrete processes and or continuous industrial processes employed in the oil industry e.g. in an oil refinery gas industry and or chemical industry.

In this regard the various embodiments described herein can be employed in a wide variety of industries and operational facilities. Any industrial process with differing types of operations data may supply data to systems utilizing the invention. For instance facilities involved with natural resource refinement and procurement oil and gas procurement oil and gas refinement chemical synthesis and refinement water treatment power generation power transmission food and beverage processing raw materials processing e.g. pulp lumber metals and minerals agricultural processing and materials processing e.g. steel mills and foundries may be suited to utilize platforms and software built upon concepts described herein. Additionally facilities involved in finished goods manufacturing and production such as product assembly lines may utilize one or more embodiments or systems with such features.

These facilities may have various assets equipment machinery flows etc. that produce operations data which may be continuous or discrete and may involve operations data that is presented in batches. Examples include pumps motors tanks pipelines mills lathes mixers assembly lines and so on. Operations data may include data from machinery assets process historians maintenance systems enterprise resource planning systems and the like. Examples of such data include pressure temperature capacities volumes rates of flow production totals inventories performance indicators and the like.

 Operations data as used herein includes tag based point data non point data and non tag based data. As used herein point data may be characterized as current real time or value data associated with one or more instruments components or portions of a manufacturing industrial commercial or other system. Any of these instruments components or portions may be configured to generate measure and or sample point data of interest. For example a data acquisition system for a particular instrument or machine may continuously or periodically acquire data reflecting a motor s operating speed and or operating temperature as point data from a point data source associated with the motor. In certain instances the point data may be a simple numerical or string value. Point data may further be associated with monitoring control and reporting functions of various instruments components and applications to provide information relating to the operation of a selected system. This information may also be made available for collection and review by various data acquisition and control systems.

Point data is often acquired in a raw or unstructured form wherein the point data reflects a numerical or string value without supporting details description and or attributes. As previously described certain types of point data may be associated with real time or near real time information e.g. current temperature pressure speed voltage current etc. that may be desirably sampled updated or refreshed relatively frequently. The exact frequency of these operations is typically dependent on the characteristics of the point data itself and may be different across the multiple point data sources incorporated into a particular system.

A tag may therefore represent a data structure comprising selected quanta of information associated with a particular point data informational source and may also comprise certain non point data. In conventional systems acquisition of each tag s current value e.g. point data associated information generally requires a unique configuration for each tag and possibly for each tag s attributes e.g. non point data . Considering that it is not uncommon for complex industrial automation applications to contain upwards of 100 000 tags it will be appreciated that the individualized configuration and management of tags in the aforementioned manner can be very time consuming inefficient and error prone. Furthermore conventional mechanisms for control monitoring or archiving of tag based information tend to become even less useful when attempting to aggregate such information across multiple systems such as in the context of other plant production systems and applications.

Non point data may take many forms including but not limited to attribute information parameters limits and other descriptive information. Certain non point data may be associated with the point data to provide context thereto. As used herein the terms point data and non point data encompass various categories of information that are not necessarily constrained to the examples described herein.

Other types of non point data may include information such as maintenance work orders relational data or API Application Programming Interface structure data from maintenance systems equipment documentation unstructured data usually contained within operating system files and documents and information such as URL Uniform Resource Locator links to supplier web sites. These types of non point data may be associated with non tag based information contained for example within Oracle or SAP databases environments. Non point data therefore represents a broad class of information that may be associated with point data providing a contextual and informational basis.

Data source may comprise any source of any data that may receive queries from system and provide data to system based on the queries. System and data source may comprise any number of hardware and or software elements some of which are located remote from each other. Data of data source may comprise any type of data in any type of data structure that is or becomes known.

According to some embodiments data source comprises a back end data environment employed in an industrial context. Data source may therefore comprise many disparate hardware and software systems some of which are not interoperational with one another. Data source may comprise plant floor production systems enterprise resource planning data systems and any other data systems according to some embodiments. Data of data source may be associated with any aspect of industrial operations and may consist of point data as well as non point data used to characterize contextualize or identify the point data and or the source of the point data.

Process steps and all other process steps mentioned herein may be embodied in processor executable process steps read from one or more of a computer readable medium such as a floppy disk a CD ROM a DVD ROM a Zip disk a magnetic tape or a signal encoding the process steps and then stored in a compressed uncompiled and or encrypted format. In alternative embodiments hard wired circuitry may be used in place of or in combination with processor executable process steps for implementation of processes according to some embodiments. Thus embodiments are not limited to any specific combination of hardware and software.

Initially at step S a first interface is configured to query a data source using a first configuration. The first interface is further configured to return a first data set that includes a plurality of records with each of the plurality of records including data of a plurality of fields.

Configuration of first interface at step S may comprise specifying values for each of the required first configuration and for any desired optional configurations. In this regard a configuration may comprise structures class instances values tables and or any other data types used to constrain an interface. According to some embodiments a configuration may include import parameters which comprise a structure like construct used to configure an SAP Business Application Interface BAPI prior to invocation.

Step S may also comprise specifying one or more identifiers to associate with one or more fields of first data set . First data set comprises a plurality of records that will be returned upon invocation of first interface . Although first data set is illustrated in tabular format some embodiments employ any currently or hereafter known data structure.

Next at step S a second interface is configured to query the data source using a second configuration and to return a second data set. At least one field of the second configuration is associated with one of the plurality of fields of the first data set.

Second interface is configured according to some embodiments of step S. Second interface may also comprise an API that is exposed by data source and is invocable by system . The second configuration of second interface is associated with a field of first data set as indicated by a dashed line. In some embodiments of step S values are specified for all required fields of the second configuration and for any desired optional fields. At least one of the specified values of the second configuration comprises the identifier that was associated with the field as described above with respect to step S. Step S may also comprise specifying one or more identifiers to associate with one or more fields of second data set .

The first interface is utilized at step S using the first configuration. In some embodiments system may invoke first interface at step S using standardized or proprietary mechanisms. Next at step S first data set is received from data source . First data set includes data of the plurality of fields for each record of first data set . System associates data of a particular field with the identifier if any that was associated with the particular field at step S. Accordingly if first data set includes three records system associates three different instances of the identifier with three data values i.e. one data value per record of the particular field.

The second interface is utilized at step S using the second configuration. The second configuration includes the data of the field of the first data set that is associated with the second configuration. The second interface is may be utilized at step S by invoking the second interface once for each record of the first data set. Since first data set of includes three records second interface is invoked three times. Each invocation uses data of a different record but of the indicated data field.

A second data set is received from the data source at step S for each utilization of the second interface. In the embodiment of second interface is invoked three times at step S and system receives a respective second data set for each invocation at step S. Each respective second data set may include different data.

A class based component model may be populated with data of the respective second data sets at step S. System may for example populate an object of the class based component model with the received data. The class based component model may represent tag based data and non tag based data. According to some embodiments the class based component model represents assets and geographies of a manufacturing organization and or the tag based data and non tag based data are generated by a continuous industrial process.

The object may include members having member names corresponding to the above mentioned identifiers. Accordingly the members are associated with one or more fields of second data set as described above. The object may comprise a collection object that includes data of all three second data sets received at step S. The object may also include members having member names that are associated with one or more fields of first data set as described above. Accordingly system may also populated the object with data of first data set .

As used herein systems in communication with one another are directly or indirectly capable of communicating over any number of different systems for transferring data including but not limited to a local area network a wide area network a telephone network a cellular network a fiber optic network a satellite network an infrared network a radio frequency network and any other type of network that may be used to transmit information between devices. Moreover communication between systems may proceed over any one or more currently or hereafter known transmission protocols such as Asynchronous Transfer Mode ATM Internet Protocol IP Hypertext Transfer Protocol HTTP and Wireless Application Protocol WAP .

Operational data sources comprise various data sources including but not limited to plant floor production systems enterprise resource planning data systems and other data systems. Operational data sources may support one or more proprietary interfaces for accessing the data stored therein. An example of such an interface according to some embodiments is an SAP Business Application Interface. Operational data sources may also provide one or more non proprietary mechanism for accessing stored data. The stored data may represent any type of operation including but not limited to continuous industrial processes employed in the oil gas and or chemical industries.

Application environment may transmit queries for data to operational data sources . In response operational data sources acquire and transmit the data to application environment . An example of this operation according to some embodiments is illustrated in and described above with respect to . The operation of system according to some embodiments of process steps will be described below with respect to .

Application environment may comprise enterprise server Web server solution server and data store . Application environment may comprise a single server device or multiple devices. In various embodiments enterprise server and solution server comprise application programs developed in Java and or C and running under Windows XP NT 2000 2003.

Web server manages data communication between application environment administration clients and browsing clients . One or more administration clients and browsing clients may execute one or more Java applets to interact with Java servlets of Web server according to some embodiments.

Solution server is used to access data from operational data sources . In some embodiments solution server includes connection groups and connection processes. A connection group includes one or more object instances each of which is associated with a particular data source of operational data sources . Different connection groups are associated with different data sources.

A connection process comprises processor executable process steps to retrieve data from a particular type of data source e.g. an SAP R 3 server . A connection process may comply with standard or proprietary protocols including but not limited to ODBC JDBC OPC DA OPC HDA OPC AE and Web Services. Process steps to retrieve data from a particular type of data source may be provided in a library by an owner of a proprietary interface for accessing the particular type of data source.

Accordingly several different connection groups may use a same connection process to access their respective data sources. Moreover each object instance includes scripts e.g. Structured Query Language scripts to populate itself based on retrieved data. Solution server manages the objects connection groups and connection processes to access data that is acquired and stored by disparate systems of operational data sources .

Solution server may transmit the data acquired from operational data sources to data store for storage according to some embodiments. Data store may store any data used during the operation of application environment . Data may be stored in data store according to any currently or hereafter known protocol for storing data including but not limited to a class based component and view model. Data store may comprise a front end application that is usable to access and or manage the data stored therein. Such a front end application may support Structured Query Language commands or the like. According to some embodiments data store may receive data directly from operational data sources .

Administration clients may provide user interfaces to perform administration functions for operating system . For example an administrator may manipulate a user interface displayed by one of administration clients to configure a first interface and a second interface as described with respect to process steps . Information received by the user interfaces may be received by Web server and transmitted to data store . Examples of administration clients according to some embodiments include but are not limited to a desktop computer a laptop computer a computer terminal a personal digital assistant a telephone and a tablet computer.

Browsing clients may present views of data contained in data store . Such views may include real or near real time data and may include data stored in data store in an object oriented format. Browsing clients may provide any suitable client application such as a Web browser or a Java applet. As such a browsing client may be connected to application environment through the Internet or through an Intranet. Browsing clients may comprise any suitable user devices including but not limited to those mentioned above with respect to administration clients .

In some embodiments the elements of are connected differently than as shown and each block shown is implemented by one or more hardware and software elements. The hardware and software elements of one or more blocks may be located remotely from each other. Some embodiments may include environments systems servers and clients that are different from those shown.

In some embodiments the tag based data may be generated by and received from SCADA HMI DCS plant historians etc. and the non tag based data may be generated by and received from business systems and applications e.g. SAP ERP Oracle Manufacturing Apps general database apps etc . Moreover component model may represent assets and geographies of a plant or manufacturing organization.

Commonly assigned U.S. Pat. No. 6 700 590 describes a system to use a class based object and view model to collect and display data received from multiple heterogeneous sources. This system encapsulates received tag based data and non tag based data as objects which are instantiations of defined components. The use of components and objects may provide reusability consistency inheritance and other benefits known to those familiar with object oriented techniques. Component model may be established and utilized in any manner including but not limited to those specified in aforementioned U.S. Pat. No. 6 700 590 and or U.S. Patent Application Publication No. 2005 0144154 the contents of which are herein incorporated by reference for all purposes. Component model may follow any suitable modeling protocol or format including those mentioned in the foregoing references.

Each component of component model includes at least one member and each component member is associated with a member type. A member of a first component may be a second component in which case the associated member type is the name of the second component. All members that are associated with primitive member types which include anything other than another component are either associated with a tag attribute or not i.e. None .

Component model of is shown in a tree or hierarchical format which facilitates visualization and understanding of the relationships and patterns of inheritance instantiations for the various component definitions of . Component model may therefore be displayed to an administrator or user according to some embodiments. In the illustrated embodiment only components whose members are not associated with tag attributes are displayed in component model .

Administration device includes microprocessor in communication with communication bus . Microprocessor may comprise an Intel Itanium microprocessor or other type of processor and is used to execute processor executable process steps so as to control the elements of administration device to provide desired functionality.

Also in communication with communication bus is network interface . Network interface is used to transmit data to and to receive data from devices external to administration device such as a device housing Web server . Network interface is therefore preferably configured with hardware suitable to physically interface with desired external devices and or network connections. For example network interface may comprise an Ethernet connection to a local area network through which administration device may receive and transmit information over the Web.

Input device and display are also in communication with communication bus . Any known input device may comprise input device including a keyboard mouse touch pad voice recognition system or any combination of these devices. Of course information may also be input to administration device via network interface . Display may be an integral or separate CRT display flat panel display or the like used to present graphics and text in response to commands issued by microprocessor .

According to some embodiments display displays user interfaces that may be manipulated by an administrator using input device to configure a first interface and a second interface as mentioned above. Some examples of such user interfaces are described below.

RAM is connected to communication bus to provide microprocessor with fast data storage and retrieval. In this regard processor executable process steps being executed by microprocessor are typically stored temporarily in RAM and executed therefrom by microprocessor . ROM in contrast provides storage from which data can be retrieved but to which data cannot be stored. Accordingly ROM may be used to store invariant process steps and other data such as basic input output instructions and data used during boot up of administration device or to control network interface . One or both of RAM and ROM may communicate directly with microprocessor instead of over communication bus .

Data storage device stores among other data processor executable process steps of operations data administrator application . Administration device may execute process steps of operations data administrator application to provide the functions attributed herein to administrator device . Operations data administrator application may comprise a Java applet or a standalone application suitable for the operating system of administration device .

Web browser may comprise processor executable process steps of a Web client. As such administration device may execute process steps of Web browser to request and receive Web pages from a Web server such as Web server . A Java applet such as operations data administrator application may execute within an execution engine provided by Web browser .

Data storage device also includes processor executable process steps of other applications . Other applications may include process steps to perform calendaring e mail functions word processing accounting presentation development and the like. Data storage device may also store process steps of an operating system unshown . An operating system provides a platform for executing applications device drivers and other process steps that interact with elements of administration device . Data files may include any electronic files usable by any application of administration device .

Initially at step S a component to store data is defined. The data is returned by a first interface and one or more next interfaces as will be described below. The component may comply with a class based component and view model such as that described in above mentioned U.S. Pat. No. 6 700 590 but embodiments are not limited thereto. The component may comprise a class from which one or more objects may be instantiated as is known in object oriented programming.

The component may be defined in any suitable manner that is or becomes known. According to some embodiments an administrator operates input device of administration client to specify a component name and one or more members of the component. In the example below the defined component includes members that may be used to determine a cost of a particular type of inventoried material. The defined component may include scripts to populate itself based on retrieved data and may be added to a component model such as component model of .

A data source is selected in step S. The selected data source is to be queried using the first and next interfaces. The data source may comprise any system for storing data. According to some embodiments the selected data source supports proprietary interfaces for accessing the data stored therein.

The data source may be selected at step S by selecting a connection process and or a connection group. As described above different connection groups are associated with different data sources and a connection process may be associated with one or more connection groups.

Application environment may perform any required authentication and or security checks before transmitting user interface e.g. as a Web page to administration client . Embodiments are not limited to the function appearance or arrangement of the user interfaces described herein.

User interface includes connection group field for specifying a connection group and a respective data source to query. The connection group is associated with a data source and also with a connector process for accessing the data source. The connector process may comprise proprietary process steps usable to invoke proprietary interfaces supported by the data source. The proprietary process may be provided in a library e.g. a Java Connector library available to application environment .

User interface also includes component area for displaying a component model. The component model is expanded to present the component chaining component defined in step S. The component has been selected and therefore its members are presented in Mappings table of interface . Also displayed are data types associated with each member.

A first interface is selected in step S. The first interface may comprise an API that is exposed by the selected data source and that may be invoked by application environment . The first interface is to query the selected data source using the first configuration. The first interface is also to return a first data set that includes a plurality of records with each of the plurality of records including data of a plurality of fields. The first interface is selected in the present example by populating function name field with a name of the first interface.

Configuration table shows the first configuration of the first interface. One or more of fields of the configuration may be required as specified in table . Table also presents a data type associated with each field of the configuration and allows entry of a value for each field of the configuration.

Input tables table displays information related to any input tables of the first interface. According to the present example the configuration of the selected first interface does not include any input tables. Some configurations may include both import parameters and input tables and other configurations may include only input tables. Any type of data structure may be used as input to an interface according to some embodiments.

At step S an administrator selects a data structure to query using the first interface. According to some embodiments the first interface is capable of querying a particular set of tables. These tables are listed by and selectable via pull down menu .

One or more members of the selected component are mapped to one or more return data fields of the first interface at step S. The return data fields comprise fields of each record that is returned by the first interface. To perform this mapping according to some embodiments the administrator first selects an empty field in the Column Name column of table .

The configuration of the first interface is defined at step S. Accordingly steps S may comprise assigning values to one or more fields of the first configuration of the first interface. In the present example the administrator selects a field in the Value column of table and is presented with a window as shown in .

Window is associated with the selected field. Window allows the administrator to specify values of data structure members associated with the field. After specifying the values and selecting OK icon the field of table is populated with the specified values as shown in .

A next interface supported by the data source is selected at step S. The next interface may correspond to second interface of . According to the present example the administrator selects Chaining checkbox in step S as shown in . Window of is displayed as a result of the selection.

The name of the next interface may be specified in field of window . The next interface may also be supported by the selected data source and invoked by application environment . The administrator then selects a data structure to query using the next interface at step S. The data structure may be selected via pull down menu . In this regard pull down menu may list a particular set of tables that may be queried using next interface.

A configuration of the next interface is defined at step S. As described with respect to at least one field of the defined configuration is associated with one of the returned data fields of the previous i.e. first interface. Import parameters table lists import parameters of the next interface along with a data type of each parameter and an indication of whether each parameter is optional or required. According to the present example the selected next interface is not associated with any input tables.

The administrator may input values for one or more of the import parameters in the Value column of table . As shown the values may comprise dates strings numbers or any suitable data type. An input value for a particular import parameter may also comprise a member name of the component defined in step S. The member name is associated with a returned data field of the first interface as shown in table . Accordingly the particular import parameter i.e. field of the configuration is associated with the returned data field.

One or more members of the selected component are mapped to one or more return data fields of the next interface at step S. The return data fields comprise fields of each record that is returned by the next interface. The administrator performs this mapping by first selecting an empty field in the Column Name column of table .

Some embodiments allow the administrator to configure additional interfaces for the present interface chain. Accordingly it is determined at step S whether additional interfaces are to be configured. If so flow returns to step S for selection of a next interface. Flow then continues as described above. For example a configuration of the next interface is defined at step S with at least one field of the defined configuration being associated with one of the returned data fields of the prior next i.e. second interface. One or more of the fields may also be associated with one of the returned data fields of the first interface. Flow proceeds to step S if no further interfaces are to be configured.

The first interface is utilized using the first configuration at step S. Application environment may execute proprietary process steps of a connector process at step S to invoke first interface at step S. Data is received from the data source at step S in response to the utilization. As described with respect to the received data comprises a plurality of records. Each record includes data for a plurality of fields such as those illustrated in the pull down field of table shown in . In this regard data of a particular field may be associated with the component member that was mapped to the field at step S.

The next interface is invoked at step S using the configuration of the next interface. At least one field of the configuration includes data of a returned data field that was associated with the at least one field at step S. The next interface is invoked for only one record of the received data.

Next data is received from the data source at step S in response to the invocation of the next interface. Since the data received in step S may include a plurality of records it is determined at step S whether the data received in step S includes any additional records. If so the next interface is again invoked using data of a next record received in step S. Flow therefore cycles between steps S through S for each record of the received data.

At step S it is determined whether additional interfaces were defined during iterations of steps S through S. If so flow returns to step S and continues as described above. Steps S through S are therefore executed with respect to an additional interface for each record received in response to invocation of a previous interface. Interface and data set of illustrate such an additional interface and received data according to some embodiments.

Flow continues from step S to step S if the determination at step S is negative. The component defined at step S is populated at step S. Application environment may populate the component by instantiating an object or a collection object e.g. a table of two or more objects and by populating the object or collection with the data received during each performance of steps S and S. The object members may be associated with the received data based on the mappings defined at steps S and S.

Steps S through S were described above as being executed by an administrator in conjunction with administration client . One or more of steps S through S may be performed by one or more administration clients or other devices. Steps S through S may also be viewed as being performed by application environment in response to input received from administration client .

Those in the art will appreciate that various adaptations and modifications of the above described embodiments can be configured without departing from the scope and spirit of the claims. Therefore it is to be understood that the claims may be practiced other than as specifically described herein.

