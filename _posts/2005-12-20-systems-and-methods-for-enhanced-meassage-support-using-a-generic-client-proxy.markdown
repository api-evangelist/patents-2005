---

title: Systems and methods for enhanced meassage support using a generic client proxy
abstract: Methods and apparatus, including computer program products, are provided for controlling message communication between a first computer and a second computer. An exemplary method includes receiving, at the first computer, one or more messages from the second computer, the messages being stored in a buffer associated with an interface at the first computer. The method also includes calling, by a user interface, the interface at the first computer to retrieve the messages from the buffer. Moreover, the method includes identifying, by the user interface, the messages for presentation based on one or more parameters of the message, and providing the identified messages to the user interface for presentation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07769821&OS=07769821&RS=07769821
owner: SAP AG
number: 07769821
owner_city: Walldorf
owner_country: DE
publication_date: 20051220
---
The present invention generally relates to messaging and more particularly to methods and systems for enhanced message control using a generic client proxy.

Services such as web services and applications may provide a diverse class of information to users. Increasingly users rely on services to access and interact with applications obtain product information order products access secure data and perform a variety of other operations. The users may utilize a client system to access services applications and information from a back end server system. The client may include a user interface such as a web browser to allow a user to communicate with the server system. Applications may be used at both the client and server to facilitate this communication.

A user may interact with applications at the server using the user interface at the client system. As the user interacts with information at a server messages may be generated by the server for transmission to the client. The client may retrieve messages as a batch and then process those messages at periodic intervals. However because the client may receive messages at periodic intervals the client may not immediately process a received message and thus a server may resend the same message to the client. This can lead to repeated processing of the same message which can decrease system performance. Accordingly a need exists for system and methods to control and manage message retrieval from a back end server system which may include one or more applications.

The present invention provides methods and apparatus including computer program products for controlling messages.

The present invention provides methods and apparatus including computer program products for controlling message communication between a first computer and a second computer. An exemplary method includes receiving at the first computer one or more messages from the second computer the messages being stored in a buffer associated with an interface at the first computer. The method also includes calling by a user interface the interface at the first computer to retrieve the messages from the buffer. Moreover the method includes identifying by the user interface the messages for presentation based on one or more parameters of the message and providing the identified messages to the user interface for presentation.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Reference will now be made in detail to the exemplary embodiments of the invention examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

Referring to system may be a system allowing a user to access and interact with applications at server . While a user interacts with an application server may generate one or more messages such as messages indicating for example an error a warning or a status of the application and or user interface . Server may transmit messages to generic client proxy which may store messages in a buffer. User interface may control processing of messages by retrieving messages from generic client proxy identifying messages and displaying messages . User interface may call an interface such as an application programming interface API at generic client proxy of client to control processing of messages or to interact with server and applications . User interface may also control the order and manner of processing messages based on parameters included with message . As described below the parameters may indicate for example the lifetime of message and category of message .

System may be part of an enterprise services framework. An enterprise services framework allows services such as web applications to be aggregated to form composite business level applications. For example user interface can interact with a service and a corresponding object instantiated by that service at server to provide pricing information to user interface .

Client may be a computer capable of executing applications also referred to as programs . For example client may include a computer having one or more processors such as a personal computer. User interface and generic client proxy may be implemented within a client and connected via connection . User interface may call generic client proxy using a remote procedure call to an API at generic client proxy although other types of calls could be used.

Client may also include a plurality of computers with generic client proxy included within a first computer connected by a network connection or direct link to user interface included within another computer. Each of generic client proxy and user interface may also be implemented in a distributed manner using a plurality of computers.

User interface may allow users to interact with applications such as services and web services through generic client proxy . As described below generic client proxy may provide user interface explicit control of message processing. User interface may be a program capable of being executed by client . For example user interface may be implemented using Web Dynpro technology commercially available from SAP AG Walldorf Germany or Asynchronous Java Script and XML referred to as AJAX .

User interface may also operate with or include a web browser to allow a user to interact with applications at server which may be provided through generic client proxy . User interface may present messages to a user using for example a display and or audio devices. In this manner user interface may include a graphical user interface having buttons edit fields tables or the like.

Network connections and may include alone or in any suitable combination a telephony based network a local area network LAN a wide area network WAN a dedicated intranet wireless LAN the Internet a wireless network a bus or any other any communication mechanisms. Further any suitable combination of wired and or wireless components and systems may be used to provide connections and using bi directional unidirectional and or dedicated communication links.

Generic client proxy may provide messaging capabilities including automatic propagation of message between server and client . Generic client proxy may include an API. Moreover the API may be implemented using a model based run time environment one example of which is Advanced Business Application Programming ABAP commercially available from SAP AG although any other environment may be used. The API may be implemented as part of a service oriented architecture SOA although any other architecture may be used. An example of a SOA is the Enterprise Services Framework ESF commercially available from SAP AG Walidorf Germany. The term SOA may also be used to refer to a distributed objects architecture such as CORBA Common Object Request Broker Architecture and DCOM Distributed Component Object Model .

When a user through user interface requests information such as information related to a product presented in a web browser server may provide the information through generic client proxy . Server may also provide messages associated with the information state of the application and user input to generic client proxy . For example server may send error messages to generic client proxy upon detection of an error. As described below user interface and generic client proxy may define rules for processing message in a standardized manner.

Server may include one or more processors such as a computer with applications . Applications may include an application service e.g. an application used for purchasing a web service a database service or any other appropriate program. These applications may provide a service such as purchasing and payroll.

Server may also include components of a distributed system architecture such as an integration and application platform databases libraries applications and the like. An exemplary integration and application software platform that may be used is Exchange Infrastructure XI commercially available from SAP AG Walldorf Germany although other integration and application software may be used instead. Information such as product information and services provided by server may be supported for example with the Enterprise Service Framework AdaptiveRFC commercially available from SAP AG although other frameworks may be used.

Although described with respect to a client server and an enterprise services framework system system can utilize any other architecture or framework.

Moreover server may generate message for transmission to client . Message may describe the state of application at server or describe the state of an object associated with application at server . Message may also provide information to client user interface and generic client proxy . An object may refer to a software bundle of variables e.g. data and related methods. For example in object oriented programming an object may be a concrete realization instance of a class that consists of data also referred to as information and the operations associated with that data. A user of user interface may access server to access a purchase order the purchase order and related method correspond to an object. Message may provide information regarding the state of the purchase order and or indicate an error with the purchase order.

Message may include parameters such as category and lifetime . Using these parameters generic client proxy may control for example whether to provide message to user interface when to provide message to user interface and the duration for providing message to user interface . Additional parameters may also be used to control message handling at generic client proxy and subsequent processing by user interface . For example message may include one or more parameters that user interface uses to relate message to an object such as the name of the object.

Category may indicate the type of information message provided and why message was generated. Category may be represented as an array an integer value a string and other data storage methods including object oriented programming. Category may indicate the type of information that message includes such as an error a warning an indicator of success or information regarding the state of application or user interface . Exemplary categories may indicate a format error a currency conversion error a processing error a business conflict a user interface error a software error generated to indicate the status of application e.g. a software bug that is known and classified according to system behavior and an infrastructure error. For example as a user interacts with application such as a purchasing application at server message may be generated to indicate a format error e.g. a timestamp field is not valid a processing error e.g. when a user attempts to change a read only value associated with application or provided an incorrect credit card number to make a purchase using application or a business conflict e.g. when a user requests a delivery date that is unavailable . While exemplary message categories have been discussed message may include other message categories .

Lifetime may be a parameter that defines the lifetime of message . Exemplary message lifetimes include permanent and present once. Message having permanent lifetime and or present once lifetime may be received by user interface so that the corresponding information from the message can be presented to a user. Message having lifetime of present once may be presented by user interface to a user only once. For example a message having lifetime present once may indicate to a user that a value entered in a purchase order is invalid. The message may be presented once and persist until the user provides a corrected value. In this manner messages having lifetime of present once may trigger a user to update a value.

Message having lifetime of permanent may be presented as long as message exists and may be controlled by for example application running at server that is associated with message . Message having lifetime of permanent may be displayed in a manner that visually associates message to a related item displayed on user interface .

Message may be displayed by user interface so that it is close to a corresponding item which may also be highlighted. An item may be an instance of an object in application that user interface presents to a user. User interface may use a table format such that a specific row or column of a table displayed on user interface corresponds to the item associated with message . For example user interface may display an item requesting a credit card number for a purchase order. When the user enters the credit card number application at server may verify that the number is valid. If the number is not valid message may be generated and transmitted to user interface to indicate the error to a user. The message may be displayed next to the field where the user entered the incorrect credit card number and the incorrect credit card number may be highlighted.

Messages having lifetime of permanent that are not related to an item displayed on user interface may also be of interest to a user and therefore may also be displayed on user interface . Although present once and permanent are parameters of lifetime described above other indications of the lifetime of a message may be used.

Generic client proxy may prohibit user interface from directly requesting information from server step . Generic client proxy may prohibit the direct requests from user interface to server by intercepting calls to server . For example generic client proxy may receive an inbound call from user interface to server . In response to the inbound call generic client proxy generates its own outbound call to server . Alternatively user interface through generic client proxy may continue to make requests for information from server by copying messages into a second message buffer.

User interface may identify and remove message having lifetime of present once from a message buffer at generic client proxy and then process messages having a lifetime of present once step . The processed present once messages may be provided to user interface by generic client proxy so that user interface can further process and if necessary present the information from message to a user.

At step generic client proxy may initiate hierarchical processing for messages with a lifetime parameter of permanent. Hierarchical processing may include determining whether items are currently presented on user interface and whether the presented or displayed items have an associated object at a server that corresponds to messages with a permanent lifetime . If message having a lifetime of permanent relates to an item being presented at user interface message may be processed and presented on user interface . User interface may retrieve a list of messages that have lifetime permanent from generic client proxy . User interface may then search messages having lifetime permanent to identify messages that are related to items that are presented on user interface . For example user interface components may search messages to identify messages having parameter s indicating a given category and object name.

Messages having a permanent lifetime related to items that are not currently presented by user interface may be processed after handling all user interface components. For example after user interface retrieves and displays messages having lifetime present once and retrieves and displays messages having lifetime permanent that are associated with an item being presented on user interface user interface may display all messages having lifetime permanent that are not related to items displayed. These messages may be displayed in a designated message box of user interface . Although the description refers to items and components displayed at a user interface the items or components may also constitute an object.

Messages having a lifetime of permanent may be immutable such that these messages may not be removed from a buffer at client . When messages are immutable message is always available for presentation when user interface presents related objects. For example message having lifetime permanent may be for an object that is not currently being presented. As soon as user interface presents the item corresponding to the object message may be presented along with the item. For example message having lifetime permanent that is not related to an item being displayed may be presented in a designated message box. Once user interface presents the related item message having lifetime permanent may be presented in a table within a row or column for the item and the item may be highlighted. Server may be responsible for clearing messages having lifetime of permanent from message buffer s at client .

At step user interface may end message processing through generic client proxy . If requests to server were prohibited user interface may then resume making requests for information directly to server .

Message buffer at step illustrates an exemplary message buffer including messages at the beginning of message processing. At the beginning of message processing message buffer may contain four messages . These messages may have been sent to generic client proxy by server . The present once message may have a lifetime of present once. The object permanent message and the object permanent message may be messages having a lifetime of permanent. The object present once message may be a message for having a lifetime of present once.

After prohibiting server requests step messages having a lifetime of present once are processed and cleared from message buffer step . For example user interface may process and clear from message buffer at generic client proxy the present once message and the object present once message . User interface may also delete all messages having lifetime present once.

Messages may include for example a flag also referred to as a processed flag to indicate that the messages have been processed by user interface . To avoid unintentional repeated handling of a message during message processing a copied message buffer or alternatively a processed flag may be used as discussed below with respect to . If client uses a copied message buffer messages remain in a message buffer that is synchronized with a server message buffer. Alternatively if client uses a processed flag user interface may set the processed flag to true once a user interface component handles message . Resetting the processed flag to true allows messages having a lifetime of permanent to be processed again by user interface . The result is message buffer at step which contains object permanent message and object permanent message .

Next generic client proxy may initiate hierarchical processing for message having a lifetime of permanent step . The contents of buffer at step include object permanent message and object permanent message .

When object permanent message relates to an object which has an item currently being presented at user interface and object permanent message does not relate to an item currently being presented at user interface hierarchical message processing may be initiated such that object permanent message may be processed and marked with a processed flag as processed in message buffer at step before any processing of object permanent message . However permanent messages may not be cleared from the message buffer by user interface . Instead server may send a message to generic client proxy indicating that certain message s are to be deleted. For example server may send a delete message to generic client proxy with flag s indicating that the delete message is not a new message and to delete a permanent message with a given identifier. Generic client proxy may then clear both the delete message and the message identified by the delete message from message buffer .

After processing message the only remaining unprocessed message in message buffer at step is object permanent message . After processing messages remaining in message buffer the copied message buffer will not contain unprocessed messages when processing ends at step . However messages having lifetime permanent that have been processed may remain in message buffer . Messages having lifetime may include a processed flag which may be reset e.g. to indicate unprocessed after user interface processes messages in message buffer . In this manner messages having lifetime permanent can be preserved and processed again at a later time. Server may send a message to generic client proxy indicating that messages having lifetime permanent may be deleted once the message is no longer needed.

Generic client proxy may identify and copy messages from message buffer to message buffer to facilitate retrieval of messages related to an item step . When message is copied by generic client proxy from buffer to message buffer user interface may then retrieve all messages from message buffer at generic client proxy . User interface may identify messages using a plurality of components. Each component may be used by user interface to retrieve messages associated with the different objects of application at server . User interface components may retrieve display and clear message buffer of their corresponding messages sequentially such that after a first user interface component processes messages in buffer a second user interface component processes messages corresponding to the second object of application running at server . Messages may store parameters indicating to which object of application the message is associated with. User interface components may request messages based on parameters such as the name of an associated object or category . The application program interface may receive a parameter from the user interface component search for messages in message buffer and return to the user interface component messages having the desired parameter. For example a first user interface component may retrieve messages related to credit card verification. These messages may be displayed to a user and cleared from message buffer . Then a second user interface component may retrieve messages related to an order quantity display the messages on user interface and clear the messages from message buffer . Messages or portions therein related to the identified objects may be presented at user interface so it can be displayed to a user.

While user interface processes messages in message buffer message buffer may continue to receive messages from server . Message buffer therefore stores messages for subsequent processing by user interface .

Messages may be processed at step by for example removing identifying and presenting by user interface present once messages as described with respect to step or alternatively initiating hierarchical permanent message processing as described with respect to step .

Message processing may end once the user interface components have retrieved and displayed messages present once messages step . At this point any remaining messages in message buffer do not relate to items being presented on user interface . These remaining messages in message buffer may optionally be processed by a component of user interface including clearing messages from message buffer . Messages may also be cleared from message buffer by user interface using generic client proxy if the message has a lifetime of present once. Messages having a lifetime of permanent may not be cleared from message buffer but such messages may have their processed flag reset by user interface to allow processing again.

Generic client proxy may also include API . API may provide a messaging system that can copy on demand of user interface and that does not influence synchronization between message buffer and message buffer as described with respect to . Alternatively API may be included within user interface . When that is the case user interface may maintain greater control over message processing when compared to having the API at generic client proxy .

User interface may identify move process and delete messages from message buffer that have lifetime of present once step . User interface may move messages having lifetime present once from message buffer to message buffer using API . Once messages having lifetime present once are moved message buffer may not contain any messages having lifetime present once. User interface may then process e.g. identify displaying delete messages having lifetime present once in message buffer . User interface may clear messages from message buffer as the messages are processed.

Messages remaining in message buffer may be copied to message buffer on demand from user interface step . Messages remaining in message buffer may be messages having lifetime permanent and may not be deleted by user interface . User interface may demand that some or all messages e.g. those messages that are related to given object of application at server are copied from message buffer to message buffer by generic client proxy .

User interface may then process remaining messages in message buffer step as described above with respect to step . User interface may process all messages in message buffer and or message buffer . Alternatively user interface may only process messages in message buffer that are related to an item being presented by user interface . Once user interface has processed the messages in message buffer message processing may end step . If user interface demands a restart of message processing then control would return to step .

The systems and methods disclosed herein may also be utilized during software design time such that application at server may transmit error warning success and informative messages as a developer creates objects and associations between the objects. For example application may include generic objects for performing tasks such as a first object for verifying an accurate credit card number and a second object for verifying a shipping address. The developer may choose to associate the first and second objects to ensure that the shipping address matches the address on file for the credit card number. If a user is purchasing a product and the addresses do not match an error message may be sent to the user.

Moreover the systems and methods disclosed herein may be used at runtime with application that generates different messages based on a user s interaction with a user interface and the application . For example a user may be required to log into application or system and may be given only read access to restricted data fields of application . If the user attempts to modify a read only data field an error message may be sent at runtime from server to generic client proxy . However an administrator may be given read and write permission to modify the restricted data fields in which case server may not generate an error message or may generate a success message.

The systems and methods disclosed herein may be embodied in various forms including for example a data processor such as a computer that also includes a database digital electronic circuitry firmware software or in combinations of them. Moreover the above noted features and other aspects and principles of the present invention may be implemented in various environments.

Such environments and related applications may be specially constructed for performing the various processes and operations according to the invention or they may include a general purpose computer or computing platform selectively activated or reconfigured by code to provide the necessary functionality. The processes disclosed herein are not inherently related to any particular computer network architecture environment or other apparatus and may be implemented by a suitable combination of hardware software and or firmware. For example various general purpose machines may be used with programs written in accordance with teachings of the invention or it may be more convenient to construct a specialized apparatus or system to perform the required methods and techniques.

The systems and methods disclosed herein may be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

It is to be understood that the foregoing description is intended to illustrate and not to limit the scope of the invention which is defined by the scope of the appended claims. Other embodiments are within the scope of the following claims.

