---

title: File system write filtering for selectively permitting or preventing data from being written to write-protected storage
abstract: File system write filters are provided which can selectively permit or prevent data from being written-protected storage media. The write filter utilized volatile cache memory to store data that is requested to be written to storage media by applications programming interface function calls. In one aspect, if the particular data is requested to be written to a file that is a file identified on the file exclusion list, the data can be written to the file in non-volatile storage. Otherwise, the particular data is written to volatile cache memory. In another aspect, the write filters can be utilized on computing devices to create a stateless computing device wherein data is written to volatile cache memory in response to write function calls. Upon rebooting, any data that was saved to the volatile cache memory is discarded and the computing device is restored to its original state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640404&OS=07640404&RS=07640404
owner: Microsoft Corporation
number: 07640404
owner_city: Redmond
owner_country: US
publication_date: 20051031
---
Computing devices are becoming more accessible and common in public use locations such as libraries internet cafes print copy stores and the like. These computing devices can be used by multiple people each day who conduct a variety of tasks such as conducting internet searches sending and receiving emails creating and publishing documents and so forth. With a wide variety of tasks to perform the computing devices execute a number of differing applications. Many of the applications and also the computing devices operating systems during their execution attempt to write data to non volatile storage devices such as a hard drive of the computing device. Additionally computer users may also attempt to download files from remote locations such as files obtained over the internet or other computer network to non volatile storage devices of the computer.

Writing data to non volatile storage devices can cause problems with the operation of the computer device such as overwriting critical files for the operation of the computing device infecting the computing device with a computer virus corrupting data and the like. Additionally private files email messages etc. may be inadvertently written to a hard drive of a public use computing device thereby compromising the privacy of personal files of the users of the computing device.

Methods of the known art for preventing data from being written to non volatile storage devices have been utilized which can provide write protection of a storage media by preventing data from being saved at the sector block level of the storage device. However while these methods provide a level of write protection at lower levels of the storage media they do not permit write protection to be implemented at a more precise level.

One or more deficiencies of the known art are overcome by improved methods of write protecting non volatile storage media by utilizing volatile cache memory to store data at the file system level that is prohibited from being saved to write protected volumes.

In one aspect a method for write filtering data is provided that prevents data from being written to non volatile storage media at the file system level. Function calls issued by an application programming interface are analyzed to determine whether to read certain data from a file or to write particular data to a file. If the function call is to write particular data to a file the data is written to volatile cache memory. Alternatively if a function call is to read certain data from a file the volatile cache memory is checked to determine if the certain data is stored there. If it is the certain data is read and returned to the application programming interface.

In another aspect a write filter includes an exclusion list that identifies specific files residing on non volatile storage devices to which particular data may be written. Thus if a function call is received that requests particular data to be written to a file the exclusion list is checked to determine if the specific file is a file identified on the file exclusion list. If the file is on the exclusion list the particular data can be written to the specific file on a non volatile storage media. However if the file is not present on the exclusion list the particular data is instead written to volatile cache memory.

Beneficially aspects of the write filter allow volume protection at the file level thereby permitting protection at a more precise level that that of the known art.

If a determination is made at that the certain data is not present in the cache memory the read function call is passed to the system driver at . The system driver locates the certain data on a volume at and returns the certain data to the application programming interface at . In one embodiment the certain data returned by the system driver is written to cache memory.

If a determination is made at that the function call is to write particular data to a file a determination is made at whether the file is on an exclusion list. The exclusion list identifies specific files that may be written to that are located on otherwise write protected volumes. If the particular data is to be written to a file that is not on the exclusion list i.e. the file is write protected the particular data cannot be written to the write protected file. Instead the particular data is written to cache memory at . At a notification of a successful write is returned to the application programming interface at .

If a determination is made at that the file is on the exclusion list the particular data is written to the file on the write protected volume at . At a notification of a successful write is returned to the application programming interface at .

File directory application programming interface issues a function call e.g. ReadFile WriteFile CreateFile etc. to system services which in turn passes the function call to input output manager . Input output manager passes the function call to file based write filter which determines whether the function call is to read certain data from a file or to write particular data to a file. If file based write filter determines that the function call is to read certain data from a file file based write filter determines if the certain data is located in volatile cache memory . If the certain data is in cache memory the certain data is read and returned to the application programming interface .

If file based write filter determines that the certain data is not located in volatile cache memory file based write filter passes the read function call to file system driver . File system driver in turn obtains the certain data requested in the read function call by determining the file location from volume manager and reads the data via disk drive and non volatile memory . Once the certain data is located and read from non volatile memory the certain data is returned to file based write filter written to volatile cache memory and returned to application programming interface .

In one embodiment a file may be partially read from volatile cache memory and partially from non volatile memory . Similar to the process described above file directory application programming interface issues a function call and file based write filter determines that the function call is to read certain data from a file. Write filter determines that the data is only partially located in volatile cache memory . File based write filter identifies the portion of the certain data that is missing from volatile cache memory and passes the read function call for the missing portion of the certain data to file system driver . File system driver in turn obtains the missing portion of the certain data requested in the read function call by determining the file location from volume manager and reading the data via disk drive and non volatile memory . Once the portion of the certain data that is missing from volatile cache memory is located and read from non volatile memory the certain data is returned to file based write filter written to volatile cache memory and the certain data that was requested by the read function call is returned from volatile cache memory to application programming interface .

If file based write filter determines that the received function call is to request that particular data be written to a file file based write filter determines whether the file to which the particular data is to be written is on a file exclusion list. The exclusion list is a list of files on a write protected volume that are permitted to be written to when a write function call is issued. In one embodiment the application programming interface passes the exclusion list of files to file based write filter as part of the configuration of the write filter settings. If file based write filter determines that the file is a file identified on the file exclusion list the particular data is passed to input output manager and written to non volatile memory after the file is identified by file system driver volume manager and disk driver .

In one embodiment once the particular data is written to the file located in non volatile memory a notification of a successful write is passed to application programming interface .

If file based write filter determines that the file to which the particular data is to be written is not on the file exclusion list file based write filter writes the data to volatile cache memory .

In one embodiment once the data is written to non volatile memory a notification of a successful write is passed to application programming interface .

In another embodiment write filter application programming interface sends a write file function call to file based write filter . The write function call is thereafter processed in the same manner as is described above except that the notification of a successful write is passed to write filter application programming interface and write filter application programming interface interfaces directly with file based write filter instead of system services . This embodiment allows applications to change the configuration of the write filter commit the changes to any file cached in volatile cache memory to non volatile memory or back out of the changes cached in volatile cache memory for any file.

Several aspects of the write filter beneficially provide volume protection by generally preventing particular data from being written to non volatile media while allowing flexibility to selectively write particular data to specifically identified files on write protected volumes that are identified on the file exclusion list.

In one embodiment the write filter provides volume protection by preventing particular data from being written to non volatile media. The write filter provides transparency for file system inputs and outputs including file and directory management function calls by writing particular data to a volatile cache memory instead of a write protected volume. This functionality is significant in stateless computing devices that are executing operating systems or applications off of media such as read only compact disks that do not permit data to be written upon it. The write filter thereby permits computing devices to capture all the write function calls that are issued by enabling particular data to be written to volatile cache memory rather than discarding them if either the media cannot be written upon e.g. read only media or if write protection techniques prohibit data from be written to non volatile memory. Thus by utilizing a write filter all file system calls are honored and executed applications behave as expected by permitting particular data to be written to cache memory. Thus a write filter permits a computing device executing applications from read only media e.g. read only CDs or DVDs to function as if they were operating from read write media. The write filter feature is therefore ideal in the operation of stateless computing devices wherein it is undesirable to write particular data to non volatile media. Non limiting examples of stateless computing devices in which the write filter can be employed include public use computers such as internet cafes library computers print store computers etc. kiosk computing devices and the like. Incorporating a write filter in a stateless computing device allows the particular data that was written to the volatile cache memory to be discarded upon rebooting the computing device. Thus after each reboot the stateless computing device can be returned to its original state without having its non volatile memory unnecessarily store particular data viruses or other files that can impair or compromise its operation that are created by individual users.

In another embodiment the write filter is incorporated in a stateless computing device wherein the write filter functionality permits the contents of the cache to be saved to memory or discarded while the computing device continues to operate e.g. the computing device is not required to be rebooted for the cache contents to be saved to memory or discarded .

In another embodiment the write filter provides flexibility by permitting file and folder level writes to write protected volumes through the utilization of exclusion file lists. Thus the write filter maintains the volume protection by preventing writes to files that are not on the exclusion list while permitting flexibility where necessary to allow particular data to be written to specific files on a volume that have been identified as permissible for example enabling paging of files etc.

Unlike known methods of write protection that prevent particular data from being written to protected volumes at the sector block level embodiments of the present invention allow write filtering at the file system level. This improvement permits more precise control over the type of particular data and files that can be written to non volatile storage and the type of particular data that is permitted to only be written to cache memory. Thus in one embodiment the write filter permits regions of a disk or other non volatile storage to be written upon such as a user directory while other parts are write protected and stateless.

In another embodiment the application programming interface that issues the various function calls e.g. WriteFile ReadFile CreateFile etc. also configures the settings of the write filter. Examples of write filter settings that can be configured by the application programming interface include but are not limited to settings selected from the write filter file exclusion list size of cache memory number of modified files size of modified files and or identification of modified files. In one example writer filter settings can be configured to pre allocate the size of cache memory. In another example writer filter settings can be configured to allocate the size of cache memory as needed.

When the write filter receives an open or create request for a file either a regular file or a directory it first locates the root of the directory tree for the volume the file is on. The write filter then reads the directory information for all the directories along the path leading up to the file to be opened created e.g. from the root directory to the file s parent directory if the directory information is not yet cached. The write filter obtains the directory information by calling file system functions repeatedly for each subdirectory along the path.

After the directory information of the file s parent directory is available the write filter scans the directory entry list of the parent directory to check the existence of the file. Next the write filter checks the desired access against the file attributes of the file if the file already exists. If it passes the write filter further checks the desired access and share access against the current share access setting of the file if the file is already opened. The write filter fails the open request when either test fails. If the request is to create a new file and the file does not yet exist the write filter creates an appropriate entry under its parent directory.

The data of a file is typically divided into blocks of 4096 bytes in size. This size is the same as a page size used by a memory manager. Since most files are cached by the cache manager even when a user application changes one byte of data the cache manager will cache a full page of data with one modified byte. The memory manager subsequently lazy writes the entire dirty page back to non volatile memory. As a result when the write filter receives the write request from memory manager the write size is 4096 bytes or multiple of 4096 bytes.

A balanced tree more specifically a red black tree is used to describe the cached data for a file. A red black tree is a binary search tree with an additional property of being red or black in color at each of its nodes. By constraining the color of each node the red black tree guarantees that no path from root to any leaf can be more than twice as long as any other paths. Each red black tree node contains a number of blocks of data that are contiguous. Furthermore each node in the tree represents a largest possible contiguous block of data. For example if blocks are modified for a given file the red black tree for the file will have 3 nodes the first one containing blocks and the second one and the third one and . If at this point block is modified the last two nodes will merge into a bigger node containing blocks and . This way if a file is modified sequentially the red black tree for the file always has one node.

When the write filter receives a request to read certain data from a file it maps the region of the certain data to be read into a list of contiguous 4096 byte blocks. If all blocks are available in the cache i.e. in the red black tree described in Example 2 above of the file it returns the cached data right away. Otherwise the write filter issues a request to read the corresponding region storing the certain data from the underlying file system. It then overwrites the certain data with those blocks that are already cached and returns the modified data.

When the filter receives a request to write to a file it again maps the region of the data to be written into a list of contiguous 4096 byte blocks. For each block if the block already exists in the cache the write filter simply overwrites the original data with the new data. If the block does not exist in the cache the write filter creates a new block containing the certain data to be written and adds the block to the cache i.e. inserts the new block to the red block tree . In the case that the first and or last block do not align with the region of the write request the write filter must issue read request to read the block s from the underlying file system first and overwrite the write data that is partially within the region of write request.

The exemplary operating environment illustrated in includes a general purpose computing device such as a computer executing computer executable instructions. The computing device typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by the general purpose computing device. By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media. The computing device includes or has access to computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. A user may enter commands and information into the computing device through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may be connected to the computing device. A monitor or other type of display device not shown is also connected to the computing device. In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers. The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

Although described in connection with an exemplary computing system environment aspects of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of aspects of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use in embodiments of the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

In operation the computer executes computer executable instructions to implement aspects of the invention.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

