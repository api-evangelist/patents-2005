---

title: Network virtualization
abstract: A virtual network has virtual machines on physical devices connected to network interfaces each coupled by tunnels () through a forwarding network (), each interface having a forwarding address in an address space of the forwarding network, each network interface having a reconfigurable address mapper () for determining a forwarding address for a packet, and encapsulating the packet with its forwarding address so that the forwarding network can deliver the data packet to the remote physical device having that forwarding address. Such encapsulation enables virtual machines on different physical devices to communicate transparently to the underlying forwarding network. Virtual networks can be created to suit their applications yet use or share existing forwarding networks, while protecting the forwarding network from interference by the virtual machines, and maintaining isolation between virtual machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08223770&OS=08223770&RS=08223770
owner: Hewlett-Packard Development Company, L.P.
number: 08223770
owner_city: Houston
owner_country: US
publication_date: 20050803
---
The present Application is based on International Application No. PCT EP2005 053800 filed on Aug. 3 2005 which in turn corresponds to GB Application No. 0420664.5 filed Sep. 17 2004 and priority is hereby claimed under 35 USC 119 based on these applications. Each of these applications are hereby incorporated by reference in their entirety into the present application. This application relates to co pending applications U.S. Ser. No. 11 575 397 entitled Mapping Discovery for Virtual Network and U.S. Ser. No. 11 575 395 entitled Virtual Network Interface filed on the same day as the present application and which are hereby incorporated by reference by their entirety.

The invention relates to interfaces for virtual networks and to computer networks having such interfaces and to corresponding methods of sending data packets over virtual networks.

In most physical IT infrastructure resource utilization is very low 15 is not an uncommon utilization for a server 5 for a desktop. This means that customers have purchased far more IT infrastructure than they need and this encourages sharing of such physical infrastructure resources to save costs. A known example is VLANs Virtual Local Area Network . Another example is use of spare compute cycles on desktops and servers to perform large scale computations grid applications. These examples require isolation of the network traffic the data storage and processing of these computations from other tasks using the same infrastructure to avoid undesirable interference between tasks. A VLAN involves physically connected ports grouped together by network hardware that supports VLANs. These VLANs are each treated as completely separate entities and can only be joined together by a router. In other words it is a network of computers that behave as if they are connected to the same wire even though they may actually be physically located on different segments of a LAN. VLANs are configured through software rather than hardware which means that when a computer is physically moved to another location it can stay on the same VLAN without any hardware reconfiguration.

It is also known to provide a VPN Virtual private network which can be defined as a network of secure links over a public IP infrastructure. Technologies that fit in this category included Point to Point Tunneling Protocol Layer 2 tunneling protocol and IP Security.

Overlay networks are known created on top of physical network infrastructure and make it easier to change the network configuration abstracting devices from the configuration of the real network. Overlay networks are discussed in the literature for example see 

These approaches operate at the Internet Protocol IP level layer 3 tunneling IP inside IP and configuring routing to build their overlays.

Virtual machine technology is a known mechanism to run operating system instances on one physical machine independently of other operating system instances. It is known within a single physical machine to have two virtual machines connected by a virtual network on this machine. VMware is a known example of virtual machine technology and can provide isolated environments for different operating system instances running on the same physical machine. However each operating system instance running under VMware will see the same networking environment in other words the same single infrastructure configuration where infrastructure means arrangement of processing storage and network resources . A virtual network of virtual machines on the same physical node can be done by VMWare by having a virtual LAN switch with ports on the single physical node. Virtual machines on different physical machines are coupled using the physical network. The terms virtual network and virtual machine are used here in their usual sense to mean a network or machine which is a software entity or entities with some independence from an underlying real or physical machine or real or physical network links and is used where there is a level of indirection or some mediation between the resource user and the physical resource. For example a virtual machine can typically be moved from one physical machine to another without changing its identity and a virtual network can have a topology or address map which differs from that of a physical network or networks which are used by the virtual network.

A first aspect of the invention provides a network interface for a first physical device for sending a data packet from a local virtual machine on the first physical device to at least one other virtual machine on at least one remote physical device coupled by a forwarding network the data packets having a destination address of the other virtual machine in an address space of a virtual network independent of an address space of the forwarding network. The network interface has a connection to each of the local virtual machines and has an address mapper arranged to determine a corresponding forwarding address in an address space of the forwarding network using the destination address of each data packet. The interface encapsulates the data packet with the forwarding address so that the forwarding network can deliver the data packet to the remote physical device having that forwarding address.

Other aspects of the invention include corresponding computer networks methods of sending packets over such networks and corresponding computer programs. Additional features can be combined together and combined with any of the aspects as would be apparent to those skilled in the art. The embodiments are examples only the scope is not limited by these examples and many other examples can be conceived within the scope of the claims.

The embodiments described provide ways to implement transparent and secure ISO layer two network virtualization. Virtual networks that are completely decoupled from the underlying network topology give their users the illusion that they have their own network in which they can run any network services and use any addressing scheme without interference with the physical network. Virtual networks are constructed out of virtual LAN segments vnets which operate at network layer 2 transporting Ethernet frames. Such vnets are implemented in software which operates at the vnet endpoints and hence does not require the modification or configuration of the underlying network or network services such as routers. One application area for such vnets is to provide network virtualization for virtual machines allowing the construction of non interfering and secure virtual systems comprising virtual machines coupled by such vnets.

In attempting to use virtual machines to build computing systems one of the problems is that current virtual machine technology does not virtualize the network. If a virtual machine needs to communicate with a virtual machine that is not hosted on the same physical machine it must use a forwarding network to do so. This forwarding network can be a physical network or another virtual network which is ultimately dependent on an underlying physical network. This means that the virtual machine must have an address routable on the physical network. It also allows the virtual machine to see traffic on the physical network and allows other machines with access to the physical network to send traffic to it.

When trying to build virtual infrastructures these properties are problematical. They make it difficult to protect infrastructure services from virtual machines and to protect virtual machines from each other and machines on the physical network. Vnets can address these problems by isolating virtual machines inside virtual networks that are isolated from the physical network. A virtual machine on a vnet can only communicate with other network interfaces on the vnet and not with the physical network unless it also has a virtual interface exposed to the physical network . Vnets can enforce security using IPSEC for example to encapsulate traffic hiding the traffic from unauthorised observers on the physical network and preventing unauthorised access to vnets.

As shown each interface can support one or many users and each interface may be connected to one or more virtual networks. The forwarding network can be implemented by a real network such as an IP network or may be for example another virtual network which ultimately uses a real network. An example of the interfaces is described in more detail below with reference to . An example of the address mapper is described in more detail with respect to . A process of sending a packet will be described below with reference to .

At step a user sends a data packet to its interface. At steps and the interface determines the vnet ID and determines the destination address from the packet. At step the address mapper determines the forwarding address which is then used in encapsulation step . A dotted line is shown from step to step where the address mapper is updated. This step can be used if the address mapper does not have a forwarding address or if its forwarding address is out of date for example. Optionally the vnet ID is also encapsulated or in the encapsulation so that the forwarding network can use it if desired. The forwarding network routes the encapsulated packet to the forwarding address transparently to the destination address hidden inside the encapsulation at step . At step the receiving interface receives the encapsulated packet and decapsulates it. The destination address is revealed and used by the receiving interface to route the packet to one of many users as appropriate at step . Independently of this process at step the address mapper may periodically update its map in its LUT by sending a discovery request described in more detail below with reference to .

If the forwarding network is an IP network the forwarding address will be an IP address. If a node of the IP network does not recognise the IP address and cannot resolve a hardware address in the underlying hardware network to send it to it would typically invoke an ARP address resolution protocol to try to discover a corresponding hardware address. This involves flooding the network with discovery messages.

Vnets can be built using multipoint tunnels. Where Ethernet is used an Ethernet frame sent to a given vnet is encapsulated in a new IP frame. In one example of such encapsulation the data packet received from the user is an Ethernet frame which already encapsulates an IP header and the payload data as shown in . The Etherip header can be used for this further encapsulation purpose RFC 3378 which involves adding the Etherip protocol identifier then the vnet id in front of the original Ethernet frame. As the Etherip header defined in the RFC does not have enough space the header can be expanded to allow space for 32 bit vnet ids. The use of the Etherip protocol number is merely a convenience to give us a free protocol id which can be used without fear of conflict.

Once the Ethernet frame has been encapsulated as shown in the lower half of it is sent to the forwarding network in the normal way. As addressing in the virtual network is independent of the addressing in the physical network or any forwarding network the address mapper uses a stored mapping in the form of a table for example mapping the vnet id and destination virtual MAC address to a routable IP address the care of address. How this table is configured to fill it at the outset and maintain it up to date is described in more detail below. An outbound unicast frame is sent to the care of address from the table. An outbound broadcast or multicast frame is sent to the vnet multicast address which is a configured multicast address used by the vnet implementation.

Inbound encapsulated frames are passed to a protocol handler which extracts the vnet id from the header removes the header and delivers the contained Ethernet frame to an incoming interface associated with the vnet. In one implementation using the known operating system Linux each vnet has a Linux virtual interface which is used to perform the outbound encapsulation of Ethernet frames and from which inbound decapsulated frames are received. Client interfaces are connected to vnets using the bridge facilities in the Linux kernel as shown in .

When using vnets for virtual machines each virtual machine network interface has a corresponding virtual interface in a privileged Linux instance having access to the physical network and these virtual interfaces are connected to their vnets using bridges. The Ethernet encapsulation decouples the vnet traffic from the physical network while the inbound and outbound processing prevents vnet crosstalk.

However this means the vnet traffic is still transmitted in clear on the network. When security is desired the known IPSEC Encapsulated Security Payload ESP transform or other known security measures can be used to provide message authentication and security and prevent vnet snooping and spoofing for example. IPSEC ESP can provide message integrity and optional confidentiality. Network domain kernel is the policy enforcement point it applies security transforms but does not negotiate the Security Associations SAs . To negotiate SAs a key daemon in user space can be used for example. The user can talk to it over a socket just as the Linux kernel does or an existing IKE Internet Key Exchange daemon e.g. Racoon Pluto can be used. This may imply packet queuing while SAs are negotiated which needs storage resources.

In a practical example the interface could implement vnet security as follows. For an outbound packet it determines a security level required from the COA and VNET id then applies a relevant transform and sends it to network. For an inbound packet for ESP it looks up the SA and processes it then sets the packet security context. For an inbound packet for Etherip only it accepts it if it meets the security policy for that vnet identifying the vnet from the Etherip header. After processing it routes the data packet to vifs on same vnet by Ethernet bridging for example.

As unicast frames are encapsulated in unicast IP packets they can traverse arbitrary network topology to reach the endpoint. Frames encapsulated in multicast IP packets will reach the local LAN segment but will only go further if IP multicast support has been configured in the network routers. As this is not typically done an alternative is to use daemons which are discrete bundles of software code running at a given location for a given purpose following established principles. A first daemon vnetd is used to tunnel multicast packets on the vnet multicast address to peer daemons on remote LAN segments where they are re transmitted. This allows vnets to span arbitrary network topology.

As described above vnets can appear to provide virtual LAN segments to their users that behave to all intents and purposes as if they were hardware LANs. Vnet users can have complete control over the services they run and the addressing scheme they use with no danger of interfering with the underlying physical network. Multiple vnets can be run on the same physical network without interfering with each other and vnets can be secured using IPSEC if desired. Vnets are completely independent of the physical network a vnet can span multiple physical LAN segments and cross routers. No router reconfiguration is required to support such vnets. Vnets can be implemented completely in software and no specialised hardware is required thus making maintenance and scalability more straightforward.

As described giving users the illusion they have their own virtual private LAN means they are able to use arbitrary IP addresses able to use arbitrary MAC addresses and their operations are transparent to the forwarding network and all network services. This in turn means that multiple virtual networks can be used each isolated from others meaning security can be at least as good as a hardware VLAN. Further it is possible to maintain connectivity when users migrate and to decouple virtual LANs from the forwarding network structure. This means it supports multi homed users including interfaces onto the forwarding network.

The virtual networks can be created out of virtual private LAN segments known as VNETs. A single vnet behaves like a LAN segment in that broadcast traffic covers the whole vnet. Virtual networks can be built from of multiple vnets using routers with interfaces on more than one vnet to connect them as is done with real networks . VM network interfaces vifs can be labelled with a VNET id at creation time. VNET id 1 is reserved for the physical network. The Ethernet frames coming from vifs are encapsulated in IP packets. Traffic on VNET physical is not encapsulated. The encapsulated packets keep the vif MAC so they can use DHCP for example . Traffic is routed to vifs by VNET id and MAC so that there is no cross talk between different virtual networks. As shown in the implementation view in described above each vif in a domain has a corresponding virtual interface in the driver domain.

Embodiments of virtual networks to be described below are advantageously used in a software based adaptive IT infrastructure. An exemplary such infrastructure termed SoftUDC will be described briefly below with reference to and embodiments of virtual networks will then be described in the context of SoftUDC.

SoftUDC attempts to provide a utility computing environment with greater flexibility and potential than a known utility data center. SoftUDC abstracts the physical infrastructure of the data center allowing resources to be shared among disparate services and enabling reconfiguration without rewiring. Each server within the SoftUDC runs a virtual machine monitor VMM . This layer provides the abstraction of multiple virtual machines running on each physical machine to provide customer applications and guest operating systems . Each virtual machine sees an abstract view of its storage and network. The VMMs on different nodes can connect virtual machines into virtual farms and ensure that the virtual farms are isolated from each other. A virtual farm then consists of a set of virtual machines virtual networks and associated storage. An administrator has access to a SoftUDC control system spanning all the VMMs the control system allowing the administrator to deploy services and modify virtual farms without need for physical reconfiguration of physical infrastructure. Administrative tasks such as allocating and configuring farms deploying new applications rebalancing loads in the system and performing system maintenance are automated.

The SoftUDC adds a virtualizing layer to the VMM on each server called the gatekeeper which specifically mediates all I O and network traffic generated by the server. The gatekeeper enforces communications access control and provides communications security. Such a gatekeeper can be implemented in hardware in the VMM or in the host operating system. In a preferred implementation the Xen VMM described in P Barham et al Xen and the Art of Virtualization in Proceedings of SOSP 03 2003 is used as the VMM and components of the gatekeeper are implemented in the VMM and the first virtual machine which has special privileges in Xen . shows an example of a SoftUDC software stack on a server including the gatekeeper implemented by a management API application programming interface and by a management virtual machine for providing management services and an operating system to the other virtual machines. Specific embodiments of virtual networks according to aspects of the invention will now be described in the context of SoftUDC. The aim of network virtualization in this context is to provide users with the impression that they have their own virtual private LAN known as a VNET within which they are free to use any MAC or IP addresses they want. VNETs are preferably required to provide security at least as good as that provided by a hardware VLAN. VNETs should be decoupled from the underlying network topology and should maintain network connectivity when virtual machines migrate from one machine to another.

The virtual machine s access to networking is done by providing the virtual machine with a virtual network interface VIF usually appearing to be an Ethernet device. The VMM forwards outbound network packets to its physical network interface and dispatches incoming network packets to appropriate virtual network interfaces. With this implementation virtual machines needing off machine networking use the physical network and their VIFs must have MAC addresses and IP addresses suitable for this. Machines on the physical network can observe virtual machine packets in transit.

As described above VNETs are implemented by labelling a VIF with the VNET that it belongs to. Outbound Ethernet traffic destined for a VNET is encapsulated in an IP packet using Etherip and forwarded to the network. Inbound Etherip traffic is decapsulated to produce an Ethernet frame which is delivered to VIFs on its VNET. The VNET id of a packet is stored in a field of the Etherip header for transport across the network.

Some VIFs require direct access to the physical network and we reserve VNET id 1 for this. Traffic on VNET is delivered to the network without encapsulation and uses the VIF MAC. Encapsulated VNET traffic has to be directed to a suitable IP address the care of address COA also called the forwarding address. This is done based on the destination MAC address of the Ethernet frame and the VNET. If the MAC is a broadcast or multicast address the COA is the local VNET multicast address default 254.10.0.1 . If the MAC is a unicast address the COA is the real IP address of the machine hosting the addressed virtual interface. Care of addresses for VIFs are discovered using a new protocol the Virtual Address Resolution Protocol VARP described in more detail below. VARP is modelled on ARP VARP requests are broadcast or multicast with unicast responses. As VARP learns where VIFs are migration does not cause it any particular difficulty. When a virtual machine migrates the care of addresses of all its VIFs change so we broadcast a VARP reply for all the VIFs. This updates the VARP caches of any systems communicating with it and maintains network connectivity.

In SoftUDC network isolation is implemented using VNETs the VMM encapsulates the packet and sends it to another VMM or a virtual router on the same VNET. The receiving VMM unwraps the packet and delivers it to the target. The target may consume the packet in the case of a virtual machine or forward it e.g. a virtual router or dual homed virtual machine . show an example of how SoftUDC virtualizes the physical network to provide a different view to the machines in the virtual farm shows the physical network configuration and the virtual network configuration for the same example. In an alpha VMM and a beta VMM are running on physical servers coupled by a physical network link and having network addresses as shown. VM is running on alpha and VM is running on beta. VM and VM are connected by two vnets virtual networks and shown in . Hence VM and VM each have two vnet addresses.

There is a need to ensure that other entities sharing the same physical network but not part of the same virtual farm cannot read the data in a packet or send packets to entities in that virtual farm. One approach for doing this is by optionally encapsulating Etherip packets using IPSEC Encapsulated Security Payload ESP in a VNET to provide message authentication and confidentiality. IPSEC encryption ensures the data cannot be read by any entity except the intended target. IPSEC authentication ensures that only entities within the virtual farm can send data other entities attempting to authenticate will not be recognized as belonging to the virtual farm.

To prevent one virtual machine consuming all available bandwidth the facilities in Xen to limit the bandwidth available to a virtual machine can be used. This means that SoftUDC physical machines cannot consume all available bandwidth unless a VMM is compromised. However it does not prevent other non SoftUDC entities sharing the same network consuming all available bandwidth. If the latter is a concern then non SoftUDC entities need to be moved to a separate network.

SoftUDC also provides a virtual firewall that can be incorporated by a virtual farm administrator. The virtual firewall is an ordinary Linux based firewall running in a separate multi homed virtual machine. This allows designers to configure DMZs where a DMZ is typically a computer or small network that sits between a trusted internal network and an untrusted external network and exercise control over the flow of network traffic into out of and through their virtual networks.

The SoftUDC network virtualization makes it easy to create multi tier virtual networks. Two virtual servers can reside on the same physical machine and yet be in completely different networks. This makes it very easy to isolate sensitive virtual machines into separate networks behind virtual firewalls to make it very difficult for an attacker to access them.

Particular issues do arise when wide area VNETs are required. These are discussed below. VNET transport and VARP both use multicast so VNET multicast packets will normally be restricted to the local LAN segment and VARP will not be able to discover VIFs hosted further away. In a network supporting multicast routing this can be remedied by routing the VNET multicast address to the relevant LANs. However multicast routing is often not supported. Therefore a special purpose daemon called vnetd is used to support wide area VNETs. An example is shown in . Three physical LAN segments are shown each having a number of VMMs attached. One vnetd daemon is run on each LAN segment hosting VIFs using hosts h h respectively and each vnetd daemon is connected to all the others. Each vnetd daemon forwards local VNET multicasts to its peers and resends forwarded multicasts locally. These daemons also forward VARP requests and replies.

The Vnetd daemons are transparent to VMMs and encapsulated VNET traffic normally goes direct to the hosting machine not through the vnetd daemons. This is because VARP forwarding ensures that VMMs discover the address of the hosting machine even if the VIF is remote.

The mapping of virtual machine to physical machine may change when a virtual machine is booted or may change while a virtual machine is running if it is migrated to another physical machine. This means we cannot reply on pre configured location information we must dynamically discover the network location of virtual interfaces.

If a virtual machine has physical network access it can be migrated within a LAN segment without losing network connectivity. However if it is migrated to a physical machine on a different route for example on a different network segment it will lose connectivity because its traffic will no longer be routed to it. The technique described here does not have this limitation virtual interfaces can migrate out of a subnet without losing connectivity.

As UDP is unreliable VARP clients retransmit requests if they do not receive a reply within a timeout default 3 s . Requests are retransmitted a limited number of times default 5 . If no reply is received traffic to the requested vif is discarded. While a vif is being resolved using VARP outbound traffic to it is held in a bounded queue. If the queue overflows traffic is silently discarded. In a network supporting multicast routing VARP can work in the wide area without special support. As multicast routing is not often supported VARP by itself will only discover interfaces hosted on the local LAN segment.

However VARP uses the same multicast address as the vnet implantation so its messages can be forwarded in the wide area by the vnet daemons discussed with reference to which enables VARP to traverse arbitrary network topology. A first daemon vnetd is used to forward the VNET multicast to remote nodes having corresponding daemons vnetds which simply rebroadcast incoming traffic onto their local network segment. Thus the daemons act as a virtual multipoint bridge and a VARP proxy. They are transparent to users. Otherwise routing of encapsulated traffic unicast to the COA forwarding address is done by the network in the normal way and does not go through vnetd even if non local.

Once the care of address for a virtual address is discovered encapsulated traffic is sent directly to the care of address whether the care of address is local or not as shown by step . This means that unicast vnet traffic uses the routing already configured in the network and does not require routing changes. Also unicast traffic does not need to be forwarded via vnetds. Care of addresses discovered using VARP are held in the look up table also called the VARP cache indexed by vnet id and virtual MAC address as shown by step . The VARP cache is used to lookup the care of address for outbound frames and VARP requests are only sent if an entry is not found. VARP cache entries are timed out default timeout 30 s for example after which they are resolved again if outbound traffic is to be sent.

The use of VARP means that systems hosting virtual network interfaces only need to be configured with the VARP multicast address and not with the care of addresses forwarding addresses of the virtual interfaces they will send traffic to. The care of addresses are dynamically discovered as needed. This already supports boot time relocation of virtual interfaces. When a virtual interface is relocated at runtime for example because of migration of the virtual machine it is attached to existing VARP cache entries will be incorrect until they expire and the new location is discovered. The VARP cache timeout ensures that this will happen eventually but in the meantime all traffic to the old invalid care of address would be lost. This is often not acceptable so we must take steps to avoid it. When a virtual interface moves to a new location the receiving location multicasts a VARP reply announcing the new location. VARP implementations receiving this reply then invalidate cached VARP entries for the old location. This prevents stale care of address information remaining in the VARP caches and the new location of the vif will be quickly discovered. If desired it is also possible for receivers to update the cached VARP entry from the broadcast. shows an example of firewall traversal for a multicast packet such as a discovery request such as VARP. This uses proxies on either side of the firewall. In this case vnetd is configured to act as a VARP proxy so that when it forwards a VARP reply it sets the care of address to be its own address. This causes all traffic to the proxied virtual interface to go through vnetd rather than direct to the real care of address. This could be useful when the care of address is in another network separated by firewalls. Vnetd can then use a known firewall traversal method such as a VPN tunnel or sockets to traverse the firewalls.

In effect the vnetds act as proxies for the actual endpoints and everything passing between these endpoints goes via these vnetds. For networks or parts of networks no supporting multicast packets any multicast traffic including VARP packets goes via vnetd while non multicast traffic can pass directly and bypass the vnetds.

Discovering the location of virtual interface dynamically means that pre configuration of the location of virtual interfaces is not required and the dynamic discovery and cached updating using VARP means that location is updated quickly when the network location of a virtual interface changes.

As shown in the forwarding network is coupled to an I.F. as described above by means of a network card and software in the form of an operating system . This is coupled to the users in the form of virtual machines VM and VM by bridges and stacks implemented in the operating system. The interfaces and bridges can be implemented in an environment such as the well known Xen operating system which can run and connect virtual machines. Virtual interfaces in Xen are connected using Ethernet bridging. As shown in there is a protocol handler coupled to the network card. This decapsulates incoming packets from the forwarding network and passes them to vnet interfaces VNETIF and VNETIF. There is one bridge per vnetif for passing packets to virtual interfaces VIF. and VIF. respectively. An incoming Ethernet packet is received from the forwarding network by the network interface which forwards it to the operating system handler for the packet based on the protocol identifier in the packet. In the case of virtual network packets this is the Etherip protocol and the operating system has a kernel module registered to handle packets of this protocol protocol handler in the figure . The protocol handler examines the packet header and extracts the virtual network identifier from it. The protocol handler decapsulates the contained Ethernet packet and causes the packet to appear as if received by the virtual network interface corresponding to the virtual network identifier vnetif and vnetif in the . These interfaces are attached to the vnet bridges bridge vif and vif in the which are also connected to the virtual machines on the relevant vnets. In the machine VM is on vnet and machine VM is on vnet.

For example an incoming virtual network packet with vnet identifier will be passed to the protocol handler decapsulated and received from interface vnetif connected to bridge vif. The bridge will forward the packet to interface vif. connected to vm where the packet will be received on eth. The packet will not be seen by vnetif or eth on vm as these are on vnet .

For packets in the other direction the bridges pass the packets to the virtual interface vnetifN for carrying out the outbound transform to determine the forwarding address and then encapsulate the data packet. The inbound transform receives packets from the vnetifN and routes them to the correct virtual machine without revealing information about the forwarding network to the virtual machine.

Routing Bridged interfaces can t run IP so IP address for eth is moved to its respective bridge and routers are updated which maintains network connectivity as will now be explained. When an interface is connected to a bridge incoming packets are picked up by the bridge and forwarded directly to the other attached interfaces. So the packets are not seen by higher level protocols such as IP. So if eth the default network interface is bridged it will tend to lose IP connectivity. However the bridge is itself represented by a network interface e.g. provided by the operating system Xen and if this is assigned an IP address then packets flowing over the bridge get delivered to the IP protocol stack. This is why the IP address of eth is assigned to the bridge and the routing table updated so that the default route goes to the bridge. This keeps IP connectivity.

Almost any applications can make use of virtual infrastructure or virtual networks including any type of software including CAD database web page server and other types. Virtual machines for servers and so on can be implemented using any conventional programming language including languages such as C and compiled following established practice. The software can run on conventional hardware with conventional processors. Other variations can be conceived within the scope of the claims.

As has been exemplified above a network interface is provided for a virtual network having a number of remote interfaces coupled by a multipoint tunnel through a forwarding network each remote interface having a forwarding address in an address space of the forwarding network the network interface being arranged to receive data packets to be sent across the virtual network the data packets each having a destination address in an address space of the virtual network the network interface having an address mapper arranged to determine which of the forwarding addresses to use for each packet according to its destination address the corresponding forwarding addresses being reconfigurable and the network interface being arranged to encapsulate each data packet with its forwarding address so that the forwarding network can forward the data packet transparent to its destination address to implement the multipoint tunnel. Such an interface helps enable a more agile virtual network to be created. The address mapper being able to determine forwarding addresses for more than one of the other interfaces effectively enables the multipoint tunnel. Having a multipoint tunnel can be easier to administer than point to point tunnels since changes to the virtual network can be achieved by reconfiguring the corresponding forwarding addresses without needing to set up new tunnels and set up routing to these different tunnels. This means that the virtual network can be more agile in that users can be added or migrated more easily with less administrative overhead. This can be particularly useful where users are mobile or transient or where there are many users for example. Using a tunnel for a virtual network with its own addressing scheme rather than using the forwarding network directly means the topology and address range of the virtual network can be made independent of those of the underlying forwarding network and of any underlying physical network. The use of encapsulation enables the tunnel which helps preserve the data packets and enables the virtual network to be more independent of the forwarding network if the forwarding network does not care about or interfere with the structure of the data packets being tunnelled. The interface helps insulate the user of the virtual network from the details of the forwarding network such as topology address range restrictions how to access network services and so on. Using a forwarding network is more flexible than a VLAN approach for example because the forwarding network need not be aware of the virtual network and so no adaptation of the forwarding network or specialised hardware is needed. The combination of multipoint tunnel and reconfigurability in particular is useful regardless of how the determination is carried out e.g. by a mapping or an algorithm and regardless of whether there is one or multiple virtual networks.

An additional feature is the address mapper being arranged to determine the corresponding address locally without reference to a remote centralised map. This can help enable the address to be determined with little or no need for the delay and communications bandwidth involved in accessing such a centralised resource.

Another additional feature is the address mapper having a stored mapping of addresses for determining the corresponding address. This may be easier to implement and more flexible than a pure algorithm and easier to keep up to date as forwarding addresses change.

Another additional feature for use with multiple virtual networks is the address mapper being arranged to determine the corresponding address according to which virtual network the data packet belongs to. This helps enable the virtual networks to have separate address ranges and have different properties such as network topology or security properties for example.

Another additional feature for use with multiple users is receiving inbound tunnelled packets from the forwarding network and using the destination address of the packets to route each packet to the correct one of the users. Such routing by the interface can be preferable to passing all packets to all users and allowing them each to discard those they don t recognise. This means users can t see traffic of other users which helps prevent snooping.

Another additional feature for use with multiple virtual networks is the stored mapping having an input for an identifier of the virtual network. This enables multiple networks to be used with little additional complexity or administrative overhead.

Another additional feature for use with multiple virtual networks is the interface being arranged to encapsulate the data packet with an indication of which of the virtual networks the data packet belongs to. This is useful to enable the receiving interface to handle the different virtual networks differently to provide a desired level of service or security properties for example.

Another additional feature is making a user of the virtual network unaware of the corresponding forwarding address. This can be important to make the forwarding network invisible to the user so that the activities of the user cannot interfere with the forwarding network nor interfere with other virtual networks so that security can be maintained.

Another additional feature for use with multiple virtual networks is the interface being arranged to determine which of the multiple virtual networks a data packet belongs to without reference to a user. This can help reduce the risk of a user gaining unauthorised access to another of the virtual networks by providing a false indication of which virtual network they belong to.

Another additional feature is the network interface being arranged to set a source address of the data packet without reference to a user. This can also help reduce the risk of a user gaining unauthorised access to another of the virtual networks by providing a false indication.

Another additional feature is the interface being arranged to intercept all the data packets sent from one or more virtual machines. This helps ensure the virtual machines are isolated and cannot interfere with each other nor with the forwarding network.

Another additional feature for use with virtual machines is the interface using an operating system to provide a bridge from each of the virtual machines to the interface. This can help enable the interface to be implemented more efficiently as such operating systems already have features for implementing a communications stack including routing to different interfaces while maintaining separation for example. This can enable an existing operating system kernel such as a Linux kernel to be used without patching.

Another additional feature is the virtual network using a network standard according to ISO layer 2. Although other higher layers such as layer 3 can be used layer 2 has some advantages being the lowest layer of the conventional network stack before hardware is reached. This means more flexibility for higher layers of the stack. An example is Ethernet which is widely used.

Another additional feature is the forwarding network using a network standard according to ISO layer 3. An example is Internet Protocol. This is commercially the most widely used so is most practical.

Another additional feature is the interface being arranged to configure the stored mapping by sending a discovery request over the forwarding network. This can ease the administrative burden of setting up and maintaining the mapper.

Another additional feature is the interface being arranged to identify if the packet data is a multicast packet and if so send it to a predetermined multicast address in the forwarding network.

Another additional feature is a computer network having a first physical server arranged to run the interface and a second physical server coupled to the first physical server by a physical link and arranged to run a remote interface the forwarding network being arranged to use the physical link.

Another additional feature is a VLAN interface to a virtual local area network. If a user has an existing VLAN for example then it may be more efficient to interface to it rather than tunnel underneath it to exploit its established security and reliability.

Another additional feature for use with multiple virtual networks is the VLAN interface being arranged to determine from a received packet an identifier of a virtual network for that packet and use the identifier to determine an identifier of a corresponding VLAN for use in forwarding the packet over the VLAN.

As described above another aspect provides a network interface for a virtual network the virtual network having a number of remote interfaces coupled by tunnelling through a forwarding network each remote interface having a forwarding address in an address space of the forwarding network the network interface being arranged to receive data packets to be sent across the virtual network the data packets having a destination address in an address space of the virtual network the network interface having an address mapper arranged to determine which of the forwarding addresses to use for each packet according to its destination address the network interface being arranged to automatically configure the address mapper by sending a discovery request for a given virtual network address over the forwarding network to prompt a response with an indication of the corresponding forwarding address and to use the indication in such a response to configure the address mapper. This can ease the administrative burden of setting up and maintaining the address mapper. This can be important to help enable the virtual network to be more complex or more agile to reconfigure quickly according to demand or faults for example. It also helps where users are mobile or to enable users such as virtual machines to be migrated to other parts of the virtual network more easily. Compared to having a remote or centralised mapper the communications overhead can be reduced if there is no need to access the remote mapper every time a packet is sent. Some of the advantage can be gained even if there is some combination of local mapper at the interface with a centralised remote mapper.

Another additional feature is the address mapper having a look up table. This can be more convenient more flexible and quicker than an algorithm approach though both can be combined.

Another additional feature is the discovery request being sent to the remote interfaces to prompt one or more of them to respond. This enables a peer to peer type system with mapping information distributed across the interfaces with no need for a centralised store of mapping information and with automated configuration

Another additional feature is the network interface being arranged to send the discovery request according to whether a mapping of the given virtual network address is empty or time expired. This can help reduce the overhead of too many discovery requests at the outset or while helping keep the mapper up to date.

Another additional feature is the discovery request being sent over a local LAN segment of the forwarding network first and if no response is obtained then the interface is arranged to send the discovery request to other parts of the forwarding network. This can also help reduce the overhead involved in too many discovery requests since the discovery request is not propagated unless necessary.

Another additional feature is the interface being arranged to send the discovery request to other parts of the network via a proxy. This can help enable the request to be propagated more easily where multi cast messages are not handled for example in firewall traversal or in other parts of the network where multi cast messages are not supported.

Another additional feature is the network interface being arranged to alert one or more of the remote interfaces if the data packets come from a new user having a virtual network address not yet associated with the network interface. Again this can help keep mappings up to date and help reduce discovery overhead.

Another additional feature is the discovery request having an indication of the destination address in the form of a virtual MAC address of the destination in the virtual network. This is currently a widely used standard for hardware addresses.

Another additional feature for use with multiple virtual networks is the discovery request having an indication of which of the virtual networks the destination address applies to. This also helps enable automatic configuration of the mapper for use with multiple virtual networks.

Another aspect provides a network interface for a first physical device for sending a data packet from a local virtual machine on the first physical device to at least one other virtual machine on at least one remote physical device coupled by a forwarding network the data packets having a destination address of the other virtual machine in an address space of a virtual network independent of an address space of the forwarding network the network interface having a connection to each of the local virtual machines and an address mapper arranged to determine a corresponding forwarding address in an address space of the forwarding network using the destination address of each data packet and the interface being arranged to encapsulate the data packet with the forwarding address so that the forwarding network can deliver the data packet to the remote physical device having that forwarding address. The use of encapsulation means that virtual machines on different physical devices can communicate over a virtual network transparent to the underlying forwarding network. This makes it easier to create virtual networks tailored to suit their applications yet use or share existing forwarding networks. It also makes it less likely the virtual machines will be able to interfere with the forwarding network or other users of it.

Another additional feature is the address mapper being arranged to determine the corresponding address locally without reference to a remote centralised map. This can help enable the address to be determined with little or no need for the delay and communications bandwidth involved in accessing such a centralised resource.

Another additional feature for use with multiple local virtual machines and arranged to receive inbound encapsulated packets from the forwarding network and use the destination address of the packets to route each packet to the correct one of the local virtual machines. Such routing by the interface can be preferable to passing all packets to all users and allowing them each to discard those they don t recognise. This means users won t see others traffic of other users and thus helps limit snooping. Another additional feature is making the virtual machines are unaware of the forwarding addresses. This can be important to make the forwarding network invisible to the virtual machines so that the activities of the virtual machine cannot interfere with the forwarding network nor interfere with other virtual networks so that security can be maintained.

Another additional feature for use with multiple virtual networks is the interface being arranged to determine which of the multiple virtual networks the data packet belongs to without reference to the virtual machines. This can help reduce the risk of a user gaining unauthorised access to another of the virtual networks by providing a false indication of which virtual network they belong to.

Another additional feature is setting a source address of the data packet without reference to the local virtual machine. This can also help reduce the risk of a virtual machine gaining unauthorised access to another of the virtual networks by providing a false indication.

Another additional feature is the network interface being arranged to intercept all the data packets sent by the local virtual machine. This helps ensure the virtual machines are isolated and cannot interfere with each other nor with the forwarding network.

Another additional feature is using an operating system to provide a bridge from each of the local virtual machines to the interface. This can help enable the interface to be implemented more efficiently as such operating systems already have features for implementing a communications stack including routing to different virtual machines while maintaining separation for example. This can enable an existing operating system kernel such as a Linux kernel to be used without patching.

Another aspect provides a computer network comprising at least a first and second physical server a plurality of virtual machines running on the first and second physical servers whereby at least one of the virtual machines runs on the first physical server and at least another one of the virtual machines runs on the second physical server wherein the virtual machines are adapted to exchange information over a virtual network segment on which arbitrary IP and MAC addresses can be used.

Another additional feature is a plurality of virtual network segments wherein at least one virtual machine is homed on more than one virtual network segment.

