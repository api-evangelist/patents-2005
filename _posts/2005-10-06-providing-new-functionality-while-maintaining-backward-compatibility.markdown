---

title: Providing new functionality while maintaining backward compatibility
abstract: The invention discloses a system method for providing new functionality to an operating system while maintaining backward compatibility with existing applications. The invention can provide new functionality while maintaining backward compatibility without a requirement to change any syntax of an API and without having to create new APIs for all functions. The invention can be configured to pass monolithic data as well as modular data through either legacy APIs or newly created APIs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07793306&OS=07793306&RS=07793306
owner: Microsoft Corporation
number: 07793306
owner_city: Redmond
owner_country: US
publication_date: 20051006
---
New data profiles and application program interfaces APIs can add new functionality and features that may not be present in an existing operating system. However a problem can arise in which new data profiles and APIs may not be compatible with existing legacy profiles and APIs. One solution to this problem could be to just create new APIs to replace the current legacy APIs being used by an operating system or to just change the syntax of the legacy APIs to be able to obtain new functionality. However this may not be desirable because an operating system could lose all support for the legacy applications that may still be useful and desirable to maintain for users. It may therefore be desirable for there to be a method that can allow an operating system to receive new functionality while maintaining interoperability with current legacy APIs without having to change any syntax of the legacy APIs.

The invention discloses a method for providing new functionality to an operating system while maintaining backward compatibility with legacy applications. The invention can store a data profile at a memory location wherein the data profile can reference other data profiles. The invention can further provide an API with a syntax. The syntax can comprise a pointer that points to an object wherein the object can include a second pointer that points to the memory location. Additionally the invention can call the API and the API can provide a handle to an internal object profile.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The invention discloses a system and method for providing new functionality to operating systems while maintaining backward compatibility with legacy applications application program interfaces APIs and data without having to change any syntax of the legacy APIs. The invention can add new functionality while maintaining backward compatibility while using either legacy APIs and profiles or newly created APIs and profiles. The invention can be applied to any type of legacy API when adding new functionality to the legacy API. One such utilization of the invention can be applied to color management applications and APIs of an operating system.

With current technology transferring content from one device to another can be a common occurrence. When transferring content from a source device to a destination device it may be desirable for the content received at the destination device to accurately match the appearance of the content stored on the source device.

Maintaining consistency of the color of content can be one aspect of trying to accurately maintain the appearance of content transferred from a source device to a destination device. In 1993 a number of industry vendors established the International Color Consortium ICC for a purpose of creating promoting and encouraging the standardization and evolution of an open vendor neutral cross platform color management system architecture and components. An outcome of this cooperation was the development of a ICC profile specification.

One intent of the ICC profile format was to provide a cross platform device profile format that could be used to translate color data created on one device into another device s native color space. Many operating systems and developers have adopted these ICC profile formats since then. However it could prove to be a difficult task to create a new color management system that can introduce new functionality while maintaining compatibility with existing legacy ICC profiles and APIs. It may also be difficult to maintain consistency between devices that utilize existing legacy applications and devices that employ new applications with new functionalities. For example when translating content from a device that employs a new application with new APIs some functionalities may get lost in translation to a device that does not possess the new application.

One such new color management system that can overcome deficiencies with current technology is a Windows Color System WCS . The new WCS can allow legacy ICC profiles and APIs to be compatible with new WCS profiles and APIs without having to change the syntax of the legacy APIs. The syntax of an API can define how many parameters are needed to be passed through the API a sequence in which the parameters are processed through the API and what data type of parameters can be processed through the API. The WCS can be configured to provide transparent modular consistent and reliable color matching across different software applications imaging devices imaging media and viewing conditions. The WCS can be configured to introduce new Extensible Markup Language XML based profiles including a Device Model Profile DMP a Color Appearance Model Profile CAMP and a Gamut Map Model Profile GMMP . The DMP can include objective intradevice data that can describe color characteristics of a device. The CAMP can include objective interdevice data that can describe viewing conditions. The GMMP can include subjective interdevice data that can gamut mapping.

Unlike legacy ICC profiles that are opaque and monolithic the new WCS profiles can be configured to be transparent and modular. An opaque ICC color profile may be a preprocessed profile that can be designed or documented such that a third party may not be able to accurately predict what processing is taking place internally to the profile making it difficult to understand what to correct or adjust in case something goes wrong. Adjusting a part of an ICC color profile can have unpredictable consequences since the algorithms may be effectively undocumented. However a transparent WCS profile may be a profile that is not preprocessed and can include objective measurement data of a DMP a GMMP and a CAMP. A transparent WCS profile can also be documented such that each aspect of processing a profile is well documented so that a third party can accurately predict what processing is taking place internally to the profile making it much easier to understand what to correct or adjust in case something goes wrong. A monolithic ICC color profile can be one big lookup table of information that can include all aspects of device conditions viewing conditions and gamut mapping. Since the ICC color profile can include one big lookup table of information a monolithic ICC color profile may have to replace modify unrelated aspects of the profile in order to adjust any specific aspect of the profile. For ICC color profiles one may have to replace the gamut mapping and viewing conditions if one has an unrelated device measurement error. However with a modular WCS profile one can adjust specific aspects of the profile without having to change unrelated aspects of the profile as an individual DMP GMMP and CAMP can be used to represent one entire ICC color profile. Therefore in WCS one can adjust the device measurements in the DMP without changing or touching the GMMP or the CAMP. The WCS can reside within an operating system of a computer and can include a Color Infrastructure and Translation Engine CITE that can act as a core engine of the WCS. The WCS CITE can include methods classes and components that can drive the translation of a source color from a source device to a destination color of a destination device.

The source device destination device and the computer can include a communication interface. The communication interface may be an interface that can allow the source device destination device and the computer to be directly connected to one another or any other device or can allow the source device destination device and the computer to be connected to one another or any other device over a network. The network can include for example a local area network LAN a wide area network WAN or the Internet. In an embodiment the source device destination device and the computer can be connected to one another or any another device via a wireless interface.

Computer can include a profile creator a transform creator and a content translator that can be used together to translate content from a source device to a destination device . Profile creator can be utilized to receive content profiles from the source device and the destination device and can create a handle to an internal profile object associated with the source device and a handle to an internal profile object associated with the destination device. The transform creator can be used to receive the handles created by the profile creator create an optimized transform and create a handle to an internal transform profile as the first pointer just points to an object and the object points to a file name. Once the API is used to process the source profile a handle to an internal profile object can be produced.

The profile creator can also receive a destination profile from a destination device in step . The destination profile can include a data structure that describes characteristics of the destination device. In an embodiment involving color management the destination profile can be a color profile that can describe color characteristics of the destination device. An application within the core engine of the computer can call an API to begin processing the destination profile. In an embodiment involving color management such an API can be for example an OpenColorProfile API. The API can be given a data structure that includes a file name to the destination profile or the API can be given a data structure that includes bits of the destination profile. The destination profile can be referenced by passing a first pointer that points to an object through the API. The object can be for example a second pointer that can point to the file name of the destination profile. Therefore the application running the API can process the destination profile without requiring the application to have any knowledge of an internal structure of the destination profile as the first pointer just points to an object and the object points to a file name. Once the API is used to process the destination profile a handle to an internal profile object can be produced. Both handles and can then be transmitted to a transform creation stage of processing .

In stage two of processing a second API can be called to further process the handles and . In an embodiment involving color management the second API can include for example a CreateMultiProfileTransform API. The second API can take the two handles and along with an optional rendering intent array and can produce an optimized transform . The optional rendering intent array can include any type of subjective user preference data. The optimized transform can include a lookup table that an interpolator can use to convert a source profile to a destination profile. A handle to an internal transform object can be produced from the optimized transform and can be transmitted to a content translation stage of processing .

In stage three of processing a third API can be called to further process the handle . In an embodiment involving color management the third API can be for example a TranslateColors API. The third API can take the handle to the internal transform object and the actual content to be translated from the source device and can output content to the destination device that has been properly translated through the optimized transform that was created. In an embodiment involving color management the content can include an array of colors. In another embodiment involving color management the third API can include for example a TranslateBitmapBits API. A TranslateBitmapBits API can translate content from a source device to a destination device in the same manner as a TranslateColors API however instead of translating for an array the TranslateBitmapBits API can translate for a bitmap.

Again the invention can be applied to any type of legacy API when adding new functionality to the legacy API. One such application of the invention involving the introduction of new functionality to a legacy API can include color management applications and APIs of an operating system. illustrates an embodiment of a method for translating content from a source device to a destination device. A method for translating content from a source device to a destination device can be executed for example with the aide of the core engine of a computer. The translation of content can begin at a first stage profile creation . In the profile creation stage the profile creator can receive a source profile from a source device in step . The source profile can include a data structure that describes characteristics of the source device. In an embodiment involving color management the source profile can be a source color profile that can describe color characteristics of the source device. An application within the core engine of the computer can call an API to begin processing the source profile. In an embodiment involving color management such an API can be for example an OpenColorProfile API. The API can be given a data structure that includes a file name to the source profile or the API can be given a data structure that includes bits of the source profile. The source profile can be referenced by passing a first pointer that points to an object through the API. The object can be for example a second pointer that can point to the file name of the source profile. Therefore the application running the API can process the source profile without requiring the application to have any knowledge of an internal structure of the source a legacy ICC API or a new WCS API can process both legacy ICC device color profiles and new WCS DMPs.

Diagram illustrates an embodiment of how a legacy API can pass new data without having to change the syntax of the legacy API. A modular device profile can be passed through a legacy API by inputting a pointer that can point to an object. The object can be for example a second pointer that can point to the file name of the modular device profile . In an embodiment the legacy API can be a Open Profile API that can be used to open a device profile. In an embodiment involving color management the modular device profile can be a WCS DMP and the legacy API can be a legacy OpenColorProfile API that can be used to open a device color profile. The modular device profile can include a profile name or bits of the profile. The modular device profile can be passed and can provide new functionality without having to change the syntax of the legacy API . An application therefore can pass data through the legacy API regardless if the data is modular or monolithic because a pointer can reference a file name of either a modular device profile or a monolithic device profile without requiring the API to have any knowledge of the internal structure of either device profile. Once the modular device profile is processed through the legacy API any number of modular data parameters can be referenced in order to create a complete profile and a handle to an internal profile object can be returned. In an embodiment involving color management the modular data parameters and can be CAMP and GMMP parameters.

Diagram shows an embodiment of how a monolithic device profile can be processed through a new API while maintaining legacy behavior and diagram shows an embodiment of how a modular device profile can be processed through a new API while maintaining legacy behavior. In an embodiment new APIs and can be Open Profile APIs that can be used to open device profiles. In an embodiment involving color management monolithic device profile and modular device profile can be an ICC device color profile and a WCS DMP respectively and new APIs and can be WCS OpenColorProfile APIs. In order to maintain legacy behavior a user can choose to input any number of null parameters . By inputting these null parameters the new APIs can simulate legacy behavior as it may appear similar to a legacy API that only one parameter is being inputted into the new API. In an embodiment parameters and can comprise a hybrid of monolithic data and modular data. Legacy behavior can also be maintained as in by referencing any number of default modular data parameters inside the function of the new APIs and . In an embodiment involving color management modular data parameters and can include GMMPs and CAMPs. In diagram a handle to an internal ICC profile object can be returned and in diagram a handle to an internal WCS profile object can be returned .

Diagram displays an embodiment of how a monolithic device profile can be processed through a new API while obtaining a new behavior and diagram displays an embodiment of how a modular device profile can be processed through a new API while obtaining a new behavior. Unlike the legacy behavior in which default modular data parameters are referenced from a registry within a legacy or new API a new behavior can be obtained by explicitly setting what a user wants the modular data parameters to be. For example modular data parameters and can be set by a user and can be processed through new API along with monolithic device profile . The same process can be established with modular data parameters and as both can be set by a user and processed through new API along with modular device profile . In both diagrams and a handle to an internal profile object and respectively can be returned.

The new APIs shown in can additionally provide another new item of functionality. In an embodiment the new APIs can be configured in a manner that whenever a new API detects that it is being presented with a monolithic device profile the new API can search for any corresponding modular device profiles or modular data parameters that have been predetermined by a user policy state. The user policy state can be customized by a user. Once the monolithic data is detected the new API can be configured to process the modular device profile or the modular data parameters automatically or the new API can be configured to ignore the corresponding modular device profile or modular data parameters and just process the monolithic data.

In another embodiment the invention can be configured to provide a structured method for API syntax exception processing to handle a plurality of API recognizable API usage mistakes. This may be useful so that the any API being used in conjunction with the invention can still operate properly when presented with a mistake that it can recognize. If an API usage mistake is recognized the API can be configured to either correct the mistake or ignore the mistake. API usage mistakes that are to be recognized can be customized by a user.

In an embodiment transmitting content from one device to another which can involve migrating monolithic and modular device profiles through either a legacy API or a new API can be accomplished with the assistance of a computer program. A computer assisted tool a wizard interface for example can automatically analyze and interrogate devices along with device profiles to produce a format of content suitable for a destination device.

While particular embodiments of the invention have been illustrated and described in detail herein it should be understood that various changes and modifications might be made to the invention without departing from the scope and intent of the invention. The embodiments described herein are intended in all respects to be illustrative rather than restrictive. Alternate embodiments will become apparent to those skilled in the art to which the present invention pertains without departing from its scope.

From the foregoing it will be seen that this invention is one well adapted to attain all the ends and objects set forth above together with other advantages which are obvious and inherent to the system and method. It will be understood that certain features and sub combinations are of utility and may be employed without reference to other features and sub combinations. This is contemplated and within the scope of the appended claims.

