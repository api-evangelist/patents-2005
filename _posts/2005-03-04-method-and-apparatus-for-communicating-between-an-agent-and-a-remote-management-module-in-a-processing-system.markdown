---

title: Method and apparatus for communicating between an agent and a remote management module in a processing system
abstract: A processing system includes control circuitry to control the processing system, a remote management module to enable remote management of the processing system via a network, and an agent to operate as an intermediary between the remote management module and the control circuitry. The agent and the remote management module are configured to cooperatively implement an abstraction layer through which the agent and the remote management module communicate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08291063&OS=08291063&RS=08291063
owner: NetApp, Inc.
number: 08291063
owner_city: Sunnyvale
owner_country: US
publication_date: 20050304
---
This application is related to U.S. patent application Ser. No. 11 073 045 entitled Protecting Data Transactions on an Integrated Circuit Bus by M. Insley et al. filed on Mar. 4 2005 which is hereby incorporated herein by reference.

At least one embodiment of the present invention pertains to remote management of a processing system and more particularly to a method and apparatus for communicating between an agent and a remote management module in a processing system.

In many types of computer networks it is desirable to be able to perform certain management related functions on processing system from a remote location. For example a business enterprise may operate a large computer network that includes numerous client and server processing systems hereinafter clients and servers respectively . With such a network it may be desirable to allow a network administrator to perform or control various functions on the clients and or servers from a remote console via the network such as monitoring various functions and conditions in these devices configuring the devices performing diagnostic functions debugging software upgrades etc. To facilitate explanation such functions are referred to collectively and individually as management functions .

One particular application in which it is desirable to have this capability is in a storage oriented network i.e. a network that includes one or more storage servers that store and retrieve data on behalf of one or more clients. Such a network may be used for example to provide multiple users with access to shared data or to backup mission critical data. An example of such a network is illustrated in .

In a storage server is coupled locally to a storage subsystem which includes a set of mass storage devices and to a set of clients through a network such as a local area network LAN or wide area network WAN . The storage server operates on behalf of the clients to store and manage shared files or other units of data e.g. blocks in the set of mass storage devices. Each of the clients may be for example a conventional personal computer PC workstation or the like. The storage subsystem is managed by the storage server . The storage server receives and responds to various read and write requests from the clients directed to data stored in or to be stored in the storage subsystem . The mass storage devices in the storage subsystem may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magneto optical MO storage or any other type of non volatile storage devices suitable for storing large quantities of data. The mass storage devices may be organized into one or more volumes of Redundant Array of Inexpensive Disks RAID .

Also shown in is an administrative console coupled to the storage server . The storage server in this configuration includes a communication port e.g. RS 232 and appropriate software to allow direct communication between the storage server and the administrative console through a transmission line. This configuration enables a network administrator to perform at least some of the types of management functions mentioned above on the storage server . Filer products made by Network Appliance Inc. of Sunnyvale Calif. are an example of storage servers which has this type of capability.

In the illustrated configuration the administrative console must be directly coupled to the storage server and must be local to the storage server . This limitation is disadvantageous in that it may be impractical or inconvenient to locate the administrative console close to the storage server . Further this configuration makes it difficult or impossible to use the same administrative console to manage multiple devices on a network.

Technology does exist to enable management functions to be performed on a computer system remotely via a network. In one approach a device known as a remote management module RMM is incorporated into a processing system to enable remote management of the processing system referred to as the host processing system via a network. The RMM is often in the form of a dedicated circuit card separate from the other elements of the host processing system. The RMM normally has a network interface that connects to the network and a separate internal interface that connects to one or more components of the processing system. The RMM typically includes control circuitry e.g. a microprocessor or microcontroller which is programmed or otherwise configured to respond to commands received from a remote administrative console via the network and to perform at least some of the management functions mentioned above.

One shortcoming of known RMM technology is that the internal interface between the RMM and the host processing system as well as the software on the RMM are generally customized for a particular design of host processing system. As a result it tends to be complicated and expensive to port to an existing RMM design to a different design of host processing system. Furthermore upgrades or other design changes to the RMM tend to be difficult and expensive.

Hence it would be desirable to have remote management technology which enables remote management functions on a processing system such as a storage server where the remote management technology is more platform independent and thus more readily usable with multiple host processing system designs.

The present invention includes a processing system that comprises control circuitry to control the processing system a remote management module to enable remote management of the processing system via a network and an agent to operate as an intermediary between the remote management module and the control circuitry. The agent and the remote management module are configured to cooperatively implement an abstraction layer through which the agent and the remote management module communicate.

Other aspects of the invention will be apparent from the accompanying figures and from the detailed description which follows.

A method and apparatus for communicating event data from an agent to an RMM in a processing system are described. A processing system such as a storage server can include a remote management module which enables remote management of the processing system via a network and an agent which is used to monitor for various events in the processing system and acts as an intermediary between the RMM and the control circuitry of the processing system. In accordance with embodiments of the invention as described in greater detail below the agent and the RMM in such a processing system cooperatively implement an abstraction layer through which the agent and the remote management module communicate event data and other information. The abstraction layer makes the RMM more platform independent and thus more usable for various different designs of host processing system.

The agent continuously monitors for any of various events that may occur within the processing system. The processing system includes sensors to detect at least some of these events. The agent includes a first in first out FIFO buffer. Each time an event is detected the agent queues an event record describing the event into the FIFO buffer. When an event record is stored in the FIFO buffer the agent asserts an interrupt to the RMM. The interrupt remains asserted while event record data is present in the FIFO.

When the RMM detects assertion of the interrupt the RMM sends a request for the event record data to the agent over a dedicated link between the agent and the RMM. In certain embodiments of the invention that link is an inter IC IC or IC bus. In response to the request the agent begins dequeuing the event record data from the FIFO and transmits the data to the RMM. The RMM timestamps the event record data as they are dequeued and stores the event record data in a non volatile event database in the RMM. The RMM may then transmit the event record data to a remote administrative console over the network where the data can be used to output an event notification to the network administrator.

Events are encoded with event numbers by the agent and the RMM has knowledge of the encoding scheme. As a result the RMM can determine the cause of any event from the event number without requiring any detailed knowledge of the hardware.

The above mentioned abstraction layer which provides greater platform independence is formed by the use of the above mentioned queuing and dequeuing of event data along with a command packet protocol by which the RMM requests and receives event record data from the agent. One advantage of this technique in addition to greater platform independence is that the RMM does not have to read the event data from the agent at the same speed at which the agent acquires the event data. Consequently the RMM can read the event data at a slower rate for example then the rate at which the events occur or are detected by the agent.

An example of a network configuration in which this approach can be employed is shown in . It is assumed for purposes of this description that the processing system to be remotely managed is a storage server however it will be recognized that the technique introduced herein can also be applied to essentially any other type of network connected processing system such as standard personal computers PCs workstations servers other than storage servers etc. The configuration of is similar to that of except that the storage server can be managed through a network from a remote administrative console in addition to being capable of being managed through the direct serial interface. Note that while network and network are depicted as separate networks in they can be the same network.

Referring now to the storage server includes one or more processors and memory which are coupled to each other through a chipset . The chipset may include for example a conventional Northbridge Southbridge combination. The processor s represent s the central processing unit CPU of the storage server and may be for example one or more programmable general purpose or special purpose microprocessors or digital signal processors DSPs microcontrollers application specific integrated circuits ASICs programmable logic devices PLDs or a combination of such devices. The memory may be or may include any of various forms of read only memory ROM random access memory RAM Flash memory or the like or a combination of such devices. The memory stores among other things the operating system of the storage server .

The storage server also includes one or more internal mass storage devices a console serial interface a network adapter and a storage adapter which are coupled to the processor s through the chipset . The storage server may further include redundant power supplies as shown.

The internal mass storage devices may be or include any conventional medium for storing large volumes of data in a non volatile manner such as one or more magnetic or optical based disks. The serial interface allows a direct serial connection with a local administrative console such as console in and may be for example an RS 232 port. The storage adapter allows the storage server to access the storage subsystem and may be for example a Fibre Channel adapter or a SCSI adapter. The network adapter provides the storage server with the ability to communicate with remote devices such as the clients over network and may be for example an Ethernet adapter.

The storage server further includes a number of sensors and presence detectors . The sensors are used to detect changes in the state of various environmental variables in the storage server such as temperatures voltages binary states etc. The presence detectors are used to detect the presence or absence of various components within the storage server such as a cooling fan a particular circuit card etc.

The storage server further includes an RMM and an associated agent . The RMM provides a network interface and is used to allow a remote processing system such as an administrative console to control and or perform various management functions on the storage server via network which may be a LAN or a WAN for example. The management functions may include for example monitoring various functions and state in the storage server configuring the storage server performing diagnostic functions on and debugging the storage server upgrading software on the storage server etc. The RMM is designed to operate independently of the storage server . Hence the RMM runs on standby power and or an independent power supply so that it is available even when the main power to the storage server is off. In certain embodiments of the invention the RMM provides diagnostic capabilities for the storage server by maintaining a log of console messages that remain available even when the storage server is down. The RMM is designed to provide enough information to determine when and why the storage server went down even by providing log information beyond that provided by the operating system of the storage server . This functionality includes the ability to send a notice to the remote administrative console on its own initiative indicating that the storage server is down even when the storage server is unable to do so.

The agent at a high level monitors various functions and states within the storage server and acts as an intermediary between the RMM and the other components of the storage server . Hence the agent is coupled to the RMM as well as to the chipset and the processor s of the storage server and receives input from the sensors and presence detectors .

At a lower level the agent serves several purposes. First the agent provides the RMM with certain controls over the storage server . These controls include the ability to reset the storage server to generate a non maskable interrupt NMI and to turn on and off the power supplies . The agent also monitors the storage server for changes in system specified signals that are of interest. When any of these signals changes the agent captures the state of the signal s which changed state and presents that data to the RMM for logging. In addition the agent provides a consolidation point interrupt controller for the interrupts from the various environmental sensors and detectors in the storage server for use by the host processor s of the storage server .

Referring now to the agent and the RMM cooperatively implement an abstraction layer through which the agent and the RMM communicate event data and other information. The abstraction layer makes the RMM more platform independent and thus more usable for various different designs of host processing systems. As described further below the abstraction layer is formed by the use of the above mentioned queuing and dequeuing of event data in the agent along with a command packet protocol by which the RMM requests and receives event record data from the agent .

The processor s is are the CPU of the RMM and may be for example one or more programmable general purpose or special purpose microprocessors DSPs microcontrollers ASICs PLDs or a combination of such devices. The processor inputs and outputs various control signals and data to and from the agent as described further below.

In at least one embodiment the processor is a conventional programmable general purpose microprocessor which runs software from local memory on the RMM e.g. flash and or RAM . illustrates the relevant aspects of the software of the RMM according to certain embodiments of the invention. At a high level the software of the RMM has two layers namely an operating system kernel and an application layer that runs on top of the kernel . In certain embodiments the kernel is a Linux based kernel. The kernel includes a network interface to control network communications with a remote processing system and a storage server interface to control communications with the other components of the storage server . The network interface includes a protocol stack that includes a sockets layer a Secure Shell SSH layer an TCP IP UDP layer an SSL layer and an Ethernet driver layer . The storage server interface includes a serial driver through which the RMM can communicate with the operating system of the storage server and an IIC control module through which the RMM can communicate with the agent over an IIC bus.

The application layer includes a packet layer which cooperates with the serial driver and a control status decode layer which cooperates with the IIC control module . The packet layer is responsible for converting packets received from other modules in the application layer into a serial format for transmission by the serial driver and for converting serial data received from the serial driver into a packet format for use by other modules in application layer . The control status decode layer is responsible for implementing a command packet protocol on the IIC bus for communication with the agent as described further below.

The application layer also includes a command line interface CLI to allow an authorized user to control functions of the RMM an application programming interface API to allow an authorized remote application to make calls to the RMM software an event monitoring module to request dequeuing of event data from the agent and to assign timestamps to the dequeued data an event management module to receive event information from the event monitoring module to manage a local event database in the RMM and to generate outbound alerts for transmission over the network in response to certain events and a power control module to control power to the storage server .

The agent and the RMM are also connected by a bidirectional IC bus which is primarily used communicating data on monitored signals and states i.e. event data from the agent to the RMM . A special command packet protocol is implemented on this IIC bus as described further below. Note that in other embodiments of the invention an interconnect other than IIC can be substituted for the IIC bus . For example in other embodiments the interface provided by IIC bus may be replaced by an SPI JTAG USB IEEE 488 RS 232 LPC IIC SMBus X Bus or MII interface. The RMM also provides a presence signal PRES to the agent which is a binary signal that indicates to the agent when the RMM is present installed and operational .

The interface between the agent and the CPU and chipset of the storage server is similar to that between the agent and the RMM however the details of that interface are not germane to the present invention.

The sensors further are connected to the CPU and chipset by an IIC bus . The agent further provides a control signal CTRL to each power supply to enable disable the power supplies and receives a status signal STATUS from each power supply .

In certain embodiments the agent is embodied as one or more integrated circuit IC chips such as a microcontroller a microcontroller in combination with an FPGA or other configuration. shows the relevant internal features of the agent according to certain embodiments of the invention. The agent includes a set of power supply control status modules one for each power supply an event detection module a storage server slave interface and IIC slave interface and an RMM interrupt module . The power supply control status modules monitor power supply status and control the enabling disabling of the power supplies . The event detection module includes the FIFO buffer used to transfer data to the RMM as well as a separate buffer used to transfer event data to the storage server control circuitry of the storage server . The event detection module also includes an interrupt mask register IMR . The storage server slave interface provides a data and control interface to the storage server control circuitry. The IIC slave interface provides a connection via the IIC bus to the RMM . The RMM interrupt module is responsible for asserting the normal interrupt IRQ when event data is stored in the FIFO buffer and for asserting the immediate interrupt IIRQ if a specified critical event e.g. imminent loss of power is detected by the agent .

As noted above the agent acts as an interrupt controller for monitored signals from the sensors presence detectors etc. The process of detecting and responding to events is described now with reference to . At block the event detection module in the agent monitors sensors present detectors and other signals in the storage system . If the event detection module detects a specified change in state in any the monitored signals at block it captures the state of the changed signal at block . A change in state on any of the signals constitutes an event. Typically such a change is a high to low or low to high transition across a specified threshold. When the event detection module detects such an event at block it compares the bits that changed against the IMR at block . For every unmasked bit according to the IMR that caused an event at block the event detection module creates an event record and at block loads each such event record into the FIFO buffer which is essentially an event queue. The presence of one or more event records in the FIFO buffer causes the event detection module to signal the RMM interrupt module to assert the normal interrupt IRQ.

The RMM responds by reading the FIFO buffer as described below until the agent de asserts the normal interrupt IRQ which the agent does when the FIFO buffer becomes empty . The size of the FIFO buffer is chosen such that it can hold at least the maximum number of events that the agent concurrently monitors plus some predetermined number of additional events.

Although the specific format of event records in the FIFO buffer is implementation specific illustrates one possible format. In the illustrated example an event record is a 16 bit entity. The most significant bit bit is the Value bit which reflects the state of the monitored signal. For example the state of the Value bit indicates whether the monitored signal is asserted or de asserted. The next most significant bit bit is the Simultaneous bit which when asserted indicates that this event occurred at the same time as the event which proceeds it in the FIFO buffer .

Bits are the Event Type field which encodes each event as one of four possible types of events Normal system event Status event Storage Server Command event or RMM Command event. With regard to the Normal system event type when an unmasked event occurs at the input to the agent the event is entered into the FIFO buffer if the signal is not masked. With regard to the Status event type in response to an RMM Capture Sensor State command from the RMM on the IIC bus the agent scans all of its sensor inputs and places an entry into the FIFO buffer with the Event Type field set to indicate a Status event. With regard to the Storage Server Command event type certain agent commands associated with the storage server can be specified to result in entries being recorded in the FIFO buffer when such a command is received from the RMM interface the event type bits are set to indicate a Storage Server Command event. Similarly certain agent commands associated with the RMM can be specified to result in entries being recorded in the FIFO buffer when such a command is received from the RMM interface the event type bits are set to indicate an RMM Command event.

Bits of the event record are the Signal ID. For Normal and Status events this field is the encoded signal number identifier . Each signal is assigned a number with 12 bits allowing detection of up to 4 000 different events. For Command events this field contains the command value if the command is designed to generate an event or if the command is a non supported command. For supported commands bit of the event record is cleared. Any command received which is not supported by the agent is also placed into the FIFO buffer but with bit set.

The RMM uses a command packet protocol to control the agent . This protocol in combination with the FIFO buffer and described above provides the abstraction layer between the RMM and the agent . In certain embodiments the command and data link between the RMM and the agent is the IIC bus as described above however in other embodiments a different type of link can be used.

The command packet protocol is now further described with reference to . illustrates the protocol with a simple transaction on the IIC bus . The top track shows what the overall transaction looks like on the IIC bus the middle track shows what the IIC bus master transmits the bottom track shows what the IIC bus slave transmits. In general the RMM operates as the IIC bus master and the agent acts as the slave.

In S represents a start condition P represents a stop condition and A represents an acknowledgement ACK . Not shown but potentially used in place of an ACK A is N which represents a non acknowledgement NACK condition when a transaction fails.

In certain embodiments the Slave Address field is seven bits representing the combination of a preamble four bits and slave device ID three bits . The device ID bits are typically programmable on the slave device e.g. via pin strapping . Hence multiple devices can operate on the same IIC bus. R W represents a read write bit e.g. 1 for reads 0 for writes .

As is well known IIC does not provide any mechanism to ensure data integrity. Consequently certain embodiments of the invention add such a mechanism to the communications between the agent and the RMM on the IIC bus . In certain embodiments this mechanism is provided by following each data byte that goes over the IIC bus i.e. not the Slave Address the S ANN or R W bits with its 1 s complement. This is shown in where Data represents a data byte and Data represents the 1 s complement of Data. The receiving device performs an exclusive OR XOR of each data byte and its 1 s complement to validate the byte. A data mismatch or failure to transfer the second byte invalidates the first byte resulting in the first byte being ignored by receiving device.

To perform a read operation the RMM issues a special class of Write command called a Read Setup command to the agent over the IIC bus to tell the agent what the RMM wants to do next. The RMM then performs a Read operation on the IIC bus to cause the agent to provide the data. shows the format of a Write packet according to certain embodiments of the invention. The RAN bit determines whether the packet is a read or write e.g. 0 for write 1 for a read and is therefore shown as a W in to indicate the packet is a Write packet. Each command field i.e. Cmd and Cmd is in certain embodiments a 16 bit value that specifies the command being transmitted. Command field Cmd is the 1 s complement of command field Cmd. The parameter field is an optional field used with certain commands to pass parameter values. In parameter field Param is the 1 s complement of parameter field Param.

Many different commands may be implemented between the RMM and the agent on the IIC bus depending upon the specific needs of the system. One such command is the Read FIFO command. The Read FIFO command is sent by the RMM over the IIC bus to the agent in response to the agent s assertion of the normal interrupt IRQ to command the agent to return event data from the FIFO buffer . The Read FIFO command is an example of a Read Setup command which as noted above is actually a special class of Write command. In response to a Read FIFO command the agent transfers data from the FIFO buffer to the RMM using one or more Read packets. In certain embodiments of the invention FIFO data is always transferred one event at a time as follows an IIC Start S Slave Address four data bytes i.e. FIFO upper data byte and its 1 s complement followed by FIFO lower data byte and its 1 s complement IIC Stop P . If no other Read Setup command is issued a subsequent IIC Read transfer sends the next entry in the FIFO buffer to the RMM . FIFO pointers for the FIFO buffer are updated only after the agent has an indication that the transfer has succeeded as can be determined with IIC error checking. If any of the first three data bytes are NACKed then the transfer is deemed to have failed and the FIFO pointers are not updated.

Many other types of commands can be implemented between agent and the RMM on the IIC bus using the above described command packet protocol. Examples of such commands are commands used to turn the power supplies on or off to reboot the storage server to read specific registers in the agent and to enable or disable sensors and or presence detectors. Some of these commands may be recorded by the agent as events in the FIFO buffer .

Thus a method and apparatus for communicating event data between a remote management module and an agent in a processing system have been described. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.

