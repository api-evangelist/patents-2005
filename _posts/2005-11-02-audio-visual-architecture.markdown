---

title: Audio visual architecture
abstract: Aspects of an audio/visual architecture are disclosed. In one aspect, a system is disclosed where the system has a media manager object, an audio/visual program, and a player/recorder object so that when the program is selected, the media manager dynamically loads the player/recorder object for either playing or recording the program. For example, with respect to the media manager object, it can manage a collection of related program entities and any corresponding player/recorder components. Also, the media manager can allocate share source ports and shared sink ports in order to dynamically create virtual circuit paths for selected program entries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08413196&OS=08413196&RS=08413196
owner: Microsoft Corporation
number: 08413196
owner_city: Redmond
owner_country: US
publication_date: 20051102
---
This application is a divisional of U.S. application Ser. No. 09 322 643 filed May 28 1999 which is hereby incorporated by reference in its entirety.

This application is related to co pending application U.S. application Ser. No. 11 205 727 filed on Aug. 15 2005 entitled Audio Visual Architecture .

A large environment such as a large building or a large house may have many audio video devices located throughout the environment. These AV devices may include CD players speaker systems computer systems television receivers satellite receivers displays and so on. In addition many sources of media may be available. One such media is a jukebox containing a variety of compact discs. The AV devices typically provide a control panel through which the device can be controlled. For example a CD player provides a control panel that allows a CD to be started paused or stopped. Typically the interconnections between the AV devices are static. That is when the AV devices are installed cabling is routed between devices. For example speaker wire may be routed between an amplifier and speakers.

A problem with such static interconnections it is very expensive and difficult to provide all the desired interconnections and to change connections. Another problem is that it is cumbersome to use only the control panels to control the devices. It would be desirable to have an architecture that would support the dynamic interconnection between devices.

In various aspects of the presently disclosed subject matter an audio visual system is provided where the system may have a media manager object an audio visual program and a player recorder object so that when the audio visual program is selected the media manager dynamically loads the player recorder object for either playing or recording the visual program. Thus in one aspect the media manager object may be a hierarchically organized resolver of a player recorder component when the audio visual program is presented to the media manager object. In another aspect the media manager object can manage a collection of related audio visual program entities and corresponding player recorder components. In yet another aspect the media manager object can allocate shared source ports and shared sink ports to dynamically create a virtual circuit path for a selected audio visual program entry.

In another aspect the presently disclosed subject matter may comprise of instantiating a player recorder object and self resolving an audio visual program to a player recorder associated with a player recorder object in accordance with a selection of the audio visual program. Any one of an operating system driver code an application programming interface a tool kit and a processing device may be used to provide for such instantiation and self resolving.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Each output component e.g. laserdisc player or output software component has a source port associated with each type of the output signal that it can output. For example an output component may output a video signal in RGB format through one source port and may output audio signal in AES format through another source port. Each input component e.g. speaker system or input software component has a sink port associated with each type of input signal that it can input. For example an input component may input a signal in RGB format through one sink port. The AV system models each port with a corresponding port object. The AV system has a corresponding primitive source port object for each source port and a corresponding primitive sink port object for each sink port.

Each source port can be connected to one or more input ports. For example a source port that outputs a video signal can be connected to the input ports of several monitor devices. The path between a source port and a sink port can be static or dynamic. A static path may correspond to a direct connection between a source port and a sink port of the output component. A dynamic path can be established through a switching mechanism. A switching mechanism allows for its sink ports to be connected to its source ports so that a path can be established. The connection can be a virtual circuit or a transport medium. For example a certain bandwidth of the transport medium may be allocated for the connection. The path between a source port and a sink port is referred to as a primitive circuit. A primitive circuit may be a direct path between a source port of an output component and a sink port of an input component. A primitive circuit may also be a path between a source port of an output component with an input switching port a type of sink port of a switching mechanism. Similarly a primitive circuit may be a path between an output switching port a type of source port of a switching mechanism to a sink port of an input component. The AV system has a corresponding primitive circuit object for each path with a signal origination from a source port and or terminating at a sink port corresponding input switching port object for each input switching port and an output switching port object for each output port.

The AV system may represent each path by a primitive circuit object. In this example primitive circuit object corresponds to a direct path between the left audio source port of the laserdisc player and an input switch port of the switching mechanism. The AV system represents the switching mechanism by a switch object . A switch object contains an input source port object for each of its input switch ports and an output switch port object for each of its output switch ports.

The AV system represents a path for a signal between a complete source port and a complete sink port by a virtual circuit. A signal models actual informational context that is on a path. A virtual circuit may represent static and dynamic connections. is a block diagram illustrating the session layer objects that represent virtual circuits. The AV system represents a virtual circuit by a virtual circuit object. The virtual circuit object corresponds to the path between the complete source port of the laserdisc player and the complete sink port of the speaker system. The virtual circuit object corresponds to the path between the source port of the laserdisc player and the complete sink port of the display. The virtual circuit object corresponds only to the audio source ports of the laserdisc player and the virtual circuit object corresponds only to the video source ports of the laserdisc player. Each virtual circuit object contains a primitive binding information corresponding to each of the paths within that virtual circuit. For example the virtual circuit object contains a primitive binding information and . The AV system allows each source port to be connected to multiple sink ports.

This function returns a pointer to the owner object of the port. The owner of the port is the object that directly contains a complete port. Each port within the port hierarchy as the same owner object.

This function returns a pointer to the parent port of this port. The parent port is that port which is the next higher port in the port hierarchy.

This function informs a sink port that it is to consider the signals within a stream for the purpose of assigning them to a primitive sink port.

This function returns the number of assignments between a signal and a primitive sink port that was made during the assignment.

This function is passed an assignment number and returns an indication of the signal that is assigned to the primitive port.

This function is used to inform a complete sink port and its container of the assigned stream so that any action appropriate to the connection can be taken such as powering on the output component.

This function returns the usage of the signal. The usage may be for example left audio or the red of an RGBsignal.

This function returns a pointer to the source port that is producing this stream. The source port is at the same level in its hierarchy as this stream is in its hierarchy.

This function returns a pointer to the numbered output switch port that is connected to this input switch port.

This function returns a pointer to the complete source port that is producing the signals being routed by this virtual circuit.

This function returns a pointer to the complete source port that is receiving the signals being routed by this virtual circuit.

This function returns the number of bindings between primitive source ports and primitive sink ports this virtual connection.

This function returns the numbered binding as a pointer to the primitive source port and a pointer to the primitive sink port.

According to a step of an example method including steps and this function returns an in indication of whether this source is active. A source port is active when it is capable of producing a signal.

At a step this function returns a pointer to the primitive circuit associated with this source port if this is a primitive source port.

The output objects that correspond to the output components provide a behavior that returns the identification of a sink port object that is appropriate for assigning the signals associated with a specified stream object. For example a speaker system object that is passed a stream that includes both video and audio signals would return an indication that only audio sink ports are to be assigned. The output objects may also provide additional behavior that is specific to the type of output component. For example a display object may provide behavior for turning the display on and off and for controlling the contrast of the display. A speaker system object may provide behavior for controlling the volume equalizer functions and surround sound system controls. This additional behavior may be part of the base object class or may be provided through a derivation of that base object class.

A program pool object represents a collection of AV programs. Each AV program has a corresponding program object . An AV program conceptually corresponds to a media that can be played by a player recorder component. For example an AV program may represent the feed provided through a certain television channel a musical score stored on a CD a movie stored on a laserdisc and so on. These AV programs can be hierarchically organized to represent more complex AV programs. For example an AV program may include a sub AV program corresponding to the feed from a television channel and a sub AV program corresponding to the output of a computer program. Thus AV programs can represent arbitrarily complex multimedia programs. The AV system represents an AV program by a program object . A program object provides the behavior to browse through the hierarchy of the AV programs represented by that program object allows a player recorder component to be assigned to the AV program and provides a behavior corresponding to the loading of the AV program into the player recorder component. A program object also has a program ID which provides descriptive information about the AV program. For example descriptive information may include the name of the movie that the AV program represents. A program object stores the location of the media that corresponds to the AV program. For example if the AV program corresponds to a laserdisc in a certain laserdisc stack then the location would indicate the stack and slot of the laserdisc within the stack. In one embodiment the location is represented as a path within a hierarch of locations. A program object stores the identifier of an owner which may be the program pool object that the program object is within. A program object allows for the retrieving of its child program objects and may allow for certain criteria to be established so that only children that match the criteria are returned. A program object may also allow for retrieving of its parent program object. In one embodiment the parent program object may be retrieved through the containing program pool by providing the location of the program object to the program pool. A program object has a program type associated with it. The program type specifies a path through a hierarchy of program types. The hierarchy of program types is described below in detail.

In one embodiment the AV system provides a capability for resolving a program ID into many different types of references. For example the AV system may provide a get program object function that inputs a program ID and returns a reference to a corresponding program object. The AV system may also provide a get program genre function that inputs a program ID and returns a set of program objects in the same genre. For example a program ID for a country music song when provided to the get program genre function would return references to program objects corresponding to other country music songs. To implement such multi resolution references the functions may access the program object associated with the program ID to retrieve information on its genre.

A program object may provide alternate interfaces for maintenance of state. For example a program object may provide an interface for adding and deleting properties of the program object and setting properties of the program object. An alternate interface may also provide for the adding and deleting of child program objects or for the deleting of the program object itself. These interfaces may be specific to the type of AV program represented by the program object.

A program pool has a corresponding program pool object. A program pool object provides an access port for each client that is accessing the program pool. The program pool object provides a function that receives a program ID and returns a reference to a program object corresponding to that program ID. A program pool object also allows for database cursor like access to the program objects. For example a query can be submitted which specifies the criteria for program objects. The program objects that match that criteria are provided in a result set. The client can access that result set using techniques such as advance to the next program object get reference for the current program object and return a set of references for the program objects in the result set. In one embodiment the result set of a query may be cached at a client to reduce communications between the clients in the program pool. The program pool may also automatically update the client s cache as the set of programs that match the criteria changes. In one embodiment the program pool provides an access control mechanism to restrict access by certain clients. The program pool may use the phantom object mechanism as described in U.S. application Ser. No. 09 322 455 entitled Method and System for Tracking Clients. 

The media manager provides a mechanism for managing media at its location and for providing a player recorder object for the media itself. For example a media manager object may correspond to a multi laserdisc stack. The media manager object provides a load program function that is passed a program object and that returns a player recorder object with the program loaded. A media manager may be hierarchically organized. That is a media manager object may have child media manager objects to an arbitrary level of nesting. Each parent media manager object may also have an associated location table . The location table maps the location of a program to the media manager object that is responsible for returning the player recorder object for that program object. A media manager object that has no child object may process the location of the program object to identify which player recorder to associate with the program object. For example if a media manager object represents a multi laserdisc stack then the media manager object may use the location associated with that program object to determine which slot in the stack contains the media for that program.

One skilled in the art would appreciate that various modifications can be made to the present invention. Accordingly the invention is not limited to the specific embodiments but instead the scope of an invention is specified by the following claims.

