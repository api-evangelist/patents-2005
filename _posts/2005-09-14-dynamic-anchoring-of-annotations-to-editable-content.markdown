---

title: Dynamic anchoring of annotations to editable content
abstract: Described is the annotating of computer document content, particularly editable content, by saving annotations in a separate annotation store, and mapping the annotations back to the content. By mapping, no data are added to the original content at runtime, and only minimal data need be added to the content when persisted. An annotation is anchored to a piece of runtime content, such as upon creation of the annotation, by maintaining annotation data as well as start and end pointers mapped to the annotated piece. Upon saving the content, information (e.g., an anchor marker including an identifier) is persisted with the piece of content to allow the annotation to be re-anchored to the piece upon subsequent reload. For example, when loading content from persistent storage that includes an annotation identifier, the annotation identifier is processed to locate a start and end of the portion and an annotation in the annotation store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08015482&OS=08015482&RS=08015482
owner: Microsoft Corporation
number: 08015482
owner_city: Redmond
owner_country: US
publication_date: 20050914
---
Annotations are independent markings notes and other miscellaneous information such as highlighting that is added to a document after the document or at least part of it is in some state in which it can be reviewed. Note that annotating is not the same as re editing one draft document into a later version but instead refers to adding material that is generally independent in meaning and semantics e.g. something a reviewer previously would have done on a paper copy printout of the document. Today annotating of electronic documents may be done by certain computer programs such as word processing programs.

While some computer programs thus allow annotations to be electronically added to documents created by that program there are many types of documents programs and content formats that exist in contemporary computing. The programs that allow the addition of such annotations typically do so by inserting the annotations within the content that is directly into the content in a proprietary format. The annotations may be rendered according to the program e.g. as footnotes bubbles superimposed handwritten notes and so forth. Because the annotations are within the content the ability to use a computer system to electronically annotate content and read back the annotations essentially depends on the program that created the content or at least a similar program that understands the format.

Briefly various aspects of the present invention are directed towards annotating content including editable content by saving annotations in a separate annotation store and mapping the annotations back to the content. No data are added to the original content at runtime and only minimal data are added to the persisted content. To this end an annotation is anchored to a piece of runtime content such as upon creation of the annotation in a manner that does not substantially alter the runtime content from the perspective of a program that has loaded the content. Upon saving the content information e.g. an anchor marker including an identifier is persisted in association with the piece of content that allows the annotation to be re anchored to the piece of content upon subsequent reload. The anchor mechanism may comprise start and end pointers that indicate the annotated piece of content relative to other content.

When loading content from persistent storage that includes an annotation identifier the annotation identifier is processed to indicate a start and end of the portion. An annotation is then able to be associated with the portion based on the start and end data.

In one implementation an annotation store maintains the sets of annotation information. A dynamic anchor manager converts the identifier into a mechanism e.g. the start and end pointers that anchors annotation information of one of the sets in the annotation store to the piece of runtime content without substantially altering the runtime content.

Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various aspects of the technology described herein are directed towards annotating content particularly editable content with any annotations saved in a separate annotation store. In general and as described below no data are added to the content when it is loaded that is at runtime and only minimal data need be added to the persisted content when saved. In one example implementation this is accomplished in a text object model that generates annotation anchors in the format of an annotation framework with tags placed in the persisted data and pointers associated with but not maintained within the content. However as will be understood the present invention is not limited to any particular model or framework. For example as will be understood annotations may be associated with anchored to graphics images in a document anchored to a portion of video and or audio and so forth. As such any of the examples mentioned herein are non limiting and the present invention may be used various ways that provide benefits and advantages in computing in general.

Turning to of the drawings there is shown a block diagram generally representing an architecture in which an annotation service generally designated works with an annotation store designated and dynamic anchor manager to annotate a content document . In general and as described below when the document is created or first loaded from storage into a computer system annotations may be added to the document at locations corresponding to specified pieces of content. When in the loaded state the annotation service and dynamic anchor manager do not merge the annotations into the corresponding annotated content but rather maintain the annotations in an annotation store separate from the annotated content. In order to associate the annotation information from the store to the corresponding piece of content in the document the dynamic anchor manager maintains data referred to herein as pointers or anchors.

To this end in the document s loaded state each annotation is dynamically anchored to selected content in the document when the annotation is created. Upon saving the document into its persisted state the annotations and anchors are also persisted in one of various ways described below. Upon reloading the document the annotation service and dynamic anchor manager use the persisted anchors to re associate the persisted annotations with the same content. Thus the dynamic anchor manager loads existing anchors and creates new anchors associated with user selected content in the document.

Upon serialization of the content to a persistent store the pointers are converted back to a static representation thereof e.g. represented as the static pointers storage . In this way annotations can be rendered along with their associated content as if the annotations were part of the content yet the document itself is not substantially altered e.g. a copy of the same document loaded and parsed on a different machine may have the parser ignore the anchoring information and simply not render any annotations. To this end the anchors are maintained in the static pointers storage . Note that the static pointers storage may be maintained separately from the content document or integrated into the content document or maintained in another file when persisted. The static form of the pointer can comprise any information suitable to maintain the location e.g. a page number and offset page number and X Y position or any other form that is appropriate for the type of document being processed.

This separation allows annotating any type of document no matter how the data are formatted at runtime. As a result of the separation the annotations are essentially invisible to the application program whereby content editing is not affected by the presence of the annotations e.g. actions such as inserting and deleting text or cutting and pasting function as if the annotations were not present.

Exemplary annotation related components of one example implementation are represented in . In this implementation the annotations for a document are maintained in an annotation store that is separate from the runtime instantiation of the document but in other implementations may be appended or otherwise directly associated with it . For each annotation the annotation store contains a set of annotation information comprising a locator part identifier 123 in this example and the annotation content itself which may be text handwriting e.g. in the form of electronic ink formatting instructions and so forth. Note that the annotation content may be a link to something else e.g. a large audio file that annotates anchored content such as text graphics or video.

In the example of the annotation information indicates that the word editable in the document is to be highlighted in some way a gray background is shown . Note however that rendering or audio or video playback may be done by a rendering component that is independent of the content and independent of the annotation itself and thus for example the same annotation may be shown in one rendering as a footnote to the anchored piece of content and in another rendering as a bubble or other side note accompanying the anchored piece of content and so forth.

The annotation may have its own identifier as shown in the annotation information as Annotation1 and for example may be used for searching. Note however that such an annotation identifier is not related to the locator parts and is not necessary for associating an annotation with a piece of content.

In the example implementation of dynamic anchoring is achieved at runtime that is when the document is loaded rather than in its serialized and persisted state by holding a pair of pointers referencing the beginning and the end of the anchored content at runtime. This is represented in by the start and end fields of each entry within an anchors table of the dynamic anchor manager . As represented by the dashed arrow from the annotation to the appropriate identifier in the dynamic anchor manager the reference pointers are associated with a locator part identifier that is recorded in a corresponding locator part of the annotation s information . This locator part identifier provides a link between the set of annotation information that is independently stored in the annotation store and the real acting anchor in the text or other piece of content that is defined by the two end pointers.

As described herein when the content is saved to a persistent memory the pointers are converted to a static form and saved in a separate store e.g. the pointers store of or alternatively added to the content of the document if possible such as in a package at the end of the document or possibly in a hidden form or even in an associated file.

In the example of the dynamic pointers may be persisted for later recreation from tags e.g. in XAML referred to as anchor markers surrounding the annotated content. In other words the anchor markers are integrated into the content when persisted such that in this example the persisted document contains information e.g. XAML tags sufficient to convert static data to the dynamic pointers upon reloading of the content having the associated annotations. In each of the start and end anchor markers include a reference to the locator part identifier 123 in this XAML example. In this manner upon reloading and parsing the document the tags can be removed and used to locate the locator part identifier which in turn can be used to locate the annotation information from which the annotation may be rendered with its associated content.

Thus as can be seen in the runtime state no annotation data is present in the content itself but rather tags maintained in the persisted data or elsewhere are converted to anchors that point to the start and end of the content to be annotated. Upon load the start and end anchor marker tags via the locator part identifier are used to find the corresponding annotation data e.g. the annotation information including the pointer information and the annotation content that describes and or contains the annotation to render possibly along with a description of how to render . When serialized saved to the persistent store the pointers are reconverted back to tags or other suitable form. In this manner the annotations are essentially maintained independent of the runtime content yet enough information is persisted with the serialized content to recreate the annotation for anchoring to its corresponding piece of content when the content is reloaded.

Returning to the data in the dynamic pointers e.g. the anchors table of are provided upon creation of a new annotation or upon the loading of content that was previously annotated. As described above the annotation service generally designated works with the dynamic anchor manager to load existing anchors or create a new anchor associated with user selected content as described below.

In an example implementation various aspects of such a mechanism may be implemented as an extension of an annotation framework as generally described in U.S. patent application Ser. No. 10 966 950 filed Oct. 15 3004 that allows annotating any type of control that uses a text container e.g. TextContainer object . In this example implementation represented in there are three main classes participating in the process including anchor markers the dynamic anchor manager and a dynamic selection processor . In this example implementation when persisted each anchor marker may be a TextElement that is temporarily inserted at serialization time and saved to the persistent storage e.g. of or of .

The dynamic anchor manager is an object e.g. DynamicAnchorManager that maintains the runtime anchors table inserts and removes anchor markers during serialization and converts anchor markers to the text pointers or other content locators when content is loaded. However there is no intention to limit dynamic anchoring as described herein to text and the pointers may be locators to any type of content.

One example implementation for anchoring annotations to content allows for annotating any type of controls that use TextContainer however any content that can be located in some manner that allows the content to be identified relative to other content may have an annotation anchored thereto. For example a graphical image or text that does not reflow with the size of the window may be identified via a document page number and X Y coordinates. Other content may be identified by document paragraph number line and offset. Note that this works well with read only content such as of a web page where no one edits the content and thus paragraphs cannot be inserted. In general any way of identifying the location of a piece of content may be used to anchor an annotation to that content.

The dynamic selection processor is an annotation framework selection processor which generates and resolves the dynamic content locator parts thus managing the relationships between the anchors table and the annotation store . One purpose of the dynamic selection processor is to convert a text selection to a valid annotation framework locator part e.g. via a DynamicSelectionProcessor.GenerateLocatorPart API and to convert a valid locator part to a correct text selection via a DynamicSelectionProcessor.ResolveLocatorPart API.

The DynamicSelectionProcessor.GenerateLocatorPart may comprise a simple method that generates a unique identifier e.g. a GUID or other per store unique identifier and passes this identifier along with the end points of the selection to the dynamic anchor manager . The API also generates a LocatorPart object with a name DynamicTextRange having the generated identifier as its data.

The DynamicSelectionProcessor.ResolveLocatorPart API takes a locator part corresponding to the LocatorPart object and converts it to a text selection. The text selection is generated based on the text pointers saved in the anchors table of the dynamic anchor manager . Note however that any type of content may be selected for annotation.

In one example implementation the anchor marker is a simple class e.g. AnchorMarker that has properties for setting and getting of the AnchorMarkerId which is the same as the identifier of the corresponding LocatorPart and the AnchorMarkerTagType StartTag or EndTag . The values of those properties are kept in corresponding DependencyProperties of the AnchorMarker element so they can be deserialized serialized e.g. by a XAML parser not specifically shown but represented by the load and save arrows in and generally described in U.S. patent application Ser. No. 10 439 505 filed May 16 2003.

At the time of loading each AnchorMarker registers itself with the DynamicAnchorManager . This is achieved by overriding OnParentChanged method of the TextElement. When invoked AnchorMarker.OnParentChanged checks if the old parent is null. If so the element is inserted for the first time during a document e.g. XAML load. The element registers itself with the dynamic anchor manager for this TextContainer. The registration may include saving the text position of the anchor marker and as start or end pointer of an anchor with the same identifier as the AnchorMarker identifier.

The dynamic anchor manager controls the runtime information about the dynamic annotation anchors. For example the dynamic anchor manager may maintain the anchor table as a hash table where the key is the anchor identifier as defined in the corresponding locator part and the value is a TextSegment defined by the start and end position of the dynamic annotation anchor. The start and end positions may comprise TextPointers which automatically provide the proper pointer adjustment when other content is inserted or deleted. Alternatively by listening for insert or delete events when data are inserted or removed in the document that influence the position of the annotated content the start and or end pointers may be accordingly adjusted by the dynamic anchor manager . For example text insertion or deletion before a start and end pointer surrounding some text would move both pointers a corresponding number of characters insertion or deletion between start and end pointers would move the end pointer and insertion or deletion after the end pointer would not move either pointer.

Turning to an explanation of the operation of the example implementation in an alternative representation generally shown in when a new annotation is created via an application or other program such as an intermediate service a hosted annotation program or control the annotations service calls the dynamic selection processor to generate an appropriate locator part for a selection that will be annotated. As described above the dynamic selection processor generates a unique identifier and passes this identifier along with the start point and end point of the selection to the dynamic anchor manager for storing.

The dynamic anchor manager may listen to the appropriate events of the TextContainer . One such event is an initialized event. To this end after the text container is initialized the anchors table is scanned and for each entry the corresponding AnchorMarker startTag endTag elements are found if any and are removed from the container.

The dynamic anchor manager also persists the anchoring information when the XAML is serialized and cleans up injected AnchorMarkers when the XAML serialization is finished. Note that the content that is serialized may be the same instance of content that is used at runtime and serialization may be anytime when the user or some timer causes a save during runtime. If so pointers need to be converted to tags the tags serialized with the content and then removed from the content.

An OnTextHostSerialize method is called when the text container serialization starts and ends. If this is a start event as represented in by the arrow accompanying circled numeral one the dynamic anchor manager inserts one start anchor marker and one end anchor marker element for each entry in the anchors table circled numeral two into the text as represented by the text container .

If this is an end event circled numeral three the anchor marker elements are cleaned up from the container circled numeral four . In this manner the anchor marker elements exist only during the TextContainer serialization. For the rest of the time the content is clean which ensures proper operation for copy paste type operations and other editing operations.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

