---

title: Systems and methods for compiling applications on a test server
abstract: Methods and systems for synchronizing applications deployed on a test server are provided. The methods and systems may comprise a software application comprising a plurality of files deployed on a test server. After the software application is deployed on a test server, one of the plurality of files comprising the software application may be modified in a development environment. The methods and systems may comprise a synchronization manager operative to, after modification of the one of the plurality of files, synchronize only the modified file with the software application deployed on the test server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07778968&OS=07778968&RS=07778968
owner: SAP AG
number: 07778968
owner_city: Walldorf
owner_country: DE
publication_date: 20051031
---
This invention relates generally to building and deploying applications on a test server and more specifically to methods and systems for synchronizing application files modified by a software developer with a software application deployed on the test server.

Development of software applications generally comprises the steps of coding building and deploying the application. Normally a software developer is required to make modifications to various files comprising the application during the development process. In order to test the software application the developer typically must build the application in the development environment of a development studio and deploy it on a test server. During the building process the development studio may determine whether all application files are syntaxically valid and generate a single binary file from the application files that is deployable on the test server. Once the single binary file is deployed on the test server the binary files may be extracted from the single deployed file and written on the test server system under the server root. In typical software development studios after making a set of modifications to one or more of the files comprising an application the developer is required to build and deploy all application files on a test server regardless of whether or not a particular file was modified since the application was last deployed. This process can be time consuming particularly when the application is complex and comprises a large number of files. As the development process often involves a significant amount of trial and error it may be necessary to modify build and deploy a program many times before finalizing a satisfactory application. Because the building and deploying process may take several minutes vast amounts of the developer s time may be wasted waiting for the application to build and deploy. Alternatively developers may be tempted to avoid making necessary modifications as soon as the problem is identified instead waiting until a later point at which either the problem becomes insurmountable or a number of problems have arisen that make the time required to rebuild and re deploy the program appear more justified. However delaying the resolution of problems until later stages of development can make the problems more difficult to solve. Worse yet the problem may be forgotten entirely and the application may be released with an unsolved bug.

Certain software development environments have attempted to avoid this inefficiency by allowing software developers to track modified files and manually synchronize them with the deployed application. For example the developer may be allowed to synchronize modified files through a Windows XCOPY command or by a drag and drop operation to insert the modified files into the root of the deployed application. However while such systems do avoid much of the inefficiency of rebuilding the entire application in response to each modification they place a great burden on the developer to track each file that has been modified since the application was last deployed. If a developer fails to remember to manually synchronize a modified file the developer may mistakenly believe that all problems have been corrected and release a defective version of the application.

A system implemented with a computer processor for synchronizing files comprising a development server system comprising a development environment for developing a software application comprising a plurality of files. The system may comprise a test server on which the files of the software application are deployed. The system may further comprise a synchronization manager operative to after modification of one of the files of the software application on the development system synchronize only the modified file between the development system and the test server.

A method for synchronizing files is provided. The method may comprise deploying a software application comprising a plurality of files from a development server system to a test server. The method may further comprise after deploying the software application on the test server modifying one of the plurality of files on the development system. The method may comprise determining which of the plurality of files comprising the software application have been modified since deployment of the software application on the test server. The method may also comprise synchronizing only the modified file of the software application between the development system and the test server.

A computer readable medium that stores a set of instructions which when executed performs a method for synchronizing files is provided. The method performed when the set of instructions is executed may comprise deploying a software application comprising a plurality of files from a development server system to a test server. The method may comprise after deploying the software application on the test server modifying one of the plurality of files on the development system. The system may further comprise determining which of the plurality of files comprising the software application have been modified since deployment of the software application on the test server. The method may also comprise synchronizing only the modified file of the software application between the development system and the test server.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed. The foregoing background and summary are not intended to provide any independent limitations on the claimed invention.

The following description refers to the accompanying drawings in which in the absence of a contrary representation the same numbers in different drawings represent similar elements. The implementations in the following description do not represent all implementations consistent with principles of the claimed invention. Instead they are merely some examples of systems and methods consistent with those principles. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

As embodied herein methods and systems for synchronizing application files modified by a software developer with a version of the application deployed on a test server are provided. Consistent with the principles of the present invention a synchronization manager may be provided that associates project files created and modifiable in a development environment with the corresponding application files deployed on a test server. The synchronization manager may further synchronize the modified files with the application deployed on the server. If necessary the synchronization manager may also be restart the application after synchronization.

System may associate files and created in the development environment with particular application s . Files and may be modified by the software developer after the initial deployment of an application necessitating synchronization of the modified files with the corresponding files of the deployed application located on test server . Synchronization manager may receive notification when any of files or are modified. For example the development environment in which the project files are created and modified may raise an event notifying synchronization manager that a file associated with an application monitored by synchronization manager has been modified. After receiving notice of a file modification synchronization manager may synchronize the modified files with the corresponding files contained in the deployed application. If necessary synchronization manager may restart a deployed application after synchronization so as to allow for example an application file cached in temporary memory by test server to refresh with the modified version. Thus by synchronizing files modified in the development environment with the corresponding files deployed on test server synchronization manager eliminates the need for system to build the entire application into a deployable binary file and deploy the entire application on test server . Instead synchronization manager may build and deploy only the modified files greatly reducing the time necessary to synchronize the deployed files with those modified in the development environment.

In one aspect the application need not be initially built into a single binary file and deployed on test server as is commonly required in prior art systems. Instead synchronization manager may be used to install or deploy application files on test server individually. If synchronization manager is used to initially install an application on test server synchronization manager may recognize that the newly installed application does not yet exist on test server and create the application on the root of server into which all application files may be installed.

In addition to synchronizing files after notification of modification from the development environment synchronization manager may be triggered by a user command to synchronize files. In response to a user command to synchronize synchronization manager may compare timestamps of files deployed on the test server and the corresponding files stored locally to determine which files have been modified. If the timestamp of a in development system stored file is later than the timestamp of the file deployed on the test server synchronization manager may synchronize the version of that file on the test server with the modified locally stored version. In addition to responding to a user command to synchronize any modified file between the development system and the test server synchronization manager may respond to user commands to synchronize specific files. In such a case synchronization manager may synchronize the files regardless of timestamps or alternatively may synchronize the files only if the locally stored version has a later timestamp than the version deployed on the test server.

By synchronizing only modified files system may avoid the need to completely rebuild and re deploy an application each time one of its files or is modified. This may drastically reduce the time required to re compile a deployed application. In some cases synchronization time may be reduced from as many as several minutes to less than one second. Thus synchronization systems and methods consistent with the present invention may remove building and deploying time as a consideration in the software development process encouraging software developers to modify application files as frequently as necessary.

Consistent with the principles of the present invention a software developer deploying an application on a test server may direct the synchronization manager to monitor for modifications made to the files comprising the application. illustrates an exemplary graphic user interface GUI that may be provided to allow a developer to add an application to the synchronization manager. As shown the user may browse for an application on the test server and select an associated project name. The user may then configure the synchronization manager to associate the appropriate project files with an application monitored by the synchronization manager such that when any of the associated files are modified in the development environment the synchronization manager may synchronize the modified files with the application deployed on the test server. In one aspect the developer may manually associate project files with an application monitored by the synchronization manager. In another aspect the synchronization manager may automatically locate and associate the project files comprising a monitored application deployed on the test server. For example the synchronization manager may recognize files associated with applications of a certain project type such that by creating an application of a certain project type the synchronization manager may locate files associated with that application. For example as shown in the user may indicate that an application is of the DTR Web Project project type. The synchronization manager may automatically detect the project files associated with a DTR web project application. The synchronization manager may recognize files associated with more than one project type.

In certain files such as for example a web.xml file in a J2EE web application it may be desirable to allow the developer to specify the parameter settings for the application deployed on the test server. Because the parameter setting for the application on the test server may not be appropriate in all situations the synchronization manager may in one aspect allow the developer to specify context parameters for the application deployed on the test server without modifying the project file. For example illustrates a root structure of an exemplary GUI consistent with the principles of the present invention in which the developer may select a file and open a menu containing an option allowing context parameters to be registered for the deployed application.

Consistent with the principles of the present invention the synchronization manager may also allow the developer to manage project files associated with a monitored application. illustrates an exemplary GUI allowing a developer to view files associated with a particular application monitored by the synchronization manager. In one aspect project files may be divided into various categories to allow a developer to more easily keep track of project files associated with a monitored application. For example as illustrated in project files may be divided into sources and binaries to differentiate between files created by the developer e.g. java and jsp files and recycled files in binary form used by the developer e.g. class and jar files . However the categories are for the convenience of the developer only and the synchronization manager may treat all files identically in synchronizing with the application deployed on the test server regardless of the category in which a file is located.

In one aspect the synchronization manager may also allow the developer to manage the file mappings of project files associated with a monitored application. For example as illustrated in the synchronization manager may allow the user to select a file and open a properties menu. The properties menu may be accessible in various manners known in the art including but not limited to right clicking an object or highlighting an object and engaging a provided button operative to open the properties menu. It may also be possible to select multiple files and open a properties menu operative to apply changes to all of them. From the properties menu the synchronization manager may allow the developer to apply a virtual name to a project file changing the name of the file in the project file tree shown in the synchronization manager from the full path of the file to the virtual name. In the virtual name crm tc core is applied to the path c usr sap J2E JC00 j2ee cluster server0 apps sap.com crm icss b2b servlet jsp icss b2b . . . Accordingly as shown in the virtual name crm tc core appears in the synchronization manager tree rather than the full path name.

In order for the synchronization manager to synchronize project files modified in the development environment with an application deployed on a test server it may be necessary for the synchronization manager to log into the test server with administrator privileges. Accordingly in one aspect consistent with the principles of the present invention the synchronization manager may provide a GUI allowing the developer to input the information necessary to log into the test server. illustrates an exemplary Administrator Login GUI operative to enable the user to enter a Username Password Host i.e. server address and Port. In one aspect the developer may be prompted to enter the password information at the beginning of each session.

As mentioned above after the synchronization manager synchronizes modified project files with the application deployed on the test server it may be necessary to restart the application. This may be necessary for example for files that are cached by the test server in live memory to improve system performance as the test server must replace the previously cached information with the modified information. Consistent with the present invention the synchronization manager may cause the test server to restart the application deployed on the test server by interacting with the server through server provided client application programming interface API .

In one aspect consistent with the principles of the present invention the synchronization manager may allow the user to manage a restart list of file extensions that will cause the application to be restarted after synchronization of files with any of those extensions. illustrates an exemplary GUI operative to enable a developer to manage a list of file extensions requiring the application to be restarted after synchronization. GUI may comprise an add button allowing the developer to add a file extension and a remove button allowing the developer to remove a file extension from the restart list. In one aspect class and jar files may be added to the list by default.

In one aspect synchronization of files with extensions on the restart list may cause a prompt to be displayed to the developer asking if the application should be restarted. Alternatively the application may be automatically restarted upon synchronization of files with extensions on the restart list. In one aspect the synchronization manager may allow the developer to engage an option to synchronize a modified project file with a deployed application as soon as the modification to the file is made persistent in the location where the file is stored such as the user s local hard drive a network document management system or secondary data storage devices such as a hard disk floppy disk re writable compact disks jump drives or zip drives. In this version the synchronization manager may be configured such that upon synchronizing a file having an extension on the restart list it does not i automatically restart the application or ii display a prompt asking the developer whether the application should be restarted. Instead the synchronization manager may delay restarting the application until the developer affirmatively orders the application restarted. In this manner the application is not needlessly restarted multiple times and the developer is not bothered with repeated restart prompts when modifying several files during a session.

GUI and or contextual menu may include a feature operative to call an API to interface with the test server to restart the application deployed on the test server. The synchronization manager may also allow the user to engage an option to unpack a project zip file and if needed synchronize each file contained in the zip file with the deployed application rather than synchronizing the zip file. Similarly the synchronization manager may allow the user to engage an option to pack a project zip file and if needed synchronize the single zip file rather than separately synchronizing each file contained in the zip file. The synchronization manager may also include a feature engageable to display only folders or files to be synced in tree viewer . Similarly the synchronization manager may include a feature engageable to hide files or folders that are not subject to synchronizing by the synchronization manager. GUI and or menu may also include a feature allowing a user to select files that the user does not desire to be synchronized by the synchronization manager. GUI and or Contextual menu may also include navigation features allowing the user to navigate through the application by going into a file or folder going back to a previously visited page or returning to an application homepage as illustrated in .

It is recognized that the features and functions described above are not restrictive but are instead exemplary in nature and that a synchronization manager consistent with the principles of the present invention may not include some or all of the above described features and may further provide additional features not described herein. It is also recognized that the features described above as well as other features not described herein may be provided to the developer in various manners known in the art. For example some or all of the features may be provided to the developer through a toolbar on GUI . Alternatively some or all of the features may be provided to the developer through one or more contextual menus accessible by a user in various manners. Some or all features may be accessed by the user in more than one manner.

Referring again to GUI may also display a number of icons in association with project files displayed in tree viewer to impart information regarding the files. For example the synchronization manager may display an icon not pictured in association with a folder or file that will not be synchronized. The synchronization manager may associate an icon with a folder or file to indicate that it is mapped with another name on the test server. Icon may appear for example when the developer has applied a virtual name to a file or folder. The synchronization manager may also associate an icon not pictured with a folder or file to indicate that it differs from the corresponding application file deployed on the test server.

A computer system may be used to install a software application implementing systems and methods for synchronizing files consistent with the principles of the present invention. The computer system may be a computer network as shown in or a stand alone personal computer PC as shown in .

As shown in a computer network for implementing a system for synchronizing files consistent with an implementation of the present invention may include a server and a stand alone PC connected through a network path . Computer network may be a local area network LAN where server and PC are workstations. Computer network may also be the Internet with server hosting a web application and PC being any workstation available to a user desiring to interface with the application on server . Alternatively computer network may be a wide area network WAN and server and PC may lie in two separate LANs connected through the Internet.

PC may include a bus line connecting a plurality of devices such as a processor memory devices for storage of information diskette drives a fixed disk drive a monitor other I O devices and a network interface card NIC . Processor may be a microprocessor such as an Intel Pentium chip for processing applications. Memory devices may include read only memories ROM and or random access memories RAM . Diskette drives may include a floppy drive and or a compact disk CD drive. Fixed disk drive may be a hard drive. I O devices may include a keyboard and or a mouse for receiving input from a user of PC . Monitor may display output from processor and may also echo the input of the user. PC may be connected to network path through NIC .

An application may be installed on server . An individual desiring to access the application on server may use a web browser loaded on PC and may communicate with server through NIC and network path . In one aspect a software application implementing a system for synchronizing files consistent with an implementation of the present invention may be stored in PC and processor of PC may execute the software application locally within PC and interface with a web application on server . Particularly the software application may be stored on a floppy disk or a CD accessible by diskette drive or on fixed disk drive . In another aspect the software application comprising a system for synchronizing files consistent with an implementation of the present invention may be stored in server which may execute the software application and processor of PC may communicate with server to i send information to server and ii retrieve the results of the execution of the software application from server .

The synchronization of files in a manner consistent with the principles of the present invention may be achieved through the execution of the software application either locally within PC or remotely within server the as described above.

Alternatively as shown in a stand alone PC may be used for executing a software application for synchronizing files consistent with the principles of the present invention. PC may include a bus line connecting a plurality of devices which may include a processor memory devices for storage of information diskette drives a fixed disk drive a monitor and other I O devices . Processor may be a microprocessor such as an Intel Pentium chip for processing applications. Memory devices may include ROM and or RAM. Diskette drives may include a floppy drive and or a compact disk CD drive. Fixed disk drive may be a hard drive. Monitor may display the output of processor and may also echo the input of the user. I O devices may include a keyboard and or a mouse for receiving input from a user of PC .

A software application comprising a system for synchronizing files consistent with an implementation of the present invention may be stored on a floppy disk or a CD accessible by diskette drive or on fixed disk drive . Processor may execute the software application stored in the floppy disk the CD or the fixed disk drive . An individual through monitor and I O devices may interact with processor which may execute the software application for synchronizing files. The software application may for example be embodied on a computer readable medium which stores a set of instructions which when executed performs a method for synchronizing applications deployed on a test server.

While certain features and embodiments of the invention have been described other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the embodiments of the invention disclosed herein. Further the steps of the disclosed methods may be modified in any manner including by reordering steps and or inserting or deleting steps without departing from the principles of the invention.

It is intended therefore that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims and their full scope of equivalents.

