---

title: Scaling and extending UPnP v1.0 device discovery using peer groups
abstract: Disclosed is a method for scaling and extending the reach of UPnP device discovery and eventing by leveraging the use of a peer-to-peer network infrastructure. Peer-to-peer networking allows for the organization of a set of nodes into a group for efficient exchange of information and the group has an efficient and scalable mechanism for flooding data to all members in it. In one embodiment one PC in a peer group can receive device discovery announcements and subscribe for device event notifications. A discovery proxy and an eventing proxy running on the PC package the announcement and/or notification in a record and proceed to flood it to the group. The group flooding semantics route the notification to the subscribed controllers, which can subsequently take suitable action. Ultimately, this method produces a result whereby device discovery and eventing tasks can be fulfilled by locating the closest peer and obtaining the device announcements and notifications from that peer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640329&OS=07640329&RS=07640329
owner: Microsoft Corporation
number: 07640329
owner_city: Redmond
owner_country: US
publication_date: 20050215
---
The present invention relates generally to the discovery and control of networked devices and services and more particularly to methods for scaling device discovery and eventing using a peer to peer networking infrastructure.

Device Plug and Play PnP capabilities available in today s operating systems evolved out of a need for easier setup configuration and addition of peripherals to a PC. Universal Plug and Play UPnP extends this simplicity to include the entire network enabling discovery and control of networked devices and services such as network attached printers Internet gateways and consumer electronics equipment. UPnP however is more than just a simple extension of the Plug and Play peripheral model. It is designed to support zero configuration invisible networking and automatic discovery for a breadth of device categories from a wide range of vendors.

With UPnP a device can dynamically join a network obtain an IP address convey its capabilities and learn about the presence and capabilities of other devices all automatically truly enabling zero configuration networks. Devices can subsequently communicate with each other directly thereby further enabling peer to peer networking. The varieties of device types that can benefit from a UPnP enabled network are large and include intelligent appliances wireless devices and PCs of all form factors. The scope of UPnP is large enough to encompass many existing as well as new and exciting scenarios including home automation printing and imaging audio video entertainment kitchen appliances automobile networks and proximity networks in public venues.

There are many ways automatic discovery and control of devices can make life easier and better and the advent of UPnP is opening up new possibilities and uses every day. For example if an individual were to come home today with a new printer to use on his existing home network he would have to take several steps to make sure that the printer could be used by all of the PCs on the network let alone available to any other device that may have a need to print. Specifically he would need to connect the printer to an existing PC load the device driver share the printer on the network then go to each of the other PCs on the network and connect to that shared printer. With UPnP he can instead simply plug the printer into any available network port be it phone line power line or Ethernet and have the printer immediately available to all devices and users of the network.

In addition to device discovery UPnP also provides an infrastructure for device eventing as well. UPnP devices may contain one or more services which expose actions that model the various services states using state variables. For instance a clock service could be modeled as having a state variable current time which defines the state of the clock and two actions set time and get time which allows for control of the service. A service in a UPnP device consists of a state table a control server and an event server. The state table models the state of the service through state variables and updates them when the state changes. The control server receives action requests such as set time executes them updates the state table and returns responses. The event server publishes events to interested subscribers anytime the state of the service changes. For instance the clock service could send an event to interested subscribers when its state changes to alarm ringing. 

Automatic discovery and control of networked devices in UPnP is achieved in large part through the use of control points. A control point in a UPnP network is a controller capable of discovering and controlling other devices. Once devices are attached to the network and addressed appropriately discovery can take place. Discovery is handled by the Simple Service Discovery Protocol SSDP . When a device is added to the network SSDP allows that device to advertise its services to control points on the network. When a control point is added to the network SSDP allows that control point to search for devices of interest on the network. The fundamental exchange in both cases is a discovery message containing a few essential specifics about the device or one of its services for example its type identifier and a pointer to its XML Extensible Markup Language device description document. After discovery a control point could retrieve the device description and get a list of associated services retrieve service descriptions for interesting services invoke actions to control the service and subscribe to the service s event source.

UPnP v1.0 device discovery and eventing is currently quite inefficient when a large number of control points exist. With respect to device discovery it is highly desirable that devices are able to be discovered in a rapid fashion. Specifically the goal with discovery is to ensure that all control points receive the announcement that a device has joined the network. The goal with eventing is to ensure that all control points get the notification of an update on the device. For instance if the various control points are displaying a user interface showing the current picture on a picture frame then if one of the control points shifts to the next picture then the rest of the control points are sent a notification by the device about the change in its status.

As it stands now the above processes are extremely inefficient. In each case the device sequentially establishes a connection with each control point and sends it an announcement or notification. In the presence of a large number of control points this mechanism does not scale efficiently and many control points end up getting announcements and notifications much later than the initial ones.

In addition discovery of devices does not extend beyond the subnet. Scenarios exist where there is a need to discover devices beyond just the subnet. For instance an extended family that is geographically distributed may be interested in discovering a printer in one of the users home and being able to print to it.

Accordingly a need exists for a method that is able to effectively scale UPnP device discovery and eventing in the presence of a large number of control points and to extend the scope of discovery beyond the local subnet. The invention provides such a method. These and other advantages of the invention as well as additional inventive features will be apparent from the description of the invention provided herein.

In view of the foregoing the present invention provides a method for effectively scaling UPnP device discovery and eventing by leveraging the use of a peer to peer network infrastructure. Peer to peer networking provides an infrastructure that enables computing devices to communicate and share information securely with one another without the need of a server or other third party to facilitate the communication.

Peer to peer networking allows for organization of a set of nodes for efficient exchange of information. Such an organization is called a group groups are secure. In the context of a group members can share data with each other. For instance members can share pictures of their vacations with each other. The members can be anywhere over the Internet. The mechanism of sharing data involves sending it to the group. The group has an efficient mechanism for flooding data to all members in it and this mechanism is scalable as well.

In the peer to peer infrastructure peer groups can also facilitate the efficient distribution of metadata over networks. In the case of the present invention the group would be comprised of all the control points that are interested in receiving device event notifications. The metadata could be UPnP announcement and notification data. Thus a peer to peer networking infrastructure can be effectively employed to improve the efficiency scale and reach of device announcement and notification distribution. In a network of peers a handful of the peers can receive device announcements and notifications from the UPnP device. These peers can then flood this content out to a few more peers who in turn can send the device announcements and notifications along to others. Ultimately this method produces a result whereby device discovery and eventing tasks can be fulfilled by locating the closest peer and obtaining the device announcements and notifications from that peer.

In one embodiment one PC in a peer group can receive device discovery announcements and subscribe for device event notifications. A discovery proxy and an eventing proxy running on the PC could package the announcement and or notification in a record and proceed to flood it to the group. The group flooding semantics would now efficiently and reliably route the notification to the various subscribed controllers which can subsequently take suitable action.

In the description that follows the invention is described with reference to acts and symbolic representations of operations that are performed by one or more computing devices unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computing device of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computing device which reconfigures or otherwise alters the operation of the computing device in a manner well understood by those skilled in the art. The data structures where data are maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that several of the acts and operations described hereinafter may also be implemented in hardware.

Turning to the drawings wherein like reference numerals refer to like elements the invention is illustrated as being implemented in a suitable computing environment. The following description is based on illustrated embodiments of the invention and should not be taken as limiting the invention with regard to alternative embodiments that are not explicitly described herein.

Referring to in one embodiment the present invention relates to a method for effectively scaling UPnP device discovery and eventing by leveraging the use of a peer to peer network infrastructure residing on a computing device. The computing device can be a device that may have one of many different computer architectures. For descriptive purposes shows a schematic diagram of an exemplary architecture usable for these devices. The architecture portrayed is only one example of a suitable environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing devices be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in . The invention is operational with numerous other general purpose or special purpose computing or communications environments or configurations. Examples of well known computing systems environments and configurations suitable for use with the invention include but are not limited to mobile telephones pocket computers personal computers servers multiprocessor systems microprocessor based systems minicomputers mainframe computers and distributed computing environments that include any of the above systems or devices.

In its most basic configuration a computing device typically includes at least one processing unit and memory . The memory may be volatile such as RAM non volatile such as ROM and flash memory or some combination of the two. This most basic configuration is illustrated in by the dashed line .

Computing device can also contain storage media devices and that may have additional features and functionality. For example they may include additional storage removable and non removable including but not limited to PCMCIA cards magnetic and optical disks and magnetic tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM EEPROM flash memory other memory technology CD ROM digital versatile disks other optical storage magnetic cassettes magnetic tape magnetic disk storage other magnetic storage devices and any other media that can be used to store the desired information and that can be accessed by the computing device.

Computing device can also contain communication channels that allow it to communicate with other devices such as communicating with other devices over a network . Communication channels are examples of communications media. Communications media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communications media include wired media such as wired networks and direct wired connections and wireless media such as acoustic radio infrared and other wireless media. The term computer readable media as used herein includes both storage media and communications media. The computing device may also have input components such as a keyboard mouse pen a voice input component and a touch input device. Output components include screen displays speakers printers and rendering modules often called adapters for driving them. The computing device has a power supply . All these components are well known in the art and need not be discussed at length here.

The present invention is directed to a method for effectively scaling UPnP device discovery and eventing by leveraging the use of a peer to peer network infrastructure. UPnP extends the concepts of Plug and Play to include the entire network enabling discovery and control of networked devices and services such as network attached printers Internet gateways and consumer electronics equipment. With UPnP a device can dynamically join a network obtain an IP Internet Protocol address convey its capabilities and learn about the presence and capabilities of other devices all automatically truly enabling zero configuration networks. Devices can subsequently communicate with each other directly thereby further enabling peer to peer networking. The varieties of device types that can benefit from a UPnP enabled network are large and include intelligent appliances wireless devices and PCs of all form factors.

Turning to the basic building blocks of a UPnP network devices services and control points are illustrated. A UPnP device is a container of services and nested devices . For instance a VCR device may consist of a tape transport service a tuner service and a clock service. A TV VCR combo device would consist not just of services but a nested device as well. Different categories of UPnP devices will be associated with different sets of services and embedded devices . For instance services within a VCR will be different than those within a printer. Consequently different working groups will standardize on the set of services that a particular device type will provide. All of this information is captured in an XML Extensible Markup Language device description document that the device must host. In addition to the set of services the device description also lists the properties such as device name and icons associated with the device .

The smallest unit of control in a UPnP network is a service . A service exposes actions and models its state with state variables. For instance a clock service could be modeled as having a state variable current time which defines the state of the clock and two actions set time and get time which allow you to control the service. Similar to the device description this information is part of an XML service description standardized by the UPnP forum. A pointer URL to these service descriptions is contained within the device description document. Devices may contain multiple services .

A service in a UPnP device consists of a state table a control server and an event server . The state table models the state of the service through state variables and updates them when the state changes. The control server receives action requests such as set time executes them updates the state table and returns responses. The event server publishes events to interested subscribers anytime the state of the service changes. For instance the clock service would send an event to interested subscribers when its state changes to alarm ringing. 

A control point in a UPnP network is a controller capable of discovering and controlling other devices . After discovery a control point could retrieve the device description and get a list of associated services retrieve service descriptions for interesting services invoke actions to control the service and subscribe to the service s event source. Anytime the state of the service changes the event server will send an event to the control point . It is expected that devices will incorporate control point functionality and vice versa to enable true peer to peer networking.

UPnP leverages the standard IP protocol suite to remain network media agnostic. Devices on a UPnP network can be connected using any communications media including Radio Frequency RF wireless phone line power line IrDA Ethernet and IEEE 1394. In other words any medium that can be used to network devices together can enable UPnP. The only concern might be that the media being used supports the bandwidth required for the intended use. UPnP uses open standard protocols such as TCP IP Transmission Control Protocol Internet Protocol HTTP Hypertext Transfer Protocol and XML.

UPnP leverages many existing standard protocols. Using these standardized protocols aids in ensuring interoperability between vendor implementations. The protocols used to implement UPnP are found in use on the Internet and on local area networks everywhere. This prevalence ensures that there is a large pool of people knowledgeable in implementing and deploying solutions based on these protocols. Since the same protocols are already in use little needs to be done to make UPnP devices work in an existing networked environment.

With reference to the UPnP protocol stack is illustrated. UPnP vendors UPnP Forum Working Committees and the UPnP Device Architecture document define the highest layer protocols used to implement UPnP. Based on the device architecture the working committees define specifications specific to device types such as VCRs HVAC systems dishwashers and other appliances. Subsequently UPnP Device Vendors add the data specific to their devices such as the model name URL etc.

The TCP IP networking protocol stack serves as the base on which the rest of the UPnP protocols are built. By using the standard prevalent TCP IP protocol suite UPnP leverages the protocol s ability to span different physical media and ensures multiple vendor interoperability. UPnP devices can use many of the protocols in the TCP IP stack including TCP UDP User Datagram Protocol IGMP Internet Group Management Protocol ARP Address Resolution Protocol and IP as well as TCP IP services such as DHCP Dynamic Host Configuration Protocol and DNS Domain Name Services .

TCP IP provides the base protocol stack to provide network connectivity between UPnP devices. HTTP which is hugely responsible for the success of the Internet is also a core part of UPnP. Most aspects of UPnP build on top of HTTP or its variants. HTTPU HTTP Unicast over UDP and HTTPMU HTTP Multicast over UDP are variants of HTTP defined to deliver messages on top of UDP IP instead of TCP IP . These protocols are used by SSDP described below. The basic message formats used by these protocols adheres with that of HTTP and is required both for multicast communication and when message delivery does not require the overhead associated with reliability.

Simple Service Discovery Protocol SSDP as the name implies defines how network services can be discovered on the network. SSDP is built on HTTPU and HTTPMU and defines methods both for a control point to locate resources of interest on the network and for devices to announce their availability on the network. By defining the use of both search requests and presence announcements SSDP eliminates the overhead that would be necessary if only one of these mechanisms is used. As a result every control point on the network has complete information on network state while keeping network traffic low. Both control points and devices use SSDP . A UPnP control point upon booting up can send an SSDP search request over HTTPMU to discover devices and services that are available on the network. The control point can refine the search to find only devices of a particular type such as a VCR particular services such as devices with clock services or even a particular device.

UPnP devices listen to the multicast port. Upon receiving a search request the device examines the search criteria to determine if they match. If a match is found a unicast SSDP over HTTPU response is sent to the control point. Similarly a device upon being plugged into the network will send out multiple SSDP presence announcements advertising the services it supports. Both presence announcements and unicast device response messages contain a pointer to the location of the device description document which has information on the set of properties and services supported by the device. In addition to the discovery capabilities provided SSDP also provides a way for a device and associated service s to gracefully leave the network i.e. bye bye notification and includes cache timeouts to purge stale information for self healing.

Generic Event Notification Architecture GENA was defined to provide the ability to send and receive notifications using HTTP over TCP IP and multicast UDP . GENA also defines the concepts of subscribers and publishers of notifications to enable events. GENA formats are used in UPnP to create the presence announcements to be sent using SSDP and to provide the ability to signal changes in service state for UPnP eventing. A control point interested in receiving event notifications will subscribe to an event source by sending a request that includes the service of interest a location to send the events to and a subscription time for the event notification. The subscription must be renewed periodically to continue to receive notifications and can also be canceled using GENA .

Simple Object Access Protocol SOAP defines the use of Extensible Markup Language XML and HTTP to execute remote procedure calls RPC . It is becoming the standard for RPC based communication over the Internet. By making use of the Internet s existing infrastructure it can work effectively with firewalls and proxies. SOAP can also make use of Secure Sockets Layer SSL for security and use HTTP s connection management facilities thereby making distributed communication over the Internet as easy as accessing web pages. Much like a remote procedure call UPnP uses SOAP to deliver control messages to devices and return results or errors back to control points. Each UPnP control request is a SOAP message that contains the action to invoke along with a set of parameters. The response is a SOAP message as well and contains the status return value and any return parameters.

UPnP provides support for communication between control points and devices. The network media the TCP IP protocol suite and HTTP provide basic network connectivity and addressing needed. On top of these open standard Internet based protocols UPnP defines a set of HTTP servers to handle discovery description control events and presentation. The UPnP device architecture defines a schema or template for creating device and service descriptions for any device or service type. Individual working committees subsequently standardize on various device and service types and create a template for each individual device or service type. Finally a vendor fills in this template with information specific to the device or service such as the device name model number manufacturer name and URL to the service description. This data is then encapsulated in the UPnP specific protocols defined in the UPnP device architecture document such as the XML device description template . The required UPnP specific information is inserted into all messages before they are formatted using SSDP GENA and SOAP and delivered via HTTP HTTPU or HTTPMU.

The foundation for UPnP networking is the TCP IP protocol suite and the key to this suite is addressing. Each device typically will have a DHCP client and search for a DHCP server when the device is first connected to the network. If a DHCP server is available the device will use the IP address assigned to it. If no DHCP server is available the device will use Auto IP to obtain an address. In brief Auto IP defines how a device intelligently chooses an IP address from a set of reserved private addresses and is able to move easily between managed and unmanaged networks. A device may implement higher layer protocols outside of UPnP that use friendly names for devices. In these cases it becomes necessary to resolve friendly host device names to IP addresses. Domain Name Services are usually used for this. A device that requires or uses this functionality may include a DNS client and may support dynamic DNS registration for its own name to address mapping.

Once devices are attached to the network and addressed appropriately discovery can take place. Discovery is handled by SSDP as discussed earlier. When a device is added to the network SSDP allows that device to advertise its services to control points on the network. When a control point is added to the network SSDP allows that control point to search for devices of interest on the network. The fundamental exchange in both cases is a discovery message containing a few essential specifics about the device or one of its services for example its type identifier and a pointer to its XML device description document.

The next step in UPnP networking is description. After a control point has discovered a device the control point still knows very little about the device. For the control point to learn more about the device and its capabilities or to interact with the device the control point will retrieve the device s description from the URL provided by the device in the discovery message. Devices may contain other logical devices and services. The UPnP description for a device is expressed in XML and may include vendor specific manufacturer information including the model name and number serial number manufacturer name and URLs to vendor specific Web sites. The description also includes a list of any embedded devices or services as well as URLs for control eventing and presentation.

After a control point has retrieved a description of the device the control point has the essentials for device control. To learn more about the service a control point will retrieve a detailed UPnP description for each service. The description for a service is also expressed in XML and includes a list of the commands or actions the service responds to and parameters or arguments for each action. The description for a service also includes a list of variables these variables model the state of the service at run time and are described in terms of their data type range and event characteristics. To control a device a control point sends an action request to a device s service. To do this a control point sends a suitable control message to the control URL for the service provided in the device description. Control messages are also expressed in XML using SOAP. In response to the control message the service returns action specific values or fault codes.

A UPnP description for a service includes a list of actions the service responds to and a list of variables that model the state of the service at run time. The service publishes updates when these variables change and a control point may subscribe to receive this information. The service publishes updates by sending event messages. Event messages contain the names of one of more state variables and the current value of those variables. These messages are also expressed in XML and formatted using GENA. A special initial event message is sent when a control point first subscribes this event message contains the names and values for all evented variables and allows the subscriber to initialize its model of the state of the service. To support multiple control points all subscribers are sent all event messages subscribers receive event messages for all evented variables and event messages are sent regardless of why the state variable changed e.g. in response to an action request or due to a state change .

If a device has a URL for presentation then the control point can retrieve a page from this URL load the page into a browser and depending on the capabilities of the page allow a user to control the device and or view device status. The degree to which each of these can be accomplished depends on the specific capabilities of the presentation page and device.

The present invention leverages the use of a peer to peer network infrastructure for efficient scaling and increasing reach of UPnP device discovery and eventing. In the description that follows the invention is described as being implemented over a peer to peer network infrastructure such as the Windows Peer to Peer Networking Infrastructure by Microsoft Corporation of Redmond Wash. As will be appreciated by one of ordinary skill in the art the network infrastructure should be understood to include any network infrastructure possessing the necessary communications and security protocols.

Turning to an exemplary peer to peer architecture is illustrated. The peer to peer infrastructure resides primarily between the operating system OS and socket layers and the application layer . Of particular importance are the network service provider NSP discovery graphing and grouping components. The search component also may reside along and between the graphing component and may reach to the application layer . At the bottom most layer of the architecture is the core OS . The OS is in one embodiment the Windows operating system by Microsoft Corporation of Redmond Wash. As will be appreciated by one of ordinary skill in the art the OS should be understood to also include similar operating systems. Residing between the peer to peer architecture and the OS is the network communications socket layer . The socket layer allows the peer to peer architecture to leverage the operating system s interface with lower level network communication protocols. The discovery protocol is a peer name resolution protocol PNRP that enables the resolution of a peer name to an IP address in a completely serverless fashion. Thus with the discovery protocol it is possible for a computing device to locate a peer on a network without the need for a separate server to maintain peer network location information. The graphing component allows for the organization of a given set of network nodes so that data can be efficiently disseminated amongst them. Specifically graphing addresses data dissemination in a network that is not fully connected and provides for one to many dissemination of the data. The grouping component associates a security model with one or more graphs created by the graphing component . With the grouping module a peer is able to create a group own a group and define members users or machines that are allowed to join the group.

In one embodiment of the graphing component employed by the present invention interfaces and methods can be implemented through an application programming interface API . Such an embodiment is particularly well suited for the Microsoft Windows XP operating system in which the APIs may be as follows 

In one embodiment of the grouping component employed by the present invention interfaces and methods can be implemented through an API. Such an embodiment is particularly well suited for the Microsoft Windows XP operating system in which the APIs may be as follows 

UPnP device discovery and eventing is currently quite inefficient when a large number of control points exist. With respect to device discovery it is highly desirable that devices are able to be discovered in a rapid fashion and that the discovery is scaled to reach beyond the subnet as well. Specifically the goal with discovery is to ensure that all control points receive the announcement that a device has joined the network. The goal with eventing is to ensure that all control points get the notification of an update on the device. For instance if the various control points are displaying a user interface showing the current picture on a picture frame then if one of the control points shifts to the next picture then the rest of the control points are sent a notification by the device about the change in its status.

As it stands now the above processes are extremely inefficient. In each case the device sequentially establishes a connection with each control point and sends it an announcement or notification. In the presence of a large number of control points this mechanism does not scale efficiently and many control points end up getting announcements and notifications much later than the initial ones. UPnP device discovery and eventing can be effectively scaled by leveraging the use of a peer to peer network infrastructure.

Peer to peer networking provides an infrastructure that enables computing devices to communicate and share information securely with one another without the need of a server or other third party to facilitate the communication. Peer to peer networking allows for organization of a set of nodes for efficient exchange of information. Such an organization is called a group and in the context of a group members can share data with each other. The group has an efficient mechanism for flooding data to all members in it and this mechanism is scalable as well.

In the peer to peer infrastructure peer groups can also facilitate the efficient distribution of metadata over networks. This metadata could be UPnP announcement and notification data. Thus a peer to peer networking infrastructure can be effectively employed to improve the efficiency of device announcement and notification distribution and the corresponding scalability. In a network of peers a handful of the peers can receive device announcements and notifications from the UPnP device. These peers can then flood this content out to a few more peers who in turn can send the device announcements and notifications along to others. Ultimately this method produces a result whereby device discovery and eventing tasks can be fulfilled by locating the closest peer and obtaining the device announcements and notifications from that peer.

With reference to an exemplary peer to peer group is illustrated. In the group each peer to peer node is reachable via a path on the graph of the group. Each peer node in the group has an instance of the replicated store . The replicated store is associated with a graph or a group and maintains metadata as to the current state of each node. When a node connects to a group it first synchronizes the replicated store database . The nodes maintain this database automatically.

The replicated store houses metadata about the peer to peer group in the form of records residing in the store . Each record can contain a record ID field a record type field and an attribute field. In the case of the present invention the metadata in the store reflects what UPnP devices have been discovered on the network and or what UPnP device event notifications have been distributed to nodes of the group. For each piece of metadata that has been distributed to a node in the group a record corresponding to that piece of metadata exists in the replicated store .

Turning to the methods of scaling UPnP device discovery and eventing using a peer to peer networking infrastructure are illustrated respectively. Beginning with step after successfully obtaining an IP address on the network a UPnP enabled device sends an announcement advertising its availability. Continuing with step the announcement is received by a UPnP device discovery proxy residing on a peer group member computing device. In step the proxy creates a record to be distributed to the group from the device announcement and in step the record is added to the group store. Next in step the record is propagated through the peer to peer group via updates to the instances of the replicated stores located on the member computing devices to reflect the device announcement record that was added in step . In step the update to the instances of the replicated store is received at the nodes of the group. Next in step a node can consult the replicated store to obtain the record and recognizing it as a UPnP announcement can convert the record to a UPnP announcement. Finally in step the UPnP announcement is passed to the UPnP application layer on the member node.

A similar process appears in as the method of scaling UPnP device eventing is illustrated. Beginning with step with a service being exposed on a UPnP device the UPnP enabled device sends an event notification containing the changed value of the service s variable. Continuing with step the event notification is received by a UPnP device eventing proxy residing on a peer group member computing device that has registered with the service to receive notifications. In step the proxy creates a record to be distributed to the group from the event notification and in step the record is added to the group store. Next in step the record is propagated through the peer to peer group via updates to the instances of the replicated stores located on the member computing devices to reflect the event notification record that was added in step . In step the update to the instances of the replicated store is received at the nodes of the group. Next in step a node can consult the replicated store to obtain the record and recognizing it as a UPnP event notification can convert the record to a UPnP event notification. Finally in step the UPnP event notification is passed to the UPnP application layer on the member node.

The above described methods can be employed to provide a highly scalable solution to UPnP device discovery and eventing. By leveraging the peer to peer network infrastructure UPnP device discovery and event notification information can be efficiently disseminated over any number of UPnP network topologies thus minimizing the presence of a large number of control points.

In view of the many possible embodiments to which the principles of this invention may be applied it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of invention. For example for performance reasons the method of the present invention may be implemented in hardware rather than in software. Therefore the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof.

