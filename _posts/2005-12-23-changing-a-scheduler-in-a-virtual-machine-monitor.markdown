---

title: Changing a scheduler in a virtual machine monitor
abstract: Machine-readable media, methods, and apparatus are described to change a first scheduler in the virtual machine monitor. In some embodiments, a second scheduler is loaded in a virtual machine monitor when the virtual machine monitor is running; and then is activated to handle a scheduling request for a scheduling process in place of the first scheduler, when the virtual machine monitor is running.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08181179&OS=08181179&RS=08181179
owner: Intel Corporation
number: 08181179
owner_city: Santa Clara
owner_country: US
publication_date: 20051223
---
This application is a National Phase application of and claims priority to International Application No. PCT CN2005 002305 filed Dec. 23 2005 entitled CHANGING A SCHEDULER IN A VIRTUAL MACHINE MONITOR .

A virtual machine VM architecture logically partitions a physical machine such that the underlying hardware of the machine is time shared and appears as one or more independently operation virtual machines. A computer platform in a virtual machine environment may comprise a virtual machine monitor VMM that may create a plurality of virtual machines and runs on the computer platform to facilitate for other software the abstraction of one or more virtual machines.

The virtual machine monitor may comprise a scheduler to allocate time slots for each virtual machine to run and prioritize or balance the resource usage among the virtual machines. Usually a scheduler may implement a specific scheduling mechanism that may fit specific situations such as Borrowed Virtual Time BVT algorithm Round Robin algorithm etc.

The following description describes techniques for changing a scheduler in a virtual machine monitor. In the following description numerous specific details such as logic implementations pseudo code means to specify operands resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the current invention. However the invention may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of the invention may be implemented in hardware firmware software or any combination thereof. Embodiments of the invention may also be implemented as instructions stored on a machine readable medium that may be read and executed by one or more processors. A machine readable medium may include any mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a machine readable medium may include read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other forms of propagated signals e.g. carrier waves infrared signals digital signals etc. and others.

An embodiment of a computer platform having a virtual machine monitor to change a scheduler is shown in . The computer platform may comprise an underlying hardware machine having one or more processors memory console device timer and the like. The computer platform may further comprise a plurality of virtual machines and a virtual machine monitor. The plurality of virtual machines run their own operating systems and application software such as a service virtual machine running a service operating system and a service application and one or more guest virtual machines running their own guest operating systems and guest applications . The virtual machine monitor may be responsible for processor s memory virtualization simulation interrupt handling virtual machine scheduling etc. A non exhaustive list of examples for the computer platform may include mainframe computer mini computer personal computer portable computer laptop computer and other devices for transceiving and processing data.

Various components in the computer platform may invoke the virtual machine monitor to perform a scheduling process e.g. to determine a next owner of underlying switch devices for a next assigned time slot or to determine a priority of a virtual machine etc. Usually the switch devices may be owned by a running virtual machine e.g. a service virtual machine or a guest virtual machine in a time slot assigned by a scheduler in the virtual machine monitor and therefore have a focus on which virtual machine is currently active. Examples of the switch device may comprise the processor and console device wherein the console device may comprise a frequently used I O device such as a keyboard mouse etc.

The service operating system in the service virtual machine may send a scheduling request for the scheduling process to the virtual machine monitor . For example when the service operating system monitors a running guest virtual machine and finds a failure in the guest virtual machine e.g. a guest operating system fault the service operating system may send a scheduling request to the virtual machine monitor to change the owner of the switch devices.

The guest operating system in the guest virtual machine may also send a scheduling request to the virtual machine monitor . For example when the guest operating system is executing a device input output operation and waiting for a response from the device the guest operating system may send the scheduling request to yield the ownership of the switch devices so that other virtual machine may make a use of the switch devices.

The timer in the underlying hardware e.g. a programmable interval timer may also send a scheduling request to the virtual machine monitor . For example when the time slot assigned to the running virtual machine expires the timer may send a timer interrupt to the virtual machine monitor that may invoke the virtual machine monitor to perform the virtual machine scheduling in order to change the ownership of the switch devices.

The virtual machine monitor may comprise a scheduler loader and scheduler manager . The virtual machine monitor may further comprise one or more schedulers however one of the one or more schedulers is active to handle the scheduling request. In the embodiment as depicted in the virtual machine monitor may comprise an old scheduler and a new scheduler that may respectively implement a specific scheduling mechanism such as Borrowed Virtual Time BVT algorithm Round Robin algorithm etc.

Many technologies may be applied as a working mode for the old scheduler and the new scheduler . For example the virtual machine monitor may always hold the old scheduler as a default scheduler. Before the new scheduler is loaded in the virtual machine monitor the old scheduler may be active to handle the scheduling request. After the new scheduler is loaded the new scheduler may be active to handle the scheduling request in place of the old scheduler. However if the new scheduler is unloaded from the virtual machine monitor the old scheduler may be active again until the virtual machine monitor is loaded with another new scheduler. For another example in some circumstances the scheduler manager may switch back to the old scheduler even though the new scheduler exists in the virtual machine monitor . For still another example the virtual machine monitor may unload the old scheduler before or after loading the new scheduler .

The scheduler loader may process a scheduler loading request from the service operating system and load the new scheduler in the virtual machine monitor when the virtual machine monitor or one or more of the virtual machines is running. Software images of the new scheduler may be available from various resources such as a website local disk data center image server etc. Example for an implementation of the scheduler loader may comprises a hypercall handler that may process a hypercall for scheduler loading from the service operating system and load the software images of the new scheduler in the virtual machine monitor .

The scheduler manager may be responsible for activating one of the old scheduler and the new scheduler to handle the scheduling request when the virtual machine monitor or one or more of the virtual machines is running. The scheduler manager may implement the scheduler activating in various ways. For example the scheduler manager may store a scheduler identifier to identify the scheduler that is active for the scheduling request. Before the new scheduler is loaded in the virtual machine monitor the scheduler manager may store the old scheduler identifier in order to activate the old scheduler to handle the scheduling request. After the new scheduler is loaded the scheduler manager may replace the old scheduler identifier with the new scheduler identifier in order to activate the new scheduler to handle the scheduling request. However when the new scheduler is unloaded the scheduler manager may restore the old scheduler identifier to re activate the old scheduler .

For another example the scheduler manager may store a function pointer array pointing to a function array of the active scheduler e.g. a function array of the old scheduler or the new scheduler which is active to handle the scheduling request. depicts an embodiment for an implementation of the scheduler manager . As depicted the scheduler manager may comprise the function pointer array having a plurality of function pointers e.g. pointers etc. . Each of the old scheduler and new scheduler may perform the scheduling process with a plurality of routine functions that adhere to a particular application programming interface API e.g. functions etc. of the old scheduler or functions etc. of the new scheduler . Each pointer in the function pointer array may point to an active scheduler function e.g. a function of the old scheduler or the new scheduler . The scheduling requester such as a virtual machine or timer or other devices that may trigger a scheduling process in the virtual machine monitor may include a pointer to the function pointer array and may call the active scheduler function by dereferencing its pointer to the function pointer array and then calling the functions pointed by the array.

In the embodiment depicted in the scheduler manager may activate the old scheduler or the new scheduler by updating the function pointer array to point to the active scheduler functions or by updating the pointer of the scheduling requester to point to the function pointer array.

Referring back to the scheduler manager may be further responsible for transporting information between the active scheduler e.g. the old scheduler or the new scheduler and the scheduling requester. For example in response to receiving the scheduling request from the scheduling requester the scheduler manager may dispatch the scheduling request to the active scheduler identified by the scheduler identifier or to the active scheduler functions pointed by the function pointer array. The scheduler manager may further send scheduling feedback information from the active scheduler to the scheduling requester. The scheduling feedback information may comprise a notification of the desired scheduling operation is performed correctly or not a virtual machine priority information and so on.

However other embodiments may implement other technologies for the structure of the computer platform . For example the scheduler manager may be omitted and the scheduling requester may issue a direct request to the virtual machine monitor requiring the scheduling process wherein addresses associated to the active scheduler are dynamically patched into the request during a scheduler model loading unloading stage. With this means the request may be sent to the active scheduler directly.

In block the decision made in block may invoke an application running over a service operating system in a service virtual machine e.g. service operating system with specified parameters and the application may pass the parameters and other information to the service operating system through a virtual machine control request that may trigger the service operating system to issue a scheduler loading request into the virtual machine monitor to load the new scheduler. The specific parameters may comprise information on which scheduler is to be loaded where the scheduler image is what kind of loading policy the virtual machine monitor may apply to load the new scheduler etc.

In block a scheduler loader e.g. the loader or other suitable component may handle the loading request and cease all of switch devices owned by a running virtual machine wherein the switch devices may comprise processor s and console devices. Various methods may be applied to perform the ceasing process. For processor ceasing a cease sign may be input in all of virtual machine resume paths between all of virtual processor s in the virtual machine monitor and the running virtual machine. For console device ceasing the virtual machine monitor may flush all of outstanding traffic by the help of console device models before the virtual machine monitor actually stop them. After the switch devices are ceased the switch devices may reach a stable consistent or predictable state so that the virtual machine monitor may retain their state for a next scheduling process.

In block the scheduler loader or other suitable component may decide whether to unload the old scheduler from the virtual machine monitor before loading the new scheduler. In different circumstances the scheduler loader may make different decision. For example the scheduler loader may decide to reserve the old scheduler for a future use. However if there is no free space for the new scheduler the scheduler loader may decide to unload the old scheduler. In response to deciding to reserve the old scheduler the scheduler loader or other suitable component may load the new scheduler in the virtual machine monitor with use of the parameters from the service operating system in block . However in response to deciding to unload the old scheduler the scheduler loader or other suitable component may unload the old scheduler from the virtual machine monitor in block and then load the new scheduler in the virtual machine monitor in block . Other embodiments may implement other technologies for the scheduler unloading. For example the scheduler loader may make a decision on whether to unload the old scheduler after the new scheduler is loaded.

In block the new scheduler may be activated to handle the scheduling request in place of the old scheduler. For example the scheduler manager may activate the new scheduler by means of storing an identifier to identify the new scheduler or a function pointer array pointing to the new scheduler functions. For another example the new scheduler may be activated by dynamically patching addresses associated with the new scheduler in the scheduler request so that a scheduling requester may directly call the new scheduler to perform the scheduling process.

In block the new scheduler may handle the scheduling request for example determine a next owner of the switch devices or calculate a scheduling priority for a specific virtual machine. In block the new scheduler may return scheduling feedback information to the scheduling requester. The scheduling feedback information may comprise a notification of the desired scheduling process is performed correctly or not a virtual machine priority information and so on.

In an embodiment the memory may store codes to be executed by the processor . A non exhaustive list of examples for the memory may comprise one or a combination of the following semiconductor devices such as synchronous dynamic random access memory SDRAM devices RAMBUS dynamic random access memory RDRAM devices double data rate DDR memory devices static random access memory SRAM flash memory devices and the like.

In an embodiment the chipset may provide one or more communicative path among the processor memory and various components such as the I O device and BIOS firmware . The chipset may comprise a memory controller hub an input output controller hub and a firmware hub .

In an embodiment the memory controller hub may provide a communication link to the processor bus that may connect with the processor and to a suitable device such as the memory . The memory controller hub may couple with the I O controller hub that may provide an interface to the I O devices for the computing platform such as a keyboard and a mouse. A non exhaustive list of examples for the I O devices may comprise a keyboard mouse network card a storage device a camera a blue tooth an antenna and the like.

In an embodiment the memory controller hub may communicatively couple with a firmware hub via the input output controller hub . The firmware hub may couple with the BIOS firmware that may store routines that the computing platform executes during system startup in order to initialize the processors chipset and other components of the computing platform. Moreover the BIOS firmware may comprise routines or drivers that the computing device may execute to communicate with one or more components of the compute platform.

The computer platform as depict in may perform as the computer platform as depicted in . The memory may store software images as a virtual machine monitor including a scheduler loader one or more scheduler and or a scheduler manager. The memory may further store service software including service operating system and service applications and guest software including guest operating system and guest applications.

While certain features of the invention have been described with reference to example embodiments the description is not intended to be construed in a limiting sense. Various modifications of the example embodiments as well as other embodiments of the invention which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention.

