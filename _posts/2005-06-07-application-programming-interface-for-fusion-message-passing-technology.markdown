---

title: Application programming interface for fusion message passing technology
abstract: A data-processing system and method are disclosed, which generally includes a plurality of components connected to a bus within a data-processing apparatus utilizing one or more input/output interfaces (e.g., IOCTL) in communication with the bus. A dynamic interface is implemented, which includes a plurality of interface modules that permits varying data-processing applications to scan, identify and interface with the plurality of components utilizing the input/output interface, thereby increasing data-processing application development efficiency relative to one or more components within the data-processing system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761630&OS=07761630&RS=07761630
owner: LSI Corporation
number: 07761630
owner_city: Milpitas
owner_country: US
publication_date: 20050607
---
Embodiments are generally related to data processing methods and systems. Embodiments are additionally related to Input Output control methods and systems and message passing technology MPT . Embodiments are particularly directed to methods and systems for abstracting an interface to a driver firmware associated with a controller and or devices associated with a system bus.

In a conventional data processing system such as a computer and or a computer network one or more processors may communicate with input output I O devices over one or more buses. The I O devices may be coupled to the processors through an I O interface such as an I O bridge which can manage the transfer of information between a peripheral bus connected to the I O devices and a shared bus connected to the processors. Additionally the I O interface may manage the transfer of information between system memory and the I O devices or the system memory and the processors.

An I O interface can also be utilized to transfer information between I O devices and main storage components of a host processor. An I O channel for example may connect the host directly to a mass storage device e.g. disk or tape drive . In the case of a mainframe host processor the channel is usually coupled to one or more device controllers. Each device controller can in turn be connected to a plurality of mass storage devices.

One example of an I O interface that has become widely utilized in the data processing and computer arts is the so called Fibre Channel. In general features of both channels and networks have been incorporated into a network standard known as Fibre Channel which has been defined by American National Standards Institute ANSI specifications such as X3.230 1994 . Fibre Channel systems attempt to combine the speed and reliability of channels with the flexibility and connectivity of networks.

In general data in a Fibre Channel network can be transported in packets which may be two kilobytes or smaller. These packets of data can be referred to as frames. Sequences include one or more frames. Frames in a sequence are generally assembled at the receiving device in a predetermined order before the sequence can be considered complete.

Fibre Channel is a campus wide interconnection standard that is designed primarily to interconnect peripherals mass storage systems such as redundant arrays of inexpensive disks RAID imaging and archiving systems mainframes engineering workstations and other high speed devices. Often seen as the successor to the Small Computer Serial Interface SCSI standard Fibre Channel is a high speed channel that typically uses fiber optics to interconnect computing devices in a relatively local environment such as a laboratory or a campus. Thus the Fibre Channel focuses more on providing bandwidth between devices than a completely flexible network. Fibre Channel is a switched technology.

The Fibre Channel interface dedicates circuits for transferring data while allowing other devices to access the channel when it is free. The Fibre Channel interface supports variable length transmissions it can transmit large blocks of data without dividing the blocks into smaller packets. The speed of Fibre Channel is in the range of 133 Mbit sec 1062 Mbit sec. While multimode optical fiber is used most often single mode optical fiber coaxial cable and shielded twisted pair wire are also occasionally used in practice. An example of a Fibre Channel method and system is disclosed in U.S. Pat. No. 6 721 320 which issued on Apr. 13 2004 to Hoglund et al and is assigned to LSI Logic Corporation based in Milpitas Calif. U.S. Pat. No. 6 721 320 is incorporated herein by reference.

Another well known I O interface is Serial Attached SCSI SAS . SAS incorporates feature of Small Computer System Interface SCSI also known as skuzzy which is a bus protocol that allows various internal and external devices to be connected to personal computers workstations servers and or other data processing systems. SAS is a is a point to point architecture distinct from parallel technologies in which devices are connected utilizing shared access topologies such as a Fibre Channel arbitrated loop of the SCSI bus. As such a point to point architecture establishes a link directly from the controller to a disk drive or through an expander switching matrix. In shared access topologies only two devices can communicate at once. As well as throughput needs increase the shared access medium can become a bottleneck and slow down communication. Shared access topologies also are typically more complex and have arbitration schemes that are more time consuming than point to point architectures.

When communicating between a user mode application in a modem operating system OS and a storage controller applications typically rely upon I O Control IOCTL requests. The IOCTL requests have very specific formatting requirements that must be reproduced with each application adding a significant amount of effort and time to the development of a new application. Such applications must discover the hardware contents of the computer including storage controllers and attached devices and must utilize this information. This process is often requested for each project and the implementation can be time consuming and error prone.

Most applications that perform IOCTL requests and or hardware scans use a similar method but the continued reproduction of such operations leads to slight variations in the process as different projects use different baseline versions of code. In addition as the code is refined many projects are not updated with the fixed code which can lead to the need to repeat debugging efforts.

Current solutions to such problems involve reproducing the device scan and IOCTL requests from one application to another. This is the methodology that most applications utilize. Some applications of the code do present an interface for other modules or applications to utilize in a shared manner. In such situations however the code is based on the reproduced device scan and or the IOCTL request code.

One of the problems with these solutions is that such processes rely on the reproduction of the actual code that accomplishes the device scan and or IOCTL request. Such techniques are error prone and must be copied into a new project while ensuring compatibility with the new code. Additionally the code must be integrated into the project s data structures. This process tends to introduce bugs which must be fixed in each project.

The maintenance of the device scan and or IOCTL request code if not centralized also presents a problem because many of the projects implemented do not utilize this particular portion of the code which is fixed after the initial development is accomplished. Another issue inherent with current solutions is that it can take a very long time to produce a utility application because of the need to reproduce and copy the code. Aside from this basic work many utility applications are relatively simple to implement. Finally it is important to note that the worker code utilized implements certain and often repeated requests which must be recreated in each project or may not be utilized at all causing inefficient results.

The following summary of the invention is provided to facilitate an understanding of some of the innovative features unique to the present invention and is not intended to be a full description. A full appreciation of the various aspects of the invention can be gained by taking the entire specification claims drawings and abstract as a whole.

It is therefore one aspect of the present invention to provide for improved data processing methods and systems.

The above and other aspects of the invention can be achieved as will now be briefly described. A data processing system and method are disclosed which generally includes a plurality of components connected to a bus within a data processing apparatus utilizing one or more input output interfaces e.g. IOCTL in communication with the bus. A dynamic interface is implemented which includes a plurality of interface modules that permits varying data processing applications to scan identify and interface with the plurality of components utilizing the input output interface thereby increasing data processing application development efficiency relative to one or more components within the data processing system.

The dynamic interface can include for example a base MPT interface an SCSI command interface an RAID interface and or portable interface e.g. portable MPT interface for interfacing with the MPT components. Additionally an OS specific input output interface layer can be provided in addition to a discovery module e.g. OS Specific Discovery that permits the identification and scanning of a specific component among the plurality of components. Components utilized include for example a controller associated with the data processing apparatus. Additionally the dynamic interface can be maintained with an electronic library of data processing applications for interfacing with components of the data processing apparatus. The dynamic interface also provides for a scan routine callable for identifying one or more components within the data processing apparatus.

The systems and method disclosed herein can be implemented in the context of a shared library that interfaces with Fusion MPT based controllers. Such a library can include a dynamic interface and a scan routine that can be readily called to identify controllers and other components in the data processing apparatus e.g. computer . Such a library also provides an interface that issues an IOCTL request to the controller. This interface implements the often reproduced work of issuing the IOCTL request and also can implement a set of worker functions that provide a higher level interface to components such as for example controllers. In this manner applications can take advantage of existing functionality. The library can be segmented into several sections such as for example operating system OS specific discovery code operating system specific IOCTL request code and interface cores. The interface cores provide an interface to a set of Fusion MPT functions such as for example a basic interface a RAID function interface and an interface that interfaces with functions specifically related to a Fibre Channel. In this manner a large library of shared code e.g. software modules can be implemented in the context of a shared and or dynamic library so that applications can utilize the method that suits them the best.

The particular values and configurations discussed in these non limiting examples can be varied and are cited merely to illustrate embodiments of the present invention and are not intended to limit the scope of the invention.

For a further understanding of the present invention reference is made to which depicts a data processing apparatus in which an embodiment can be implemented. Data processing apparatus of generally includes a user input device a central processing unit computer hardware and a monitor . The user input device can be coupled to the central processing unit wherein the central processing unit is coupled to the computer hardware and the operating system . User input device can be implemented for example as a computer keyboard a computer mouse and so forth.

The central processing unit is connected to a bus which in turn can be connected to other system components such as memory Random Access Memory RAM Read Only Memory ROM a controller and an input output control IOCTL interface . Note that controller can be implemented as one or more controller types. For example controller can be configured as Small Computer Systems Interface SCSI controller and or other types of controllers. For illustrative and explanatory purposes however controller can be considered to be a Small Computer Systems Interface SCSI controller.

System bus can also be connected to other components of data processing apparatus such as for example monitor device driver and user input device . The IOCTL interface is generally associated with operating system . Note that device driver can be implemented as an SCSI device driver depending upon design considerations. Memory which is coupled to bus can communicate with the central processing unit via bus . Operating system OS can be stored as a module or series of software modules within memory and processed via CPU . Note the term module is defied in greater detail herein.

The device driver can be implemented as a software or instruction module stored in a memory such as memory which can be utilized to communicate with the controller . Thus although device driver is illustrated in as a separate block it can be appreciated that device driver can be implemented in the context of a module storable in a computer memory. Device driver generally functions as a module or group of modules that communicates between OS and the controllers described herein. Similarly IOCTL interface which is also depicted in as constituting a separate block can form a part of OS to allow for direct communication such as sending messages to and from device driver .

The operating system is the master control program that runs the computer. It sets the standards for all application programs that run in the computer. Operating system can be implemented as the software that controls the allocation and usage of hardware resources such as memory central processing unit disk space and other peripheral devices such as monitor user input device and computer hardware . Examples of operating systems which may be utilized to implement operating system of apparatus include Windows Mac OS UNIX and Linux.

Bus can be implemented as a plurality of conducting hardware lines for data transfer among the various system components to which bus is attached. Bus functions as a shared resource that connects varying portions of data processing apparatus including the CPU i.e. a microprocessor controllers memory and input output ports and so forth and enabling the transfer of information. Bus can be configured into particular bus components for carrying particular types of information. For example bus can be implemented to include a group of conducting hardware lines for carrying memory addresses or memory locations where data items can be found while another group of conducting hardware lines can be dedicated to carrying control signals and the like.

The user input device can include a plurality of device descriptor files . The device descriptor files contain information related to the user input device e.g. what type of device it is who made the device etc. The device descriptor files can also contain user defined fields called report descriptors. Report descriptors are strings of information that the operating system can read. Report descriptors can be implemented for example as for passing useful information about the user input device to the operating system and or a device driver . Such report descriptors are unique for each type of user input device.

Note that embodiments of the present invention can be implemented in the context of modules. Such modules may constitute hardware modules such as for example electronic components of a computer system. Such modules may also constitute software modules. In the computer programming arts a software module can be typically implemented as a collection of routines and data structures that performs particular tasks or implements a particular abstract data type.

Software modules generally are composed of two parts. First a software module may list the constants data types variable routines and the like that can be accessed by other modules or routines. Second a software module can be configured as an implementation which can be private i.e. accessible perhaps only to the module and that contains the source code that actually implements the routines or subroutines upon which the module is based. The term module as utilized herein can therefore refer to software modules or implementations thereof. Such modules can be utilized separately or together to form a program product that can be implemented through signal bearing media including transmission media and recordable media.

The methodology depicted in for example can be implemented as one or more such modules. Such modules can be referred to also as instruction modules and may be stored within a memory of a data processing system such as memory of . Modules depicted in represent such instruction modules. Such instruction modules may be implemented in the context of a resulting program product i.e. program code . Note that the term module and code can be utilized interchangeably herein to refer to the same device or media.

System generally includes for example a number of components such as those depicted in which are connected to a bus within data processing apparatus utilizing one or more input output interfaces e.g. IOCTL interface in communication with bus . This is really more of a way for the software modules to communicate with the driver . A dynamic interface can therefore be implemented which includes a plurality of interface modules such as for example base MPT interface SCSI command interface RAID interface and or portable MPT interface that permits varying data processing applications to scan identify and interface with the data processing components utilizing the input output interface via the device driver thereby increasing data processing application development efficiency relative to one or more components within the data processing system .

Additionally as indicated above the OS specific input output interface layer can be provided in addition to the discovery module or OS Specific Discovery code that permits the identification and scanning of a specific component among the plurality of components of the data processing apparatus . Components utilized can include for example a controller e.g. SCSI controller associated with the data processing apparatus . Additionally the dynamic interface can be maintained with an electronic library of data processing applications for interfacing with components of the data processing apparatus . The dynamic interface also provides for a scan routine callable for identifying one or more components within the data processing apparatus .

System can be implemented in the context of a shared library that interfaces with Fusion MPT based controllers. Note that as utilized herein the term Fusion MPT refers generally to a type of message passing architecture that provides an open programming interface for developers and is based upon a single binary device driver. Such a library can include the dynamic interface described above in association with a scan routine e.g. OS specific discovery code that can be readily called to identify controllers and other components in the data processing apparatus . Such a library can function as an interface that issues one or more IOCTL requests to controller . This interface implements the often reproduced work of issuing IOCTL requests and also can implement a set of worker functions that provide a higher level interface to components such as for example controllers device driver computer hardware and so forth.

In this manner applications can take advantage of existing functionality. The library can be segmented into several sections such as for example operating system OS specific discovery code operating system specific IOCTL request code and interface cores. The interface cores provide an interface to a set of Fusion MPT functions such as for example a basic interface a RAID function interface and an interface that interfaces with functions specifically related to a Fibre Channel. In this manner a large library of shared code e.g. software modules can be implemented in the context of a shared and or dynamic library so that applications can utilize the method that suits them the best.

Recall that the interface depicted in system can include for example base MPT interface SCSI command interface RAID interface and or portable interface . The calling application then initiates discovery through API as indicated at block . Discovery can occur via the OS specific discovery module or code of system . Thereafter as illustrated at block the API can discover requested adapters and devices such as those associated with data processing apparatus as depicted in .

Next the calling application can request information concerning the adapters and or devices associated with data processing apparatus . Thereafter as indicated at block the calling application can issue commands through the API. Such commands can be one or more of for example Fusion MPT commands driver I O controls SCSI commands and or status requests depending upon particular implementations and embodiments and user goals. Following completion of one or more such commands as indicated by arrow the process can then terminate as illustrated by block .

By implementing such a system and or methodology a shared device scan and IOCTL request codes i.e. modules make it easier to write new applications and ultimately permits such utilities to be more reliable due to the use of existing modules or code that has been debugged and maintained. Worker functions also permit the efficient implementation of new applications by providing a simpler interface for issuing frequently needed requests. Additionally the shared library feature described herein can be designed for portability to other operating systems by simply replacing the operating system specific cores. The device scan code is typically more advanced than the code utilized by existing applications thereby allowing the calling application to filter certain controllers while not scanning devices or for operating system volumes while scanning for particular RAID volumes depending upon design considerations. The IOCTL request code generally utilizes a much simpler data structure interface which makes it easier to write and prepare applications.

It will be appreciated that variations of the above disclosed and other features and functions or alternatives thereof may be desirably combined into many other different systems or applications. Also that various presently unforeseen or unanticipated alternatives modifications variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims.

