---

title: Memory allocation in a multi-node computer
abstract: Evaluating memory allocation in a multi-node computer including calculating, in dependence upon a normalized measure of page frame demand, a weighted coefficient of memory affinity, the weighted coefficient representing desirability of allocating memory from the node, and allocating memory may include allocating memory in dependence upon the weighted coefficient of memory affinity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08806166&OS=08806166&RS=08806166
owner: International Business Machines Corporation
number: 08806166
owner_city: Armonk
owner_country: US
publication_date: 20050929
---
The field of the invention is data processing or more specifically methods apparatus and products for memory allocation in a multi node computer.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

As computer systems have become more sophisticated computer design has become increasingly modular. Often computer systems are implemented with multiple modular nodes each node containing one or more computer processors a quantity of memory or both processors and memory. Complex computer systems may include many nodes and sophisticated bus structures for transferring data among the nodes.

The access time for a processor on a node to access memory on a node varies depending on which node contains the processor and which node contains the memory to be accessed. A memory access by a processor to memory on the same node with the processor takes less time than a memory access by a processor to memory on a different node. Access to memory on the same node is faster because access to memory on a remote node must traverse more computer hardware more buses bus drivers memory controllers and so on between nodes.

The level of computer hardware separation between nodes containing processors and memory is sometimes referred to as memory affinity or simply as affinity. In current computer systems a node is considered to have the greatest memory affinity with itself because processors on the node can access memory on the node faster than memory on other nodes. Memory affinity between a node containing a processor and the node or nodes on which memory is installed decreases as the level of hardware separation increases.

The table describes a system having three nodes nodes and where proportion of processor capacity represents the processor capacity on each node relative to the entire system and proportion of memory capacity represents the proportion of random access memory installed on each node relative to the entire system. An operating system may enforce affinity allocating memory to a process on a processor only from memory on the same node with the processor. In this example node benefits from enforcement of affinity because node with half the memory on the system is likely to have plenty of memory to meet the needs of processes running on the processors of node . Node also benefits from enforcement of memory affinity because access to memory on the same node with the processor is fast.

Not so for node . Node with only five percent of the memory on the system is not likely to have enough memory to satisfy needs of processes running on the processors of node . In enforcing affinity every time a process or thread of execution gains control of a processor on node the process or thread is likely to encounter a swap of the contents of RAM out to a disk drive to clear memory and a load of the contents of the process s or thread s memory from disk an extremely inefficient operation referred to as swapping or thrashing. Turning off affinity enforcement completely for memory on processors local node may alleviate thrashing but running with no enforcement of affinity also loses the benefit of affinity enforcement between processors and memory on well balanced nodes such as node in the example above.

Methods apparatus and products are disclosed that reduce the risk of thrashing for memory allocation in a multi node computer by evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation. Evaluating memory allocation in a multi node computer according to embodiments of the present invention may include calculating in dependence upon a normalized measure of page frame demand a weighted coefficient of memory affinity the weighted coefficient representing desirability of allocating memory from the node and allocating memory may include allocating memory in dependence upon the weighted coefficient of memory affinity.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for memory allocation in a multi node computer according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . Memory allocation in a multi node computer in accordance with the present invention is generally implemented with computers that is with automated computing machinery. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary computer useful in memory allocation in a multi node computer according to embodiments of the present invention. The computer of includes at least one node . A node is a computer hardware module containing one or more computer processors a quantity of memory or both processors and memory. In this specification a node containing one or more processors is sometimes referred to as a processor node and a node containing memory is sometimes referred to as a memory node. A node containing both a quantity of memory and one or more processors depending on context may be referred to as either a processor node or a memory node. Node of includes at least one computer processor or CPU as well as random access memory RAM which is connected through memory management unit and a system bus to processor and to other components of the computer. As a practical matter systems for memory allocation in a multi node computer according to embodiments of the present invention typically include more than one node more than one computer processor and more than one RAM circuit.

Stored in RAM is an application program computer program instructions for user level data processing. Also stored in RAM is an operating system . Operating systems useful in computers according to embodiments of the present invention include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system contains a core component called a kernel for allocating system resources such as processors and physical memory to instances of an application program or other components of the operating system . Operating system including kernel in the method of is shown in RAM but many components of such software typically are stored in non volatile memory also.

The operating system of includes a loader . Loader is a module of computer program instructions that loads an executable program from a load source such for example as a disk drive a tape or network connection and creates a running instance of the executable program called a process. The loader reads and interprets the metadata of an executable file allocates memory to the process loads code and data segments of the executable file into memory and registers the process with a scheduler in the operating system for execution typically by placing an identifier for the new process in a scheduler s ready queue. In this example the loader is a module of computer program instructions improved according to embodiments of the present invention to allocate memory in a multi node computer by evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation.

Page frame demand is the memory allocation requirement of processes for random access memory that is page frames for use by the processes. Page frames are allocated by mapping free frames to pages of virtual memory in a page table associated with a process executing on a processor. Page frame demand therefore may be measured generally by measuring the activities that map page frames of physical memory to pages of virtual memory such as for example counting pages faults page swaps or page outs.

The operating system of includes a memory allocation module . Memory allocation module of is a module of computer program instructions that provides an application programming interface API through which application programs and other components of the operating system may dynamically allocate reallocate or free previously allocated memory. Function calls to the API of the memory allocation module such as for example malloc realloc and free satisfy dynamic memory allocation requirements during program execution. In this example the memory allocation module is a module of computer program instructions improved according to embodiments of the present invention to allocate memory in a multi node computer by evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation.

Also stored in RAM is a page table that maps the virtual memory address space of computer system to the physical memory address space in the system of . The virtual memory address space is broken into fixed size blocks called pages while the physical memory address space is broken into blocks of the same size called page frames. The virtual memory address space provides threads of a process with a block of memory in which to reside that may be much larger than the actual amount of physical memory installed in the computer system. While the threads of a process reside in segments of contiguous virtual memory the actual physical memory containing instructions and data of a process may be fragmented throughout the physical memory space. When a reference to a page of virtual memory occurs during execution of a thread memory management unit looks up the corresponding page frame of physical memory in a page table associated with the program making the reference. In associating page table of with a process some operating systems maintain a page table for each process while other operating systems may assign each process a portion of one large page table maintained for an entire system.

Upon creating expanding or modifying a page table for a process the operating system allocates page frames of physical memory to the pages in the page table . The operating system locates unallocated page frames to assign to the page table through a page frame table . Page frame table is stored in RAM and represents information regarding page frames of physical memory in the system of . In associating the page frame table of with page frames of memory on a node some operating systems may maintain a page frame table for each node that contains a list of all the unallocated page frames on the node while other operating systems may maintain one large page frame table for the entire system that contains information on all page frames in all nodes. Page frame table indicates whether a page frame is mapped to a page in the virtual memory space. Page frames not mapped to pages are unallocated and therefore available when a process requires a memory allocation for storing code and data.

Also stored in RAM is a memory affinity table representing evaluations of memory affinity between processor nodes and memory nodes. Memory affinity is a measure of the desirability of allocating memory from a memory node to a process running on a processor node. High evaluations of memory affinity may exist between processor nodes and memory nodes in close physical proximity because data written to or read from a node of high memory affinity with a processor node traverses less computer hardware fewer memory controllers and fewer bus drivers in traveling to or from such a high affinity memory node. In addition memory affinity may be evaluated highly for memory nodes with relatively low page frame demand. For example a memory node with a lower page frame demand than another memory node with a similar physical proximity to a processor node may have a higher evaluation of memory affinity than the other memory node with respect to the processor node. This example is for explanation and not limitation. In fact a memory node with a lower page frame demand than another memory node may be assigned a higher evaluation of memory affinity than the other memory node regardless of physical proximity to a processor node.

Computer of includes non volatile computer memory coupled through a system bus to processor and to other components of the computer . Non volatile computer memory may be implemented as a hard disk drive optical disk drive electrically erasable programmable read only memory space so called EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory as will occur to those of skill in the art. Page table page frame table memory affinity table operating system and application program in the system of are shown in RAM but many components of such software typically are stored in non volatile memory also.

The example computer of includes one or more input output interface adapters . Input output interface adapters in computers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice.

The exemplary computer of includes a communications adapter for implementing data communications with other computers . Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful for determining availability of a destination according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

For further explanation sets forth a block diagram of a further exemplary computer for memory allocation in a multi node computer. The system of includes random access memory implemented as memory integrated circuits referred to as memory chips included in nodes installed on backplanes with each backplane coupled through system bus to other components of computer . The nodes may also include computer processors also in the form of integrated circuits installed on a node. The nodes on the backplanes are coupled for data communications through backplane buses and the processor chips and memory chips on nodes are coupled for data communications through node buses illustrated at reference on node which expands the drawing representation of node .

A node may be implemented for example as a multi chip module MCM . An MCM is an electronic system or subsystem with two or more bare integrated circuits bare dies chip sized packages assembled on a substrate. In the method of the chips in the MCMs are computer processors and computer memory. The substrate may be a printed circuit board or a thick or thin film of ceramic or silicon with an interconnection pattern for example. The substrate may be an integral part of the MCM package or may be mounted within the MCM package. MCMs are useful in computer hardware architectures because they represent a packaging level between application specific integrated circuits ASICs and printed circuit boards. The nodes of illustrate levels of hardware memory separation or memory affinity. A processor on node may access physical memory 

Memory chip is referred to as local with respect to processor because memory chip is on the same node as processor . Memory chips and however are referred to as remote with respect to processor because memory chips and are on different nodes than processor .

Accessing remote memory on the same backplane takes longer than accessing local memory. Data written to or read from remote memory by a processor traverses more computer hardware more memory controllers and more bus drivers in traveling to or from the remote memory. Accessing memory remotely on another backplane takes even longer for the same reasons.

It is useful to note for purposes of explanation that a processor node may be viewed without regard to page frame demand as having the highest memory affinity with itself because local memory provides the fastest available memory access. The fast access times involved when storing or retrieving data on local memory may increase the desirability of allocating memory from the same node that contains the processor running a process requesting a memory access.

A processor node may not have the highest memory affinity with itself however when evaluation of memory affinity includes page frame demand. If a node containing a processor has only a small quantity of installed memory has few unallocated page frames or for some other reason experiences relatively high page frame demand such a processor node may have higher memory affinity for another node than for itself.

The computer architecture so described for the computer system of is for explanation not for limitation of the present invention. Other architectures as will occur to those of skill in the art may be useful also for implementing memory allocation in multi node computers. Memory allocation in multi node computers may be implemented according to embodiments of the present invention for example with several nodes installed upon printed circuit boards with the printed circuit boards plugged into backplanes thereby creating an additional level of memory affinity not illustrated in . Other architectures as will occur to those of skill in the art may be useful also for implementing memory allocation in multi node computers and all such architectures are well within the scope of the present invention.

For further explanation sets forth a flow chart illustrating an exemplary method for memory allocation in a multi node computer according to embodiments of the present invention that includes evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation.

In the method of evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node includes calculating a weighted coefficient of memory affinity. The weighted coefficient of memory affinity represents desirability of allocating memory from a node. In the method of calculating a weighted coefficient of memory affinity is carried out in dependence upon a normalized measure of page frame demand. As mentioned above page frame demand is the memory allocations requirement of processes for page frames for use by the processes and may be measured generally by measuring within a predetermined time period activities that map page frames of physical memory to pages of virtual memory. A normalized measure of page frame demand may be calculated as the page frame demand for page frames of a node that occurs within a predetermined interval multiplied by a normalizing factor such as for example the proportion of memory installed on other nodes relative to the memory installed on all the nodes of the system. Page frame demand may be characterized with page faults page swaps page outs and in other ways as will occur to those of skill in the art.

Calculating in dependence upon a normalized measure of page frame demand a weighted coefficient of memory affinity according to the method of may be carried out by storing the weighted coefficients of memory affinity in a memory affinity table such as the one illustrated at reference . Each record of memory affinity table specifies a weighted coefficient of memory affinity of a memory node to a processor node . As illustrated processor node has a coefficient of memory affinity of 0.15 to memory node that is processor node s coefficient of memory affinity with itself is 0.15. Processor node s coefficient of memory affinity to memory node is 0.55. And so on.

The evaluations of memory affinity in the memory affinity table are weighted coefficients of memory affinity . Lower weighted coefficients of memory affinity represent higher evaluations of memory affinity. A weighted coefficient of 0.35 represents a higher evaluation of memory affinity than a weighted coefficient of 0.65 a weighted coefficient of 0.65 represents a higher evaluation of memory affinity than a weighted coefficient of 1.25 and so on with the lowest weighted coefficient of memory affinity corresponding to the memory node with the highest evaluation of memory affinity to a processor node and the highest weighted coefficient of memory affinity corresponding to the memory node with the lowest evaluation of memory affinity to a processor node.

An absence of an evaluated memory affinity in this example is represented by a null entry for memory affinity in table . For completeness memory affinity among all nodes of a system are represented in table but there is no meaningful representation of memory affinity between a processor node and another node that has no memory installed upon it. Such a relationship of no meaningful memory affinity is represented by a null entry for memory affinity between two nodes. In this example there is no evaluated memory affinity indicated by a null entry between processor node and memory node . Such a null entry may exist because a processor node has such a large proportions of system memory that it needs no memory from other nodes because a memory node labeled a memory node for purposes of explanation in fact contains no memory and for other reasons as will occur to those of skill in the art.

The method of continues by allocating memory in dependence upon the evaluation of memory affinity. In this example the evaluation of memory affinity is represented by weighted coefficients of memory affinity in table . Allocating memory in dependence upon the evaluation of memory affinity according to the method of includes allocating memory in dependence upon a weighted coefficient of memory affinity. In the method of allocating memory in dependence upon the weighted coefficient of memory affinity includes determining whether there are any memory nodes in the system having evaluated affinities to a processor node that is to a processor node for which memory is to be allocated. In the example of determining whether there are any memory nodes in the system having evaluated affinities to a processor node may be carried out by determining whether there are evaluated affinities in the table for the particular processor node to which memory is to be allocated that is whether there are any non null entries in table .

If there are no memory nodes in the system having evaluated affinities with the processor node the method of includes allocating any free page frame available anywhere on the system regardless of memory affinity. Processor node in memory affinity table for example has no evaluated affinities to memory nodes indicated by null values in column for each entry for processor node in table so that allocations of memory to processor node may be from any free page frames anywhere in system memory regardless of location.

If there are memory nodes in the system having evaluated affinities with the processor node the method of continues by identifying the memory node with the lowest weighted coefficients of memory affinity and if that node has unallocated page frames allocating memory from that node by storing a page frame number of a page frame of memory from that memory node in page table . As explained above lower weighted coefficients of memory affinity represent higher evaluations of memory affinity. Each record of page table associates a page number and a page frame number . According to the method of page frame number representing a page frame from a memory node with the lowest weighted coefficient of memory affinity has been allocated to page number in page table as indicated by arrow .

If the memory node having the lowest weighted coefficient of memory affinity has no unallocated page frames the method of continues by removing the entry for that node from the memory affinity table and loops again determining whether there are memory nodes in the system having evaluated affinities with the processor node identifying the memory node with lowest weighted coefficient of memory affinity and so on.

Whether the node with lowest weighted coefficient of memory affinity has unallocated page frames may be determined by use of a page frame table such as for example the frame table illustrated at reference in . Each record in page frame table represents a memory frame identified by page frame number and specifies by an allocation flag whether the page frame is allocated. An allocated page frame has the associated allocation flag set to and a free page frame s allocation flag is reset to . Allocating a page frame from such a page frame table includes setting the page frame s allocation flag to . In the page frame table of page frame numbers and are allocated. Page frame number however remains unallocated.

An alternative form of page frame table may be implemented as a free page frame table containing only page frame numbers of page frames free to be allocated. Allocating a page frame from a free page frame table includes deleting the page frame number of the allocated page frame from the free page frame table. Other forms of page frame table ways of indicating free and allocated page frames may occur to those of skill in the art and all such forms are well within the scope of the present invention.

For further explanation sets forth a flow chart illustrating a further exemplary method for memory allocation in a multi node computer according to embodiments of the present invention that includes evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation. As explained above with regard to the method of evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node according to the method of may be carried out by calculating in dependence upon a normalized measure of page frame demand a weighted coefficient of memory affinity the weighted coefficient representing desirability of allocating memory from the node and storing the weighted coefficients of memory affinity in a memory affinity table . Each record of memory affinity table specifies an evaluation of memory affinity for a memory node to a processor node . The evaluations of memory affinity in the memory affinity table are weighted coefficients of memory affinity that indicate a proportion of a total quantity of memory to be allocated.

The method of also includes allocating memory in dependence upon the evaluation of memory affinity that is in dependence upon the weighted coefficients of memory affinity . Allocating memory in dependence upon the evaluation according to the method of includes allocating memory from a node as a proportion of a total quantity of memory to be allocated. Allocating memory from a node as a proportion of a total quantity of memory to be allocated may be carried out by allocating memory from a node as a proportion of a total quantity of memory to be allocated to a processor node. A total quantity of memory to be allocated may be identified as a predetermined quantity of memory for allocation such as for example the next 5 megabytes to be allocated.

Allocating memory from a node as a proportion of a total quantity of memory to be allocated according to the method of includes calculating from a weighted coefficient of memory affinity for a node a proportion of a total quantity of memory to be allocated. A proportion of a total quantity of memory to be allocated from memory nodes having evaluated affinities may be calculated as the total quantity of memory to be allocated times the ratio of a value of a weighted coefficient of memory affinity for a memory node for a processor node to a total value of all weighted coefficients of memory affinity for memory nodes having evaluated affinities for the processor node. For processor node in table for example the total of all weighted coefficients of memory affinity for memory nodes having evaluated affinities with processor node that is for memory nodes and is 1.5. Using a total quantity of memory to be allocated of 5 megabytes in the example of in the proportion of a total quantity of memory to be allocated from memory of the nodes associated with memory nodes and respectively may be calculated as 0.75 evaluated memory affinity for node 0 1.5 total evaluated memory affinity 5 MB 2.5 MB Node 0 0.60 evaluated memory affinity for node 1 1.5 total evaluated memory affinity 5 MB 2.0 MB Node 1 0.15 evaluated memory affinity for node 0 1.5 total evaluated memory affinity 5 MB 0.5 MB Node 2

In this example allocating memory from a node as a proportion of a total quantity of memory of 5 MB to be allocated according to the method of may be carried out by allocating the next 5 MB for processor node by allocating the first 2.5 MB of the 5 MB allocation from node the next 2.0 MB from node and the final 0.5 MB of the 5 MB allocation from node . All such allocations are subject to availability of page frames in the memory nodes. In particular in the example of allocating memory from a node as a proportion of a total quantity of memory to be allocated also includes allocating the proportion of a total quantity of memory to be allocated from memory on the node subject to page frame availability. Whether unallocated page frames exist on a memory node may be determined by use of page frame table . Page frame table associates page frame numbers for page frames in memory nodes with allocations flags that indicate whether a page frame of memory is allocated.

Allocating the proportion of a total quantity of memory according to the method of may include calculating the number of page frames needed to allocate the proportion of a total quantity of memory to be allocated. Calculating the number of page frames needed may be accomplished by dividing the page frame size into the proportion of the total quantity of memory to be allocated. Continuing the example calculation above where the total of all weighted coefficients of memory affinity for memory nodes having evaluated affinities for processor node is 1.5 the total quantity of memory to be allocated is 5 megabytes the proportion of the total quantity of memory to be allocated from nodes and respectively is 2.5 MB 2.0 MB and 0.5 MB and the page frame size is taken as 2 KB then the number of page frames to be allocated from nodes and may be calculated as 2.5 MB 2 KB page frame 1280 page frames Node 0 2.0 MB 2 KB page frame 1024 page frames Node 1 0.5 MB 2 KB page frame 256 page frames Node 2

Allocating the calculated proportion of a total quantity of memory according to the method of may also be carried out by storing the page frame numbers of all unallocated page frames from a memory node up to and including the number of page frames needed to allocate the calculated proportion of a total quantity of memory to be allocated from memory nodes into page table of a process running on a processor node. Each record of page table of associates a page frame number of a page frame on a memory node with a page number in the virtual memory space allocated to a process running on a processor node. In the example of therefore page frame number representing a page frame from a memory node with the lowest weighted coefficient of memory affinity has been allocated to page number in page table as indicated by arrow .

After allocating the number of page frames needed to allocate the proportion of a total quantity of memory to be allocated from the memory node or after allocating all unallocated page frames from a memory node whichever comes first the method of continues by looping to the next entry in the memory affinity table associated with a memory node and again calculating from a weighted coefficient of memory affinity for a node a proportion of a total quantity of memory to be allocated allocating the proportion of a total quantity of memory to be allocated from memory on the node subject to page frame availability and so on until allocation subject to page frame availability of the proportion of a total quantity of memory to be allocated for each memory node with an evaluated memory affinity for the processor node for which a quantity of memory is to be allocated occurs. Upon allocating subject to page frame availability the proportion of a total quantity of memory to be allocated for each memory node with an evaluated memory affinity for the processor node for which a quantity of memory is to be allocated any portion of the total number of allocations remaining unallocated may be satisfied according to the method of from memory anywhere on the system regardless of memory affinity.

For further explanation sets forth a flow chart illustrating a further exemplary method for memory allocation in a multi node computer according to embodiments of the present invention that includes evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation. As explained above with regard to the method of evaluating memory affinity among nodes according to the method of may be carried out by calculating a weighted coefficient of memory affinity for each memory node for each processor node based on system parameters and storing the weighted coefficients of memory affinity in a memory affinity table . Each record of memory affinity table specifies an evaluation of memory affinity for a memory node to a processor node . The evaluations of memory affinity in the memory affinity table are weighted coefficients of memory affinity that indicate a proportion of a total number of memory allocations to be allocated from memory nodes for a processor node that is to processes running on a processor node.

The method of also includes allocating memory in dependence upon the evaluations of memory affinity that is in dependence upon the weighted coefficients of memory affinity . Allocating memory in dependence upon the evaluations according to the method of includes allocating memory from a node as a proportion of a total number of memory allocations. Allocating memory from a node as a proportion of a total number of memory allocations may be carried out by allocating memory from a node as a proportion of a total number of memory allocations to a processor node. According to the method of the total number of memory allocations may be identified as a predetermined number of memory allocations such as for example the next 500 allocations of memory for a processor node that is the next 500 allocations to processes running on a processor node.

Allocating memory from a node as a proportion of a total number of memory allocations according to the method of includes calculating from a weighted coefficient of memory affinity for a node a proportion of a total number of memory allocations. A proportion of a total number of memory allocations from memory nodes having evaluated affinities may be calculated as the total number of memory allocations times the ratio of a value of a weighted coefficient of memory affinity for a memory node for a processor node to a total value of all weighted coefficients of memory affinity for memory nodes having evaluated affinities for the processor node. For processor node in table for example the total of all weighted coefficients of affinities for memory nodes having evaluated affinities with processor node that is for memory nodes and is 1.5. Using a total number of memory allocations of 500 allocations in the example of the proportion of a total number of memory allocations to processor node from memory nodes and respectively may be calculated as 0.75 evaluated memory affinity for node0 1.5 total evaluated memory affinity 500 allocations 250 allocations Node 0 0.60 evaluated memory affinity for node 1 1.5 total evaluated memory affinity 500 allocations 200 allocations Node 1 0.15 evaluated memory affinity for node 0 1.5 total evaluated memory affinity 500 allocations 50 allocations Node 2

In this example allocating memory from a node as a proportion of a total number of 500 memory allocations according to the method of may be carried out by allocating the next 500 allocations for processor node by allocating the first 250 of the 500 allocations from node the next 200 allocations from node and the final 50 of the 500 from node . All such allocations are subject to availability of page frames in the memory nodes and all such allocations are implemented without regard to the quantity of memory allocated. In particular in the example of allocating memory from a node as a proportion of a total number of memory allocations also includes allocating the proportion of a total number of memory allocations from memory on the node subject to page frame availability. Whether unallocated page frames exist on a memory node may be determined by use of page frame table . Page frame table associates page frame numbers for page frames in memory nodes with allocations flags that indicate whether a page frame of memory is allocated.

Allocating the proportion of a total number of memory allocations according to the method of may be carried out by storing the page frame numbers of all unallocated page frames from a memory node up to and including the proportion of a total number of memory allocations for the memory node into page table for a process running on a processor node. Each record of page table of associates a page frame number of a page frame on a memory node with a page number in the virtual memory space allocated to a process running on a processor node. In the example of therefore page frame number representing a page frame from a memory node with an evaluated memory affinity here a weighted memory affinity to a processor node has been allocated to page number in page table as indicated by arrow .

After allocating the proportion of a total number of memory allocations from the memory node or after allocating all unallocated page frames from a memory node whichever comes first the method of continues by looping to the next entry in the memory affinity table associated with a memory node and again calculating from a weighted coefficient of memory affinity for a node a proportion of a total number of memory allocations allocating the calculated proportion of a total number of memory allocations from memory on the node subject to page frame availability and so on until allocation subject to page frame availability of the proportion of a total number of memory allocations for each memory node with an evaluated memory affinity for the processor node for which memory is to be allocated occurs. Upon allocating subject to page frame availability the proportion of a total number of memory allocations for each memory node with an evaluated memory affinity for the processor node for which memory is to be allocated any portion of the total number of allocations remaining unallocated may be satisfied according to the method of from memory anywhere on the system regardless of memory affinity.

For further explanation sets forth a flow chart illustrating a further exemplary method for memory allocation in a multi node computer according to embodiments of the present invention that includes evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation. Evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node according to the method of includes evaluating memory affinity in dependence upon a normalized measure of page faults. A page fault is an interrupt triggered by a memory management unit MMU in response to a request from a process for memory access to a page in virtual memory that is not mapped to a page frame in RAM. The lack of a mapped page frame for a page of virtual memory may be indicated for example by an empty bit set to TRUE for the virtual memory page in a page table. In typical operating systems a page fault interrupt handler maps a free page frame from a node to a page in virtual memory if a free frame is available. A normalized measure of page faults may be calculated as a number of page faults occurring within a predetermined time interval that map page frames on a node to pages in virtual memory multiplied by a normalizing factor such as for example the proportion of memory installed on other nodes relative to the memory installed on all the nodes of the system.

In the method of evaluating memory affinity in dependence upon a normalized measure of page faults may be carried out periodically at predetermined time intervals such as for example every second. Periodically evaluating memory affinity allows evaluations of affinity such as the weighted coefficients of affinity at reference to adjust dynamically as the page frame demand for page frames on a node changes.

Evaluating memory affinity in dependence upon a normalized measure of page faults according to the method of includes storing a current normalized measure of page faults as a previous normalized measure of page faults for a node in a page frame demand table . Each record of the page frame demand table associates a current page frame demand and a previous page frame demand with a node identifier . The current page frame demand of is the normalized measure of page faults occurring in the most recently completed predetermined time interval. The previous page frame demand of is the normalized measure of page faults occurring in the time interval prior to the most recently completed predetermined time interval. Consider for example node in a computer system that has an equal distribution of memory among all nodes and that operates according to the method of where 10 page faults occur in the first time interval 15 page faults occur in the second time interval and 12 page faults occur in the third time interval. The most recently completed predetermined time interval while the third time interval elapses is the second time interval. The current page frame demand for node therefore is 15. The time interval prior to the most recently completed predetermined time interval while the third time interval elapses is the first time interval. The previous page frame demand for node therefore is 10.

In the method of evaluating memory affinity in dependence upon a normalized measure of page faults also includes calculating a current page frame demand. Calculating a current page frame demand according to the method of may be carried out by calculating a current normalized measure of page faults and storing the current normalized measure of page faults for a node in the current page frame demand of page frame demand table . A current normalized measure of page faults may be calculated according to the following Formula 1 1 Formula 1 where Nis the normalized measure of page faults for the imemory node Fis the number of page faults occurring within the most recently completed predetermined time interval that map page frames from the imemory node to pages in the virtual memory and Mis the proportion of memory installed on the imemory node relative to the total system memory installed on all the nodes. For node for example a normalized measure of page faults Nmay be calculated according to Formula 1 where the number of page faults occurring within a predetermined time period that map page frames from node to pages in the virtual memory is taken from column of table as the proportion of memory installed on node relative to the total system memory installed on all the nodes is taken from column of table as 0.50 and Nis calculated as 50 100 1 0.50 .

The page fault table of associates the number of page faults occurring within a predetermined time period with a node identifier . In this example 100 page faults have mapped page frames from node to pages in virtual memory 50 page faults have mapped page frames from node to pages in virtual memory and 25 page faults have mapped page frames from node to pages in virtual memory.

The proportions of total memory table of associates the proportion of total system memory installed on a node with a node identifier . In this example node contains 50 of the total system memory node contains 30 of the total system memory and node contains 20 of the total system memory.

In the method of evaluating memory affinity in dependence upon a normalized measure of page faults further includes calculating a weighted coefficient of memory affinity between a processor node and memory nodes installed on the system according to the following Formula 2 

where Wis the weighted coefficient of memory affinity for a processor node for the imemory node Pis the previous page frame demand of the imemory node and Cis the current page frame demand of the imemory node. For node for example a weighted coefficient of memory affinity Wmay be calculated according to Formula 2 where the previous page frame demand is taken from column of table as 40 the current page frame demand is taken from column of table as 50 and Wis calculated as 70 40 2 50.

In the method of calculating a weighted coefficient of memory affinity may include storing a weighted coefficient of memory affinity for each memory node in a memory affinity table . Each record of memory affinity table specifies an evaluation of memory affinity for a memory node for a processor node .

The method of also includes allocating memory in dependence upon the evaluation of memory affinity. Allocating memory in dependence upon the evaluation may be carried out by determining whether there are any memory nodes in the system having evaluated affinities with a processor node identifying the memory node with the lowest weighted coefficient of affinity and determining whether the node with lowest weighted coefficient of affinity has unallocated page frames and so on as described in detail above in this specification.

For further explanation sets forth a flow chart illustrating a further exemplary method for memory allocation in a multi node computer according to embodiments of the present invention that includes evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation. Evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node according to the method of includes evaluating memory affinity in dependence upon a normalized measure of page swaps.

A page swap is an allocation of a new page frame to a virtual memory page to which a page frame is already allocated. In order to so allocate the new page frame the page swap first writes the contents of the previously allocated page frame to disk. A page swap therefore is very expensive in terms of processing time and page fault handlers typically implement page swaps only when there is no other way to effect an allocation of memory because for example RAM is very full with no free frames at all or no free frames that can be allocated within a current memory affinity enforcement policy. For these reasons measures of page swaps may be useful measures of page frame demand when many page swaps occur on a memory node page frame demand on the node is high. A normalized measure of page swaps may be implemented as a count of a number of page swaps of memory on a node that occurs within a predetermined period of time multiplied by a normalizing factor such as for example a proportion of memory installed on other nodes relative to the total memory installed on all nodes of a system.

In the method of evaluating memory affinity in dependence upon a normalized measure of page swaps may be carried out periodically at predetermined time intervals such as for example every second. Periodically evaluating memory affinity allows evaluations of affinity such as the weighted coefficients of affinity at reference to adjust dynamically as the page frame demand for page frames on a node changes.

Evaluating memory affinity in dependence upon a normalized measure of page swaps according to the method of includes storing a current normalized measure of page swaps as a previous normalized measure of page swaps for a node in a page frame demand table . Each record of the page frame demand table associates a current page frame demand and a previous page frame demand with a node identifier . The current page frame demand of is the normalized measure of page swaps occurring in the most recently completed predetermined time interval. The previous page frame demand of is the normalized measure of page swaps occurring in the time interval prior to the most recently completed predetermined time interval. Consider for example node in a computer system that has an equal distribution of memory among all nodes and that operates according to the method of where 10 page swaps occur in the first time interval 15 page swaps occur in the second time interval and 12 page swaps occur in the third time interval. The most recently completed predetermined time interval while the third time interval elapses is the second time interval. The current page frame demand for node therefore is 15. The time interval prior to the most recently completed predetermined time interval while the third time interval elapses is the first time interval. The previous page frame demand for node therefore is 10.

In the method of evaluating memory affinity in dependence upon a normalized measure of page swaps also includes calculating a current page frame demand. Calculating a current page frame demand according to the method of may be carried out by calculating a current normalized measure of page swaps and storing the current normalized measure of page swaps for a node in the current page frame demand of page frame demand table . A current normalized measure of page swaps may be calculated according to the following Formula 3 1 Formula 3 where Nis the normalized measure of page swaps for the imemory node Sis the number of page swaps occurring within the most recently completed predetermined time interval that map page frames from the imemory node to pages in the virtual memory and Mis the proportion of memory installed on the imemory node relative to the total system memory installed on all the nodes. For node for example a normalized measure of page swaps Nmay be calculated according to Formula 3 where the number of page swaps occurring within a predetermined time period that map page frames from node to pages in the virtual memory is taken from column of table as the proportion of memory installed on node relative to the total system memory installed on all the nodes is taken from column of table as 0.50 and Nis calculated as 50 100 1 0.50 .

The page swap table of associates the number of page swaps occurring within a predetermined time period with a node identifier . In this example 100 page swaps have created free page frames on node available for mapping into pages of virtual memory 50 page swaps have created free page frames on node available for mapping into pages of virtual memory and 25 page swaps have created free page frames on node available for mapping into pages of virtual memory.

The proportions of total memory table of associates the proportion of total system memory installed on a node with a node identifier . In this example node contains 50 of the total system memory node contains 30 of the total system memory and node contains 20 of the total system memory.

In the method of evaluating memory affinity in dependence upon a normalized measure of page swaps further includes calculating a weighted coefficient of memory affinity between a processor node and memory nodes installed on the system according to the following Formula 4 

where Wis the weighted coefficient of memory affinity for a processor node for the imemory node Pis the previous page frame demand of the imemory node and Cis the current page frame demand of the imemory node. For node for example a weighted coefficient of memory affinity Wmay be calculated according to Formula 4 where the previous page frame demand is taken from column of table as the current page frame demand is taken from column of table as and Wis calculated as 70 40 2 50.

In the method of calculating a weighted coefficient of memory affinity may include storing a weighted coefficient of memory affinity for each memory node in a memory affinity table . Each record of memory affinity table specifies an evaluation of memory affinity for a memory node for a processor node .

The method of also includes allocating memory in dependence upon the evaluation of memory affinity. Allocating memory in dependence upon the evaluation may be carried out by determining whether there are any memory nodes in the system having evaluated affinities with a processor node identifying the memory node with the lowest weighted coefficient of affinity and determining whether the node with lowest weighted coefficient of affinity has unallocated page frames and so on as described in detail above in this specification.

For further explanation sets forth a flow chart illustrating a further exemplary method for memory allocation in a multi node computer according to embodiments of the present invention that includes evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node and allocating memory in dependence upon the evaluation. Evaluating memory affinity for a node in dependence upon page frame demand for page frames on the node according to the method of includes evaluating memory affinity in dependence upon a normalized measure of page outs.

A page out is a process that stores to disk the contents of a page frame in RAM and marks as empty in a page table the virtual page to which the page frame was mapped thereby freeing the page frame for reallocation. A page out process may also mark the frame as free in a frame table or list the frame in a free frame table. Because a page out writes page frames to disk a page out is very expensive in terms of processing time. Page fault handlers therefore typically implement a page out only in the presence of high page frame demand when for example a number of allocated page frames exceeds a predetermined threshold. For these reasons measures of page outs may be useful measures of page frame demand when many page outs occur on a memory node page frame demand on the node is high. A normalized measure of page outs may be implemented as a count of a number of page outs of memory on a node that occurs within a predetermined period of time multiplied by a normalizing factor such as for example a proportion of memory installed on other nodes relative to the total memory installed on all nodes of a system.

In the method of evaluating memory affinity in dependence upon a normalized measure of page outs may be carried out periodically at predetermined time intervals such as for example every second. Periodically evaluating memory affinity allows evaluations of affinity such as the weighted coefficients of affinity at reference to adjust dynamically as the page frame demand for page frames on a node changes.

Evaluating memory affinity in dependence upon a normalized measure of page outs according to the method of includes storing a current normalized measure of page outs as a previous normalized measure of page outs for a node in a page frame demand table . Each record of the page frame demand table associates a current page frame demand and a previous page frame demand with a node identifier . The current page frame demand of is the normalized measure of page outs occurring in the most recently completed predetermined time interval. The previous page frame demand of is the normalized measure of page outs occurring in the time interval prior to the most recently completed predetermined time interval.

In the method of evaluating memory affinity in dependence upon a normalized measure of page outs also includes calculating a current page frame demand. Calculating a current page frame demand according to the method of may be carried out by calculating a current normalized measure of page outs and storing the current normalized measure of page outs for a node in the current page frame demand of page frame demand table . A current normalized measure of page outs may be calculated according to the following Formula 5 O 1 Formula 5 where Nis the normalized measure of page outs for the imemory node Ois the number of page outs occurring within the most recently completed predetermined time interval that map page frames from the imemory node to pages in the virtual memory and Mis the proportion of memory installed on the imemory node relative to the total system memory installed on all the nodes. For node for example a normalized measure of page outs Nmay be calculated according to Formula 5 where the number of page outs occurring within a predetermined time period that map page frames from node to pages in the virtual memory is taken from column of table as the proportion of memory installed on node relative to the total system memory installed on all the nodes is taken from column of table as 0.50 and Nis calculated as 50 100 1 0.50 .

The page out table of associates the number of page outs occurring within a predetermined time period with a node identifier . In this example 100 page outs have created free page frames on node available for mapping into pages of virtual memory 50 page outs have created free page frames on node available for mapping into pages of virtual memory and 25 page outs have created free page frames on node available for mapping into pages of virtual memory.

The proportions of total memory table of associates the proportion of total system memory installed on a node with a node identifier . In this example node contains 50 of the total system memory node contains 30 of the total system memory and node contains 20 of the total system memory.

In the method of evaluating memory affinity in dependence upon a normalized measure of page outs further includes calculating a weighted coefficient of memory affinity between a processor node and memory nodes installed on the system according to the following Formula 6 

In the method of calculating a weighted coefficient of memory affinity may include storing a weighted coefficient of memory affinity for each memory node in a memory affinity table . Each record of memory affinity table specifies an evaluation of memory affinity for a memory node for a processor node .

The method of also includes allocating memory in dependence upon the evaluation of memory affinity. Allocating memory in dependence upon the evaluation may be carried out by determining whether there are any memory nodes in the system having evaluated affinities with a processor node identifying the memory node with the lowest weighted coefficient of affinity and determining whether the node with lowest weighted coefficient of affinity has unallocated page frames and so on as described in detail above in this specification.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for memory allocation in a multi node computer. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

