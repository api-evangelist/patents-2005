---

title: Universal media player
abstract: A universal media player designed to improve a user's online media experience that is preferably embedded in an Internet browser is disclosed. The universal media player allows a user to navigate between different sources of media without requiring the downloading of the media player associated with the format of the media source. The universal media player includes an interface with user-actuable control buttons, the universal media player determining whether incoming media is playable by the universal media player. If the incoming media is playable by the universal media player, the media is intercepted as the media is downloaded and redirected to the universal media player. Determining if the media is playable is accomplished by identifying the type of incoming media and searching a table of MIME media types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07386784&OS=07386784&RS=07386784
owner: Microsoft Corporation
number: 07386784
owner_city: Redmond
owner_country: US
publication_date: 20050317
---
This application is a continuation of application Ser. No. 09 746 640 filed Dec. 21 2000 now abandoned the benefit of the filing date of which is hereby claimed under 35 U.S.C. 120.

The present invention relates to computer software and in particular to multimedia players for online Internet use.

Media designed for distribution over the Internet come in many forms and formats. Media players are software resident on computers that interpret incoming stream media and convert the media into human perceivable form i.e. into audio and video form for outputting to a user. What is common to each media player is a uniform media format and a unique user interface.

Because conventional Internet media players have their own unique media formats and user interfaces in the past media players have been incompatible. This incompatibility has created a variety of problems. For instance if a user is sampling radio stations played by different media players an undesirable amount of time is spent juggling the various players and waiting for them to cue up media. This is not conducive to providing simple background music. Even when the streaming media being downloaded has a universal file format problems exist because each resident media player competes to register itself as being the owner of a given file format. For instance almost all media players can play MP3 files as well as the private file format for which the player is expressly designed. When a user downloads streaming media having a particular file format the user will be queried to download the media player associated with the format of the media. If the user selects to download the media player the player installer will change the user s file associations. For instance if a user has been using the WinAMP media player and decides to receive a Real Network stream of media the user will be asked if the Real Networks media player should be downloaded. If the user specifies that the Real Networks media player should be downloaded the Real Networks media player installer will change a user s file associations so that the Real Networks media player will in the future play every media type saved in the user s file. As a result the user will lose the use of the WinAMP media player.

In another scenario a user may decide to listen to a first streaming media radio station. The user will have to locate the appropriate link and open the necessary media player to launch the application. After managing the windows on the screen to return the user to the working window the user may decide to listen to a second streaming media radio station which may employ a different player. In order to change media players the user must first open the original player window and activate the stop feature of the player s interface. Then the user must locate the second streaming media radio station and activate the link to start the second media. If the media player employed by the second streaming media radio station is not installed activating the link will prompt the user to install a second player. This entire process requires the user to manage multiple windows in order to listen to the second streaming media radio station. If the user forgets to stop the first media player both media players will play simultaneously leading to noise. Changing the volume level of one media player may or may not affect the other media player so the user may be forced to separately locate and adjust both players volume control.

Accordingly there is a need for a universal media player that improves a user s online media experience and eliminates the burdens discussed above that are placed upon a user when juggling media played by different media players. The present invention is directed to fulfilling this and other needs.

The present invention is directed to solving the above problems by providing a universal media player designed to improve a user s online media experience. The universal media player allows a user to navigate between different sources of media without requiring the downloading of the media player associated with the format of the media source. Preferably the universal media player is embedded in another program preferably an Internet browser such that the interface of the universal media player is persistent when the interface of the program within which the universal media player is embedded. In the case of a browser preferably the interface of the embedded universal media player is normally positioned within the frame of the browser interface i.e. a portion of the browser interface that normally does not change.

In accordance with the present invention a computer implementable method of playing media designed for playing on various types of media players is provided. The method includes providing a universal media player that includes an interface with user actuable control buttons determining whether media to be downloaded associated with a dedicated media player is playable by the universal media player and if the media to be downloaded associated with a dedicated media player is playable by the universal media player intercepting the media as the media is downloaded and redirecting the media to the universal media player.

In accordance with other aspects of the present invention a media type table of MIME is searched to determine whether the media to be downloaded associated with a dedicated media player is or is not playable by the universal media player.

In accordance with further aspects of the present invention in response to a request to change a media source the universal media player determines the MIME type of the new media and instantiates a media component object for the media. When the instantiated media component object is ready a second media player is initialized the first media player is stopped and hidden and the second media player is displayed.

In accordance with yet other aspects of the present invention the universal media player includes an interface that allows users to make selections by actuating user actuable controls that form part of the universal media player interface.

In accordance with still other aspects of the present invention two universal media players can be locked and synchronized together. Preferably synchronization is accomplished by a first user clicking on a uniform resource locator URL media link of the user s universal media player after the user s universal media player is locked to a second user s universal media player. As a result both universal media players receive the same media link resulting in the users of both media players listening to the same sound or viewing the same video simultaneously. Alternatively one user s universal media player can be the source of media played by a second user s universal media player. The locking and synchronizing of universal media players can also be used to provide video internet meeting conferencing.

The invention has a number of advantages and features many of which like the foregoing are intended to eliminate the need to have a handful of separate media players each with a user interface having different control buttons. The present invention provides the user with a single interface having one set of control buttons e.g. play stop volume next and previous track regardless of the source of media providing the user with an uncluttered desktop. The interface is in a form that facilitates managing the user s online media experience even while using the media player in the background. As noted above preferably a universal media player formed in accordance with this invention is embedded in an Internet browser.

The present invention is directed to a universal media player designed to improve a user s online experience. As will be better understood from the following description the universal media player allows a user to navigate between different sources of media without requiring the downloading of the media player associated with the format of the media source. Preferably the universal media player is embedded in another program preferably an Internet browser such that the interface of the universal media player is persistent when the interface of the program within which the universal media player is embedded. In the case of a browser preferably the interface of the embedded universal media player is normally positioned within the frame of the browser interface i.e. a portion of the browser interface that normally does not change.

The invention is preferably practiced in the context of an operating system resident on a personal computer. illustrates a typical hardware configuration of a personal computer suitable for implementing a universal media player formed in accordance with the present invention. The personal computer illustrated in includes a central processing unit such as a conventional microprocessor and a number of other units interconnected via a system bus . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The computer shown in includes a system memory comprised of non volatile and volatile memory such as Random Access Memory RAM Read Only Memory ROM and Basic Input Output System BIOS . The illustrated computer also includes a hard disk drive interface for connecting a Compact Disk CD drive a magnetic disk driver interface for connecting a magnetic disk drive an optical drive interface for connecting a Digital Versatile Disk DVD and a user input interface for connecting peripheral devices such as a keyboard a mouse a microphone speakers and a video camera . The computer has resident thereon an operating system such as Microsoft s WINDOWS 2000 application programs other program modules and program data .

The computer may operate in a network environment using logical connections to one or more remote computers . The remote computer may be a personal computer a server a router a network PC or other common network nodes. The logical connections include a local area network LAN and a wide area network WAN but also include other networks. Such network environments are commonplace in office enterprise wide computer networks intranets and the Internet. When used in a LAN network environment the computer is connected to the LAN through a network interface adapter . When used in a WAN network environment the computer includes a modem or other means for establishing communications over the WAN such as the Internet.

As is well understood by those skilled in the art the World Wide Web WWW is a vast collection of interconnected documents many written in various MIME types that are electronically stored at WWW sites throughout the Internet. MIME is the acronym for Multipurpose Internet Mail Extensions and is a protocol widely used on the Internet that extends the Simple Mail Transfer Protocol SMTP to permit data such as video sound and binary files to be transmitted by Internet e mail without having to be translated into ASCII format first. In other words MIME types describe the contents of a document to a MIME compliant receiving application. The receiving application refers to a standardized list of documents that are organized into MIME types and subtypes to interpret the content of the file. An example of a MIME type of text refers to a file that contains text written in HyperText Markup Language HTML . The MIME types are electronically stored at WWW sites throughout the Internet. A WWW site is a server connected to the Internet that has mass storage facilities for storing media and hypertext documents. Also a WWW server runs administrative software for handling requests for the stored media. A hypertext document normally includes a number of hyperlinks that may be identified in various ways e.g. highlighted portions of text which link the document to other hypertext documents possibly stored at a WWW site elsewhere on the Internet. Each hyperlink is associated with a Uniform Resource Locator URL and provides the exact location of the linked document on a server connected to the Internet and describes the document. Thus whenever a hypertext document is retrieved from any WWW server the document is considered to be retrieved from the WWW. As is well known to those skilled in the art a WWW server may also include facilities for storing and transmitting application programs which are application programs written in JAVA programming language from Sun Microsystems for execution on a remote computer. Likewise a WWW server may also include facilities for executing scripts or other application programs on the WWW server itself.

A consumer or other remote user may retrieve a media stream from the WWW via a WWW Internet browser application. The WWW Internet browser is a software application program for providing a graphical user interface to the WWW. Upon request from the consumer via a WWW Internet browser the browser accesses and retrieves the desired media stream from the appropriate WWW server using the URL for the media and a protocol known as MIME which is a protocol that is part of HyperText Transfer Protocol HTTP . HTTP is a higher level protocol than TCP IP and is designed specifically for the requirements of the WWW. It is used on top of TCP IP to transfer hypertext or media related documents between servers and clients. The WWW Internet browser may also retrieve application programs from the WWW server such as JAVA applets for execution on the client computer.

The present invention relates to a method for providing a universal multimedia player for online Web Internet use. As will be readily understood by one skilled in the relevant art the present invention is not limited in its application to an Internet browser. Thus it is to be understood that the disclosed embodiment is only by way of example and should not be construed as limiting. Preferably the present invention is implemented in an object oriented programming language such as C using object oriented programming techniques. As will be understood by those skilled in the art Object Oriented Programming OOP objects are software components comprising data structures and member functions which comprise operations on the data. Together these elements of the components enable objects to model virtually any real world entity in terms of its characteristics represented by its data elements and its behavior represented by its data manipulation functions. The basic principles and benefits of object oriented programming are encapsulation polymorphism and inheritance. Objects hide or encapsulate the internal structure of their data and the algorithms by which their functions work. Instead of displaying or exposing these implementation details objects present interfaces that represent their abstractions. Polymorphism is when a software component can make a request of another software component without knowing exactly what that component is. The component that receives the request interprets it and determines according to its variables and data how to execute the request. Inheritance allows developers to reuse pre existing design and code. Through inheritance developers can derive subclasses that inherit behaviors of other software component objects which a developer then customizes to meet particular needs. Accordingly in the present invention a media component object is created to model aspects of presenting media. An example of an object oriented component base class that is used as a foundation for presenting media is Microsoft COM Component Object Model . As will be understood by those skilled in the art COM components are written in object oriented languages such as C and are the foundation of the OLE Object Linking and Embedding ActiveX and DirectX specifications where ActiveX is a set of technologies that enable software components to interact with one another in a networked environment like the Internet. The ActiveX controls are reusable software components based on Microsoft ActiveX technology that is used to add interactivity and more functionality such as a popup menu to a Web page applications and software development tools. An ActiveX control can be written in any number of object oriented languages such as C JAVA or Visual Basic . Thus ActiveX controls can be embedded in Web pages to produce animation and other multimedia effects interactive objects and other applications. Furthermore DirectX is a Windows application programming interface API that gives applications direct access to a computer s sound and graphics hardware. DirectX includes a number of components to name a few DirectDraw for graphics DirectSound for audio and Direct3D for three dimensional graphics.

Beginning with start state a user starts an online media experience by performing any number of activities or events relating to media. For example a user may choose to click on a Uniform Resource Link URL or a user or the system may open a window that includes an embedded media player dedicated to playing specific media. The end result is the interception of a media stream download. Either type of occurrence activates a transition from the start state to the decode MIME type state . If the media is playable by the universal media player the universal media player transitions from the decode MIME type state to the cue media state . If the media is not playable by the universal multimedia player the universal multimedia player transitions to the enable default player state .

In contrast to the foregoing transitions if the start activity is the insertion of CD or DVD media the reception of a remote navigation event described below or the receipt of a video and or telephone call the embedded universal media player transitions or directly from the start state to cue media state .

When the media is ready for playing the universal media player transitions from the cue media state to the playing state . The playing state includes a number of member functions for playing the media stream that depend to some extent on the nature of the media stream. After the media stream is completed the universal media player transitions from the playing state to the end state where the media experience ends. Likewise if the media stream was a non playable type enabling default player state when the non playable media stream ends the universal media player transitions from the enable default player state to the end state where the online media experience ends.

In order to better understand the operation of a universal media player formed in accordance with this invention the decode MIME type cue media and playing states are illustrated in and respectively and described below. As with these figures are in the form of object oriented software components also known as member functions. In essence they are objects of the embedded universal media software component object.

The decode MIME type software component object states include initiate download look up MIME type in table non playable type and playable . As shown in and repeated in the initiate download state is entered when a media stream download is intercepted or a user clicks on a link . The MIME type received download is analyzed by the decode MIME type software component object transitioning to the look up MIME type in table state . The analysis is performed by searching a look up table of various MIME types and identifying the MIME type as one that is playable or non playable by the media player. If the MIME type is not found in the table the media stream is non playable by the media player. As a result the decode MIME type software component object transitions to the non player type state . If the MIME type is found in the table the download of the media stream is canceled and the decode MIME type software component object transitions to the playable type state . Thus playable type is defined as a MIME type that the universal media player has found within the look up table. As illustrated in and described above if the MIME type is a non playable type media playing defaults to a resident media player having the ability to play the media which could involve downloading another media player from a remote server.

The cue media software component object states include instantiate COM object for MIME type start idle player with media stream stop and hide current player show idle player and serve up the media stream if storing the media stream . As shown in and repeated in in response to the insertion of a CD DVD receiving a remote navigation event receiving a video audio telephone call and receiving a playable type media stream the cue media software object components enters the instantiate a COM object for the MIME type state that is associated with the media stream. Instantiation is defined as creating a media object component with member functions to control the media object. Typically a media component object is an object oriented software component base class or foundation consisting of member functions of subclasses or other components relating to media that control the media component. As will be understood by those skilled in the art examples of software components relating to media member functions are audio speaker audio play video and video play.

When the COM object for the MIME type has been instantiated the cue media software object component transitions to the start idle player with media stream state . If the current media player is synchronized together with a second media player a remote navigation event is sent to the second media player.

When the media stream is ready the cue media software object component transitions to the stop and hide current media player state . If media is currently playing this transfer causes the current media player to stop and be hidden. Then the cue media software object component transitions to the show idle player state . From the show idle player state the cue media software object component transitions to the serve up the media stream if storing the media stream state . As is understood to one skilled in the art of object oriented programming hiding an application temporarily removes the onscreen display of an application s active window while leaving the application running. Here stopping inhibits an audio output if one is being generated.

If a current media player is not executing when the media stream is ready or if a current media player is remotely synchronized with a second media player and both media streams are ready the cue media software object component transitions directly to the show idle player state from the start idle media player with media stream state . Then the cue media software object component transitions to the serve up the media stream if storing the media stream state .

The playing software component object states include playing change volume STOP player END NEXT PAUSE send remote PAUSE event send remote NEXT event send remote STOP event MINIMIZE MAXIMIZE player send remote PREVIOUS event and PREVIOUS . When the universal media player transitions to the playing state the playing software component object enters the playing state . From the playing state a user can cause the playing software component object to transition to any of the other states by selecting the appropriate one of a number of control operations or events such as change volume stop next pause previous and play. Enabling one of these control operations using a mouse or other cursor control device in a conventional manner causes the illustrated transition to take place. These events are similar to controls on a CD player or VCR etc. The control events also include minimize maximize player interface window . Some additional events allow communication between two media players synchronized together. These include receiving and sending remote pause events receiving and sending remote next events receiving and sending remote previous events and receiving and sending remote stop events . The nature and operation of the depicted events will be better understood from the following description and the accompanying functional logic interface screen figures.

If the user did not receive a remote navigation event program control cycles to decision block where a test is performed to determine if a user inserted a CD or DVD. If the user inserted a CD or DVD at function block the media stream is cued and control is passed to decision block . As before when the media stream is ready at function block the universal media player is enabled to play the media. When the media ends control passes to end block .

If the user did not insert a CD or DVD program control cycles to decision block where a test is performed to determine if a user received a video telephone call. An example of the video telephone program that can be used with the present invention is Windows NetMeeting . If the user received a video telephone call at function block the telephone call media stream is cued and program control is passed to decision block . As before when the media stream is ready at function block the universal media player is enabled to play the media i.e. provide audio and video output. When the video telephone call ends program control passes to end block .

If the user did not receive a video telephone call control cycles to decision block where a test is made to determine if a user clicked on a uniform resource link URL . If the user clicked on a URL at function block the MIME type of the media stream associated with the URL is described. As noted above MIME is an acronym for Multipurpose Internet Mail Extensions. As is known to those skilled in the Internet art MIME types are extensions of the SMTP Simple Mail Transfer Protocol that permit data such as video sound and binary files to be transmitted without having to be translated into ASCII format first. MIME types describe the contents of the document. MIME is part of HTTP and both Web browsers and HTTP servers use MIME to interpret e mail files they send and receive. How MIME types are decoded is illustrated in and described below. After the MIME type is decoded at decision block a test is made to determine if the identified MIME type is playable by the media player. If the universal media player is not able to play the MIME type associated with the media stream a default media player capable of playing the media is enabled. See block . As is conventional if the default media player is not resident on the computer a download window may open to allow the user to download a copy of the default media player. When use of the default media player ends by for example a user activating a stop button the media stream ending etc. program control passes to end block . If the MIME type is playable at function block the media stream is cued and control is passed to decision block . As before when the media stream is ready at function block the universal media player is activated to play the media stream. When the media stream ends a user activates a stop button or some other termination action occurs program control passes to end block .

If the user did not click on an URL program control passes to decision block where a test is performed to determine if the system detected a download of a media stream. This could occur for example by the system opening a window having an instance of a player embedded in the window. If the system detects a media stream download at function block the MIME type associated with the media stream is decoded. Then as before at decision block a test is performed to determine if the identified MIME type is playable by the media player. If so also as before at function block the media stream is cued program control is passed to decision block and the media stream is played block . If the universal media player is not able to play the MIME type associated with the media stream then as before function block a default media player is enabled. Program control passes to end block when media stream processing ends.

If the COM object is ready before time out occurs program control is passed to function block where an idle universal media player is started with the media stream. Next control is passed to a decision block where a test is made to determine if the started idle universal media player is remotely synchronized. If the idle universal media player is remotely synchronized program control is passed to function block where a remote navigation event is sent. Next control is passed to a decision block where a test is made to determine if both media streams are ready. When both media streams are ready program control is passed to function block and processing continues in the manner described below. If both media streams are not ready the test performed by decision block is repeated.

If the idle player is not remotely synchronized block a test is made at decision block to determine if the media stream is ready. If the media stream is ready program control is passed to function block and processing continues in the manner described below. If the media stream is not ready the test performed by decision block is repeated.

When the media stream or streams are ready block or block a test is performed at decision block to determine if anything is currently playing. If the media stream is ready and nothing is currently playing program control is passed to function block where the interface of the idle universal media player is shown i.e. displayed. If the media stream is ready and a media stream is playing on a media player program control is passed to function block where the current media player is stopped and hidden. Program control then passes to function block .

Next program control is passed to decision block where a test is performed to determine if the media stream is stored. If the media stream is stored program control is passed to function block where the media stream is served up. Program control then passes to function block where a media stream ready flag is set to true. The media stream could be stored at a server site or local disk drive. If the media stream is not stored program control is passed directly to function block where the media stream ready flag is set to true. After the media stream ready flag is set to true program control is passed to end block and processing ends.

If the user has selected the play control button program control is passed to function block where the universal media player interface is activated. Logic for activating the media player interface is illustrated in and described below. Processing continues to function block where the media stream is played by the universal media player. As discussed above and shown in when the universal media player is activated a user has various controls available which are depicted by several decision blocks in . The decision blocks respond to user selected media player interface controls such as minimize maximize media player interface volume stop previous next and next. In addition to these decision blocks additional decision blocks determine if remote media player interface events such as pause stop previous and next have been received.

At decision block a test is performed to determine if the user selected minimize or maximize. If the user has selected minimize or maximize program control passes to function block where a minimize or maximize player flag is set to true which results in a drop down menu being displayed to allow a user to increase or decrease the size of the universal media player interface as illustrated in and described below. Then program control returns to block . If the user did not select minimize or maximize program control returns immediately to block .

At decision block a test is performed to determine if a user selected pause control. If the user selected pause control program control passes to function block where a remote pause event is sent if the universal media player is synchronized with another player and then to function block where a pause flag is set to true. Setting the pause flag to true causes the operation of the universal media player to pause. Program control then cycles to block . If the user has not selected the pause control program control immediately cycles to block .

At decision block a test is performed to determine if the media player has received a remote pause event signal. If so program control is passed to function block where the pause flag is set to true. Then program control returns to block . If no remote pause event is received program control returns immediately to block .

At decision block a test is performed to determine if the user has selected volume control. If so program control passes to function block where a change volume flag is set to true. The universal media player then responds to volume control inputs received from the user in the manner described below. Then program control returns to block . If the user has not selected volume control program control returns immediately to block .

At decision block a test is performed to determine if the user has selected stop control. If the user has selected stop control program control passes to function block where a remote stop event message is sent and then to function block where the universal media player interface is deactivated. Program control then cycles to stop block . If the user has not selected stop control program control returns immediately to block .

At decision block a test is made to determine if the universal media player has received a remote stop event signal. If so control is passed to function block where the universal media player interface is deactivated. Processing then cycles to stop block . Logic illustrating the deactivation of the embedded universal media player interface is illustrated in and described below.

Turning now to at decision block a test is performed to determine if the user has selected next control. If so program control passes to function block where a remote next event signal is sent and then to function block where a next flag is set to true. Setting the next flag to true causes the current media item to end and the next media item to start such as the next song on a CD. Similar action which is not described here occurs when a user selects a fast forward control. Then program control returns to block . If the user has not selected next control program control returns immediately to block .

At decision block a test is made to determine if the universal media player has received a remote next event signal. If so program control is passed to function block where the next flag is set to true. Then program control returns to block . If the universal media player has not received a remote next event signal control returns immediately to block .

At decision block a test is performed to determine if the user has selected previous control. If so program control passes to function block where a remote previous event signal is sent and then to function block where a previous flag is set to true. Setting the previous flag to true causes the current media item to end and the previous media item to start such as the previous song on a CD. Similar action which is not described here occurs when the user selects a rewind control. Then program control returns to block . If the user has not selected previous control program control returns immediately to block .

At decision block a test is made to determine if the universal media player received a remote previous event signal. If so control is passed to function block where the previous flag is set to true. Then program control returns to block . If the universal media player has not received a remote signal program control returns immediately to block .

If the media stream is a video file program control is passed to function block causing an opening label to be displayed on a view media player menu. Program control then passes to function block causing min max controls to be displayed and then to function block causing a child window to be added to the universal media player interface. Program control then cycles to function block where as noted above an illuminated progress media presentation indicator is displayed. Control then passes to function block where a music or other as appropriate label identifier is displayed on the menu of the universal media player interface.

Control is next passed through several decision blocks which determine if the user has performed selections that cause selected control button flags associated with the universal media player interface such as volume previous next minimize maximize pause and stop to be set true in the manner previously described.

At decision block a test is performed to determine if the user has selected change volume. If so program control passes to function block where the program responds to the activated volume control on the universal media player interface. Then control cycles to function block where the change volume flag is set to false. Control then shifts to end block where processing ends.

If the test at decision block is negative the process cycles to decision block where a test is performed to determine if the user selected previous. If so program control is passed to function block where the universal media player selects the previous media item. Then processing shifts to function block where the previous flag is set to false. Next processing cycles to end block where processing ends. As noted above rewind while not shown functions in a like manner to previous. 

If the test at decision block is negative the program control cycles to decision block when a test is performed to determine if the user selected next. See . If so program control is passed to function block where the universal media player selects the next media item. Then the process shifts to function block where the next flag is set to false. Processing then shifts to block where processing ends. As also noted above fast forward while not shown functions in a like manner to previous. 

If the test at decision block is negative program control cycles to decision block where a test is performed to determine if the user selected maximize. If so program control is passed to function block causing the universal media player interface to be displayed in another window larger than before. Program control then cycles to function block where the maximize flag is set to false. Next processing shifts to block where processing ends.

If the test at decision block is negative program control cycles to decision block where a test is performed to determine if the user has selected minimize. If so program control is passed to function block causing the universal media player interface to return to a docked size and location described below . Then the process cycles to function block where the minimize flag is set to false. Processing then shifts to end block where processing ends.

If the test at decision block is negative the program control cycles to decision block where a test is performed to determine if the user has selected pause. If so program control is passed to function block causing a still picture of a visual file or stop video output to be displayed. Then the process cycles to function block where the pause flag is set to false. Then processing shifts to end block where processing ends.

The foregoing description of a universal media player will be better understood by considering the foregoing description and in connection with which are copies of screen shots of the interface of an embedded universal media player formed in accordance with this invention.

While a preferred embodiment of the invention has been illustrated and described it is to be understood that various changes can be made therein without departing from the spirit and scope of the invention as defined by the appended claims. For example the sequence and nature of the testing of the various control functions should be taken as exemplary not limiting. Hence it is to be understood that the invention can be practiced otherwise than as specifically described herein.

