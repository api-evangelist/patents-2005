---

title: Model for communication between manufacturing and enterprise levels
abstract: A device for communicating with low level controllers and sensors located on the production floor of an enterprise directly from the top level of the enterprise. The device comprises a controller which interfaces with programmable logic controllers (PLCs) via the backplane into which the PLCs are plugged. Users are able to define triggers that specify the circumstances under which data points within the PLCs are transported to the enterprise level where they may be stored in a database or sent directly to enterprise application via one of a number of possible transfer protocols. The invention also includes a software client which allows users to set up transfer triggers and view data points on the PLCs in real time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904181&OS=07904181&RS=07904181
owner: ILS Technology LLC
number: 07904181
owner_city: Boca Raton
owner_country: US
publication_date: 20050601
---
This application claims the benefit of U.S. Provisional Application Ser. No. 60 575 362 filed Jun. 1 2004.

It is common in manufacturing facilities to find automated processes controlled by low level automation and process control and monitoring systems. Low level automation systems may include for example dedicated robotic devices or other automated systems controlled or monitored by programmable logic controllers PLC s . Various sensing devices and instrumentation may also be used to monitor the processes such as photo eyes barcode readers and temperature sensors. To manage the plethora of complex manufacturing and assembly systems used today many enterprises use a multi tiered architecture such as the prior art example shown in . A conventional multi tiered architecture may include enterprise level business planning systems enterprise resource planning or ERP operations level manufacturing execution systems or MES mid level process optimization systems e.g. human machine interface HMI supervisory control and data acquisition SCADA viewable plant floor status data collection for upstream reporting and low level process automation or controls systems including sensors or other instrumentation .

Many customers may find that the number of systems necessary to implement the mid level control systems makes installation and maintenance too difficult. Mid level control systems are often either too complex for example mini manufacturing resource planning MRP systems for scheduling or too simple and limited in functionality for example SCADA HMI data status only. Also there is typically a division of responsibility for standard computer information technology IT equipment between an IT support group and a plant floor support group.

It is often desirable to have the ability at ERP level to have direct access to information currently available only on the plant floor for example sensor readings or number of units produced. The major roadblock in attaining direct connection between the enterprise level systems and the plant floor devices has been non standard communication protocols inherent in devices used on the plant floor. The standard communication mechanisms at the enterprise level e.g. message queues are different from the standard communication mechanisms at the low level manufacturing device levels e.g. DeviceNet and other proprietary protocols . Additionally the number of layers between ERP level and controls and sensors and respectively tends to make direct communication between those levels difficult.

Therefore it would be desirable to have a means of direct communication between low level control and sensing levels and and the enterprise level both for the acquisition of data direct from the manufacturing floor and the ability to control manufacturing processes directly.

The present invention provides a means for capturing data and notifying individuals of events that take place on the plant floor as well as providing the ability to control or modify the manufacturing processes directly. The individuals being notified are typically at the enterprise level of an organization. To allow the acquisition of data the following capabilities must be present. First the individuals at enterprise level must have the ability to identify the data in which they are interested. Second the individuals at enterprise level need to be able to identify the circumstances under which they wish to receive updates of the data. Lastly the data needs to be transported from the plant floor to a specific place at enterprise level most likely a database or enterprise level application. These steps are shown in . In box the user must select the data to be sent from the low level to the enterprise level. In box the user defines when or under what conditions the data is to be sent. Finally in box the user specifies the destination of the data.

The high level view of the system of the present invention is shown in . The heart of the system is enterprise communication controller which is a functional micro computer which in the preferred embodiment plugs into the same backplane as the PLC s which are on the plant floor controlling the manufacturing process and gathering data via sensors. Enterprise communication controller communicates with the PLC s via backplane into which the PLC s are inserted and therefore must speak the native protocol of whichever manufacturer s PLC s are currently being monitored. Enterprise communication controller will run a real time operating system such as for example Windows CE VX Works QNX or embedded MontaVista Linux and will have software components installed that facilitate the selection and transport of the data from the PLC s to the enterprise level as well as having the ability to read and write data to and from PLCs. Enterprise communication controller will also be linked to the higher levels of the organization such as enterprise level and workbench client via standard Ethernet protocols. Workbench is a software component that executes at a client location typically on a desktop within the intranet or remotely across any network and is used to set up the software component of enterprise communication controller . Workbench enables the user to identify and name the data in which the user is interested the events which trigger the transport of the data from enterprise communication controller to enterprise level and the destination of the data within enterprise level such as databases applications . Enterprise level generally consists of the business applications and databases normally used by the company for management of the organization. A specific piece of data may for instance flow directly from enterprise communication controller to a particular database at enterprise level or to an application running at the enterprise level via a variety of network protocols.

The model of the present invention is discussed in detail below. While a specific exemplary embodiment is discussed it should be understood that this is done for illustration purposes only. A person of ordinary skill in the relevant art will recognize that other components and configurations can be used without departing from the spirit and scope of the invention.

An exemplary embodiment of the present invention utilizes a two tiered architecture to facilitate communications between enterprise level and the plant floor. This configuration may be used in lieu of or in addition to typical prior art multi tiered architectures of the type shown in .

Enterprise communication controller is the heart of the invention is connected with one or more existing programmable logic controllers PLC s and provides connectivity between the PLC device and upstream enterprise systems such as databases and applications. In the exemplary embodiment the present invention provides the ability to have information such as for example inventory levels product completion numbers and product rework or fault numbers directly available to enterprise level systems . The present invention provides a tightly coupled highly integrated modular component based mechanism to provide direct information to the enterprise from the control domain via a combination of a hardware component and a software module for interface to the upper level enterprise systems .

Enterprise communication controller can also accept information from enterprise level to update the condition of any one of the PLCs with which it is connected. This write back feature can be used to make changes to the production activity based on input from enterprise level .

Enterprise communication controller can also retrieve data from the enterprise Level and place it on the PLC Controller for use in production. This information can be initiated by a change in state on enterprise communication controller and be used to gather recipes for use in production.

In the exemplary embodiment of the present invention the user is able to configure the system to move data from the plant floor to enterprise level as can be seen in . The user at block selects the data to be gathered defines an event upon which the data is sent at block and defines the location where the data should be sent at block . The actions described in blocks and of are implemented in workbench component shown in utilizing the concept of projects as shown in .

A project is a group of triggers which define events which cause certain pieces of data named with tags to be sent to enterprise level as shown in . Trigger can be viewed as a predefined response to an event that takes place on the factory floor. When the event occurs the response is configured to initiate an action such as writing or updating a row of data to a database table putting a message onto a message queue or sending an e mail. Events which cause a trigger to execute are either predefined conditions data triggers or the receipt of an unsolicited message from a PLC logic triggers .

Tags are merely ways of identifying certain data points within a PLC in a more friendly way for example production count instead of data point on PLC .

Data triggers are triggers which are executed as the result of a condition involving certain data points which are being read from a PLC. For example a data trigger could execute either periodically at a set frequency at a scheduled time or as the result of a change in certain data points for example if a certain data point changes value or is determined to be greater less than or equal to a certain value.

A logic trigger occurs as a result of the receipt of an unsolicited message from a PLC s ladder logic via backplane . For example a condition occurs which the PLC ladder logic determines needs to be communicated and handled outside of the PLC. For example a temperature sensor on a production line senses a temperature that exceeds a certain level indicating a dangerous condition that may required outside action.

In addition to the conditions under which a trigger executes the trigger also provides several other pieces of information among these are 1 the content of the notification known as the trigger payload that is to be generated when the condition occurs which may consist of multiple data point values messages and macro values 2 the format in which to send the message such as ASCII XML or database insert update 3 the method by which the data is to be propagated for example DB2 Oracle Microsoft SQL IBM Websphere MQ message queues JMS TCP UDP or e mail.

Enterprise communication controller is a component which preferably plugs into the same backplane into which PLC s are plugged. Therefore enterprise communication controller has the ability to communicate with the PLC s via backplane . Enterprise communication controller consists of a standard multi purpose computer having an operating system and various software components of the present invention installed thereon. Preferably enterprise communication controller will run either a version of a real time operations system such as VX Works QNX MontaVista Linux or the Windows CE operating system. Enterprise communication controller will also be equipped with a specialized connector capable of plugging into backplane . This connector will of necessity be configured according to the type of PLC to which enterprise communication controller is being interfaced. Naturally different manufacturer s PLCs will have differently configured backplanes . In addition there is a driver as shown in which provides an application programming interface to the software components of the present invention to allow direct communication with PLC via backplane and in particular provides enterprise communication controller with the ability to read specific data points from PLCs and write new values into specific data points within PLC s . As with the physical connector backplane API will be customized depending upon the manufacturer of the PLCs.

Client is a computer running at some level within the organization or remotely across any network such as the Internet. This computer runs software workbench which is a user interface that allows users of the system to define projects name data points with tags and add triggers to projects and the conditions under which triggers will be executed. This information is communicated to enterprise communication controller in a process which will be described later.

Enterprise communication controller is equipped with special software components including scanner portion and transaction server component having various functional components therein. Note that although the functional components of the present invention have been divided up as described a person of skill in the software arts will realize that any implementation of the functions described could result in an architecture that looks different but which provides the same functionality as the particular embodiment described and that such variations are intended to be with the scope of the invention.

Scanner component is generally responsible for communicating with workbench for tracking tags and triggers for determining when trigger events have occurred and for communicating with PLCs .

Tag scanner is the component that knows the names or tags of the various data points on the PLC s and which is capable of retrieving the particular data from the PLC s or writing particular data to the PLC s via backplane API .

Trigger scanner is a component that determines when it is time to execute various triggers. For example trigger scanner may query tag scanner to determine if a particular tag has satisfied some logic condition such as exceeding a pre determined value and if so determines the appropriate action to be taken in response to trigger for example sending a message to a database within enterprise server . Trigger scanner is also responsible for either periodically checking or subscribing to changes in the values of certain tags and taking the appropriate actions.

Component proxy within scanner is the component which interfaces with workbench receiving messages therefrom and deciding where to route those messages. For example some messages coming from workbench will need to be passed via proxy directly to trigger scanner such as commands for the creation enabling stopping and deleting a of a trigger . In addition some commands which pass from the workbench through proxy server will need to be sent to dispatcher within transaction component . Such commands will be discussed later.

Time sync manager within scanner is responsible for maintaining synchronization between all clocks within the system including the option to maintain clocks which are internal to PLC s . The time sync manager will synchronize the times within the PLC s and within enterprise communication controller either via reference to an external master clock or via a clock internal to enterprise communication controller . The preferred time reference can be specified in the configuration section of workbench . The goal of the time sync manager is to synchronize all portions of the software within enterprise communication controller with any messages coming from the plant floor via the PLC s which may have time stamps contained therein.

Log manager is a component that logs all activity that happens within controller and keeps this information. in logs. In the preferred embodiment log manager stores information in two separate logs the first being for user activity and the second being for exception activity Log Manager can also be configured to report via e mail at periodic intervals or critical events. For example if an exception occurs e.g. enterprise communication controller attempts to communicate with enterprise server and is unable to do so there will be an entry in an exception log which is generated by log manager . In addition the creation of projects via workbench and their related triggers and the starting and stopping of projects is also maintained in an event log via log manager . Log manager is capable of creating and maintaining a complete audit trail.

User manager is responsible for the creation of users and their authentication. Various users logged into workbench are allowed to do various tasks depending upon their privilege level. For example a particular user may not be allowed to create triggers but may be able to run already defined projects and view the results thereof. The user manager is able to authenticate various levels of privilege. There are two models for user management. In one the user privilege tables are maintained on enterprise communication controller . In the alternate model user manager may be integrated to an enterprise level user management system such as a central user privilege list or central authentication system such as LDAP or Kerberos which would allow a single location for user management within the enterprise. Levels of privilege would stored in the centralized enterprise level system and used by the local user manager .

In the current embodiment of the invention all components within scanner in run in a single process on enterprise communication controller . Likewise transaction component is a separate process and all components within transaction component may run in a single process separate from scanner process . Scanner and transaction component are able to communicate with each other via standard mechanisms provided by the operating system for inter process communications. However alternative architectures where portions may run in separate processes are acceptable as shown in .

Transaction component is generally responsible for maintaining various information on non volatile storage local to enterprise communication controller and for sending and receiving message to and from enterprise server .

Dispatcher within transaction component receives messages from processes at the enterprise level from the workbench or from scanner proxy and determines where within transaction component those messages need to be sent. In that sense it is very much like scanner proxy within scanner . For example if trigger scanner within scanner determines that a message needs to be written to a database a message will be sent to dispatcher via scanner proxy and dispatcher will route the request to database interface which will eventually update a database on enterprise server and respond via dispatcher the success or failure of that operation. Dispatcher will dispatch messages to various other components within transaction component depending upon 1 where the message is to be sent and 2 how the message is to be sent. For example if a message generated within scanner is to be sent to an MS SQL database on enterprise server dispatcher is able to determine where to send the message to accomplish this task.

Persistence manager within transaction component is responsible for maintaining all information needed to run the system including all defined projects all triggers all transports and anything else that needs to be stored should the system need to be restarted. This information is stored in a file on an internal disk or other non volatile storage within controller and is utilized mainly in the case where controller loses power and needs to be restored. The last known current state of all software components on controller is read from file thereby allowing controller to continue when power has been restored.

Database interface is part of the transaction transport mechanism for transporting data from enterprise communication controller to enterprise level . Database interface is responsible for storing information read from PLC s into databases on enterprise level via any one of a number of database communications protocols. The databases may be any form of databases such as DB2 Oracle or MS SQL databases. Database interface may be a single component or may be multiple components each responsible for a particular type of database.

Message queuing interface SMTP interface and TCP interface are the part of transaction component which is responsible for transporting data and messages from enterprise communication controller to enterprise level . These interfaces can be used to move data to applications at enterprise level that may accept data through various ways such as by receiving information from a message queue parsing the contents of an e mail sent to a particular address through SMTP or reading data from a TCP IP socket. Message queuing could be implemented via a variety of tools such as Websphere Message Queues Java Message Queues JBOSS JMS message queues or Weblogic JMS message queues.

Store and forward component is a component that will store messages intended for applications or databases at enterprise level in the case that communications are unavailable between enterprise communication controller and enterprise level . The messages are stored in store and forward database located on a local hard disk or other non volatile storage within enterprise communication controller . The store and forward component will forward any messages stored within store and forward database to enterprise level when communications have been reestablished. These messages will be sent in sequence in which they were initially received.

Data triggers and logic triggers are shown in respectively. To explain the data trigger in we will assume that a project has already been created and a trigger defined. For purposes of explaining the data trigger assume that we wish to trigger a message to the enterprise server when a particular data point on a PLC has changed. For example a user at the enterprise level wishes to be notified when a data point representing a production count is incremented on one of PLCs . In this case tag scanner will poll the particular data point which represents the production count in PLC at a predetermined rate for example once every second. Therefore a message is sent from tag scanner to the backplane API every second to retrieve the data and the data is propagated to trigger scanner via arrow . Trigger scanner evaluates the data to see if the value has changed between the current reading of the data and the previous reading of the data and if so trigger scanner takes the data packages it in a message and sends it to dispatcher via arrow . The message sent from trigger scanner to dispatcher contains information regarding the transport that is where the data is to be sent within enterprise level and how the data is to be sent. Dispatcher determines where the message needs to be routed to be handled properly. For instance if the message is to be sent via message queues dispatcher will send a message via arrow to message queue handler which will send the message via arrow to message queue manager within enterprise level . Message queue handler within enterprise level then sends a message back via arrow to message queue manager within transaction component saying that the message has been received. This information is sent via arrow to dispatcher and the status message is sent to scanner proxy via arrow . Note that should the acknowledgement sent via arrow not be received dispatcher would eventually cause the message to be stored in store and forward database via store and forward component for later transmission to enterprise server . Additionally arrow which goes to scanner proxy may cause a log message to be written via log manager .

With reference now to shows the flow of information which occurs as a result of a logic trigger which is a trigger generated within the ladder logic of a PLC. The flow of the messages in is very similar to that of with the exception of arrows and . In arrow indicates a message coming directly from a PLC via backplane API . This information is passed to tag scanner and trigger scanner to determine what should happen as a result of the reception of the message from PLC . The message for example could be an error condition detected by the PLC or it could be for example a message which is sent as a result of a change in a particular data point on PLC . In any case the ladder logic of PLC will determine when such messages are to be sent. In other words PLC decides that some entity at the enterprise level needs to know about the data which it is sending. From this point on the execution and propagation of the message through scanner and transaction component to enterprise server is identical to that described for the data trigger in except that when the status message is received by scanner proxy via arrow the message is sent to PLC via arrow and backplane API to let PLC know that the data was successfully transmitted to the enterprise level. In the event that PLC fails to get the confirmation of a successful transmission after a certain period of time PLC will presumably have some logic that will be executed to deal with the failure. In such a case PLC would likely retry sending the data or setting an alarm saying that the data transfer has failed.

Workbench component shown in is the user s workstation and interface to enterprise communication controller . Typically workbench will run on a user level computer at the enterprise level of the organization. However because workbench communicates with enterprise communication controller via standard internet protocols workbench could be located virtually on any computer within the organization or external thereto. As discussed previously one function of workbench is to allow users to create projects . The workbench allows the building of projects and the saving of the projects to enterprise communication controller where they will be added to file by persistence manager . Workbench also provides a facility to start stop export and import projects . Workbench can interact with multiple enterprise communication controllers during the same session to perform operations such as listed above in each enterprise communication controller .

Projects consist of a group of triggers defining the circumstances under which data is transported from enterprise communication controller to enterprise server . Triggers can contain tags messages macros and expressions . Tags define data type triggers while messages define logic type triggers. The macro facility defined within triggers allows the trigger to perform simple pre defined manipulations of data. The expression parser allows the user to manipulate data which may be from either the PLC or from enterprise server . For example the user may create an expression to change the value of a number such as changing a temperature from Celsius to Fahrenheit degrees prior to its transport to the enterprise server . Also included within triggers is knowledge of the transport which will be used to transport the data from enterprise communication controller to enterprise server .

Workbench can be used to define transports . Transports are the mechanism wherein the user is able to provide destination and format information for the data as it is sent from enterprise communication controller to enterprise server . Transports can be any one of a number of types including TCP message queues database for relational databases and SMTP e mail . The type of transport created is dependent upon the applications and or databases to which the user wishes to send the data. To communicate with an application running at enterprise server the application must be able to understand one of the protocols and be able to accept messages via that protocol. Data can typically be sent to a specific location i.e. an application on the enterprise intranet to a location on the internet or can be stored within enterprise server in a database such as a DB2 Microsoft SQL or Oracle database. The format of the data could be any one of a number of formats including XML ASCII or a database insert update.

Workbench is also allows the user to view tags returned by enterprise communication controller . Tag are named data points within the PLC s ladder logic program which represent memory locations within the PLC. Workbench is able to provide a tree view of the tags from which the current values of the data points in the PLC s will be able to be read.

Log viewer within workbench provides a means for viewing system events and exception error logs. Log viewer is a tool to allow users to view the logs which have been created by log manager on enterprise communication controller . Typically these logs would include an audit log and an exceptions log which can be used as a diagnostic tool to trace and interpret user activity errors and system messages. Typically activity taking place on PLC is logged by date time activity type and or user.

Workbench is also the center for the administration of all of enterprise communication controllers to which it is able to connect. The administration module provides means for performing administrative functions such as device administration configuring the network setting of enterprise communication controllers including the settings of IP address defining users and their privilege levels providing a license management function for the workbench software which may be needed for various transport protocols and viewing the status via module status of all PLC s which were installed in the same chassis with enterprise communication controller . The administration function may also provide a means for providing an external time synchronization signal to enterprise communication controller and to all PLCs to which it is connected. The time management function of the workbench allows the users to set the current time set the synchronization settings and set the synchronization servers that will serve as the external time reference for the overall system. The synchronization settings include the frequency of updates and whether or not controllers will act as clients to the external time reference or will act as both clients and servers to other enterprise communication controllers . It is also possible to set the synchronization method or protocol such as for example simple network time protocol SNTP user data protocol UDP TCP protocol or some other commonly known protocol used to synchronize time. The administration function also provides a means to define exception notification lists based on groups of email addresses.

When workbench is started it has the capability of searching the network for available enterprise communication controllers which may be connected to the internet or intranet. The scope of the search of workbench for available enterprise communication controllers may be limited by specifying a IP subnet address.

There are several alternate embodiments of the invention. shows an alternate embodiment in which enterprise communication controller is in direct communication with a PLC via backplane API . This configuration may be necessary where enterprise communication controller has a need to communicate with additional devices such as a Radio Frequency Identification RFID reader in which case BP API would be different such as to allow communication with the external device. This configuration will also require multiple tag scanners and to interface with various devices PLC and RFID reader .

In certain customer configurations it may be necessary for a single enterprise communication controller to talk to other PLCs with no enterprise communication controller option. This is done with communication to the PLC communication module instead of using the backplane API. There are two versions that this can take as shown in . In enterprise communication controller is able to interface with PLC in the manner described with respect to the primary embodiment of the invention. To enable communication with an additional PLC PLC is coupled to PLC via the PLC communications port . Enterprise communication controller is then also to interface with PLC via this connection. The connections between the communications ports of PLC and may be for example a serial communication via an RS2332 connection or TCP IP. shows yet another configuration in which enterprise communication controller is configured with a custom device driver as shown in and communicated with additional PLC via its PLC communications port .

In certain plant floor environments there may be a need for the enterprise system to not only gather data from the floor but also to send information to the floor. There could be recipe information that is required at the plant floor or production requests could be altered based on sales. There are two ways to initiate this data transfer from the enterprise level to the PLC level PLC request or enterprise push.

In there is an unsolicited request from the PLC to retrieve data or if data changes that would require retrieval of data trigger scanner receives the request for data via arrow . The request is sent to dispatcher via arrow . Dispatcher selects the appropriate transport handler to fulfill the request and forwards the information. In this example the requested information may reside in a database so the request is sent to database interface via arrow . Database interface requests the appropriate information from enterprise database server via arrow and receives the information via arrow . The information is sent back to dispatcher via arrow and then to proxy via arrow . It is then provided to backplane API via arrow for transport to PLC . The information can now be used by PLC for the control process.

There is also a host initiated write back shown in that works the same as the PLC data request. In this case an entity at enterprise level would like to make a change to something on the plant floor. This is done via a message initiated at enterprise level being propagated to PLC and writes of data to one or more tags. The flow of data is identical to that shown in with the exception that the initial request comes from enterprise server and is sent via message queue manager to transaction server .

In an alternate embodiment of the invention show in an enterprise communications controller may not be available for a particular type of PLC or the PLC of interest may not have the capability to communicate via its backplane. In this case there is an option to modify the primary embodiment of the invention to run on an external PC or universal enterprise communications controller UECC such that communications with PLC happen through means other than backplane API . In this case a specialized device driver replaces the function of backplane API . All other capabilities of this solution are maintained. Device driver can support one of several common plant floor communications mechanisms including serial communication TCP IP Data Highway and Profibus. Typically these connections are made via an Ethernet or RS232 connection between the UECC and PLC communications module via arrow . However some PLCs may require connections to their PLC controller via arrow . In this embodiment of the invention UECC may be in communication with multiple PLCs at any given time.

An extension of the described architecture is intended to include a logic composer as shown in . Logic composer allows the end user to construct a work flow or logic flow based on a set of function blocks which provide a rich set of functions to the end user. These functions may include for example test clauses manipulate data send and receive from any transport loop through logic areas request information from enterprise or PLC levels and other workflow items. Logic composer would directly impact each of the existing components and would orchestrate the major activities in the box. It provides a general business logic flow in addition to the other functions already provided. The flow of logic would be constructed at the client and then sent to logic server via arrow for storage and implementation. The logic performance engine portion of logic server will 1 store the definition in logic storage component via arrow 2 build a list of affected PLC data tags and store that in reference table via arrow and 3 subscribe to the required data via the pub sub client and pub sub server via arrows and respectively. As the system runs logic performance engine will receive data changes via arrows and and then will perform the required business logic or data manipulation. The resulting information can be sent to the required user via one of several options. The updated derived information can be sent back to PLC by scanner via arrow the updated derived information can be sent to enterprise server by transaction server via arrow or the updated derived information can be displayed to the end user by display server via arrow .

The architecture of the present invention may also include a display subsystem would be comprised of three major components as shown in runtime viewer to view data workbench display composer to define the screens and runtime display server to support screen data updates and persist the display definitions. In one embodiment of the invention workbench allows the user to define operations and data message exchange between the PLC and enterprise server . Users also have a need to view data from various clients to be able to define the screens to meet their viewing needs. The display subsystem is a robust tool that allows these definitions to happen within enterprise communications controller and to present this data to any client.

Display composer is an extension to workbench which allows the definition of a screen in which data is to be displayed. This screen may include fill bars text fields buttons warning indicators or other display objects which are linked to data tags in PLC . Display composer sends screen definition information to the request handler portion of display server in via arrow . Request handler stores the display definition locally in display storage or references a display which may be stored on a separate central server. Request handler also parses the contents of the display definition and creates a list of PLC data tags which are required to be known to the display and stores this list in reference table . Request handler uses the list of PLC data tags to make requests via arrow to pub sub client to the PLC to be notified of changes in data. Pub sub client registers these requests via arrow with the pub sub server which is an enhancement to scanner of the primary embodiment. As tags are updated in the PLC based on plant floor changes pub sub server will send changes in status to request handler via pub sub client arrows and . Display information will then be updated and sent to the appropriate viewer via arrow . Viewer application in client may be a proprietary viewer or may be a general commercial Web Browser. Depending on the client the protocol of arrow may be either a proprietary protocol or standard HTTP or HTTPS.

An extension of the described architecture is intended to include an expression parser shown in which allows the user to do additional manipulation of the data before sending it to enterprise level . The current architecture allows the writing of data points or tags defined on the device to various output sources. The association of a data point to an output source is made while defining the payload of a trigger. Along with writing these raw data point values there are times where it may be desirable to write a calculated value to an output source. The input into this calculation would be made up of data point values read from the device along with constant values defined by the user. This enhancement would allow the user to define mathematical equations consisting of data point values and constant values as part of the trigger payload. The evaluation of this equation occurs on the device and would use the data point values read at the time the corresponding trigger is fired. This enhancement broadens the data write capabilities to include not only tag values and constant values but calculated values as well.

Workbench using expression composer allows the user to create a mathematical equation as a data source in the trigger payload. In addition to being able to drag and drop tag values into the payload definition the user can also drag and drop predefined macro values timestamps and user defined macro values constants into the trigger payload. Expression composer provides the user the ability to drag formulas into the trigger payload as well. Dropping a formula macro into the trigger payload initiates expression composer which aids the user in the definition of a mathematical expression that is evaluated at runtime on the device. The editor allows the user to enter constant numeric values along with mathematical operands from an interface resembling a standard calculator. Additionally the editor allows the user to drag and drop numeric data points into the equation.

The preferred embodiment of the invention has been described herein however as should be understood my one of ordinary skill in the art the scope of the invention is intended to included to equivalents and other implementations which may perform similar functions. The scope of the invention is defined in the claims which follow.

