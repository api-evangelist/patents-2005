---

title: Code evaluation of fixed-point math in the presence of customizable fixed-point typing rules
abstract: Systems and methods are provided for using partial evaluation techniques to efficiently generate code for a fixed-point operation. The present invention uses partial evaluation techniques to evaluate a fixed-point rule of a fixed-point operation. The fixed-point rules, which may be customized by a user, determine the data type of the result or output of the operation. Although the values of all the inputs may not be known at code generation time, the present invention determines via static or known information associated with the input the portion of the fixed-point rule known at code generation time. As such, the present invention can generate more efficient code by generating code representing the static analysis of the inputs and fixed-point typing rules of the fixed-point operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075630&OS=09075630&RS=09075630
owner: The MathWorks, Inc.
number: 09075630
owner_city: Natick
owner_country: US
publication_date: 20051114
---
The present invention generally relates to activation code for fixed point operations using fixed point rules.

Real numbers are any numbers that may be represented as finite or infinite decimals and may be used to measure continuous quantities such as in the physcial sciences. The set of real numbers includes all rational numbers and all irrational numbers. Computers may approximate real numbers with rational numbers using a floating point number or fixed point number representation or notation. In computer hardware a number is stored in a binary word which is a fixed length sequence of binary digits 1 s and 0 s . A data type refers to the way in which data is classified characterized or represented. A binary number may be represented by a fixed point data type or floating point data type. A fixed point number representation is a real data type for a number that has a fixed number of digits after the decimal i.e. the decimal or binary point is fixed. In a floating point data type a real number is represented by an integer or fixed point number multiplied by a base typically a base in computers to some integer power and the decimal point is referred to as floating.

A fixed point data type may be characterized by the word size in bits the binary point and whether it is signed or unsigned. Additionally fixed point data types may be integers fractions or general fixed point numbers. One of the differences between fixed point and floating point data types is the default binary point which is the means by which fixed point numbers are scaled. A fixed point number may be encoded in a computer using a slope bias encoding scheme. For example a real number R may be encoded in a computer using a binary integer or quantized value Q by the following equation R S Q B where S and B are real numbers. S is referred to as the slope and B as the bias. Q is computed by solving the equation and then rounding the result to an integer value. The slope S typically may be a number of the form 2because numbers of this form can be easily manipulated in hardware.

Binary numbers can also be represented as floating point data types. A floating point number in an Institute of Electrical Electronic Engineers IEEE standard representation may approximately be stored as a E Q pair where B is zero. This type of representation is called floating point because E changes or floats depending on the values to be represented. In fixed point representation only the value Q is stored and the values for S and B do not change. As a result fixed point computations more often have overflow or underflow problems.

For both fixed point and floating point data types word sizes are fixed at a set number of bits. However the range of fixed point values may be less than floating point values with the same word size because the decimal point is fixed in the fixed point representation. In order to prevent overflow or unreasonable quantization errors fixed point values are scaled. Fixed point operations can be done with integer math support in a processor. However floating point math typically requires specialized hardware to obtain desired performance. As such fixed point is often used where the cost of hardware is an important consideration. The logic circuits of fixed point hardware are much less complicated than floating point hardware which typically translates into a smaller size with less power consumption. Furthermore fixed point calculations generally use less memory and less processor time to perform.

Because the slope and bias are fixed in fixed point operations programming languages supporting fixed point math may specify what the slope and bias for an output will be when multiple inputs with different slopes and biases are used together. For example what should the slope of X Y be if X has a slope of 2and Y has a slope of 2. Obtaining fixed point results with good precision while avoiding an overflow or underflow condition depends on making the appropriate slope and bias choice. Therefore languages may have rules that specify this behavior. Unfortunately any one set of rules will not be adequate for all applications. Compiling a language with rules that can change poses a technical difficulty when generating code for a processor such as an embedded processor. A goal of a fixed point implementation is to run efficiently on less expensive hardware. However with rules that change the fixed point data type of a result may be difficult to determine.

The present invention provides systems and methods for evaluating a fixed point operation in view of a fixed point rule. The rule may be applied to the fixed point operation to efficiently generate code for the operation. The rule may also be applied to provide an efficient in memory representation of the operation for emulation for example rather than for code generation. The fixed point operation and fixed point rule may be represented by instructions such as instructions generated from a block diagram model. In one aspect the present invention uses partial evaluation techniques to evaluate the fixed point rule of the fixed point operation and generate code representing the fixed point rule and operation based on the partial evaluation. Partial evaluation techniques evaluate and create specialized instructions from a set of instructions such as a program having only a partial set of one or more inputs known at processing or compile time. In a further aspect the present invention uses partial evaluation techniques to evaluate the fixed point data type of a resulting output from the known or static information of one or more inputs of the operation. The present invention uses fixed point rules such as typing rules which may be customized by a user to determine the data type of a result which may be an intermediate result or a resulting output of the fixed point operation. Although the values of input may not be known at code generation time the present invention determines a reduction of the instructions of the operation or the fixed point rule via any information associated with input. As such the present invention can generate more efficient code for a target processor or another representation that is more efficient as determined from the partial evaluation techniques.

In one aspect the present invention is related to a method practiced in a device for evaluation of a fixed point operation having a fixed point rule. The method provides an operation with at least one operand and having a fixed point rule for determining one or more characteristics of a fixed point data type of a fixed point result of the operation. The method also includes determining a portion of the fixed point rule that may be known based on information associated with input to the operation and generating a representation of the fixed point operation that may have a reduction of instructions representing the known portion of the fixed point rule. The reduction of the instructions may include adding changing or deleting an instruction of the operation or the fixed point rule.

In one aspect the method of the present invention generates a representation of the operation as providing the result with the fixed point data type according to the fixed point rule. The known portion of the fixed point rule determined by the present invention may include 1 a determined characteristic of the fixed point data type of the result of the operation 2 a determined path of execution of instructions of the operation or the fixed point rule or 3 a determined value of one or more fixed point typing rule parameters. The fixed point rule may use a parameter representing one or more of the following characteristics of a fixed point data type 1 slope 2 bias 3 fraction length 4 number of bits 5 scaling and 6 signed or unsigned. Additionally the method of the present invention may include configuring the fixed point rule to specify the fixed point data type of the result based on one or more of the following 1 type of operation 2 desired precision 3 overflow condition and 4 underflow condition. The fixed point rule may be specified or configured by a user.

In a further aspect of the present invention the generated representation includes instructions encoded in a programming language different than a programming language of the instructions. The instructions of the operation may include an interpretive or a dynamically typed language. In some embodiments the operation may be provided via a graphical model. The method of the present invention may also include generating the instructions for the operation from the graphical model.

In one aspect the present invention relates to a device readable medium having device readable instructions to execute the steps of the method as described above related to a method for generating a representation for a fixed point operation having a fixed point rule.

In an additional aspect an API is used to provide the fixed point rule. The API may provide the information regarding the operand that is used for determining the known portion of the fixed point rule. The partial evaluation maybe invoked via the API as well.

In a further aspect the present invention relates to transmitting via a transmission medium computer data signals representing device readable instructions to execute the steps of the method as described above related to a method for generating a representation for a fixed point operation having a fixed point rule.

In yet another aspect the present invention is related to a system for generating a representation for a fixed point operation associated with a fixed point rule. The system includes an environment for providing a representation of an operation having at least one fixed point operand. The environment also includes a mechanism to provide a fixed point rule with the operation. The fixed point rule indicates one or more characteristics for specifying a fixed point data type of a result of the operation. The system also includes a partial evaluator for determining a portion of the fixed point rule that may be known based on information associated with input to the operation and a representation generator for generating a representation of the fixed point rule.

The environment of the system of the present invention may include a programming tool or a graphical modeling tool. The operation may be represented by either instructions or a portion of a graphical model. The instructions of the operation may include an interpretive or a dynamically typed language. The generated representation may include a programming language different than the programming language of the instructions. Additionally the instructions may be provided for the operation via a graphical model and the representation generator may generate the representation from the graphical model.

In one aspect the representation generator of the present invention generates a representation to represent the operation as providing the result with the fixed point data type according to the fixed point rule. The known portion of the fixed point rule determined by the present invention may include 1 a determined characteristic of the fixed point data type of the result of the operation 2 a determined path of execution of instructions of the operation or the fixed point rule or 3 a determined value of one or more fixed point typing rule parameters. The fixed point rule may use a parameter representing one or more of the following characteristics of a fixed point data type 1 slope 2 bias 3 fraction length 4 number of bits 5 scaling and 6 signed or unsigned. Additionally the system of the present invention may include the fixed point rule configured to specify the fixed point data type of the result based on one or more of the following 1 type of operation 2 desired precision 3 overflow condition and 4 underflow condition. The system may also include a configuration mechanism for a user to specify the fixed point rule.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

Certain embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not expressly made herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the present invention provides systems and methods for using partial evaluation techniques to evaluate fixed point operations and produce efficient representations of the operations. This may entail generating efficient code for performing the operations or producing efficient in memory representations of the operations for emulation. Partial evaluation techniques evaluate and create specialized instructions from instructions having only a partial set of one or more inputs known at processing or compile time. Partial evaluation may be any type and or form of static analysis. In one aspect the present invention uses partial evaluation techniques to evaluate a fixed point operation and determine the fixed point data type of a result from the known input data types of one or more inputs of the operation such as any operands or any properties provided by or associated with the input. The present invention uses fixed point typing rules which may be customized by a user to determine the data type of the result or output of the operation. Although the values of the operands may not be known at code generation time the present invention determines via any known input data types the resulting data type of an output or result of the fixed point operation. The result may also be an intermediate result of an evaluation of an operand or input to the fixed point operation. By using the techniques of the illustrative embodiment of the present invention more efficient code for a target processor can be generated or more efficient in memory representations may be generated. The present invention can generate code representing the evaluation of the fixed point operation determined from the partial evaluation techniques such as the evaluation of a data type of a result.

The illustrative embodiment will be described solely for illustrative purposes relative to a technical computing and graphical modeling environment provided by the software products from The MathWorks Inc. of Natick Mass. Although the illustrative embodiment will be described relative to a MATLAB and Simulink based application one of ordinary skill in the art will appreciate that the present invention may be applied to other technical computing and or graphical modeling environments such as any environment using software products of LabVIEW or MATRIXx from National Instruments Inc. MSC.Adams from MSC.Software Corporation of Santa Ana Calif. Virtuoso from Cadence of San Jose Calif. Dymola from Dynasim AB of Lund Sweden Rational Rose from IBM of White Plains N.Y. Mathematica from Wolfram Research Inc. of Champaign Ill. Mathcad from Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc.

The computing device may include other I O devices such as a keyboard and a pointing device for example a mouse for receiving input from a user. Optionally the keyboard and the pointing device may be connected to the visual display device . Additionally the computing device may include any type of input device for receiving user input such as a joystick. In other embodiments the computing device may include any type of haptic or tactile feedback device such as a vibration generating mouse or a force feedback device such as a force feedback joystick. Also the computing device may include any type of sound producing I O device such as any suitable sound card. The computing device may include other suitable conventional I O peripherals.

For installing software programs the computing device may support any suitable device readable medium such as a CD ROM DVD ROM floppy disks tape device USB device hard drive or any other suitable device. The computing device may further comprise a storage device such as a hard drive or CD ROM for storing an operating system and other related software. The illustrative embodiment of the present invention of a technical computing and graphical modeling environment may comprise software that is installed via a device readable medium and stored in the storage device . Additionally the operating system and technical computing and graphical modeling environment can be run from a bootable CD such as for example KNOPPIX a bootable CD for GNU Linux.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56kb X.25 broadband connections e.g. ISDN Frame Relay ATM cluster interconnection Myrinet peripheral component interconnections PCI PCI X wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one aspect the present invention is related to a technical computing and graphical modeling environment as illustrated in . In brief overview the illustrative technical computing and graphical modeling environment includes a programming tool a graphical modeling tool and a code building tool . The programming tool provides an environment for the design development testing and execution of executable instructions such as a program. The graphical modeling tool provides an environment for the design development testing simulation and execution of a graphical model such as a block diagram model. The graphical modeling tool may also provide for incorporating or referencing a state diagram model and or executable instructions via the graphical model such as a state diagram model provided via Stateflow from The MathWorks Inc of Natick Mass. The representation building tool may include a code generator to provide for the code generation and building of executable forms of the executable instructions and or graphical model . The representation building tool may alternatively or also include an in memory representation generator that generates an in memory representation of a fixed point operation rather than generating code for the operation. This representation may be used in subsequent emulation of the fixed point operation. For example the in memory representation generator may generate an intermediate representation of the fixed point operation such as an abstract syntax tree that may subsequently be emulated by an interpreter. The programming tool may be in communication with the graphical modeling tool via any suitable type and form of interface. The representation building tool may be in communication with or otherwise have any suitable type and form of interface to the programming tool and or the graphical modeling tool .

The illustrative programming tool of the present invention comprises a design and development environment for creating any type and or form of executable instructions . In an exemplary embodiment and by way of example the programming tool may comprise MATLAB by The MathWorks Inc. of Natick Mass. In the exemplary embodiment MATLAB provides a technical computing environment and high level technical computing programming language for a wide range of uses such as math and computation algorithm development data acquisition modeling simulation and prototyping data analysis exploration and visualization scientific and engineering graphics and application development including graphical user interface building. MATLAB is an interactive system that uses as a data element an array or matrix that does not require dimensioning.

The programming tool of MATLAB includes a development environment for editing and debugging programs and an execution environment for testing and executing programs. MATLAB also includes graphing capabilities for displaying vectors and matrixes as graphs function libraries such as for math and computational algorithms and application programming interfaces APIs for interfacing to external systems or other environments. Additionally the MATLAB programming tool integrates with graphical modeling tools such as Stateflow and Simulink by The MathWorks Inc. of Natick Mass. to model simulate and analyze systems.

In some embodiments the programming tool includes language statements application programming interfaces APIs functions libraries or any other type and of form of executable instructions to perform or provide a fixed point operation math or algorithm such as the fixed point operation illustrated in . In the exemplary embodiment of MATLAB the Fixed Point Toolbox of The MathWorks Inc. provides fixed point data types and arithmetic in MATLAB . The Fixed Point Toolbox can be used to develop algorithms for testing modeling and verifying fixed point implementations such as a design for a fixed point processor. Although the programming tool is generally discussed in view of MATLAB one ordinarily skilled in the art will recognize and appreciate the various forms and types of programming tools and languages that may be used in practicing the operations of the present invention as described herein. For example in a further embodiment the programming tool and executable instructions may be used to develop implement or provide the fixed point operation of the present invention in a functional programming language which is a programming paradigm that treats computation as the evaluation of mathematical functions.

In some embodiments the programming tool or any portions thereof is included in integrated with or is otherwise associated with a graphical modeling tool . The graphical modeling tool of the present invention provides a graphical modeling environment for creating designing simulating testing and verifying a graphical model such as a block diagram model. In an exemplary embodiment the graphical modeling tool includes the graphical modeling environment of Simulink from the MathWorks Inc. of Natick Mass. In the graphical modeling tool configurable and customizable functional blocks are used to create block diagram models that may represent a design or algorithm for a control system a signal processing system a communication system any other time varying or dynamic system or any computational hardware device. In other embodiments the programming tool is separate from the graphical modeling tool but is otherwise interfaced or in communication with the graphical modeling tool .

In one aspect a graphical model may be used to provide a fixed point operation . In some embodiments the graphical model may be used to generate executable instructions for a fixed point operation from which the partial evaluation techniques of the present invention may be applied. In another embodiment the graphical model may include executable instructions such as MATLAB to provide a fixed point operation of the present invention. The executable instructions may be provided via a block function or API of the graphical model . For example the graphical model may include an Embedded MATLAB block that provides an Embedded MATLAB function performing a fixed point operation having one or more fixed point typing rules of the present invention.

The graphical model of the present invention can be of any type and or form. The graphical modeling tool may provide any type of tools libraries and configuration mechanisms to graphically create and or edit a graphical model . In an exemplary embodiment the graphical model may comprise a block diagram model provided by the Simulink environment of The MathWorks Inc. For example the block diagram model may comprise a series of different type of blocks arranged in a desired manner and connected via connection lines to represent signal values traversing the blocks. The graphical model may comprise any type of element to form a graphical model such as connectors blocks or any other graphical form and representation of functionality supported by the graphical modeling tool . One ordinarily skilled in the art will recognize and appreciate the various forms of graphical models and the elements and content thereof.

In other embodiments the graphical modeling tool includes fixed point capabilities to enable the design of graphical models representing design control and signal processing systems that will be implemented using fixed point arithmetic. In the exemplary embodiment of Simulink the graphical modeling tool may include Simulink Fixed Point to provide or enable the fixed point capabilities and design of the graphical model . The graphical modeling tool enables fixed point simulation via the graphical model along with fixed point code generation such as via the code building tool of the present invention. Additionally the graphical modeling tool allows for the control of fixed point data types and scaling of fixed point data in the graphical model . In some embodiments the graphical model may be designed configured or constructed via any combination of graphical and or textual constructs to provide or represent a fixed point operation . In other embodiments the graphical model may include one or more executable instructions to provide a fixed point operation .

In some embodiments the graphical model incorporates references or otherwise uses the executable instructions provided by the programming tool . In an exemplary embodiment MATLAB is integrated and used with Simulink to provide an environment combining technical computing of MATLAB with the graphical modeling of Simulink . The graphical model can include any elements provided for creating a graphical model by the graphical modeling tool such as any elements of a block diagram model known by those ordinarily skilled in the art and can include executable instructions that may be provided by the programming tool . For example the graphical model may comprise a block diagram model with blocks communicating with a workspace environment of the programming tool such as Simulink communicating with a MATLAB workspace.

In one embodiment the graphical modeling tool may be able to simulate or execute the graphical model . For example in the exemplary embodiment of Simulink the graphical modeling tool has an environment that provides for the simulation and debugging of the graphical model . Additionally in other embodiments the graphical modeling tool may generate code of executable instructions representing the graphical model to compile and build for executing on a target hardware platform and or operating system. The graphical modeling tool may generate code of executable instructions for a hardware implementation of a model. As such the graphical model can be processed into an executable form to simulate run or otherwise execute the design functionality and or operations represented by the graphical model . An executable form of the graphical model may be any type and or form of representation of the graphical model that can be simulated run or executed and may comprise any graphical and or textual forms interpreted languages or scripts or programming languages or any combination thereof. In some embodiments the executable form of the graphical model may comprise any type of interpreted language such as MATLAB . In other embodiments the executable form of the graphical model may comprise any type of executable instructions such as scripts libraries code or compiled executables.

The technical computing and graphical modeling environment may include the representation building tool for generating representations and building an executable form of the graphical model and or executable instructions . In some embodiments the representation building tool may be used to generate fixed point code for a fixed point design of a graphical model or fixed point operations provided by executable instructions . The representation building tool may include a code generator such as the automatic code generator of Real Time Workshop from The MathWorks Inc. of Natick Mass. The code generator generates source code from a graphical model and or executable instructions to translate the functionality of the graphical model and or executable instructions into a program that may be designed to run on any processor operating system or otherwise customized to run on a specific target hardware platform such as a fixed point processor. In one embodiment the code generator generates a second set of executable instructions or code for the executable instructions provided via the programming tool . Alternatively the in memory representation generator may be used to generate an in memory representations of fixed point operations rather than generated code. The in memory representation may be used in emulation as described above.

Additionally the representation building tool includes a partial evaluator for performing the partial evaluation techniques of the present invention for example when generating representations such as generated code or in memory representations for fixed point operations . The partial evaluator may comprise software hardware or any combination of software and hardware. In one embodiment the partial evaluator is implemented in C or C programming language and in further embodiments the partial evaluator during the evaluation process or execution may be run via another language such as Embedded MATLAB provided by The MathWorks Inc. of Natick Mass. In some embodiments the partial evaluator is implemented in MATLAB and in other embodiments may use any of the libraries or APIs of MATLAB . As one ordinarily skilled in the art will appreciate the partial evaluator of the present invention may be implemented with any type and or form of language such as a programming language scripting language or otherwise.

Partial evaluation is often a technique to partially evaluate or execute a program when only some of its input data is available or known at the time of applying the technique. That is in one embodiment the partial evaluator takes a program for which some of the inputs are known prior to processing and evaluates or executes as much of the program as possible. In another embodiment the partial evaluator of the present invention determines from the known fixed point data types of input to a fixed point operation any fixed point data types of resulting output of the fixed point operation . In practicing the operations of the present invention as described herein and as those ordinarily skilled in the art will appreciate partial evaluation may be any type and or form of static analysis and in some embodiments may include any analysis that takes use of static properties of the fixed point operation and generates code representing the fixed point operation based on the static properties.

The partial evaluator may take as input either executable instructions and or a graphical model representing a fixed point operation and generate representations of the pre computation of one or more known or static inputs to the fixed point operation at the time of representation generation. The partial evaluator is given as input the executable instructions or graphical model along with any known or static input data such as the fixed point data types of the operands of the fixed point operation . Then the partial evaluator generates representations that when given the remaining input data such as the dynamic data not known at generation will yield the same result that code for the fixed point operation would have produced given both known and unknown inputs. In one embodiment the partial evaluator takes as input the fixed point data types of the input to the fixed point operation and determines the fixed point data type or types of resulting output from the fixed point operation . In some embodiments the partial evaluator uses a fixed point typing rule to determine the fixed point data type of output based on the data types of the input.

The programming tool graphical modeling tool and representation building tool and any portion thereof can comprise an application module service computer program software component library function process task or any other type and or form of executable instruction which is designed to and capable of executing the functionality of the present invention as described herein. Additionally programming tool graphical modeling tool and representation building tool may be configured to and capable of running any of the modules libraries or software components of the MATLAB and or Simulink product family. As such the technical computing and graphical modeling environment may have all or a portion of the software components of MATLAB and or Simulink installed on the computing device or alternatively accessible from another computing device on a network.

In although the programming tool graphical modeling tool and representation building tool are illustrated as separate tools one ordinarily skilled in the art will recognize and appreciate that any combination or all of these tools and may be combined into a single application or otherwise tightly integrated to present a single application in performing the operations of the present invention as described.

The network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet. In one embodiment not shown the network comprises separate networks which may be of the same type or may be of different types. The topology of the network over which the computing devices communicate may be a bus star or ring network topology. The network and network topology may be of any such network or network topology capable of supporting the operations of the present invention described herein.

The computing devices and can connect to the network through a variety of connections including standard telephone lines LAN or WAN links e.g. T1 T3 56 kb X.25 SNA DECNET broadband connections ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET cluster interconnections Myrinet peripheral component interconnections PCI PCI X and wireless connections or some combination of any or all of the above. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g and direct asynchronous connections .

The network and network connections may include any transmission medium between any of the computing devices and such as electrical wiring or cabling fiber optics electromagnetic radiation or via any other form of transmission medium capable of supporting the operations of the present invention described herein. The methods and systems of the present invention may also be embodied in the form of computer data signals program code or any other type of transmission that is transmitted over the transmission medium or via any other form of transmission which may be received loaded into and executed or otherwise processed and used by a computing device and to practice the operations of the present invention as described herein.

Each of the computing devices and may be configured to and capable of running any portion of the technical computing and graphical modeling environment . The technical computing and graphical modeling environment and or any portion thereof such as the programming tool graphical modeling tool and representation building tool can be capable of and configured to operate on the operating system that may be running on any of the computing devices and . Each computing device and can be running the same or different operating systems. Additionally programming tool graphical modeling tool and code building tool can be capable of and configured to operate on and take advantage of different processors of any of the computing devices and . One ordinarily skilled in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices.

Additionally the programming tool graphical modeling tool and or representation building tool may be deployed such that portions of the graphical model and or executable instructions may execute on certain portions of the network and or on certain computing devices or . For example some functionality of the graphical model and or executable instructions may be time critical or sensitive and therefore may be targeted to execute on a computing device or and or a segment or portion of the network with desired performance and or operating characteristics. Other functionality of the graphical model and or executable instructions may not be time sensitive and may be targeted to be deployed to any computing device and available on the network .

In summary the programming tool graphical modeling tool and representation building tool may be deployed across a wide range of different computing devices different operating systems and different processors. Furthermore the programming tool graphical modeling tool and representation building tool may be deployed in various distributed and or client server environments in various network topologies and configurations.

In one aspect the partial evaluation techniques of the present invention are related to inputs having a known or static fixed point data type. For example any operand of the fixed point operation in the executable instructions or graphical model may comprise a fixed point data type. illustrates a fixed point data type and the various properties characteristics or attributes that may be used to define or specify a data type representing a fixed point number. In brief overview a fixed point data type may be defined specified or configured by a bias a fixed exponent fraction length scaling signed unsigned slope slope adjustment factor and word length or number of bits . In one embodiment the fixed point data type may be specified via the MATLAB programming language and additionally may be specified in an object oriented manner such as via the numerictype object of the Fixed Point Toolbox. As such the properties of the fixed point data type may be set via corresponding properties of the numerictype object.

The bias property defines a value that is part of the numerical representation used to interpret a fixed point number such as in the following representation real world value slope integer bias Along with the slope the bias forms the scaling of the number. The slope can be expressed as slope fractionalslope 2 As such the fixed exponent property is also a part of the numerical representation used to express a fixed point number and is included in the exponential portion of the 2 operand in the slope expression. The fraction length property may be any integer value and represents the distance from the least significant bit LSB to the binary point.

The fixed point scaling property of a fixed point data type may be set by way of example of the Fixed Point Toolbox of MATLAB to a value indicating the scaling is 1 binary point 2 slope bias or 3 an integer. A binary point value indicates the scaling of the fixed point data type is defined by the fraction length . A slope bias value indicates the scaling of the fixed point data type is defined by the slope and bias . An integer scaling setting of the fixed point scaling property indicates that the binary point is understood to be at the far right of the word making the fraction length zero. The signed unsigned property indicates whether the fixed point number is zero or positive unsigned unsigned or negative signed . The slope property defines a value for the slope that is part of the numerical representation used to express a fixed point number. Along with the bias the slope forms the scaling of a fixed point number. The slope adjustment factor provides a value that is equivalent to the fractional slope of a fixed point number. The word length property is the word length in bits of the stored integer value of a fixed point number and can be any positive integer value.

Although the fixed point data type of the present invention are illustrated and generally described with a set of properties and values one ordinarily skilled in the art will recognize and appreciate that a fixed point data type may be specified with other properties and values indicating the numerical representation used to interpret a fixed point number. Furthermore the fixed point data type may be specified or configured programmatically such as via an API call or via methods and properties of an object. For example the fixed point data type of a variable argument or operand of a fixed point operation may be set via the executable instructions of the programming tool . Also the fixed point data type may be specified or configured graphically via any type and or form of user interface mechanism such as a user interface of the Fixed Point Toolbox for Simulink in an exemplary embodiment of the present invention.

In another aspect the present invention relates to using fixed point typing rules to determine the data type of a result or output of a fixed point operation such as an intermediate result related to evaluation of an input or operand of the operation or a resulting output of the operation. illustrates an example fixed point typing rule in association with a fixed point operation to be evaluated or processed by the partial evaluation techniques of the present invention. In brief overview the fixed point typing rule may be associated with included with or form a part of the fixed point operation and may use one or more fixed point typing rule parameters . The fixed point typing rule parameters may specify one or more properties or values related to determining a fixed point data type of any intermediate or resulting output of the fixed point operation .

By way of example and as illustrated in the fixed point operation and fixed point typing rule in one embodiment may be implemented in an integrated manner via the executable instructions . That is the fixed point typing rule is programmed or implemented as part of the fixed point operation . As such the fixed point typing rule may be expressed as a program or function such as an M function in the MATLAB programming tool. A user programmer or developer may implement a custom fixed point typing rule as part of the implementation of the fixed point operation . For example the fixed point operation may execute or call a plus function which in the embodiment of MATLAB performs matrix addition of two matrices having one or more fixed point data types. In the implementation of the plus function as shown in the instructions of an example of a fixed point typing rule is the verification that scaling is not slope bias for any of the fixed point typing rule parameters provided via the inputs a0 and b0 and setting the fixed point typing rule parameter to a desired value such as the bias parameter. Another example of a fixed point typing rule is obtaining the best precision numericType for the input b0 .

As illustrated by a fixed point typing rule provides for one or more characteristics attributes or properties for specifying defining or configuring a fixed point data type of a result intermediate or otherwise of a fixed point operation . In one aspect the fixed point rule of the present invention may be implemented as code for or in any portion of the fixed point operation . In other embodiments the fixed point typing rule may be implemented separately from the fixed point operation but executed during evaluation or execution of the fixed point operation . In some embodiments the fixed point typing rule comprises logic function and or operations of executable instructions for determining or providing for the fixed point data type of a result or output of a fixed point operation .

The fixed point typing rule may be configured defined or customized for any type of fixed point related operation such as any of the functions available with Embedded MATLAB of The MathWorks Inc. In one embodiment the present invention enables a user to implement any of the Embedded MATLAB functions with user implemented fixed point typing rules which provide the fixed point data types for any output of the fixed point operation . Any of the fixed point functions of Embedded MATLAB may be related to 1 bitwise functions 2 constructor and property Functions 3 data manipulation functions 4 data type functions 5 data quantizing functions 6 element wise logical operator functions 7 math operation functions 8 matrix manipulation functions 9 plotting functions 10 radix conversion functions 11 relational operator functions 12 statistics functions 13 subscripted assignment and reference functions and 14 any functions related to the fi fimath fipref numerictype and quantizer objects. For example in the embodiment of Embedded MATLAB any one or more of the following M functions in one or more libraries may be modified to use a desired fixed point typing rule abs.m conj.m eps.m eq.m ge.m gt.m int.m int16.m int32.m int8.m intmax.m intmin.m isfinite.m isnumeric.m le.m lt.m le.m lt.m max.m min.m minus.m mtimes.m ne.m plus.m pow2.m range.m rdivide.m realmax.m realmin.m repmat.m reshape.m sign.m stripscaling.m sum.m times.m uint16.m and uint32.m. These functions correspond to functions available in MATLAB but written or provided in a form to encode or implement the fixed point typing rule based on the fixed point typing rule parameters . Although the fixed point operation may at times be described herein in relation to a product or sum type of fixed point operation the fixed point operation may comprise any type of desired functionality such as described above for any of the Embedded MATLAB functions or any other desired functionality.

In another aspect the fixed point typing rule may have one or more parameters providing fixed point type related properties for a fixed point typing rule to consider process evaluate or determine a fixed point data type of an intermediate or resulting output of the fixed point operation . depicts an illustrative set of one or more fixed point typing rule parameters that may be used by a fixed point typing rule in practicing the operations of the presenting invention. In brief overview and by way of example the fixed point typing rule parameters may include one or more of the following rules 1 cast before sum 2 max product word length 3 max sum word length 4 overflow mode 5 product fraction length 6 product mode 7 product word length 8 round mode 9 sum fraction length 10 sum mode 11 sum word length and 12 one or more promotion rules . In one embodiment the fixed point typing rule parameters may be specified via MATLAB such as via the Fixed Point Toolbox. For example the fimath object of MATLAB may be used to specify these fixed point typing rules .

The cast before sum property of the fixed point typing rule parameters indicates whether the operands of the fixed point operation are converted to the sum data type before addition. The max product word length indicates the maximum allowable word length for the product data type and the max sum word length indicates the maximum allowable word length for the sum data type. The overflow mode indicates how to handle any overflows in computing the fixed point operation . In one embodiment the overflow mode may be set to use two s complement overflow which may also be referred to as wrap on overflow. In another embodiment the overflow mode may be set to indicate to saturate to the maximum or minimum value of the fixed point range on overflow. The product fraction length property indicates the fraction length in bits of the product data type and may be set to any positive or negative integer. The product word length is the word length or number of bits of the product data type and may be specified with a positive integer.

The product mode defines how the product data type is determined. For example let A and B be real operands of the fixed point operation with word length and fraction length pairs W F and W F respectively. Wis used to refer to the product data type word length and F the fraction length of the product data type. In one embodiment the product mode is specified to keep the full precision of the result and an error is generated if the calculated word is greater than the max product word length . In full precision mode W W W and F F F. In another embodiment product mode is specified to keep the least significant bits. In this mode the product data type word length is specified by the product word length property and the fraction length is set to maintain the least significant bits of the product. As such W the product word length and F F F. In an additional embodiment the product mode is specified to keep the most significant bits. In this mode the product data type word length is specified by the product word length property and the fraction length is set to maintain the most significant bits of the product. As such overflow is prevented but precision may be lost. In this mode W the product word length and F W W W F F . In a further embodiment the product mode is provided such as to specify the precision of the product such as specifying both the word length and fraction length of the product data type. In this mode W the product word length and F the product fraction length .

The round mode of the fixed point typing rule indicates the rounding mode for a fixed point operation . In one embodiment the round mode is set to round toward positive infinity and in another embodiment toward negative infinity. In some embodiments the rounding mode indicates to round toward zero. In further embodiments the rounding mode is set to round to the nearest value with ties rounding to even numbers in some cases or the number towards positive infinity in other cases. The sum fraction length indicates in bits the fraction length of the sum data type and may be any positive or negative integer. The sum word length indicates the word length or number of bits of the sum data type and may be a positive integer.

The sum mode defines how the sum data type is determined. For example let A and B be real operands of the fixed point operation with word length and fraction length pairs W F and W F respectively. Wis used to refer to the sum data type word length and F the fraction length of the sum data type. In one embodiment the sum mode is specified to keep the full precision of the result and an error is generated if the calculated word is greater than the max sum word length . In full precision mode W integer length Fand F max F F . The integer length may be specified as the max W F W F ceil log 2 NumberofSummands and in the case of two summands max W F W F 1. In another embodiment sum mode is specified to keep the least significant bits. In this mode the sum data type word length is specified by the sum word length property and the fraction length is set to maintain the least significant bits of the sum. As such W the sum word length and F max F F . In an additional embodiment the sum mode is specified to keep the most significant bits. In this mode the sum data type word length is specified by the sum word length property and the fraction length is set to maintain the most significant bits of the product. As such overflow is prevented but precision may be lost. In this mode W the sum word length and F W integer length. In a further embodiment the sum mode is provided such as to specify the precision of the sum such as explicitly via both the word length and fraction length of the sum data type. In this mode W the sum word length and F the sum fraction length .

In some embodiments the fixed point typing rule parameters are specified with one or more promotion rules . Operations with at least one fixed point operand may use rules for selecting the type of the intermediate result for that operation. For example in the action statement c a b where a or b is a fixed point number an intermediate result type for a b is first chosen before the result is calculated and assigned to c. Promotion rules may be used for selecting the numeric types used to hold the results of fixed point operations . These promotion rules may be specified to provide good computational efficiency with reasonable usability. Promotion rules can come in many forms which will be described by way of several examples. For example a promotional rule may treat any fixed point number with a slope of 1 and a bias of 0 as an integer. Also integers as operands in fixed point operations may be treated as fixed point numbers with the same word size and slope equal to 1 and bias of 0.

In some embodiments of the promotion rules when both operands are fixed point numbers the number of bits in the result type is the maximum number of bits in the input types or in other embodiments the integer word size for the target processor. In one embodiment when one operand is of type double in a fixed point operation the result type is double. In this case the fixed point operand may be cast to a type double and the calculation performed. Likewise in another embodiment when one operand is of type single in a fixed point operation the result type is single. The fixed point operand may be cast to a single prior to performing the calculating and assigning the value to the output. In some cases if any one of the operands of the fixed point operation is signed the result type may be signed and in other cases unsigned. In other cases if both operands are signed then the result type is signed. In other embodiments regardless if any of the operands are signed or unsigned the resulting type may be specified to be either signed or unsigned.

In some embodiments of the promotion rules if all of the operands of the fixed point operation are of a fixed point data type then the intermediate result is a fixed point data type . The resulting fixed point data type may be chosen via operator specific rules. For example the resulting output data type for addition and subtraction is chosen so that the maximum positive range of either input can be represented in the output while preserving maximum precision. The output type for multiplication and division fixed point operations may be chosen to yield a more efficient code implementation. In one embodiment the slope for the result type of the product of two fixed point numbers is the product of the slopes of the operands. Likewise the slope for the result type of the quotient for dividing two fixed point numbers is the quotient of the slopes of the operands. For relational type fixed point operations such as the promotion rules may specify the operands are converted to a common bias before comparison. As such the promotion rules may specify one or more rules for conversion. For example a more precise operand may be converted to the bias of the least precise operand.

The promotion rules may specify the number of bits for the resulting type based on any combination of number of bits of the operands of the fixed point operation . For example the number of bits for the result type may be set to the number of bits of any one of the operands. In another example the number of bits for the result type may be specified by the operand with either the largest number of bits or the smallest number of bits. In a further example the number of bits for the result type may be the sum of the number of bits of the operands. Additionally the promotion rules may specify any type of bit adjustment. For example a multiplicative adjustment may be specified to set the number of bits associated with a multiply operation by some factor of the number of bits of an operand. In a similar manner an additive adjustment may be specified to provide guard bits to prevent overflow. In another embodiment the promotion rules may specify one or more allowable number of bit values to force the computed result value to fit into a size supported by a target processor. The promotion rules may also specify slope and or bias additive and multiplicative adjustments based on the slope and or bias of any operands.

The fixed point typing rules of the present invention may be defined specified or configured by any suitable means and or mechanisms. In one embodiment the fixed point typing rule is specified programmatically via application programming interface API calls or via the use of objects provided by the technical computing and graphical modeling environment . In other embodiments the fixed point typing rule is configured via any type and or form of user interface mechanism such as a command line or a graphical user interface design and constructed to receive user input to define a fixed point typing rule . Additionally any fixed point typing rule parameters used by a fixed point typing rule may be accessed referenced or obtained by any suitable means and or mechanisms. In one embodiment the fixed point typing rule parameters may be accessed through a function method or API call in the programming language used to implement the fixed point operation such as via executable instructions . In one embodiment a first API call may be used to access a selected one of the fixed point typing rule parameters and a second API call may be used to obtain the value of the selected fixed point typing rule parameter. Furthermore a value of any fixed point typing rule parameter may be configured via any type and or form of user interface mechanism such as an API a command line or a graphical user interface design and constructed to receive user input to set or modify a value a fixed point typing rule parameter .

Although the fixed point typing rule and fixed point operation are generally discussed in terms of operands such as a variable or input parameter an operand may also comprise any element of a graphical model such as a signal or an attribute of a signal. That is the element of the graphical model such as a signal acts as an operand or otherwise provides input to the fixed point operation . As such the fixed point typing rule may apply its rules set based on any of properties of the signal related to the representation of the fixed point operation in the graphical model . For example a signal traversing a graphical model may carry a value for or otherwise represent a fixed point data type . Any of the properties of the fixed point data type of the signal such as number of bits slope bias or signed unsigned may be used to determine the resulting output type. Additionally the result or output may take the form of an element of the graphical model such as a signal output from a block of a block diagram model or to another system.

Furthermore the fixed point typing rule may be incorporated in or otherwise associated with the fixed point operation or any portion thereof. In one embodiment the fixed point typing rule is encoded programmed or implemented in or as part of the fixed point operation as illustrated in . For example a function performing any type of fixed point operation in a set of executable instructions may include executable instructions that perform a fixed point typing rule by obtaining and or evaluating the values of one or more fixed point typing rule parameters . In another embodiment the fixed point typing rule may be associated with any input or operand of the fixed point operation which may be represented by any type of variable or object provided via the programming tool or graphical modeling tool . For example in the exemplary embodiment of MATLAB a fi or fimath object may be used to provide an input or operand for a fixed point operation . In addition to specifying the fixed point data type of the operation the object may also carry or specify the fixed point typing rule desired to be used. In the case of multiple operands specifying multiple fixed point typing rules there may be any type and or form of suitable order of preference or priority to resolve any conflicts between the fixed point typing rules .

In one aspect the present invention relates to applying a partial evaluation technique to evaluating a fixed point operation such as a fixed point operation represented or performed by a set of executable instructions . Referring now to an illustrative embodiment of the partial evaluation techniques of the present invention will be discussed. depicts a set of executable instructions showing an illustrative representation of a fixed point operation . depicts an illustrative method of practicing the partial evaluation technique of the present invention. Although the illustrative method may be described in conjunction with an illustrative product or sum type of fixed point operation as shown in the fixed point operation may comprise any type of desired functionality as previously described.

In brief overview of the set of executable instructions provide a first fixed point operation and a second fixed point operation . The fixed point operation provides a sum operation between two operands A and B to provide an output of C. The A operand has a fixed point data type and the B operand has fixed point data type . A fixed point typing rule is associated with the fixed point operation such as association via the sum operator or with one or both of the operands A and B. Using the partial evaluation techniques of the present invention the fixed point data type of the result is determined for the operation . The fixed point operation provides a product operation between two operands D and E to provide an output of F. The C operand has a fixed point data type and the D operand has fixed point data type . A fixed point typing rule is associated with the fixed point operation and is used to determine the resulting fixed point data type . Referring now to at step of illustrative method a set of executable instructions are provided for code generation such as the illustrative executable instructions of . In one embodiment the executable instructions may comprise an interpretive dynamically typed language such as MATLAB . In other embodiments the executable instructions may comprise a programming language such as C C Visual Basic Visual .NET or Java. In yet a further embodiment the executable instructions may comprise a scripting language such as VB Script Java Script perl or awk. The executable instructions may have one or more instructions representing a fixed point operation . The fixed point operation may have one or more operands of a fixed point data type . In one embodiment the instructions representing the fixed point operation may comprise a function call. For example the input parameters to the function call may be passed to or used by the fixed point operation . In another embodiment the instructions for the fixed point operations may be included in a library.

At step the illustrative method determines there is a fixed point operation or a fixed point typing rule associated with the fixed point operation . The fixed point typing rule may be associated with any portion of the fixed point operation . In one embodiment the fixed point typing rule may be included or implemented in or form a part of the fixed point operation . In some embodiments the fixed point typing rule may be associated with any of the inputs or operands of the fixed point operation . In one embodiment an object variable or parameter used to represent or provide an operand for the fixed point operation may include or have a pointer to the fixed point typing rule . For example in the exemplary embodiment of MATLAB a fi fimath or numerictype object may include or point to the fixed point typing rule . In other embodiments the fixed point typing rule may be associated with the type of operator or operation of the fixed point operation . For example a fixed point typing rule may be associated with a product or sum operator. In additional embodiments the fixed point typing rule may be represented by an object or variable and passed as an argument or a parameter to a function call.

In one embodiment the partial evaluator as part of the code building tool identifies or determines the existence of a fixed point operation or fixed point typing rule . In another embodiment the programming tool may identify or determine there is a fixed point operation or fixed point typing rule . In some embodiments the present invention parses interprets or otherwise reads the executable instructions to identify and or determine the existence of a fixed point operation . From the identified fixed point operation the fixed point typing rule may be determined. For example in one embodiment the fixed point typing rule may be a set of executable instructions in the representation building tool such as the partial evaluator that has logic to compare the data types of the operands in relation to the operation. In another embodiment the fixed point typing rule may be queried retrieved or otherwise obtained from a storage location such as a file or database or from a memory location such as a data structure or object based on the data type of one or more operands and or type of operator s . In a further embodiment any of the variables or objects representing the operand output or any inputs parameters or arguments used by the executable instructions may be traversed used or processed to determine and or obtain the fixed point typing rule 

At step the illustrative method of the present invention generates a representation such as code or an in memory representation for the executable instructions using partial evaluation techniques. Based on the fixed point typing rule the method of the present invention determines the fixed point data types of any of the resulting output of the fixed point operation . In some embodiments the method of the present invention determines if there are any portions of the fixed point operation or fixed point typing rule based on static or known information associated with any input to the operation . In one embodiment the illustrative method may be performed to generate a representation in another programming language from the executable instructions . For example the executable instructions may comprise an interpretive dynamically typed language of MATLAB . As such any of the output of the fixed point operation may be a dynamically typed object or variable representing the resulting value s of the operation. The code generated from the executable instructions may include C code instructions such as integer based C code for a fixed point processor or in another embodiment may be byte code such as Java byte code. Although the values of the output may not be determined prior to running or executing the code using the partial evaluation technique of the present invention the data types of a result or output of the fixed point operation are determined for the generated representation. This provides a more efficient representation as the resulting data types of the output are reflected in the generated representation.

For example the fixed point operation of provides a sum of two fixed point operands each with a fixed point data type . Although values for the operands A and B of the fixed point operation may not be known at the time of representation generation the resulting data type of the output C can be determined. Based on the fixed point data types of the operands A and B a resulting data type for the output C is determined via the fixed point typing rule . For example the sum mode of the fixed point typing rule may indicate to keep the least significant bits. As such the result type may be defined to have a word length or number of bits set to the value of the sum word length property of the fixed point typing rule and the fraction length of the result type may be specified as the maximum fraction length of the fixed point data types . Also the fixed point typing rule may indicate if any of the operands are signed then the result type should be signed. Based on the result type determined by the fixed point typing rule a representation is generated to represent the fixed point operation to provide output C with the result type . In one embodiment the code may be C representation using integer variables to represent the result type

In another example the result type of the product of the D and E operands of the fixed point operation is evaluated via the fixed point typing rule and a representation is generated to represent the fixed point operation with the output F having the determined result type . The fixed point typing rule may have a product mode indicating to use full precision. As such the fixed point data type of output C may be specified to have a word length or number of bits equal to the sum of the word lengths of each of the fixed point data types and of operands D and E. Likewise the fraction length of the fixed point data type of output F may be specified as the sum of the fraction lengths of the fixed point data types and of operands D and E. Accordingly a representation is generated to represent the fixed point operation providing the determined result type having the specified word and fraction lengths.

Although illustrative method is generally described above using sum and product type fixed point operations implemented a fixed point typing rule one ordinarily skilled in the art will recognize and appreciate that the data type of any result or output may be determined via any type and of form of fixed point typing rule for any type of fixed point operation such as for example trigonometric functions. Additionally although illustrates the data type of a resulting output of fixed point operations a result or output of fixed point operation may include any intermediate result those ordinarily skilled in the art will appreciate. For example operand A of fixed point operation may comprise an expression of a fixed point operation such as the fixed point operation . As such operand A may be processed using the partial evaluation techniques of the present invention to determine a data type of a result of the operand. Thus the result may be an intermediate result related to an operand or input or may be an output result of the operation.

In another aspect the present invention relates to applying a partial evaluation technique to evaluating a fixed point operation represented or performed by a graphical model . For example in one embodiment a set of executable instructions may be automatically generated from a graphical model using the code building tool of the present invention. The partial evaluation techniques of the present invention then may be applied to the generated instructions . In another embodiment the partial evaluation techniques of the present invention may be applied to a portion of a graphical model having code or executable instructions . Referring now to another illustrative embodiment of the partial evaluation techniques of the present invention will be discussed. depicts a graphical model having or representing a fixed point operation . depicts an illustrative method of practicing the partial evaluation techniques of the present invention for generating code for or from graphical models .

In brief overview of the graphical model in one embodiment may comprise a block diagram model having blocks B1 B2 B3 and B4. The graphical model may comprise an implementation or design for a fixed point system such as a fixed point processor. For example block B3 may represent a controller on a fixed point processor. Via any of the elements or constructs of the graphical model such as a block B4 or a set of executable instructions the graphical model may comprise one or more fixed point operations . For example in one embodiment the executable instructions may comprise the instructions illustrated in . The graphical model may include the executable instructions as functions such as an S function in Simulink or may make function or API calls to perform the operation such as Simulink making function calls to the MATLAB workspace to perform a fixed point calculation. In another embodiment any of the blocks of the graphical model may be a math or function block performing a fixed point operation .

Additionally the graphical modeling tool may include any suitable type and or form of configuration mechanism for configuring one or more fixed point data types and or fixed point typing rules . The configuration mechanism may enable the specification of any signals or inputs to the graphical model to provide a fixed point data type . Additionally a block of the graphical model may be configured to convert a non fixed point input to a fixed point data type . For example an analog signal traversing to the block B1 as input may be converted to a digital value having a fixed point data type for use by the target processor.

Referring now to at step of illustrative method a graphical model is provided for representation generation such as the illustrative graphical model of . In one embodiment the graphical model may comprise a block diagram model provided via a Simulink and or Stateflow graphical modeling tool . In some embodiments the graphical model is provided via any electronic form such as a file for example a .mdl or .rtw file in the embodiment of Simulink . The graphical model may represent a fixed point operation with one or more inputs such as a signal or operands of a fixed point data type . In one embodiment the fixed point operation is represented by a block such as B3 in and in another embodiment the fixed point operation is represented by a set of executable instructions incorporated in referenced or used by or otherwise associated with the graphical model .

At step the illustrative method determines a fixed point typing rule associated with the fixed point operation . The fixed point typing rule may be associated with any portion of the fixed point operation . In some embodiments the fixed point typing rule may be associated with any of the signals blocks or other elements of the graphical model such as a fixed point operation block B3 of graphical model in . In one embodiment the partial evaluator as part of the representation building tool determines there is a fixed point operation and or fixed point typing rule . In another embodiment the graphical modeling tool may determine the fixed point typing rule is associated with the fixed point operation .

In some embodiments the fixed point typing rule is determined by parsing interpreting or otherwise reading the graphical model to identify and or determine the existence of a fixed point operation and corresponding fixed point typing rule . For example in one embodiment the fixed point typing rule may be an attribute of a block a signal or other portion of the graphical model from which the representation building tool reads during code building operations as will be discussed in further detail below in conjunction with . In another embodiment the fixed point typing rule may be queried retrieved or otherwise obtained from a storage location such as a file or database or from a memory location such as a data structure or object based on the fixed point operation . In a further embodiment any variables or objects used by the graphical model may be used or processed to determine and or obtain the fixed point typing rule .

At step the illustrative method of the present invention generates a representation for the graphical model using partial evaluation techniques to provide code that represents a determined data type of the output of the fixed point operation . The output may be an intermediate result of the fixed point operation such as the evaluation of an input. Based on the fixed point typing rule determined at step the method of the present invention determines the fixed point data types of any of the output of the fixed point operation . In one embodiment the illustrative method may be performed for a graphical model representing a design for a fixed point processor to generate code in a programming language such as C to be implemented on the fixed point processor. The representation generated to represent the fixed point operation provided via the graphical model can represent the fixed point data type of the output according to the fixed point typing rule . In one embodiment the present invention generates a first set of code for the graphical model without using the partial evaluation technique and then generates a second set of code from the generated first representation using the partial evaluation technique. As such in this embodiment the second representation constitutes a specialization of the first set of code using the determined result type of the output from the known data types of the input related to the fixed point operation.

Although the illustrative methods and of are generally described as determining a resulting type of an output of a fixed point operation from a fixed point typing rule there may be times that a fixed point typing rule does not have a typing rule that covers or fits the scenario or circumstances of the fixed point operation. In one embodiment a default fixed point typing rule may be used for these circumstances. In some embodiments if a more accurate precise or specific result type cannot be provided for a fixed point operation then the representation of the fixed point operation may not be generated via partial evaluation and a less efficient representation of the resulting output may be used. For example a fixed point data type having a larger number of bits and longer fraction length may be used to represent a wider range of possible values. In other embodiments the representation generation process may provide an error that partial evaluation cannot be performed or that a suitable fixed point typing rule needs to be provided.

Referring now to an illustrative method of and system of of the present invention will be used to discuss the operations functions and structure of the representation generation techniques of the present invention. Referring to in brief overview the representation generating system comprises a representation building tool having a code generator a partial evaluator and an in memory representation generator . In an exemplary embodiment of a technical computing and graphical modeling environment of Stateflow and or Simulink the representation building tool comprises the Stateflow Coder integrated with Real Time Workshop both manufactured by The MathWorks Inc.

Referring to the illustrative method of the present invention obtains either a set of executable instructions at step in one embodiment or in another embodiment a graphical model at step . In some embodiments the executable instructions and or the graphical model may be obtained via a file. The graphical model may comprise a file in a format that the representation building tool code generator or in memory representation can read and that follows a file specification for defining elements of the graphical model . In other embodiments the representation building tool code generator or in memory representation generator may obtain either the executable instructions and or the graphical model from an application programming interface API call to another application or via an interface to another environment such as the programming tool or graphical modeling tool See . In yet a further embodiment the graphical modeling tool and or the programming tool or another computer program saves and converts the executable instructions and or graphical model into a format readable by the representation building tool . For example a graphical model produced with Simulink and Stateflow may be converted into an intermediate model file representation such as an .rtw type file readable by the automatic code generator of Real Time Workshop .

At step of illustrative method the representation building tool such as Stateflow Coder and or Real Time Workshop will generate a representation such as code for the graphical model and or executable instructions . The representation building tool and code generator or in memory representation generator use one or more input files in conjunction with reading and processing the graphical model and or executable instructions or by the in memory representation generator to generate or in memory representation. The one or more input files may comprise files including templates commands input parameters configuration data source code data and class definitions component configuration device driver or any other information that may be used by the code generator to generate code for the graphical model and or executable instructions . The input files may include files to provide input to and configure the code generator to generate source code files for a specific target hardware platform for example a specific processor. In an exemplary embodiment of Real Time Workshop as the code generator Real Time Workshop uses target language compiler script files with a .tlc file extension as input files to the code generation process. The .tlc files provide sections of programming instructions to be implemented for block and element references as they may be found in the graphical model and or executable instructions during the code generation process. The .tlc files also can provide data and class definitions for data element references found in the graphical model and or executable instructions . Additionally the .tlc files also comprise compiler directives built in functions and other code generation commands to direct Real Time Workshop during the code generation process.

In operation the code generator reads in information regarding or a representation of the graphical model and or executable instructions and uses the input files or an in memory representation to generate code by translating the graphical model and or the executable instructions into one or more source code files . By way of example the automatic code generation can be discussed in terms of generating code with Real Time Workshop from a block model diagram generated with Simulink . Simulink creates and stores block diagram models into model files with an .mdl file extension. As part of the code generation process Real Time Workshop reads in an .mdl model file and analyzes the model to generate an intermediate model file with an .rtw extension. This intermediate .rtw model file comprises a hierarchical structure of records describing systems and their blocks and connections analyzed from a block diagram model of the .mdl file. Alternatively the in memory representation generator may generate an in memory representation from the graphical model and or executable instruction.

In one embodiment the partial evaluator of the representation building tool performs the techniques depicted in illustrative methods and to generate representations for the graphical model and or executable instructions . In one aspect the representation building tool generates representations for the fixed point operation that represent the fixed point operation analyzed and modified to a form with known static inputs such as known fixed point data types of inputs. In another aspect the representation building tool generates representations that represent the fixed point data type of input to the fixed point operation and the fixed point data type of output of the fixed point operation determined via one or more fixed point typing rules and applying partial evaluation. As such based on the known static fixed point data type related inputs the representations for any fixed point data type of outputs of the operation is determined.

In one embodiment the representation building tool performs the techniques of the present invention when generating the intermediate model .rtw file for a graphical model . In another embodiment the representation building tool may perform the techniques of the present invention when processing the generated .rtw file to provide code. In a further embodiment the representation building tool may perform the techniques of the present invention when converting executable instructions in one language to another language. In one embodiment the representation building tool may perform the techniques of the present invention to convert from one set of executable instructions to another set in the same language but with the result types of the output defined and represented based on any of the fixed point typing rule parameters . In other embodiments the representation building tool may perform the techniques of the present invention to modify a set of executable instructions to another set with code removed simplified or changed to reflect the known or static portion of the fixed point operation .

With the partial evaluator code for the fixed point operation may be generated representing code that will actually be executed based on any of the static information given by the inputs. Any code that will not be executed based on any of the static information may be eliminated. For example in the executable instructions in the statement if isfi b0 is an instruction that can be determined at the time of partial evaluation. Either the branch of the statement is taken or not taken and code is generated to represent the branch known to be taken. In the following example of instructions 

the expression get ta Bias is evaluated at compile time and its corresponding constant value is inserted in the generated code. Thus the expression eml const get ta Bias can be reduced to a constant value.

In further aspects the technique of the present invention provides a reduction of the instructions of the fixed point operation and or fixed point typing rule into a form that takes into account or consideration the portions of the fixed point operation and or fixed point typing rule known at the time or point of code generation. In reducing the instructions into another form one or more instructions of the fixed point operation and or fixed point typing rule may be modified converted changed altered deleted or added to represent the portion that is known. The reduction of the instructions may be based on any values of parameters or variables of the fixed point operation known at code generation time. The reduction of the instructions may also be based on any known paths of execution of conditional statements or otherwise that would or would not occur based on the known or static information at the time of code generation.

The reduction of the instructions based on the partial evaluation techniques of the present invention provides the instructions in a form that may be more efficient simpler or quicker to execute. For example one or more conditional statements of a fixed point typing rule may be removed providing less instructions to execute. One ordinarily skilled in the art will recognize and appreciate the various modifications deletions additions alteration conversion or transformation of the executable instructions of the fixed point operation that may occur to represent the fixed point operation or provide a reduction of the fixed point operation based on the known or static information associated with inputs the fixed point typing rule and fixed point typing rule parameters .

In further detail of the representation building tool a language compiler called the target language compiler of Real Time Workshop works with .tlc files and .rtw files to produce code. The target language compiler interprets a program that reads the intermediate model file description of an .rtw file. As the target language compiler encounters a record in the .rtw file it uses directives in the .tlc files corresponding to the record to direct the code generation process for the specific record. As such the target language compiler works much like a text processor. For example the target language compiler uses block .tlc files which specify the particular code for a block to transform each block into code. When it reads a record in the .rtw file that references a block the target language compiler applies code from the corresponding block .tlc file to generate code for the block in source code files . Additionally model wide .tlc files are also used to provide input to the target language compiler for global customization of the code. Model wide .tlc files may direct the target language compiler to generate main routines to provide entry points into the program source code header files to setup data structures and utility functions to support code for particular blocks. The block and model wide .tlc files can be modified to generate customized code for blocks and to generate any desired global customizations to the code.

The source code files generated from the code generator such as Real Time Workshop may comprise program instructions of a programming language such as C which may further be in a format and style following the ANSI ISO C standard. Additionally the source code files may be generated to comprise fixed point or floating point source code. The programming instructions of the source code files may be generated to run on any real time operating system or for a specific processor. In a further embodiment the programming instructions of the source code files may be optimized for performance or versatility and or for a specific target hardware platform. In another embodiment the code generator can be configured via the input files to generate custom source code comprising a style and format as directed by the input files . The code generator can be also configured via the input files to provide customized source code to support such customizations as error handling optimization code and data reduction code reusability scoping of variables and other characteristics of the source code that may be modified during the source code generation process.

In some embodiments a portion of the source code or object code generated or provided by illustrative method may be targeted to run on a specific computational hardware device such as an embedded hardware platform or a specific processor of a computing device and another portion may be targeted to run on a personal computer such as a desktop or notebook. For example a portion of the graphical model may process data or perform loops that are time critical. In comparison the display may not need to be updated in a time critical manner as the viewer s eyes may only perceive updates at a certain rate. The time critical data processing or loops may be embodied in source code and or object code targeted for a specific processor of a certain speed or capability and the non time critical code may be targeted for any general computing device. One ordinarily skilled in the art will recognize and appreciate the various ways to process and target various portions of code to meet the desired functionality and or execution of the graphical model and or executable instructions .

At step of illustrative method one or more programs may be built from the automatically generated code to provide an executable form to execute the graphical model and or executable instructions. The representation building tool also provides for the building of the source code files into object code to generate one or more programs to run on a target platform and or operating system. The build process of illustrative step of the present invention may include compiling the code and linking libraries drivers and other programs via a make program or some other compiling utility. In one embodiment the representation building tool invokes a compiler provided by software available with the operating system such as a make utility on a UNIX operating system. In another embodiment the compiler may be provided from a software development package such as Visual C C from Microsoft Corporation of Redmond Wash. One ordinarily skilled in the art will recognize the representation building tool may invoke any type of compiler that is configured to and capable of translating the source code into object code to be executed by the target computing device .

Although the code generator is generally discussed in terms of generating source code the code generator may provide code in any other form such as object code pre existing source code or other programmable instructions suitable for representing the functionality of the graphical model and state machine diagram model . Additionally although the illustrative embodiment of the present invention is discussed in terms of source code files and object code from a programming language like C the code generator may generate any type of programming related output such as an interpreted programming language and or scripting language. For example the code generator may generate code for perl awk VBscript Javascript tcl or the technical computing programming language of MATLAB . In other cases the code generator may generate output in other types of languages such as the hardware description language of HDL. One ordinarily skilled in the art will recognize the various types of languages the code building tool may apply in generating code and how the code generator may build the code based on the type of language.

In view of the structure functions and operations of the systems and methods as described herein the present invention provides partial evaluation techniques for generating more efficient code for fixed point operations from executable instructions such as an interpreted dynamically typed language or executable instructions provided by or generated from graphical models. Using partial evaluation the code reflects a determination of data types of the resulting output of a fixed point operation from any known data types of the input or operands to the operation and fixed point typing rules implemented or associated with the operation. This determination can be configurable and flexible via fixed point typing rules which may be specified by a user. Additionally the present invention generates code that reflects changes in the fixed point typing rules so that the same graphical model or executable instructions may generate different sets of code based on the selection of or changes to the fixed point typing rule parameters.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

