---

title: Security in peer to peer synchronization applications
abstract: The claimed subject matter provides a system and/or a method that facilitates synchronizing data within a data storage system. An interface component can leverage a synchronization technique within the data storage system. A sync component can provide a secure peer to peer data synchronization based at least in part upon the synchronization technique to allow a tiered access to the synchronized data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07930346&OS=07930346&RS=07930346
owner: Microsoft Corporation
number: 07930346
owner_city: Redmond
owner_country: US
publication_date: 20050824
---
Advances in computer technology e.g. microprocessor speed memory capacity data transfer bandwidth software functionality and the like have generally contributed to increased computer application in various industries. Ever more powerful server systems which are often configured as an array of servers are commonly provided to service requests originating from external sources such as the World Wide Web for example.

As the amount of available electronic data grows it becomes more important to store such data in a manageable manner that facilitates user friendly and quick data searches and retrieval. Today a common approach is to store electronic data in one or more databases. In general a typical database can be referred to as an organized collection of information with data structured such that a computer program can quickly search and select desired pieces of data for example. Commonly data within a database is organized via one or more tables. Such tables are arranged as an array of rows and columns.

Also the tables can comprise a set of records wherein a record includes a set of fields. Records are commonly indexed as rows within a table and the record fields are typically indexed as columns such that a row column pair of indices can reference particular datum within a table. For example a row can store a complete data record relating to a sales transaction a person or a project. Likewise columns of the table can define discrete portions of the rows that have the same general data format wherein the columns can define fields of the records.

Each individual piece of data standing alone is generally not very informative. Database applications make data more useful because they help users organize and process the data. Database applications allow the user to compare sort order merge separate and interconnect the data so that useful information can be generated from the data. Capacity and versatility of databases have grown incredibly to allow virtually endless storage capacity utilizing databases. However typical database systems offer limited query ability based upon time file extension location and size. For example in order to search the vast amounts of data associated to a database a typical search is limited to a file name a file size a date of creation etc. wherein such techniques are deficient and inept.

With a continuing and increasing creation of data from end users the problems and difficulties surrounding finding relating manipulating and storing such data is escalating. End users write documents store photos rip music from compact discs receive email retain copies of sent email etc. For example in the simple process of creating a music compact disc the end user can create megabytes of data. Ripping the music from the compact disc converting the file to a suitable format creating a jewel case cover and designing a compact disc label all require the creation of data.

Not only are the complications surrounding users but developers have similar issues with data. Developers create and write a myriad of applications varying from personal applications to highly developed enterprise applications. While creating and or developing developers frequently if not always gather data. When obtaining such data the data needs to be stored. In other words the problems and difficulties surrounding finding relating manipulating and storing data affect both the developer and the end user.

Moreover with the endless amount of data surrounding developers and or users data consistency between disparate machines and or systems can be a complicated and overwhelming task. For example a user can utilize a laptop machine and a desktop wherein data consistency and or synchronization are of vital concern. In particular with each machine and or system generating large amounts of data the synchronization of such data is an extremely difficult objective.

The following presents a simplified summary of the innovation in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview of the claimed subject matter. It is intended to neither identify key or critical elements of the claimed subject matter nor delineate the scope of the subject innovation. Its sole purpose is to present some concepts of the claimed subject matter in a simplified form as a prelude to the more detailed description that is presented later.

The subject innovation relates to systems and or methods that facilitate synchronizing data associated with at least two disparate data storage systems. A data storage system can be a complex model based at least upon a database structure wherein an item a sub item a property and a relationship are defined to allow representation of information within a data storage system as instances of complex types. A sync component creates a secure peer to peer data synchronization to allow multiple users to access such synchronized data at various tiers and or levels. The sync component synchronizes data associated with the data storage system and a disparate data storage system wherein a secure peer to peer synchronization community can be established. The sync component secures metadata including a membership list e.g. list of user access rights and or privileges of the synchronization community such that a user with appropriate access is able to modify it e.g. to add and or remove a user from the community and transmit a change and or manipulation to other users. The data can also be secured such that a user with appropriate access is able to modify it and transmit the changes to the other users.

In other words the sync component can implement the management of complex synchronization relationships. For instance the synchronization relationships can include but is not limited to setup tear down and security management. Moreover the sync component can implement the management of complex synchronization relationships based entirely on a synchronization technology. It is to be appreciated and understood that any suitable synchronization technology can be implemented such as for instance the synchronization technology related to a data storage system.

In accordance with one aspect of the claimed subject matter the sync component can leverage the existing synchronization techniques and or mechanisms associated with the data storage system. The sync component can utilize the data storage system that includes a track component to track data changes to various entities stored inside the data storage system and in particular a store within the data storage system. The track component can capture the data change s to the entities to facilitate synchronizing data between two disparate systems maintaining sets of data. By leveraging the existing synchronizing techniques and or mechanisms within the data storage system the sync component can provide a secure peer to peer synchronized community without any new mechanisms and or techniques.

In accordance with another aspect of the claimed subject matter the sync component can include a user sync manager that can facilitate creating synchronized relationships creating synchronized containers inviting users accepting invitations joining a community removing users maintaining membership lists and or overall management of the peer to peer synchronized community. Moreover the sync component can include at least one of a manual sync and or an auto sync. The manual sync can allow a user to a user to manually synchronize data. Moreover the auto sync can provide an automatic synchronization of data elected to the peer to peer data synchronization.

In accordance with another aspect of the claimed subject matter the sync component can include a peer to peer sync application that runs as a local system to expose at least one operation to an application. The operation can be at least one of the following create a share at a specified container create permissions to a container add a permission to a container validate an owner of a container set a group membership based on a list and delete a share created on a container. Furthermore the sync component can include an integrate component that facilitates integration between the sync component e.g. and in particular the peer to peer sync application into an operation system with other applications. Moreover the sync component can include an API component that can perform synchronized folder creation and or management programmatically. In other aspects of the claimed subject matter methods are provided that facilitate synchronizing data associated with at least two disparate data storage systems.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the claimed subject matter. These aspects are indicative however of but a few of the various ways in which the principles of the innovation may be employed and the claimed subject matter is intended to include all such aspects and their equivalents. Other advantages and novel features of the claimed subject matter will become apparent from the following detailed description of the innovation when considered in conjunction with the drawings.

As utilized herein terms component system interface and the like are intended to refer to a computer related entity either hardware software e.g. in execution and or firmware. For example a component can be a process running on a processor a processor an object an executable a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and or distributed between two or more computers.

The claimed subject matter is described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the subject innovation. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the subject innovation.

Now turning to the figures illustrates a system that facilitates synchronizing data associated with at least two disparate data storage systems. A data storage system can be a complex model based at least upon a database structure wherein an item a sub item a property and a relationship are defined to allow representation of information within a data storage system as instances of complex types. The data storage system can utilize a set of basic building blocks for creating and managing rich persisted objects and links between objects. An item can be defined as the smallest unit of consistency within the data storage system which can be independently secured serialized synchronized copied backup restored etc. The item is an instance of a type wherein all items in the data storage system can be stored in a single global extent of items. The data storage system can be based upon at least one item and or a container structure. Moreover the data storage system can be a storage platform exposing rich metadata that is buried in files as items. It is to be appreciated that the data storage system can represent a database based file storage system to support the above discussed functionality wherein any suitable characteristics and or attributes can be implemented. Furthermore the data storage system can utilize a container hierarchical structure wherein a container is an item that can contain at least one other item. The containment concept is implemented via a container ID property inside the associated class. A store can also be a container such that the store can be a physical organizational and manageability unit. In addition the store represents a root container for a tree of containers within the hierarchical structure.

A sync component can create a secure peer to peer data synchronization to allow multiple users to access such synchronized data at various tiers and or levels. The sync component can allow the synchronization of data associated with the data storage system and a disparate data storage system wherein a secure peer to peer synchronization community can be established. The sync component can secure metadata including a membership list e.g. list of user access rights and or privileges of the synchronization community such that a user with appropriate access is able to modify it e.g. to add and or remove a user from the community and transmit a change and or manipulation to other users. The data can also be secured such that a user with appropriate access is able to modify it and transmit the changes to the other users. The security mechanism can invoke an underlying authentication and or authorization mechanism such as but not limited to share level security item level security operating system authentication and authorization etc. Moreover the sync component can provide membership list synchronization in a substantially similar manner to that which data can be synchronized.

In other words the sync component can implement the management of complex synchronization relationships. For instance the synchronization relationships can include but is not limited to setup tear down and security management. Moreover the sync component can implement the management of complex synchronization relationships based entirely on a synchronization technology. It is to be appreciated and understood that any suitable synchronization technology can be implemented such as for instance the synchronization technology related to a data storage system and or a disparate data storage system .

The sync component can utilize a replica e.g. synchronized data and or folders belonging to at least one user in the community to announce at least one of the following 1 presence within the community and 2 intention to depart the community by synchronizing a request to a manager e.g. a member of the community who is authorized to make changes to the replica membership list of the community. In other words the manager is a member of the community who is authorized to make changes to the replica membership list. In addition managers can process such requests and make changes to the membership metadata and then synchronize the metadata to the other users in the community. Upon receiving such membership changes the sync component allows each replica to make the necessary access changes to its data and metadata. It is to be appreciated that the creation and management of the peer to peer synchronization community implemented by the sync component can allow multiple replicas and users wherein roles assigned to each user can dynamically change at any given instant in time. In other words there is no single fixed master in the topology of the sync component and or the peer to peer synchronized community. Moreover the sync component can leverage the underlying authentication and authorization techniques and or mechanisms of the data storage system .

Moreover the system can include any suitable and or necessary interface component which provides various adapters connectors channels communication paths etc. to integrate the sync component into virtually any operating and or database system s . In addition the interface component can provide various adapters connectors channels communication paths etc. that provide for interaction with the sync component the data storage system and the disparate data storage system .

For instance the building blocks can include an Item an ItemExtension a Link and an ItemFragment. An Item can be defined as the smallest unit of consistency within the data storage system which can be independently secured serialized synchronized copied backup restored etc. The item is an instance of a type wherein all items in the data storage system can be stored in a single global extent of items. An Item can be extended utilizing an extension entity such as but not limited to an ItemExtension. The entity extension can be defined in a schema with respective attributes e.g. a name an extended item type a property declaration . . . . The ItemExtension can be implemented to group a set of properties that can be applied to the item type that is extended. A Link is an entity type that defines an association between two item instances wherein the links are directed e.g. one item is a source of the link and the other is the target of the link . An ItemFragment is an entity type that enables declaration of large collections in item types and or item extensions wherein the elements of the collection can be an entity. It is to be appreciated and understood that the data storage system can represent any suitable database based file storage system that provides the representation of data as instances of complex types and the above depiction is not to be seen as limiting the subject invention. The data storage system can be substantially similar to the data storage system depicted in .

The data storage system can include a track component that provides tracking data changes to various entities stored inside the data storage system and in particular a store within the data storage system . The track component can capture the data change s to the entities to facilitate synchronizing data between two disparate systems maintaining sets of data. The track component can utilize a schema that provides an infrastructure that allows a store and or container to provide granular maintenance in relation to a data change. For instance the track component can track a data change wherein the data change can include an insert an update and a delete at the entity e.g. item relationship extension etc. level. The track component can track data changes such that at the entity level the change tracking can be utilized to generate at least one of a notification and control with optimistic concurrency. It is to be appreciated that optimistic concurrency assumes the likelihood of another process making a change at the substantially similar time is low so it does not take a lock until the change is ready to be committed to the data storage system e.g. store . By employing such technique the lock time is reduced and database performance is better.

The track component can include a non sync component not shown that can track data changes at an entity level within the data storage system . It is to be appreciated that the data changes are tracked solely at an entity level based at least in part upon the non participation in synchronization. Tracking a data change at the entity level can be referred to as change information. The non sync component can capture basic change information for all entities. For instance the basic change information can be but is not limited to a local creation time and a local modification time.

The track component can further utilize a data storage system DSS synchronize component not shown that provides tracking for an entity that participates in synchronization. The DSS synchronize component has a more specialized requirement to track data changes to an entity at a more granular level as well as capturing and maintaining information about the store and or container that has been changed in a multi store replication e.g. castle scenario. The sync component can capture addition change information for entities in a sync relationship. For instance the DSS synchronize component can capture change information at a more granular e.g. sub level sub sub level etc. to minimize the amount of data to be synchronized and to reduce the number of change conflict situations. In another example the DSS synchronize component can capture information about which store and or container created and or updated entities. It is to be appreciated and understood that the claimed subject matter can apply to synchronization systems that are not based on the track component discussed above and that any suitable synchronization system can be implemented including systems that utilize logs of at least one change e.g. log based synchronization systems .

A sync component can provide a secure peer to peer synchronized community in relation to the data storage system and a disparate data storage system wherein various levels and or tiers of access can be provided. The sync component can leverage the existing track component within the data storage system to allow the synchronization of data stored within the data storage system disparate storage system and or any other suitable machine. It is to be appreciated that the sync component provides data synchronization by utilizing underlying and or existing synchronization mechanisms associated with the various data storage systems and or machines wherein such data storage systems and or machines include unsynchronized data that is to be synchronized. It is to be appreciated that the sync component can be substantially similar to the sync component as illustrated in .

The sync component can further provide at least one of the following 1 validation of development experience of application built on a platform related to the data storage system 2 creation of a process feedback and improvement back into the data storage system and data storage system synchronization 3 creation of a self host environment for the application 4 implementation of an end to end synchronization solution that handles issues such as but not limited to transport and security including authentication and encryption and synchronization over the Internet and 5 investigation of points related to integration between the data storage system and data storage system synchronization functionality and the rest of an operating system.

For example a user can keep multiple personal computers PCs synchronized utilizing the sync component wherein the PCs implement a database based file storage system substantially similar to the data storage system . Various containers can be synchronized with disparate computers. In particular a shared photos container can be synchronized with disparate users across the Internet. In addition a shared documents container can be synchronized with multiple machines at home and at work. In another example a photo application can be implemented to provide the ability to share photos. Utilizing the sync component in association with a photo application can ensure a seamless experience across the photo application and the database based file storage system synchronization based photo sharing. In still another example the sync component can be implemented in the corporate scenario and or environment. In a corporate environment and or scenario account authentication and impersonation is available for instance via a LAN manager or Kerberos. This is distinct from synchronization over the Internet which introduces requirements for the transport.

Based at least in part upon the above scenarios and or examples the sync component can provide at least one of the following 1 set up synchronization 2 manage synchronization data 3 manage synchronization schedules 4 inspect and resolve synchronization conflicts 5 review synchronization conflicts and 6 synchronize photos.

The sync component can include a user sync manager component herein referred to as the user sync manager . The user sync manager can facilitate creating synchronized relationships creating synchronized containers inviting users accepting invitations joining a community removing users maintaining membership lists and or overall management of the peer to peer synchronized community. The user sync manager can provide a user to enable synchronization on a container not shown within a data storage system in a default store. The synchronization relationship can be created to this container e.g. for example a container with the data storage system . The synchronization relationship can be created to a specific synchronized container shared by a specific user on a specific computer. It is to be appreciated that the user who created the synchronized container is aware that the container is synchronized.

As stated above the user sync manager can facilitate creation of a sync relationship. The invitation e.g. to invite a user to join a peer to peer synchronization community can contain the name of the inviting Manager computer IP address and or any suitable identification technique as well as the community and the scope. The roles levels and or tiers can be mapped to the data storage system permissions e.g. discussed infra . These permissions can be set before the invitation is sent. The invitation can also include an initial data packet that includes the membership list such that when the invitation is accepted the replica can be completely set up without the need for an initial round trip. It is to be appreciated that the invitation can also include the initial data for the container.

Invitations can be created in extensible markup language XML files with the extension for instance SyncInvitation. The sync component registers as the handler for these and displays the accept invitation to synchronize dialog. These invitations can include the following properties community name inviting user inviting computer name invited user invited user role etc. The invitation can be for example an email that can include the following text a To line e.g. including an email address a Subject line e.g. including a subject informing of the invitation a body e.g. containing detailed human readable information about the invitation inviting user inviting computer name role community name etc. an attachment e.g. that can be double clicked to accept the invitation etc.

The user sync manager can also create a synchronized container not shown . In an operating system file exploring application a user can click on a container in the default store within the data storage system and select an option directed to allowing synchronization. By selecting such option the user sync manager can implement the creation of a synchronized container wizard wherein the wizard can specify at least one of the following 1 synchronization mode and 2 conflict policy all of which discussed infra .

To create a synchronized container the following steps can be performed by the user sync manager . The following steps are illustrated as an example and the claimed subject matter is not so limited.

The security group s permissions can also be set based on the configuration in the Security community. In particular the operating system Generic Write Generic Read permission can be granted to Managers and generic read permission is granted to readers and writers respectively.

The following table is an example of the security groups that can be created and the access offered to each in the various folders and share. It is to be appreciated that the following table is an example and the claimed subject matter is not so limited. Moreover the hashes in the following table are 128 byte deterministic hashes but such implementation is not so limited. Note each ACE listed has container inherit and object inherit and the peer to peer sync application is referred to as PTPS.

A synchronized container can have the following structure. Note the data storage system is referred to as DSS and the peer to peer sync application is referred to as PTPS.

The user sync manager can allow the invitation of a user to synchronize the container once a container is created and or at any later time. The user sync manager can specify a contact address e.g. an email address an Internet protocol IP address etc. wherein an invitation containing the invitation data can be attached. It is to be appreciated that the user sync component does not require the automatic sending of the invitation since it can be sent at any time designated by the user. The recipient of the invitation can be accepted by another user based at least in part upon the user implementing the sync component .

In another example the invitation can be saved as a file for later use. The user can send the invitation to the other user by any other suitable means e.g. floppy email text message short message service SMS etc. . The user sync manager can utilize any suitable invitation mechanisms and or techniques. Moreover the user sync manager can provide various invitation levels wherein a user can be invited to participate in the peer to peer synchronization community in one of but not is not limited to roles levels and or tiers 1 Manager read write modify add invite revoke 2 Writer read write modify add 3 Reader read and 4 Contributor read add.

The user sync component further provides the acceptance of an invitation. When an invitation is received and opened the user can implement at least one of the following 1 specify and or create a local data storage system container to synchronize with 2 specify whether this container can be automatically synchronized or manually synchronized and 3 specify the conflict policy to be implemented. The display name of a user can be the name that the security system for a particular environment utilizes. For example in a corporate environment the display name can be the username of the logged on user. It is to be appreciated that in the Internet scenarios the security system can utilize a different name e.g. email alias EP address email address etc. .

The security folder discussed above can be synchronized among the security community. The policy and permissions for this community can be that two way synchronization can occur among managers and one way synchronization occurs from a manager to a non manager. The security folder can have two sub folders that store the list of users and the list of replicas in the community 

A Users folder can contain a list of all the users in the community together with the set of Peers for each user. The following is one example of a users folder and the claimed subject matter is not so limited.

Each user s information can be stored as a separate item based at least in part upon if it is modified by multiple managers the LastWriterWins conflict resolution policy can be used to resolve the conflict. The user Item s namespace and display names are set to the User s SID.

The each User can contain a list of all the peers e.g. synchronization replicas in the community. Each Peer can be persisted containing the following data 

The unit of security on at least one machine can be the User. Thus a user synchronizing multiple machines to the same synchronized container can have the same permissions to that container from all the machines. An important reason for storing a Peer under its User is that an item stored underneath another item as opposed to a folder can be always synchronized in the same transaction as its parent. This together with the entity merge conflict resolution policy ensures that Users and Peers are not out inconsistent with each other.

The following can be an example of a structure for a request folder. Each non manager peer has a single subfolder underneath the Requests container used to store requests to and from the user and the managers as follows.

The name of a subfolder container for a peer can be Requests suffixed by a unique identifier representing the peer. The Requests container can be synchronized among the Requests community. The permissions for this community allow two way synchronization between the local container representing each replica and the corresponding container on each Manager replica. In other words the peer s user and the managers can have full access to the peer s container.

The policy for this community can cause at least one of the following 1 One way synchronization of the FromManager folder to the replica from the same folder of the corresponding Requests subfolder on each Manager replica and 2 One way synchronization of the ToManager folder from the replica to the same folder of the corresponding Requests subfolder on each Manager replica. The ToManager folder stores AdvertiseReplica and RequestRemoval requests. The ToReplica folder stores of CompleteRemoval requests. Requests can be created and deleted and might not be modified. Therefore there rarely are any conflicts in the Requests community. Requests can be deleted simultaneously at multiple replicas but this can be allowed and is not a conflict.

An AdvertiseReplica request can contain the identity of a replica that has joined the community. This can be synced to all managers in the community. A manager that reads the AdvertiseReplica request can add the replica to the permissions list stored in the security community e.g. removing any duplicates deterministically if necessary and deletes the AdvertiseReplica request. This completes the addition of the replica to the community. An AdvertiseReplica request can also be used to communicate any replica configuration changes to the community. An example of this is when the synchronization mode of a replica changes.

A RequestRemoval request can contain the identity of the replica being removed. Such a request can be created by a replica in response to a user initiated removal of the replica. When a Manager detects that a RequestRemoval request has been synchronized into the Requests container of one of it s synchronizing replicas e.g. other than the Requests container of its own replica it deletes the RequestRemoval Request and writes a CompleteRemoval request to the same Requests container.

A CompleteRemoval request has no data in it but can indicate that the replica should delete its share and role based security groups as well as its sync metadata the Replica beneath the Synchronized container . Such a request can be created by a Manager. This can be in response to a RequestRemoval request or in response to a Manager initiated removal of a user or replica. When a replica synchronizes a CompleteRemoval request into its Requests container it deletes its share and the associated security group.

A CompleteRemoval message can be deleted after a fixed expiry period e.g. 7 days . If the message is deleted before the replica has received it the replica still has the sync metadata and can still attempt to sync with the community. Such a sync will fail if there are no other replicas owned by the same user in the community. Otherwise it can succeed. The metadata for this replica can be removed by a manual step. If the user that owns the replica does not own any other replica in the community the user is also removed from the user list. This causes the appropriate security changes to trigger on all synchronized replicas.

Users and managers that have pending removal requests can have the words Pending Removal in the UI of the machine that they have issued the removal request from the UI on other machines does not reflect this e.g. and only reflects the final removal when that occurs . The community name ids used can be for example at least one of the following Data for the data community Security for the security community and the user name for the ToManager and FromManager community of a user. The local and remote end points for all synchronizations can be the location of the appropriate synchronized folder. Within this folder all community names are unique.

In another example the user sync component can allow the addition of a replica to a community by adding the user to the peer to peer synchronized community first. For instance a user can actively join the peer to peer synchronized community wherein various files and or containers can be synchronized. The user can then add a computer to the community utilizing a peer to peer sync application discussed infra from that computer and specifying the share to join.

Furthermore the user sync manager can allow the removal of a user a replica and or a manager. It is to be appreciated that the removal of a user and or replica by a manager can be different from the user or replica owner. A manager can remove a user or replica that is other than itself e.g. it can also remove its own replica discussed infra . The user sync manager can also provide the removal of a replica by its owner user or manager. A user can remove one replica at a time from the community. From such replica the user can invoke removal. If the last manager replica in the community attempts to remove itself but there are other replicas in the community the operation can fail. This can prevent the creation of orphans in the community that have not had a chance to remove their replicas. In one example the last manager e.g. who is also the last user in the community can delete the synchronized folder data and or metadata.

The following relates to the removal of a user or replica by a manager that is different from the user or replica owner. To remove an individual replica a CompleteRemoval request can be written to the Requests container of each of the replicas e.g. whenever it becomes available . To remove all replicas for a specified user a CompleteRemoval request can be written to the Requests container of each of the replicas e.g. whenever it becomes available . If there are no remaining replicas for the specified user all privileges of the user can be immediately revoked by changing the security data and triggering a sync event. This still allows the replica to receive and send data until the CompleteRemoval request can be processed. However no other replica can attempt to send or receive data to from the removed replica.

The following relates to the removal of a replica by its owner. A user can only remove one replica at a time from the community. From the replica the user can invoke removal. This causes a RequestRemoval request to be written to the Requests container of the Replica. If the last Manager replica in the community attempts to remove itself but there are other replicas in the community the operation fails. This prevents the creation of orphans in the community that have not had a chance to remove their replicas. Otherwise the last Manager e.g. who is also the last user in the community deletes all the synchronized folder metadata.

Only Managers can make changes to the Security container that will be correctly synchronized. Security settings disallow any security changes made by non Managers from being synchronized by other users. Once changes are made or received an application running on the manager machine wakes up to the changes and appropriately modifies the security on the Data container and its contents. As these permissions can only be modified with Administrator privileges the application uses the peer to peer sync application service discussed infra to do this. The operating system share access is needed to access the data storage system data. In one example only an Administrator can create a share. Further in another example only an Administrator can create a security group. Therefore the application uses the peer to peer sync application service e.g. peer to peer sync application discussed infra to do this.

The sync component can implement a topology such that there is a direct connection between every replica and manager since managers can make security changes and since these might not be received from a non manager. Furthermore each replica can regularly contact a manager to receive the latest security changes. If a replica cannot contact a manager for a certain period of time e.g. based at least in part upon a heartbeat timeout period it can enter a state where no further data changes can be accepted until it can receive the security configuration from a manager. In addition a user interface not shown can indicate which users have been successfully synchronized with. If a replica can not be contacted its icon displayed with an overlay can indicate this fact. The user interface can also allow the user to visualize any synchronized container that they own. In addition in a data storage system explorer application an overlay icon can identify the container as a synchronized container.

The sync component can include a manual sync component herein referred to as the manual sync that provides a manual synchronization of data files and or containers. Manual synchronization is intended for users that do not want their data synchronized either read from or written to unless explicitly invoked. The membership list includes the synchronization mode for each replica. Other replicas will not attempt to synchronize with a replica that synchronizes manually. A manual synchronization is initiated by a user. This triggers a synchronization event discussed infra .

The sync component can include an auto sync component herein referred to as the auto sync that provides automatic synchronization to a file and or container elected to the peer to peer synchronization community. Automatic synchronization can employ full mesh sync for each of the Data and Security communities. Each replica can sync to other replica it is permitted to sync with. Local changes to the data container are detected by the application on the local machine by means of a data storage system watcher not shown . The watcher can be programmed to avoid being triggered by data storage system sync changes. A synchronization event is triggered when the watcher fires.

The sync component can further utilize a peer to peer sync application that can run as a local system that exposes at least one operation to an application executing on the system. Such operations can be accessed by processes on the same machine e.g. to prevent attacks from other computers . For instance the peer to peer sync application can be installed along with the rest of the sync component by an administrator. It is to be appreciated that the peer to peer sync application can run an instance associated with each data storage system and or computer. Thus the peer to peer sync application is an instance associated with the data storage system and the peer to peer sync application is an instance associated with the data storage system . Moreover it is to be appreciated that for simplicity the peer to peer sync application is depicted yet the peer to peer sync application can also include such aspects.

The peer to peer sync application can implement a string CreateShare container . This operation creates a share at the specified container which can be inside the data storage system and also creates the appropriate permissions and adds the permissions for these groups to the container and to the share. The operation returns the full UNC path to the created share. This operation checks that the user is the owner of the container and fails if this is not the case. Thus the security provided by this API is that only the owner of the container is allowed to share it.

This weakens the security provided by the OS which disallows the owner of a container from creating a share unless the owner also happens to be an Administrator. However this is acceptable as Share level security is more of a holdover from previous versions of operating systems that did not have folder level security.

The peer to peer sync application can implement a SetPermissions container . This operation validates that the calling user is the owner of the container and fails if this is not the case. This operation sets the appropriate group memberships based on the permissions in the permissions list stored in the Security container. For security the caller does not explicitly state the groups or the ACLs these are inferred from the container and the permissions list.

The peer to peer sync application can implement a RemoveShare container . This operation validates that the calling user is the owner of the container and fails if this is not the case. This operation deletes the share created on the container and also deletes the security groups associated with the share.

The peer to peer sync application can be designed to live as an application that can be running in the system tray. The peer to peer sync application can be an application that is responsible for scheduling synchronization and providing progress notification and other data such as conflicts. Moreover the peer to peer sync application is also registered as the handler for invitation requests. The context menu contains the following menu item 1 Options and 2 Exit.

The peer to peer sync application can create a subscription for notifications on data changes in a container e.g. a watcher wherein the watcher can be at least one of the following 1 Creation of synchronized folders and users. A single store wide watcher looks for the creation modification and deletion of NonSynchronizedItems. The handler looks for items named SynchronizedFolderCreationMarker This indicates that a synchronized folder has been created 2 Each synchronized folder has a watcher that monitors the synchronized folder for data changes and 3 Each synchronized folder has a watcher on the Data replica that monitors the synchronized folder for application metadata changes. Recall that the peer to peer sync application metadata is stored underneath the Data replica. For example if there are two synchronized folders on the same computer the total number of watchers is 1 2 2 5 watchers.

The peer to peer sync application can further utilize at least one of the following threads 1 UI thread. This services the system tray icon context menu etc. There is no exception handler for this thread 2 Activity Log thread. This displays the activity log UI. There is no exception handler for this thread 3 Thread pool. This is currently just one thread. All callbacks eventually execute sequentially on this thread. The exception handler for this thread re initializes the sync controller. This typically executes in situations such as the user manually deleting a synchronized folder and 4 Watcher threads these are not directly created by the application. Each watcher can create one thread.

The peer to peer sync application can implement a scheduling algorithm. When a synchronized folder is created the creation Watcher fires. The handler can implement at least one of the following 1 Schedules a Data sync after a startup delay 2 Creates a watcher on the Data replica to watch for changes to the Requests and Security subfolders and 3 Schedules a sync of the Security folder after a startup delay.

When a change occurs to the Security or Requests subfolders the watcher on the Data replica fires. The handler can implement at least one of the following 1 For each incoming requests in a Requests subfolder a Processes the requests described supra b For local changes schedules a sync of the Requests subfolder 2 Updates the security permissions on the replicas and 3 For local changes schedules synchronization of the Security subfolder. When a change occurs to the Data subfolder the watcher on the container fires. If the change is a local change the handler schedules a sync of the data community. After the data community is synchronized a time based sync is scheduled for the data community. After the security community is synchronized a time based sync is scheduled for the security community. After the requests subfolder is synchronized a time based sync is scheduled for the requests subfolder.

The sync component can include an integrate component that facilitates integration between the sync component e.g. and in particular the peer to peer sync application into an operation system with other applications. This application is designed to expose most of its user interface through existing applications such as an operating system file explorer.

A local data storage system container in the operating system file explorer can have various menu items. If the container is not a synchronized folder two menu items can be added such as but not limited to the following 1 Synchronize . . . This brings up the Synchronize dialog which allows the synchronized folder to be created etc. and 2 Join Synchronized Folder . . . This brings up the Join Synchronized Folder Dialog. If the container is a synchronized folder the Synchronize . . . menu item also appears in place of the Allow Synchronization . . . menu item. If there are any logged conflicts on the container a Resolve Conflicts . . . menu item can appear which opens a separate explorer window that displays the Conflicts virtual container added by the namespace extension.

Turning briefly to a screenshot is illustrated that provides creation of a new synchronized folder e.g. synchronized folder dialog . This dialog is used to create a new synchronized folder or to manage an existing synchronized folder as well as to stop synchronizing a folder. The Synchronization dialog contains a property sheet and a General tab as well as tab for each add in such as the data storage system add in and the operating system Shares and Web Folder add in. The Invite button is located at the bottom of the sheet and is active when the synchronized folder is set up for synchronization.

In one example the dialog box can be invoked on a folder that is not a synchronized folder. In such an example at least one of the following can be implemented 1 The Allow users to synchronize with this folder check box is checked 2 The Do not allow users to synchronize with this folder check box is disabled 3 The Synchronized Folder name edit box is read write 4 The Description edit box is read write 5 The Settings OK Cancel and Apply buttons are available 6 The controls in the Synchronization Type and Conflict Resolution groups are disabled and 7 All the controls in the Users group box in the tab can be disabled. The user can type a name and description and can specify the settings on the folder. At that Apply must be clicked to create the synchronized folder.

In another example the management of an existing synchronized folder can be implemented. For instance if the dialog box is invoked on a folder that is an existing synchronized folder at least one of the following can be performed 1 the Allow users to synchronize with this folder check box is checked 2 The Do not allow users to synchronize with this folder check box is disabled 3 The Synchronized Folder name edit box is read only. This is because the name is a community wide identifier 4 The Description edit box is read write 5 The Settings OK Cancel and Apply buttons are available 6 The controls in the Synchronization Type and Conflict Resolution groups are enabled and 7 All the controls in the Users group box in the tab can be enabled.

To delete a synchronized folder the user can check the Do not allow users to synchronize with this folder check box. At this point all the other controls except OK and Allow users to synchronize with this folder are disabled. When OK is clicked a confirmation dialog appears and the synchronized folder is removed. The data storage system container and all its data remain intact. Only the sync replica and other synchronized folder metadata can be removed.

The integrate component can further provide dialog relating to joining a synchronized folder. Turning briefly to a screenshot is illustrated that provided the joining of a synchronized folder in accordance with the claimed subject matter. The screenshot allows for an input of a synchronized folder name wherein if the dialog processes the join request without error a screenshot can be displayed. The screenshot informs the particular folder is synchronized and any roles associated therewith. In one example if the user selects Manage the currently opened dialog boxed can be closed and the synchronized dialog can appear.

Moreover the integrate component can implement a wizard application to facilitate utilizing the sync component to provide a secure peer to peer synchronized community. Turning briefly to a screenshot is displayed wherein a wizard application can allow the invitation of a disparate user and the synchronization of a particular data folder and or container. A screenshot allows a user to select the invitation technique to implement with the particular synchronization.

If the user selects to invite by email an email invitation can be created with text and an email with an invitation attachment. Turning briefly to a screenshot illustrates email invitation sent confirmation. In addition a screenshot illustrates the completion of the invite synchronization user wizard application implemented by the integrate component .

Briefly referring to a screenshot illustrates a wizard application screen that can be displayed when the user selects to save the invitation as a file. It is to be appreciated that the filename location and or extension can be selected from any suitable type associated with the operating system. Referring to a screenshot illustrates the verification of the user completion of saving the invitation to a location within the invite synchronized user wizard application. is a screenshot that allows a user to accept the invitation e.g. accept invitation dialog . The user can click on an invitation e.g. from email from attachment etc. wherein the user can choose a folder to be synchronized with the synchronized folder. As in the screenshot depicts the user can choose any suitable folder to synchronize with a particular folder that is already synchronized.

Turning to a screenshot is illustrated that implements a data storage system add in wherein data storage system synchronization functionality can be factored in as an add in. The screenshot depicts user names computer names and various permission levels e.g. tiers access etc. . Continuing with a screenshot illustrates a could not find user screen that displays to a user when a requested user is not found. To add a user the user can click on the text that reads Click here to add user. The user then types the name of the invited user. The user name can be entered in any suitable way. For example the name can be entered by at least one of the following 1 domain alias e.g. Redmond billg 2 alias e.g. billg wherein a pop up error can be implemented if the alias does not uniquely resolve and 3 name e.g. Bill Grable . The user can hit an Escape key to cancel the operation. When the enter key is pressed the user name can be resolved. Within the screenshot if find people is clicked the Could not find User dialog can be closed and the user picker is displayed. User names cannot be edited once user names are resolved. Users can be deleted completely e.g. a confirmation dialog appears . Users can be added with the default permission level of Reader. 

When a Manager right clicks on a line for a user a context menu with choices can be displayed e.g. reader writer manager remove etc. . The current role of the user can be checked. When a User right clicks on a line for another user or replica no menu is displayed. When a user clicks on the line for the current replica a menu containing just the Remove menu item is displayed. It is to be appreciated that there can be multiple replicas e.g. user computer pairs corresponding to a given user. There can also be multiple replicas corresponding to a given user computer pair. This corresponds to multiple enlistments.

Invitations can be from an end point to a user. For sync through intermediary STI it makes sense to have the at least one of the following choices 1 Create an invitation to sync with the STI endpoint as well as with all data storage system endpoints. This is reasonable if the recipient is connected to all endpoints. In this case the STI endpoint gets updated immediately whenever the recipient s data changes and 2 Create an invitation to sync with the STI endpoint only. In this case the other recipients are unknown. When an invitation is accepted the synchronized folder is created as usual. An AdvertiseReplica message is created as well. The connect handshake proceeds.

The sync component can further include an application programming interface API component that exposes at least one operation associated with the sync component . The API component can perform synchronized folder creation and or management programmatically. For instance the API component can implement a namespace.OS.storage.synchronization.selfhost. The API component can utilize various pseudo code wherein Appendix A is an example of such pseudo code that provides programmability to the claimed subject matter.

It is to be understood that the intelligent component can provide for reasoning about or infer states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification explicitly and or implicitly trained schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the claimed subject matter.

A classifier is a function that maps an input attribute vector x x x x x xn to a confidence that the input belongs to a class that is f x confidence class . Such classification can employ a probabilistic and or statistical based analysis e.g. factoring into the analysis utilities and costs to prognose or infer an action that a user desires to be automatically performed. A support vector machine SVM is an example of a classifier that can be employed. The SVM operates by finding a hypersurface in the space of possible inputs which hypersurface attempts to split the triggering criteria from the non triggering events. Intuitively this makes the classification correct for testing data that is near but not identical to training data. Other directed and undirected model classification approaches include e.g. na ve Bayes Bayesian networks decision trees neural networks fuzzy logic models and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.

At reference numeral at least one user can be invited to participate in a synchronization relationship associated with the identified data. For example a user can identify a portion of data in which a synchronization relationship can be instantiated by inviting a laptop to participate. Thus the user can invite utilizing any suitable technique such as but not limited to email IP address username alias name etc. At reference numeral the tiers and or levels of accessibility can be assigned to various users within the synchronization relationship. For instance a manager can create a synchronization relationship wherein various read write and or add functions can be assigned to users.

At reference numeral a peer to peer synchronization community can be created with at least one user participating therewith. The synchronized community can include replicas e.g. synchronized folders belonging to users in the community and a manager e.g. a member of the community who is authorized to make changes to the replica membership list . In one example managers process a request and make changes to the membership metadata and then synchronize the metadata to the others in the community. At reference numeral each user within the community can participate with a particular level and or tier of access to the data within such synchronized peer to peer community.

In order to provide additional context for implementing various aspects of the claimed subject matter and the following discussion is intended to provide a brief general description of a suitable computing environment in which the various aspects of the subject innovation may be implemented. While the claimed subject matter has been described above in the general context of computer executable instructions of a computer program that runs on a local computer and or remote computer those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multi processor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based and or programmable consumer electronics and the like each of which may operatively communicate with one or more associated devices. The illustrated aspects of the claimed subject matter may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the subject innovation may be practiced on stand alone computers. In a distributed computing environment program modules may be located in local and or remote memory storage devices.

One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operably connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operably connected to one or more server data store s that can be employed to store information local to the servers .

With reference to an exemplary environment for implementing various aspects of the claimed subject matter includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Card Bus Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA Firewire IEEE 1394 and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable programmable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in the suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the claimed subject matter can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices which require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses wire and or wireless communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet Token Ring and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the subject innovation. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject innovation are possible. Accordingly the claimed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

In particular and in regard to the various functions performed by the above described components devices circuits systems and the like the terms including a reference to a means used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. a functional equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary aspects of the claimed subject matter. In this regard it will also be recognized that the innovation includes a system as well as a computer readable medium having computer executable instructions for performing the acts and or events of the various methods of the claimed subject matter.

In addition while a particular feature of the subject innovation may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes and including and variants thereof are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising. 

