---

title: Methods and apparatus for efficiently transmitting interactive application data between a client and server using markup language
abstract: A method for efficiently transferring data between a client and a server includes the steps of: providing an application program; providing an application-independent client process effecting a plurality of client states; providing an application-independent server process effecting a plurality of server states; transferring data from the server process to the client process in response to an application program; and updating at least one client state in response to the transferred data. A related apparatus is also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07596593&OS=07596593&RS=07596593
owner: Citrix Systems, LLC
number: 07596593
owner_city: Fort Lauderale
owner_country: US
publication_date: 20050718
---
This application is a continuation of U.S. patent application Ser. No. 10 004 199 filed on Nov. 2 2001 which is now U.S. Pat. No. 6 920 480 which is itself a continuation of U.S. patent application Ser. No. 09 391 068 filed on Sep. 7 1999 which is now U.S. Pat. No. 6 356 933 all of which are incorporated herein by reference.

The present invention relates to client server networks and in particular to methods and apparatus for remotely executing an application and displaying application output.

Contemporary computer networks consist of a number of computer systems called nodes communicating with other computer systems via communication links. Typically some of the nodes are client nodes and other nodes are server nodes. A client node formulates and delivers queries to a server node. A user of the client node enters the queries through a user interface operating on the client node. The server node evaluates the queries and delivers responses to the client node for display on the client user interface.

Usually the server nodes host a variety of application programs or processes that can be accessed and executed by client nodes. When a client node launches an application program the execution of that application program can occur at either the client node or the server node depending upon the computing model followed by the computer network.

In a client based computing model the application program is packaged and sent down to or pre installed on the client node allowing the client node to run the application using the resources of the client node. This approach has several drawbacks. First the client node must have sufficient memory disk space and processing power to effectively execute the application. A related problem that occurs using this model is that the number of applications a given client is able to execute is limited due to client resource constraints. Further applications built this way are complex to develop and maintain and typically require modification or porting for all supported client computer system types. Moreover this technique exacerbates the administration burden on a network administrator.

In a server based computing model the server node executes the application program and only the control information for the client user interface is transmitted across the computer network to the client node for display. Using this approach user interface events must be sent between the client and the server in order for the server application to process the events. This results in perceived delays of user interface response. Further the application program must be specifically written or changed to support the user interface on the client node. This increases the complexity of the application and prevents this technique from being useful with off the shelf applications.

A refinement of the server based model is to supplant the device driver to which the application communicates in order to send screen and device updates back and forth between the client and the server. This approach avoids requiring applications to be rewritten. However this approach requires device information to be sent between the client and the server in order to maintain the client display again introducing perceived latency into the interface. Further server side processing requirements are increased in order to satisfy resulting device information required for communication with each connected client.

A recent further refinement of the server based model is to deploy the user interface portion of the application as a mark up language document such as Hyper Text Markup Language HTML document. However in using this approach information sent from the server application to the client begins to age immediately. In other words the information may change on the server but the client would not automatically be notified and updated. Further with this approach interactivity requires context switching between pages even to perform simple tasks.

The present invention provides a mechanism by which the user interface portion of the application can be delivered to the computer user either on the same machine on which the application is executing or on another machine remote from the machine executing the application. The invention separates the user interface from the underlying application enabling the user interactive portion of the application to be extremely simple. The invention also permits the user interactive portion to be deployed on a wide range of client hardware environments without bringing with it all the required logic for performing the functionality of a particular application. These features give the user the effect of directly interacting with whole application even though the main part of the application is potentially running somewhere else.

Thus the present invention overcomes many of the problems faced by traditional approaches outlined above. User interface event handling and screen rendering logic stay on the client thus dramatically reducing network traffic and latency. The entire user interface and how that interface connects to application components on the server are sent as a pure data description to the client rather than code . This description is interpreted by the client to render the graphics user interface GUI and connect to the application through the transfer of state running either in the same process space same machine or on the server remote machine .

Because the server can communicate with a particular application client with simply a data description no additional code needs to be installed on the client machine. An application independent client process AICP reads the description and presents that description to the user as a typical client user interface. Therefore the AICP can communicate with an unlimited number of server applications with a new data file description for each program which can be cached automatically as required or as specified by the client . No application specific administration is required for executing an AICP deployed application using this approach.

With the AICP no server side processing is required to either render the user interface portion or handle the GUI events portion of the application. The server does however coordinate state information being passed to and from the client and sends that information automatically to the appropriate application components involved both client and server initiated data changes .

Using the AICP the developer can focus primarily on the functional or business logic portion of the application and let the AICP handle all of the user interface rendering event handling and connection of the user interface controls with the underlying application components. A builder component allows the developer to layout the user interface windows as well as create a relationship between the visual control and the underlying application server component with which it is associated. With the AICP no application specific code needs to be sent to the client. Only user interface controls need be sent if required. Even though there is no code on the client the user s experience with the client application is similar to hand coded clients found in the client based mode. In one embodiment the AICP is embedded in an HTML browser environment which enables web deployment within an HTML page without the limitation associated with HTML.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular description of the embodiments of the invention as illustrated in the accompanying drawings.

Although the method and apparatus of the present invention is described in the context of a web server and web browser process communicating over the Internet those skilled in the art will recognize that the present invention can also be practiced over any other type of network e.g. telephone cable LAN WAN wireless fiber within the same physical computer system or with portions of the invention e.g. the application independent client process operating in an Internet appliance or cable TV set top box. For those individuals who are not familiar with the Internet the world wide web web servers and web browsers a brief overview of these concepts is presented here.

Referring to a user that wishes to access information and execute applications on the Internet typically has a computer workstation that executes an application program known as a web browser . An application independent client process AICP in accordance with the present invention in one embodiment is provided as a plug in to the web browser . The user interacts with the web browser and AICP via a user interface that in one embodiment includes a data entry device e.g. a keyboard and a visual display device e.g. a computer monitor . Under the control of web browser the user workstation sends a web page request over the Internet . Web page data can be in the form of text graphics and other forms of information. Each web server computer system on the Internet has a known address a URL which the user must supply to the web browser in order to connect to the appropriate web server . Because web server can contain more than one web page the user will also specify in the address which particular web page he or she wants to view on web server . The web server computer system executes a web server application program monitors requests and services requests for which it has responsibility. When a request specifies web server web server application program generally accesses a web page corresponding to the specific web page request and transmits the web page to the user workstation . The web page request also includes in one embodiment a request to execute an application program on the web server computer system . An application independent server process AISP receives information contained in this request and responds by executing the desired application program and accessing application components that are needed by the AICP .

In general a web page contains the primary visual data displayed on the user interface of the user workstation . When the web server receives a web page request it builds a web page in HTML and transmits it across the Internet to the requesting web browser . Web browser interprets the HTML and outputs the web page to the monitor of the user workstation . The web page displayed on the user s screen may contain text graphics and links which are addresses of other web pages . These other web pages i.e. those represented by links may be on the same or on different web servers. The user can go to these other web pages by clicking on these links using a mouse or other pointing device. This entire system of web pages with links to other web pages on other servers across the world is known as the World Wide Web .

With the present invention an interactive graphical user interface is embedded in the web page or may be brought up as a separate dialog from the web page. In one embodiment the AICP is an ActiveX control embedded in the previously mentioned HTML page. The ActiveX control interprets XML data that is subsequently downloaded in a description file described below and renders a graphical user interface. This embedded control is an embodiment of the AICP.

Referring to located in memory in the server system is an operating system a web server application application programs application components a transaction processor state information object information and data not shown and one or more instances of an AISP .

The application programs are executed by the CPU of the server system under the control of operating system . Application programs can be executed using program data as input such as that received from the AICP . Application programs can also output their results as program data in memory.

The transaction processor is a program that receives information from the web server application via a common gateway interface not shown interprets the information to determine whether a specific instance of an AISP is required and launches the instance AISP to further process the request received from the AICP .

Referring to the present invention includes the AICP and the AISP . The AICP renders the graphical user interface GUI that is displayed to the user on the user interface . The AICP also maintains a relationship between the control objects displayed on the user interface and the application components maintained on the web server . The AISP tracks the state of the application components along with the control objects displayed on the user workstation that require updates of these application components. Whenever the state changes on either the client control state or the server component state the AICP and AISP take appropriate action based on the data description that defines the relationship between the GUI controls and the server application components hereafter referred to as server components they represent.

Referring also to the relationship between the control objects displayed on the user interface of the user workstation and the server components maintained on the web server include data that describes an explicit relationship between their respective object interfaces. This data will hereafter be referred to as a connection. The AICP and AISP contain logic that can interpret connections that relate a visual control to an application component.

For example a scroll bar control is representative of a type of control object that can be displayed on the user interface of the user workstation . The scroll bar control can be associated with the value of an application component such as the temperature of an industrial process. As the server application detects a temperature change the state of the Application Components is changed and these state changes are forwarded to the client. The scrollbar is subsequently redrawn by the AICP to reflect the new value. Likewise if a scroll bar is connected to an Application Component that controls a thermostat then when the user interacts with the scroll bar on the user interface the state change is transmitted to the Web Server Application Program which would change the state of the appropriate Application Component which would subsequently set the thermostat.

Although this is a simple example connections can form relationships e.g. data relationships in between very complex object types like composite components components that contain component references as well as component collections a list of components . Controls can be tied connected to complex components or a composite of controls commonly referred to as a dialog . The more complex the relationship the more verbose the connection information. However connection information can be packaged as a named entity which can be referred to in another context so that connection reuse is possible.

A physical connection exists between the AICP and AISP . This physical connection can be either network based server and client being different nodes on a network or memory based server and client being on the same computer system . This means that control objects can be connected to server components where they both exist on the same or different physical machines as well as the same process on the same machine or different processes on different machines .

The connection information can be delineated in a description file in a variety of formats such as in XML format as discussed below. The XML data also includes the GUI layout description i.e. user interface data in . Whenever a control object is associated to a server component within a GUI layout a dialog window the connection description is included in context with the layout information. This is the information the AICP uses to run the application and display the results to the user. Once a dialog is running via the AICP state changes that occur on either the control objects control states or server components component state are packaged and sent between the AICP and AISP . This is a two way connection and is asynchronous to minimize interactive latency.

The description file can be in an XML format which is a convenient format for deployment of data over a network and resembles an attributed file structure for example as shown in the Appendix. A number of other suitable database formats are also available such as flat file SQL OODB etc. The XML format consists of name type and value pairs which allow both the AICP and the AISP to traverse and interpret the information in the same file format during runtime. The XML file that is interpreted by the client and AISPs at runtime can be identical. The data contained in the XML file will be interpreted differently by the AICP and AISP in accordance with the different functions that need to be performed on each side of the connection. Although the description file is discussed herein as being located on the same computer systems as the AICP and AISP those skilled in the art will recognize that the description file can be located in any networked location that is accessible by the AICP and AISP.

Referring to and the AISP performs the following functions sends the XML data stream to the AICP reads the description file which can be transmitted as an XML data stream responds to requests from the AICP to attach to server components maintains a stateful connection and tracks context on the web server . Note that multiple AISPs can exist in the memory of the web server at any given time.

In use and referring to a developer first designs step the layout of the user interface that will ultimately be displayed on the user workstation and in so doing establishes the relationships between the control objects and the server components . Once this information is formulated it is stored step in a description file . When the AICP transmits a request to execute an application program on the web server the transaction processor receives step the request instantiates step an AISP associated with the application program if an instance is not already loaded in memory and launches step the application program . Once the AICP receives the description file it transmits a connection request to the AISP . The AISP receives step the connection request and loads step the description file associated with the requested application program into server memory.

The description file associated with the requested application program is loaded in order to connect the AICP with the appropriate server components . The description file contains sufficient information with respect to the relationships between control objects and server components to enable the AISP to manage the server components and the AICP to manage the control objects.

Upon loading the description file the AISP forms step a manager object for each server component that will likely be involved in that client server connection. In addition a unique manager object is created step for each control that could be instantiated on the client referred to as the Meta object as well. The Meta object stores data such as member information dialog information connection information object to object connection information and a reference to a client manager component in order to effectively connect control objects to server components .

Member information includes the properties functions and events available on the interface of a control object. This information is used to tell a connection handler how to communicate with particular control objects as well as server components involved in the connection during runtime. Dialog information is the GUI layout information that is used by the AICP to render the user interface on the user workstation . The dialog information also specifies the type of control object or server component that will be involved in the connection. Connection information describes how a particular control object is associated with a particular server component . Object to object connection information provides a connection description that enables a client to server component connection and a server component to server component connection. This allows server components to communicate with each other without knowing any specific details of the objects they are connected to.

The client manager component provides a standard interface allowing the AISP to talk to the back end application program . The client manager is a component interface that must be implemented by the server application program in order to initialize the behavior of the AICP . The client manager component interface in one embodiment includes 4 functions ClientCanConnect ClientCanDisconnect ClientConnected ClientDisconnected . These functions are called whenever a new AICP wants to connect or disconnect an application program on the web server .

When a dialog is created in the AICP the AISP is notified that it must create a physical attachment to the relevant instance of the server component on the server . In order to establish this physical attachment the AISP maps step the object controls in the user interface to server components . The dialog description of the server component can be found in the Meta object . At this point the AISP obtains the name of the dialog that is to be created on the AICP and receives access to an instance of server component . A connection handler is instantiated for each control that requires connection to a part of the server component instance. The connection handler initializes and maintains the connection between the control object and server component . Only connection handlers that are marked as run on the server would be created at this point. If they were marked as run on the client then the AICP would have already created one. The connection handler is assigned an identifier that is identical to that provided for the control object of the AICP . This identifier is used to synchronize the information messages going back and forth between the AICP and the AISP .

Similar to the dialog object described in the AICP section the server forms step a client side proxy object that arbitrates messages sent between the client side of the server connection and the AICP . The connection handler communicates with this proxy object as if it were the control object itself. The proxy object transmits a value for the control object to the AICP which in turn will modify the control object on the user interface . In this manner the proxy object can transmit initial state information to the AICP step as well as updating the AICP with state changes of a particular server component on the server step . Similarly when the control state of a control object on the AICP changes the modified control state is sent to the AISP using the control identifier assigned to that particular control object via the proxy object . Once the modified control state had been received by the proxy object the proxy object notifies the connection handler that the state of the control object has changed so that the modified state can be incorporated into the appropriate server component .

Similar to the AICP the AISP maintains step the connection for the duration of the dialog. When the dialog is closed by the user or via some other fashion e.g. a notification by a server component to close all connected dialogs the AISP removes and deletes each of the connection handlers associated with the connection to the dialog. In addition the proxy objects used to communicate on behalf of the control objects are discarded as well.

The AISP uses a component manager not shown to maintain a list of components involved in client side connections. The component manager keeps track of all the dialogs that are actively attached to server components for the duration of the dialog. Each time a dialog is created on an AICP a reference to the dialog is added to the list maintained by the component manager. This reference identifies all of the server side connection handlers which in turn reference control proxies involved in a connection. When a dialog is closed the AISP refers to this list to lookup the dialog connection information and removes the dialog reference from the list.

Although the AICP and AISP perform different roles much of their respective code is identical. The key to making both the AICP and AISP nearly identical is in providing a standard object interface that connects control objects on the AICP and server components on the AISP . The interpreter logic of the application independent processes can connect each respective side client or server in exactly the same way through a standard object interface . The fact that the control object is visual is just a side affect of the implementation of the object. Therefore the present invention can be applied to a number of implementations that do not require a visual presentation.

Referring again to the AICP can reside in the memory of the user workstation . The memory also holds the operating system installed on the user workstation and the web browser application program within which the AICP is launched. The AICP performs the following functions reads the data description file renders the user interface attaches connected controls maintains a stateful connection and tracks the context on the client.

Referring also to the AICP is first installed on the user workstation . The most common installation method is to manually install the AICP through the system install procedure e.g. in the Microsoft Windows operating system using the Add Remove Programs function . Alternatively the AICP can be automatically installed through a web based plug in protocol.

Because there is no code on the client that represents the application program the AICP supports a number of approaches in establishing the initial connection to the server side application program . The information required by the AICP to interact with the application program includes the name of the server process to execute the location of the description file on a network server any initial arguments that must be communicated to the application program when connected and the current version of the description file. This information can be contained in an initialization file that is loaded when the AICP is launched.

When the AICP is started it will access step the initialization file and using the information contained therein will transmit a request to the server to run the desired application program . As previously discussed the transaction processor on the server sends a description file to the AICP which then compares the version stamp of the description file received to that contained in the local memory of the user workstation obtained from a prior transaction or during installation of the AICP . The AICP can then determine step which version of the description file to load. By default the AICP only downloads the description file from the transaction processor if the version stamp of the file on the server is later than a cached file already resident on the client. The description file is peculiar to a specific application program .

Once downloaded or loaded locally from a file cache the description file provides the AICP with the dialog description of the application program . The AICP then proceeds to interpret step the description data of that dialog in order to construct the control objects that exist within the dialog and lay out the control objects onto the user interface for presentation to the user.

Meanwhile the AICP transmits a request step to the AISP to establish a logical connection to the server components . Upon successfully connecting to the server components on the server the AICP receives step and subsequently populates the dialog control objects with control state information corresponding to the server component state .

State changes for a particular visual context e.g. a dialog are sent to the AICP as one logical packet for optimization reasons although the structure of the state change packet is identical regardless if a single state change or a plurality of state changes occurred. At this point the control objects are actively connected to the server components so that state changes on either side are reflected in the other. Once the control objects reflect the current server component state the dialog is then displayed step to the user via the user interface .

Control objects are associated with the server components by a reference property that is provided as part of the description of the control object which is included in the overall dialog layout description. This reference can be the name assigned to the connection description and the type of the associated server component . A unique control identifier is computed for each of the control objects that are connected to server components . This control identifier is used to coordinate state changes with the AISP when connecting to the appropriate server component instance that is assigned to that control object . Note that many control objects can be tied to the same server component

Since the AICP and the AISP are largely identical processes some of the connections can reside on the client. At times it is useful to instantiate the connection logic that binds a client s control object to a server s application component on either the AICP or the AISP . The selection of where to instantiate the connection logic depends on the volume of information flow coming into each side of the connection. For example if the load is heaviest on the client side then it is better to instantiate the connection handler on the client. In this way bandwidth utilization can be tailored based on the kind of connection and the client and server components involved.

For as long as a dialog is displayed on a particular AICP the connection handlers maintain step a real time stateful connection to the associated server components . The connection handler responds to state changes on either the client control object or on its associated server component . The connection handler is also able to transform the data based on a set of rules defined by the developer. The connection handler is able to maintain state on each side of the connection by maintaining step references to the control objects involved in the connection.

The connection handler also maintains a stateful connection whenever a member of a complex component changes. This happens when a property which is a member of a complex component which can hold a value of a particular type or be empty of a complex control is assigned a new value which itself can be a complex or simple component . When the connection handler detects a property change it executes the appropriate connection transformation. In addition if a control object was attached to that property it would not be connected to the new value. The connection handler involved would remove the reference to the old value and create a reference to the newly assigned value of the property . In this manner the control objects are updated step with state changes that are received from the AISP and the state changes occurring in a control object are transmitted step to the AISP in order to update the appropriate server components .

A GUI application involves several relationships that describe the user access to the underlying application. For example a dialog can contain a button which is an example of a control object that when selected will popup another dialog. It is important for the AICP and AISP to actively maintain this context with the server components . A popup dialog usually represents a complex property member of a complex component. Another popup scenario is when the popup dialog provides an argument to a function that is a member of a complex component. These data relationships represent application context that is tracked by the AIP thereby freeing the developer from having to explicitly create and maintain them.

The AICP creates a container object for each dialog that is created on the user workstation . This container object tracks the duration of the dialog with respect to the server component . The container object detects when the dialog is closed by the user and takes appropriate action for closing down the connection handlers associated with the control objects within the dialog. The container object also coordinates processing of state change messages that flow between the AICP and the AISP . Whenever the container object receives a state change from the AISP it extracts the control identifier contained in the message locates the control objects associated with that control identifier and uses the component interface of the control object to effect the state change directly on the control object . Likewise when the control object changes state the container object is notified of the change packages up the state change message and sends it to the AISP .

The container object sends state changes to the AISP for the parts of the control object s interface in which the connection handler is interested. The connection handler is interested in the control members delineated in the description file that were used to create the connection handler . The container object that wraps the dialog also creates an object container for each control object instantiated within the dialog in order to maintain its stateful lifetime.

Both the AICP and AISP have container objects that manage the state of the components to which they are connected. These containers track the state of the objects as well as the application context in which these objects reside. The application context refers to the manner in which objects are referenced by the AICP and the AISP . For example when a dialog is connected to a server component the AICP creates a container for the dialog and the AISP creates a container for the server component . When the user closes the dialog the client container detects this action and notifies the server container. Each container can then take appropriate action based on the type of operation. The nature of the containers are hierarchical in that each container can hold other containers based on the complexity of the objects involved in a particular connection.

There are two types of client containers a dialog container and a control container. The dialog container manages the life of the dialog and the control container manages the flow of state information to the individual control. These containers enable the attachment of the user interface elements to server side objects as well as maintain the state integrity during the life of the connection.

The dialog container is an object that is created for each window displayed on the user interface . The dialog container is created in accordance with the XML description in the description file . The dialog container processes the XML description and creates the dialog layout as well as the control objects contained within the description. In addition the dialog container creates a control container for any controls that are connected to data on the server. Controls that are created for display purposes only do not need a control container for example a label or bitmap decoration .

The dialog container supports several functions including rendering the window itself creating the control containers as needed notifying the AISP when the dialog is closed and deleting subordinate control container objects and closing child dialogs that depend from parent dialogs as appropriate.

The control container is created for each control object that is tied to data. The control container computes and holds a unique control identifier that is used to send messages to the AISP and to access the appropriate server components . When the AISP initially transmits state data to the AICP the control container sets the state on the control object during initialization. The control container also receives state change messages during the connection life of the control object and updates the control object in accordance therewith. When the state of the control object changes the control container detects the change and sends a state change message to the appropriate server element via the AISP using the control identifier and an identifier of the AISP instance . It is noteworthy that only the control container processes the state changes that are involved in a connection description and that most state changes on the control object do not involve the connection thus reducing unnecessary network traffic.

In addition to the control containers there are two kinds of server containers component containers and member containers. For as long as the client dialog is open the server component container maintains a reference to the underlying component instance that the client is connected to. The member container manages the flow of state information on the individual member of the component similar to function and property . These containers enable the attachment of the user interface elements to client side control objects as well as maintain the state integrity during the life of the connection.

A component container is created by the AISP for each server component that is connected to a client dialog. The component container adds a reference count to the server component so that it will not be lost during the life of the remote client dialog. For each member of the server component that is involved in a connection to a control object a member container object is created which will be responsible for maintaining the member s state during the life of the connection. When the dialog is closed on the client the component container destroys all the child member containers that were used to maintain that dialog s connection on the server.

A member container is created for each member of a server component that is involved in a connection to a control object . The member container computes and stores a unique control identifier that is used to send messages to the AICP in order to access the correct control object . The member container also sends initial state information to the control object during the initialization of the dialog. Further the member container receives data change message from the AICP and updates the appropriate member of the server component in accordance therewith.

Whenever the state of the component member changes the member container detects the change and subsequently sends a message containing the state change information to the appropriate control object using the control identifier and the server instance identifier . It is noteworthy that only the member container processes the state changes that are involved in connection description and that most of the state changes on the server are not involved in a connection thus reducing unnecessary network traffic.

One of the capabilities of the AIP invention is its ability to allow multiple AICPs to attach to the same AISP. The first time that a client requests a connection to a server an AISP assigned to the application will be instantiated. The AISP in turn instantiates the client manager object for that application. At any time another client can request to attach to the same application instance on the server. Instead of instantiating another AISP for that application the same AISP instance will be used as well as the client manager that was created for it . If two clients are then accessing the same server component instance on the server they will be able to interact and access the same state. This allows real time collaborative access to shared state that is not easily provided with traditional forms of client deployment.

With collaboration deployment a list of dialogs running on a particular client is associated with a client manager object that resides on the server. A list of client managers resides within the AISP that reflects the current number of active clients attached to the same server application . Even though many clients can see the same information on the server they do not always have to view exactly the same components in the same way. The client manager can direct different clients to have different dialog representations of the same server components. Also based on the client user s navigation through their own dialog instances each client user may see dramatically different information at any given time.

The present invention may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk a hard disk a CD ROM a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language. Some examples of languages that can be used include C C or JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

While the invention has been particularly shown and described with reference to several exemplary embodiments thereof it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

