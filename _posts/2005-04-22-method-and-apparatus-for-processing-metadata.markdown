---

title: Method and apparatus for processing metadata
abstract: Methods and apparatuses for processing metadata are described herein. In one embodiment, when a file (e.g., a text, audio, and/or image files) having metadata is received, the metadata and optionally at least a portion of the content of the file are extracted from the file to generate a first set of metadata. An analysis is performed on the extracted metadata and the content to generate a second set of metadata, which may include metadata in addition to the first set of metadata. The second set of metadata may be stored in a database suitable to be searched to identify or locate the file. Other methods and apparatuses are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08156123&OS=08156123&RS=08156123
owner: Apple Inc.
number: 08156123
owner_city: Cupertino
owner_country: US
publication_date: 20050422
---
This application is a continuation in part of U.S. patent application Ser. No. 10 877 584 filed on Jun. 25 2004 now U.S. Pat. No. 7 730 012. This application also claims priority to co pending U.S. Provisional Patent Application No. 60 643 087 filed on Jan. 7 2005 which provisional application is incorporated herein by reference in its entirety this application claims the benefit of the provisional s filing date under 35 U.S.C. 119 e . This present application hereby claims the benefit of these earlier filing dates under 35 U.S.C. 120.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention relates generally to data processing. More particularly this invention relates to processing metadata.

Modern data processing systems such as general purpose computer systems allow the users of such systems to create a variety of different types of data files. For example a typical user of a data processing system may create text files with a word processing program such as Microsoft Word or may create an image file with an image processing program such as Adobe s PhotoShop. Numerous other types of files are capable of being created or modified edited and otherwise used by one or more users for a typical data processing system. The large number of the different types of files that can be created or modified can present a challenge to a typical user who is seeking to find a particular file which has been created.

Modern data processing systems often include a file management system which allows a user to place files in various directories or subdirectories e.g. folders and allows a user to give the file a name. Further these file management systems often allow a user to find a file by searching for the file s name or the date of creation or the date of modification or the type of file. An example of such a file management system is the Finder program which operates on Macintosh computers from Apple Computer Inc. of Cupertino Calif. Another example of a file management system program is the Windows Explorer program which operates on the Windows operating system from Microsoft Corporation of Redmond Wash. Both the Finder program and the Windows Explorer program include a find command which allows a user to search for files by various criteria including a file name or a date of creation or a date of modification or the type of file. However this search capability searches through information which is the same for each file regardless of the type of file. Thus for example the searchable data for a Microsoft Word file is the same as the searchable data for an Adobe PhotoShop file and this data typically includes the file name the type of file the date of creation the date of last modification the size of the file and certain other parameters which may be maintained for the file by the file management system.

Certain presently existing application programs allow a user to maintain data about a particular file. This data about a particular file may be considered metadata because it is data about other data. This metadata for a particular file may include information about the author of a file a summary of the document and various other types of information. A program such as Microsoft Word may automatically create some of this data when a user creates a file and the user may add additional data or edit the data by selecting the property sheet from a menu selection in Microsoft Word. The property sheets in Microsoft Word allow a user to create metadata for a particular file or document. However in existing systems a user is not able to search for metadata across a variety of different applications using one search request from the user. Furthermore existing systems can perform one search for data files but this search does not also include searching through metadata for those files. Further the metadata associated with a file is typically limited to those standardized metadata or content of the file.

Methods and apparatuses for processing metadata are described herein. In one embodiment when a file e.g. a text audio and or image files having metadata is received the metadata and optionally at least a portion of the content of the file are extracted from the file to generate a first set of metadata. An analysis is performed on the extracted metadata and the content to generate a second set of metadata which may include metadata in addition to the first set of metadata. The second set of metadata may be stored in a database suitable to be searched to identify or locate the file.

According to certain embodiments of the invention the metadata that can be searched for example to locate or identify a file may include additional metadata generated based on the original metadata associated with the file and or at least a portion of content of the file which may not exist in the original metadata and or content of the file. In one embodiment the additional metadata may be generated via an analysis performed on the original metadata and or at least a portion of the content of the file. The additional metadata may capture a higher level concept or broader scope information regarding the content of the file.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.

Methods and apparatuses for processing metadata are described herein. In the following description numerous details are set forth to provide a more thorough explanation of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

As shown in the computer system which is a form of a data processing system includes a bus which is coupled to a microprocessor s and a ROM Read Only Memory and volatile RAM and a non volatile memory . The microprocessor may be a G3 or G4 microprocessor from Motorola Inc. or one or more G5 microprocessors from IBM. The bus interconnects these various components together and also interconnects these components and to a display controller and display device and to peripheral devices such as input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art. Typically the input output devices are coupled to the system through input output controllers . The volatile RAM Random Access Memory is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory. The mass storage is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or other types of memory systems which maintain data e.g. large amounts of data even after power is removed from the system. Typically the mass storage will also be a random access memory although this is not required. While shows that the mass storage is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art. In one embodiment the I O controller includes a USB Universal Serial Bus adapter for controlling USB peripherals and an IEEE 1394 controller for IEEE 1394 compliant peripherals.

It will be apparent from this description that aspects of the present invention may be embodied at least in part in software. That is the techniques may be carried out in a computer system or other data processing system in response to its processor such as a microprocessor executing sequences of instructions contained in a memory such as ROM RAM mass storage or a remote storage device. In various embodiments hardwired circuitry may be used in combination with software instructions to implement the present invention. Thus the techniques are not limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system. In addition throughout this description various functions and operations are described as being performed by or caused by software code to simplify description. However those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the code by a processor such as the microprocessor .

The method of may be implemented for programs which do not store or provide metadata. In this circumstance a portion of the operating system provides for the capture of the metadata from the variety of different programs even though the programs have not been designed to provide or capture metadata. For those programs which do allow a user to create metadata for a particular document certain embodiments of the present invention may allow the exporting back of captured metadata back into data files for applications which maintain metadata about their data files.

The method of allows information about a variety of different files created by a variety of different application programs to be accessible by a system wide searching facility which is similar to the way in which prior art versions of the Finder or Windows Explorer can search for file names dates of creation etc. across a variety of different application programs. Thus the metadata for a variety of different files created by a variety of different application programs can be accessed through an extension of an operating system and an example of such an extension is shown in as a metadata processing software which interacts with other components of the system and will be described further below.

One particular field which may be useful in the various metadata formats would be a field which includes an identifier of a plug in or other software element which may be used to capture metadata from a data file and or export metadata back to the creator application.

Various different software architectures may be used to implement the functions and operations described herein. The following discussion provides one example of such an architecture but it will be understood that alternative architectures may also be employed to achieve the same or similar results. The software architecture shown in is an example which is based upon the Macintosh operating system. The architecture includes a metadata processing software and an operating system OS kernel which is operatively coupled to the metadata processing software for a notification mechanism which is described below. The metadata processing software is also coupled to other software programs such as a file system graphical user interface software which may be the Finder an email software and other applications . These applications are coupled to the metadata processing software through client application program interface which provide a method for transferring data and commands between the metadata processing software and the software and . These commands and data may include search parameters specified by a user as well as commands to perform searches from the user which parameters and commands are passed to the metadata processing software through the interface . The metadata processing software is also coupled to a collection of importers which extract data from various applications. In particular in one exemplary embodiment a text importer is used to extract text and other information from word processing or text processing files created by word processing programs such as Microsoft Word etc. This extracted information is the metadata for a particular file. Other types of importers extract metadata from other types of files such as image files or music files. In this particular embodiment a particular importer is selected based upon the type of file which has been created and modified by an application program. For example if the data file was created by PhotoShop then an image importer for PhotoShop may be used to input the metadata from a PhotoShop data file into the metadata database through the metadata processing software . On the other hand if the data file is a word processing document then an importer designed to extract metadata from a word processing document is called upon to extract the metadata from the word processing data file and place it into the metadata database through the metadata processing software . Typically a plurality of different importers may be required in order to handle the plurality of different application programs which are used in a typical computer system. The importers may optionally include a plurality of exporters which are capable of exporting the extracted metadata for particular types of data files back to property sheets or other data components maintained by certain application programs. For example certain application programs may maintain some metadata for each data file created by the program but this metadata is only a subset of the metadata extracted by an importer from this type of data file. In this instance the exporter may export back additional metadata or may simply insert metadata into blank fields of metadata maintained by the application program.

The software architecture also includes a file system directory for the metadata. This file system directory keeps track of the relationship between the data files and their metadata and keeps track of the location of the metadata object e.g. a metadata file which corresponds to the data file from which it was extracted created by each importer. In one exemplary embodiment the metadata database is maintained as a flat file format as described below and the file system directory maintains this flat file format. One advantage of a flat file format is that the data is laid out on a storage device as a string of data without references between fields from one metadata file corresponding to a particular data file to another metadata file corresponding to another data file . This arrangement of data will often result in faster retrieval of information from the metadata database .

The software architecture of also includes find by content software which is operatively coupled to a database which includes an index of files. The index of files represents at least a subset of the data files in a storage device and may include all of the data files in a particular storage device or several storage devices such as the main hard drive of a computer system. The index of files may be a conventional indexed representation of the content of each document. The find by content software searches for words in that content by searching through the database to see if a particular word exists in any of the data files which have been indexed. The find by content software functionality is available through the metadata processing software which provides the advantage to the user that the user can search concurrently both the index of files in the database for the content within a file as well as the metadata for the various data files being searched. The software architecture shown in may be used to perform the method shown in or alternative architectures may be used to perform the method of .

The method of may begin in operation in which a notification of a change for a file is received. This notification may come from the OS kernel which notifies the metadata processing software that a file has been changed. This notification may come from sniffer software elements which detect new or modified files and deletion of files. This change may be the creation of a new file or the modification of an existing file or the deletion of an existing file. The deletion of an existing file causes a special case of the processing method of and is not shown in . In the case of a deletion the metadata processing software through the use of the file system directory deletes the metadata file in the metadata database which corresponds to the deleted file. The other types of operations such as the creation of a new file or the modification of an existing file causes the processing to proceed from operation to operation in which the type of file which is the subject of the notification is determined. The file may be an Acrobat PDF file or an RTF word processing file or a JPEG image file etc. In any case the type of the file is determined in operation . This may be performed by receiving from the OS kernel the type of file along with the notification or the metadata processing software may request an identification of the type of file from the file system graphical user interface software or similar software which maintains information about the data file such as the creator application or parent application of the data file. It will be understood that in one exemplary embodiment the file system graphical user interface software is the Finder program which operates on the Macintosh operating system. In alternative embodiments the file system graphical user interface system may be Windows Explorer which operates on Microsoft s Windows operating system. After the type of file has been determined in operation the appropriate capture software e.g. one of the importers is activated for the determined file type. The importers may be a plug in for the particular application which created the type of file about which notification is received in operation . Once activated the importer or capture software imports the appropriate metadata for the particular file type into the metadata database such as metadata database as shown in operation . Then in operation the metadata is stored in the database. In one exemplary embodiment it may be stored in a flat file format. Then in operation the metadata processing software receives search parameter inputs and performs a search of the metadata database and optionally also causes a search of non metadata sources such as the index of files and causes the results of the search to be displayed in a user interface. This may be performed by exchanging information between one of the applications such as the software or the software or the other applications and the metadata processing software through the interface . For example the file system software may present a graphical user interface allowing a user to input search parameters and allowing the user to cause a search to be performed. This information is conveyed through the interface to the metadata processing software which causes a search through the metadata database and also may cause a search through the database of the indexed files in order to search for content within each data file which has been indexed. The results from these searches are provided by the metadata processing software to the requesting application which in the example given here was the software but it will be appreciated that other components of software such as the email software may be used to receive the search inputs and to provide a display of the search results. Various examples of the user interface for inputting search requests and for displaying search results are described herein and shown in the accompanying drawings.

It will be appreciated that the notification if done through the OS kernel is a global system wide notification process such that changes to any file will cause a notification to be sent to the metadata processing software. It will also be appreciated that in alternative embodiments each application program may itself generate the necessary metadata and provide the metadata directly to a metadata database without the requirement of a notification from an operating system kernel or from the intervention of importers such as the importers . Alternatively rather than using OS kernel notifications an embodiment may use software calls from each application to a metadata processing software which receives these calls and then imports the metadata from each file in response to the call.

As noted above the metadata database may be stored in a flat file format in order to improve the speed of retrieval of information in most circumstances. The flat file format may be considered to be a non B tree non hash tree format in which data is not attempted to be organized but is rather stored as a stream of data. Each metadata object or metadata file will itself contain fields such as the fields shown in the examples of . However there will typically be no relationship or reference or pointer from one field in one metadata file to the corresponding field or another field in the next metadata file or in another metadata file of the same file type. shows an example of the layout in a flat file format of metadata. The format includes a plurality of metadata files for a corresponding plurality of data files. As shown in metadata file is metadata from file of application A and may be referred to as metadata file A. Similarly metadata file is metadata from file of application B and may be referred to as metadata file B. Each of these metadata files typically would include fields which are not linked to other fields and which do not contain references or pointers to other fields in other metadata files. It can be seen from that the metadata database of includes metadata files from a plurality of different applications applications A B and C and different files created by each of those applications. Metadata files and are additional metadata files created by applications A B and C as shown in .

A flexible query language may be used to search the metadata database in the same way that such query languages are used to search other databases. The data within each metadata file may be packed or even compressed if desirable. As noted above each metadata file in certain embodiments will include a persistent identifier which uniquely identifies its corresponding data file. This identifier remains the same even if the name of the file is changed or the file is modified. This allows for the persistent association between the particular data file and its metadata.

Various different examples of user interfaces for inputting search parameters and for displaying search results are provided herein. It will be understood that some features from certain embodiments may be mixed with other embodiments such that hybrid embodiments may result from these combinations. It will be appreciated that certain features may be removed from each of these embodiments and still provide adequate functionality in many instances.

The combination of text entry region and the search parameter menu bar allow a user to specify a search query or search parameters. Each of the configurable pull down menus presents a user with a list of options to select from when the user activates the pull down menu. As shown in the user has already made a selection from the configurable pull down menu to specify the location of the search which in this case specifies that the search will occur on the local disks of the computer systems. Configurable pull down menu has also been used by the user to specify the kind of document which is to be searched for which in this case is an image document as indicated by the configurable pull down menu which indicates images as the selected configuration of this menu and hence the search parameter which it specifies. The configurable pull down menu as shown in represents an add search parameter pull down menu. This add search parameter pull down menu allows the user to add additional criteria to the search query to further limit the search results. In the embodiment shown in each of the search parameters is logically ANDed in a Boolean manner. Thus the current search parameter specified by the user in the state shown in searches all local disks for all images and the user is in the middle of the process of selecting another search criteria by having selected the add search criteria pull down menu resulting in the display of the pull down menu which has a plurality of options which may be selected by the user.

It will also be appreciated that the various options in the pull down menus may depend upon the fields within a particular type of metadata file. For example the selection of images to be searched may cause the various fields present in the metadata for an image type file to appear in one or more pull down menus allowing the user to search within one or more of those fields for that particular type of file. Other fields which do not apply to images types of files may not appear in these menus in order reduce the complexity of the menus and to prevent user confusion.

Another feature of the present invention is shown in . In particular the side bar region A which is the user configurable portion of the side bar includes a representation of a folder which represents the search results obtained from a particular search which search results may be static or they may be dynamic in that in certain instances the search can be performed again to obtain results based on the current files in the system. The folder in the example shown in represents a search on a local disk for all images done on December 10. By selecting this folder in the side bar region A the user may cause the display in the display region of the results of that search. In this way a user may retrieve a search result automatically by saving the search result into the side bar region A. One mechanism for causing a search result or a search query to be saved into the side bar region A is to select the add folder button which appears in the bottom portion of the window . By selecting this button the current search result or search query is saved as a list of files and other objects retrieved in the current search result. In the case where the search query is saved for later use rather than the saving of a search result then the current search query is saved for re use at a later time in order to find files which match the search query at that later time. The user may select between these two functionalities saving a search result or saving a search query by the selection of a command which is not shown.

The window includes an additional feature which may be very useful while analyzing a search result. A user may select individual files from within the display region and associate them together as one collection. Each file may be individually marked using a specific command e.g. pressing the right button on a mouse and selecting a command from a menu which appears on the screen which command may be add selection to current group or similar such commands. By individually selecting such files or by selecting a group of files at once the user may associate this group of files into a selected group or a marked group and this association may be used to perform a common action on all of the files in the group e.g. print each file or view each file in a viewer window or move each file to a new or existing folder etc. . A representation of this marked group appears as a folder in the user configurable portion A. An example of such a folder is the folder shown in the user configurable portion A. By selecting this folder e.g. by positioning a cursor over the folder and pressing and releasing a mouse button or by pressing another button the user as a result of this selection will cause the display within the display region of the files which have been grouped together or marked. Alternatively a separate window may appear showing only the items which have been marked or grouped. This association or grouping may be merely temporary or it may be made permanent by retaining a list of all the files which have been grouped and by keeping a folder or other representations of the grouping within the user configurable side bar such as the side bar A. Certain embodiments may allow multiple different groupings to exist at the same time and each of these groupings or associations may be merely temporary e.g. they exist only while the search results window is displayed or they may be made permanent by retaining a list of all the files which have been grouped within each separate group. It will be appreciated that the files within each group may have been created from different applications. As noted above one of the groupings may be selected and then a user may select a command which performs a common action e.g. print or view or move or delete on all of the files within the selected group.

The window shown in includes a display region which shows the results of a search these results may be shown dynamically as the user enters search parameters or the results may be shown only after the user has instructed the system to perform the search e.g. by selecting a perform search command . The window includes conventional window controls such as a resizing control a scrolling control a title bar which may be used to move the window a window close button a window minimize button and a window resize button and respectively. The window also includes a user configurable side bar region A and a system specified side bar region B. It can be seen from that a browse mode has been selected as indicated by the highlighted browse icon C in the system specified side bar region B. The window also includes a text entry region which a user may use to enter text for a search and the window also includes view selector buttons .

A column of window allows a user to select various search parameters by selecting one of the options which in turn causes the display of a submenu that corresponds to the selected option. In the case of the user has selected the kind option and then has used the submenu to select the photos option from the submenu resulting in an indicator photos to appear in the column under the kind option as shown in . It can also be seen that the user has previously selected the time option in the column and has selected from a submenu brought up when the time option was selected the past week search parameter. When the user has finished making selections of the various options and suboptions from both the column and any of the corresponding submenus which appear then the display showed in appears. Note that the submenus are no longer present and that the user has completed the selection of the various options and suboptions which specify the search parameters. Column in provides feedback to the user indicating the exact nature of the search query in this case a search for all photos dated in the past week and the results which match the search query are shown in the display region .

The window shown in shows the activation of a menu by selecting the search button A causing a display of a menu having two entries and . Entry displays recently performed searches so that a user may merely recall a prior search by selecting the prior search and cause the prior search to be run again. The menu selection allows the user to clear the list of recent searches in the menu.

The search results user interface shown in presents only a limited number of matches or hits within each category. In the particular example of these figures only the five top most relevant or most highly sorted hits are displayed. This can be seen by noticing the entry at the bottom of each list within a group which specifies how many more hits are within that group these hits can be examined by selecting this indicator such as indicator which causes the display of all of the items in the documents category or kind for the search for button which was entered into the text entry region . Further examples of this behavior are described below and are shown in conjunction with . It will be appreciated that window is a closeable and resizable and moveable window and includes a close button and a resizing control A.

It will be appreciated that this method may employ various alternatives. For example a window may appear after the command option or has been selected and this window asks for a name for the new folder. This window may display a default name e.g. new folder in case the user does not enter a new name. Alternatively the system may merely give the new folder or new storage facility a default path name. Also the system may merely create the new folder and move or copy the items into the new folder without showing the new window as shown in .

According to certain embodiments of the invention the metadata that can be searched for example to locate or identify a file may include additional metadata generated based on the original metadata associated with the file and or at least a portion of content of the file which may not exist in the original metadata and or content of the file. In one embodiment the additional metadata may be generated via an analysis performed on the original metadata and or at least a portion of the content of the file. The additional metadata may capture a higher level concept or broader scope information regarding the content of the file.

For example according to one embodiment if a text file or a word document contains first metadata or content of Nike e.g. a shoe designer Callaway e.g. a golf club designer and Tiger Woods e.g. a professional golf player based on an analysis on these terms additional metadata e.g. second metadata generated may include Golf and or PGA Tournament etc. although the additional metadata may not exist in the file s content of metadata. Subsequently when a search is conducted on a term such as golf the file may be identified since the file contains the first metadata e.g. Nike Callaway and Tiger Woods likely related to the term being searched e.g. golf . As a result although a user searches a term that is not contained in the file the file may still be identified as a part of a search result because the file contains certain terms that are considered related to the term being searched based on an analysis.

In at least certain embodiments a file is analyzed algorithmically in order to derive or generate metadata for the file and this metadata is added to a metadata database such as metadata database of . The analysis may be based on algorithms which analyze the contents of the file or metadata imported or otherwise obtained from the file prior to the analysis or a combination of both contents of the file and the metadata imported or otherwise obtained from the file prior to the analysis . This analysis may generate either the only set of metadata for the file or a second set of metadata if metadata is imported or otherwise obtained from the file prior to the analysis .

In one embodiment exemplary system includes but is not limited to a metadata importer to extract at least a portion of content and metadata from a file to generate e.g. import a first set of metadata and a metadata analyzer coupled to the metadata importer to perform a metadata analysis on the first set of metadata to generate a second set of metadata. In certain embodiments a content analyzer may analyze the content e.g. text of a file to generate metadata which is added to a metadata database such as metadata database . The second set of metadata may include at least one metadata that is not included in the first set of metadata where the second set of metadata is suitable to be searched to identify or locate the file.

Referring to according to one embodiment exemplary system includes a metadata analysis module communicatively coupled to a metadata importer and a metadata database . In one embodiment the metadata analysis module may be implemented as a part of the metadata processing module of which may be implemented software hardware or a combination of both. The metadata importer may be implemented as a part of metadata importer of . The metadata database may be implemented as a part of metadata database of .

In one embodiment the metadata importer receives a file containing metadata associated with the file and extracts at least a portion of the metadata and content of the file to generate a first metadata set . File may be one of the various types of files including but are not limited to the following types of files 

In one embodiment metadata importer may be an importer dedicated to import certain types of documents. Metadata importer may be a third party application or driver that is dedicated to import the metadata from a particular file format produced by the third party application or drives. For example metadata importer may be a PDF metadata importer that is dedicated to import metadata from a PDF file and the metadata importer may be designed and or provided by a PDF file designer e.g. Adobe System or its partners. The metadata importer may be communicatively coupled to the metadata analysis module via an API application programming interface such as for example as a plug in application or driver.

In response to the first metadata set according to one embodiment the metadata analysis module performs an analysis e.g. a semantic analysis on the first metadata set and generates additional metadata a second metadata set . At least a portion of the first and or second metadata sets may then be stored in the metadata database in a manner suitable to be searched to identify or locate the file subsequently using one of the techniques described above. In addition to generating a second metadata set or as an alternative to generating the second metadata set a content analyzer may analyze the content of a file and generate metadata which is added to metadata database .

In one embodiment the metadata analysis module may perform the analysis using a variety of analytical techniques including but not limited to the following techniques 

Latent semantic analysis LSA is a statistical model of words usage that permits comparisons of the semantic similarity between pieces of textual information. LSA was originally designed to improve the effectiveness of information retrieval IR methods by performing retrieval based on the derived semantic content of words in a query as opposed to performing direct word matching. This approach avoids some of the problem of synonymy in which different words can be used to describe the same semantic concept.

The primary assumption of LSA is that there is some underlying or latent structure in the pattern of word usage across documents and that statistical techniques can be used to estimate this latent structure. The term document in this case can be thought of as contexts in which words occur and also could be smaller text segments such as individual paragraphs or sentences. Through an analysis of the associations among words and documents the method produces a representation in which words that are used in similar contexts will be more semantically associated.

Typically in order to analyze a text LSA first generates a matrix of occurrences of each word in each document e.g. sentences or paragraphs . LSA then uses singular value decomposition SVD a technique closely related to eigenvector decomposition and factor analysis. The SVD scaling decomposes the word by document matrix into a set of k typically ranging from 100 to 300 orthogonal factors from which the original matrix can be approximated by linear combination. Instead of representing documents and terms directly as vectors of independent words LSA represents them as continuous values on each of the k orthogonal indexing dimensions derived from the SVD analysis. Since the number of factors or dimensions is much smaller than the number of unique terms words will not be independent. For example if two terms are used in similar contexts documents they will have similar vectors in the reduced dimensional LSA representation. One advantage of this approach is that matching can be done between two pieces of textual information even if they have no words in common.

For example to illustrate this if the LSA was trained on a large number of documents including the following two 

The vector for the word warship would be similar to that of the word Nashville because both words occur in the same context of other words such as Colon and harbor . Thus the LSA technique automatically captures deeper associative structure than simple term term correlations and clusters. One can interpret the analysis performed by SVD geometrically. The result of the SVD is a k dimensional vector space containing a vector for each term and each document. The location of term vectors reflects the correlations in their usage across documents. Similarly the location of document vectors reflects correlations in the terms used in the documents. In this space the cosine or dot product between vectors corresponds to their estimated semantic similarity. Thus by determining the vectors of two pieces of textual information the semantic similarity between them can be determined.

Tokenization is a process of converting a string of characters into a list of words and other significant elements. However in most cases morphological variants of words have similar semantic interpretations and can be considered as equivalent for the purpose of IR applications. For this reason a number of so called stemming algorithms or stemmers have been developed which attempt to reduce a word to its stem or root form. Thus the key terms of a query or document are represented by stems rather than by the original words. This not only means that different variants of a term can be conflated to a single representative form it also reduces the dictionary size e.g. the number of distinct terms needed for representing a set of documents . A smaller dictionary size results in a saving of storage space and processing time.

At least for certain embodiments it does not usually matter whether the stems generated are genuine words or not. Thus computation might be stemmed to comput provided that a different words with the same base meaning are conflated to the same form and b words with distinct meanings are kept separately. An algorithm which attempts to convert a word to its linguistically correct root compute in this case is sometimes called a lemmatiser. Examples of stemming algorithms may include but are not limited to Paice Husk Porter Lovins Dawson and Krovetz stemming algorithms. Typically once the sentences of a document have been processed into a list of words LSA may be applied to the words.

Concept extraction is a technique used for mining textual information based on finding common themes or concept in a given document. Concept extraction technique may also be used to extract some semantic features from raw text which are then linked together in a structure which represents the text s thematic content. Content extraction technique may be combined with LSA to analyze the first metadata set and generate the second metadata set according to one embodiment.

A spectrum is normally referred to as a range of color or a function of frequency or wavelength which may represent electromagnetic energy. The word spectrum also takes on the obvious analogous meaning in reference to other sorts of waves such as sound wave or other sorts of decomposition into frequency components. Thus a spectrum is a usually a two dimensional plot of a compound signal depicting the components by another measure. For example frequency spectrum is a result of Fourier related transform of a mathematical function into a frequency domain.

According to one embodiment spectrum analysis filtering may be used to analyze an image and or an audio in the frequency domain in order to separate certain components from the image and or audio sound. For example spectrum analysis filtering may be used to separate different colors from the image or different tunes of an audio etc. The spectrum analysis may be used to determine the type of music or sound for an audio file or the type of picture.

In addition to spectrum analysis filtering performed on an image according to one embodiment OCR optical character recognition may be used to recognize any text within the image. OCR is the recognition of printed or written text or characters by a computer. This involves photo scanning of the text character by character analysis of the scanned in image and then translation of the character image into character codes such as ASCII American Standard Code for Information Interchange commonly used in data processing. During OCR processing the scanned in image or bitmap is analyzed for light and dark areas in order to identify each alphabetic letter or numeric digit. When a character is recognized it is converted into an ASCII code. Special circuit boards and computer chips e.g. digital signal processing or DSP chip designed expressly for OCR may be used to speed up the recognition process.

Similarly in addition to the spectrum analysis filtering performed on an audio voice recognition also referred to as speech to text may be performed to recognize any text within the audio e.g. words used in a song . Voice recognition is the field of computer science that deals with designing computer systems that can recognize spoken words and translate them into text. Once the text within an image and an audio has been extracted e.g. via OCR and or voice recognition other text related analysis techniques such as LSA etc. may be applied. Note that throughout this application the above techniques are described by way of examples. They are not shown by way of limitations. Other techniques apparent to one with ordinary skill in the art may also be applied.

Referring back to the operations involved in some or all of the above techniques may be handled by some or all of the modules individually or in combination. The operations may be performed sequentially or substantially concurrently. Modules may be implemented as software hardware or a combination of both. Some or all of the modules may be implemented locally or alternatively they may be implemented remotely over a network e.g. similar to external resources . . Note that exemplary system is shown for illustration purposes only more or less of modules may be implemented dependent upon a specification configuration. For example some or all of the modules may be implemented separately. Alternatively they may be implemented as a single module. Further some or all of the functionality of modules may be implemented within the metadata importer .

In addition certain external resources may be invoked to assist the analysis to obtain additional metadata. Some examples of the external resources may include GPS global positioning system services Web services and or database services etc. For example in response to the first metadata as the example described above having the terms of Nike Callaway and Tiger Woods the metadata analysis module may access certain external resources such as databases or Web sites over a network to obtain additional information about the companies of Nike and or Callaway e.g. company s press release or product announcements etc. as well as information regarding Tiger Woods e.g. biography or world PGA ranking etc. At least a portion of the obtained information may be used as a part of the second metadata set which may in turn be stored in the metadata database in a manner suitable to be searched subsequently to identify or locate the file. Note that the external resources may also be used by other components for the system such as for example metadata importer .

Furthermore the first metadata set may be analyzed against a previously trained metadata set in order to generate the second metadata set according to one or more rules . The trained metadata set may be trained against a relatively large amount of information via a training interface not shown by one or more users. Alternatively the exemplary system may also include a dynamic training interface not shown to allow a user to categorize particular metadata especially when the metadata analysis module could not determine. The result of user interaction may further be integrated into the trained metadata set . Examples of rules may be implemented similar to those shown in . Other configurations may exist.

Referring to at block a file having metadata is received for example by metadata importer of . The file may be received via a file system operation such as a write operation. Alternatively the file may be received over a network for example via an attachment of an email. In response to the file at block the metadata associated with the file and at least a portion of the content of the file may be extracted to generate a first metadata set e.g. first metadata set of . In one embodiment the first metadata set may be generated via a metadata importer associated with a type of the file.

According to one embodiment the metadata importer may invoke one or more of the modules to generate the first metadata set . According to a further embodiment the external resources may be invoked by the metadata importer .

At block a metadata analysis is performed on the first metadata set and or at least a portion of the file content to generate a second metadata set e.g. second metadata set in addition to the first metadata set. The analysis may be performed by metadata analysis module of . The analysis may include one or more of the analyses described above e.g. modules and or external resources individually or in combination. At block some or all of the first and second metadata sets may be stored in one or more databases e.g. metadata database in a manner e.g. category configuration examples shown in suitable to be searched subsequently to identify or locate the file. Other operations may also be performed. These other operations may include for example determining another file which is similar to the file which was analyzed and examining the another file to extract metadata from the another file and add that extracted metadata into the second set of metadata for the file. The another file may be determined by for example a relevancy test to be most similar to the file and then additional metadata for the file can be extracted from the another file.

A typical file may include a set of standard metadata such as dates when the file was created accessed or modified as well as security attributes such as whether the file is read only etc. In addition each type of files may further include additional metadata specifically designed for the respective type of file. Among the types of files described above text image audio and a combination of these e.g. a video clip may be more popular than others. Following descriptions may be used to describe detailed processes on these files. However these processes are illustrated by way of examples only other types of files may also be handled using one or more techniques described above.

Referring to at block a text file having metadata is received for example by metadata importer of . The text file may be received via a file system operation such as a write operation or alternatively the text file may be received over a network e.g. an email . In response to the text file at block the metadata associated with the file and at least a portion of the content of the file may be extracted to generate a first metadata set e.g. first metadata set of . In one embodiment the first metadata set may be generated via a text metadata importer associated with the text file. In one embodiment one or more keywords may be extracted from the vocabularies used in the text file. The keywords may be extracted using at least one of tokenization stemming and or concept extraction techniques as described above for example by invoking modules and or eternal resources of .

At block a metadata analysis is performed on the first metadata set and or at least a portion of the file content to generate a second metadata set e.g. second metadata set in addition to the first metadata set. The analysis may be performed by metadata analysis module of . The analysis may include one or more of the analyses described above e.g. LSA individually or in combination. For example according to one embodiment based on the keywords extracted from the text file the field and or topic of the article may be determined. In addition if applicable an event and or the dates of the event associated with the article as well as the company or companies and persons that sponsor the event may also be determined via the analysis as shown in .

Furthermore one or more external resources may be invoked to determine additional information regarding the article described in the text file. For example external GPS services may be invoked to determine a location and dates time of the event. Further external Web services or database services may be invoked to obtain additional information regarding the companies or persons sponsoring the event etc.

At block some or all of the first and second metadata sets may be stored in one or more databases e.g. metadata database in a manner e.g. category configuration examples shown in suitable to be searched subsequently to identify or locate the file. Other operations may also be performed.

Referring to at block an image file e.g. a JPEG or GIF file having metadata is received for example by metadata importer of . The image file may be received via a file system operation such as a write operation or alternatively the image file may be received over a network. In response to the image file the metadata associated with the file and or at least a portion of the content of the file may be extracted to generate a first metadata set e.g. first metadata set of . In one embodiment the first metadata set may be generated via an image metadata importer associated with the image file. For example if the file is a JPEG file a JPEG metadata importer that is able to decode the JPEG file format e.g. JPEG 2000 compatible encoding etc. may be invoked to extract the metadata associated with the JPEG file such as for example those shown in . According to one embodiment the metadata importer may invoke one or more of the modules to generate the first metadata set . According to a further embodiment the external resources may be invoked by the metadata importer .

For example at block based on at least a portion of the metadata of the nature of the image e.g. photo drawing or painting may be determined. In addition as another example based on the ISO setting focal length and or shutter speed whether a photo was taken during day or night time and or whether the photo was taken in a still or action situation may be determined. Some or all of this additional information may be used as a part of additional metadata as shown in .

According to one embodiment a metadata analysis may then be performed on the first metadata set and or at least a portion of the file content to generate a second metadata set e.g. second metadata set in addition to the first metadata set. The analysis may be performed by metadata analysis module of . The analysis may include one or more of the analyses described above individually or in combination. For example according to one embodiment at block an image analysis such as color shape analysis e.g. using spectrum analysis filtering techniques may be performed to determine the time e.g. day vs. night and the type e.g. portrait person or landscape of the image and other image related information.

Furthermore according to one embodiment at block one or more external resources may be invoked to determine additional information regarding the image. For example external GPS services may be invoked to determine a location and date time when the image was generated.

At block any text if there is any existed in the image may be recognized for example using OCR techniques. Thereafter any text metadata processing techniques such as those described above e.g. similar to operations of may be applied to obtain additional information.

At block some or all of the first and second metadata sets may be stored in one or more databases e.g. metadata database in a manner e.g. category configuration examples shown in suitable to be searched subsequently to identify or locate the file. Other operations may also be performed.

Referring to at block an audio file e.g. an MP3 file having metadata is received for example by metadata importer of . The audio file may be received via a file system operation such as a write operation or alternatively the audio file may be received over a network. In response to the audio file the metadata associated with the file and at least a portion of the content of the file may be extracted to generate a first metadata set e.g. first metadata set of . In one embodiment the first metadata set may be generated via an audio metadata importer associated with the audio file. For example if the file is an MP3 file an MP3 metadata importer that is able to decode the MP3 compatible file format may be invoked to extract the metadata associated with the MP3 file such as for example those shown in . According to one embodiment the metadata importer may invoke one or more of the modules to generate the first metadata set . According to a further embodiment the external resources may be invoked by the metadata importer . In certain embodiments the metadata importer may analyze based on an algorithm the audio file to derive additional metadata. For example the metadata importer can keep track of when a song was last played and determine a pattern e.g. the song is normally played within an hour of noon and based upon this pattern time related metadata or other metadata can be created. This time related metadata can be used to find songs played at a certain time or be used to create a time based favorites list. It will be appreciated that metadata can be exported by a software program which creates or modifies a file rather than by a separate specific importer which is designed to extract the metadata from the file. In either case the metadata can be considered to be imported into a metadata database and thus the term metadata importer is intended to encompass either mechanism of introducing metadata into a metadata database.

According to one embodiment a metadata analysis may then be performed on the first metadata set and or at least a portion of the file content to generate a second metadata set e.g. second metadata set in addition to the first metadata set. The analysis may be performed by metadata analysis module of . The analysis may include one or more of the analyses described above individually or in combination. For example according to one embodiment at block a frequency analysis e.g. using spectrum analysis filtering techniques may be performed to determine the type of the music e.g. Jazz or classical and other audio related information.

Furthermore according to one embodiment at block one or more external resources may be invoked to determine additional information regarding the audio. For example external Web or database services may be invoked to determine biography information of the artist and GPS services may be invoked to determine location and date when the audio was recorded e.g. the location and date of the concert .

At block any text if there is any existed in the audio such as for example words used in a song may be recognized for example using OCR techniques. Thereafter any text metadata processing techniques such as those described above e.g. similar to operations of may be applied to obtain additional information.

At block some or all of the first and second metadata sets may be stored in one or more databases e.g. metadata database in a manner e.g. category configuration examples shown in suitable to be searched subsequently to identify or locate the file. Other operations may also be performed.

Note that although a text file an image file and an audio file have been described above they are illustrated by way of examples rather than by way of limitations. In fact any of the above examples may be performed individually or in combination. For example a word document may include text and an image. Some or all of the operations involved in may be performed individually or in combination. For another example a video clip may include a sequence of images and audio clips. As result some or all of the operations involved in may be performed individually or in combination. Other types of metadata may also be processed.

Thus methods and apparatuses for processing metadata have been described herein. Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may include a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

A machine readable medium may include any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. etc.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

