---

title: System and method for shell browser
abstract: A previewing system that permits selection from a plurality of interactive previewers for use in a system shell browser is disclosed. The previews may be extensible, such that different application developers may write custom previews for different file types, and the shell browser may follow established criteria to select an appropriate preview. The user may enter criteria to control which previewers are used for different situations, such as when certain file types are selected for previewing. Size of an available display area for the preview may be a criterion, such that resizing the preview area may cause a different preview to be displayed. The preview may be executed as a separate process from the browser so that crashes and hangs in the previewer process do not fatally affect the browser process. Previews may be incorporated within common file dialogs offered by an underlying operating system, such that different applications may share the common previewer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07712034&OS=07712034&RS=07712034
owner: Microsoft Corporation
number: 07712034
owner_city: Redmond
owner_country: US
publication_date: 20050422
---
The present application is a continuation in part of copending U.S. patent application Ser. Nos. 10 395 533 filed Mar. 24 2003 entitled System and Method for User Modification of MetaData in a Shell Browser and U.S. patent application Ser. No. 10 395 560 filed Mar. 24 2003 entitled Extensible Object Previewer in a Shell Browser the specifications for which are hereby incorporated by reference.

The present application relates generally to the field of computer software. More particularly the application relates to a system and method for providing an improved user experience within a shell or file system browser so that users can more readily identify an item based on previews of selected items. Some aspects further relate to a system and method for extending the functionality of an object previewer in the shell or file system browser to improve the user experience.

The need to readily identify items stored in a computing environment such as a personal computer PC is dramatically increasing as more individuals utilize computers in their daily routines and as the type of stored information varies between pictures music documents etc. Documents and media are typically stored on computers in a hierarchical fashion and are organized with files of information or media stored within folders. File system browsers enable users to navigate through the file system and locate and open files and folders. For example Microsoft Corporation s WINDOWS EXPLORER is an operating system utility which enables users to browse the file system.

Many users find it difficult to correctly identify a file based on the information currently available in conventional file system browsers. Of course the contents of a file can be verified by closing the file browser and opening the file using a separate application program but this method of browsing files is extremely inefficient given the time and resources consumed by each application. For example browsing five separate files of different file types would grow tiresome as the five separate applications are each initialized.

Microsoft Corporation s WINDOWS XP operating system includes an image browser for use when browsing the My Pictures folder. The browser displays a thumbnail view of a selected picture and the user can rotate the image but that is the extent of the interactivity. The user cannot fully interact with or edit the image. Furthermore although more sophisticated picture displaying applications may exist on the system there is no way for the My Pictures folder to extend its thumbnail option to any of those applications or to permit those applications to supply their own thumbnail views for use in the shell browser. With the limited control edit interactivity options from the browser and the inability for other applications to offer richer thumbnail previewers for the browser there is a resulting need for an improved approach to providing previews in shell browsers that offers more options and choices to users so that they may more effectively use the browser.

One or more of the above needs and deficiencies may be addressed by providing a system and method for providing previewers to a system shell browser. The shell browser may offer a rich interactive preview image of a selected file where the user may interact with and edit the file by interacting with the preview image. The system may expose an application program interface API to allow the addition of previewers beyond the basic previewer that may be shipped with the system. Individual applications such as word processors image viewers video players etc. may use the APIs to provide their own interactive previewer to be included in the display of the shell browser.

With the number of available previewers users may be given an option to define criteria that will be used to determine which previewer will be used at any given time. Any type of criteria may be used such as system load available display area user preference time of day type of file size of file etc.

The previewer may also change in response to user interaction with a displayed preview. For example if a user resizes a preview corresponding property metadata displays may be rearranged to display more or fewer properties corresponding to the display area occupied by the resized preview. The preview can also be rearranged such that the preview image appears in a different location relative to the properties metadata. Furthermore the resizing can cause entirely different previewers to be invoked. For example the system may automatically change from a rich preview to a more generic preview if the user shrinks the preview to a small enough area that the rich preview features are no longer feasible. Conversely enlarging the preview area may cause a richer preview to be invoked.

The system may also automatically switch from generic to rich previewer to accommodate a slower load time for the rich preview. For example a generic preview may be used at first while the rich preview is loading and when that richer preview is ready the system may automatically or at user request switch the preview from the generic to the rich.

The system may offer the preview functionality in more than just the shell browser. For example the preview functionality may be offered in one or more common file dialogs such as the Save As dialog so that previews may be used more extensively.

The previews may also be implemented in a manner that reduces the risk of a crash or hang holding up the entire shell browser. For example the previewer may be instantiated as an independent process of the system so if a failure occurs the remainder of the shell browser may continue to function.

The preview selection and functionality may also vary depending on the number of files selected. For example different display preview presentations may be used when multiple files are selected.

The present application relates to a system and method for providing an improved user experience within a shell browser by offering users a preview of one or more selected files from the browser. An exemplary operating environment is described below.

Referring to the drawings in general and initially to in particular wherein like reference numerals identify like components in the various figures an exemplary operating environment is shown and designated generally as operating environment . The computing system environment is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment .

The features described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the features may be practiced with a variety of computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. They may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system includes a general purpose computing device in the form of a computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . If desired any of the elements described herein may be implemented as standalone elements e.g. a single processing unit or as multiple elements working in concert e.g. multiple processing units .

Computer typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Examples of computer storage media include but are not limited to Random Access Memory RAM Read Only Memory ROM Electronically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology CD ROM digital versatile discs DVD or other optical or holographic disc storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store desired information and be accessed by computer . The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A Basic Input Output System BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable nonremovable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to nonremovable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable nonremovable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory units digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a nonremovable memory interface such as interface . Magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for computer . For example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Typically the operating system application programs and the like that are stored in RAM are portions of the corresponding systems programs or data read from hard disk drive the portions varying in size and scope depending on the functions desired. Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they can be different copies. A user may enter commands and information into the computer through input devices such as a keyboard pointing device commonly referred to as a mouse trackball or touch pad a wireless input reception component or a wireless source such as a remote control. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port IEEE 1394 port or a universal serial bus USB or infrared IR bus.

A display device is also connected to the system bus via an interface such as a video interface . Display device can be any device to display the output of computer not limited to a monitor an LCD screen a Thin Film Transistor TFT screen a flat panel display a conventional television or screen projector. In addition to the display device computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks such as connections to a metropolitan area network MAN intranet or the Internet.

When used in a LAN networking environment the computer may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer may include a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the network interface or other appropriate mechanism. Modem could be a cable modem DSL modem or other broadband device. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Other internal components of the computer are possible but not shown. For example various expansion cards such as television tuner cards and network interface cards may be incorporated within a computer .

When the computer is turned on or reset the BIOS which is stored in ROM instructs the processing unit to load the operating system or necessary portion thereof from the hard disk drive into the RAM . Once the copied portion of the operating system designated as operating system is loaded into RAM the processing unit executes the operating system code and causes the visual elements associated with the user interface of the operating system to be displayed on the display device . Typically when an application program is opened by a user the program code and relevant data are read from the hard disk drive and the necessary portions are copied into RAM the copied portion represented herein by reference numeral .

As previously mentioned the features described herein may be described in the general context of computer useable instructions. Computer useable instructions include functions procedures schemas routines code segments and modules useable by one or more computers or other devices. The computer useable instructions form an interface to allow a computer to react according to a source of input. The instructions cooperate with other code segments to initiate a variety of tasks in response to data received in conjunction with the source of the received data.

Turning to a panel represents a screen size display area for a graphical user interface of a shell browser. The panel contains a preview panel area and a view area . The preview panel may include a preview control a user interface UI or edit control and a task control . Typically the preview control will provide the user with an image or other visual display of the item being previewed e.g. a selected file . The preview control may also present the user with controls such as iterator buttons which allow the user to shift the focus from one item to the next by clicking a mouse button. Metadata corresponding to one or more items and or metadata corresponding to the item container may be displayed in a variety of locations within the panel . For example the edit control and metadata may be co located within edit control area so that the edit control area not only includes a display of key properties of the previewed item but also presents the user with the option of making edits to the metadata. The task control contains tasks relevant to the namespace and or the selection. The various elements described herein may share a display area such as appearing in a common user interface panel or alternatively they may have their own separate areas such as distinct panels.

Optional features may be included within the panel and features may be removed. For example the preview control and the task control may be removed. Moreover other features which are not shown in such as a toolbar which includes iterator buttons or a show hide button so the user can open close the preview pane may optionally be added. These and other optional features may assist the user in readily locating a particular item in the shell browser.

The view area provides a listview such as an enumeration or list of items of one or more items such as file system files or folders. The items and shell items may be files folders and or other such containers and may include other non file objects that can be represented in a listview. Examples of non file objects may include but would not be limited to devices contacts favorites and email messages. The terms shell browser and file system browser are used interchangeably herein to refer to a browser which allows a user to navigate through one or more namespaces including files and other non file items.

Many possible designs and layouts are possible for the panel . For example the preview panel is shown above the view area in . However other layouts such as placing the preview panel and the view area side by side are possible as well. The location of the edit control may also be independent of the location of the displayed metadata and independent of the location of any other controls. There are also many possible view types for the items depicted in listview area such as details slide show filmstrip thumbnail tiles icons etc.

Referring next to a schematic illustration is provided of a welcome panel in a shell browser. A welcome panel is sometimes referred to as a null select panel because it represents a namespace page or container as opposed to a selection. If the user has not yet made a selection a preview panel may display metadata and key tasks relating to the folder or shell library. If desired the tasks may be separated into premiered tasks and other relevant tasks . The welcome panel also includes a view area in which multiple files or other items may be viewed. The welcome pane metadata may include information such as properties of the container e.g. MyPictures in which case the metadata display may be static. Alternatively the welcome pane metadata may include information such as a sampling of metadata from each of the items within the container in which case the metadata display may change frequently. For example the metadata display may be limited to properties of one item at a time by cycling from one item to the next every 30 seconds.

Means other than context menus may be used for enabling user modifications to displayed metadata within a shell browser. One such means is for the user to click on the metadata to enter an editing mode. By contrast a user could enter an editing mode by hovering over the relevant text or object in the preview panel. Any known form of entering and or editing data may be used.

In the event a user selects multiple items at the displayed metadata may include intersecting properties of the selected items a union of properties or perhaps a new property relevant to the selected items. For example data may be aggregated to provide a total file size total playing time total number of items average file size average playing time etc. Alternatively the displayed metadata may include a rotating sample of metadata from each of the selected items e.g. cycling from one selected item s metadata to the next selected item s metadata every 30 seconds . It is possible for the display of metadata which would result from a selection of all of the items to be identical to the display of metadata which would result from a null select.

A number of scenarios may be enabled with the features described herein. As a first example a student can manage her projects using the preview panel. When she obtains new documents as part of a project she is working on she can select those documents in her document library and enter the name of the document author and the name of the project into keyword fields using the edit control. Now the new documents will show up in her favorite view Documents Grouped by Keyword and Listed by Author. A second example involves an employee looking for materials for an upcoming ad campaign. As he browses through his employer s stock collection of photos using the shell browser he selects a couple of pictures and from the preview pane adds a new keyword Summer 2003 Campaign. Having updated the metadata for a multiple selection the employee then pivots by keyword and can view all of the Summer 2003 Campaign files grouped together.

The extended controls represent a higher level of functionality. For example a default preview panel or preview control such as that shown in may simply display a preview image of a selected item. If the item is a word processing document or slide presentation the default preview image may be the first page of the document or slide deck. However by extending the functionality of the preview image to make it more interactive a user can quite easily manipulate extended controls to page through the document or slide presentation. This enhanced level of functionality improves the user experience because it allows the user to more comprehensively browse the previewed item without opening it which is particularly useful for files that are not readily identifiable based on the first page alone.

Extended controls can be made available to the user as part of an alternative previewer in a shell browser. The term previewer can refer to a preview control a preview panel which includes a preview control or software relating to the selection generation and or display of previews. A shell browser may provide the user with a default previewer offering a standard level of functionality for multiple item types and one or more alternative previewers offering a different level of functionality for particular item types to enhance the user experience. Opening up the development of alternative previewers to independent software vendors ISVs and other third party developers adds value to the file browsing experience by showing relevant aspects of the file in an easily recognizable way. Custom previewers for numerous file types and non file item types including but not limited to image files video files contacts games scanners video cameras document files spreadsheet files slide presentation files drawing files and tablet ink files may be developed.

Third parties are allowed to describe and demonstrate their file types by providing code that can look inside the file type and provide a meaningful image that a user will understand. For example Apple could implement a QUICKTIME preview control which would be displayed when the user selects a QUICKTIME file in the shell browser. This preview control could provide an alternative or extended level of functionality beyond the default previewer in the shell of an operating system including functionality such as showing the entirety or a portion e.g. the first five seconds of a QUICKTIME movie and or offering buttons and controls for the user to launch the QUICKTIME player. An alternative previewer for a music file could provide similar extended functionality. As those skilled in the art will appreciate the possibilities for extended functionality in an alternative previewer are unlimited.

The context menu in presents the user with several options including the choice of selecting either the default previewer or an alternative previewer for the selected item. The generic text shown in the menu is of course merely one example of the type of options which may be presented to a user for selecting a previewer. A context menu can be provided in any panel including a welcome pane to improve the user experience. Any number and variety of context menus could be supported. One means for enabling user selection of a previewer within a shell browser is to provide a context menu such as context menu . A user may summon the context menu for example by clicking on the corresponding text or object in the preview panel.

Means other than context menus may be offered for selecting a previewer for the displayed items from a plurality of available previewers within a shell browser. One such means is for the user to click on the preview control to enter a selection mode. Similarly the user may be prompted to select a previewer by right clicking within the preview panel. By contrast a user could enter a selection mode by hovering over relevant text or over a relevant object in the preview panel. Numerous alternative means are available.

At the system as opposed to the user automatically and transparently selects a default previewer from two or more available previewers for a particular item type. The system may select a previewer in response to an event such as display of a new item type or the presence of an alternative previewer. The system is configured to select a default previewer based on logical rules. Under exceptional circumstances the system may decide at to override the rules and select a previewer that would not have been selected under the applicable rules. For example if the rule is to select a newly available previewer over the current default previewer an installed application may generally have the authority to change the default previewer to the previewer now available from the installed application. However the shell browser for example may reserve the right to override the change proposed by the newly installed application. For instance an override may be appropriate when the newly installed application cannot be authenticated as a proper owner of the item type in question.

In any event the method then associates the selected previewer with the particular item type at . The selected previewer will remain in use until a different one is selected. However if the selected previewer is an installed application uninstalling the application may if desired terminate the use of the selected previewer.

Referring next to a flow diagram illustrates a method for enabling the use of third party previewers in a shell browser which supports multiple item types. The method includes providing a shell browser having a default previewer for the multiple item types at . The method further includes providing an extensibility mechanism for third party development of an alternative previewer for at least one of the multiple item types at . The alternative previewer may be registered in the shell browser at . In the case of an installed application registration may occur substantially at the time of installation. For example if the application is installed by an OEM the alternative previewer may be registered before the user has acquired the computer. Alternatively the user may install the application locally or remotely.

There are many possible approaches for the extensibility mechanism referenced above in . One such approach involves exposing a set of application program interfaces APIs so that independent software vendors ISVs and other third party developers may develop alternative previewers. With the API approach a registration mechanism exists which allows an ISV to associate their preview control with an item type owned by the ISV. When an item or file of that type is selected in the shell browser the ISV s preview control is instantiated via this registration mechanism and the extensibility API. The API provides data to the preview control data representing the selected item s in the view and data representing the parent container of the items in the view. The preview control operates on this data and provides a user interface through the API which is presented in the shell browser. The user may provide input with keystrokes and mouse events which are passed by the shell browser to the preview control which can operate on those user input events.

Those skilled in the art will appreciate that many approaches are possible in the context of the extensibility mechanism. In addition to the API approach similar functionality may be achieved via user configuration a pointer to HTML or hosting a flash. Moreover the extensibility model may require that only one application that owns the item type selected may provide only one alternative previewer. In other words the number of available previewers may be limited to a default previewer and one alternative previewer to avoid a poor user experience in which multiple registered extended previewers are in competition with one another. However another model would be to allow any application that can handle the selected item type to provide one additional previewer. An alternative model would allow any running code to provide one additional previewer for any item type. It may also be desirable under certain circumstances to allow replacement or removal of the default previewer.

In step a check may be made to determine whether a new association is to be created for one or more previewers. An association may be any criteria and or request governing the times and types of previewers that are to be used. An association may be created to define the types of previewer s to be used for a given user identity or if a particular user wishes to disable previews altogether and or for certain predefined situations based on system conditions e.g. available resources memory current applications running number of previews generated or to be generated available power time of day status of other applications etc. and file type e.g. a user may prefer to use one type of previewer for home videos and a different previewer for compressed songs such that the default previewer used by the system may be user defined. A user may indicate that certain file types are only to have basic non interactive previews or the system can automatically disable a preview if it experiences a predefined number of failures crashes or hangs. An application may be associated with one or more previewers so that previews opened from the application or previews of files created by the application may always be previewed using the same previewer. These associations can be hierarchical in nature such that multiple previews are ranked in order of preference. The step of requesting a new association may occur at startup upon installation of an application upon execution of a predetermined application and or by user request.

If a request to create a new association is received then the association is created in step . The act of creating an association may be accomplished by querying the user for the specific criteria to be met when certain previewers are to be used or retrieving such criteria information automatically from an application and or the system itself. When created an actual association can take the form of data stored in the computer system s memory associating the previewer s with any of the criteria identified above.

In step a check may be made to determine whether a previewer needs to be opened. There are a number of events that can trigger the opening of a previewer. For example when a user opens a shell browser on the system and begins perusing files and or folders the browser may initiate a previewer to display a preview of one or more selected files or default files when none is selected . Alternatively a previewer may be triggered at the request of any other application. A previewer may also be triggered by the creation of common file dialogs that are shared by multiple applications. Common file dialog previews are discussed further below.

If a previewer is to be opened the system may receive the selection or selections that are to be previewed in step . This may involve receiving identifications of the file or files that are to be previewed. Such selections may be made by the user such as by the selection of one or more files by moving a mouse pointer to a listed file and pressing the left mouse button or clicking and dragging a selection box around multiple file listings. Alternatively selections may be made automatically. For example certain applications may default to a predetermined file and may automatically select that file for previewing upon first opening. A word processing program such as MICROSOFT WORD may default to a previewer that includes text editing features. The system may automatically select files for previewing as a result of conducting a search. A user might enter search criteria such as a keyword and the system or application may automatically select one of the search results for previewing. For example a user might type in peanut as a keyword in a system search tool and the resulting listing of files containing peanut may display with a preview of the first listed file.

Once the file s to be previewed are selected the system then selects and generates the appropriate preview in step . Selecting an appropriate preview may be based on one or more associations that have been created e.g. a user has selected a particular previewer for previewing all files of a certain type or for previewing certain files and may also be based on the system resources that are available or consumed . Alternatively the user may be requested to identify which previewer should be used for the current preview by for example selecting from a presented list of predetermined previewers that may be appropriate for the selection to be previewed.

In some situations it may be desirable to generate an initial basic preview that can be viewed while a richer interactive preview is being initiated. For example if a rich preview of a text document would require a few seconds to load and generate the user may be presented in the interim with a more basic preview that can be generated sooner. The more basic preview may have some or none of the interactive functionality offered in the rich preview and can at least get the user started in previewing the selection s .

Selecting a preview may include a prestored sequence of previewers that can be used. For example a particular application or view may have a hierarchical sequence of available previewers such as a full rich previewer a reduced feature previewer a basic thumbnail preview which need not be interactive and a basic icon similar to the desktop icons currently used in MICROSOFT WINDOWS operating systems. When a previewer is to be opened the system may start with one previewer such as the full rich previewer and fall back through the sequence of previewers to find the most appropriate one. For example the full rich preview might be the default for a particular view with a previewer that offers paging zoom and text editing capabilities that allow the user to modify the document from the preview and if there are insufficient system resources e.g. due to memory limitations other applications other previewers etc. to adequately offer that preview the system may check the next previewer e.g. a less featured one on the list. The next previewer may be slightly less featured for example by only offering the ability to navigate through e.g. paging and zooming the document but without the ability to edit. Such a previewer may require less system resources to run and may be preferred if resources are not available. If there still are insufficient resources to offer that second previewer the system can check the next previewer e.g. a basic thumbnail view with little or no interactivity and so on until a suitable previewer is found given the available resources.

When the preview is generated the preview may be initiated as a separate and distinct process from the application requesting the preview. For example if a previewer is provided in a system shell browser the previewer may be executed as an independent process from the shell browser. With the preview as a separate process the shell browser might not ever find itself in a position of having to wait for a response from the preview application thereby avoiding a crash or hang if the previewer encounters difficulty. Such difficulty can come from a variety of sources. The selected file might have corrupt data such that the preview application cannot process it the preview application itself might have an error or bug preventing its smooth operation the file may be mislabeled or misidentified such that the wrong preview application is chosen e.g. the file may indicate that it is an audio file when actually it is a text file or the system resources may encounter a problem such as a bad memory sector. Having the previewer as a distinct process provides a degree of crash hang resistance. If the previewer encounters an error crashes or hangs the problem will be confined to the preview panel itself and the shell browser will continue to function. In some instances the system may keep track of the number of times that a particular preview application encounters difficult crashes and or hangs and if a predetermined number is exceeded e.g. 3 then the system may take steps to reduce the frequency with which that particular previewer is used. For example the system may lower the priority of that previewer or create an association that calls for a different previewer.

In step a check may be made to determine whether the user has interacted with any displayed preview. Interaction can take any form of known computer interaction. For example an interaction may be a mouse click within the preview panel. An interaction may be a selection of one or more graphical interface elements in the preview panel such as paging buttons cursor arrows or the like. Interaction may take the form of keyboard keys such as cursor movement keys to move a cursor within a preview of a text document.

If an interaction occurs the appropriate processing will occur in step . Processing an interaction may take the form of any response to a user input. For example the processing may begin an editing process in response to a user clicking a mouse or other pointer within the preview panel. The editing process may allow the user to view and or edit the previewed file directly from the preview panel without requiring the user to leave the view having the preview panel.

In step a check is made to determine whether the preview panel has been resized. The panel may be resized for example by the user entering commands and or by clicking and dragging a boundary or resizing tool of the preview panel. If the panel is resized the new resized panel is displayed in step . If desired the resized panel may be configured to automatically retain the same aspect ratio found in the original panel. Some file types may be configured such as through association to always have the same aspect ratio e.g. videos may always be 4 3 . If properties or metadata were displayed accompanying the preview then the properties and or metadata display area may also be resized to correspond to the new preview panel size. For example the properties or metadata display area may be configured to always have the same height or width as the preview panel. Conversely the previewer may be resized in response to a resizing of the properties metadata display area. If desired the new size may be stored in the system as the new default size associated with the particular file type current view application and or user and used the next time a preview is needed.

In step a check may be made to see whether the new size of the preview panel has passed one or more predetermined thresholds for the preview. As noted above previewers may have one or more criteria for their use. One such criterion may relate to the amount of display area available to the previewer. For example different levels of interactivity and or functionality may be offered for different sizes of preview. Using a word processor such as MICROSOFT WORD as an example a larger preview may offer more detailed functionality such as navigating paging and zooming in the document changing font size or editing text using a cursor in the preview while a smaller preview of the MICROSOFT WORD document might still include the navigation and zooming features but omit the cursor text editing if the display is too small to reasonably use a cursor to edit the text. A previewer may have one or more threshold sizes associated with it which may be created during association stored in the computer system s memory and which may identify a replacement previewer for use when the threshold is met or passed. For example the previewer might require a minimum of 256 pixels of width to implement certain features while other features might only be included if there are 512 pixels.

If the new size passes a threshold such as a minimum or maximum threshold a replacement preview may be selected and generated in step . The generation of a replacement preview may be identical to the generation of the preview in step . So for example if a preview panel has been reduced in size beyond a certain minimum size a replacement previewer may be used that offers a smaller subset of those interactive features that can still be used at the smaller size. Alternatively if the preview panel has been enlarged beyond a certain maximum size a replacement previewer may be used that offers more features that can be useful given the larger size such as a previewer that has more user interface controls or allows detailed edits within the preview. The replacement preview may simply be a resized version of the preview generated using the same previewer or it may be a completely different preview generated by a separate previewer application.

In step a check is made to determine whether a displayed property or piece of metadata is to be edited. Such data may be edited by for example clicking a mouse or pointer on a piece of displayed metadata and entering a value using a text entry or menu user interface. In step the appropriate steps are taken to edit the particular property. The actual steps may depend on the type of data being edited. A date field may bring up a calendar user interface element allowing a user to view and select a date and or time value for entry. Other types of data may be entered through a text entry box and other types may be selected from a menu such as a pull down menu.

In step a check is made to determine whether the system is awaiting the loading of a rich previewer. As noted above a more basic or generic preview may be provided while a rich preview is being initialized on the system. If the system is awaiting a rich previewer in step a check is made to determine whether the rich previewer is ready. If it is then the system will replace the existing preview with the rich preview in step . Step may also include a query to the user to determine whether the rich previewer is still desired. Although this step shows two previewers more than two may also be used. For example the system may display an icon while waiting for a thumbnail preview and then display the thumbnail while waiting for a rich preview etc.

In step a check is made to determine whether a previewer is to be closed and if so the previewer is closed in step . Then the process returns to step to begin again. Of course the process shown in is merely an example showing a way of arranging a number of steps and any of the steps may be reordered repeated removed or modified as desired to implement or remove any feature described herein.

Interactive preview panel may for example display one or more pages of text appearing in selected item when item is a file containing textual data such as a MICROSOFT WORD file or other word processing program. The interactive preview may allow the user to edit and or manipulate the displayed text directly in the preview panel. For example the user may be permitted to click a mouse pointer within the interactive preview to cause a cursor to appear in the panel and the user may manipulate the cursor or enter keyboard inputs to add delete and or otherwise modify the displayed text. Other types of controls such as paging controls font format controls scrolling controls file management controls input output controls and the like may also appear in the preview panel .

Different types of data files may have different types of interactive previews. For example the interactive preview for an audio file might include controls to control the play of an audio preview of the selected audio file on one or more speakers such as speakers of the computer system. A preview of a .wav file or .mp3 file may include such audio commands. There may be controls to play pause or cue the playing of the audio file. Some previews such as previews of pictures may include zooming panning controls to allow the manipulation of a displayed image. Video previews may have controls to play pause or cue the playing of a video on a display and audio on a speaker of the computer system.

The interactive preview may also be displayed in conjunction with a plurality of properties including metadata shown in as having labels and corresponding values . Any type of file property may be displayed with a label. Example properties may include file size folder location file name project name edit create date application type etc. The various labels and properties that appear may be customized according to the type of file chosen so that different sets of properties may appear for different types of files depending on what is appropriate for the selected file s type. For example a selected audio file containing a song may have properties for album name artist name of song and release date while a selected spreadsheet file might replace those properties with different properties such as group name project name project leader and project start date. The determination of which properties are to be displayed may be automatically configured or alternatively the user may be given the option of selecting and or deselecting properties to appear in the properties area for a particular file type. Properties may be prioritized by type e.g. an album name property type may be more important to a song file than an image file to facilitate in this display.

Other variations on the displayed information are also possible. For example some labels such as file name and file type may be considered optional or may be omitted from the display altogether. One example from may be the file name and file type which is already displayed elsewhere on the screen and would be redundant if displayed again in the properties area by the previewer. The space available for such non displayed labels might be used to display additional property information. Properties having no value may be omitted by default or may be flagged to appear despite being empty. As another variation some properties may be provided with different amounts of space to accommodate more lengthy properties.

The properties may be editable from the property display area. For example a user may simply click on or hover over a displayed property value and begin a process of entering editing data. The interface for entering editing the data may be dependent on the particular property or type involved. Some properties such as dates may have a calendar display and or pull down menu to select a value. For example the user can simply move a mouse pointer over a date field and a display of a calendar can appear to help the user enter a date by choosing from the calendar. Pull down menus or lists of possibilities may be displayed to simplify entry. For example by clicking a mouse pointer on a month field the system may display a list of months from which the user can choose to fill in the field. A simple textbox may be displayed with a cursor to allow the user to directly type in and or edit the property value form the preview display without requiring a separate dialog box for the data. The textbox may be a fill in the blank box in which the user can type using a cursor and keyboard. Any other form of data entry may be used. To help the user identify properties that may be edited those properties may be visually differentiated or accentuated in some fashion in the display. For example a different color e.g. yellow font e.g. bolded letters or ALL CAPS font appearance and or symbol may be used to indicate values that are editable by the user and values that are not. Highlighting can also be used to differentiate or accentuate certain fields. For example editable fields may have a certain color e.g. canary yellow in and or surrounding them similar to the effect created when a yellow highlighter is used on a printed document.

Some file types may have more properties than what will fit in a given preview display. In some embodiments there may be an option such as an ALL button that may allow a user to view all properties for a given file or at least view additional properties.

As noted above in step the user may be given the option of resizing the preview and or properties display used in the browser . For example a resizing tool may be used in the preview panel and by selecting and moving the tool the user can cause the browser to automatically adjust the display area occupied by the previewer and or properties area.

As noted above a change in the size of the preview may in some instances cause a change in the type of preview offered such that different sizes of preview panels result in different types of interactive preview. So preview may differ from preview in terms of the level of interactivity and or the types of features provided. As one example certain graphic editing features might not make sense if the preview is less than 256 pixels in width. The same type of resizing can occur if the user resizes the area used to display properties. For example the user could click and drag a mouse pointer on a border of the properties area and resize it and cause the preview area to change sizes to match the new properties area size.

In addition to resizing the preview panel and or properties display area these elements may be rearranged either automatically or by user request. For example the user may wish to move e.g. by selecting a preference by clicking and dragging the preview or some other user input the preview to have a different orientation and appearance. A different orientation may be preferable when certain types of files are previewed. For example previews of photographs taken in the landscape format or of video images may be more suitable to an orientation that is wider than it is tall e.g. landscape while other types of files e.g. text documents or portrait images may be more suitable in an orientation that is taller than it is wide. The selection between the formats can also be done automatically for example based on file type. The system may for example as part of the preview selection in step or association in step automatically examine the file type properties and or metadata to determine which preview orientation would be most appropriate for the selection to be previewed.

To facilitate the rearranging and the crash hang resistance noted above for the preview panel the preview panel and properties metadata area may be implemented as separate software modules. Each module may be executed as a distinct process on the system s processing unit s . Alternatively the preview and property metadata panels need not be implemented as distinct software or software modules in the system and may instead be implemented as a common module. The level of integration may be a design choice based on the level of extensibility desired software memory footprint and other factors.

As previously mentioned the preview panel may be incorporated into a computer system s common file dialogs. Common file dialogs may be user interface elements and or programs offered by the computer system to be shared by the various applications executed on the system. For example an operating system might offer a common Open File or Save File dialog that may be used by any application wishing to create a file on the system. Including a previewer in such common file dialogs allows multiple different types of applications to benefit from having previews and allows applications to effectively provide rich interactive previews of files that are not natively supported without requiring the application developers to develop their own previewer. Incorporating a previewer in the common file dialog also provides a consistent interface across multiple applications where user preferences and associations may be consistently used across the various applications. Furthermore offering the previewer in the common file dialog may allow an application to effectively provide a rich interactive preview of a diversity of file types even file types that the application does not natively support. For example a spreadsheet application may have installed its own rich interactive previewer to handle previews of data intensive spreadsheets. A separate word processing application which might not have any capability for editing the spreadsheet application s data files may nevertheless offer such a preview by using the common file dialog. shows an example of a previewer that is part of an Open File common dialog. These common file dialogs with their previews may be extensibly offered to other applications through certain APIs.

In some instances a user may wish to select multiple files at once or have multiple files actively selected at the same time. In those instances the previewer may operate as described above providing separate previews for each selected file. Alternatively the system may alter its behavior. For example if in step the system determines that multiple files are selected the step of generating a preview may involve a process of determining which selected file will be previewed and which ones will not. This determination may be made based on a variety of criteria e.g. first selection last selection newest selection largest selection simplest preview user previewer preference etc. such as the associations and preferences discussed above.

The system may also take steps to generate simultaneous previews corresponding to the multiple selections. As depicted in multiple preview panels may be given a stacked appearance to illustrate the multiple selections being previewed. A primary preview may appear on top and may have all of the same rich interactivity described above with other previews. Additional previews and for the other selections may appear stacked behind the primary preview and may have horizontal offset X and vertical offset Y. The offsets may be constant to present a uniform appearance. Alternatively the offsets for each successive preview may become smaller as more previews are placed in the background. There may be a predetermined maximum number of stacked previews beyond which a different appearance may be used. For example if the predetermined maximum number of previews is set to 6 can be set by the system or by the user and if more than 6 files are selected the stacked previews may have a different appearance as shown in . There the previews and beyond the first six 6 are shown as being stacked with smaller offsets. These additional previews may be rendered as simply blank previews with a predetermined pattern and or with a degree of transparency or opacity to indicate to the user that there are more selected files that are not previewed.

Alternative displays of multiple previews may also be used. For example a rotating 3 D carousel of previews such as that shown in may be used. The six sided carousel may display six separate previews on its different faces shown from back shown from back shown from back and . User interface elements may be provided to allow manual navigation through the carousel such as rotation or zoom or carousel may be rotated automatically or not at all . Other approaches include displaying multiple previews in a fanned out display displaying multiple previews resizing if desired side by side displaying them in a 3 D isometric view of a stack resembling a stack of papers and displaying them sequentially with automatic or manual navigation.

The preview of multiple selected files e.g. selected by clicking a mouse cursor on multiple files holding the SHIFT or CTRL keys and clicking or clicking and dragging a selection area around multiple files can also vary depending on the type of files chosen and different preview sequences may be used for different combinations of selected files. For example the system e.g. via the operating system hardware an application etc. may use a stacked presentation when multiple image files are selected and use a sequential video preview when multiple video files are selected. The system may also scale back or simplify the previews offered when multiple files are selected in order to conserve resources.

The various features above may be implemented as a single integrated piece of code or as a collection of subroutines or modules. For example there may be an iterator module to handle the preview of multiple files a commands module that is responsible for the user interface commands offered in the previews a preview module for generating the preview itself a properties module for handling the properties metadata portion of the preview display etc.

As noted above these preview features may be offered anytime a user is to be shown a listing of files or other data on the system. When the particular listing is generated through the use of one or more criteria such as when the display is the result of a user requested keyword search the previewer may use the search criteria to assemble the preview. For example an application may wish to notify the previewer of the keywords used in a search so that the previewer can determine which preview to use or how to sequence the previews when multiple previews are to be used. This may be an extensible feature where the previewer is provided with the search criteria.

Alternative embodiments and implementations of the present invention will become apparent to those skilled in the art to which it pertains upon review of the specification including the drawing figures. Additionally in the above references to certain features being found in one or more aspects or embodiments of the present invention are made simply to illustrate various concepts that may be advantageously used alone or in combination with other concepts and should not be read to imply that there is only one inventive concept disclosed herein or that all of the described features are required in any of the claims that follow. Rather each of the following claims stands as its own distinct invention and should not be read as having any limitations beyond those recited.

