---

title: SoftRouter protocol failovers
abstract: The SoftRouter architecture separates the implementation of control plane functions from packet forwarding functions. In this architecture, all control plane functions are implemented on general purpose servers called the control elements (CEs) that may be multiple hops away from the forwarding elements (FEs). A network element (NE) or a router is formed using dynamic binding between the CEs and the FEs. There is a protocol failover mechanism for handling failovers initiated by FEs to transfer control from one CE to another CE.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09100266&OS=09100266&RS=09100266
owner: Alcatel Lucent
number: 09100266
owner_city: Boulogne-Billancourt
owner_country: FR
publication_date: 20050608
---
The present application claims the benefit of provisional application No. 60 623 885 entitled SoftRouter Router Disaggregation filed Nov. 1 2004. In addition the present application is related to copending application Ser. No. 11 147 642 entitled SoftRouter Ser. No. 11 147 472 entitled SoftRouter Protocol Disaggregation Ser. No. 11 147 937 entitled SoftRouter Separate Control Network Ser. No. 11 147 768 entitled SoftRouter Feature Server Ser. No. 11 147 491 entitled SoftRouter Dynamic Binding Protocol which were filed on the same date as the present application Jun. 8 2005. The provisional and related applications are incorporated herein by reference in their entireties.

The present invention relates generally to the field of networking and in particular relates to protocol failovers in an exemplary SoftRouter architecture.

Traditional router architectures are becoming increasingly complex today as more and more features are being added to the Internet control plane. Many operational tasks such as routing policy enforcement or traffic engineering require network wide control that is difficult and cumbersome to achieve in a network of autonomous and complex routers. Moreover current routers have the route controllers tightly coupled with the forwarding engine and this static binding often results in shared failures.

Despite the end to end architecture design principle that aims at a simple core network as new features are being standardized more and more control plane complexity is being added at the routers. These features include routing e.g. BGP based MPLS VPNs traffic engineering TE e.g. open shortest path first OSPF TE security and the like. In contrast the forwarding path implementation has progressively become easier with rapid advances in large scale hardware integration e.g. ASIC and ready availability of off the shelf chips.

Traditional IP networks are constructed using routers that operate relatively autonomously. The potentially unmanageable complexity is present at many points all over the network. This has many undesirable consequences. First the multiple points of control significantly increase operational complexity e.g. misconfiguration . Second in certain circumstances uncoordinated actions of these autonomous routers can lead to sub optimal performance e.g. poor recovery time at best and network instability in the worst case. Finally the introduction of new features may require upgrades to a large number of routers which is both complex and error prone.

Traditional router architectures have integrated control and forwarding. The control processors implementing control plane functions are co located with the line cards that implement forwarding functions and often share the same router backplane. The control processors provide control functions only to the co located line cards and vice versa leading to a scenario where the line cards cannot be managed when there is a failure of the co located controller s .

Various deficiencies of the prior art are addressed by the present invention of protocol failovers for an exemplary SoftRouter architecture which includes many embodiments.

One embodiment is a method of performing protocol failovers where a forwarding element FE runs a protocol overlay process for a particular protocol and a routing table manager RTM process. The FE receives routing protocol messages from an active protocol control element CE and in response propagates them to all protocol CEs. Heartbeat messages are piggybacked on the received routing protocol messages. The FE receives acknowledgements from the active protocol CE in response to sent messages. The FE initiates failover to a backup protocol CE upon failure of the active protocol CE.

Another embodiment is a method of performing protocol failovers where each control element CE runs a protocol overlay process for a particular protocol. The CEs include an active protocol CE and a backup protocol CE. The active protocol CE runs a protocol process on behalf of a forwarding element FE that is controlled by the active protocol CE. The active protocol CE sends checkpoints periodically. The checkpoints are propagated by the FE to the backup protocol CE. The checkpoints are for updating a protocol state upon recovery from failure. The backup protocol CE participates in a protocol failover initiated by the FE.

Another embodiment is a method of performing protocol failovers where a forwarding element FE sends incoming and outgoing protocol messages to all control elements CEs . The FE is one of a number of FEs in a data plane. The CEs are in a control plane that is physically and logically separate from the data plane. The CEs and FEs communicate via a standard protocol. Each FE is dynamically bound to one of the CEs. The active protocol CE and the backup protocol CEs are synchronized for messages newer than a latest checkpoint. The FE initiates a protocol failover from the active protocol CE to one of the backup protocol CEs which confirms it is now the active protocol CE. Another aspect is a storage medium storing a computer program product having instructions for performing this method.

Another embodiment is a network architecture including a data plane a control plane and a protocol failover mechanism. The data plane includes a number of forwarding elements FEs for packet forwarding. The control plane is physically and logically separate from the data plane. The control plane includes at least one control element CEs for configuring controlling and providing routing information to the FEs via a standard protocol. There is a dynamic binding protocol for binding FEs and CEs. The protocol failover mechanism handles failovers initiated by FEs to transfer control from one CE to another CE for each routing protocol.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures.

The invention will be primarily described within the general context of an embodiment of an exemplary SoftRouter architecture however those skilled in the art and informed by the teachings herein will realize that the disaggregation concept may be used to generate various other embodiments of network architectures and that the invention is applicable to local area networks LANs metropolitan area networks MANs wide area networks WANs and other networks many open systems interconnection OSI layers gateway protocols serial line protocols protocol stack routing and bridging protocols many other protocols traffic management optical edge core routing wireless cable data centers auxiliary signal path ASP fault management configuration management accounting management performance management security management other network management enterprise government military applications and many other different kinds of networking characteristics and applications.

Internet protocol IP provides end to end datagram delivery service to protocols and applications and can use any link layer technology that delivers packets. illustrates the problem of emerging applications driving more functions to IP expanding the middle of the hour glass. These emerging applications include email www phone simple mail transfer protocol SMTP hypertext transfer protocol HTTP routing table protocol RTP transmission control protocol TCP user datagram protocol UDP and other protocols which involve quality of service QoS multicast mobility virtual private network VPN and other features and are transported using Ethernet point to point protocol PPP carrier sense multiple access CSMA ASYNC a subset of teletypewriter TTY synchronous optical network SONET and other protocols over copper fibber radio and other physical transport means. Traditional router architectures try to incorporate all of the new IP functions into routers resulting in duplication of complex functions in multiple routers of a network. This also increases capital and operational expenses. In general there is a need to reduce the complexity and expense of operating a network of routers.

Many new features are being added to routers e.g. border gateway protocol BGP multiprotocol label switching MPLS based VPNs and traffic engineering TE . Traditional router architectures have five to ten million lines of code and complexity is spread throughout the network. Achieving an operator s network wide objectives such as traffic engineering requires complex translation of global objectives to configuration information in numerous individual routers. Misconfiguration or uncoordinated configuration can result in poor performance or network instability.

The enormous success of the Internet has led to constant development and deployment of new features and services that have increasingly placed its technical foundations under stress. This has given credence to the notion that re architecting the current distribution of functions in an IP network would lead to significant benefits in network stability simplification of network operations and flexibility in introduction of new network protocols and services.

Many advanced network management tasks such as routing policy enforcement and traffic engineering would benefit significantly from the availability of a network wide view. For instance several common BGP induced network stability and operations problems would be solved by moving BGP from individual routers to a single entity with autonomous system AS wide scope. Similarly many management functions require a network wide view without which a network can exhibit oscillation and poor stability. However network wide control is difficult and cumbersome to achieve in today s network of autonomous and complex routers.

In the traditional router architectures the underlying theme is the deep intertwining of control and forwarding functions in current routers. There is a need to deconstruct routers to keep most of the network entities as dumb as possible by reducing their function to support only a few canonical packet forwarding functions and migrate all control protocols and non forwarding related state and control processing to a few smart network based control entities with the primary function of network wide control. There is also a need for protocol failovers to be handled gracefully and seamlessly.

Disaggregation of router hardware from router software using open standards based protocols for internetworking has many benefits. The disaggregation concept decouples suppliers for each component which lowers barriers to entry for hardware vendors and encourages independent software vendors ISVs to invest in developing carrier class routing software to supply new hardware market entrants. This disaggregation concept allows each component to focus on its own innovation curve. Hardware manufacturers can focus on the highest speeds per density at the lowest costs decreasing capital expenditures and software manufacturers can focus on new applications and manageability increasing revenue while decreasing operating expenses.

An embodiment of an exemplary SoftRouter architecture deconstructs routers by separating the implementation of control plane functions from packet forwarding functions. Other embodiments of network architectures that achieve this deconstruction are also within the scope of this invention. The present invention encompasses the concept of this deconstruction and its implications for network architecture. In the exemplary SoftRouter architecture all control plane functions are implemented on separate control entities that are not required to be co located with the forwarding engines. By migrating all non forwarding related state and control processing to a few network based control entities simpler implementation of network wide objectives are possible because coordinated configuration changes are required at only a few smart network elements instead of all the network elements in an AS. In addition the association between controllers and the forwarding engines is dynamic allowing flexible control of a forwarding engine by any control entity that is capable of doing so.

The exemplary SoftRouter architecture includes a dynamic binding protocol for establishing and maintaining dynamic bindings between forwarding entities and the control entities in the network. Intra domain and inter domain routing is adapted in the exemplary SoftRouter architecture with improved performance including improved performance for the intra domain protocol OSPF.

Disaggregation of router hardware from router software using open standards based protocols for internetworking has many benefits. The disaggregation concept decouples suppliers for each component which lowers barriers to entry for hardware vendors and encourages independent software vendors ISVs to invest in developing carrier class routing software to supply new hardware market entrants. This disaggregation concept allows each component to focus on its own innovation curve. Hardware manufacturers can focus on the highest speeds per density at the lowest costs decreasing capital expenditures and software manufacturers can focus on new applications and manageability increasing revenue while decreasing operating expenses.

An exemplary embodiment of an exemplary SoftRouter architecture is an approach to disaggregating the complex IP functions demanded by emerging applications. SoftRouter centralizes and allows sharing of complexity. SoftRouter enables scalable introduction of new functions without unduly encumbering IP forwarding functions.

By contrast shows a high level abstraction of an exemplary SoftRouter architecture that disaggregates the control and transport planes in separate hardware that communicate using standard protocols. The SoftRouter architecture has a control element and features server component and a packet forwarding element component that communicate using a standards based protocol .

Deconstructing routers in the exemplary SoftRouter architecture separates the control and forwarding functions. This separation is more than logical e.g. the use of a well defined interface with a modular application programming interface API in fact the control is physically separated i.e. executed in a distinct network element by multiple hops from where the forwarding is performed.

A FE is a network element that performs the actual forwarding and switching of traffic. In construction a FE is similar to a traditional router in that it may have multiple line cards each in turn terminating multiple ports and a switch fabric for shuttling data traffic from one line card to another. However a FE is different from a traditional router because there is an absence of any sophisticated control logic e.g. a routing process like OSPF or BGP running locally. Instead the control logic is hosted remotely.

A CE is a general purpose computing element such as a server. It connects to the network like an end host except that it is typically multi homed to the network via multiple FEs so that it is not disconnected from the network when a single link fails. A CE runs the control logic on behalf of FEs and hence controls them. Any control logic typically found on a traditional router can be migrated to the CEs including routing protocols like OSPF and BGP as well as protocols such as resource reservation protocol RSVP label distribution protocol LDP Mobile IP and the like.

A FE functions to forward data traffic between its links. This function may take various forms such as packet forwarding label switching and optical switching among others. Packet forwarding includes both layer medium access control MAC based switching and layer longest prefix match forwarding. Label switching includes for example MPLS forwarding. The data path forwarding functions can include label swapping pushing and popping. In optical switching the traffic can be time switched wavelength switched or space switched among the links. In each of these cases the switching function is driven by a simple local table that is computed and installed by a CE in the network. Thus the ability of a FE to do its work based only on a local data structure means the FE is designed to be dumb and fast while the more complex logic is relegated to a remote yet smart CE .

Both FEs and CEs are understood as logical entities in addition to physical network elements. Specifically a FE is logically defined as a collection of ports where traffic can be switched among one another. For example a FE may include all ports on a single line card in which case the whole physical packet switch is made up of multiple logical FEs . A FE can also span more than one physical switch however a CE can control multiple FEs . Similarly a CE can be understood as a logical process instantiated for providing control on behalf of FEs and can be distinguished from the server machine that actually executes it. In particular a physical CE server machine PCE can host multiple CE processes each serving a different collection of FEs . Vice versa it is also possible for multiple CE processes each instantiated for a different control purpose such as interior gateway protocol IGP and exterior gateway protocol EGP serving the same FE to be hosted on distinct PCEs. The physical and logical definitions of FEs and CEs are used interchangeably.

Without additional restrictions the above definition of NE allows flexibility. For example this definition allows two FEs in disjoint parts of a network to belong to the same NE . It also allows for a traditional router model where the FE includes exactly all the ports in the physical element and the controlling CE s are collocated on the same element.

In clustered routing the FEs making up a NE are part of a contiguous cloud. In other words all ports of the NE are reachable from each other via links internal to the NE . Physically this represents the clustering of neighboring physical FEs into a single NE . A typical scenario is that of several routers being connected back to back in a central office. From a routing perspective this clustering based definition of the NE can provide significant simplification. The reduced number of NEs in the routing view reduces the inter NE routing complexity and a different possibly less complex routing protocol can be employed for intra NE routing.

The control relationship between a FE and a CE is formally called a binding. More precisely a binding between a FE and a CE means that the CE is performing particular control functions on behalf of the FE . Because multiple protocols e.g. IGP and EGP or even multiple instances of a protocol may be required for the operation of a FE a FE may have multiple CE bindings.

The exemplary SoftRouter architecture includes various protocols. A number of different protocols are used for the operation of a network designed according to the exemplary SoftRouter architecture including dynamic binding protocol and FE CE transport protocol. The binding between a FE and a CE is established via a protocol that discovers CEs and FEs and also maintains these bindings in the face of network disruptions. In the most general case of the dynamic binding protocol a FE can bind to any available CE and a CE can perform control functions for any FE thus yielding maximal resiliency and minimal configuration overhead. This dynamic binding ability is a feature of the concept of deconstructed routers that have separate control and forwarding functions. The FE CE transport protocol has two parts namely data and control. For the data part the FE CE transport protocol supports tunneling of routing protocol packets between FEs and CEs so that a routing protocol packet received by a FE can be sent to a CE for processing. For the control part once a binding is established the FEs and the CEs use the FE CE transport protocol to communicate state information and perform control. On the uplink FE to CE direction this control part provides link and forwarding state information e.g. link up down signal to the CE . On the downlink direction the FE CE transport protocol carries configuration and control information e.g. enable disable a link forwarding information base FIB . Known protocols such as forwarding and control element separation ForCES may be used for the FE CE transport protocol.

The dynamic binding feature of the exemplary SoftRouter architecture allows for a FE to be separated by multiple hops from a CE . This flexibility comes at the expense of increased complexity in the initial configuration of the forwarding elements. In the SoftRouter model upon bootup the FE obtains its configuration information including the IP addresses of its interfaces from a remote CE that resides on a server. This poses a potential paradox in order to discover a CE and send packets to it the FE requires routing information however the routing information is supposed to come from the CE . This paradox is resolved using a discovery protocol e.g. Bell Labs discovery protocol BLDP that is part of the exemplary SoftRouter architecture. This discovery protocol lets FEs and CEs discover each other and maintain a routable path between these entities. The dynamic binding process also supports enhanced features such as CE load balancing constrained clustering algorithms that improve CE FE binding resiliency and failover increasing the availability for the network. These features also enable better network planning and better network wide control.

Embodiments of the dynamic binding protocol provide binding service for FEs and routing services for FE CE messages. The dynamic binding protocol runs continuously on all the elements FEs and CEs for the lifetime of the network as a separate protocol independent of other protocols that operate in the network. At the minimum each FE and CE has a pre configured octet string FEID CEID that acts as a unique identifier. In a bridged network of FEs and CEs for example connected over Ethernet a rapid spanning tree protocol provides the connectivity for FE CE communication. Because such networks are not the only one possible given the heterogeneous FE possibilities the dynamic binding protocol includes a separate component for supporting routing services between the CEs and the FEs . However if a spanning tree protocol is available the dynamic binding protocol can make use of it for routing services. The dynamic binding protocol has four components discovery association failure detection with repair and transport tunnels.

The discovery component of the dynamic binding protocol enables a FE to discover a CE that can manage it. This CE is called the managing CE for that FE . In order for the discovery component to provide rapid convergence for the configuration process CE information is distributed all over the network enabling FEs to dynamically bind to the best CE using bindings that are either pre configured by the network administrator or obtained using distributed clustering algorithms.

A source routed routing layer helps in the discovery process. At the time of bootup each FE uses a randomly chosen temporary IP address along with the FEID to perform pre discovery routing. This address is chosen from a controlled address space for example a private subnet address. The CEs are pre configured and hence have a valid IP address. All messages are broadcast on all interfaces of the FE and the CE .

FEs and CEs discover each other by advertising their presence to their immediate neighbors by periodic broadcasts. Each node FE CE thus maintains a list of neighbors in a local table. FEs also periodically solicit CE information from all neighbors in order to collect up to date information on the CEs in the network. In response neighboring FEs CEs respond with a list of CEs that are known to them. Each CE in the list is also associated with a known source route to the CE from the neighboring FE CE. By associating each entry with a time to live parameter it is ensured that CE information is periodically refreshed with the best path to reach the CE . Each node uses the source route with the shortest hop count to contact a CE . The discovery process runs all the time in a network designed according to the exemplary SoftRouter architecture.

Each FE is assigned one primary CE and at least one backup CE by the network administrator during planning. This information is configured in the CEs and optionally in the FEs . Typically this assignment is made a priori by taking into account factors such as the load on the CE the distance between the CE and the FE and the reliability of the links between them. Thus when a CE is contacted by a FE the CE lets the FE know the identity of its primary CE and backup CE if this information is available or accepts the FE if it can manage it. If not accepted the FE then proceeds to contact its primary CE or backup CE.

The association process strives to establish and maintain an active association between a FE and its primary CE and backup CE. The managing CE is chosen by the FE from the list of actively associated CEs with the primary CE preferred at all times to other CEs .

The dynamic binding protocol has mechanisms to detect and repair association failures. Once an association is made between the FE and a CE the liveness of the association is probed periodically through heartbeat messages initiated by the FE . When heartbeat messages do not elicit any responses from the CE it implies that either the path to the CE is no longer valid or that the CE node is no longer alive. A CE cannot disassociate from a CE without acknowledgement from the FE accepting the change. This is also true for a FE desiring a change in managing CE.

There is an exemplary method of protocol failover for embodiments of the exemplary SoftRouter architecture. This protocol failover is based on reliable message passing. In this exemplary method of protocol failover there is a list of CEs for each protocol. This list is maintained on a per protocol basis. Some examples of protocols include OSPF IS IS enhanced interior gateway routing protocol EIGRP routing information protocol RIP and other routing protocols. In other embodiments the lists are identical across protocols. Only one CE is actively managing the FE at any time. This CE is called the active protocol CE e.g. active OSPF CE. Other CEs are called backup protocol CEs. All protocol CEs run the protocol instance on behalf of a FE . The FE reliably sends incoming protocol messages to all the CEs . Periodic checkpoints are generated by the active protocol CE. Checkpoints are reliably propagated by the FE to all backup CEs. Checkpoints are useful for updating the protocol state upon recovery from failure. Upon recovery of a protocol CE synchronization is performed by the active protocol CE. Protocol failure is initiated by the FE .

In this exemplary method of protocol failover a discovery protocol establishes basic heartbeat between a FE and all protocol CEs. The heartbeat existence implies that there is a valid communication path between a FE and CE . Heartbeat failure implies there is a failure of the communication path. This exemplary method of protocol failure applies to protocols that operate on a message basis e.g. OSPF IS IS RIP EIGRP rather than a stream basis e.g. BGP . Other embodiments may be adapted to handle protocols that operate on a stream basis. All routing protocol messages intended for a FE from its peers go through that FE to the protocol CEs. Other routes to the protocol CEs are not used because the destination address is that of the FE . The routing table manager RTM process is similar to the protocol process. The RTM process updates the FIBs on the FE . Inputs to the RTM process are routing table entry RTE outputs from the various protocol processes e.g. ISPF BGP. All messages from FE to protocol CEs and vice versa carry sequence numbers for ordering of messages.

In this exemplary method of protocol failover there are three types of messages seen at an FE incoming routing protocol messages outgoing routing protocol messages and maintenance messages. Incoming routing protocol messages are from other FEs or from CEs on behalf of other FEs . Outgoing routing protocol messages are from an active protocol CE to other FEs . Maintenance messages include heartbeats failovers checkpoints and re sync. Incoming routing protocol messages are sent by the FE to all protocol CEs. Messages are sent reliably for example using stream control transmission protocol SCTP or transmission control protocol TCP . Each routing message has a message number given by the FE . Messages are acknowledged by all protocol CEs. A heartbeat message is piggybacked on all communication between a FE and CEs and includes the active protocol CEID. Heartbeats are protocol specific. This is different than the discovery protocol heartbeat which is used to detect generic CE node failure.

An exemplary message format for S PROF messages sent from a FE to a CE include the following fields source FEID destination CEID routing protocol identifier S PROF sequence number of the message from the SCTP connection checkpoint message identifier CEID of active protocol CE and protocol message enclosed if any.

An exemplary message format for S PROF messages sent from a CE to a FE include the following fields source CEID destination FEID routing protocol identifier S PROF sequence number of protocol message that is acknowledged checkpoint message identifier CE state identifier e.g. active backup re sync protocol message if any and only if the source CE is the active protocol CE and forwarding flags. Forwarding flags indicate to whom an output routing protocol message should be forwarded to. To distinguish between messages sent out to other routing peers other protocol CEs and other protocol processes e.g. RTM process .

In this exemplary failover process inputs to the routing protocol are the routing messages. Manual reconfiguration changes at one protocol CE are communicated to other protocol CEs. The active protocol CE updates a FE which then updates others. There is reliable transfer to ensure inputs are consistent across all protocol CEs. Retransmissions are initiated by a FE based on S PROF sequence number. If a retransmission is not acknowledged by a protocol CE after a predetermined number of retries the CE is dropped from the backup CE list. Routing protocol process failure is detectable. A S PROF message is sent by a CE only when there is an output message from the routing protocol process. S PROF messages from the backup protocol CE are empty. Absence of S PROF messages indicates that the routing protocol process on the CE has failed.

A FE initiates failover. There are many failure possibilities including the following three cases 1 the active protocol CE goes down 2 all communication paths between the active protocol CE and the FE go down and 3 a protocol process on the active protocol CE fails. The first two cases are identified by the protocol e.g. BLDP and the third case is identified by missing S PROF messages from the CE . In all three cases the FE switches to one of the backups. The FE selects a backup protocol CE and changes it to active status. Notice is provided to all protocol CEs by the active protocol CEID in S PROF messages. The S PROF process at the backup protocol CE sees the change and starts to encapsulate messages from the routing protocol process without discarding it. The former active protocol CE knows of the change when the protocol process starts responding once again. Even if the backup protocol CE sends any messages in the interim the FE ignores all routing protocol messages from the backup protocol CE.

When an active protocol CE fails the backup protocol CE takes over as the active protocol CE. All CEs are aware of changes immediately upon receipt of the next message from the FE . Upon failure the recovery process proceeds as follows. The CE node or CE process recovers from failure along with the S PROF process . Upon receiving the next protocol message from failure the backup protocol CE is aware of the current active protocol CE and the latest checkpoint. Because messages are stored by S PROF in non volatile memory some messages are recoverable. The unknown messages based on S PROF sequence numbers are recovered by the reliable connection between FE and CE and with the help of the current active protocol CE. Re sync messages either originate from the active protocol CE or the FE according to the design choice. Until the CE is synchronized the CE is in a re sync state. After synchronization the CE switches to the backup state.

In this exemplary method of protocol failover a checkpoint is a specific S PROF message number. All S PROF message numbers less than the checkpoint are irrelevant. The protocol CE keeps a per FE checkpoint. All protocol CEs are synchronized for those S PROF messages that are newer than the last checkpoint. The active protocol CE sets a checkpoint and communicates it to all the CEs . This is a protocol specific checkpoint to be determined by a procedure that is configured during initialization. The FE need not know about the specifics of the protocol so that it is still a generic service. Checkpoint information and the active protocol CEID are included in all protocol messages sent to the backup protocol CEs. The backup protocol CE requests retransmission from the active protocol CE for all missing messages since the last checkpoint upon failure recovery reboot. All communication between the active protocol CE and the backup CE is via the FE . In some embodiments the FE stores messages for re sync if non volatile storage is available. For example OSPF has summary LSAs sent every 30 minutes and a new checkpoint can be established every 60 minutes reducing backup synchronization overhead.

This exemplary method of protocol failover addresses several consistency issues CE nodes processes fail and recover fast thrashing different messages are lost for different CEs in the backup protocol CE list and performance under high load. To address thrashing this exemplary method maintains sufficient interval before switching back to the preferred CE . Also a reliable transport protocol e.g. STCP TCP is used to ensure re sync non volatile storage at CEs is used for faster re synchronization and checkpoints help avoid large re sync loads. To address message losses a reliable transport is used. If there are heavy losses for some CEs then this exemplary method switches to the re sync state to avoid inconsistency. Removal from the backup list also ensures re sync at a later stage. To address overload all CEs in the backup list run protocol instances for the FE . Performance degradation is possible under a heavy load and is mitigated by assigning low priority to backup processes on those CEs .

S PROF can be implemented as a generic service. Protocol specific instantiations can be made as necessary. Timers may be set according to each protocol and the behavior of forwarding flags may be variable. S PROF interacts with the RTM process. The RTM process can also fail and hence requires hot standby to be reliable. When the RTM process co exists with the routing protocol process then the FE notifies the S PROF process at that CE . Otherwise S PROF at the active protocol CE sets up forwarding flags that notify the FE to forward RTM updates appropriately.

There is an exemplary method for a FE initiated failover. A FE exchanges protocol heartbeats or any messages if present with active protocol CE periodically. There are three failure possibilities the active protocol CE goes down all communication paths between active protocol CE and the FE goes down or the protocol process on active protocol CE fails. If there is no response from the CE e.g. any acknowledgements or messages then the FE removes the active protocol CE from the admin set and initiates failover to one of the backup CEs in the admin set. The backup protocol CE responds to the FE indicating it is ready. The FE sends a message to all protocol CEs signaling failover to a backup protocol CE. The backup protocol CE responds with confirmation that it is now the active protocol CE.

There is an exemplary method for failover at a CE . The backup protocol CE takes over as active protocol CE upon failure. Given that the new active protocol CE has all protocol messages from the last known checkpoint and processes protocol messages in order the new active protocol CE quickly arrives at the current protocol state. The S PROF process at the new active protocol CE starts encapsulating the messages to the FE instead of dropping it. This current state is now used to provide the routing table manager with up to date information.

The processor cooperates with conventional support circuitry such as power supplies clock circuits cache memory and the like as well as circuits that assist in executing the software routines stored in the memory . As such it is contemplated that some of the steps discussed herein as software methods may be implemented within hardware for example as circuitry that cooperates with the processor to perform various method steps. The computer also contains input output I O circuitry that forms an interface between the various functional elements communicating with the computer .

Although the computer is depicted as a general purpose computer that is programmed to perform various functions in accordance with the present invention the invention can be implemented in hardware as for example an application specific integrated circuit ASIC or field programmable gate array FPGA . As such the process steps described herein are intended to be broadly interpreted as being equivalently performed by software hardware or a combination thereof.

The present invention may be implemented as a computer program product wherein computer instructions when processed by a computer adapt the operation of the computer such that the methods and or techniques of the present invention are invoked or otherwise provided. Instructions for invoking the inventive methods may be stored in fixed or removable media transmitted via a data stream in a broadcast media or other data bearing medium and or stored within a working memory within a computing device operating according to the instructions.

While the foregoing is directed to various embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof. As such the appropriate scope of the invention is to be determined according to the claims which follow.

