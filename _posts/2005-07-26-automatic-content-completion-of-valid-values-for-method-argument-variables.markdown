---

title: Automatic content completion of valid values for method argument variables
abstract: The invention is directed to a method which derives from metadata definitions the allowable values for a method argument, where the allowable values are a subset or a restricted set of values from a defined range of values for that type of method argument. The subset of allowable values is then converted into a fragment of source code that can be used to initialize the argument variable with one of the allowable values when the method is invoked. The fragment of source code is inserted into the source code for that method argument using an editor tool. A system for implementing the method may comprise an integrated development environment (IDE) program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865870&OS=07865870&RS=07865870
owner: International Business Machines Corporation
number: 07865870
owner_city: Armonk
owner_country: US
publication_date: 20050726
---
The present invention concerns the development of computer software and more particularly concerns the automatic content completion of valid values for method argument variables.

An integrated development environment IDE is a programming environment that has been packaged as an application program typically consisting of a code editor a compiler or parser a debugger and a graphical user interface GUI builder. The IDE may be a stand alone application or it may be included as part of one or more existing and compatible applications. IDEs provide a user friendly framework for developing many modern object oriented programming languages such as Visual Basic C C Pascal and Java.

IDEs commonly provide editing tools to assist software developers in editing writing source code files or portions of source code for such files. Code assist or statement completion is a powerful editing tool that allows a developer to choose from a list of contextually selected candidate completion statements. A chosen candidate completion statement is then automatically written into the source code file or source code portion at the position of the editor tool cursor for example. Such a tool reduces the errors associated with the developer manually writing the code. It also removes the need for the developer to either attempt to recall code information from memory or look it up from other sources which in the latter case might require the developer to flip between the editing tool window and windows containing the sought after information.

A problem with the code assist or statement completion editing tool is that it derives the contents of the candidate completion statement list from the definition of the shape of the class for which the completion is being performed. It does not however indicate whether any of the candidate completion statements in the list is restricted further by information not present in the class definition. For example it does not provide any information for the case where one of said possible completion statements in the pop up list includes a method argument having a variable that on method invocation can receive as a valid passed in value a value belonging to a small subset of a range of values defined for that type of argument. The subset of valid passed in values may comprise the only values that are acceptable to the application programming interface API of the class.

It is an object of the invention to mitigate and or obviate problems associated with known code assist or statement completion editing tools.

It is a further object of the invention to provide a method a system a computer and a machine readable medium for automatic content completion of valid values for method argument variables.

According to a first aspect of the invention there is provided a method for developing source code for a computer program the method being characterised in that it comprises the steps of accessing a portion of source code through a code editor identifying code comprising a method argument said method argument being of a type that has a defined range of values and inserting code into said method argument code said inserted code defining allowable values for said method argument said allowable values comprising a subset of said defined range of values for that type of method argument.

An advantage of the method in accordance with the invention over known code assist or completion statement software development tools is that by modifying the source code of method arguments to effectively restrict them to valid values for the argument variable results in fewer runtime errors. The known code assist software development tools are primarily directed to creating source code that compiles cleanly but by augmenting this with valid variable value information that is not available from the method argument s class definition considerably reduces the occurrences of a processor executing the affected methods from throwing exceptions at runtime which is naturally desirable. Given the prevalence in source code of methods containing arguments taking restricted sets of values from defined ranges of values the present invention in its first aspect provides a novel and useful contribution to the art.

The subset comprising allowable values may comprise a set of values determined as being acceptable to the application programming interface API of the method to which the argument belongs.

Consequently at runtime the method argument will take only passed in values that are valid as determined by the API of the corresponding class method.

The step of identifying code comprising a method argument may comprise a developer manipulating the editor to highlight a graphical or textual representation of the method argument code on a screen display of the editor.

This feature gives a software developer manual control over whether to utilise the code modifying method of the invention for a selected method argument.

Alternatively the step of identifying code comprising a method argument comprises the editor automatically recognising source code comprising a method argument.

As an automated code identification method this provides the advantage of ensuring consistency of treatment of method arguments by the same or different software developers.

Method argument code identification could be implemented by the editor through a comparison step whereby sections of the source code being edited are compared to known method argument code templates or any other method argument identification process familiar to a skilled artisan.

Preferably the editor highlights a graphical or textual representation of the identified method argument code on a screen display thereof.

The editor may invoke a code builder to perform the step of inserting code into the method argument code responsive to the method argument code being identified.

In a preferred implementation of the method in accordance with the invention the step of inserting code into the method argument code comprises the steps of invoking a property editor class method associated with the identified method argument to access the method argument variable invoking a property editor to display a list of allowable values for the method argument variable invoking a code generating method to return a snippit of source code that can be used to initialise the method argument variable with one of the allowable values and inserting the snippit of code into the method argument code.

According to a second aspect of the invention there is provided a system for implementing the method in accordance with the first aspect of the invention.

According to a third aspect of the invention there is provided a computer having a machine readable medium and a processor for implementing the method in accordance with the first aspect of the invention.

According to a fourth aspect of the invention there is provided a machine readable medium comprising computer code executable on a processor of a computer in accordance with the third aspect of the invention for implementing the method in accordance with the first aspect of the invention.

The foregoing and further features of the present invention will be more readily understood from a description of a preferred embodiment by way of example thereof with reference to the accompanying drawings.

Referring firstly to a known automatic statement completion system is described for comparative purposes and by way of background to the present invention.

The known system includes an IDE . The IDE has an editor a parser which may comprise a compiler or an interpreter a statement completion module and a database . The parser may parse source code from source code files under the control of the editor . The parser may parse source code from any object oriented language such as Visual Basic C C Pascal and Java.

The parser can also parse source code being edited or written in accordance with the parsing rules of the applicable object oriented programming language and is arranged such that it can parse incomplete portions of code without throwing errors.

The statement completion module is invoked by the editor on detection of an event such as recognition of a typed in operator or character in the source code being edited or written actuation of a hot key manual actuation by the developer through placing a cursor on an icon and clicking a mouse button for example. The statement completion module seeks to automatically complete certain code statements expressions or the like as the developer is editing writing source code.

On detection of an event as aforesaid indicating that statement completion is possible applicable to the source code portion presently being edited written by the developer using the editor the editor invokes the parser . The parser parses at least the portion of the source code being edited written to obtain information concerning the code linked to a cursor position of the editor cursor. The parser may access the database to retrieve candidate completion statements which are displayed on an editor screen not shown as a pop up list or drop down menu. The developer may choose any of the listed completion statements as appropriate by highlighting the selected statement in the list. The editor then completes the source code being edited written by inserting source code corresponding to the selected completion statement in the source code being edited written at the position of the editor cursor.

The editor parser and statement completion module are software based modules that are computer implemented.

A known statement completion system as described with respect to is disclosed in U.S. Pat. No. 6 305 008. Further features of the known system and of the means for putting such an automatic code completion system into effect can be obtained from U.S. Pat. No. 6 305 008.

Referring now to this comprises a representative hardware and operating environment in which the present invention may be put into effect. It comprises a personal computer PC such as an IBM compatible personal computer Apple Macintosh computer or UNIX based workstation. The PC has a central processing unit such as a microprocessor and a number of other units interconnected via a system bus . The PC includes a Random Access Memory RAM a Read Only Memory ROM an I O adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse and or other user interface devices such as a touch screen not shown to the bus a communication adapter for connecting the PC to a communication network e.g. a data processing network and a display adapter for connecting the bus to a monitor or display device . The PC typically has resident thereon an operating system such as the Microsoft Windows NT or Windows XP Operating System OS the IBM OS 2 operating system the MAC OS or UNIX operating system. It will be appreciated that the present invention may also be implemented on other suitable computer platforms and operating systems including distributed computing environments.

The preferred embodiment of the invention depicted by comprises a system including an IDE . The IDE includes at least one code parser importer that can parse source code of source code files and portions of source code being edited written by a software developer using a code viewer editor . The editor can invoke a code builder tool to perform code statement completion in a known manner or to automatically complete valid values in method arguments in accordance with the method of the invention as will be explained hereinafter. The IDE may include a database for storing data pertaining to candidate completion statements in a known manner and data pertaining to the allowable values of method arguments for use in the method of the invention. As well as a database completion values not based on the shape of the class may come from metadata that can be associated against the class and its API or even computed dynamically from a rules engine . Thus the database may be replaced by a metadata store or the rules engine . The IDE the parser the editor and the builder tool are software based modules that are computer implemented. These may be implemented on a single PC or workstation as a single application program or a number of integrated application programs or may be implemented on a distributed computing platform as will be familiar to a skilled artisan.

A relationship pane displays the inheritance relationships between the file selected in file pane and other files with which is associated by inheritance. For example if a file is selected in file pane all the interfaces within the file and their inheritance relationships will be displayed in relationship pane .

In an edit pane an editor window is displayed that allows the developer to type in or amend the method implementation of a method that is selected in method pane . The code for the method implementation is displayed in edit pane .

The system can be utilised to implement a code assist or statement completion function in a known manner as hereinbefore described. In this mode of operation the editor window displayed in the editor pane comprises a code assist window. An example of this mode of operation is illustrated by and . Where for example the word Str has been typed in the editor window as illustrated in a candidate list of allowable completions comprising all Java classes and interfaces beginning with Str appears in the editor window as a pop up list or drop down menu. The developer can scroll the list and select a completion statement e.g. String java.lang by highlighting indicated by the arrow in the figure that statement for example. The editor inserts the Java source code for the selected completion statement into the source code in the editor window at the position of the editor cursor. Once the code editing writing process is completed the updated source code is copied to the source code files . Data pertaining to the editing process may be stored in the database for use in future code editing and writing processes.

The candidate items listed in the code assist editor window may be populated on a contextual basis in a known manner and may be retrieved from the database or obtained from other sources or means linked to the system such as a metadata store or rules engine following parsing by the builder tool of the source code being edited written by the developer and possibly also after parsing code from other source files .

The code assist function as described so far does not indicate whether any of the possible completion statements in the list is restricted further by information not present in the class definition. For example a method argument in a class may be defined as a type int meaning that it is a variable that can take a value in the defined range 0x80000000 to 0x7fffffff but the API of the class might be such that the only acceptable values for this method argument are say 0 and 1 representing the values vertical and horizontal for example. Syntactically any int value in the defined range of values is correct for source code compilation purposes but at runtime an error may be thrown if an invalid value is passed in when the method is invoked and executed.

The method in accordance with the invention can be implemented by the system depicted in and by operating said system generally in a manner similar to the known statement completion process. The method of the invention comprises deriving from metadata definitions the allowable values for a method argument where said allowable values are a subset or a restricted set of values from a defined range of values for that type of method argument converting said allowable values into a fragment of Java code that can be used to initialise the argument variable with one of the allowable values when the method is invoked and inserting the fragment of source code into the source code for that method argument using the editor of the IDE .

In order to implement the method of the invention a means of using the editor to identify source code comprising a method argument comprising a variable that takes a range of values can be provided in a number of ways. The method may comprise a developer manually using an editor cursor to highlight source code recognisable as code comprising a method argument of interest. Alternatively the editor may be arranged to automatically identify method argument source code by comparing the source code portions to code templates stored in the database . In this latter case the editor invokes the parser to conduct the comparison step wherein the parser firstly parses the selected source code to analyse its structure and then retrieves data from the database for the comparison. Alternative methods of identifying method argument code known to the skilled artisan could be employed as alternatives.

Once method argument source code has been identified the editor invokes the parser to analyse the code. The editor then invokes the builder tool to perform a set of methods on the analysed source code as a means of obtaining a suitable source code fragment snippit for inserting into the method source ode where said fragment of code is used on method invocation and execution to initialise the method argument variable with a valid value. The valid value may be chosen from the set of values determined as being acceptable by the API of the class to which the method belongs.

As well as using the JavaBeans specification java.beans.PropertyEditor class to retrieve the list of allowable values other metadata techniques could be employed such as formatted Java doc describing parameter arguments metadata tag definitions or other component model data.

The flow diagram of provides an illustration of a particular implementation of a method in accordance with the invention utilising BeanInfo metadata for JavaBeans. It will be appreciated that the method of the invention may be implemented using any other form of metadata where parameter values can be determined.

There is no existing standard specification for Javadoc method arguments but some conventions do exist. For example in the Standard Widget Toolkit SWT formatted lists exist in comments that could be queried and used to populate the completion values.

In summary the invention is directed to a method which derives from metadata definitions the allowable values for a method argument where said allowable values are a subset or a restricted set of values from a defined range of values for that type of method argument. The subset of allowable values is then converted into a fragment of source code that can be used to initialise the argument variable with one of the allowable values when the method is invoked. The fragment of source code is inserted into the source code for that method argument using an editor tool. A system for implementing the method may comprise an integrated development environment IDE program.

