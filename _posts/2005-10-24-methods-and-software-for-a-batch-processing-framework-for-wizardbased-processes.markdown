---

title: Methods and software for a batch processing framework for wizard-based processes
abstract: Disclosed herein are systems and techniques to provide for batch processing of wizards. In general, the techniques may include a computer-implemented method that comprises presenting a wizard to a user to perform a step-by-step process, with each step associated with a step type and the step type being one of confirmation, processing, optional input, or mandatory input. The process is executed as a batch process based on a user request. Then, the batch process is interrupted based on an associated step type of a current step, the interrupting comprising comparing the associated step type to a user parameter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07757234&OS=07757234&RS=07757234
owner: Sap Aktiengesellschaft
number: 07757234
owner_city: Walldorf
owner_country: DE
publication_date: 20051024
---
Wizards are generally considered interactive software applications that present a task to a user as a series of logical steps. For example wizards are commonly used to walk a user through installation of software content and other similar logic or data. Many wizard steps may require user input whereas others may not. Such wizards requiring user input are often interspersed between long lasting steps which require none. This requires a user to wait sometimes hours for a particular non interactive step to complete before further input can be provided in a subsequent step.

This disclosure generally describes systems methods and software for operating wizard based applications in a batch processing mode. For example a computer implemented method may comprise presenting a wizard to a user to perform a step by step process with each step associated with a step type and the step type being one of confirmation processing optional input or mandatory input. The process is executed as a batch process based on a user request. Then the batch process is interrupted based on an associated step type of a current step the interrupting comprising comparing the associated step type to a user parameter.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Features aspects and advantages will be apparent from the description drawings and claims.

The training administrator can administer internal and external participants or learners and enroll them for courses to be delivered via any number of techniques. Training management supports the respective organization entity or learner in the day to day activities associated with course bookings. Booking activities can be performed by the training administrator in training management on an individual or group participant basis. For example training administrator can often request execute or otherwise manage the following activities in a dynamic participation menu presented in learning management system i prebook if participants are interested in taking certain classroom courses or virtual classroom sessions but there are no suitable dates scheduled learners can be prebooked for the course types. Prebooking data can be used to support a demand planning process ii book individual or group learners for example companies departments roles or other organizational units can be enrolled for courses that can be delivered using many technologies iii rebook learners can book a course on an earlier or later date than originally booked iv replace learners can be swapped and v cancel course bookings can be canceled for example if the learners cannot attend.

Environment is typically a distributed client server system that spans one or more networks such as external network or internal network . In such embodiments data may be communicated or stored in an encrypted format such as for example using the RSA WEP or DES encryption algorithms. But environment may be in a dedicated enterprise environment across a local area network or subnet or any other suitable environment without departing from the scope of this disclosure. Indeed while generally described or referenced in terms of an enterprise the components and techniques may be implemented in any suitable environment organization entity and such. Turning to the illustrated embodiment environment includes or is communicably coupled with server one or more learners or other users on clients and network . In this embodiment environment is also communicably coupled with external content provider .

Server comprises an electronic computing device operable to receive transmit process and store data associated with environment . Generally provides merely one example of computers that may be used with the disclosure. Each computer is generally intended to encompass any suitable processing device. For example although illustrates one server that may be used with the disclosure environment can be implemented using computers other than servers as well as a server pool. Indeed server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation Unix based computer or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Server may be adapted to execute any operating system including Linux UNIX Windows Server or any other suitable operating system. According to one embodiment server may also include or be communicably coupled with a web server and or a mail server. Server may also be communicably coupled with a remote repository over a portion of network . While not illustrated the repository may be any intra enterprise inter enterprise regional nationwide or other electronic storage facility data processing center or archive that allows for one or a plurality of clients as well as servers to dynamically store data elements which may include any business enterprise application or other transaction data. For example the repository may be a central database communicably coupled with one or more servers and clients via a virtual private network VPN SSH Secure Shell tunnel or other secure network connection. This repository may be physically or logically located at any appropriate location including in one of the example enterprises or off shore so long as it remains operable to store information associated with environment and communicate such data to at least a subset of plurality of the clients perhaps via server .

As a possible supplement to or as a portion of this repository server normally includes some form of local memory. The memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. For example the memory may store or reference a large volume of information relevant to the planning management and follow up of courses or other content. This example data includes information on i course details such as catalog information dates prices capacity time schedules assignment of course content and completion times ii personnel resources such as trainers who are qualified to hold courses iii room details such as addresses capacity and equipment and iv participant data for internal and external participants. The memory may also include any other appropriate data such as VPN applications or services firewall policies a security or access log print or other reporting files HTML files or templates data classes or object interfaces child software applications or sub systems and others. In some embodiments the memory may store information as one or more tables in a relational database described in terms of SQL statements or scripts. In another embodiment the memory may store information as various data structures in text files extensible Markup Language XML documents Virtual Storage Access Method VSAM files flat files Btrieve files comma separated value CSV files internal variables or one or more libraries. But any stored information may comprise one table or file or a plurality of tables or files stored on one computer or across a plurality of computers in any appropriate format. Indeed some or all of the learning or content data may be local or remote without departing from the scope of this disclosure and store any type of appropriate data.

Server also includes one or more processors. Each processor executes instructions and manipulates data to perform the operations of server such as for example a central processing unit CPU a blade an application specific integrated circuit ASIC or a field programmable gate array FPGA . Although this disclosure typically discusses computers in terms of a single processor multiple processors may be used according to particular needs and reference to one processor is meant to include multiple processors where applicable. In the illustrated embodiment the processor executes enterprise resource planning ERP solution thereby providing organizations with the strategic insight ability to differentiate increased productivity and flexibility they need to succeed. With software such as ERP solution the implementing entity may automate end to end processes and extend those processes beyond the particular organization to the entire system by incorporating customers partners suppliers or other entities. For example ERP solution may include or implement easy to use self services and role based access to information and services for certain users thereby possibly boosting productivity and efficiency. In another example ERP solution may include or implement analytics that enable the particular entity or user to evaluate performance and analyze operations workforce and financials on an entity and individual level for strategic and operational insight. ERP solution may further include or implement i financials to control corporate finance functions while providing support for compliance to rigorous regulatory mandates ii operations to support end to end logistics for complete business cycles and capabilities that improve product quality costs and time to market and or iii corporate services to optimize both centralized and decentralized services for managing real estate project portfolios business travel environment health and safety and quality. In the illustrated embodiment ERP solution also includes or implements some form of human capital management in this case learning to maximize the profitability or other measurable potential of the users with support for talent management workforce deployment and workforce process management. In certain cases ERP solution may be a composite application that includes execute or otherwise implement some or all of the foregoing aspects which include learning management system as illustrated.

As briefly described above learning management system is any software operable to provide a comprehensive enterprise learning platform capable of managing and integrating business and learning processes and supporting all methods of learning not restricted to e learning or classroom training. As described in more detail in learning management system is often fully integrated with ERP solution and includes an intuitive learning portal and a powerful training and learning management system as well as content authoring structuring and management capabilities. Learning management system offers back office functionality for competency management and comprehensive assessment for performance management and offers strong analytical capabilities including support for ad hoc reporting. The solution uses a comprehensive learning approach to deliver knowledge to all stakeholders and tailors learning paths to an individual s educational needs and personal learning style. Interactive learning units can be created with a training simulation tool that is also available.

Regardless of the particular implementation software may include software firmware wired or programmed hardware or any combination thereof as appropriate. Indeed ERP solution may be written or described in any appropriate computer language including C C Java J Visual Basic assembler Perl any suitable version of 4GL as well as others. For example returning to the above described composite application the composite application portions may be implemented as Enterprise Java Beans EJBs or the design time components may have the ability to generate run time implementations into different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET. It will be understood that while ERP solution is illustrated in as including one sub module learning management system ERP solution may include numerous other sub modules or may instead be a single multi tasked module that implements the various features and functionality through various objects methods or other processes. Further while illustrated as internal to server one or more processes associated with ERP solution may be stored referenced or executed remotely. For example a portion of ERP solution may be a web service that is remotely called while another portion of ERP solution may be an interface object bundled for processing at the remote client. Moreover ERP solution and or learning management system may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure.

Server may also include an interface for communicating with other computer systems such as the clients over networks such as or in a client server or other distributed environment. In certain embodiments server receives data from internal or external senders through the interface for storage in the memory and or processing by the processor. Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with networks or . More specifically the interface may comprise software supporting one or more communications protocols associated with communications network or hardware operable to communicate physical signals.

Network facilitates wireless or wireline communication between computer server and any other local or remote computers such as clients. Network as well as network facilitates wireless or wireline communication between computer server and any other local or remote computer such as local or remote clients or a remote content provider . While the following is a description of network the description may also apply to network where appropriate. For example while illustrated as separate networks network and network may be a continuous network logically divided into various sub nets or virtual networks without departing from the scope of this disclosure. In some embodiments network includes access points that are responsible for brokering exchange of information between the clients. As discussed above access points may comprise conventional access points wireless security gateways bridges wireless switches sensors or any other suitable device operable to receive and or transmit wireless signals. In other words network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components in system . Network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. Network may include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the global computer network known as the Internet and or any other communication system or 30 systems at one or more locations. Turning to network as illustrated it may be all or a portion of an enterprise or secured network. In another example network may be a VPN between server and a particular client across wireline or wireless links. In certain embodiments network may be a secure network associated with the enterprise and certain local or remote clients.

Each client is any computing device operable to connect or communicate with server or other portions of the network using any communication link. At a high level each client includes or executes at least GUI and comprises an electronic computing device operable to receive transmit process and store any appropriate data associated with environment . It will be understood that there may be any number of clients communicably coupled to server . Further client and learner administrator developer and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover for ease of illustration each client is described in terms of being used by one user. But this disclosure contemplates that many users may use one computer or that one user may use multiple computers. As used in this disclosure the client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device or computer. For example the client may be a PDA operable to wirelessly connect with external or unsecured network. In another example the client may comprise a laptop that includes an input device such as a keypad touch screen mouse or other device that can accept information and an output device that conveys information associated with the operation of server or other clients including digital data visual information or GUI . Both the input device and output device may include fixed or removable storage media such as a magnetic computer disk CD ROM or other suitable media to both receive input from and provide output to users of the clients through the display namely the client portion of GUI or application interface .

GUI comprises a graphical user interface operable to allow the user of the client to interface with at least a portion of environment for any suitable purpose such as viewing application or other transaction data. Generally GUI provides the particular user with an efficient and user friendly presentation of data provided by or communicated within environment . As shown in later FIGS GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. GUI may be a learning interface allowing the user or learner to search a course catalog book and cancel course participation and support individual course planning e.g. by determining qualification deficits and displaying a learner s completed started and planned training activities . Learner also may access and work through web based courses using the learning interface. The learning interface may be used to start a course reenter a course exit a course and take tests. The learning interface also provides messages notes and special course offerings to the learner . GUI may also be a course editor allowing the content developer to create the structure for the course content which may be associated with certain metadata. The metadata may be interpreted by a content player of learning management system described below to present a course to learner according to a learning strategy selected at run time. In particular the course editor may enable the author or content developer to classify and describe structural elements assign attributes to structural elements assign relations between structural elements and build a subject taxonomic course structure. The course editor generates the structure of the course and may include a menu bar a button bar a course overview a dialog box and work space. The menu bar may include various drop down menus such as for example file edit tools options and help. The drop down menus may include functions such as create a new course open an existing course edit a course or save a course. The button bar may include a number of buttons. The buttons may be shortcuts to functions in the drop down menus that are used frequently and that activate tools and functions for use with the course editor. The remaining portions of the example course editor interface may be divided in to three primary sections or windows a course overview a dialog box and a workspace. Each of the sections may be provided with horizontal or vertical scroll bars or other means allowing the windows to be sized to fit on different displays while providing access to elements that may not appear in the window.

GUI may also present a plurality of portals or dashboards. For example GUI may display a portal that allows users to view create and manage historical and real time reports including role based reporting and such. Generally historical reports provide critical information on what has happened including static or canned reports that require no input from the user and dynamic reports that quickly gather run time information to generate the report. Of course reports may be in any appropriate output format including PDF HTML and printable text. Real time dashboards often provide table and graph information on the current state of the data which may be supplemented by presentation elements . GUI is often configurable supporting a combination of tables and graphs bar line pie status dials etc. and is able to build real time dashboards where presentation elements as well the displayed application or transaction data may be relocated resized and such. It should be understood that the term graphical user interface may be used in the singular or in the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Indeed reference to GUI may indicate a reference to the front end or other component of learning management system as well as the particular interface or learning portal accessible via the client as appropriate without departing from the scope of this disclosure. In short GUI contemplates any graphical user interface such as a generic web browser or touch screen that processes information in environment and efficiently presents the results to the user. Server can accept data from the client via the web browser e.g. Microsoft Internet Explorer or Netscape Navigator and return the appropriate HTML or XML responses to the browser using network or such as those illustrated in subsequent FIGs.

Learners log on to their personalized learning portal from any suitable client via GUI . The learning portal is the user s personalized point of access to the learning related functions. Generally learning portal presents details of the complete education and training offering such as traditional classroom training e learning courses such as virtual classroom sessions or web based training or extensive curricula. Self service applications enable learners to enroll themselves for courses prebook for classroom courses and cancel bookings for delivery methods as well as start self paced learning units directly. If learner wants to continue learning offline he can often download the courses onto the client and synchronize the learning progress later. The learning portal may be seamlessly integrated in an enterprise portal where learner is provided with access to a wide range of functions via one system. Such an enterprise portal may be the learner s single point of entry and may integrate a large number of role based functions which are presented to the user in a clear intuitive structure. The learning portal often gives learner access to functions such as for example search for courses using i find functions finding courses in the course catalog that have keywords in the course title or description and ii extended search functions using the attributes appended to courses such as target group prerequisites qualifications imparted or delivery method. Additional functions may include self service applications for booking courses and canceling bookings messages and notes course appraisals and special or personalized course offering including courses prescribed for the learner on the basis of his or her role in the enterprise or the wishes of the respective supervisor or trainer and qualification deficits of learner that can be reduced or eliminated by participating in the relevant courses. The learning portal may also provide a view of current and planned training activities as well as access to courses booked including i starting a course ii reentering an interrupted course iii downloading a course and continuing learning offline iv going online again with a downloaded course and synchronizing the learning progress v exiting a course and vi taking a test.

On the basis of the information the learning management system has about learner the learning management system core proposes learning units for the learner monitors the learner s progress and coordinates the learner s personal learning process. In addition the learning management system core is often responsible for managing and handling the administrative processes. Targeted knowledge transfer may use precise matching of the learning objectives and qualifications of a learning unit with the learner s level of knowledge. For example at the start of a course the management system core may compare learning objectives already attained by the respective learner with the learning objectives of the course. On the basis of this core determines the learner s current level and the required content and scope of the course. The resulting course is then presented to the learner via a content player .

The content player is a virtual teacher that tailors learning content to the needs of the individual learner and helps him navigate through the course content player then presents the learning course to the learner . In certain embodiments the content player is a Java application that is deployed on a Java runtime environment such as J2EE. In this case it is linked with other systems such as a web application server and ERP solution via the Java Connector. The individual course navigation may be set up at runtime on the basis of the learning strategy stored in the learner account. Using the didactical strategies content player helps ensure that the course is dynamically adapted to the individual learning situation and the preferences expressed by learner . At this point the content player then calculates dynamically adjusted learning paths and presents these to the learner perhaps graphically to facilitate orientation within a complex subject area. The learner can resume working on an interrupted course at any time. At this point the content player guides the learner to the spot at which training was interrupted.

Offline learning player generally enables learners to download network or other web based courses from the learning portal and play them locally. Locally stored courses are listed in the course list with an icon indicating the status of each course. The offline player may guide the learner through the course according to the preferred learning strategy. It may also dynamically adjust the number and sequence of learning objects to the learner s individual learning pattern. If the learner interrupts a course the offline player reenters the course at the point of interruption the next time. The learner can at any point in time resynchronize his offline learning progress with the learning portal and either continue learning online or set the course to a completed status.

LMS core may also include or invoke training management that would be an administrative side of LMS . This typically includes course planning and execution booking and cancellation of course participation and follow up processing including cost settlement. In training management the training administrator creates the course offering and can for example define training measures for individual learners and groups of learners . The training administrator creates the course catalog in training management and makes it available partially or completely to learners in the learning portal for reference and enrollment purposes. The training administrator can typically administer internal and external participants and enroll them for courses to be delivered using various technologies and techniques. Training management supports numerous business processes involved in the organization management and handling of training. Training management can be configured to meet the requirements work processes and delivery methods common in the enterprise. Training measures are usually flexibly structured and may include briefings seminars workshops virtual classroom sessions web based trainings external web based trainings static web courses or curricula. Training management includes functions to efficiently create the course offerings. Using course groups to categorize topics by subject area enables flexible structuring of the course catalog. For example when training administrator creates a new subject area represented by a course group he can decide whether it should be accessible to learners in the learning portal .

Reporting functions in training management enable managers to keep track of learners learning activities and the associated costs at all times. Supervisors or managers can monitor and steer the learning processes of their employees. They can be notified when their employees request participation or cancellation in courses and can approve or reject these requests. LMS may provide the training manager with extensive support for the planning organization and controlling of corporate education and training. Trainers need to have up to the minute reliable information about their course schedules. There is a wide range of reporting options available in training management to enable the trainer to keep track of participants rooms course locations and so on.

Authoring environment contains tools and wizards that content developers and instructional designers can use to create or import external course content. External authoring tools can be launched directly via authoring environment to create learning content that can be integrated into learning objects and combined to create complete courses learning nets . Attributes may be appended to content thereby allowing learners to structure learning content more flexibly depending on the learning strategy they prefer. Customizable and flexible views allow subject matter experts and instructional designers to configure. and personalize the authoring environment . To create the HTML pages for the content the user can easily and seamlessly integrate editors from external providers or other content providers into LMS and launch the editors directly from authoring environment . Authoring environment often includes a number of tools for creating structuring and publishing course content and tests to facilitate and optimize the work of instructional designers subject matter experts and training administrators . Authoring environment may contain any number of components or sub modules such as an instructional design editor is used by instructional designers and subject matter experts to create and structure learning content learning nets and learning objects a test author is used by instructional designers and subject matter experts to create web based tests and a repository explorer is for training administrators and instructional designers to manage content.

In the illustrated embodiment course content is stored and managed in content management system . Put another way LMS typically uses the content management system as its content storage location. But a WebDAV Web based Distributed Authoring and Versioning interface or other HTTP extension allows integration of other WebDAV enabled storage facilities as well without departing from the scope of this disclosure. Content authors or developers publish content in the back end training management system. Links to this content assist the training administrator in retrieving suitable course content when planning web based courses. A training management component of LMS may help the training administrator plan and create the course offering manage participation resources and courses and perform reporting. When planning e learning courses the training administrator uses references inserted in published courses to retrieve the appropriate content in the content management system for the courses being planned. Content management system may also include or implement content conversion import and export functions allowing easy integration of Sharable Content Object Reference Model SCORM compliant courses from external providers or other content providers . Customers can create and save their own templates for the various learning elements learning objects tests and so on that define structural and content related specifications. These provide authors with valuable methodological and didactical support.

LMS and its implemented methodology typically structure content so that the content is reusable and flexible. For example the content structure allows the creator of a course to reuse existing content to create new or additional courses. In addition the content structure provides flexible content delivery that may be adapted to the learning styles of different learners. E learning content may be aggregated using a number of structural elements arranged at different aggregation levels. Each higher level structural element may refer to any instances of all structural elements of a lower level. At its lowest level a structural element refers to content and may not be further divided. According to one implementation shown in course material may be divided into four structural elements a course a sub course a learning unit and a knowledge item .

Starting from the lowest level knowledge items are the basis for the other structural elements and are the building blocks of the course content structure. Each knowledge item may include content that illustrates explains practices or tests an aspect of a thematic area or topic. Knowledge items typically are small in size i.e. of short duration e.g. approximately five minutes or less . Any number of attributes may be used to describe a particular knowledge item such as for example a name a type of media and a type of knowledge. The name may be used by a learning system to identify and locate the content associated with a knowledge item . The type of media describes the form of the content that is associated with the knowledge item . For example media types include a presentation type a communication type and an interactive type. A presentation media type may include a text a table an illustration a graphic an image an animation an audio clip and a video clip. A communication media type may include a chat session a group e.g. a newsgroup a team a class and a group of peers an email a short message service SMS and an instant message. An interactive media type may include a computer based training a simulation and a test.

Knowledge item also may be described by the attribute of knowledge type. For example knowledge types include knowledge of orientation knowledge of action knowledge of explanation and knowledge of source reference. Knowledge types may differ in learning goal and content. For example knowledge of orientation offers a point of reference to the learner and therefore provides general information for a better understanding of the structure of interrelated structural elements. Each of the knowledge types are described in further detail below.

Knowledge items may be generated using a wide range of technologies often allowing a browser including plug in applications to be able to interpret and display the appropriate file formats associated with each knowledge item. For example markup languages such as HTML a standard generalized markup language SGML a dynamic HTML DHTML or XML JavaScript a client side scripting language and or Flash may be used to create knowledge items . HTML may be used to describe the logical elements and presentation of a document such as for example text headings paragraphs lists tables or image references. Flash may be used as a file format for Flash movies and as a plug in for playing Flash files in a browser. For example Flash movies using vector and bitmap graphics animations transparencies transitions MP3 audio files input forms and interactions may be used. In addition Flash allows a pixel precise positioning of graphical elements to generate impressive and interactive applications for presentation of course material to a learner.

Learning units may be assembled using one or more knowledge items to represent for example a distinct thematically coherent unit. Consequently learning units may be considered containers for knowledge items of the same topic. Learning units also may be considered relatively small in size i.e. duration though larger than a knowledge item .

Sub courses may be assembled using other sub courses learning units and or knowledge items . The sub course may be used to split up an extensive course into several smaller subordinate courses. Sub courses may be used to build an arbitrarily deep nested structure by referring to other sub courses .

Courses may be assembled from all of the subordinate structural elements including sub courses learning units and knowledge items . To foster maximum reuse all structural elements should be self contained and context free.

Structural elements also may be tagged with metadata that is used to support adaptive delivery reusability and search retrieval of content associated with the structural elements.

For example learning object metadata LOM per maps defined by the IEEE Learning Object Metadata Working Group may be attached to individual course structure elements. The metadata may be used to indicate learner competencies associated with the structural elements. Other metadata may include a number of knowledge types e.g. orientation action explanation and resources that may be used to categorize structural elements.

As shown in structural elements may be categorized using a didactical ontology of knowledge types that includes orientation knowledge action knowledge explanation knowledge and resource knowledge . Orientation knowledge helps a learner to find their way through a topic without being able to act in a topic specific manner and may be referred to as know what. Action knowledge helps a learner to acquire topic related skills and may be referred to as know how. Explanation knowledge provides a learner with an explanation of why something is the way it is and may be referred to as know why. Resource knowledge teaches a learner where to find additional information on a specific topic and may be referred to as know where. 

The four knowledge types orientation action explanation and reference may be further divided into a fine grained ontology. For example orientation knowledge may refer to sub types that include a history a scenario a fact an overview and a summary. Action knowledge may refer to sub types that include a strategy a procedure a rule a principle an order a law a comment on law and a checklist. Explanation knowledge may refer to sub types that include an example an intention a reflection an explanation of why or what and an argumentation. Resource knowledge may refer to sub types that include a reference a document reference and an archival reference.

Dependencies between structural elements may be described by relations when assembling the structural elements at one aggregation level. A relation may be used to describe the natural subject taxonomic relation between the structural elements. A relation may be directional or non directional. A directional relation may be used to indicate that the relation between structural elements is true only in one direction. Directional relations should be followed. Relations may be divided into two categories subject taxonomic and non subject taxonomic.

Subject taxonomic relations may be further divided into hierarchical relations and associative relations. Hierarchical relations may be used to express a relation between structural elements that have a relation of subordination or superordination. For example a hierarchical relation between the knowledge items A and B exists if B is part of A. Hierarchical relations may be divided into two categories the part whole relation i.e. has part and the abstraction relation i.e. generalizes . For example the part whole relation A has part B describes that B is part of A. The abstraction relation A generalizes B implies that B is a specific type of A e.g. an aircraft generalizes a jet or a jet is a specific type of aircraft .

Associative relations may be used refer to a kind of relation of relevancy between two structural elements. Associative relations may help a learner obtain a better understanding of facts associated with the structural elements. Associative relations describe a manifold relation between two structural elements and are mainly directional i.e. the relation between structural elements is true only in one direction . Examples of associative relations include determines side by side alternative to opposite to precedes context of process of values means of and affinity. 

The determines relation describes a deterministic correlation between A and B e.g. B causally depends on A . The side by side relation may be viewed from a spatial conceptual theoretical or ontological perspective e.g. A side by side with B is valid if both knowledge objects are part of a superordinate whole . The side by side relation may be subdivided into relations such as similar to alternative to and analogous to. The opposite to relation implies that two structural elements are opposite in reference to at least one quality. The precedes relation describes a temporal relationship of succession e.g. A occurs in time before B and not that A is a prerequisite of B . The context of relation describes the factual and situational relationship on a basis of which one of the related structural elements may be derived. An affinity between structural elements suggests that there is a close functional correlation between the structural elements e.g. there is an affinity between books and the act of reading because reading is the main function of books .

Non Subject Taxonomic relations may include the relations prerequisite of and belongs to. The prerequisite of and the belongs to relations do not refer to the subject taxonomic interrelations of the knowledge to be imparted. Instead these relations refer to the progression of the course in the learning environment e.g. as the learner traverses the course . The prerequisite of relation is directional whereas the belongs to relation is non directional. Both relations may be used for knowledge items that cannot be further subdivided. For example if the size of the screen is too small to display the entire content on one page the page displaying the content may be split into two pages that are connected by the relation prerequisite of. 

Another type of metadata is competencies. Competencies may be assigned to structural elements such as for example a sub course or a learning unit . The competencies may be used to indicate and evaluate the performance of a learner as learner traverses the course material. A competency may be classified as a cognitive skill an emotional skill a senso motorical skill or a social skill.

As generally described earlier a wizard is an interactive software application that presents a task or process to the particular user as a sequence of logical steps. The sequence of steps is linear from the user s perspective but may actually involving branching. Generally speaking all possible sequences of wizard steps can be logically represented as a directed graph where vertices in the graph represent all possible steps and edges between the vertices represent all possible paths through the vertices. In one embodiment the graph can be traversed in a step wise fashion based on current state information which may include user input. For example if a user responds to a given step by selecting a default installation button instead of a custom installation button in a step GUI the next step will be chosen based upon user s selection. A step can be interactive meaning the step requires some sort of user input whether optional or mandatory or non interactive i.e. a processing step . Each step typically but not necessarily has an associated GUI which is presented by the wizard GUI.

The wizard can be implemented as one or more processes threads executing on one or more computing devices or clients connected by one or more networks or other suitable communication means e.g. a shared memory or an inter processor network . As described above in terms of GUI the wizard s GUI can be provided on a display device that is not directly connected to the client upon which the non GUI portion s of the wizard are executing.

An API may be implemented in any suitable way including but not limited to instantiated class object s function s procedure s subroutine s as a web service as a proxy and other suitable implementations without departing from the scope of this disclosure. Although API is depicted logically as adjoining the wizard API is not constrained to reside in the same process space or computing device as a wizard. The API can communicate with the service component in a synchronous or asynchronous fashion using any number of means including but not limited to shared memory distributed object s remote procedure calls remote method invocation signals data communication protocol s such as but not limited to IP User Datagram Protocol UDP TCP and higher level protocols such as but not limited to HTTP and Simple Object Access Protocol SOAP .

In one embodiment API allows the wizard to transition from interactive mode to batch mode. In this illustration wizard is operating in interactive mode and wizards and are in batch mode having turned over control of their respective step execution to batch job manager as a result of for example the user selecting the as batch job button on the wizard GUI as described below. In one embodiment turning over control of step execution to the batch job manager results in the batch job manger obtaining information pertaining to the current state of the step by step process associated with the wizard i.e. the identity of the last step executed and any other relevant state information and information and associated with a wizard s steps e.g. step type resources . This information can be provided through the API or obtained from other means e.g. through a repository a service a file .

Although each wizard typically has an associated GUI the GUI may not be presented if the wizard is in batch mode. For example wizard is in interactive mode and usually presents its GUI whereas the GUI for wizards and may not be presented if the currently executing step for a wizard is a processing type step for example. In one embodiment a wizard GUI for the wizard in batch mode is altered to include batch mode controls and . These controls invoke the API to communicate user preferences and other information back to batch job manager .

Batch job manager may also include a step scheduler component for scheduling the sequential and or parallel execution of wizard steps for wizards in batch mode . The step scheduler component can schedule steps that do not need to be interrupted to obtain user input to execute on one or more computing devices connected by one or more networks or other suitable means e.g. a step may execute on more than one processing device . By way of a non limiting example a step can execute as one or more processes threads or other suitable units of execution. In one embodiment the wizard executes a given step under direction of the batch job manager . In another embodiment the batch job manger executes a given step without having to rely on a wizard. For each wizard in batch mode information and associated with the wizard s steps can be provided to or obtained by the batch job manager . This information can be used by the step scheduler component to schedule steps for execution.

A monitor component keeps track of at least a subset of the steps under the control of the batch job manager on behalf of scheduler . A step has an associated status which indicates if the step is waiting to execute is executing is waiting for input has completed or has experienced a fatal or non fatal error. As described in more detail in status information of the current step can be provided in the status column of the batch job manager GUI . The monitor component can update a step s status information as the step progresses through different states i.e. waiting to execute executing etc. . For example if a step has received necessary user input the monitor component can change the step s status from waiting for input to waiting to execute. This serves to signal the step scheduler to schedule the step for execution. Further if the wizard GUI needs to be presented to the user the monitor component can cause its presentation. In one embodiment wizard steps executing on more than one computing device can be overseen by remote monitor components or agents that report back to the monitory component .

The selection of the check in button causes a check in wizard GUI to be presented as shown by . The check in wizard allows the author to add dependent objects to the check in list. Dependent objects are generally objects required for displaying the object being checked in. The check in wizard provides a consistency check on cross references between objects and their dependencies. A copy button allows the user to transfer data from the master repository to the local repository. In this process an author can update the copied object in the local repository and then check it back in the master repository. A batch jobs button causes a batch job manager GUI to be presented as described above .

In one embodiment the batch job manager can executed wizards sequentially in order of the batch job number for example. By way of illustration the batch job number can represent the order in time when a wizard was put into batch mode. Alternatively wizards can be executed sequentially according to any factor such as but not limited to job priority a user priority an implicit or explicit ordering of the wizards or any other suitable criteria. In another embodiment the batch job manger can cause the execution of one or more wizards steps in parallel for example if those wizards steps would not conflict with each other. For example the wizard s steps can have associated resource information e.g. metadata which can be used by the batch job manager to determine if a resource conflict would arise between two or more wizards.

Resource information can include information pertaining to operating system resources required by the step such as processing time memory registries file systems network bandwidth and application resources such as web services and databases. The batch job manager can dynamically determine if a given resource required by two or more wizards steps at the same time would be able to accommodate the simultaneous usage. In one embodiment the batch job manager can refer to policies that determine acceptable usage ranges or maximum usage limits for resources. By way of illustration the batch job manager can determine how currently executing steps are taxing a given resource and prevent further execution of steps that require that resource until the usage is within an acceptable range or below a given limit. A step can also have information associated with it that indicates the step cannot be executed in parallel with any other step on a given system or domain. The batch control manager can accommodate this by scheduling steps such that none are executing in parallel with this type of step. In a further embodiment the batch control manager can give priority to the steps of wizards that have been in existence or waiting the longest.

Referring again to the batch process manager GUI allows a user to select one or more wizards in display region and then perform an action by selecting a button and . A display button causes the GUI of the selected wizards to be displayed. For example as illustrated here when the wizard has stopped because a wizard step requires user input the user can open the wizard and provide the necessary input. The user can then put the wizard back into batch mode. The user can also pause a wizard from executing further by selecting a pause button . The pause can bring to a halt a currently executing step or wait for the currently executing step to finish before pausing the wizard. Likewise a resume button can be used to resume execution of the wizard under the control of the batch process manager. The wizard can be canceled such that it terminates by selection of a cancel button . A remove button allows the user to remove a completed task from display region . A close button dismisses the batch job manager GUI . In one embodiment the GUI can be presented automatically when a user puts the wizard in batch mode.

The stop at menu allows a user to select a menu item that will dictate when the batch processing manager will interrupt a given wizard executing in batch mode to obtain user input. In one embodiment a step has an associated step type which defines whether the step requires user input. The step type can be assigned to a step before execution of the wizard or dynamically during execution. Although TABLE 1 illustrates four possible step types many other step types including more or fewer types are possible without departing from the scope and spirit of this disclosure. For example the processing step type could be subdivided into step types that define the type of processing or the type of resource required as above . Similarly the input step types could be further subdivided to indicate if a step could possibly receive mandatory user input from another source such as a file a web service a process or any other suitable source.

In one embodiment a processing type step requires no user input and can run uninterrupted assuming in one embodiment that there are no resource conflicts . The confirmation and optional input step types both specify that optional user input is indicated but not required. The GUI associated with these steps can be automatically skipped if the user selects from the stop at menu appropriately. In general a step having a type of mandatory input cannot be usually skipped. In this example the confirmations option has been selected. The stop at menu options are presented in TABLE 2 below.

The show UI on input check box if selected will cause the wizard s dynamically augmented GUI to be presented to the user whenever a step is interrupted. If check box is not selected then the user can manually show the wizard s GUI using the display button on the batch job manager GUI . The continue button continues with the next step similar to the next button in the un augmented wizard GUI . In one embodiment button is only activated if the user has provided the required input. The close button closes the GUI and optionally causes the batch job manager GUI to be presented.

In one embodiment the batch job manager parameters presented in display region can be obtained from a configuration file a user profile or policy a process a web service or any other suitable means whether static or dynamic . Alternatively the parameters can be set automatically based on information regarding the step types and type of user input that is required.

The embodiments and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Apparatus of the embodiments can be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a programmable processor and method steps of the embodiments can be performed by a programmable processor executing a program of instructions to perform functions of the embodiments by operating on input data and generating output.

A number of embodiments have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. For example the batch job manager may be implemented within one or more of the wizards. In another example the batch job manager may run as a hidden process or server that monitors calls from wizards to execute a task as a batch process. Accordingly other embodiments are within the scope of the following claims.

