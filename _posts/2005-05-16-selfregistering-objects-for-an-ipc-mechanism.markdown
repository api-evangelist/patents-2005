---

title: Self-registering objects for an IPC mechanism
abstract: In response to receiving a communication from a first process directed to a second process, a trusted entity determines if an object reference in the communication refers to an object owned by a first process which is being exported to a second process or if the communication refers to an object not owned by the first process which is being passed to the second process. The trusted entity generates a second object reference for use by the second process. Use of a naming convention identifies the reference as a reference to an object which is foreign to or owned by the processes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730522&OS=07730522&RS=07730522
owner: Microsoft Corporation
number: 07730522
owner_city: Redmond
owner_country: US
publication_date: 20050516
---
This application is related in subject matter to U.S. patent application Ser. No. 11 130 308 entitled Coordinating Reference Counting Between Entities Executing Within Separate Address Spaces filed herewith U.S. patent application Ser. No. 11 129 848 entitled A Cancellation Mechanism for Cooperative Systems filed herewith U.S. patent application Ser. No. 11 130 293 entitled Type Server Caching the Proxy Stub Generation filed herewith U.S. patent application Ser. No. 11 129 847 entitled Structuring an Operating System Using a Service Architecture filed herewith and U.S. patent application Ser. No. 11 130 300 entitled Coordination of Set Enumeration Information Between Independent Agents filed herewith.

The invention relates to communications between processes in computers and in particular to a mechanism for self registering objects.

A standard way to communicate between two processes A and B running on the same machine or running on different machines is to send a message. Often for example it is desirable to enable process A to send a message to process B asking process B to execute code on behalf of process A. Typically process A must have knowledge of a port or contact point for process B in order to do this.

One way to enable process A to call process B is via a remote procedure call RPC . A remote procedure call enables a process on one computer to cause code to be executed in another process on the same or on a different computer without requiring explicit code to be written by a developer or programmer to perform that particular call. An RPC is initiated by the caller process client sending a request message to a remote system or second process server to execute a certain procedure using supplied arguments. A result message is returned to the caller. For example in a remote procedure call a function call may be made by process A in which the name of the procedure that process B is to execute on behalf of process A and a set of parameters for the procedure are specified. Process B executes the code and returns a message to process A. When the code in question is written using principles of object oriented programming RPC is sometimes referred to as remote invocation or remote method invocation.

A remote procedure call typically follows a particular protocol another way of saying this is it uses a particular interface so that potentially unrelated processes can communicate. The protocol or interface define the methods and the values which the processes agree upon in order to cooperate.

The procedure of transforming the function call into a message is called marshalling. Marshalling may include gathering data from one or more applications or non contiguous sources in computer storage putting the data pieces into a message buffer and organizing or converting the data into a format that is prescribed for a particular receiver or programming interface. Marshalling typically converts what the code in process A sees as a function call into a message to be sent to process B. The message typically includes the name of the function and a set of parameters coded in a way that process B understands. Process B receives the message and has to transform the message into a call to process B s internal function. The process of converting a message into a function call is called unmarshalling. The piece of code that performs marshalling in process A is called a proxy and typically resides in the client process. The corresponding piece of code on the server side that performs unmarshalling is called a stub.

Within the context of object oriented programming process A and process B can be viewed as objects encapsulating data and functions. Some well known technologies that take this approach are Sun Microsystem s JAVA and Microsoft s COM and DCOM. That is process B may be viewed as a container for one or multiple objects whose methods are the functions invoked by process A. In object oriented systems therefore process A invokes a method of a particular object of process B instead of invoking a function in process B. To do this process A must have some way of identifying the object in process B that process A wishes to invoke.

The data stored in process A which enables process A to identify the object of process B is known as a reference to the object. The reference stores information concerning how to locate the object that is the reference must be sufficient to identify the process and within the process to identify the object whose method is to be invoked.

One problem with such an approach is the possibility that a reference to an object will be fabricated or forged that is the system should guarantee that only the process intended to receive a reference receives the reference and that a reference cannot be deduced and used by a process that is not supposed to have the reference. It would be helpful if such a mechanism were available. Ideally the mechanism should be performant and easy for a developer to program.

A trusted entity mediates all resource access and resource reference communications between processes agents or services. An inter process communication comprises the invocation of a method on an object via one of its references the invocation can carry object references within its parameters thus making it possible to propagate object references between processes agents or services by the use of the IPC mechanism itself. The trusted entity maintains a namespace for each process agent service in which every external and internal resource reference of the process agent service is uniquely identified by a reference name. Because the trusted entity has sole access to the namespace it is impossible for references to be forged. For each reference a first process agent service sends to a second process agent service the trusted entity determines the resource owner. If the resource is not owned by the first process the trusted entity translates the local reference name used by the first process to refer to the resource to the reference name used by the resource owner. The trusted entity generates a new local reference name for the second process and associates with the new local reference name the reference name used by the resource owner. This information is stored in the namespace for the second process.

If the resource is owned by the first process the trusted entity determines the reference name used by the first process to refer to the resource and associates that reference name with a new local reference name for the resource for the second process. A process signals its intention to make a resource available to another process by sending a communication to the second process in which a reference to the resource is passed to the second process. Registration of a resource is only required when a process makes a resource available to another process referred to herein as exporting a reference . The trusted entity detects the exportation of a reference by monitoring communications between processes. The trusted entity determines if a reference is being exported by inspection of the reference name itself. Foreign reference names are distinguishable from references to resources owned by a process by use of a naming convention.

The namespace may be maintained by the trusted entity as a table for each process. The table maintained for a process by the trusted entity may be solely accessible to the trusted entity and may be used by the trusted entity to resolve references to objects so that processes cannot directly access objects in other processes. The table for a process may include entries for references passed to the process and for references the process has exported. The table may be indexed by reference name. Alternatively the index into the table may be used as the reference name. The index into the table for the object reference may identify the object reference as a reference passed to the process or as a reference the process has exported. The index into the table for the object reference may be used as the reference name for that process. If the trusted entity determines that an object reference is to be exported from a first process to a second process the trusted entity may create an entry for the object reference in the table the trusted entity maintains for the first process. The index may be an even number to identify the reference as one exported by the owner process or may follow some other naming convention that identifies the reference as an exported reference. The index itself may be used as the reference name assigned to the reference by the trusted entity. The trusted entity may generate a new reference name for use by the second process. The trusted entity may create an entry in the table the trusted entity maintains for the second process in which the reference name is an odd number to identify the object as an object that has been passed to the second process from another process. Alternatively the trusted entity may generate a new reference name identifying the reference as one passed to the second process from another process by following some other naming convention.

Inter process communication IPC is the exchange of data between one process and another either within the same computer or over a network. It implies a protocol that guarantees a response to a request. Examples are Unix sockets RISC OS s messages Mach ports OS 2 s named pipes Microsoft Windows DDE Novell s SPX Apple Macintosh s IAC particularly AppleEvents and different forms of software componentry CORBA Component Object Model COM Distributed Component Object Model DCOM and so on . With some systems it may be possible for one process to fabricate or forge a reference to an object within another process.

For example suppose that the protocol TCP IP is used to communicate between process A on computer 1 and process B on computer 2. Suppose that process B listens on port number 1015 for incoming messages. In a direct unmediated communication between process A and process B process A merely has to specify the port number and object number within process B to access process B s object. Suppose that process B has a table in which is stored all process B s objects and that the table is indexed by the position that the object holds in the table. Thus position one in the table may point to object 1 position 2 may point to object 2 and so on. In order to locate one of process B s objects process A only needs process B s port number and the position of the object in the table. Hence a reference to any object in process B could be easily fabricated by process A as long as process A knows what port number process B is listening for incoming invocations. The fabrication of references just described is difficult or impossible to prevent.

To avoid these and other problems associated with communications between processes a trusted entity having a trusted channel to every other process is often employed to mediate communications between processes. Using this approach a process that exports one of its resources has to register its reference with the trusted entity. For example a trusted entity may create a table for each of the processes in which in each one of the positions of the table the trusted entity stores contact information for the objects of the process. Thus in order for process A to contact process B process A may send a message to the trusted entity requesting access to an object in process B via a reference which is an index into the table maintained by the trusted entity for process B. The table maintained by the trusted entity for process B would need to store enough information to access the object in process B.

Typically the way the trusted entity gets the information it requires to access the object in process B is by registration. For example if process B wants to make one of its objects say object 1 available for use by another process process B may directly invoke the trusted entity and request the trusted entity to register object 1. Process B may pass the trusted entity the address of object 1. The trusted entity stores this information in a table that it maintains for process B and passes process B an index into the table where the trusted entity stores the information required to access object 1. When process B wants to make object 1 accessible to process A process B passes the index of object 1 to process A. Process A passes this index to the trusted entity to access object 1.

Registration of objects is a costly operation both in terms of system resources and programmer burden. In accordance with some embodiments of the invention registration of objects is eliminated as described more fully below.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

In some embodiments of the invention the operating system includes entities that are processes agents services components or modules comprising containers for objects or resources that are described through interfaces. illustrates an exemplary client service and an exemplary server service although it will be appreciated that any number of client services and server services may exist in the operating system. Moreover a client service in one interaction may act as a server service in another that is client and server terminology refers to roles within a particular interaction rather than to intrinsic differences in hardware software and so on. Each service may be implemented through the use of one or more objects. For example in the client service includes a proxy object . The client service may also include one or more other objects or resources as represented by object . Similarly the server service may include a stub and one or more objects as represented by object . A service may require support from one or more other services and the code specifying the service may require the loading of specific run time support to run correctly. Services may reside in the same address space in the local machine or in a computer of a computer network. Services alternatively may reside in different address spaces in the local machine or on different computers of a computer network.

A trusted entity may be viewed as a unique distinctive process module component agent or service that mediates communications between processes in the system. In some embodiments the trusted entity is able to distinguish between data parameters and reference parameters in messages passed between processes. In some embodiments the trusted entity has a trusted channel to every agent service module component or process for mediating resource access and reference. Communications with the trusted entity therefore are secure meaning that processes other than the trusted entity are unable to access or modify transmissions or messages sent between processes. Moreover the trusted entity may be capable of identifying the originator of a message.

In some embodiments of the invention the trusted entity is the kernel . The kernel can implement and expose its objects not shown to other services such as to services and in . In some embodiments of the invention the kernel is trusted code. In some embodiments of the invention the only trusted code is the kernel . In some embodiments to avoid forgery of object references only trusted code is able to manipulate an object reference. Hence in some embodiments of the invention only the kernel is able to manipulate an object reference. A service that holds a reference to an object refers to the reference by a representation referred to herein as a reference or as a local reference id. In some embodiments of the invention the local reference id is understood only by the kernel . Hence for example a communication sent by client service to a server service invoking a method of object would be mediated by kernel . Kernel in some embodiments of the invention creates and maintains one or more reference tables as represented by reference table in to resolve the object reference received from client service to the address of an object to be invoked.

A service may communicate with another service by sending a method invocation to another object via an object reference e.g. via a remote call . All communications among services are assumed to be and are treated as though they are remote. The client and server services may be in separate remote containers or may be co located in the same container but in either case the semantics of the call is remote.

A service interface may be specified in an interface definition language or via a contract. In some embodiments of the invention a subset of an existing language such as but not limited to C is used to define the contract. In some embodiments of the invention a subset of the application implementation language such as but not limited to C is used to define the interfaces. A service written in C therefore will seamlessly integrate with the C contract without requiring the mapping necessitated in traditional systems which use an IDL language for contracts. Services written in other languages such as for example unmanaged C may have a translation table which maps constructs from the C interface to constructs in C . Resultant C services can interoperate with the C service as long as the system service model and interface definitions are not violated.

Services may be mapped in a one to one relation to an address space. If such is the case protection ensues as a consequence of the address space provided by the memory management unit. Alternatively in some embodiments multiple services can be located within the same address space. In this case protection is obtained by a managed code run time such as for example Microsoft s CLR or Common Language Runtime . Services communicate with each other independent of their location.

Failure and security boundaries in the system may exist at the service level and may be reinforced by hardware protection at the address space and machine levels. Service recovery actions including the ability to restart and dependency tracking are provided by the operating system. Optimizations may accrue for services that are located within the same address space.

A method invocation can only be interpreted by the receiving object. The receiving object decides what action or actions are to be taken based on the information passed with the invocation. The information passed may include specific data structures and or references the invoker passes to the object being invoked.

The set of invocations an object accepts through a particular reference and the way the object is supposed to react to such an invocation is referred to as the interface supported by the object through that reference. Hence the kernel will not necessarily know what the particular interface implemented by a referenced object is and does not need access to that information. It will be appreciated that it is possible to have different references designating the same object implementation through different interfaces.

An object in some embodiments is an implementation of an interface within some service and is an independent unit of failure. An object may be expressed and coded in any programming language capable of passing parameters and control.

An object reference in some embodiments identifies the object to which the reference refers and is not able to be forged. A reference confers to the holder the authority to invoke any of the methods of the interface for which the reference to the object was created. An object reference may be revoked and may be passed optionally with restrictions to another service or to other services as an argument of an invocation or as return results.

Use of an interface so defined enables the definition of a class implementing the interface and whose method implementations are stubs which perform the task of parameter marshalling. Instances of such a class are herein referred to as proxies the proxies sitting in for the actual objects to which they refer and having the same interface.

In accordance with some embodiments of the invention when a service agent or process e.g. a first process wants to make an object available to another process e.g. a second service agent or process instead of invoking a trusted entity to register the object reference for export from the first process the trusted entity recognizes that a new object reference is being exported by the first process by monitoring communications between processes and inspecting the reference name. The trusted entity automatically creates an entry for the object reference in a table maintained for the first process when a reference to the object is exported. In some embodiments the trusted entity recognizes that the object reference is a reference which has been exported by the first process because of the naming convention used to name the object reference. In some embodiments of the invention object references owned by the passing process are identified by naming the reference an even number e.g. giving the object reference a name which is an even number such as naming the object reference 2 .

A reference that is passed to a process that is is passed to the second process by the first process but is not owned by the first process may also be referred to as foreign reference. An object reference being passed to the second process by the first process foreign to both the first and the second process is identified by naming the object reference an odd number. It will be appreciated that there are numerous other naming conventions that would enable the trusted entity to distinguish exported references from foreign or passed references. For example foreign references may be named with a standard prefix which identifies the reference as a foreign reference. A name that contains or begins with or ends with a particular character or series of characters such as 0 1 FOR etc. may identify the reference as foreign while a name that contains or begins with or ends with a particular character or series of characters such as 1 0 EXP etc. may identify the reference as exported owned by the process sending the message .

Upon recognizing the reference to be a new exported reference the trusted entity may create an entry in a table for the exporting process the first process for the reference. The trusted entity may also create an entry in a table for the process to which the reference is being exported wherein the index to the table entry identifies the reference as one foreign to the second process and may pass this index to the table entry to the second process.

Thus in an exemplary IPC system according to some embodiments of the invention when a first process process B wants to export an object reference i.e. make the referenced object owned by the first process available to a second process process A the first process identifies the object reference as exported. In some embodiments of the invention the reference is identified as exported by assigning the reference a name which is an unused even integer. A trusted entity that mediates or monitors communications between processes recognizes that the reference in the communication is exported because the reference name is an even integer. If the reference is a new reference the trusted entity creates an entry in a table maintained for process B. If a reference to the object is to be exported or passed to the second process process A the trusted entity generates a new name or index for the object reference in a second table maintained for process A. The name or index the trusted entity generates in some embodiments of the invention identifies the object reference as one which is passed to process A but is not owned by process A by making the name or index into the table maintained for process A an odd integer. The trusted entity may then provide process A with an object reference which is the odd integer that is the index of the entry in process A s table corresponding to the reference.

At the trusted entity may determine whether the reference is a reference to an object or resource owned by the first process or if the reference is a reference to an object or resource owned by another process. If the communication includes a reference to an object that is owned by the first process which is being exported by the first process to the second process the trusted entity may determine if the reference has previously been exported . If the object reference has not previously been exported an entry may be created in the table for the first process . At a new table entry may be created in the table for the second process. The object reference may be identified as a reference that is foreign to the second process not owned by the second process by assigning the reference a new name. The new name a local name for the reference for the second process may be associated in the second process table with the name of the reference used internally in the first process. At the communication may be modified to include the new local name before the communication is sent on to the second process A.

If the object reference has been previously exported to any process a table entry for the first process will already exist and therefore only the table entry for the second process will be generated as described above .

If at the object reference in the communication is identified as foreign to the first process not owned by the first process the trusted entity resolves the foreign reference in the first process table to the internal name of the reference used by the process that owns the object at . Resolution of references may be implemented by consulting table entries as described more fully below with respect to the examples. Processing continues at at which the trusted entity may create a new local name for the second process and may associate with it the internal name of the reference used by the process that owns the object at and may generate a table entry for the second process as described above.

A system for self registering objects may include one or more processes entities agents or services including one or more objects or resources that may be shared with one or more other processes agents or services. The system may also include one or more tables for storing information about shared objects or resources and or an independent entity process service or agent that mediates communications between processes entities agents or services. is a block diagram of an exemplary system for self registering objects in accordance with one embodiment of the invention. In trusted entity mediates communications between processes such as those between process A and process B and vice versa. In some embodiments of the invention trusted entity is the kernel of an operating system such as but not limited to the one described with respect to . The trusted entity may be viewed as a unique distinctive process agent or service within the IPC system. In some embodiments trusted entity is able to distinguish between data parameters and reference parameters within communications. In some embodiments the trusted entity has a trusted channel to every agent service or process for mediating resource access and reference and therefore communications with the trusted entity are secure meaning that processes other than the trusted entity are unable to access or modify the transmissions. Moreover the trusted entity may be capable of identifying the originator of a message.

Still referring to process A and process B may reside on the same computer or on different computers within a computer network. It will be appreciated that although illustrates only two processes in addition to the trusted entity the invention as contemplated is not so limited. That is a system for self registering objects may include any number of processes.

Process A and process B may include one or more objects representing resources that may be able to be shared with other processes . In process B as illustrated includes object object . . . object n . Similarly process A as illustrated in includes exemplary object x although it will be appreciated that process A and process B may include any number of objects. Process A may export a reference to one or more of its objects e.g. a reference to object x to other processes e.g. to process B . Similarly process B may export a reference to one or more of its objects e.g. a reference to one or more of objects object object . . . object n to other processes e.g. to process A or to another process such as process C not shown . Process A may pass a reference to an object that has been exported to it such as for example a reference to one or more of objects object object . . . object n exported to it by other processes such as for example by process B . Similarly process B may pass a reference to an object such as for example object x exported to it or passed to it by other processes such as for example by process A . A process that exports or passes an object reference may be referred to as an originating process. A process that receives a reference may be referred to as a receiving process.

A process such as but not limited to process A may identify a reference to an object it owns that it is exporting to another process by labeling naming referring to or otherwise identifying the object reference in such a way that an exported object reference is distinguishable from a reference to an object that process A does not own that it is passing to another process. For example for process B to export object to process A process B may assign an unused even number to object to be used as the object reference in the IPC communication. Similarly for process A to export object x to process B process A may assign an unused even number to object x to be used as the object reference in the IPC communication.

The trusted entity mediates communications between processes and may maintain a table of exported object references for each process. The table may also include references passed to the process from another process. The communication received by the trusted entity may include an object reference. The trusted entity may determine if the reference in the communication is to be exported or passed. If the trusted entity determines that the object reference in the communication is to be exported the trusted entity may then determine if the object reference has previously been exported by searching for that object reference in the originating exporting process s table. If the object has not been previously exported no entry for the object will be found and the trusted entity will create an entry for the object reference. If the object reference has been previously exported an object reference will already exist in the table for that process. A duplicate entry for the reference will not be created. The trusted entity may then pass a reference to the object exported by the originating process to the receiving process identifying the reference as an foreign reference that is foreign to the receiving process by assigning an odd number as an object reference. The trusted entity may add an entry to the table for the receiving process for the foreign reference.

In some embodiments of the invention a table is maintained by the trusted entity for each process e.g. process A and process B of . Table of illustrates an exemplary table that trusted entity maintains for process A . Table illustrates an exemplary table that trusted entity maintains for process B . Tables maintained by the trusted entity may include one or more of the following for each object in the table an index or name even integer indicates the reference is exported odd integer indicates the reference is a foreign reference a location of the object in the originating process the process to which the reference was exported or from which the reference was passed a cross reference to the reference name used by the originating process as well as other information. For example in entry includes the index 1 which indicates that the reference is a foreign reference is not owned by process A because the index is odd the location of the object in process B the name of the process that exported the reference process B and the reference name used by process B 2 . Similarly as illustrated in entry of table B may include the index 2 which indicates that the object to which the reference refers is owned by process B because the index is even and the location of the object in process B .

For example referring now to and suppose process B the first process wants to make object accessible to process A the second process . Process B at may send a communication to process A to notify process A that object may be accessed by process A . An exemplary communication may include process B the originating process process A the receiving process and the internal name used by process B to reference object i.e. 2 . At trusted entity in some embodiments ascertains if object is owned by process B . In some embodiments of the invention the trusted entity can determine that object is owned by process B by inspection of the name of the reference. As the name of the reference is an even integer i.e. 2 the trusted entity may determine that object is owned by process B. Because 2 is an even integer and because the communication is sent by process B to process A the trusted entity understands that process B wants to export object to process A . As process B is the owner of object at the trusted entity next may determine whether process B has already exported object . If a reference to object has already been exported a table entry will already exist in table B for the reference to object . The trusted entity searches in the table that trusted entity maintains for process B for an entry index 2 . Finding an index 2 in the table B indicates that this object has already been exported. In that case a new table entry is not created in table B . The trusted entity assigns a new name to the reference i.e. 1 at and generates a table entry in table A for process A entry at .

If however this is the first time that a reference to object is being exported no entry for the reference will exist in table B . Suppose no index 2 is found. Failure to find an index 2 indicates that this object has not been exported already i.e. the object reference being exported is new . In that case the trusted entity will create a new table entry in table B for the reference . The table entry may also include one or more of the following the location of object in process B 0010 the name of the process to which the reference was exported process A and a cross reference to the name used by process A to refer to the reference 1 .

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

