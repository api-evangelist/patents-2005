---

title: Virtualization of a parition based on addresses of an I/O adapter within an external emulation unit
abstract: Systems, methodologies, media, and other embodiments associated with external virtualization are described. One exemplary system embodiment includes an emulation logic located external to an integrated circuit to which it may be operably connected. The example emulation logic may include a virtualization logic that is configured to virtualize a portion of a function performed by the integrated circuit. The portion may be identifiable by an address associated with the portion. The example emulation logic may also include a data store that is operably connected to the virtualization logic and that is configured to store a state data associated with virtualizing the portion of the function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07650275&OS=07650275&RS=07650275
owner: Hewlett-Packard Development Company, L.P.
number: 07650275
owner_city: Houston
owner_country: US
publication_date: 20050120
---
Computers may emulate hardware to provide the appearance of hardware that does not actually exist to an operating system application logic or process. Computers may also use emulation to partition one hardware function between multiple operating systems applications and so on. This emulation may also be referred to as virtualization.

Virtualization may be accomplished by mechanisms including for example pure software virtualization hardware supported software virtualization and so on. Software virtualization tends to produce general performance penalties even when the virtualized hardware is not being employed. However software virtualization does facilitate emulating hardware on a variety of processors particularly if the virtualization code is written in a portable structured manner. Hardware virtualization tends to require hardware functions to be designed into an underlying chip. Designing in virtualization hardware functions may increase the size complexity design time cost time to market and so on of a chip set. Furthermore if a chip set does not initially support virtualization it may be difficult if not impossible to add on virtualization. Additionally if the built in virtualization hardware functions are not employed they still consume chip real estate power and so on.

Some example systems and methods described herein concern providing hardware support for virtualization external to a chip that was not designed to support virtualization. Thus virtualization may be provided for computer chips that were not designed to support virtualization. Therefore chips may be designed for use in systems that both do and do not support virtualization which may facilitate improving economies of scale by amortizing fixed development costs over larger production volumes. External virtualization functions may be relatively small and thus may be implemented for example in a field programmable gate array FPGA .

Some example systems and methods concern providing chip hardware virtualization via external emulation when a chip function may be partitioned via addressing. For example a host bridge in an input output adapter chip may be configured to process configuration transactions and data e.g. read write transactions. In one example the configuration transactions may be associated with a first address or set of addresses while the data transactions may be associated with a second address or set of addresses. An address aware logic like a crossbar may facilitate routing the configuration transactions to an external emulation logic while allowing the data transactions to proceed directly to the host bridge. The external emulation logic may virtualize the host bridge and present a virtual host bridge to transaction producers. The external emulation logic may be operably connected to the input output adapter chip through a port like a management port.

The following includes definitions of selected terms employed herein. The definitions include various examples and or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.

As used in this application the term computer component refers to a computer related entity either hardware firmware software a combination thereof or software in execution. For example a computer component can be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and a computer. By way of illustration both an application running on a server and the server can be computer components. One or more computer components can reside within a process and or thread of execution and a computer component can be localized on one computer and or distributed between two or more computers.

 Computer readable medium as used herein refers to a medium that participates in directly or indirectly providing signals instructions and or data. A computer readable medium may take forms including but not limited to non volatile media and volatile media. Non volatile media may include for example optical or magnetic disks and so on. Volatile media may include for example optical or magnetic disks dynamic memory and the like. Common forms of a computer readable medium include but are not limited to a floppy disk a flexible disk a hard disk a magnetic tape other magnetic media a CD ROM other optical media punch cards paper tape other physical media with patterns of holes a RAM a ROM an EPROM a FLASH EPROM or other memory chip or card a memory stick and other media from which a computer a processor or other electronic device can read.

 Data store as used herein refers to a physical and or logical entity that can store data. A data store may be for example a database a table a file a list a queue a heap a memory a register and so on. A data store may reside in one logical and or physical entity and or may be distributed between two or more logical and or physical entities.

 Logic as used herein includes but is not limited to hardware firmware software and or combinations of each to perform a function s or an action s and or to cause a function or action from another logic method and or system. For example based on a desired application or needs logic may include a software controlled microprocessor discrete logic like an application specific integrated circuit ASIC a programmed logic device a memory device containing instructions or the like. A logic may include one or more gates combinations of gates or other circuit components. A logic may also be fully embodied as software. Where multiple logical logics are described it may be possible to incorporate the multiple logical logics into one physical logic. Similarly where a single logical logic is described it may be possible to distribute that single logical logic between multiple physical logics.

An operable connection or a connection by which entities are operably connected is one in which signals physical communications and or logical communications may be sent and or received. Typically an operable connection includes a physical interface an electrical interface and or a data interface but it is to be noted that an operable connection may include differing combinations of these or other types of connections sufficient to allow operable control. For example two entities can be operably connected by being able to communicate signals to each other directly or through one or more intermediate entities like a processor operating system a logic software or other entity. Logical and or physical communication channels can be used to create an operable connection.

 Signal as used herein includes but is not limited to one or more electrical or optical signals analog or digital signals data one or more computer or processor instructions messages a bit or bit stream or other means that can be received transmitted and or detected and that may facilitate transferring information.

 Software as used herein includes but is not limited to one or more computer or processor instructions that can be read interpreted compiled and or executed and that cause a computer processor or other electronic device to perform functions actions and or behave in a desired manner. The instructions may be embodied in various forms like routines algorithms modules methods threads and or programs including separate applications or code from dynamically and or statically linked libraries. Software may also be implemented in a variety of executable and or loadable forms including but not limited to a stand alone program a function call local and or remote a servelet an applet instructions stored in a memory part of an operating system or other types of executable instructions. It will be appreciated by one of ordinary skill in the art that the form of software may depend for example on requirements of a desired application the environment in which it runs and or the desires of a designer programmer or the like. It will also be appreciated that computer readable and or executable instructions can be located in one logic and or distributed between two or more communicating co operating and or parallel processing logics and thus can be loaded and or executed in serial parallel massively parallel and other manners.

Suitable software for implementing the various components of the example systems and methods described herein may be produced using programming languages and tools like Java Pascal C C C CGI Perl SQL APIs SDKs assembly firmware microcode and or other languages and tools. Software whether an entire system or a component of a system may be embodied as an article of manufacture and maintained or provided as part of a computer readable medium as defined previously. Other forms may also be used.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a memory. These algorithmic descriptions and representations are the means used by those skilled in the art to convey the substance of their work to others. An algorithm is here and generally conceived to be a sequence of operations that produce a result. The operations may include physical manipulations of physical quantities. Usually though not necessarily the physical quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a logic and the like.

It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise it is appreciated that throughout the description terms like processing computing calculating determining displaying or the like refer to actions and processes of a computer system logic processor or similar electronic device that manipulates and transforms data represented as physical electronic quantities.

Emulation logic may include a bus controller that is configured to receive a transaction from the integrated circuit . The transaction may be provided to the bus controller by a port e.g. management port located on the integrated circuit . As described above the transaction may include an address that facilitates identifying whether the transaction is a member of a subset of transactions virtualized by the emulation logic .

Emulation logic may also include a virtualization logic that is operably connected to the bus controller . The virtualization logic may be configured to virtualize a portion of the functionality provided by integrated circuit . For example the total functionality provided by integrated circuit may include both configuration and data moving functions. Thus the virtualization logic may for example virtualize the configuration portion of the total functionality. In one example the portion that is virtualized may be identifiable by an address associated with a transaction associated with the portion. For example configuration transactions may be mapped to a first set of addresses e.g. configuration ports while data moving transactions may be mapped to a second set of addresses e.g. input output ports . While configuration and data moving functionality are described more generally the total functionality provided by integrated circuit may be described as control functions and operation functions. Thus the sets of addresses may include for example operation addresses and control addresses. The operation addresses may include for example an input port address and an output port address. The control addresses may include for example a configuration port address.

Emulation logic may also include a data store that is operably connected to the virtualization logic . The data store may be configured to store a state data associated with the virtualized portion of the total functionality provided by the integrated circuit . Emulation logic may be implemented for example in a single chip like a field programmable gate array.

The integrated circuit may implement a physical device. Thus the virtualization logic may be configured to provide a virtual device related to the physical device provided by the integrated circuit . For example if the integrated circuit implements a host bridge then the virtualization logic may virtualize portions of the host bridge. In one example the virtualization logic may provide multiple instances of a virtual device that virtualizes the physical device provided by the integrated circuit . Thus in one example the virtualization logic and the data store may be configured to isolate state data associated with a first instance of the virtual device from state data associated with a second instance of the virtual device provided by the emulation logic . While two instances are described it is to be appreciated that a greater and or lesser number of instances may be employed.

Thus operating system may also operate assuming that host bridge is directly physically connected to a point to point bridge and thus to an input output card. Similarly operating system may operate assuming that host bridge is directly physically connected to point to point bridge and thus to input output card. While illustrates a pair of virtual flows that a pair of operating systems may be presented with illustrates an actual flow that may occur as a result of address based partitioning of transactions associated with chip hardware virtualization via external emulation. Furthermore while illustrates bridges and input output cards it is to be appreciated that external emulation hardware may facilitate producing virtual flows for other hardware.

The system may also include an emulation logic that is located outside the integrated circuit . The emulation logic is illustrated being operably connectable to the integrated circuit . In one example the emulation logic may be a field programmable gate array or other similar chip that is operably connected to the integrated circuit through a management port on the integrated circuit . The emulation logic may be configured to virtualize at least one of the subsets of physical operations provided by the integrated circuit . For example the emulation logic may virtualize configuration operations performed by host bridge . The operations may be partitioned for example based on addresses associated with a configuration port an input port an output port and so on. Thus when a transaction arrives in the integrated circuit from an operating system an address associated with the transaction may be examined to determine whether to provide the transaction to the host bridge or to the external emulation logic .

To facilitate determining whether a transaction should be provided to the host bridge or to the external emulation logic the integrated circuit may include for example a crossbar not illustrated that is configured to route a first set of transactions associated with the at least one subset of physical operations to the emulation logic and to not route a second set of transactions that are not associated with the at least one subset of physical operations to the emulation logic . Thus a virtual read write flow R W may proceed from operating system and operating system to the integrated circuit while a virtual configuration flow CONFIG may proceed from operating system and operating system to the external emulation logic by way of the integrated circuit . Note that integrated circuit may not have been designed to support virtualization but virtualization is provided by partitioning the functions performed by integrated circuit and having a subset of the functions routed to external emulation logic . External emulation logic may for example receive the transaction make state changes in response to the transaction and provide a related transaction s to the integrated circuit .

In one example emulation logic may include a data store not illustrated that is configured to store a state data associated with virtualizing the at least one subset of physical operations. For example the data store may store state data associated with a first instance of host bridge provided to operating system and may also store state data associated with a second instance of host bridge provided to operating system. The data store may be configured to keep these two sets of state data separate from each other which facilitates preventing one operating system from interfering with the operation of another operating system.

It may be desired to assign one input output card attached to root complex to a first partition accessible through fabric while assigning another input output card attached to root complex to a second partition accessible through fabric . However having a single host bridge may produce issues concerning isolating different partitions from each other. For example host bridge may contain state information for each of the P P bridges it supports. The state information may be read and or written by an operating system in a partition to configure an input output path an input output card and the like. However it may be desirable to isolate an operating system in a first partition from an operating system in another partition so that neither can see nor manipulate an input output path or card assigned to the other.

Thus external logic like host bridge emulator may be operably connected to the input output adapter chip . The operable connection may include in its path for example a bus controller external to the input output adapter chip and a bus controller internal to the input output adapter chip . Computer communications may occur between the two bus controllers via for example a management port . The management port may be provided by the input output adapter chip to facilitate actions like controlling configuring debugging error reporting and so on performed by a computer management subsystem. In this example however management port has been employed to operably connect the host bridge emulator to the input output adapter chip .

The host bridge emulator may virtualize host bridge presenting a virtual host bridge to the partitions to which the input output cards have been assigned. The state information conventionally stored in host bridge may as part of the virtualization provided by host bridge emulator be replicated replaced and otherwise manipulated by the host bridge emulator and stored in data store .

In system firmware not illustrated may at boot time present to operating systems in the two example partitions a host bridge with configuration space addresses mapped to the management port . The crossbar may participate in this mapping. The host bridge emulator may therefore receive configuration transactions from the operating systems in the two example partitions. The configuration transactions may have their addresses manipulated for example by a source decoder not illustrated that facilitates providing a port identifier for a transaction. For example a source decoder may map an address range to a port and associate a port identifier with a transaction. Thus crossbar may route transactions based at least in part on a port identifier.

The host bridge emulator may be configured to emulate the host bridges and to send configuration transactions corresponding to the configuration transactions received from the two operating systems to the actual host bridge . The configuration space of host bridge may be divided for example into two disjoint sets corresponding to the configuration space of the two P P bridge pairs. Data associated with the configuration space with host bridge state and other actions associated with the virtualization may be stored in data store . Thus external hardware like host bridge emulator facilitates preventing an operating system associated with one partition from accessing configuration space data associated with another partition by for example examining addresses associated with configuration transactions. Configuration transactions having addresses associated with a first operating system in a first partition may be allowed to access configuration space data associated with a first host bridge virtualized by host bridge emulator while configuration transactions having addresses associated with a second operating system in a second partition may be allowed to access configuration space data associated with a second host bridge.

Note that host bridge emulator may in some examples only be provided with configuration transactions. Data transactions like read write transactions may not be routed by crossbar to the host bridge emulator . Thus in this example host bridge emulator would not become part of the input output data path between an input output card and a logic accessing that input output card. Therefore in one example an external host bridge emulator operably connected to input output adapter chip through a low bandwidth port like management port may have a minimal effect on overall input output performance. Additionally when the actions performed by host bridge emulator are relatively small being confined for example to handling configuration transactions the host bridge emulator may be implemented in a single chip like a field programmable gate array FPGA .

While illustrates virtualizing an internal chip function it is to be appreciated that the logics illustrated in may facilitate providing other functionality. For example the logics illustrated in may facilitate working around design flaws in chip logic. For example if there is a flaw in a configuration path associated with a chip and configuration actions e.g. transactions can be intercepted based on addressing then transactions associated with the flawed logic may be routed to external logic that may facilitate remedying the flaw. For example the external logic may be configured to implement and present to a transaction producer like an operating system a correct function. The external logic may also be configured to emit transactions to the flawed logic in the chip that work around the design flaw. Thus while is specific to virtualizing a host bridge it is to be appreciated that example systems and methods described herein relate more generally to virtualization associated with a chip containing a single function that may be partitioned via addressing.

For example transactions may include addresses that facilitate partitioning functionality provided by a device . Some of the functionality may be virtualized by logic and thus crossbar may deliver transactions associated with the virtualized functionality to logic . However some of the functionality may not be virtualized and thus crossbar may deliver transactions associated with the non virtualized functionality to device . Device may be associated with other devices. For example a sub device and a sub device may be operably connected to device .

Example methods may be better appreciated with reference to the flow diagrams of and . While for purposes of simplicity of explanation the illustrated methodologies are shown and described as a series of blocks it is to be appreciated that the methodologies are not limited by the order of the blocks as some blocks can occur in different orders and or concurrently with other blocks from that shown and described. Moreover less than all the illustrated blocks may be required to implement an example methodology. Furthermore additional and or alternative methodologies can employ additional not illustrated blocks.

In the flow diagrams blocks denote processing blocks that may be implemented with logic. The processing blocks may represent a method step and or an apparatus element for performing the method step. A flow diagram does not depict syntax for any particular programming language methodology or style e.g. procedural object oriented . Rather a flow diagram illustrates functional information one skilled in the art may employ to develop logic to perform the illustrated processing. It will be appreciated that in some examples program elements like temporary variables routine loops and so on are not shown. It will be further appreciated that electronic and software applications may involve dynamic and flexible processes so that the illustrated blocks can be performed in other sequences that are different from those shown and or that blocks may be combined or separated into multiple components. It will be appreciated that the processes may be implemented using various programming approaches like machine language procedural object oriented and or artificial intelligence techniques.

Method may also include at receiving in the integrated circuit a first transaction intended for the physical device. The transaction may be for example a member of a first set of transactions that are to be provided to the virtual device in the external logic or a member of a second set of transactions that are to be provided to the physical device virtualized by the virtual device.

Thus method may include at making a determination whether the first transaction is associated with the virtualized device based at least in part on whether the first transaction is related by addressing to the subset of functions virtualized by the virtual device. If the first transaction is not related by addressing to the subset of functions virtualized by the virtual device then it may be passed through to the physical device at . But if the first transaction is related by addressing to the subset of functions virtualized by the virtual device then the first transaction may be provided at to the external logic.

In response to providing the first transaction to the external logic a second transaction may be received in the integrated circuit at . The second transaction is provided by the external logic in response to being provided the first transaction. The second transaction may be for example a virtual transaction derived from the first transaction. Thus the second transaction may be provided at to the physical device. While a second transaction is described it is to be appreciated that in some examples a first transaction may lead to zero one or more second transactions being received in the integrated circuit at and provided to the physical device of . Thus in some examples method is not limited to a one to one correspondence between first transactions and second transactions. At a determination may be made concerning whether to process another transaction. If the determination is Yes processing may return to otherwise processing may conclude.

In one example the subset of functions virtualized by the external logic may include a configuration function. Thus transactions associated with configuring a physical device may be passed to the external virtualization logic. Similarly the subset of functions virtualized by the external logic may not include functions in an input output data path associated with the physical device. Thus input output transactions may not be passed to the external virtualization logic.

While configuration and input output are discussed in connection with it is to be appreciated that method may facilitate selectively virtualizing other functions. In one example the subset of functions virtualized by the external logic may include an updated version of a previous version of the subset of functions in the integrated circuit. Thus method may facilitate providing a fix for a design flaw in the integrated circuit.

In one example methodologies are implemented as processor executable instructions and or operations provided on a computer readable medium. Thus in one example a computer readable medium may store processor executable instructions operable to perform a method for providing external virtualization support to an integrated circuit that implements a physical device where the integrated circuit is configured without internal virtualization support. The method may include providing a virtual device that virtualizes a subset of functions provided by the physical device. The virtual device may be implemented in an external logic. The method may also include receiving in the integrated circuit a first transaction intended for the physical device and selectively providing the first transaction to the external logic based at least in part on whether the first transaction is related by addressing to the subset of functions virtualized by the virtual device. The method may also include receiving in the integrated circuit from the external logic zero one or more second transactions in response to providing the first transaction to the external logic. The method may therefore include providing the second transactions to the physical device.

While the above method is described being provided on a computer readable medium it is to be appreciated that other example methods described herein can also be provided on a computer readable medium.

A simplified or more general instance of method is illustrated as method in . Method facilitates providing external virtualization support to an integrated circuit that implements a physical device where the integrated circuit is configured without internal virtualization support. Method includes at providing a virtual device that virtualizes a subset of functions provided by the physical device. The virtual device may be implemented for example in an external logic.

Method may also include at receiving in the integrated circuit a first transaction intended for the physical device and at selectively providing the first transaction to the external logic based. Whether the first transaction is provided to the external logic may be based for example on whether the first transaction is related by addressing to the subset of functions virtualized by the virtual device.

Method may also include at receiving from the external logic a second transaction s in response to providing the first transaction to the external logic and at selectively providing the second transaction s to the physical device.

Method may also include at receiving in the integrated circuit a first data packet associated with an action to be performed by the physical device implemented by the integrated circuit. The first data packet may be associated with for example control data movement and the like. Control may include for example configuration functions while data movement may include for example reading and writing data.

Method may also include at examining a port address associated with the first data packet. The port address may be for example a configuration port address a data path port address a control port address and so on. After examining the port address a determination may be made at concerning whether the data packet should be routed to an external logic that virtualizes the physical device or should be provided to the physical device. If the determination is that the packet is not for the emulator then at the data packet may be provided to the physical device. If the determination at is that the data packet is for the emulator then method may include at selectively providing the first data packet to the external virtualization logic via the management port.

Method may also include at receiving a second data packet from the external virtualization logic in response to providing the first data packet to the external virtualization logic. For example the first data packet may be an original configuration transaction that the external logic receives and manipulates to produce a second configuration transaction. By way of illustration if the external virtualization logic has already initialized a physical device in connection with providing a first instance of a virtual version of the physical device then a second transaction from a second entity seeking to initialize the physical device may not require the physical device to be initialized but rather may only require the external logic to present a second instance of the virtual device to the second entity. Thus the second data packet while related to the first data packet may cause a different action based for example on state stored in the external emulator. While a single second data packet is described it is to be appreciated that there may be a one to one one to none and or one to many relationship between a first data packet and a second data packet.

At a second data packet may be received from the external logic and at the second data packet may be provided to the physical device. As described above zero or more second data packets may be received from the external logic for first data packets provided to the external logic. The second data packets may be for example derived from the first data packet. At a determination may be made concerning whether to process another data packet. If the determination is yes then processing may return to otherwise processing may conclude.

While illustrates various actions occurring in serial it is to be appreciated that various actions illustrated in could occur substantially in parallel. By way of illustration a first process could configure an integrated circuit a second process could receive data packets and a third process could route data packets. While three processes are described it is to be appreciated that a greater and or lesser number of processes could be employed and that lightweight processes regular processes threads and other approaches could be employed. It is to be appreciated that other example methods may in some cases also include actions that occur substantially in parallel.

Method may also include at configuring a source decoder to manipulate a transaction intended for the integrated circuit to include a port address that is a member of one of the first set of addresses or the second set of addresses. For example configuration transactions may be manipulated to include a port address that will lead to the transaction being routed to the external virtualization logic while read write transactions may be manipulated to include a port address that will lead to the transaction being routed to the physical device.

Method may also include at receiving a transaction configured without an address and at adding the port address to the transaction. After receiving and manipulating the transaction method may include at providing the transaction to the integrated circuit. Thereafter the transaction may be processed like methods described in connection with .

A simplified or more general instance of method is illustrated as method in . Method facilitates providing chip hardware virtualization via external emulation. Thus method may include at configuring an integrated circuit to direct a first set of data packets associated with a first set of addresses to a management port and to not direct a second set of data packets associated with a second set of addresses to the management port. Having established the packet address based routing method may then proceed at to receiving in the integrated circuit a first data packet associated with an action to be performed by a physical device implemented by the integrated circuit and at to selectively providing the first data packet to an external virtualization logic via the management port based at least in part on a port address associated with the first data packet.

The processor can be a variety of various processors including dual microprocessor and other multi processor architectures. The memory can include volatile memory and or non volatile memory. The non volatile memory can include but is not limited to ROM PROM EPROM EEPROM and the like. Volatile memory can include for example RAM synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM and direct RAM bus RAM DRRAM .

A disk may be operably connected to the computer via for example an input output interface e.g. card device and an input output port . The disk can include but is not limited to devices like a magnetic disk drive a solid state disk drive a floppy disk drive a tape drive a Zip drive a flash memory card and or a memory stick. Furthermore the disk can include optical drives like a CD ROM a CD recordable drive CD R drive a CD rewriteable drive CD RW drive and or a digital video ROM drive DVD ROM . The memory can store processes and or data for example. The disk and or memory can store an operating system that controls and allocates resources of the computer .

The bus can be a single internal bus interconnect architecture and or other bus or mesh architectures. While a single bus is illustrated it is to be appreciated that computer may communicate with various devices logics and peripherals using other busses that are not illustrated e.g. PCIE SATA Infiniband 1394 USB Ethernet . The bus can be of a variety of types including but not limited to a memory bus or memory controller a peripheral bus or external bus a crossbar switch and or a local bus. The local bus can be of varieties including but not limited to an industrial standard architecture ISA bus a microchannel architecture MSA bus an extended ISA EISA bus a peripheral component interconnect PCI bus a universal serial USB bus and a small computer systems interface SCSI bus.

The computer may interact with input output devices via i o interfaces and input output ports . Input output devices can include but are not limited to a keyboard a microphone a pointing and selection device cameras video cards displays disk network devices and the like. The input output ports can include but are not limited to serial ports parallel ports and USB ports.

The computer can operate in a network environment and thus may be connected to network devices via the i o interfaces and or the i o ports . Through the network devices the computer may interact with a network. Through the network the computer may be logically connected to remote computers. The networks with which the computer may interact include but are not limited to a local area network LAN a wide area network WAN and other networks. The network devices can connect to LAN technologies including but not limited to fiber distributed data interface FDDI copper distributed data interface CDDI Ethernet IEEE 802.3 token ring IEEE 802.5 wireless computer communication IEEE 802.11 Bluetooth IEEE 802.15.1 Zigbee IEEE 802.15.4 and the like. Similarly the network devices can connect to WAN technologies including but not limited to point to point links circuit switching networks like integrated services digital networks ISDN packet switching networks and digital subscriber lines DSL . While individual network types are described it is to be appreciated that communications via over and or through a network may include combinations and mixtures of communications.

Thus in one example computer may be a computer configured with a trap mode register a plurality of interrupt vector address registers and a plurality of interrupt vector tables. Computer may include an initialization logic not illustrated that is configured to initialize the trap mode register interrupt vector address registers and interrupt vector table.

The image forming device may receive print data to be rendered. Thus image forming device may also include a memory configured to store print data or to be used more generally for image processing. The image forming device may also include a rendering logic configured to generate a printer ready image from print data. Rendering varies based on the format of the data involved and the type of imaging device. In general the rendering logic converts high level data into a graphical image for display or printing e.g. the print ready image . For example one form is ray tracing that takes a mathematical model of a three dimensional object or scene and converts it into a bitmap image. Another example is the process of converting HTML into an image for display printing. It is to be appreciated that the image forming device may receive printer ready data that does not need to be rendered and thus the rendering logic may not appear in some image forming devices.

The image forming device may also include an image forming mechanism configured to generate an image onto print media from the print ready image. The image forming mechanism may vary based on the type of the imaging device and may include a laser imaging mechanism other toner based imaging mechanisms an ink jet mechanism digital imaging mechanism or other imaging reproduction engine. A processor may be included that is implemented with logic to control the operation of the image forming device . In one example the processor includes logic that is capable of executing Java instructions. Other components of the image forming device are not described herein but may include media handling and storage mechanisms sensors controllers and other components involved in the imaging process.

Referring now to an application programming interface API is illustrated providing access to an external emulation logic . The API can be employed for example by a programmer and or a process to gain access to processing performed by logic . For example a programmer can write a program to access logic e.g. invoke its operation monitor its operation control its operation where writing the program is facilitated by the presence of API . Rather than programmer having to understand the internals of logic programmer merely has to learn the interface to logic . This facilitates encapsulating the functionality of logic while exposing that functionality.

Similarly the API can be employed to provide data values to logic and or retrieve data values from logic . For example a process that maps port addresses based on virtualized functions can provide mapping data to logic via API by for example using a call provided in API . Thus in one example of API a set of application programming interfaces can be stored on a computer readable medium. The interfaces can be employed by a programmer computer component logic and so on to gain access to an external emulation logic . The interfaces can include but are not limited to a first interface that communicates a crossbar data and a second interface that communicates a source decoder data. In one example the crossbar data may facilitate configuring a crossbar to route a transaction based on the source decoder data. The interfaces may also include a third interface that communicates a physical device data related to a physical device to which the crossbar may provide a transaction and a fourth interface that communicates a virtual device data related to a virtual device to which the crossbar may provide a transaction. The virtual device may implement a subset of a set of functions performable by the physical device.

While example systems methods and so on have been illustrated by describing examples and while the examples have been described in considerable detail it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems methods and so on described herein. Additional advantages and modifications will readily appear to those skilled in the art. Therefore the invention is not limited to the specific details the representative apparatus and illustrative examples shown and described. Thus this application is intended to embrace alterations modifications and variations that fall within the scope of the appended claims. Furthermore the preceding description is not meant to limit the scope of the invention. Rather the scope of the invention is to be determined by the appended claims and their equivalents.

To the extent that the term includes or including is employed in the detailed description or the claims it is intended to be inclusive in a manner similar to the term comprising as that term is interpreted when employed as a transitional word in a claim. Furthermore to the extent that the term or is employed in the detailed description or claims e.g. A or B it is intended to mean A or B or both . When the applicants intend to indicate only A or B but not both then the term only A or B but not both will be employed. Thus use of the term or herein is the inclusive and not the exclusive use. See Bryan A. Garner A Dictionary of Modern Legal Usage 624 2d. Ed. 1995 .

