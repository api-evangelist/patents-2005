---

title: User form based automated and guided data collection
abstract: In response to a user request, an annotation form is presented to a user for annotating a target document or image in a database. The annotation form is associated with the target document. A runtime program is associated with the annotation form. The annotation form selected by the user provides prompts for annotation input. The annotation input is saved in an annotation database and the runtime program performs an action on behalf of the user. Preferably the runtime program action comprises analysis of elements of the target document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07636883&OS=07636883&RS=07636883
owner: International Business Machines Corporation
number: 07636883
owner_city: Armonk
owner_country: US
publication_date: 20050518
---
The present invention is related to annotating documents in computer systems more particularly to providing GUI Forms for guiding annotation of viewable images.

Annotation is the process of adding metadata to some target data. Annotation systems allow users to record insights or notes about any target data for the benefit of future users who view or use the target data. The target data document can be any form of data including for example text data image data bitmap data audio data video data and the like. Annotation systems use computers to simulate the paradigm of sticky notes or margin notes that people often use when working with paper documents. People record their judgments and observations about the paper document by marking on the document itself. Thus when another reader looks at the document the note is immediately apparent to the reader. Computer Annotation Systems exist to apply this paradigm to electronic target data and documents. Electronic sticky notes are annotations applied preferably to a location of the document. Such annotation systems have other advantages as well. Many annotation systems allow for querying the library of annotations and target data as a way to find important judgments or important target documents. Other systems even allow for annotations to perform a workflow task such as in the system described by Ser. No. 10 983 820 Multi User Multi Timed Collaborative Annotations Filed Nov. 8 2004. Many annotation systems also provide the capability of automated annotations that is annotations made without user input usually by batch processes. Annotation systems are in high demand in life sciences industries but are not limited to that domain.

The main problem with current annotation systems is the burden placed on users to create annotations. Users often see annotating a document as having no immediate benefit to the task they are accomplishing. They are often annotating for the vague ideal that it will help another user in the future. While automated annotations remove the user from the process such annotations are not always appropriate as human insights are often beneficial or required when creating annotations. Annotations also often serve as a tool for adding order to existing freeform data as well and bringing out important data from freeform data. By annotating the user is often placing the important aspects of some target data into a more structured and queryable form. However users often see such annotation tasks as a bother. The main problems in many annotation systems are often not technical problems but simply that users fail to annotate effectively and thus the usefulness of the annotation system suffers. Thus there is room for improvement upon current annotation systems to make creating annotations have immediate reward for the user and to eliminate annotation tasks that users consider rote boring or burdensome.

The present invention provides predetermined annotation forms to a user. The forms assist the user in creating consistent annotations to a document. The form provides a consistent set of GUI prompts and fields such that the user is directed to providing the required data consistently. Furthermore the invention associates a runtime program associated with the form for performing tasks automatically. For example the runtime may run an analysis tool that analyses the document to be annotated for the user. The runtime may also enter data automatically into the form including user information document to be annotated information results of runtime initiated queries and the like. Thus with the present invention a user selected portion of a user selected document to be annotated can be selected for annotating. A list of forms available to the users is presented to the user. The user selects a desired form which selection causes portions of the form to be filled in a runtime action is performed and user provided annotation information is prompted. The annotation data obtained using the form is saved in an annotation store along with information associating the location in a document store of the associated document annotated preferably with location information locating a portion of the document related to the annotation.

In an embodiment an annotation application receives a user request for an annotation form for annotating a target document. Responsive to the user request an annotation form is selected according to one or more predetermined parameters the annotation form preferably comprising one or more text prompts for annotation data. The first annotation form is associated with the location of the target document. A runtime program is associated with the annotation form the runtime program having access to any one of user GUI annotation data the target document external data or external processes. A GUI representation of the first annotation form is presented to the user. A user GUI annotation input is received according a text prompts. The received GUI annotation input is associated with the annotation form. Responsive to a user GUI input annotations associated with the annotation form are saved in an annotation database. Furthermore an action associated with the use of the annotation form is performed by way of the runtime program.

It is therefore an object of the invention to provide a predetermined annotation form for guiding a user in creating an annotation.

It is an object of the invention to associate a runtime program with the annotation form such that an action can be performed automatically to assist the user in performing the annotation.

It is another object of the invention to create an annotation of a document to be annotated based on criteria presented to a user by way of a predetermined form selected from a group of one or more forms.

It is another object of the invention is to perform an action step by receiving a GUI action initiator from the user and initiating the performance of the action step responsive to the received GUI action initiator.

It is another object of the invention to automatically initiate an action step when a user performs any one of presenting an annotation form or saving an annotation form.

It is still another object of the invention to perform an action by any one of analyzing elements of a target document or providing results of an analysis of elements of the target document to the user.

In yet another object of the invention to automatically fill in a field of an annotation form based results of a runtime task initiated by the determining step other annotation fields the target document being annotated program context or program environment.

It is still another object of the invention to present a GUI representation of an annotation form by automatically presenting any one of a multi part form a field a widget a prompt or a color in the annotation form based on results of a runtime task initiated by the determining step other annotation fields the target document being annotated program context or program environment.

It is an object of the invention to guide a user in creating an annotation by automatically removing one or more annotation fields modifying one or more annotation fields or adding one or more annotation fields.

It is yet another object of the invention to authorize any one of the use of an annotation form or the use of a field of an annotation form.

It is yet another object of the invention to receive a user determined document location the user determined document location identifying a desired location within a target document. To then mark the desired location of the target document with an annotation widget.

It is another object of the invention to perform an annotation form operation by way of a GUI widget a second runtime program or an extensible DHTML engine.

It is yet another object of the invention to select an annotation form by presenting a list annotation forms to a user the user selecting one of the annotation forms as the annotation form.

It is an object of the invention to determine a list of annotation forms based on a runtime user provided parameters system provided parameters or authorization parameters.

It is yet another object of the invention to provide a runtime program comprising an application program interface for connecting an application program to the runtime.

It is yet another object of the invention to perform a function of selecting a document access module from a library of document access modules the selection based on a document type of the target document and accessing the target document by way of the selected document access module.

It is still another object of the invention to provide a target document to be annotated comprising any one of a text file a word processor text file an image bitmap an image file a video file an audio file or a program file.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

The detailed description explains preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

The system may communicate with other computers or networks of computers by way of a network adapter capable of communicating with a network . Example network adapters are communications channels token ring Ethernet or modems. Alternatively the workstation may communicate using a wireless interface such as a CDPD cellular digital packet data card. The workstation may be associated with such other computers in a Local Area Network LAN or a Wide Area Network WAN or the workstation can be a client in a client server arrangement with another computer etc. All of these configurations as well as the appropriate communications hardware and software are known in the art.

Still referring to the networks may also include mainframe computers or servers such as a gateway computer client server or application server remote server which may access a data repository . A gateway computer serves as a point of entry into each network . A gateway is needed when connecting one networking protocol to another. The gateway may be preferably coupled to another network the Internet for example by means of a communications link. The gateway may also be directly coupled to one or more workstations using a communications link. The gateway computer may be implemented utilizing an IBM eServer zServer 900 Server available from IBM.

Software programming code which embodies the present invention is typically accessed by the processor of the system from long term storage media such as a CD ROM drive or hard drive. The software programming code may be embodied on any of a variety of known media for use with a data processing system such as a diskette hard drive or CD ROM. The code may be distributed on such media or may be distributed to users from the memory or storage of one computer system over a network to other computer systems for use by users of such other systems.

Alternatively the programming code may be embodied in the memory and accessed by the processor using the processor bus. Such programming code includes an operating system which controls the function and interaction of the various computer components and one or more application programs. Program code is normally paged from dense storage media to high speed memory where it is available for processing by the processor . The techniques and methods for embodying software programming code in memory on physical media and or distributing software code via networks are well known and will not be further discussed herein.

In a preferred embodiment the present invention is implemented as one or more computer software programs . The implementation of the software of the present invention may operate on a user s workstation as one or more modules or applications also referred to as code subroutines or objects in object oriented programming which are invoked upon request. Alternatively the software may operate on a server in a network or in any device capable of executing the program code implementing the present invention. The logic implementing this invention may be integrated within the code of an application program or it may be implemented as one or more separate utility modules which are invoked by that application without deviating from the inventive concepts disclosed herein. The application may be executing in a Web environment where a Web server provides services in response to requests from a client connected through the Internet. In another embodiment the application may be executing in a corporate intranet or extranet or in any other network environment. Configurations for the environment include a client server network Peer to Peer networks wherein clients interact directly by performing both client and server function as well as a multi tier environment. These environments and configurations are well known in the art.

The present invention provides an annotation system for creating an electronic annotation of a document. The creation of the annotation is facilitated by a GUI form presented to the annotator in which the annotation forms filled out by users are backed by a runtime that can execute instructions with access to the target data being annotated and external data and processes. Thus the present invention allows annotation forms to be automatically customized by the context and environment in which the annotation is created. The user is assisted in creating an annotation or performing an annotation associated task by the runtime code preferably in the annotation form itself which can perform functions such as automatically filling in fields in the annotation based on other annotation fields the target data being annotated or other contextual and environmental factors. The form can also assist and guide the user in creating the annotation by removing or adding fields it determines appropriate.

Using the present invention the user can perform more than just data entry when filling in annotations. He can perform data analysis aided by the computer. In essence since the annotation form can have advanced logic running in its runtime the user can accomplish his task as part of creating an annotation. This alleviates the feeling of users that annotations provide no immediate value to the annotator. The present invention allows the act of creating an annotation to become the tool with which tasks are accomplished. In an example environment a researcher has the job of analyzing images of brain tumors as they grow. With a traditional annotation system this user would open an image and use an analysis program to run algorithms on the image. The user would then record the results of the analysis by creating an annotation on the image. With the present invention this user would be able to run the analysis as part of the annotation itself. When the user wanted to create an annotation on the image an example embodiment of our system would detect the context including the user s identification and the target image and determine as configured that this user likely wants to perform a predetermined analysis on the target image. So the annotation form runtime would invoke the external analysis algorithms and store the results as part of the annotation automatically. The user can then add their subjective analysis to the annotation and submit it.

It should be understood that the image of the example could be any object including Bitmap JPEG GIF MPEG Text Markup Language or PDF and will be referred to in the present specification as image or document interchangeably. Furthermore the document or image may actually be made up of several component documents or images and still be referred to as a document or image.

With the present invention the annotation immediately provides a means to more efficiently achieving the user s task. Also all of the benefits of the annotation paradigm now apply to that data such as the query ability and the ease of discovery and collaboration. Without using an annotation system the user is left to more inconvenient means of storing results such as simple files on their systems which then are difficult to find and query or custom database and data entry applications which are expensive to develop and maintain and do not have the simple discoverability and ease of integration that the annotation paradigm brings.

After the form is selected it is rendered for the user and the runtime begins to execute the instructions included with the form . The runtime monitors the user interaction with the form and presents the interactions as events to the code in the runtime. The runtime exposes the data inside the document as well as gives access to external data to the instructions in the form. Once the user submits the annotation the collected data is placed into the annotation system s annotation database .

In a preferred embodiment for the invention the annotation server is created according to the pending U.S. patent application Ser. No. 10 600 014 entitled Universal Annotation Management System Filed Jun. 20 2003 and assigned to IBM. Such a system provides many advantages and is flexible in its ability to annotate many heterogeneous types of target data. Other embodiments where the annotation system stores the annotations within the data stream of the target object for example are also possible using the techniques of the present invention.

In a preferred embodiment the annotation system is structured such that an annotation server contains configuration information for the annotation forms. This configuration information is stored as a document in the eXtensible Markup Language format in such a manner as to describe a recursive tree structure consisting of fields and groups. Groups may contain a list of fields and or other groups. Each group has a name and information about how many times the group must appear in an annotation conforming to the form and also the maximum number of times the group may appear in an annotation instance conforming to the form. Each field contains a unique name a human readable label and type information describing the data allowed inside that field. Fields also may contain other data such as the minimum and maximum number of times the field may appear and other arbitrary information known as facets which supply hints to the FormHost to provide better rendering. For example a field may be specified as a multi line field by a facet. Upon seeing the multi line facet the field would be rendered as a larger text entry area in the user interface. The FormHost may ignore the facets in one embodiment.

In a preferred embodiment the XML document above describes the structure or schema for an annotation. A second document is also supplied in a preferred embodiment. This second document is supplied in the form of an XML Stylesheet Language document. This document includes information that describes how to transform a structure document as described above with the fields and recursive groups into a document more easily consumed by the FormHost and its runtime . In a preferred embodiment the XSL document contains information allowing it to generate Dynamic HyperText Markup Language documents DHTML . Dynamic HTML is HTML that includes JavaScript or other such languages as part of the document. The embedded JavaScript can manipulate the HTML elements at runtime based on the Document Object Model DOM API that is exposed by the DHTML processor. As such DHTML processor includes a JavaScript runtime typically as a component. In the preferred embodiment the FormHost s runtime is created by extending an existing DHTML processor s JavaScript runtime. Such extensible runtimes include Microsoft Internet Explorer s JScript runtime and the Mozilla SpiderMonkey JavaScript runtime together with the Mozilla Gecko HTML Rendering engine. In another embodiment the XSL could be designed to produce documents in the XForms language rather than DHTML and the FromHost may extend an XForms processor to display the forms. DHTML is described in a document Introduction to Dynamic DHTML from MIROSOFT CORP. on the World Wide Web at msdn.microsoft.com library default.asp url workshop author perf perftips.asp.

In a preferred embodiment the FormHost extends an existing DHTML rendering and runtime engine by using the existing runtime s extensibility API to expose new modules to the JavaScript running with the runtime. These new modules include functionality such as described in . The Target Document Access module is an important special case module that exposes the key functionality that allows for context sensitive guided annotation forms to be implemented. The Target Document Access module may be implemented by using an existing application s automation API to access or communicate with the target document. For example the ADOBE ACROBAT software from ADOBE Corp. provides as API for reading and writing information to and from Portable Document Format PDF files. The Target Document Access module for PDF files may be implemented by using the Adobe Acrobat API to provide the JavaScript runtime access to the data in the PDF document. A similar approach is done for documents such as MICROSOFT WORD and MICROSOFT EXCEL from MICROSOFT CORP. documents or even relational databases. For relational databases an appropriate database connection that exposes access to the database via the Structured Query Language SQL can be used by the Target Document Access module to provide the JavaScript engine with access in the case of the target document being a relational database. A different Target Document Access module is loaded based on the type of target data so that the FormHost can supply appropriate access to the target document . In a preferred embodiment the FormHost exposes the type of the target data to the form it is hosting so that the form may take appropriate action based upon the type of document being annotated.

Once the user initiates the submission of the annotation the FormHost reads the data from the DHTML runtime and rendering component and formats the data into an annotation instance for transmission into the annotation system . This read back of the data may be achieved by traversing the DHTML DOM looking for elements marked appropriately with identifiers describing which field and group the element represents in the annotation. Another methodology for extracting the data is to submit the form to a web server that may be external or local to the FormHost such that the DHTML engine formats the data as name value pairs in form encoded standard fashion. The web server can then format the data and send it to the annotation system. The approach depends on the extent of the access the DHTML engine gives the FormHost to the DHTML DOM.

The following example scenario will demonstrate the user interaction and the implementation of a preferred embodiment of the invention. The realization of the invention based on this description will be evident to one skilled in the art.

Table 1 is an example COM component that will be exposed via a JavaScript interpreter. Table 2 is an example form that might be returned by the server and rendered by the FormHost. The form includes JavaScript code that accesses both external systems and contextual data of the document being annotated.

Research in the life sciences makes use of visualization and image analysis. A hypothetical example of a common research method involves the researcher using physical methods i.e. test tubes and Petri dishes to recreate and observe a biological phenomenon. At regular intervals the researcher places the physical experiment under a microscope and photographs relevant objects. Once the experiment is complete the analysis begins. The analysis consists of systematically running image processing algorithms on photographs that have been collected throughout the experiment. Those algorithms allow the researcher to extract qualitative data from the images for use in his analysis. For example imagine the hypothetical experiment where a researcher is hoping to analyze the growth rate or cell doubling time of a brain cancer tumor. A small microscopic tumor is physically placed in a suspension with a known food source placed in the same suspension at a known distance from the tumor. The tumor is then expected to grow and migrate towards that food source. This experiment would very roughly attempt to simulate a brain tumor as it grows toward blood vessels in the brain. At regular intervals the researcher photographs the tumor under a microscope thus recording the process of its growth. Once the researcher s physical experiment is complete he analyses each photograph with an image processing software application. The researcher runs algorithms upon the image to remove noise to enhance relevant artifacts and to algorithmically derive the volume of the brain tumor. In the traditional situation without the present invention the researcher invokes the image processing application as a standalone software application. He loads each image and applies the processing resulting in a value and possibly modified images. He then uses pen and paper to record the results in his notebook and also records his results electronically preferably using a spreadsheet application such as EXCEL from Microsoft Corp. In the end the researcher is left with multiple image files Excel files and lab notebook entries which are all scattered in the user s file system. Such isolated files make it nearly impossible to leverage the experiment in the future especially by other researchers. For instance it would be difficult for the researcher to later answer the question which type of food source in all of my experiments yielded the faster cell migration rate Doing so would involve opening every file for every experiment and looking at the resulting migration rate. A much better solution would be to develop a custom application to gather the results and data into a database. Then the data would be query able in many ways and becomes much more valuable in the long term. However creating such an application is difficult involving knowledge of relational databases and application programming. It is not practical to create such an application unless the productivity earned from it justifies the cost of creating the application.

A much better solution is to use an annotation system. Just by creating an annotation form and filling out the results in the annotation system the data is easily query able. Still however this solution is not optimal as such a simple annotation system will place a significant burden on the user to enter multitudes of information such that the database is complete enough to be valuable. The best solution is to add some extra logic to the annotation form such that the image analysis is done automatically by the form. This eliminates many steps that the user has to perform and it allows the form to automatically fill in most of the data and include the actual documents and results being generated. Upon submission all of the information will be in a relational database or other such query able store.

A user accesses a tumor image in an annotation application. The tumor image is preferably one of a plurality of images of the same tumor captured at different times. For example 32 images of a tumor are saved in a database and image is the one selected for display in .

The user wishing to Annotate this image preferably moves his cursor to an area to be annotated and creates a widget at that position or moves his cursor to an existing widget and selects that widget or selects the Annotate widget on the toolbar of the window . The action on the image window causes an annotation selection form to be displayed. Preferably the Annotation Form Selection window comprises a list of document types and a list of existing annotation forms . By moving a cursor in the Form window the user can select a Form . In the example the user has selected Tumor Migration Form rather than In Vivo Radiography Analysis Form . The selected form name is preferably highlighted. The form selection window in a preferred embodiment provides additional functionality to assist the user in selecting the most appropriate form. Once the form is selected the selected form is invoked by selecting a radio button or other means known in the art.

In one embodiment the runtime analyzes the image associated with the annotation in progress. In one embodiment the runtime fills out portions of the form by accessing user information image information or the like. In the example form RunTime results are shown. The runtime application has analyzed the image and reports in the window that the associated application T321 ran successfully . Furthermore results comprising the size of the Tumor and the size change vs. the previous image as well as when the previous image was captured is displayed .

In an embodiment information is automatically provided to the form fields by the RunTime application. The information comprises Image Group number Image number Date image was capture date Annotation last updated name of image owner name of current annotating user and an ID of the current annotating user.

In an embodiment the form provides Action buttons to enable the user to perform useful functions such as navigation of annotations and images. In the embodiment action buttons comprise New Annotation for creating a new annotation Append annotation for adding annotation to an existing annotation clear annotation for removing annotations previous image and next image for navigating from image to image. The action may furthermore provide a radio button to enable the user to directly browse images or annotations.

In an embodiment the user can navigate to another image to enable the RunTime to capture information and then return to the present image such that the RunTime can compare the two images to assist the user in creating his annotation relative to other images of the group .

The annotation form provides a text area for applying annotation information to the annotation. The annotation information may be text or any form of attachment including text word processor text video audio or links to information such as a link to a World Wide Web Page.

Once the user has created his annotation he saves it to the annotation database by selecting the OK radio button .

Unlike the multiple steps performed in multiple standalone unrelated applications in the traditional methodology described above the present invention allows for the experiment analysis to be performed in a simpler more automated fashion and result in the data stored in a more productive storage system such as a relational database. The steps that a user might perform using the present invention to do the analysis are as follows 

First referring to the user opens an image preferably a bitmap GIF MPEG rendering of a photograph of the brain tumor in an annotation enabled image viewer . The user then presses the Annotate radio button and is subsequently presented with a choice preferably via a GUI window as depicted in of one or more annotation forms to use for his annotation. To arrive at this list the application has queried the annotation server for the list of forms that apply for annotating images by this particular user. The query employs the current application context and environment as parameters to this query. In an example embodiment context elements include the user s name username and access credentials the application in which the annotation is being made the filename and file type or the annotated document the operating system of the user etc. The annotation server may use other external data by appending the query with parameters obtained by other systems. For example the server might look in a corporate project assignment database to find annotation forms relevant for the user s current project assignment. The server returns as the result to the query a list of annotation structures or annotation schemas. The client may yet further use other criteria to further narrow the list of annotation structures presented as a choice to the user. If there is only one annotation structure left after all of the filtering then that structure s annotation form is immediately presented for entry. Otherwise the user is presented with a list to make the final selection. The user chooses the most appropriate form based on the descriptions provided. At this point the annotation client retrieves the annotation form referring to that applies to the selected structure for rendering. The form in this example embodiment is retrieved as a Dynamic HyperText Markup Language DHTML document. This document is renderable with a World Wide Web browser such as Microsoft Internet explorer from Microsoft Corporation.

To render the document the annotation client first invokes an embedded copy of the web browser with its included JavaScript language interpreter. Microsoft Internet Explorer provides a Component Object Model COM framework by which it can be embedded and controlled by applications. Thus using the browser as a rendering engine and JavaScript execution engine. Once the browser and JavaScript runtime are invoked the JavaScript runtime is initialized with multiple modules to provide the advanced context access of the invention. The JavaScript engine has to be enhanced with modules to allow the code executing within it to access the document being annotated and external data sources such as web services or other databases. Normally the JavaScript engine does not supply such APIs to the code running within it. The Microsoft Internet Explorer JavaScript engine however is extensible and can be enhanced when being embedded. So in this embodiment multiple modules in the form of automation compatible COM objects are created to enhance the functionality available to the JavaScript code running in the engine. Those COM components are registered with the JavaScript engine via a well known public interface for that purpose.

For example assume that one wants to enhance the JavaScript engine such that it exposes a set of image manipulation algorithms as needed for the example scenario described. We want JavaScript code to be able to call a function ThresholdImage and CalculateTurmorVolume . First a COM object would be created that exposes and implements those methods. The COM object would basically be an object that exposes a single interface with those methods. The example IDL Interface Definition Language for such an object is shown Table 1. When the JavaScript engine is being initialized this image manipulation component is instantiated by the FormHost and the FormHost places calls functions on the JavaScript engine to register the object as a new API exposed to the JavaScript code within the engine. Once that is done a DHTML document that includes JavaScript code such as the example shown in Table 2 can execute the functions and thus manipulate images. Notice that DHTML provides methods to respond to user actions as events such as the button click being used to trigger the call to the CalculateTumorVolume function in Table 2. Specifically the onlick handler of the button calls the OnCalculateVolumeButtonClicked function. This extensibility point of the embeddable web browser and JavaScript interpreter allows us to implement the client component example of the present invention by building a series of COM objects such as the image manipulation example and FormHost software component. The multiple COM objects expose APIs to allow forms to communicate with their context the document being annotated and external sources. The FormHost component is in charge of communication with the server and initialization of the embedded web browser and JavaScript engine.

Once the form is displayed via the methodology described above the user interacts with it thus in one example invoking the modules to communicate with the form s context and external data sources. The form s logic may even fill in fields automatically based on user actions using the framework described above. The user eventually completes filling in information and interacting with the form and then submits the form typically by pressing a submit radio button. At this point the FormHost must extract the information from the form to send to the server as the full annotation data. The FormHost does this by traversing the object model of the web browser. The DHTML document that contains the form includes special markup that allows the FormHost to determine which data to extract and how to send it to the server. For example in Table 2 the aid attributes are hints to the FormHost which tell it that the data of that element is part of the annotation and that the name of the relevant field in the annotation is the value of the aid attribute. The FormHost extracts all of the relevant data and formats a web service request typically in the form of an HTTP POST message with XML as the posted data and sends that request to the server as an invocation of the server s annotation creation functionality. The server in turn stores that data in its database.

The example process described above can be done differently using alternate web browsers or rendering systems that are not DHTML based at all. In an embodiment the XForms standard could have been used to render display and extract data from the forms. Also other languages and runtimes may be used instead of JavaScript. Languages such as VBScript Perl Java custom languages or any others could have been used instead while maintaining the spirit of the invention. The idea of embedding the rendering component and extending its functionality is an elegant implementation strategy but not essential to the invention. The runtime and rendering component may have also been implemented from scratch as part of the FormHost for example according to the teaching of the present invention. The server in the present example returned the DHTML document containing the form and script directly. In another embodiment of the invention the server would return instead the schema of the annotation and an Extensible Stylesheet Language XSL transformation document which may be applied to the annotation schema to yield a renderable form such as a DHTML document or XForms document. The script may be included as part of the schema the XSL document or another document altogether.

Table 2 is an example form that might be returned by the server and rendered by the FormHost. The form includes JavaScript code that access both external systems and contextual data of the document being annotated.

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While a preferred embodiment of the invention has been illustrated and described herein it is to be understood that the invention is not limited to the precise construction herein disclosed and the right is reserved to all changes and modifications coming within the scope of the invention as defined in the appended claims.

