---

title: User defined contextual desktop folders
abstract: Contextual desktop folders are provided in addition to a system desktop folder, thereby customized desktop folders (contextual desktop folders) are provided to a user. Thus, applications that have for example editing dialogs presented via a GUI interface, can have the dialogs customized for a computing environment providing dialog functions associated with predetermined applications. Preferably, a user or application selects files of a contextual desktop to present to the user of the application as “default” files, folders, shortcuts or applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546546&OS=07546546&RS=07546546
owner: International Business Machines Corporation
number: 07546546
owner_city: Armonk
owner_country: US
publication_date: 20050824
---
The present invention relates to the field of graphic user interfaces GUIs within computer systems. More specifically the present invention relates to a GUI that is integrated into a computer operating system that enables the user to easily access particular sets of files in the file system of that computer.

In today s operating systems there is no notion of a context or current working folder. Each application application program must manage this independently. Some applications manage it well and others not so well. In addition it is cumbersome when switching between applications because each application has its own notion of what is the current directory. One way to achieve this cross application integration is through the system supplied user desktop. Most operating systems today for example WINDOWS operating system from Microsoft Corp. have the notion of a user s desktop folder that allows the user to place files folders applications and shortcuts on a virtual space to allow easy access to those commonly used items.

This location is available in open and save dialog boxes for example and is easily accessible across applications. The user can gain quick access to this location from any application.

The problem is that there is only one desktop. So the desktop fills up with unrelated content that makes its use less effective. This content includes but is not limited to files applications folders shortcuts etc. A solution is needed to facilitate the use of commonly accessed resources.

US Patent Application No. 20030131016A1 Automated system and methods for determining the activity focus of a user a computerized environment filed Sep. 27 2002 and incorporated herein by reference discloses a system for collecting information regarding user activity in a computerized environment. The system in a descriptive embodiment activity focus of the user is inferred. Then data is retrieved regarding the activity of the user. The system monitors the events occurring due to the interaction of the user and the computer system. Thus the system is able to determine when the user changes activity focus.

This patent application discusses a user working with multiple files and types of information but does not provide a solution that enables a user to interactively control his desktop environment.

U.S. patent application Ser. No. 10 117 856 Anderson et al. filed Apr. 5 2002 titled Virtual desktop manager incorporated herein by reference describes a method for a user to preview multiple virtual desktops in a graphical user interface is described. The method comprises receiving an indication from a user to preview the multiple virtual desktops and displaying multiple panes on the display. Each pane contains a scaled virtual desktop having dimensions that are proportionally less than the dimensions of a corresponding full size virtual desktop. Each scaled virtual desktop displays with one or more scaled application windows as shadows if the corresponding full size virtual desktop has one or more corresponding application windows that are active. The use of Virtual Desktops does not provide a way to ease management of resources for multiple application programs.

A method is needed to ease management of files folders and other resources for multiple application programs in a computer system.

The present invention is directed towards providing customized desktops in addition to a system desktop such that a customized contextual desktop provided that is appropriate for the activity or job in which the user is currently engaged. In this way the objects with the highest likelihood of being relevant will be the most easily accessed objects in the file system. The ability to arbitrarily assign to any folder in the system a customized desktop role is what we call the contextual desktop CDT .

In one aspect of the invention a computer system has a system desktop for general use by applications. The computer system provides the capability to create contextual desktops to augment the system desktop. The contextual desktops are preferably presented to the user in the form of an icon on the display of the system view in addition to the system desktop icon.

It is therefore an object of the invention to provide via an operating system of a computer system a system desktop view at a computer display of the computer system wherein a first contextual desktop folder the system desktop of one or more contextual desktop folders is created. When first contextual desktop folder is made current default file operations of an application program of the computer system are directed to the first contextual desktop folder.

It is a further object of the invention to create a second contextual desktop folder of the one or more contextual desktop folders and to provide at the computer display a GUI interface for managing the second contextual desktop folder of the one or more contextual desktop folders.

It is yet another object of the invention in response to receiving a GUI directive selecting the second contextual desktop folder by way of the GUI interface to make current the second contextual desktop folder of the one or more contextual desktop folders whereby the default file operations of an application program of the computer system are directed to the second contextual desktop folder.

It is another object of the invention to make the second contextual desktop folder the only current contextual desktop folder of the computer system.

In a further object of the invention when the second contextual desktop folder of the one or more contextual desktop folders is the current contextual desktop folder in response to receiving a GUI directive selecting the first contextual desktop folder by way of the GUI interface thereby making current the first contextual desktop folder of the one or more contextual desktop folders whereby the default file operations of an application program of the computer system are directed to the second contextual desktop folder.

It is another object of the invention to present at the system desktop view a GUI representation of the one or more contextual desktop folders.

It is still another object of the invention to provide a GUI representation consists of any one of a contextual desktop separation bar a highlighted contextual desktop one or more tab widgets a menu of one or more widgets or one or more icon widgets.

It is another object of the invention to provide a contextual desktop folder containing information consisting of any one of a file a folder shortcut alias or an application program file of the computer system.

It is yet another object of the invention to provide a contextual desktop folder consisting of any one of the first contextual desktop folder or the second contextual desktop folder is a file system folder containing any one of a file a folder shortcut alias or an application program file of the computer system.

It is yet another object of the invention to provide a creating the second contextual desktop folder step comprising the further steps of prompting a user to create a new contextual desktop folder by way of the GUI interface whereby responsive to the GUI prompt a GUI directive to make a system folder a new contextual desktop folder is received.

It is yet another object of the invention to by way of the GUI interface receive a GUI management directive for managing the second contextual desktop folder the GUI management directive consisting of any one of a file save operation a file print operation a file open operation a find file operation a make a new contextual desktop folder operation or a make current a contextual desktop folder operation.

It is yet another object of the invention to provide default file operations of the application consisting of any one of a file save operation a file print operation or a file open operation a find file operation.

It is yet another object of the invention to communicate current contextual desktop folder information between the operating system of the computer system and an application program of the computer system by way of an API.

It is yet another object of the invention to simultaneously present contents of both the first and second contextual desktop folder at the computer display.

It is yet another object of the invention to provide a system API to access the value of the current contextual desktop folder and use that folder to support the user in file dialogs the file dialogs comprising any one of open file save file edit file enable disable or delete file.

It is yet another object of the invention when the enable dialog is selected to enable the current desktop folder to provide contextual desktop functions and when the disable dialog is selected to disable the current desktop folder so the file dialogs ignore the contextual desktop functions.

It is yet another object of the invention to provide contents of the current desktop folder comprising shortcuts or aliases to folders files and applications thereby enabling those folders files and applications to be contained in multiple contextual desktop folders simultaneously.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

The system may communicate with other computers or networks of computers by way of a network adapter capable of communicating with a network . Example network adapters are communications channels token ring Ethernet or modems. Alternatively the workstation may communicate using a wireless interface such as a CDPD cellular digital packet data card. The workstation may be associated with such other computers in a Local Area Network LAN or a Wide Area Network WAN or the workstation can be a client in a client server arrangement with another computer etc. All of these configurations as well as the appropriate communications hardware and software are known in the art.

Still referring to the networks may also include mainframe computers or servers such as a gateway computer client server or application server remote server which may access a data repository . A gateway computer serves as a point of entry into each network . A gateway is needed when connecting one networking protocol to another. The gateway may be preferably coupled to another network the Internet for example by means of a communications link. The gateway may also be directly coupled to one or more workstations using a communications link. The gateway computer may be implemented utilizing an IBM eServer zSeries 900 Server available from IBM Corp.

Software programming code which embodies the present invention is typically accessed by the processor of the system from long term storage media such as a CD ROM drive or hard drive. The software programming code may be embodied on any of a variety of known media for use with a data processing system such as a diskette hard drive or CD ROM. The code may be distributed on such media or may be distributed to users from the memory or storage of one computer system over a network to other computer systems for use by users of such other systems.

Alternatively the programming code may be embodied in the memory and accessed by the processor using the processor bus. Such programming code includes an operating system which controls the function and interaction of the various computer components and one or more application programs. Program code is normally paged from dense storage media to high speed memory where it is available for processing by the processor . The techniques and methods for embodying software programming code in memory on physical media and or distributing software code via networks are well known and will not be further discussed herein.

In the following detailed description contextual desktops of the present invention numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be obvious to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail as not to unnecessarily obscure aspects of the present invention.

Some portions of the detailed descriptions which follow are presented in terms of procedures logic blocks processing and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure logic block process step etc. is here and generally conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present invention discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention allows any folder to take on the role of the currently focused desktop i.e. the contextual desktop CDT . Then in file save and open dialogs this contextual desktop will be immediately accessible and it will ease user and application supported processes including the file opening and saving process preferably across applications. In addition the content of the system defined user s desktop can be merged with the contextual desktop. This allows the user to easily view both the normal desktop icons like the trash icon and the current folder s files in the space of the traditional desktop. A visual distinction preferably would be provided to highlight the difference between the traditional and contextual desktop items. This could take the form of a distinct background color of the icons and other methods known in the art.

Typically desktops would be spatially distinct as well and may even utilize a splitter bar to hide one set of desktop icons and only reveal the desktop icons necessary for the current CDT.

In an example embodiment the standard open and close dialogs include a button in the left column to quickly access the contextual desktop of one or more CDT s available to the user. This is shown in the and . Contextual desktops could be named by the user in a meaningful way so that they are presented to the user unambiguously. In a preferred embodiment where no subdirectories exist within the current contextual desktop there would be no need for the save dialog at all. The CDT aware application in an embodiment has a menu item with appropriate feedback and confirmation to save or open the file to the current CDT. The contextual desktop can be thought of as a shortcut or an alias for the real folder that exists somewhere else on the disk.

In an embodiment with reference to to make a folder a contextual desktop a user would right click on the folder representation and set the contextual desktop property. In another embodiment the user could right click on a window background and get a context menu That allows the user to choose the current contextual desktop from a list of favorite desktops or define a new contextual desktop. In the example the user navigates to the CDT menu via an item Contextual desktop on a pull down menu .

If a folder which is currently being used as a contextual desktop is deleted then the system desktop would be displayed instead. Alternatively the previous contextual desktop could be set as the current contextual desktop.

In today s operating systems there is no notion of system wide tasks and an associated working folder used in its context. Each application must manage this independently and some applications manage it well and others not so well. In addition it is cumbersome when switching between applications because each application has its own notion of what is the current working directory. One way to achieve this cross application integration is through the system supplied user desktop.

Most operating systems today have the notion of a user s desktop folder that allows the user to place files folders applications and shortcuts to allow easy access to those commonly used items . This location is available in open and save dialog boxes and is easily accessible across applications. The user can gain quick access to this location from any application and use it as a file sharing location. Since there is only one desktop and users can t assign any folder as a desktop users compensate by overloading the desktop with files folders and aliases. However the desktop quickly becomes littered with files folders and aliases and becomes less useful because the user is now searching through a potentially large list of unrelated items. This also creates additional steps i.e. clicking through a shortcut to access the relevant data. What is needed is a contextual desktop CDT that the user can define and change based on what activity or job they are doing. The contextual desktop is in some sense a shortcut for the real folder that exists somewhere else on the disk. CDTs however are designed to avoid clutter and annoying additional interaction steps.

In today s PC operating environments you can organize all your program windows into multiple desktop groups. These virtual desktops provide the user with more virtual desktop space to organize windows and applications into separate workspaces. With all your windows neatly categorized you can then switch back and forth between them. This frees up your workspace and allows for a limited number of desktops to gain easy access to applications. This differs from contextual desktops CDTs of the present invention because CDTs allow you to use the existing file system to organize your files and provide easy access to them through open and save dialogs. Virtual desktops of the prior art for example the aforementioned US Patent Application of Anderson et al. provides a limited number of desktop views each desktop view comprises the system icons. A desktop view provides a GUI interface to applications associated with the desktop view. All desktop views share the same file system. This is reflected in the open and save dialogs of the application. A virtual desktop allows the user to organize their activities and windows. This does not support the user in the opening and closing of files in applications. In the present invention the number of CDTs is potentially limitless and any folder in the file system can become a contextual desktop.

This invention allows any folder to take on the role of the contextual desktop. The desktop on a WINDOWS operating system however is fixed to a single system defined folder for each user. For a given user the desktop folder is C Documents and Settings User Name Desktop. Our invention enables the operating system to set any folder to be assigned the role of CDT. With this invention the context of a folder defined as a current CDT will be immediately accessible in file save and open dialogs. In many common work activities users create different types of documents via different applications but store them in the same folder. With the current invention this folder would be specified via the current CDT and the file opening and saving process will be greatly simplified.

Referring to a prior art system desktop view includes a My Computer icon a Recycle Bin icon and an Application program .

The system defined desktop is still useful and can work in conjunction with the CDTs of the present invention. Referring to The system desktop is preferably concurrently displayed with the contextual desktop . Through their presentation each desktop is clearly identified. This allows the user to easily view both the normal desktop icons like the trash icon as well as the current CDTs files and folders in the space of the traditional desktop. A visual distinction is provided to highlight the difference between items from the system desktop and the current CDT. Each desktop is preferably presented uniquely with a distinct background unique colors under different tabs and other means known in the art. Typically these would be spatially distinct as well. For example one technique may utilize a splitter bar to hide one set of desktop icons to only reveal the desktop icons necessary. One embodiment of a CDT viewed in conjunction with the normal system desktop utilizing a splitter bar . Here the system desktop comprises 3 icons My Computer folder Recycle Bin file and Application program . The CDT Contextual Desktop comprises 4 icons Folder folder File file and Application program .

In one embodiment standard open and close dialogs now include an additional button in the left column to quickly access a contextual desktop referring to and depicting using the contextual desktop in the typical open dialog . Contextual desktops are preferably named in a meaningful way so that they are presented to the user unambiguously. Preferably where no subdirectories exist within the current contextual desktop there would be no need for a save dialog at all. The current application could just save to the current contextual desktop.

During file open operations the CDT preferably opens to that location by default. Immediately the user is directed to the correct folder and does not have to hunt for the right files folders or applications.

An important aspect of CDTs is in the context of cross application usage. When working on a specific task typically there are many applications MSWord Photoshop Excel etc that one would change between to create different documents. All these documents belong conceptually to the same task and are preferably stored in the same folder. Unfortunately the operating system OS does not support cross application contexts. The ability of an OS to provide contextual working directories based on the users task using CDTs will provide usability and productivity gains.

In a preferred embodiment with reference to to make a folder a contextual desktop folder one would right click on the folder choose the option to create a new contextual desktop which allows the user to name the desktop the default is the folder s current name . Alternatively the user could right click on the window s background and get a context menu that allows the user to make current a contextual desktop from a list of favorite desktops previously defined CDTs can also be shown as aliases on the system desktop . This menu also allows the user define a new CDT through a file browse dialog. In a preferred embodiment when a folder which is currently being used as a contextual desktop is deleted then the system desktop would be displayed instead.

The user can preferably switch the CDT at anytime through a system accessible menu item. shows a dialog window comprising a 3 part window . In one part a widget Contextual Desktops when selected displays a window of menu items. The items include a New item for creating a new contextual desktop a Work Desktop and Photo Desktop accessible on a Windows machine via the Contextual Desktops item in the Start Menu. The current CDT is preferably indicated in the list with a visual mark.

In a simple case referencing the application doesn t have to do anything to take advantage of the CDTS. In an embodiment when an open dialog is requested the system provides a resource that includes a left column of iconic buttons that will enable the user with one click to switch to the currently defined CDT. In this case the application can use the CDTs through this system supplied dialog. In a CDT aware application when requesting a dialog the application preferably sets the starting directory to the currently defined CDT. This requires an API in the operating system to return the currently defined CDT to the requesting application. In another embodiment the use of CDTs are enabled or disabled through a user interface widget . This preference can automatically switch to the CDT in the dialogs without the applications knowledge.

The system preferably monitors what the user is doing and provides guides to help reset the CDT to a new likely location. In another embodiment the system has its best guess of CDT stored in another location an Automatic Contextual Desktop ACDT . This ACDT is preferably based on the switching of applications and using the last known location used by an application. Preferably Labels or tooltips are used to help the user know where this new ACDT is so that it can be used without fear of misplacing the user s files.

The user can easily determine which actual folder is the current CDT through the start menu and the open and close dialogs.

While open and save dialogs have been shown as example applications of the CDT of the present invention other useful applications including but not limited to finding files file sharing and intra or inter application program communication would become apparent to one versed in the art having been taught the concepts of the present invention. Such applications would be consistent with the claims of the present invention.

Thus with the present invention an application program that knows CDTs has access to a CDT made current. Such an application provides the CDT list to the user when prompting the user to select folders indicating the current CDT to the user. The application may use a selected file in the CDT as a current file when saving or opening files. In an embodiment the CDT state is shared amongst applications such that they can cooperate in its use. For example a file of the current CDT in use may be known as the current file in use for multiple applications. Furthermore in an embodiment the desktop display may show other desktops without changing which CDT is current.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment of the invention has been illustrated and described herein it is to be understood that the invention is not limited to the precise construction herein disclosed and the right is reserved to all changes and modifications coming within the scope of the invention as defined in the appended claims.

