---

title: Setting operation based resource utilization thresholds for resource use by a process
abstract: An efficiency-based workload manager samples multiple actual resource use characteristics while a process executes, where the actual resource use characteristics designate a portion of a total amount of system resources available to the process that are utilized by the process at multiple times over a sampling period. Next, responsive to detecting the conclusion of the sampling period, the efficiency-based workload manager determines an operation based resource utilization threshold for the process based on a maximum resource use within the multiple samplings of actual resource use characteristics. Then, the efficiency-based workload manager stores the operation based resource utilization threshold for access by a workload manager, where the workload manager uses the operation based resource utilization threshold to restrict the process to resource use up to the operation based resource utilization threshold within an execution environment managed by the workload manager.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07793308&OS=07793308&RS=07793308
owner: International Business Machines Corporation
number: 07793308
owner_city: Armonk
owner_country: US
publication_date: 20050106
---
 1 U.S. patent application Ser. No. 11 031 490 filed Jan. 6 2005 with Rick Allen Hamilton II and James W. Seaman as common inventors.

The present invention relates in general to improved computer system resource optimization and in particular to setting operation based resource utilization thresholds for resource use by a process. Still more particularly the present invention relates to learning actual resource use by a process over a sampling period determining an operation based resource utilization threshold for resource use by the process and storing the operation based resource utilization threshold for access by workload managers controlling ongoing resource use by the process.

Most software applications and executable processes require system resources such as memory and processors for execution within a computer system or server system environment. In addition most processes will utilize all the available system resources unless restricted to use of a threshold amount of systems resources. Software applications in particular are typically designed to work on any hardware platform with a minimum amount of system resources available so that once the minimum system resource requirements are met the software application is not restrained on use of as much of the remaining system resources.

Responsive to processes that grab all the available system resources many software based system resource optimization tools have developed in an attempt to optimize the memory available. For example one software based memory management tool attempts to optimize memory availability and use by compressing unused portions of memory which are generally filled with zeros to provide the illusion that there is more memory available than the actual physical memory installed and enable an operating system to manage multiple running applications at one time. Compressing memory however is limited because if no additional memory exists then an application requesting additional memory is still memory constrained. Another software based memory management tool attempts to defragment memory to free up additional memory spaces by moving all the memory used by an application to a contiguous block. Defragmentation software however is also limited because defragmentation reduces application performance as content is moved around and even after defragmentation there may not be sufficient contiguous memory to meet the memory requirements of an additional application. Further both memory compression and memory defragmentation are memory optimization solutions that react to the memory use by processes such that memory grabbing by applications is only limited by the amount of memory available after compression or fragmentation.

Within a server system or other network based execution environment the problem of applications grabbing as many system resources as possible is amplified because the total amount of available resources is typically expanded to handle multiple simultaneously running processes. Thus server systems and other network based execution environments may implement a software based workload manager such as IBM s Workload Manager that caps utilization of resources by each process to a threshold limit. In particular rather than attempt to manage efficiency of resource use by a process the workload manager just monitors memory and CPU use by a process and places a cap on use if the process meets or exceeds memory and CPU limits. A limitation of workload managers and other resource use restriction managers is that these managers set the same standardized resource utilization thresholds to all processes regardless of the actual operational resource use by processes. This limitation of applying standardized resource utilization thresholds is particularly disadvantageous in a grid environment or other distributed resource environment where heterogeneous resources are managed by different workload managers but grouped to form an execution environment for a particular job and thus the actual resources available for execution of a process are distributed among multiple workload and optimization managers.

Therefore in view of the foregoing there is a need for a method system and program for learning the actual resource use of the total amount of system resources available by a process determining a operation based threshold of resource use for the process and teaching the process the operation based threshold so that workload managers apply operation based process specific thresholds when capping resource use by a process.

In view of the foregoing the present invention in general provides for improved computer system resource optimization and in particular to setting operation based resource utilization thresholds for resource use by a process. Still more particularly the present invention relates to learning actual resource use by a process over a sampling period determining an operation based resource utilization threshold for resource use by the process and storing the operation based resource utilization threshold for access by workload managers controlling ongoing resource use by the process.

According to one embodiment an efficiency based workload manager samples multiple actual resource use characteristics while a process executes where the actual resource use characteristics designate a portion of a total amount of system resources available to the process that are utilized by the process at multiple times over a sampling period. Next responsive to detecting the conclusion of the sampling period the efficiency based workload manager determines an operation based resource utilization threshold for the process based on a maximum resource use within the multiple samplings of actual resource use characteristics. Then the efficiency based workload manager stores the operation based resource utilization threshold for access by a workload manager where the workload manager uses the operation based resource utilization threshold to restrict the process to resource use up to the operation based resource utilization threshold within an execution environment managed by the workload manager.

The efficiency based workload manager also detects the total amount of system resources available to the process and calculates a standard limit based resource utilization threshold based on a standard limit applied to the total amount of system resources available to the process. Then during the sampling period the efficiency based workload manager restricts the process to use of the total amount of system resource capped by the standard limit based resource utilization threshold.

When the efficiency based workload manager stores the operation based resource utilization threshold in one embodiment the efficiency based workload manager calls an application programming interface API for the process to request storage of the efficiency based workload manager in a file accessible to the workload manager by calling the API with a request to access the operation based resource threshold. In another embodiment the efficiency based workload manager stores the operation based resource threshold for a process in a table accessible across a network of server systems to multiple workload managers including workload managers operating as grid services and workload managers operating at a hardware platform level.

Referring now to the drawings and in particular to there is depicted one embodiment of a computer system which may be implemented in a grid environment and in which the present invention may be implemented. As will be further described the grid environment includes multiple computer systems managed to provide resources. Additionally as will be further described the present invention may be executed in a variety of computer systems including a variety of computing systems mobile systems and electronic devices operating under a number of different operating systems managed within a grid environment.

In one embodiment computer system includes a bus or other device for communicating information within computer system and at least one processing device such as processor coupled to bus for processing information. Bus may include low latency and higher latency paths connected by bridges and adapters and controlled within computer system by multiple bus controllers. When implemented as a server system computer system typically includes multiple processors designed to improve network servicing power.

Processor may be a general purpose processor such as IBM s PowerPC processor that during normal operation processes data under the control of operating system and application software accessible from a dynamic storage device such as random access memory RAM and a static storage device such as Read Only Memory ROM . The operating system may provide a graphical user interface GUI to the user. In one embodiment application software contains machine executable instructions that when executed on processor carry out the operations depicted in the flowcharts of and other operations described herein. Alternatively the steps of the present invention might be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

The present invention may be provided as a computer program product included on a machine readable medium having stored thereon the machine executable instructions used to program computer system to perform a process according to the present invention. The term machine readable medium as used herein includes any medium that participates in providing instructions to processor or other components of computer system for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Common forms of non volatile media include for example a floppy disk a flexible disk a hard disk magnetic tape or any other magnetic medium a compact disc ROM CD ROM or any other optical medium punch cards or any other physical medium with patterns of holes a programmable ROM PROM an erasable PROM EPROM electrically EPROM EEPROM a flash memory any other memory chip or cartridge or any other medium from which computer system can read and which is suitable for storing instructions. In the present embodiment an example of a non volatile medium is mass storage device which as depicted is an internal component of computer system but will be understood to also be provided by an external device. Volatile media include dynamic memory such as RAM . Transmission media include coaxial cables copper wire or fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio frequency or infrared data communications.

Moreover the present invention may be downloaded as a computer program product wherein the program instructions may be transferred from a remote virtual resource such as a virtual resource to requesting computer system by way of data signals embodied in a carrier wave or other propagation medium via a network link e.g. a modem or network connection to a communications interface coupled to bus . Virtual resource may include a virtual representation of the resources accessible from a single system or systems wherein multiple systems may each be considered discrete sets of resources operating on independent platforms but coordinated as a virtual resource by a grid manager. Communications interface provides a two way data communications coupling to network link that may be connected for example to a local area network LAN wide area network WAN or an Internet Service Provider ISP that provide access to network . In particular network link may provide wired and or wireless network communications to one or more networks such as network through which use of virtual resources such as virtual resource is accessible as provided within a grid environment . Grid environment may be part of multiple types of networks including a peer to peer network or may be part of a single computer system such as computer system .

As one example network may refer to the worldwide collection of networks and gateways that use a particular protocol such as Transmission Control Protocol TCP and Internet Protocol IP to communicate with one another. Network uses electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information. It will be understood that alternate types of networks combinations of networks and infrastructures of networks may be implemented.

When implemented as a server system computer system typically includes multiple communication interfaces accessible via multiple peripheral component interconnect PCI bus bridges connected to an input output controller. In this manner computer system allows connections to multiple network computers.

Additionally although not depicted multiple peripheral components and internal external devices may be added to computer system connected to multiple controllers adapters and expansion slots coupled to one of the multiple levels of bus . For example a display device audio device keyboard or cursor control device may be added as a peripheral component.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. Furthermore those of ordinary skill in the art will appreciate that the depicted example is not meant to imply architectural limitations with respect to the present invention.

With reference now to a block diagram illustrates one embodiment of the general types of components within a grid environment. In the present example the components of a grid environment include a client system interfacing with a grid management system which interfaces with server clusters servers workstations and desktops data storage systems and networks . For purposes of illustration the network locations and types of networks connecting the components within grid environment are not depicted. It will be understood however that the components within grid environment may reside atop a network infrastructure architecture that may be implemented with multiple types of networks overlapping one another. Network infrastructure may range from multiple large enterprise systems to a peer to peer system to a single computer system. Further it will be understood that the components within grid environment are merely representations of the types of components within a grid environment. A grid environment may simply be encompassed in a single computer system or may encompass multiple enterprises of systems. In addition it will be understood that a grid vendor may provide grid environment where the grid vendor may calculate a cost for use of resources within grid environment based on the amount of time required for a grid job to execute or the actual amount of resources used for example.

The central goal of a grid environment such as grid environment is organization and delivery of resources from multiple discrete systems viewed as virtual resource . Client system server clusters servers workstations and desktops data storage systems networks and the systems creating grid management system may be heterogeneous and regionally distributed with independent management systems but enabled to exchange information resources and services through a grid infrastructure enabled by grid management system . Further server clusters servers workstations and desktops data storage systems and networks may be geographically distributed across countries and continents or locally accessible to one another. It will be understood that mechanisms for discovery of grid resources within virtual resource are not depicted herein however client system may discover the resources within virtual resource as advertised from local and global directories available within grid environment .

In the example client system interfaces with grid management system . Client system may represent any computing system sending requests to grid management system . In particular client system may send virtual job requests and jobs to grid management system and grid management system may respond with a grid offer and controls processing of grid jobs. Further while in the present embodiment client system is depicted as accessing grid environment with a request in alternate embodiments client system may also operate within grid environment .

While the systems within virtual resource are depicted in parallel in reality the systems may be part of a hierarchy of systems where some systems within virtual resource may be local to client system while other systems require access to external networks. Additionally it is important to note that client system may physically encompass the systems depicted within virtual resources .

To implement grid environment grid management system facilitates grid services. Grid services may be designed according to multiple architectures including but not limited to the Open Grid Services Architecture OGSA . In particular grid management system refers to the management environment which creates a grid by linking computing systems into a heterogeneous network environment characterized by sharing of resources through grid services.

In one example grid management system may include multiple grid modules that perform grid services such as an efficiency based workload tracking agent for receiving characteristics of the real time workload on virtual resources dividing the workload among current processes and sampling the workload for new processes over a sampling period. In addition the efficiency based workload tracking agent scans the samples for a new process to determine an operation based resource utilization threshold and stores the operation based resource utilization threshold so that other grid services can access the operation based resource utilization threshold and restrain the process to the threshold. Processes include but are not limited to a software application an individual executable process and a set of executable processes. A new process may include but is not limited to a newly detected process and a previously monitored process operating within a new execution environment.

Referring now to a block diagram illustrates one example of an architecture that may be implemented in a grid environment. As depicted an architecture includes multiple layers of functionality. As will be further described the present invention is a process which may be implemented in one or more layers of an architecture such as architecture which is implemented in a grid environment such as the grid environment described in . It is important to note that architecture is just one example of an architecture that may be implemented in a grid environment and in which the present invention may be implemented. Further it is important to note that multiple architectures may be implemented within a grid environment.

Within the layers of architecture first a physical and logical resources layer organizes the resources of the systems in the grid. Physical resources include but are not limited to servers storage media and networks. The logical resources virtualize and aggregate the physical layer into usable resources such as operating systems processing power memory I O processing file systems database managers directories memory managers and other resources.

Next a web services layer provides an interface between grid services and physical and logical resources . Web services layer implements service interfaces including but not limited to Web Services Description Language WSDL Simple Object Access Protocol SOAP and extensible mark up language XML executing atop an Internet Protocol IP or other network transport layer. Further the Open Grid Services Infrastructure OSGI standard builds on top of current web services by extending web services to provide capabilities for dynamic and manageable Web services required to model the resources of the grid. In particular by implementing OGSI standard with web services grid services designed using OGSA are interoperable. In alternate embodiments other infrastructures or additional infrastructures may be implemented a top web services layer .

Grid services layer includes multiple services that perform the functions described with reference to grid management system . For example grid services layer may include grid services designed using OGSA such that a uniform standard is implemented in creating grid services. Alternatively grid services may be designed under multiple architectures. Grid services can be grouped into four main functions. It will be understood however that other functions may be performed by grid services.

First a resource management service manages the use of the physical and logical resources. Resources may include but are not limited to processing resources memory resources and storage resources. Management of these resources includes scheduling jobs distributing jobs and managing the retrieval of the results for jobs. Resource management service monitors resource loads and distributes jobs to less busy parts of the grid to balance resource loads and absorb unexpected peaks of activity. In particular a user may specify preferred performance levels so that resource management service distributes jobs to maintain the preferred performance levels within the grid.

Second information services manages the information transfer and communication between computing systems within the grid. Since multiple communication protocols may be implemented information services manages communications across multiple networks utilizing multiple types of communication protocols.

Third a data management service manages data transfer and storage within the grid. In particular data management service may move data to nodes within the grid where a job requiring the data will execute. A particular type of transfer protocol such as Grid File Transfer Protocol GridFTP may be implemented.

Finally a security service applies a security protocol for security at the connection layers of each of the systems operating within the grid. Security service may implement security protocols such as Open Secure Socket Layers SSL to provide secure transmissions. Further security service may provide a single sign on mechanism so that once a user is authenticated a proxy certificate is created and used when performing actions within the grid for the user.

Multiple services may work together to provide several key functions of a grid computing system. In a first example computational tasks are distributed within a grid. Data management service may divide up a computation task into separate grid services requests of packets of data that are then distributed by and managed by resource management service . The results are collected and consolidated by data management system . In a second example the storage resources across multiple computing systems in the grid are viewed as a single virtual data storage system managed by data management service and monitored by resource management service .

An applications layer includes applications that use one or more of the grid services available in grid services layer . Advantageously applications interface with the physical and logical resources via grid services layer and web services such that multiple heterogeneous systems can interact and interoperate.

With reference now to there is depicted a block diagram of an instances of a grid manager managing multiple resource nodes within a grid environment in accordance with the method system and program of the present invention. As illustrated a grid manager GM is a collection of grid services that manage multiple resource nodes and . Grid management system may include multiple GMs such as GM that individually manage selections of resource nodes from among the multiple resource nodes available in virtual resource .

In the example GM manages resource nodes and which are groupings of hardware resources not allocated for use by a specific software resource. In addition GM manages DB2EE resource nodes and which are allocated and loaded with DB2EE software for processing database requirements of grid jobs.

DB2EE resource node includes memory resources and CPU resources . DB2EE resource node includes memory resources and CPU resources . It will be understood that for a resource node to support a particular type of software resource the resource node will include a minimum amount of memory and CPU resources to support the software resource however that more than the minimum amount of memory and CPU resource may be available on a hardware platform. Further it will be understood that other resources such as network and other grid designated resources may also be included in a resource node even though the examples depicted throughout show the utilization of memory and CPU resources.

Although not depicted the resource nodes such as DB2EE resource node may include multiple hardware platforms. Each hardware platform supports at least one operating system. Within the operating system software based workload managers may manage the utilization of resources by processes on the hardware platform or across multiple hardware platforms. In one embodiment software based workload managers at the hardware platform level may call an application programming interface for a process to access the resource utilization thresholds set for the process. In addition software based workload managers at the hardware platform level may be passed the resource utilization thresholds from a grid service managing the hardware platforms within grid environment .

In one embodiment GM includes grid services that enable GM to detect the total resources designated for each of resource nodes and and to cap use of the total resources at a standardized threshold for a temporary period of time. For example the DB2EE software resource may include multiple processes or sets of processes the execution of which requires resources the amount of which is restricted to a standardized threshold. Without a cap on use of the total resources a process may attempt to take as much of each resource as is currently available even though it is not efficient to allow the process to utilize all available resources.

In addition in one embodiment GM includes grid services that enable GM to learn the actual resource use by a process and teach the process about actual resource use within an execution environment resource node or other grouping of resources. As will be further described the grid service may teach the process or the grid environment about actual resource use by the process so that other grid workload managers or hardware platform level workload managers can cap use of resources by the process according to the operation based resource utilization thresholds rather than just according to standardized thresholds applied arbitrarily to processes.

Referring now to there is depicted a block diagram of a grid management system for managing a grid environment in accordance with the method system and program of the present invention. In the example grid management system includes multiple grid modules that provide grid services and store data for access across grid environment . It is important to note that the grid modules described in grid management system may be distributed among multiple grid managers within grid environment such as GM described in .

As depicted grid management system includes a resource allocation controller . Resource allocation controller determines and allocates resources to build an execution environment for use by an incoming grid job received by grid management system . In particular resource allocation controller may build a resource node or a grouping of resource nodes to handle a particular grid job within grid environment . As described with reference to a resource node may include at least a portion of at least one hardware platform running a particular process atop an operating system. Further resource allocation controller may allocate already built resource nodes running the software resources required to process the incoming grid job.

Next a job router within grid management system controls routing of the job to the allocated selections of resource nodes. In one example a grid job may include a batch of jobs that job router distributes across a selection of resource nodes operating in parallel to handle the batch of jobs.

A workload tracker tracks the actual resource use of each resource within grid environment . A grid workload manager receives the actual resource use of each resource and matches the real time workload use characteristics with the processes currently running to determine the resource use by each process.

An efficiency based workload manager EBWLM accesses the workload use characteristics of a process using resources within grid environment when EBWLM determines that the process is new. EBWLM determines the total amount of resources within the execution environment of the new process and sets standard based resource utilization thresholds for capping use of the total amount of resources by the new process. In one embodiment EBWLM detects the total amount of resources from workload tracker resource allocation controller or another grid service enabled to detect total resource availability.

Next EBWLM restricts the new process to resource use within the execution environment based on the standard based resource utilization thresholds. In addition EBWLM learns about the actual resource use of the process by recording samplings of the workload use characteristics over time. EBWLM then determines operation based resource utilization thresholds for resource use by the new process and teaches the new process or grid management system about the operation based resource utilization thresholds for resource use.

In one example EBWLM maintains resource utilizations thresholds for processes in resource utilization tables . Resource utilization tables are accessible to multiple workload management modules within grid management system . For example grid workload manager manages resource use by grid jobs operating within grid environment to only utilize an allocated amount of resources within grid environment .

In one embodiment grid environment includes multiple instances of grid workload manager where each instance manages a geographically disparate grouping of resources within grid environment . Each of the instances of grid workload manager would access resource utilization tables to determine what resource utilization thresholds are set for the process. Then each instance of grid workload manager would restrict process resource use to the resource utilization thresholds.

In another embodiment hardware platforms or server groupings within grid environment may include workload managers that manage the utilization of resources within the hardware platform or server grouping. The local workload managers may communicate with grid management system to access resource utilization tables .

In yet another embodiment as described further with reference to when EBWLM updates a resource utilization threshold for a process EBWLM calls the application programming interface API of a process to update the process with the resource utilization thresholds. Then any resource optimizer can call the API with a request for the resource utilization thresholds for a process.

In yet a further embodiment a process may monitor its own resource use and restrict itself to the resource utilization thresholds set by EBWLM . In particular a process may access its resource use from a workload tracking service such as workload tracker and adjust allocations for resource use within the process based on whether the current resource use exceeds the operation based resource utilization thresholds set by EBWLM .

In addition it will be understood that grid workload manager may include additional tools that focus on compressing and defragmenting memory to attempt to maximize the total available memory in grid environment . Further a particular hardware platform may include software tools that compress and defragment memory to attempt to maximize the total available memory in the hardware platform.

With reference now to there is depicted a block diagram of the components of an efficiency based workload manager EBWLM for learning resource use by a process and teaching the process thresholds for actual operation based use that are then available for regulating resource use by the process.

As illustrated EBWLM includes limits for new processes . Limits for new processes designates the standard resource limits for resource use by processes. The limit may be specified according to type of process type of resources type of hardware platform and other specifications that effect resource use. Limits for new processes may be configured by a system administrator or configured based on the operating characteristics of a hardware platform over time.

In addition EBWLM includes a learning controller . When learning controller detects a new process operating within an execution environment or hardware platform managed by EBWLM learning controller sets standardized thresholds for resource use by the process. In particular learning controller detects the total resource available within the execution environment of the process and applies limits for new process to determine the standard limit based resource utilization thresholds.

Next learning controller temporarily manages utilization of resources by the process while sampling resource use over the temporary time period. Actual resource use samples are stored in resource use sample database .

Learning controller then determines an operation based resource utilization threshold for the new process from the use samples by identifying the largest operational use of each resource during the sampling period. Advantageously a sampling period is set to a length sufficient to detect operational variances is resource use by a process and detect an effective operation based resource utilization threshold for each type of resource.

In addition EBWLM includes a teaching controller that teaches the new process the operation based resource utilization thresholds determined by learning controller . In particular the teaching controller teaches a resource utilization state table for the process what the operation based resource use limits for the process are within the particular execution environment. In one example resource utilization tables are updated with the operation based resource utilization thresholds for use by grid workload manager to manage the resource use of each process. In another example as will be further described with reference to teaching controller may call an application programming interface API for a process to update the resource utilization state table associated with the process.

A current processes table within EBWLM is updated with the process and execution environment in which the process was monitored one teaching controller finishes teaching the operation based resource utilization thresholds. Then learning controller can refer to current processes table to determine whether a process requesting resource use is a new process. A new process may include but is not limited to a newly loaded process and a process that was previously monitored in a different execution environment.

In the embodiment depicted EBWLM only manages and caps the resource use by a new process during the time that learning controller samples actual operational use by the process and teaching controller teaches the process or a workload manager for an execution environment about the operation based resource utilization thresholds for the process. However in alternate embodiments EBWLM may continue to manage and cap resource use by the new process after teaching controller determines the operation based resource utilization thresholds for the process.

Referring now to there is depicted a block diagram of a process with a resource utilization state table that designates the thresholds for resource use by the process in accordance with the method system and program of the present invention. As depicted a process includes a process application programming interface API and a resource utilization state table in addition to the other executable files that a process requires not depicted . In the example EBWLM can call process API to update resource utilization state table with resource utilization thresholds. In addition EBWLM and other workload managers can also call API to access the data stored in resource utilization state table . In particular EBWLM and other workload managers that manage the amount of resources that a process can access while executing can call API to access the current thresholds set in resource utilization state table and hold process to the current thresholds.

In one embodiment standard limit based resource utilization thresholds are stored in resource utilization state table while EBWLM learns about actual resource use by process . Once EBWLM finishes learning about actual resource use by process EBWLM determines the operation based resource utilization thresholds for the process operating within a particular execution environment and calls process API to update resource utilization state table with the operation based resource utilization thresholds.

With reference now to there is depicted a high level logic flowchart of a process and program for learning about process requirements for resources within a particular execution environment and teaching the process threshold resource requirements in accordance with the method system and program of the present invention. As depicted the process starts at block and thereafter proceeds to block . Block starts the learning process for the efficiency based workload manager. Block depicts a determination whether the efficiency based workload manager detects a new process. When the efficiency based workload manager detects a new process then the process passes to block . In an example that is carried throughout the description of the flowchart process as illustrated at reference numeral a new process is detected.

Block depicts determining the total amount of CPU and memory resources available. In one embodiment within a grid environment the total amount of CPU and memory resources available may be within a particular execution environment available for the new process. In another embodiment within a partitioned server environment the total amount of CPU and memory resources available may be within a particular partition within the server environment. In the example as illustrated at reference numeral there are 8 CPUs available in parallel and 1 GB of memory available.

Next block depicts accessing the standard resource limits set for new processes. In the example as depicted at reference numeral the standard resource limits set for new processes are 50 of the total CPUs available and a fourth of the total memory available. In one embodiment the efficiency based workload manager manages multiple execution environments within a grid environment where standard resources limits for new processes or sets of processes are set according to execution environment and set according to type of process.

Thereafter block depicts calculating the threshold amount of CPU and memory resources available to the new process based on the standard resource limits set for new processes and the calculated total resources available. In the example as depicted at reference numeral the resource limits set for process based on the standard resource limits for new processes are 50 of the 8 CPUs in parallel and 256 MB of memory.

Next block depicts updating the resource utilization state table for the new process with the threshold amounts of CPU and memory resources calculated for the new process. In the example as depicted at reference numeral the standard limit based resource utilization thresholds calculated for process are 50 of the CPUs and 256 MB that are transferred as illustrated at reference numeral to the resource utilization state table for process .

Thereafter block depicts monitoring actual resource use for the new process as it executes. Next block illustrates a determination whether resource use exceeds the standard limit based resource utilization thresholds for the new process. If resource use does not exceed the standard limit based resource utilization thresholds then the process passes to block . If resource use does exceed the standard limit based resource utilization thresholds then the process passes to block . Block depicts restricting the new process to only the resources available within the limits and the process passes to block .

Block illustrates sampling the actual resource use by the new process at period time intervals. In the example as depicted at reference numerals and samplings of resource use are taken at times T T and T . In the example the sampling at T indicates the new process using 45 of the CPU availability and 100 MB of memory at T using 12 of the CPU availability and 50 MB of memory and at T using 30 of the CPU availability and 118 MB of memory.

Thereafter block depicts a determination whether the sampling period is over. If the sampling period is not over then the process returns to block . If the sampling period is over then the process passes to block . In particular a configurable sampling time may be specified for use by the efficiency based workload manager. For example the configurable sampling time may specify the taking of a sample every minute for five minutes. It will be understood that the sampling period should be short so that the efficiency based workload manager only needs to restrict resource use by the new process for a period of time sufficient to learn the actual how the process actually operates.

Next block illustrates comparing the samples to determine operation based resource utilization thresholds for resource use by the new process. In the example as illustrated at reference numeral the operation based resource utilization thresholds indicate a CPU threshold level of 45 of CPU availability and a memory threshold level of 118 MB of memory.

Thereafter block depicts updating the resource utilization state table for the new process with the operation based resource utilization thresholds and the process ends. In the example as depicted at reference numeral the operation based resource utilization thresholds are updated as depicted at reference numeral within the resource utilization state table for process . In one embodiment the efficiency based workload manager calls an application programming interface for the process to control storage of the operation based resource utilization thresholds in the resource utilization state table for the process. Then other workload managers can access the resource utilization state table to determine the resource thresholds for the process and to constrain the process to the resource thresholds. In addition within a grid environment operation based resource utilization thresholds may be stored in a location accessible to the workload manager for the grid environment.

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

