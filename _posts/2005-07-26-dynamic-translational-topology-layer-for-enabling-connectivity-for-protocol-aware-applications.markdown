---

title: Dynamic translational topology layer for enabling connectivity for protocol aware applications
abstract: A method for enabling connectivity for protocol aware applications across different network topologies can include receiving frames passing between a first network having a first network topology and a second network having a second network topology; inspecting an incoming one of the frames to identify a remote resource in the second network and a device identifier corresponding to the remote resource, and an outgoing one of the frames to identify a socket assigned to a local resource in the first network and a device identifier for the local resource corresponding to the socket; and, transmitting data from a protocol-aware application in the first network to the remote resource in the second network in a protocol consistent with the second network topology, and further transmitting data from the remote resource in the second network to the protocol-aware application in the first network in a protocol consistent with the first network topology.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07924873&OS=07924873&RS=07924873
owner: International Business Machines Corporation
number: 07924873
owner_city: Armonk
owner_country: US
publication_date: 20050726
---
The present invention relates to protocol aware applications and more particularly to enabling connectivity for protocol aware applications.

Protocol aware applications are applications which are configured for operation in a computing environment utilizing a specific communications protocol for exchanging information. In the prototypical example a protocol aware application is one that communicates with resources and other applications in a computing environment using a pre established communications protocol. In consequence a tight coupling can be achieved between the application and low level communications services in the computing environment. In this regard data exchanged between remote connections can be formatted specifically for the known protocol according to the program code of the application.

Protocol aware applications thrived for years in the pre Internet era of the sessions based inter process communications of which the Systems Network Architecture SNA is representative. In SNA clusters of computing resources can be communicatively linked for interoperability utilizing token ring network technologies. A protocol aware application common in SNA included a network control program NCP configured to route data according to the token ring protocol. Notwithstanding the advent of the Internet and the adoption of Ethernet and the transport control protocol Internet protocol TCP IP has given rise to a need to adapt legacy protocol aware applications to new protocols for different topologies.

It is desirable however to adapt protocol aware applications to new computing topologies without necessitating wholesale modifications to the protocol aware applications so as to preserve existing investments in computing technologies. For example routing applications for legacy mainframe systems maintain a close awareness of the underlying network topology in which the mainframe systems operate. Yet as legacy mainframe systems are incorporated in modern TCP IP network environments it remains desirable to leverage existing protocol aware applications like routing applications without requiring a complete recoding of the routing applications. In this way the routing applications can account for the different network topologies communicatively coupled to the routing applications without experiencing a complete recoding.

Embodiments of the present invention address deficiencies of the art in respect to protocol aware applications and provide a novel and non obvious method system and computer program product for enabling connectivity for protocol aware applications across different network topologies. In one embodiment a system for enabling connectivity for protocol aware applications across different network topologies can include a network device handler NDH configured for coupling to a protocol aware application configured for operation in a first network having a first network topology and a network device communicatively linked to a second network having a second different network topology. The system also can include first and second mappings.

The first mapping can include a mapping of devices for remote resources in the second network to the remote resources. To facilitate the mapping a link layer address can be used to identify the devices for example a media access control MAC address. The second mapping can include a mapping of link layer addresses for local resources to sockets for the local resources. Other non link layer means are available for the first and second mappings including mapping a channel control identifer CCID in an Open System Architecture OSA design to a socket and mapping each socket to a input output QDIO device where the NDH converts QDIO frames to the channel data link control CDLC format.

In any event the NDH can include program code enabled to utilize the second mapping to receive data from the protocol aware application for transmission through the network device to selected remote resources in the second network in a protocol consistent with the first network topology. Likewise the NDH further can include program code enabled to utilize the first mapping to receive data from the remote resources in the second network through the network device for transmission to the protocol aware application in a protocol consistent with the first network topology.

Optionally the NDH can be disposed in an operating system kernel in a host computing platform. Alternatively the NDH can be disposed in an operating system kernel in a logical partition in a host computing platform. In either case the first network topology can be a ring topology utilizing the Token Ring protocol while the second network topology can be a bus topology utilizing the Ethernet protocol. Finally the NDH can be configured for coupling to multiple protocol aware applications. Each of the protocol aware applications can be configured for operation in the first network having the first network topology.

In a second embodiment a method for enabling connectivity for protocol aware applications across different network topologies can include receiving frames passing between a first network having a first network topology and a second network having a second network topology. The method further can include inspecting an incoming one of the frames to identify a remote resource in the second network and a device identifier corresponding to the remote resource and an outgoing one of the frames to identify a socket assigned to a local resource in the first network and a identifier for the local resource corresponding to the socket. Finally the method can include transmitting data from a protocol aware application in the first network to the remote resource in the second network in a protocol consistent with the second network topology and further transmitting data from the remote resource in the second network to the protocol aware application in the first network in a protocol consistent with the first network topology.

Additional aspects of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Embodiments of the present invention provide a method system and computer program product for enabling connectivity for protocol aware applications. In accordance with an embodiment of the present invention a network device handler can be coupled to one or more networks having one or more different network topologies. The network device handler can identify from incoming and outgoing frames the device identifier for remote nodes and local nodes respectively. The network device handler further can identify from the incoming and outgoing frames the real device associated with each device identifier for each remote node and also the socket associated with each device identifier for each local node. Subsequently the network device handler can properly route data traffic between communicatively coupled protocol aware applications and the remote nodes without requiring a code change in the protocol aware applications.

In further illustration of an embodiment of the invention is a schematic illustration of a system for enabling connectivity for protocol aware applications across different network topologies. As shown in a host computing platform such as a server or logical partition can be coupled to other computing platforms in a first network having a first network topology such as the token ring network topology. The host computing platform can include an operating system having an operating system kernel . One or more protocol aware applications can execute in the operating system and can share data and access resources in the other computing platforms in the first network.

Notably the host computing platform can include a network adapter or network device through which the host computing platform can be coupled to other computing platforms in a different second network having a different second network topology. To enable inter enterprise networking between both disparate networks the host computing platform can include an NDH and a set of mappings . Both the NDH and the set of mappings can enable the sharing of data with the second network without requiring modifications to the protocol aware applications .

Specifically the NDH can be configured to register with the host computing platform to receive frames passing through the network device . The NDH can inspect incoming ones of the frames to identify available remote resources in the second network and corresponding device identifiers for the available remote resources such as a link layer address for the available remote resources including a MAC address. Additionally the NDH can inspect outgoing ones of the frames to identify local resources in the first network and corresponding device identifiers for the local resources. Furthermore assigned sockets associated with the local resources can be identified. As the NDH identifies pairs of available resources and corresponding device identifiers a mapping of the pairs can be updated. Likewise as the NDH identifies pairs of local resources and assigned sockets a mapping of the pairs can be updated.

The NDH can provide a direct socket application programming interface for the protocol aware applications through which the protocol aware applications can connect to receive frames in a protocol consistent with the first network topology. In this regard utilizing the updated mappings the NDH can translate incoming frames from a protocol consistent with the network topology of the second network into a protocol recognized by the protocol aware applications which can be consistent with the network topology of the first network. Similarly the NDH can translate outgoing frames from a protocol recognized by the protocol aware applications which can be consistent with the network topology of the first network into a protocol consistent with the network topology of the second network . In this way the protocol aware applications can interoperate with remote resources in the second network without requiring wholesale modifications to the protocol aware applications .

In more particular illustration is a flow chart illustrating a process for enabling connectivity for protocol aware applications across different network topologies. Beginning in block the host computing platform can be queried to determine the number protocol type and access methods for all locally available resources. In block a registration process within the host platform can be invoked in order to receive a copy of every frame received over the available devices. In block A inbound frames can be interrogated to produce a remote MAC address to remote resource table in block A to facilitate routing of outbound frames. Likewise in block B outbound frames can be interrogated to produce a local MAC address to socket assigned to local resource table in block B to facilitate routing of inbound frames to a proper socket.

In block a network protocol specification can be received from a protocol aware application. Subsequently in block inbound frames can be translated into the specified protocol and routed to the proper socket. Conversely outbound frames can be translated from the specified protocol and routed to the proper remote resource. Yet the protocol aware application can remain unaware of the number and type of real interfaces in the second network and no code changes are required in the protocol aware applications.

Embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

