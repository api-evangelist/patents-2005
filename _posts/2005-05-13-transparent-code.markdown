---

title: Transparent code
abstract: Assertions for elevated privilege associated with transparent code may be ignored, prohibited, or modified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08555061&OS=08555061&RS=08555061
owner: Microsoft Corporation
number: 08555061
owner_city: Redmond
owner_country: US
publication_date: 20050513
---
The following description is directed to implementations for transparent code security enforcement in a secure execution environment. More particularly the description and claims as well as the accompanying figures pertain to transparent code which may be regarded as code for which elevation of privilege operations may not be honored.

The aforementioned secure execution environment may include a managed execution environment which may be alternatively referred to as a runtime environment. A managed execution environment may provide routines for at least portions of application programs to be executed properly in an operating system because application programs require another software system in order to execute. Thus at least a portion of an application program may call one or more managed execution environment routines which reside between the application program and the operating system and the managed execution environment routines may call the appropriate operating system routines.

Examples of managed execution environments include but are not limited to Visual Basic runtime environment Java Virtual Machine JVM runtime environment that is used to run e.g. Java routines and Common Language Runtime CLR to compile e.g. Microsoft.NET applications into machine language before executing a calling routine.

Client device may be at least one of a variety of conventional computing devices including a desktop personal computer PC workstation mainframe computer Internet appliance set top box and gaming console. Further client device may be at least one of any device that is capable of being associated with network by a wired and or wireless link including a personal digital assistant PDA laptop computer cellular telephone etc. Further still client device may represent the client devices described above in various quantities and or combinations thereof. Other device may also be embodied by any of the above examples of client device .

Server device may provide any of a variety of data and or functionality to client device or other device . The data may be publicly available or alternatively restricted e.g. restricted to only certain users or only if an appropriate subscription or licensing fee is paid. Server device may be at least one of a network server an application server a web blade server or any combination thereof. Typically server device may be any device that is the source of content and client device may be any device that receives such content either via network or in an off line manner. However according to the example embodiments described herein server device and client device may interchangeably be a sending host or a receiving host. Other device may also be embodied by any of the above examples of server device .

 Other device may further be any device that is capable of implementing transparent code security enforcement according to any of the examples described herein as part of at least one of an application program function or other assemblage of programmable and executable code in either of a managed execution environment or a testing environment. Thus other device may be a computing or processing device having an interpreter converter compiler operating system or managed execution environment implemented thereon. These examples are not intended to be limiting in any way and therefore should not be construed in such manner.

Network may represent any of a variety of conventional network topologies which may include any wired and or wireless network. Network may further utilize any of a variety of conventional network protocols including public and or proprietary protocols. For example network may include the Internet an intranet or at least portions of one or more local area networks LANs .

Data source may represent any one of a variety of conventional computing devices including a desktop personal computer PC that is capable of transparent code identification or generation for an application program function or other assemblage of programmable and executable code and that is further capable of identifying transparent code for any of the aforementioned application program function or other assemblage of programmable and executable code. Alternatively data source may also be any one of a workstation mainframe computer Internet appliance set top box gaming console personal digital assistant PDA laptop computer cellular telephone etc. that is capable of transmitting at least a portion of an application program or function to another work station. Further data source need not necessarily be a source of transparent code associated with an application program or function but rather data source is at least the source of an expression of transparent code identification. Regardless of the embodiment the transparent code identification or expression thereof may be transmitted from data source to any of devices and as part of an on line notification via network or as part of an off line notification.

Transparent code as described herein includes at least a portion of any of an application program function or other assemblage of programmable and executable code for which an associated operation may be executed on any one of devices and . According to at least one example implementation transparent code may be submitted for execution in a managed execution environment on any one of devices and .

In the description of system various operations are described as being performed by modules and . It should be understood that the various operations that are described with respect to a particular one of these modules may be implemented by a module itself by a combination of two or more of the modules or by a module in cooperation with the execution environment in which the module is included or associated. Further the operations described herein may be implemented as processor executable instructions that are embodied in one or more forms of computer readable media. Further still these operations may be implemented as hardware firmware or some combination of hardware firmware and software either as a part of or in some other way associated with the execution environment in which the respective operation is included or associated.

Code may be regarded as transparent code which comprises at least a portion of an application program function or other assemblage of programmable and executable code. Code may be regarded as transparent to denote the security transparent nature of the code. More specifically transparent code may be prohibited or limited to a certain extent from elevating a privilege for an operation that may be associated with code . One of many motivations for such prohibition or limitation is because such an elevation of privilege may expose security sensitive resources associated with at least a portion of code to un trusted callers. Therefore there are permissions that if associated with at least a portion of code may prevent code from being considered transparent. 

Elevation of privilege operations may be associated with a security model or policy that may assign permissions to one or more assemblies of code based on evidence within a respective assembly. Such security model or policy may allow various assemblies of code to be executed on different trust levels within a common application domain. For example in a managed execution environment an assembly that is installed locally on any of devices and see may be granted full trust status and therefore subject to maximal security auditing. On the other hand an assembly loaded into the secure execution environment from the internet or otherwise acquired from an unknown or untrusted source may be granted a less than full trust status and therefore may not be subject to a security audit. Thus in response to a function call an API application programming interface that exposes protected functionality may initiate a security demand to check all callers on the corresponding stack. According to such security models or policies that assign permissions to one or more assemblies a security demand may be satisfied by a privilege elevation asserted by the code.

Detector may be regarded as a module to receive code and to further detect a permission that has been accorded to code . Alternatively detector may be a module to determine a security policy under which an operation associated with at least a portion of code may be executed. More particularly if code is determined to be transparent code or one or more operations associated with at least a portion of code is to be executed under a transparent code security model or policy detector is to further determine which if any privilege elevation operations may be associated with code .

Enforcer may be regarded as a module to implement security procedures upon at least a portion of code according to the permissions accorded to at least one portion of code or the security policy under which at least a portion of code is to be executed.

More particularly if detector determines that at least a portion of code is transparent code enforcer may prepare at least a portion of code for execution by executor . Such portion of code may be prepared for execution under the guidance of the following policies for transparent code security implementation.

First enforcer may permit at least a portion of code to be executed by executor in accordance with the elevated privilege expressed or otherwise associated with at least a portion of code . That is if at least a portion of code is expressly noted as not being transparent or otherwise exempted from transparent code security enforcement execution of an operation associated with one or more portions of code in accordance with the asserted elevated privilege may be permitted. Alternatively if at least a portion of code is transparent execution of an operation associated with one or more portions of code in accordance with the asserted elevated privilege may also be permitted if at the time of execution the operation associated with the one or more portions of code is currently being executed by a caller that is allowed to execute the aforementioned operation in accordance with the asserted privilege. If the caller is also transparent then recursively callers for the caller may be checked to determine whether the aforementioned operation is in accordance with the asserted privilege.

Second enforcer may ignore the outright assertion of elevated privilege but then permit an operation associated with one or more portions of code to be executed by executor in accordance with the elevated privilege if enforcer is able to transform the operation for which the elevated privilege is asserted into a safe variant that is appropriate for the security model and the secure execution environment.

Third enforcer may ignore prohibit or otherwise limit execution of an operation associated with one or more portions of code for which the elevated privilege is asserted. Such policy may be enforced for example when a security model for the secure execution environment i.e. transparent code security implementation prohibits transparent code from performing an associated operation entirely if a transparent portion of code that is to be executed by a caller is prohibited from doing so in accordance with the security model the operation may not be transformed into a safe variant or a transformed safe variant throws an exception thus denying the operation for which the elevated privilege is asserted.

Executor may be regarded as a module to execute code modify code or prohibit execution of an operation associated with one or more portions of code in accordance with the security procedures implemented by enforcer .

Even more particularly enforcer may detect an asserted elevation of privilege for at least one operation associated with at least a portion of code and implement a correspondingly appropriate security procedure for enforcement by executor . Non limiting examples of such assertions for elevating privilege as detected by detector and examples of such appropriate security procedures as implemented by enforcer are as follows.

Detector may detect an attempt by code to explicitly assert an elevated privilege for one or more operations associated therewith. Enforcer as part of a security model or policy or on a per process basis may prohibit an operation associated with a transparent portion of code from executing. Alternatively enforcer may ignore an operation associated with a transparent portion of code thereby throwing an exception. Further still enforcer may enable an operation associated with a transparent portion of code to be expressed and therefore executed safely if the calling methods for the transparent portion of code are allowed to perform the privileged operation. If the calling method is transparent then recursively callers for the caller may be checked to determine whether the callers are permitted to perform the privileged operation.

Detector may further detect an attempt by code to assert an elevated privilege for one or more operations associated therewith by requiring one or more link time security checks to be performed on immediate callers of code . Enforcer as part of a security model or policy or on a per process basis may insert a runtime check to perform a stackwalk into code that may satisfy the link demand may prohibit an operation associated with one or more portions of code from calling a method decorated with such a link demand or alternatively may enable the operation to be expressed safely by allowing an operation associated with one or more portions of code to conditionally call a method decorated with such a link demand if the calling methods are allowed to perform the privileged operation.

Detector may also detect an attempt by code to assert an elevated privilege by accessing private or internal managed code within the same assembly by exploiting the fact that only public critical code may be considered to be safe for access from non privileged code. Enforcer as part of a security model or policy or on a per process basis may prohibit an operation associated with one or more portions of code from calling non public managed code. Further enforcer may allow a transparent portion of code to access non public managed code that is marked with a special attribute. Alternatively enforcer may allow an operation associated with one or more portions of code to conditionally call non public methods if corresponding callers are privileged to access the non public methods.

Detector may also detect an attempt by code to assert an elevated privilege if unverifiable code is contained therein. Enforcer as part of a security model or policy or on a per process basis may prohibit an operation associated with one or more portions of code that is unverifiable from executing. Alternatively enforcer may ignore an operation associated with a transparent portion of code that is unverifiable thereby throwing an exception. Further still enforcer may enable an operation associated with a transparent portion of code that is unverifiable to be expressed and therefore executed safely if the calling methods for the transparent portion of code are allowed to perform the privileged operation.

Detector may further detect an attempt by code to assert an elevated privilege as code is generated and executed in a real time manner i.e. on the fly . Code that is generated and executed in such manner may be treated as arbitrary sets of bytes of code that is freely executed. Enforcer as part of a security model or policy or on a per process basis may prohibit an operation associated with a portion of code that is generated on the fly from executing. Alternatively enforcer may treat all code that is generated on the fly as being transparent and therefore prohibit all operations associated with a transparent portion of code from executing. Further still enforcer may enable an operation associated with a transparent portion of code that is generated on the fly to be expressed and therefore executed safely if the calling methods for the transparent portion of code are allowed to perform the privileged operation.

As shown by the non limiting examples described above operations for which an elevated privilege is asserted may be expressed and therefore executed safely if the corresponding calling methods are also allowed to perform the privileged operation. The privileges accorded to the calling methods may be revealed by a stack trace for code . A stack trace may refer to a sequence of frames on a call stack which may refer to a reserved portion of memory that tracks a sequence of methods called in an application or program to which code is associated. More particularly a stack trace may refer to a reserved amount of memory that tracks a sequence of functions methods or other portions of executable code called in an application or program. Each frame of a call stack may refer to at least one of a function method routine instruction pointer and register value that have been pushed on the call stack.

Further the exceptions referred to in the description pertaining to relate to unanticipated or undesired conditions resulting from execution environment routines or subroutines that are injected into at least a portion of code . Non limiting examples of such exceptions include but are not limited to resource failures such as a thread abort condition a stack overflow condition or an out of memory condition. A thread abort condition is a call to abort a thread in which code is being executed. An out of memory condition may result if the execution of an execution environment routine or subroutine within a designated portion of code requires amounts of hardware memory or virtual memory that are not compatible with other processes and therefore such memory allocations may not be accommodated. A stack overflow condition may result if the execution of the runtime environment routine or subroutine within the designated portion of code requires more hardware memory or virtual memory than is available on a stack. Alternatively a stack overflow condition may occur as a result of an execution environment routine or subroutine that has an infinite recursion or a level of method calls that extends beyond a predetermined threshold level.

Block may refer to code being loaded into execution environment . Execution environment may be a managed execution environment i.e. runtime environment that may provide routines for an operation associated with one or more portions of code to be executed properly in an operating system. As stated above non limiting examples of execution environment include but are not limited to Visual Basic runtime environment Java Virtual Machine JVM and Common Language Runtime CLR .

Decision may refer to detector detecting whether an operation associated with one or more portions of code is permitted to be executed.

Positive decision advances processing flow to block at which the permitted operation associated with code may be executed.

Decision subsequent to negative decision may refer to detector determining if an operation associated with one or more portions of code may be considered security critical. That is as part of a security model or policy or on a per process basis if detector detects that calls made to at least a portion of code are to be verified as permissible before execution thereof code may be deemed security critical. 

Positive decision may advance processing flow to block at which at least a portion of code may be subject to a security audit. The security audit may utilize known auditing implementations and thus a description thereof is not included here.

Decision may refer to auditor determining whether or not the security audit at block was passed by the tested portion of code . Positive decision may advance processing flow to block at which the permitted operation associated with code may be executed. Negative decision may advance processing flow to block at which an exception may be thrown within execution environment .

Decision may refer to detector determining whether an assertion is made to elevate a permission to execute an operation associated with one or more portions of code . Negative decision may advance processing flow to block at which an exception may be thrown within execution environment .

Thus the transparent nature of at least a portion of code may be declared as part of a default security model or policy. Thus any detection of an attempt to assert an elevated privilege i.e. decision a stack trace may be implemented for any code loaded into execution environment to determine whether or not one or more associated calling methods have the permission sought by the loaded code.

Alternatively the transparent nature of at least a portion of code may be revealed as part of a security model or policy or on a per process basis as a result of negative decisions and . That is if an operation associated with at least a portion of code is not permitted negative decision and a call made to at least the aforementioned portion of code is not required to be verified before being executed negative decision an inference may be made that at least a portion of code is transparent. In particular an operation associated with at least a portion of code may be disallowed or prohibited from being executed unless a stack trace reveals that one or more associated calling methods have the permission sought by code .

Block subsequent to positive decision may refer to enforcer accessing memory to perform a stack trace for code . That is enforcer may enable an operation associated with a transparent portion of code to either be expressed or executed safely if calling methods for the transparent portion of code are allowed to perform the operation for which elevated permission has been asserted. Thus a call stack corresponding to at least a portion of code may be traced to determine the permissions corresponding to one or more methods that call at least a transparent portion of code .

Decision may refer to enforcer determining whether an operation associated with one or more portions of code may be expressed or executed safely as a result of the stack trace performed at block . Positive decision may advance processing flow to block at which the permitted operation associated with code may be executed. Negative decision may advance processing flow to block at which an exception may be thrown within execution environment .

Whether as part of a security model or policy or on a per process basis transparent code security enforcement see may be implemented at various stages of execution within execution environment .

For example transparent code security enforcement may be implemented when code is developed. That is a development environment editor language syntax checker compiler or other tools for developing at least a portion of code may perform the transparency checks on code at any stage of development.

Thus at least a portion of code may contain in various combinations built in checks that are triggered when at least a portion of code is to implement transparent code security enforcement conditional code paths that may be executed based on a context of a caller of at least a portion of code to implement transparent code security enforcement safe transformations of certain privileged operations to implement transparent code security enforcement optimizations to ensure non transparent code may execute efficiently optimizations to ensure that transparent code executes efficiently when a context of a caller is privileged optimizations to ensure that at least a portion of code may be shared efficiently across processes contexts without loss of transparent code security enforcement and optimizations to ensure that at least a portion of code may be serviced or patched for updates that maintain transparent code security enforcement without a substantial performance penalty in a patched version.

As another example transparent code security enforcement may be implemented after one or more portions of code have been developed published or deployed. More particularly post validation tools that run against a pre build of at least a portion of code may implement transparent code security enforcement or a validation tool may be integrated with installers to implement transparent code security enforcement when at least a portion of code is deployed to end machines where they will execute .

Thus at least a portion of code may contain in various combinations built in checks that may be triggered when at least a portion of code is executed to implement transparent code security enforcement conditional code paths that may be executed based on a context of a caller of at least a portion of code to implement transparent code security enforcement safe transformations of certain privileged operations to implement transparent code security enforcement optimizations to ensure non transparent code may execute efficiently optimizations to ensure that transparent code executes efficiently when a context of a caller is privileged optimizations to ensure that at least a portion of code may be shared efficiently across processes contexts without loss of transparent code security enforcement and optimizations to ensure that at least a portion of code may be serviced or patched for updates that maintain transparent code security enforcement without a substantial performance penalty in a patched version.

As yet another example transparent code security enforcement may be implemented statically or dynamically while an operation associated with at least a portion of code is being executed. More particularly execution environment may implement transparent code security enforcement before any operation associated with code is executed execution environment may convert at least a portion of code into an optimized format just before the code is executed and transparent code security enforcement may be implemented during this stage.

Thus at least a portion of code may contain in various combinations built in checks that may be triggered when at least a portion of code is executed to implement transparent code security enforcement conditional code paths that may be executed based on a context of a caller of at least a portion of code to implement transparent code security enforcement safe transformations of certain privileged operations to implement transparent code security enforcement optimizations to ensure non transparent code may execute efficiently optimizations to ensure that transparent code executes efficiently when a context of a caller is privileged optimizations to ensure that at least a portion of code may be shared efficiently across processes contexts without loss of transparent code security enforcement and optimizations to ensure that at least a portion of code may be serviced or patched for updates that maintain transparent code security enforcement without a substantial performance penalty in a patched version.

Various modules and techniques may be described herein in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

An implementation of the system of and the processing flow of may be stored transmitted or otherwise implemented utilizing some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

 Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

 Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. As a non limiting example only communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

Reference has been made throughout this specification to an implementation implementations or an example implementation meaning that a particular described feature structure or characteristic is included in at least one example of the present invention. Thus usage of such phrases may refer to more than just one example or example implementation. Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One skilled in the relevant art may recognize however that the invention may be practiced without one or more of the specific details or with other methods resources materials etc. In other instances well known structures resources or operations have not been shown or described in detail merely to avoid obscuring aspects of the invention.

While example implementation and applications of the present invention have been illustrated and described it is to be understood that the invention is not limited to the precise configuration and resources described above. Various modifications changes and variations apparent to those skilled in the art may be made in the arrangement operation and details of the methods and systems of the present invention disclosed herein without departing from the scope of the claimed invention.

