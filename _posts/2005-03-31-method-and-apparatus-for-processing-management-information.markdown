---

title: Method and apparatus for processing management information
abstract: An agent collecting management data from the resource operating in the managed network to form a management data set and identifies segregated regions of management data within the management data set. Each segregated region is a respective partial transitive closure of the collected management data taken over a graph representing the entire management data set. For each segregated region of management data, the agent partitions that segregated region of management data into a set of logical partitions and transfers each logical partition of the segregated region of management data to a network management application in the managed network for access by the network management application. A network management application receives the partitions and only needs to keep objects in memory related to partitions that are currently received and being processed thus saving memory and processing resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07444350&OS=07444350&RS=07444350
owner: EMC Corporation
number: 07444350
owner_city: Hopkinton
owner_country: US
publication_date: 20050331
---
The rapid expansion of information service and data processing industries has resulted in a need for computer systems to manage and store large amounts of data. As an example financial service industry businesses such as banks mutual fund companies or the like often operate large and complex data processing systems that require access to many hundreds of gigabytes or even terabytes of data. Computer system developers have responded to these types of data storage and information sharing requirements by crating large complex networks. An example of a network that stores data is referred to as a storage area network or SAN. A typical SAN is a collection of data storage systems that are networked with a number of host computer systems that operate as servers to access data stored in the data storage systems. Other networks include wide are networks such as the Internet and local area network such as smaller corporate networks.

Using a SAN as an example network elements of a typical conventional storage area network implementation include one or more connectivity devices such as high speed data switches or routers that interconnect the various data storage systems to each other and to one or more host or server computer systems servers that require access to speed data switches or routers that interconnect the various data storage systems to each other and to one or more host or server computer systems servers that require access to e.g. read and or write the data in the data storage systems on behalf of client software applications and or client computer systems.

A developer or administrator of such a network environment may install one or more distributed network management software applications within the network to manage or administer the various elements i.e. devices computer systems storage systems etc. that operate within the network. A network manager i.e. a person responsible for management of the network operates the network management software application to perform management tasks such as performance monitoring network analysis and remote configuration and administration of the various components i.e. software and hardware resources operating within the network.

A typical conventional network management software application may have several different software components that execute independently of each other on different computer systems but that collectively interoperate together to perform network management. As an example conventional designs of storage area network management software applications can include console component a server component several agent components storage components and possibly other software components.

Generally the server component operates as a central control process within the storage area network management application and coordinates communication between the console storage and agent components. The console component often executes within a dedicated network management workstation to allow a network administrator to visualize and remotely control and manage the various elements within the storage area network that are graphically represented on an interface presented by the console. Agent components execute on various host computer systems such as servers within the storage area network to manage storage area network entities i.e. managed resources such as devices . As an example there may be different respective agents specifically designed e.g. coded to remotely manage and control certain vendor specific data storage systems databases switches and so forth.

Agent components receive remote management commands from the server component and apply functionality associated with those management commands to the managed entities within the storage area network for which those agents are designated to manage. Agents are also responsible for collecting or discovering configuration or management data concerning the network resources that those agents managed. This device discovery data collection process can happen in a scheduled or periodic manner or in response to a command received from the management server.

Conventional agents operate to collect an entire set of management data from a device and then transmit this collected management data set back to a storage component in a single transmission for access by the network management application. As an example if an agent is responsible for controlling operation of i.e. managing a large capacity data storage system such as an array of disks the agent can be configured to periodically capture or discover the current state of all managed resources associated with i.e. operating within that storage system. The actual data collection process that the agent performs uses software application programming interfaces to query the data storage system for data indicating the current configuration and operational state of the data storage system. The data storage system responds by sending the agent numerous portions of management data collectively referred to as a management data set that contain a snapshot of the state of configuration of the data storage system. The conventional agent then transports the entire management data set to the storage component of the management application. The storage component of the network management application receives the entire set of collected management data from the agent and processes and stores this information into a storage area network management database for access by the server and console components. This process is repeated for all agents that operate in the network so that the management application can present the current configuration of managed resources within the network. As an example the console component can interact with the server component and the network management database to obtain current connectivity and statistical information such as performance capacity load or other data concerning managed entities within the storage area network that was collected by the agents.

Conventional mechanisms and techniques for managing the collection and processing of management data for managed resources within a network management application suffer from a variety of deficiencies. In particular the design of conventional network management applications often uses a large number of agent components that each remotely operate to periodically collect large sets of management data from managed resources. After collection each conventional agent is responsible for transmitting the entire collected management data set to a store process that processes the management data for placement into managed objects within a management database or other accessible data repository. Depending upon the size and complexity of the network the processing tasks involved with collecting transmitting and processing by the store process of entire management data sets all at once from many agents can consume significant processing resources. The conventional process does not scale well in time requirements memory requirements and processing cycle requirements as the number of agents increases.

In particular large amounts of virtual memory are consumed to handle transactions involving full management data sets. This can result in transaction starvation for other processes vying for the services of the store process. In some cases process failures can occur if the management data sets become to large or to numerous to process in a short period of time. This is because conventional agents and store processes operate on complete transitive closures of a graph of the data within the management data set.

Embodiments of the invention operate to significantly overcome these and other deficiencies associated with conventional mechanisms and techniques for processing of management data in a network management application. In particular embodiments of the invention provide agent and store mechanisms and techniques that segregate a management data set into segregated regions. Each segregated region is a respective partial transitive closure of the collected management data taken over a graph representing the entire management data set.

To identify segregated regions the system disclosed herein uses graph analysis to analyze a graph of the management data set with respect to a model containment hierarchy of a managed object model associated with the collected management data to identify managed object model relationships to be preserved. The system then selects segregated regions of the management data set that correspond to managed object data of managed objects in the managed object model that preserve the identified mandatory managed object model relationships. An agent configured as disclosed herein is able to identify when a partial transitive closure includes a portion of management data if i references to other objects in an object model that are related to an object corresponding to that particular portion of management data as defined in a model containment hierarchy for that object in the object model are constructible from portions of management data included in that segregated region and ii all mandatory object model relationship is maintained between other objects in the object model and an object corresponding to that particular portion of management data. In this manner the segregated regions contain data for managed objects that have relationships i.e. references or inheritances to one another or one to another .

For each segregated region of management data an agent configured as disclosed herein then partitioning that segregated region of management data into a set of logical partitions and transfers each logical partition of the segregated region of management data to a network management application in the managed network for access by the network management application. Partitioning thus involves dividing the management data in the segregated region into substantially uniform partitions for transmission to the network management application. In one configuration this can be done by having the agent apply a hash function that receives a data identifier such as a alternate key set associated with a portion of management data with the segregated region of management data and identifying in response a specific partition into which the portion of management data is to be placed for transmission to the store process of the network management application. Breaking the segregated regions into partitions and transferring each partition from the agent to the store process significantly reduces processing resources associated with the store process.

Within the store process for each logical partition sent from an agent the store process receives the logical partition of a segregated region of management data at the network management application and obtains from a management database a set of managed objects related to management data contained in that logical partition. The store process updates data within the managed objects from the management data within the logical partition and stores the managed objects in the management database. This allows the store process to receive and process each partition individually and only requires the store process to load object data from a management database for those object related to the partition as opposed to having to load the entire set of object data for an entire management data asset as is done in conventional systems . This conserves memory used by the store process because once a partition has been converted into managed object data and those objects have been committed back to the managed object database the store process can clear those objects from memory and begin to process the next partition. Partitions can be sent from an agent and processed either one at a time serially or in groups or in parallel by the same or by several different store processes depending upon the configuration.

Other embodiments of the invention include computerized devices such as host and storage system computer systems workstations or other computerized devices configured to process all of the method operations disclosed herein as embodiments of the invention for both the agent and store processes. In such embodiments a computerized device includes a memory system a processor a communications interface and an interconnection mechanism connecting these components. The memory system is encoded with either an agent application if the host computer or a storage application if the storage computer system that when performed on the processor produces an agent process or store process that operate as explained herein within the respective host or storage system computerized devices to perform all of the method embodiments and operations explained herein as embodiments of the invention.

Other arrangements of embodiments of the invention that are disclosed herein include software programs to perform the method embodiment steps and operations summarized above and disclosed in detail below for both the agent and or the store process. More particularly a computer program product is disclosed that has a computer readable medium including computer program logic encoded thereon that when performed in a computerized device provides associated operations of the agent or the store process each as respectively explained herein. The computer program logic when executed on at least one processor with a computing system causes the processor to perform the operations e.g. the methods indicated herein as embodiments of the invention. Such arrangements of the invention are typically provided as software code and or other data structures arranged or encoded on a computer readable medium such as an optical medium e.g. CD ROM floppy or hard disk or other a medium such as firmware or microcode in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit ASIC or as downloadable software images in one or more modules shared libraries etc. The software or firmware or other such configurations can be installed onto a computerized device to cause one or more processors in the computerized device to perform the techniques explained herein as embodiments of the invention. Software processes that operate in a collection of computerized devices such as in a group of storage area network management servers hosts or other entities can also provide the system of the invention. The system of the invention can be distributed between many software processes on several computers or all processes such as the agent and store process could execute on a small set of dedicated computers or on one computer alone. Though preferred embodiments provide the agent and store process execute on separate computer systems the particular distribution of the agent and store process is not intended to be limiting.

It is to be understood that the system of the invention can be embodied strictly as a software program as software and hardware or as hardware alone. Example embodiments of the invention may be implemented within EMC s Control Center software application that provides management functionality for storage area network resources and in computerized devices that operate the Control Center software. Control Center is manufactured by EMC Corporation of Hopkinton Mass. USA.

Generally embodiments of the invention provide mechanisms and techniques to allow an agent to collect management data from the resource operating in the managed network. The collected data forms a management data set. Once collected the agent identifies segregated regions of management data within the management data set. Each segregated region is a respective partial transitive closure of the collected management data set taken over a graph representing the entire management data set. For each segregated region of management data the agent partitions that segregated region of management data into a set of logical partitions that in one configuration are of approximately the same size to allow uniform distribution of the management data into the group of partitions. In one configuration the partitions include data for objects of the same type in a managed object database maintained by the network management application. The agent transfers each logical partition of the segregated region of management data to a network management application in the managed network for access by the network management application. The partitions being smaller in size than the entire management data set allow the store process to require much less memory and processing resources to convert to object data for storage in the managed object database. A store process in the network management application receives the partitions and only needs to keep objects in memory related to partitions that are currently received and being processed thus saving significant memory and processing resources. Additionally in one configuration since the partitions of a segregated region contain data for objects that are related i.e. are from a common partial transitive closure updates to the managed object database are made to related groups of objects in a similar time period and thus sections of the database that are updated using the techniques explained herein are maintained in a more uniform manner as compared to processing an entire management data set all at one time.

The storage area network includes a management server computer system that operates a network management application . In addition the storage area network includes one or more storage computer systems through Z that operate respective store processes through Z configured as disclosed herein. A plurality of agent software processes through N operate within one or more of the host computer systems through M as further defined herein. Generally the agents and store processes interoperate with and are collectively considered parts of the network management application . A network administrator i.e. a person interacts via a console computer system with the management application executing on the management server computer system in order to remotely administer manageable resources within the storage area network such as the data storage systems through X the connectivity devices Y and the host computer systems . Details of agent and store processing as explained herein will now be provided with respect to and flow charts of processing steps that follow.

Configurations disclosed herein generally relate to the processing performed by the agents and the store processes to collect management data sets from managed resources for placement into the management database for access by the management application . Generally an agent collects a management data set from a managed resource and performs as explained herein to segregate the management data set into segregated regions through K. In one configuration each segregated region includes management data collected from the resource for a group of related objects maintained by the store processes within the management object data . By related objects what is meant in one configuration is that the management data selected by an agent for inclusion into a specific segregated region is management data that maintains relationships between objects and references to other objects in an object model of the managed object data that are related to an object corresponding to that particular portion of management data as defined in a model containment hierarchy for that object in the object model and those relationships are constructible from portions of management data included in that segregated region . Stated differently data in a segregated region represents a partial transitive closure of data from the management data set . In one configuration the collection of segregated regions through K includes all of the data from the management data set .

After identifying the data for various segregated regions the agent breaks the segregated regions up into logical partitions through L and transfers each logical partition to a store process . By sending the data in partitions the processing burden on each store process is minimized since the store processes only need to instantiate from the managed object database those managed object that need to be populated with data from the current partition s being processed. In other words since the partitions contain data for a much smaller group of objects than the entire collected management data set the store process does not have to process the whole management data set at one time. Rather using the system explained herein the store process processes partitions of management data as they are received and as a result the store processes consume less memory and processor cycles processing the management data partition by partition.

Further details of the system will now be explained with reference to flow charts of processing steps in .

In step the agent collects management data from the resource operating in the managed network to form a management data set . Collection of management data is done by having the data collector execute or engage in management interface protocols between the resource and the agent to query the resource for current configuration and management data. The collective amount of data gathers from a resource is referred to herein as a management data set . As an example if the resource were a data storage system the management data set might contain data concerning the current configuration and operation of disk drives ports adapters cards logical devices cache memory and other components that operate within the data storage system. The primary agent responsible for managing that resource can collect the management data set periodically e.g. nightly at a certain time or in response to a specific command from the network management application .

In step once the management data set has been obtained the agent operates the data segregator to identify segregated regions through K of management data within the management data set . Each segregated region being a respective partial transitive closure of the collected management data taken over a graph representing the entire management data set . In one configuration an analysis is performed of the data set s graph with respect to both its model containment hierarchy and its model mandatory relationships for managed objects maintained in the managed object database . In an example configuration a given subset of resource management data is amenable to segregation and partitioning if an only if a all objects to which this one is related in the model containment hierarchy must be constructible from the segregated and partitioned data sets this would apply to leaf node or intermediate node objects in the model and b all objects to which a given object in the segregated and partitioned data set has mandatory model relationships must be constructible from the segregated and partitions data set this would apply to mapping or relationship objects . In one configuration and agent has access to the object model for the managed object database e.g. can be programmed to access this or is statically configured with this information and can perform this analysis in an automated manner. This is shown in sub steps and .

In step the agent segregates the management data set into segregated regions of management data. Each segregated region contains a particular portion of management data from the management data set if objects in an object model for the managed object data that are related to an object corresponding to that particular portion of management data as defined in a model containment hierarchy for that object in the object model are constructible from portions of management data included in that segregated region.

In step the agent segregates the management data set into segregated regions of management data with each segregated region containing a particular portion of management data from the management data set if at least one mandatory object model relationship is maintained between other objects in the object model and an object corresponding to that particular portion of management data. In one configuration steps and result in the identification of partial transitive closures of the management data set that are respective segregated regions.

In step the agent enters a processing loop that occurs for each segregated region through K of management data i.e. steps and occur K times .

In step the agent partitions that segregated region of management data into a set of logical partitions through L. Details of this processing will be explained shortly. Generally however in one configuration the agent in step apportions data in the segregated region into respective partitions to evenly distributed that data into substantially sized i.e. uniform partitions .

In step the agent transfers each logical partition through L of the segregated region of management data to the network management application i.e. to the store process in the managed network for access by the network management application i.e. for storage within managed objects in the managed object database . Such transfers i.e. L transfers can take place serially or in parallel or in groups.

In one configuration the managed network is a storage area network SAN and the resources are managed devices operating in the storage area network such as switches data storage systems hosts host applications and the like. In this configuration the agent is an agent responsible for managing the managed devices in the storage area network and performs the above processing steps.

In step the agent identifies segregated regions of management data within the management data set by performing a graph analysis of the collected management data in the management data set to identify nodes of management data in a graph where the entire management data set can be segregated. Details of this process according to one example configuration are shown in steps and .

In step the agent analyzes a graph of the management data set with respect to a model containment hierarchy of a managed object model of the database associated with the collected management data to identify managed object model relationships to be preserved.

In step based on this analysis the agent selects segregated regions of the management data set that correspond to managed object data of managed objects in the managed object model i.e. that preserve the identified mandatory managed object model relationships. Accordingly as noted briefly above performing a graph analysis of the collected management data in the management data set comprises includes identifying as respective segregated regions partial transitive closures within the graph that contain particular portions of management data from the management data set . Each partial transitive closure includes a portion of management data if i references to other objects in an object model that are related to an object corresponding to that particular portion of management data as defined in a model containment hierarchy for that object in the object model are constructible from portions of management data included in that segregated region and ii if at least one mandatory object model relationship is maintained between other objects in the object model and an object corresponding to that particular portion of management data. In this manner each segregated region maintains data for objects that either relate to i.e. that reference one another or for objects in which at least one object references another.

Note that in one configuration graph analysis can be performed by an agent developer i.e. a person who then statically configures i.e. hardcodes an agent with the identification of the data portions within a management data set that are to be included in each segregated region.

In step the agent partitions a segregated region of management data into a set of logical partitions through L. Details of this processing are shown in sub steps and .

In step the agent divides the management data in the segregated region into substantially uniform partitions for transmission to the network management application store process .

In step to divide the segregated region into partitions the agent applies a hash function that receives i.e. identifies a data identifier such as a database key associated with a portion of management data with the segregated region of management data and identifies in response a specific partition into which the portion of management data is to be placed for transmission to the network management application. As an example a portion of management data in the segregated region may have a database key identifier that is input to the hash function to identify a specific partition number through L into which that portion of management data from the segregated region is to be placed for transmission to the store process . In one configuration each partition through L thus contains objects of the same type.

In step the store process obtains from a management database a set of managed objects related to management data contained in that logical partition . Note that the

In step the store process identifies a partition identifier associated with the received logical partition.

In step the store process identifies and loads into memory managed objects in the managed object database that contain the partition identifier through L. The identified managed objects form the set of managed objects to be read into random access memory for population of management data from the received logical partition . In one configuration each partition has a partition number e.g. through L which is the output value of the hash function performed by the agent when placing management data from a segregated region into specific partitions . When the store process receives a particular partition through L the store process loads into random access memory a set of managed objects that each contain that partition number. In one configuration since all object data in a partition is of the same type the store process loads all objects of the same type corresponding to the partition number into memory.

In other words when managed objects are stored in the managed object database they include the partition identifier such as the partition number through L from which their managed object data was obtained from an agent or a type field that corresponds to the partition identifier. By loading only those objects having that partition number or that partition type i.e. the object type of all data in a specific partition the store process only needs to store in memory substantially less amounts of management data than an entire amount of management data in the management data set collected from the resource operating in the storage area network. Specifically the store only needs to load those objects that have the same partition number through L or type as the partition or the type of data in a partition that was just received and is being processed for conversion of its data into managed object data .

In step the store process updates data within the managed objects from the management data within the logical partition . This process involves populating the managed object data values with the data from the partition .

In step the store process stores the managed objects in the management database. This commits the managed objects to the database .

In step the store process repeats for a series of iterations i.e. equal to the number of partitions L for a particular segregated region through K the operations of steps through such that upon each iteration the operation of obtaining from a management database a set of managed objects related to management data contained in that logical partition obtains into random access memory only those managed objects necessary to be updated with data from the received logical partition . This process is thus repeated for all partitions for a segregated region. The entire processing can then be repeated for each segregated region that is partitioned and transferred to the store process .

Note that in one configuration a store process can detect in real time if an agent is equipped with partitioning functionality. This allows the store process to remain backward compatible with agents that do not support segregation and partitioning functionality as explained herein. Thus a store process can operate in a network that uses conventional agents as well as agents that operate as explained herein.

The memory system may be any type of computer readable medium that is encoded with an application A A that represents software logic code such as data and or logic instructions e.g. stored in the memory or on another computer readable medium such as a disk that embody the processing functionality of embodiments of the invention for either the agent or the store process as explained above. The processor can access the memory system via the interconnection mechanism in order to launch run execute interpret or otherwise perform the logic instructions of the applications A for the storage computer or A for the host in order to produce a corresponding agent or store process B B. In other words the agent and store processes B and B represent one or more portions of the agent and storage application A and A performing within or upon the processor in the computer system. It is to be understood that the agent and storage process operating as explained in former examples are represented in by either one or both of the agent and storage application A A and or the process B B.

Is to be understood that embodiments of the invention include the applications i.e. the un executed or non performing logic instructions and or data encoded within a computer readable medium such as a floppy disk hard disk or in an optical medium or in a memory system such as in firmware read only memory ROM or as in this example as executable code within the memory system e.g. within random access memory or RAM . It is also to be understood that other embodiments of the invention can provide the applications operating within the processor as the processes B B. While not shown in this example those skilled in the art will understand that the computer systems and or may include other processes and or software and hardware components such as an operating system which have been left out of this illustration for ease of description of the invention.

Other alternative arrangements of the invention include rearranging the processing steps explained above in the flow charts in such a way that the overall effect of the invention is the same. It is to be thus understood by those skilled in the art that the particular arrangement of processing steps in many instances does not specify implementation of embodiments of the invention. As such those skilled in the art of software development and computer related technologies will understand that there can be many ways and orders of representing the processing operations explained above and such alternative software code will still achieve the overall effects explained herein. In addition embodiments of the invention are not limited to operation on the computer systems shown above. The agents store processes and management server including change manager can operate on shared computing resources or can be distributed among any number of computer systems. Furthermore embodiments of the invention are not limited to operation in a storage area network management application but are intended to be generally applicable to any type of network management application. Accordingly embodiments of the invention are not limited to the processing arrangements explained above.

