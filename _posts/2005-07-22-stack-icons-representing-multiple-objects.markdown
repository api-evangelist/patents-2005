---

title: Stack icons representing multiple objects
abstract: The features described herein are directed to a method and system for use in a computing environment for representing files stored in stacks by using a stack icon. The stack icon may include multiple thumbnail images as top elements, and may use common characteristics among the files to define the appearance of the stack. The system may also use metadata or file characteristics (e.g., time of last edit, size, etc.) to identify one file for top representation in the stack icon. The system may additionally include an empty stack icon, a generic stack icon, property based icons, and custom thumbnail icons.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07694236&OS=07694236&RS=07694236
owner: Microsoft Corporation
number: 07694236
owner_city: Redmond
owner_country: US
publication_date: 20050722
---
This application is a continuation in part of copending U.S. application Ser. No. 10 830 224 entitled System and Method for Displaying Stack Icons. 

In current computer operating system environments icons are provided for representing items such as files folders shortcuts applications documents tasks and commands. Icons may be used in list views toolbars dialog boxes menus and other places. Icons may be used to represent all objects of a specific class such as MICROSOFT WORD documents MICROSOFT EXCEL files jpeg files or other types of files.

Icons may include thumbnail images used to represent specific objects such as a specific jpeg or a specific folder. Icons may be dynamically generated by code run on a user s machine or may be cached. Application and component developers can using custom icons and thumbnails convey as much information about objects as their pixels will allow. However existing systems do not provide a technique for graphically grouping multiple icons based on properties of the files represented.

Currently when a user wants to group items having common characteristics the user often groups the items into a folder. For example a user can group documents by file type to include one group for MICROSOFT WORD text or word processing documents one for MICROSOFT EXCEL spreadsheet documents one for MICROSOFT POWERPOINT presentation documents etc. A user may also group music by genre creating separate groups for Pop Classical Hip Hop etc. While the conventional folder structure and icon may provide easy access to the documents the generic folder icon fails to provide descriptive information pertaining to items within the folder.

Aspects described herein are directed to a method for representing files stored in stacks. In some aspects the method includes providing a set of stack icons each icon in the set having a stack height representing a range of stack sizes. The method may additionally include determining a stack size for a selected stack and selecting and displaying an appropriate stack icon from the set of stack icons based on the determined stack size.

In another aspect a method is provided for representing a selected stack of files wherein the selected stack is stored within one of multiple libraries. The method may include providing an icon for each library. Each icon for each library portrays information relevant to the library. The method may additionally include storing multiple icons portraying the relevant information for each library wherein each of the multiple icons in each library represents a range of stack heights. The method may additionally include representing a selected stack by determining an appropriate library and an appropriate stack height and displaying a corresponding icon.

In yet an additional aspect a system is provided for representing a selected stack of files. The system may include stored sets of default stack icons each stored set of default stack icons representing and portraying information relevant to a corresponding library. Each stored set of default stack icons includes multiple icons and each included icon represents a range of stack heights. The system may additionally include icon selection tools for determining if the selected stack of files belongs to a library having a corresponding stored set of default icons and for determining an appropriate stack height. Upon locating an appropriate library and stack height the icon selection tools select and display an appropriate icon from an appropriate set of default icons.

In further aspects thumbnail icons and property based icons may be provided. A top element of the stack may be determined based on characteristics of the files in the stack e.g. last time of edit size etc. . The stack icon may also include multiple images such as thumbnail images as top elements in the stack. Additionally each stored set of icons may include a unique empty set icon for indicating that a stack is empty.

Features described herein include a method and system for displaying stacks of items having common properties. The system and method may provide a technique for displaying the number of items in a stack on a stack icon. Furthermore the stack icon may visually represent the height of the stack such that the stack depicted in the icon varies depending on the relative size of the stack compared to other stacks in the view. Stack icons may be depicted to include different kinds of items documents photos videos music contacts etc. depending on the library in which the stack is being represented. Furthermore a different image may be used to represent empty stacks as compared to images used for non empty stacks. When there is an icon available to represent a certain property that icon may be overlaid on the stack icon based on that property. For some special types of stacks such as stacks of photos and videos the stack icon includes thumbnails of items from within the stack itself.

The system and method may be implemented in a computerized environment. An exemplary operating environment is described in detail below with reference to .

The features herein are described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the features may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The features may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to the exemplary system for implementing the invention includes a general purpose computing device in the form of a computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit .

Computer typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable nonremovable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to nonremovable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable nonremovable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through an non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in may provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks.

When used in a LAN networking environment the computer may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer may include a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

The user selection module enables a user to group items having common properties into a stack. As described above the stacks may share a common file type or other characteristic.

The categorizing module categorizes the selected items in accordance with the shared common property. Stack icons are depicted to include different kinds of items such as documents photos videos music contacts etc. The particular depiction may depend upon the library in which the stack is being represented.

The counting tools count the number of selected items to be provided on the stack. As will be further illustrated below the number of items in a stack may be displayed on the stack icon itself. Furthermore the height of the stack depicted in a stack icon may vary depending on the relative size of the stack compared to other stacks in the view. Additionally the counting tools are capable of determining if a selected stack is empty. A completely different image may be used to represent empty stacks as compared to images used for non empty stacks.

The icon selection tools select an appropriate icon from three categories of available icons. The three categories of available icons include default stack icons property based icons and thumbnail icons . While typically a default icon is provided for each library if there is an icon available to represent a certain property that icon may be overlaid on the stack icon based on that property. The custom thumbnail icons may be provided for some special types of stacks such as stacks of photos and videos. The thumbnail stack icon includes thumbnails of items from within the stack itself.

With further reference to the icon selection tools each icon is provided in multiple stack sizes as will be further described below. The icon selection tools may implement an algorithm to select the appropriate stack size within a category.

Three categories of stack icons may be provided for the system. As set forth above these categories may include default stack icons property based stack icons and thumbnail stack icons. Each of the main libraries including the document library photo library video library music and radio library contacts library message library and television and movie library may include a set of default stack icons. A set of generic default stack icons may be provided for use in non library views.

As shown each set of default stack icons includes multiple icons each icon representing a stack of a distinct size. In some example aspects five icons are provided for representing stacks of different sizes. In this instance the sizes are characterized as large medium small two and zero. Various criteria may be relevant to selecting which stack icon is shown. The size of the stack icon may indicate the relative size of the stack compared to other stacks in that same view. In some aspects a stack might not be visually represented as having more items than it actually contains except in the case of a stack of just one item. An exemplary algorithm for selecting the appropriate size is described below.

As illustrated in each set of default stack icons includes five icons representing stacks of different sizes. These sizes may include a large size a medium size a small size a two sized icon and an empty stack or zero icon. The selection of the appropriate default icon may be based on the size of the stack and is further described below.

The overlay is used to convey what type of object the icon portrays. An application may provide such an overlay for each file type it owns but if none is provided for a particular file type then the application s own icon may be used as the overlay. The placement of the overlay is shown as aligned exactly along the bottom edge of the image such that it fits within the boundaries of the icon when the image is bottom aligned. Horizontally the type overlay may be centered on the right edge of the image but can be shown in other positions.

Overlays may be stored in pixel sizes such as the following pixel sizes 48 48 32 32 24 24 16 16 and 8 8. The following table describes an appropriate sized overlay for display on icons of different sizes.

In general thumbnail icons may be treated just as other metadata on items. Thumbnail icons may be stored and extracted as bitmaps and may be referenced as a multi valued property. Every item may have a flag that indicates one of three states regarding its thumbnails. In a first yes state the flag indicates the existence of a cached thumbnail. In a second no state there is no cached thumbnail one cannot be extracted. In a third uncertain state there is no cached thumbnail and it may be undetermined whether a thumbnail can be extracted.

In step A the stack icon selection and display module locates any special properties or available thumbnails. If either is available in step A the stack icon selection and display module displays the thumbnail or property based icon in step A. If neither a property based or thumbnail icon is available in step A the system looks for a default library in step A. If the default icon is found in step A the system displays the default icon in step A. If the default icon is not found in step A the system retrieves and displays the generic icon in step A to complete the process in step A.

A limited number of stack icons may be provided for representing all sizes of stacks. For instance whereas a stack may have any number of items from zero to hundreds or thousands five different stack icons may be provided to represent all of these different stack sizes. is a flowchart illustrating a technique for selecting the appropriate stack icon for display. The process begins in step B. In step B the system divides a range of stacks between the largest stack and the smallest stack having more than two items into three equal ranges. In step B the system assigns stacks to an icon based on the range. The stacks that fall in the largest range get the largest stack icon the second largest get the next largest stack icon etc. Stacks with one or two items get the stack of size two icon. Stacks with zero items get the stack of size zero icon. It may be desirable to use a larger or smaller number of stack icons to represent all sizes of stacks. If desired different selection algorithms may be used.

Although the discussion above uses examples of predefined stack icons e.g. five predetermined stacks the available stack icons need not be predetermined and they need not be limited. For example stack icons may be dynamically generated based on the file objects to be represented in the stack. The system may be configured to identify the number of objects in the stack and may dynamically generate the stack icon using this number. For example the system may follow an algorithm in which a plurality of individual icons are combined to form a stack icon where the plurality includes an individual icon for each object such that there is a one to one relationship between elements shown in the stack icon and the number of objects represented by the stack. Thus for example a stack icon for a group of five files may be assembled by combining five individual icons. This combining can be done in any desired manner such as a layering fanning etc. Alternatively some other ratio besides one to one may be used. For example the system may use an element in the stack for every 1.5 2 3 4 5 10 20 or any other number of objects to be represented in the stack.

A stack icon may be dynamically generated to include a thumbnail image of one of the documents in the stack. The thumbnail image may be a miniaturized image visually depicting the contents metadata and or characteristics of a file object. In some instances multiple thumbnail images may be placed at the top of a stack icon to help convey more information to the user regarding the objects represented by the stack icon. and illustrate example icons having multiple thumbnail images on a stack icon. The example includes four images and the stack appearance includes four icon elements indicating the size of the stack. The example illustrates how each element in the stack may include an image or thumbnail image. Furthermore as shown in the example the stack elements may actually appear superimposed over one or more of the thumbnail images .

The system may determine which object to place at the top of the stack based on characteristics of the objects in the stack. For example the system may automatically select the file or files that were most recently modified and represent those files at the top of the stack e.g. by placing their thumbnail s at the top of the stack icon making it easier for the user to see what has been done to the files. As another example the most active or most recently played audio file may be represented at the top of the stack which may remind the user of the contents of the stack based on frequency of use. Other characteristics such as file size file type project etc. may also be used to make this determination.

Additionally the process of selecting a stack type or of selecting a thumbnail to appear on the top of the stack may be based on characteristics of the objects represented by the stack. In some instances the system may be configured to check the contents and or metadata of the various objects in the stack and identify common features to the objects. For example if the user has created a group of objects that are all of the same type the system may select and or generate a stack icon corresponding to that type. If the various objects all relate to a common project the system may select and or generate a stack icon having an image identifying the project at the top of the stack. As another example if the stack includes multiple songs by the same artist the system may select and or generate a stack icon having an image identifying the artist or an image of a common album cover on which songs in the stack are contained on top of the stack.

While particular embodiments have been illustrated and described in detail herein it should be understood that various changes and modifications might be made. The features described herein are intended in all respects to be illustrative rather than restrictive and alternatives may be used. It will be understood that certain features and sub combinations are of utility and may be employed without reference to other features and sub combinations.

