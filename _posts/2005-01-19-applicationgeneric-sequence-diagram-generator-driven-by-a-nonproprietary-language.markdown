---

title: Application-generic sequence diagram generator driven by a non-proprietary language
abstract: An application-generic sequence diagram generator is driven by a non-proprietary language. According to one embodiment, a source file describes, in a non-proprietary language, a flow (e.g., a message exchange) of an application. An automatic sequence diagram generator is operable to receive as input the source file, and generate, based on such source file, a sequence diagram representing the flow described by the source file. In an exemplary embodiment, the non-proprietary language is a markup language, such as Extensible Markup Language (XML). The sequence diagram generator is general purpose (or “application-generic”), as it can generate a sequence diagram representing the flow of any application described in the source file. The application for which the source file describes the flow may be any type of application, including without limitation a computer-executable software application, a communication protocol, or any message exchange between actors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07849439&OS=07849439&RS=07849439
owner: Ixia
number: 07849439
owner_city: Calabasas
owner_country: US
publication_date: 20050119
---
Sequence Diagrams also known as sequence charts time sequence diagrams charts message sequence diagrams charts railroad diagrams charts or ladder diagrams charts are commonly used to provide a graphical representation of a flow of an application. More specifically sequence diagrams typically provide a graphical representation of a series of transactions referred to as messages between two or more entities referred to as actors. In sequence diagrams time is typically represented by vertical progression down the page. Each actor is typically represented in sequence diagrams by a vertical line or column . Messages are typically represented by horizontal lines which are usually labeled and usually end in an arrowhead indicating the direction of communication between the vertical lines of the actors involved in the exchange. Other decorations are sometimes included in a sequence diagram such as transaction item numbers or other relationships between the transactions such as timeouts.

The flow of many types of applications can be represented by sequence diagrams including without limitation such applications as communication protocols computer executable software assembly line or other manufacturing processes. Indeed sequence diagrams can be used to represent the flow of message exchanges between actors for any application such as the flow of messages exchanged between a fruit salesman and a customer desiring to purchase fruit from the salesman. Sequence diagrams can be used to clearly represent the message exchange or flow of an application instead of or in addition to textual description of such message exchange. For instance in many cases such applications as communication protocols can be more quickly understood by review of a sequence diagram than by review of a textual description of the application. As with the adage that a picture is worth a thousand words sequence diagrams greatly aid in conveying the message exchange of a given application.

Accordingly sequence diagrams are commonly used in specifications designs and other documentation to document implementations and as representations of predicted or measured system behavior. In the telecommunications field for example sequence diagrams are widely used to document the required expected or actual protocol message exchanges.

While sequence diagrams are of great benefit it is often burdensome to create and maintain them. Traditionally sequence diagrams have been manually created using basic bitmap editors e.g. Microsoft Paint more sophisticated diagramming tools e.g. Microsoft Visio or sometimes dedicated CASE tools e.g. Rational Rose . Creating sequence diagrams in these manners requires that both the original author and the maintainer have access to appropriately licensed versions of the compatible tools. Further the sequence diagram creator is required to make decisions about style and layout although some tools provide assistance in these areas. This manual approach consumes a lot of time and labor and discourages the inclusion of sequence diagrams in documentation due to the high cost of creating and maintaining them.

More recently automatic diagram generation tools have been developed that can generate sequence diagrams from an input textual file that describes the transaction sequences of an application. Thus such automatic diagram generation tools alleviate the requirement of a user manually creating sequence diagrams. Automatic diagram generation tools available in the prior art include the following EventStudio 2.5 available from EventHelix.com see http www.eventhelix.com EventStudio Callflow Sequence Diagram Generator available from SourceForge.net see http sourceforge.net projects callflow the Sequence Diagram Tool provided in the WebSphere Studio Application Developer available from International Business Machines IBM and J2u available from NASRA see http www.nasra.fr .

Prior automatic diagram generation tools typically require use of a proprietary language for defining a textual description in a source file. Thus a user may be required to learn a proprietary language in order to generate the proper textual description to be used by the automatic diagram generation tool.

Further some automatic diagram generation tools are not application generic. Rather certain automatic diagram generation tools are restricted for use in generating sequence diagrams for only specific types of applications and thus lack the flexibility to generate a sequence diagram for any desired type of application. For instance the Sequence Diagram Tool provided in the WebSphere Studio Application Developer is capable of receiving Java source code as a source file and is operable to generate a sequence diagram representing the flow of the received Java source code. Thus while this tool does not require a user to learn a proprietary language in order to generate a source file but instead the Java source code can be input as the source file it is application specific in that it is capable of only generating sequence diagrams for the input Java source code. Thus for instance this tool is not able to receive a textual source file describing for example the message exchange between a customer and a fruit salesman and generate a sequence diagram for that application but is instead limited to generating a sequence diagram representing the flow of the Java source code input to it. Thus certain sequence diagram generation tools are not general purpose sequence diagram generators but rather are focused on specific applications or specific tasks such as reverse engineering existing source code or automatically documenting software runtime behavior from runtime traces.

Additionally automatic sequence diagram generation tools of the prior art generally do not allow command line operation and hence cannot be integrated into an end user s document publishing automation process. Thus there is generally no efficient way for a user to create a group of diagrams utilizing prior automatic sequence diagram generators. Rather a user is generally required to sit in front of the computer and enter information e.g. a source file to generate one diagram at a time.

In view of the above a desire exists for an automatic sequence diagram generator that is capable of receiving a source file that defines a flow e.g. message exchange of an application in a non proprietary language. Further it is desirable that such automatic sequence diagram generator be a general purpose or application generic diagram generator rather than being restricted to generating sequence diagrams for a specific application.

The present invention is directed to a system and method which provide an application generic sequence diagram generator that is driven by a non proprietary language. According to one embodiment a source file describes in a non proprietary language a flow e.g. a message exchange of an application. An automatic sequence diagram generator is operable to receive as input the source file and generate based on such source file a sequence diagram representing the flow described by the source file.

In an exemplary embodiment the non proprietary language is a markup language such as Extensible Markup Language XML . Thus a user is not required to learn a proprietary language in order to create a source file to be used by the sequence diagram generator but can instead describe the flow to be diagrammed in for instance XML. Further the sequence diagram generator is general purpose or application generic as it can generate a sequence diagram representing the flow of any application described in the source file. The application for which the source file describes the flow may be any type of application including without limitation a computer executable software application a communication protocol or any message exchange between actors e.g. a message exchange between a customer and a fruit salesman .

According to one embodiment the sequence diagram generator includes a source parser a diagram parser and a rendering engine. The source parser receives the textual source file and builds based on the received source file a data model for a diagram of the flow described by the source file. The diagram parser processes the data model built by the source parser to generate corresponding drawing commands which are input to the rendering engine. Responsive to receipt of the drawing commands the rendering engine generates a sequence diagram representing the flow described by the textual source file.

In various embodiments described herein the textual source file is independent of the application for which the textual source file defines the flow. For instance the textual source file describes a flow of an application e.g. a communication protocol or other exchange of messages between actors for which a sequence diagram is to be generated rather than the source file itself being the application for which a sequence diagram is to be generated. As an example the textual source file may be an XML file that describes the flow of a Java program. Thus the XML file is independent of the Java program as opposed to the source code of the Java program being used as input to the sequence diagram generator.

The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention both as to its organization and method of operation together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood however that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.

Exemplary embodiments of the present invention are now described with reference to the above figures wherein like reference numerals represent like parts throughout the several views. Turning to an exemplary system is shown which includes a sequence diagram generator that is operable to receive as input a textual source file and generate therefrom a sequence diagram . Sequence diagram may be stored to a file and or output e.g. to a display device as examples. According to various embodiments described herein source file describes the flow e.g. message exchange of an application such as a communication protocol etc. in a non proprietary language such as XML. Sequence diagram generator can be referred to as a general purpose or application generic sequence diagram generator because it is operable to generate a sequence diagram for any type of application for which a flow is described in source file .

Additionally as described further herein the textual source file is independent of the application for which it defines a flow. For instance the textual source file describes a flow of an application e.g. a communication protocol or other exchange of messages between actors for which a sequence diagram is to be generated rather than the source file itself being the application for which a sequence diagram is to be generated. As an example the textual source file may be an XML file that describes the flow of a Java program. Thus the XML file is independent of the Java program as opposed to the source code of the Java program being used as input to the sequence diagram generator . Accordingly the sequence diagram generator is not restricted to generating a sequence diagram for the flow of the source file input thereto but rather is operable to generate a sequence diagram for the flow of any application described by the source file input thereto.

According to this exemplary embodiment the source file provides in non proprietary language e.g. XML a sequence definition for a flow of an application. The source file is input to sequence diagram generator which parses the data of the source file and renders the sequence diagram either on a display screen or to a file in one of several formats bmp gif jpg etc. . Parser is responsible for reading and interpreting the input data e.g. XML of the source file to extract the element definitions. Rendering engine is responsible for rendering the drawing elements using its internal style and layout rules. The rendering engine application program interface API presents an abstraction appropriate for drawing sequence diagrams which is independent of any domain specific application of the diagrams. Parser maps between domain specific encoding in the source file e.g. the XML and the rendering API. This allows rapid adaptation of the sequence diagram generator to a wide range of domains without having to change the core drawing logic that controls style and layout.

The rendering engine and its corresponding API may be any that are now known or later developed to provide the capability of receiving drawing commands and generating a sequence diagram in accordance with such drawing commands. The parser and more particularly the diagram parser described in the exemplary embodiment of below should have knowledge of the rendering engine API such that it can generate the appropriate drawing commands to cause the rendering engine to take the correct actions in generating the proper sequence diagram. In certain embodiments the rendering engine s API may be developed to have particular applicability in drawing sequence diagrams e.g. to be capable of receiving actors message sequences etc. and draw the corresponding features to represent the message sequences between the actors but this is not a requirement for implementing the concepts described herein.

Sequence diagram generator according to one exemplary embodiment is shown in further detail in . In this illustrative embodiment sequence diagram generator includes a source parser diagram parser and rendering engine . Thus in this illustrative embodiment parser component of comprises source parser and diagram parser . Source parser receives source file as input and builds internal data model based on such source file . More specifically source parser reads the text of source file checks its syntax and builds internal data model which represents all the diagram metadata information read from source file . Internal data model preserves the hierarchy and relationships expressed in source file .

In one exemplary embodiment the source file is in XML and the source parser parses XML elements to extract the data from the source file to generate data model . More specifically in one exemplary implementation the XML source file is loaded into a DOM Document Object Model by the source parser . The DOM is a tree structure that captures all the data from the XML including its hierarchy. The DOM is searched by the source parser for diagram metadata which is then extracted into a set of internal data structures that describe the actors and all transactions and decorations. The transaction data is further processed to extract all the source and destination information. This collection of internal data is then used to drive the rendering process. Diagram metadata is recognized by source parser in the XML source by the unique set of XML tags examples of which are described further below.

Diagram parser processes the data in internal data model to extract the features that are to be represented in the sequence diagram and based on such internal data model diagram parser generates a sequence of abstract diagram drawing commands to the rendering engine . Rendering engine receives the drawing commands and transforms such commands into low level operating system graphical operations such as drawing lines circles or text to create sequence diagram which may be output on a display of a processor based device e.g. a personal computer and or stored to a file as examples.

To illustrate operation of one embodiment consider a simple case of a conversation between three actors A B and C being described in source file which is then used by diagram generator to generate a sequence diagram representing the exchange of messages between the actors in such conversation. Thus in this case the conversation between the actors is considered an application and the flow of such application is described in the source file . Suppose the conversation is as follows 

In this exemplary embodiment the source file is expressed in XML and the above conversation can be represented by the following XML source file 

As is well known XML allows elements to be defined with tags. XML is a markup language which can contain markup symbols to describe the content of a page or file. XML describes the content of a file in terms of what data is being described. For example the word phonenum placed within markup tags could indicate that the data that follows is a phone number. Thus XML allows elements such as the phonenum element in this example to be defined. This means that an XML file can be processed purely as data by a program or it can be stored with similar data on another computer or like an HTML file that it can be displayed. For example depending on how the application in the receiving computer wanted to handle the phone number it could be stored displayed or dialed. XML is extensible because unlike HTML the markup symbols are unlimited and self defining. In the above exemplary XML code the elements SequenceDefinition MessageSequence and Message are defined. The SequenceDefinition element in this case is the outer most tag which encloses a complete definition of a single diagram. The SequenceDefinition element includes a title attribute which can be used to provide a title for the diagram. The MessageSequence element encloses the set of transactions between actors and each message element defines a single transaction between the from and to actors using the annotation given by the msg attribute. A program parsing an XML file e.g. source parser can determine that the file includes a sequence definition by searching for the SequenceDefinition element. The parser can then assume that all content found between the opening and closing SequenceDefinition tags is related to the definition and should conform to the expected syntax of such a definition in this case being at least one MessageSequence tag set containing one or more message tags.

Source parser receives the above XML of source file and parses it into the internal data model . The internal data model derived from the above exemplary XML code might look like the following 

The source parser has explicit knowledge of the source file format and syntax in order to be able to extract the information needed for constructing a diagram. This knowledge is specific to each particular source file type and indeed could change over time or be different for different embodiments of the invention. Separating source parser from the diagram parser via the internal data model in this manner allows for an implementation that can rapidly adapt to different source file formats without requiring changes to the fundamental diagram generation process. Hence a single implementation might support a number of different XML syntaxes or indeed other file formats altogether perhaps structured text similar to a windows .ini file or any other arbitrary input format. Such an implementation would have to have one source parser implementation for each supported format but only a single implementation of each of the internal data model diagram parser and rendering engine .

In addition in certain embodiments some of the information needed to create the sequence diagram may not be explicitly provided in the source file but is instead derived from the available data once it has all been parsed. In such case it is not viable to directly generate rendering engine commands from a single pass through the source file but instead data must be stored until a complete set can be created. In the example the complete list of actors can only be determined once all of the message elements have been parsed. However the complete list of actors has to be known before the diagram can be generated.

Once the above XML of source file has been parsed into internal data model diagram parser processes such internal data model and generates a sequence of diagram drawing commends. For the above example and an exemplary Rendering Engine API the set of commands could be as follows 

Rendering engine receives the above drawing commands and generates the exemplary sequence diagram of . As shown in sequence diagram includes title of A Simple Diagram as specified in the above exemplary XML source file . Further sequence diagram includes actors A B and C as defined by the above exemplary XML source file. Sequence diagram illustrates via arrow that actor A says Hello to actor B. Sequence diagram illustrates via arrows and that actor B says Hello there to actor A and Hi to actor C. Finally sequence diagram illustrates via arrows and that actor C says G day to actors A and B.

It should be recognized from the illustrative conversation used in the above example that the flow of any application e.g. communication protocols etc. can be described in an XML source file which is used by sequence diagram generator to generate a sequence diagram representing the flow of such application.

Turning to an operational flow diagram of a sequence diagram generator according to one embodiment is shown. In operational block a source parser receives a textual source file that is in non proprietary language e.g. XML and defines a flow for an application e.g. a conversation between two or more actors a communication protocol etc. . In operational block the source parser builds based on the textual source file a data model for a diagram of the flow defined by the textual source file . In operational block diagram parser generates based on the data model corresponding drawing commands. In operational block responsive to receiving the drawing commands a rendering engine renders a sequence diagram representing the flow defined by the textual source file .

As mentioned above in certain embodiments XML is used in the source file for describing the sequence or flow of an application. Exemplary XML elements that are used in one embodiment are described further below.

As mentioned above according to one embodiment a sequence is defined in the XML using a SequenceDefinition Element. The various XML elements that make up a sequence description in one embodiment are provided in Table 1 below.

It should be noted that to support operation of serial single pass XML parsers the GroupDefinitions element should appear prior to the ActorRoleMap and the ActorRoleMap prior to any Heading Link or Message elements. The order of ActorRole elements within the ActorRoleMap defines the left to right order of the Actors in the diagram.

Heading Link and Message elements can all appear zero or more times and be in any order. Their order defines their top to bottom placement down along the vertical time axis in the diagram.

The SequenceDefinition Element attribute definitions according to one embodiment are provided in Table 2 below.

The ActorRole Element attribute definitions according to one embodiment are provided in Table 3 below.

In view of the above embodiments of the present invention enable automatic generation of high quality sequence diagrams from simple textual descriptions. Such automatic generation of sequence diagrams addresses issues of uniformity of style standardized layout ease of maintenance and the ability to handle arbitrarily large data sets or rapidly regenerate diagrams when data changes which are problematic in manual creation maintenance of sequence diagrams.

As described embodiments are provided that support textual descriptions written in a non proprietary language e.g. XML . In the past proprietary languages have been defined to describe the message exchanges for example EventStudio http www.eventhelix.com EventStudio . One embodiment of the present invention enables use of XML a non proprietary language to express the input data to the diagram generation engine. Numerous free and commercial tools are widely available for writing and editing XML files. The syntax and structure of XML is widely known and easily learned. The use of XML a standard and well supported language makes it quicker and easier for end users to achieve their goals without having to learn new or proprietary languages. An exemplary definition of an XML format for specifying sequence transactions is provided above. An XML schema can thus be developed explicitly defining the syntax of the transaction files. Of course the scope of the present invention is not limited to the particular syntax described herein but rather any suitable syntax that may be developed may be utilized in accordance with the concepts described herein.

Certain embodiment of the present invention further enable interactive editing of the message definition data. That is a graphical user interface GUI is provided that allows a user to edit the input data source file on screen and then regenerate a sequence diagram on demand to see the consequences of the changes made to the input data. This is achieved by loading the source file in its entirety into an intermediate variable. The content of this variable is displayed in the GUI as editable text. Each time the user requests regeneration of the diagram the content of this variable is fed into the source parser as if it had come from the source file itself. This speeds up the development of valid input data by providing immediate feedback of how the generated diagram will appear.

Further certain embodiments of the present invention provide a command line engine for static diagram generation. That is a command line engine is provided that allows diagrams to be automatically generated and saved to files and or displayed. This allows the diagram generation process to be integrated into the end user s publishing automation processes. In one example of such an embodiment the command line engine received as input a set of command line parameters defining the list of input files Source files to be processed the desired diagram file format and the destination directory into which the generated files i.e. the generated sequence diagrams should be written. Below is an example of such a command line according to one embodiment 

In this example all files found in the directory c My xml that match the pattern .xml are processed one at a time by the diagram generator. For each input file the generator creates an output file in JPEG format in the directory c My Pictures . Such an embodiment allows the automatic generation of tens hundreds or even thousands of sequence diagrams without user interaction being required for each generation. The command line engine may also be used to generate diagrams on demand. One embodiment in which this makes sense is for a Test Manager application in which each test case could have a unique description including the definition of a sequence. In order to avoid the maintenance cost of keeping diagrams in online help up to date with the content of each test case the Test Manager application could generate via the command line engine the diagram for any given test case on demand when the user opened the help page for that particular test case.

Certain embodiments of the present invention further provide a runtime engine for dynamic diagram generation. This allows the ability to provide a runtime engine that can be integrated into GUI applications and can generate diagrams on demand from data provided dynamically by the encapsulating application. An example of this approach is the automatic generation of a sequence diagram from a sequence of packets captured by a Protocol Analyzer. In such an application the source file is the captured data packets. The implementation of the source parser in this application extracts information from each captured packet in order to build up the internal data model from which the diagram showing the flow of packets can then be generated. In such an application the diagram can be generated on the fly as each packet is captured or on demand when the user of the Protocol Analyzer application requests a diagram for the set of packets currently in the capture buffer.

In certain embodiments the sequence diagram generator can be implemented as part of an overall document generation tool. Thus the automatic generation of sequence diagrams can be integrated into wider document automation processes dynamically generating the diagrams that are integrated with enclosing text taken from common or diverse sources and combined into a final integrated document.

An example of this approach is the automated generation of a specification document in HTML from an original specification written in XML. The XML would contain the complete specification details including both the specification text and the sequence diagram definition s .

The advantage of this approach is that the content of the specification can be captured and maintained in a single source file while the publication quality output including sequence diagrams can be automatically generated. The appearance of the generated output can be changed quite independently from the content which is stored in the original XML source file.

The process can be extended to provide batch processing of a number of input specifications one after the other. For example a group of specifications might be grouped together in a single directory or spread across a number of directories from a common root. In this case the document generator can be designed to iterate over the directories searching for input files of the right format and processing each in turn. Input files might be recognized by a defined file naming convention by being located in a predefined directory or sub directory or by inspecting their content looking for a match to the expected XML format.

Turning to an exemplary system is shown in which a document generator and sequence diagram generator are implemented as separate components that may be used in parallel to generate an overall document having both text and sequence diagrams from a source file which in this case is an XML source file. In this case source parser of the primary document generation application parses the input source file to build up its internal data model . For instance data model identifies the elements in the source file such as the textual elements and sequence diagram elements that are described in the source file . For the sequence diagram elements identified by source parser the source parser may include in data model such information as an identifier indicating that the corresponding portion of the source file describes a sequence diagram element the source file name and or the output file name to be used for the generated sequence diagram generated in the manner described below by the diagram generator as examples. The internal data model built by source parser maintains the relationships and hierarchy of the various elements e.g. textual elements and sequence diagram elements described in the source file . Thus the resulting output document can be generated to maintain the relative order in which the various textual and sequence diagram elements occur in the source file .

From data model document generator generates the various sections of the output document in this example in HTML. More specifically the document parser uses the information in data model to identify the textual portions of source file to be written to the HTML output document as well as identifying the sequence diagram elements. Each instance of a sequence diagram definition in the source file becomes a reference in the generated HTML document to an external image file e.g. an tag .

The input source file is also fed to the diagram generator application which creates an output diagram file for each sequence diagram definition in the source file in the manner described above. In this example upon document parser encountering a sequence diagram element identified in the internal data model for source file such document parser invokes diagram generator and causes such diagram generator to generate the corresponding sequence diagram. Thus the sequence diagram generator accesses the source file identifies the corresponding sequence diagram element defined therein and generates the appropriate sequence diagram based on the source file s description in the manner described above e.g. with sequence diagram generator of . That is source parser parses the XML source file and populates internal data model with information corresponding to the identified sequence diagram s described in such source file in the manner described above in connection with . The diagram parser parses the internal data model and generates drawing commands to rendering engine in order to generate a sequence diagram file in the manner described above.

Thus in this exemplary embodiment the source parser of the document generator reads the source text checks the syntax and builds an internal data model representing all the information read from the source to be included as textual content in a document to be generated while source parser of sequence diagram generator reads the source text checks the syntax and builds an internal data model representing all the sequence diagrams described in the source . The data models and preserve the hierarchy and relationships expressed in the source e.g. of the textual content and the sequence diagrams . The document parser of the document generator processes the model data to identify the sections to be generated in the document and extract the content for each section. Document parser then generates a sequence of output formatting commands to the HTML Generator . HTML Generator transforms the formatting commands into well formed HTML and writes it to the output file .

Thus document generator uses the source file to create the text for the output file and to create references e.g. hyperlinks to the sequence diagrams identified in the source file and the diagram generator creates the sequence diagrams identified in the source file . Accordingly in certain embodiments reference may be a hyperlink within document to the corresponding sequence diagram such that a user may click on the hyperlink to access the corresponding sequence diagram . In other embodiments the sequence diagram may be displayed within document at the corresponding reference .

Turning to an exemplary system is shown in which a sequence diagram generator is integrated within a document generator application . In this case the features of the diagram generator are integrated with the document generator . The input source file is parsed once by source parser and the document parser and the diagram parser share the common internal data model Thus source parser in this example parses the textual content information and the sequence diagram information contained in the source file while maintaining the relationships and hierarchy of such source file . The document parser invokes the diagram parser for each sequence diagram definition found in the input source file .

In one sense this document generator configuration of is a simpler solution as it eliminates the need to communicate information between two separate applications to identify the input file and the desired output file name and location for each generated sequence diagram. All this information is now contained within the one application.

The sequence diagram generator and document generator are in one embodiment software code stored to computer readable media and executable by a processor based device such as a personal computer PC . However it should be understood that the elements of the sequence diagram generator and document generator described above may be implemented in software hardware and or a combination thereof.

Although the present invention and its advantages have been described in detail it should be understood that various changes substitutions and alterations can be made herein without departing from the spirit and scope of the invention as defined by the appended claims. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the disclosure of the present invention processes machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present invention. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

