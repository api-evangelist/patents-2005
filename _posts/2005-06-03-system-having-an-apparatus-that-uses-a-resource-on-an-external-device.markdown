---

title: System having an apparatus that uses a resource on an external device
abstract: A system comprises a media player adapted to receive a removable medium. The media player is adapted to couple to a display device. A device external to and communicatively coupled to the media player comprises storage. The media player stores information on the external device's storage. Such information is used by the media player when rendering on said display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09063941&OS=09063941&RS=09063941
owner: Hewlett-Packard Development Company, L.P.
number: 09063941
owner_city: Houston
owner_country: US
publication_date: 20050603
---
There is a general desire to increase the functionality and performance of an electronic device such as a media player. All else being equal unfortunately the cost of a device usually increases as the device s functionality is increased.

Certain terms are used throughout the following description and claims to refer to particular system components. As one skilled in the art will appreciate computer companies may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function. In the following discussion and in the claims the terms including and comprising are used in an open ended fashion and thus should be interpreted to mean including but not limited to . . . Also the term couple or couples is intended to mean either an indirect or direct electrical connection. Thus if a first device couples to a second device that connection may be through a direct electrical connection or through an indirect electrical connection via other devices and connections.

Referring to a system is shown comprising an apparatus coupled to a device that is external to the apparatus. In the exemplary embodiments discussed herein the apparatus comprises a media player but in general the apparatus can be other than a media player such as a set top box. As a media player the apparatus is adapted to receive a removable medium and play content stored on and or related to the content of the removable medium. In some embodiments a removable medium comprises an optical disc. In general the apparatus is any apparatus that in at least some modes of operation can function as a standalone device without assistance from an external device . The content of the disc may comprise video audio graphic or other types of information. The disc may contain for example a movie that the media player plays through a display device coupled to the media player . The display device may comprise a television or other suitable monitor and may comprise video and audio playback capability. The media player may be operated by a user via controls provided as part of the media player or via a remote control . Such controls permit a user to perform various actions such as play stop pause rewind fast forward etc.

In accordance with embodiments of the invention the media player uses one or more resources provided by the external device . The external device may comprise a computer or a stand alone storage device. In either case the external device comprises remote storage software a network interface through which the external device connects to a network and a central processing unit CPU . Storage is referred to as remote storage to signify that storage is located external to the media player . The network may comprise the Internet or other network from which information can be downloaded for storage in the external device s storage or in the media player to the extent the media player has any built in storage capacity. Because the media player uses the external device s resources i.e. the remote storage and network interface such resources need not be duplicated in the media player thereby enabling the media player is to built at lower cost yet still provide enhanced functionality described below that the storage and network interface enables. Moreover the media player can receive a disc encoded so as to take advantage of such enhanced functionality and the media player can provide such enhanced functionality albeit by taking advantage of resources available in the external device. In some scenarios a user may already have a personal computer which functions as external device . By obtaining a media player implemented according to the teachings of the present invention and connecting the media player to the user s existing computer the resulting system is bestowed with enhanced functionality without the user having to purchase a media player that itself contains the storage and network interface resources sufficient to provide such enhanced functionality.

In some embodiments the interface may comprise a universal serial bus USB connection. The VFS communicates with the remote storage in the external device by way of a USB mass storage class protocol. For those USB standards that do not permit a peripheral device to invoke an operation on a host the external device periodically polls a USB endpoint to determine if the VFS has a request targeting the external device. In the example of a request to retrieve data from remote storage when the VFS sends the request the external device e.g. the remote storage receives decodes and processes the request and returns the specified data to the VFS and a USB endpoint. The VFS receives the data from remote storage and then decodes and processes the data. In other embodiments the interface may comprise an Institute of Electrical and Electronics Engineers IEEE bus or other interface.

The player accepts a disc . The disc may contain one or more applications e.g. Java applets that are executed on the player and interact with the playback control engine . In response to a user for example pressing a play button on the remote control the playback control engine receives a play list from the VFS . The play list contains references e.g. pointers to one or more clip files stored on disc that comprise the content e.g. movie the user desires to play. The playback control engine requests each clip file in succession from the virtual file system and provides each such clip to the presentation engine . The presentation engine decodes each clip file and generates corresponding video and or audio output signals to be provided to the display .

The VFS comprises an application programming interface API that facilitates access by a device e.g. the playback control engine to the disc local storage and remote storage . The disc may have a file system stored on the disc and thus the term virtual file system is used simply to differentiate the player s file system from any file system that the disc may contain. The VFS provides a mapping for example between requests for files and the physical location of such files which may be on the disc the media player s local storage or the external device s remote storage . The mapping provided by the VFS permits the playback control engine to submit a request for a file yet be oblivious as to the location of the requested file. Instead the VFS bears the onus of keeping track of the location of the various files.

While some discs may not contain an application other discs do contain such an application. The application may perform any one or more of a variety of functions. For example an application may enable a user to selectively cause a file to be downloaded from the network to the external device via the external device s network interface . In at least one embodiment upon loading a disc into the player the application contained on the disc begins to execute on the player. The application may automatically cause i.e. not requiring a prompt from a user software on the external device to access a pre defined website to determine if files associated with the disc currently loaded into the player are available to download. Such a pre defined website may be encoded into the software in any suitable form such as a uniform resource locator URL or Internet Protocol IP address. The application will cause the VFS to pass on the identity of the pre defined website e.g. URL IP address to the external device which uses the identity to access the target website. The software is executed by the external device s CPU . If a file has already been downloaded there may be a more recent version of that file on the pre defined website. At any rate the user of the media player may be provided a menu of choices on display from which to choose and may choose one or more files to download. Alternatively the application may have been programmed to make a choice on behalf of the user or the creator of the disc or other party and to automatically download one or more files without offering choices to the user.

Software described above may comprise an application that receives commands from the media player and interacts with other software or hardware in the external device to effectuate the commands. If a command for example requires access to a website via network interface software interacts with other software that is present to provide network connectivity to the external device. Such other software may comprise for example a network interface controller driver.

The file s to download may be any desired type of file. For example the files may contain subtitles associated with the movie that was released on disc before such subtitles were available. Another example of downloadable files associated with media content on disc include movie trailers. Upon pressing a button on remote control with a particular disc loaded into the player the media player may cause such a file to be downloaded via the external device thereby using the network resource provided by the external device.

Each file that is downloaded to system is associated with a particular disc. Such downloaded files as well as the play lists index table movie object and clip files associated with a particular disc are associated with each other by way of the VFS. This association is referred to as binding. That is these various files are bound together. The binding permits the VFS to keep track of which files are associated with each other. In one embodiment the downloaded bound files associated with a particular disc are stored in local storage when a user loads that disc into the player so that the files will be available to the media player. In some embodiments the media player does not have any local storage and thus the remote storage is used in place of the media player s local storage for the downloaded bound files. In still other embodiments the media player has only a limited amount of local storage and logic is provided to manage the use of the local storage for the downloaded bound files associated with the currently loaded disc .

If the media player has local storage and has sufficient capacity in the local storage to store a new file a file to be downloaded via external device is downloaded by the media player through network interface with assistance from the external device and transferred to local storage . If however the media player does not have any local storage or an insufficient amount of local storage for storing the new file or possibly for other reasons the new file is stored instead in the remote storage of the external device . The VFS updates its mapping binding to reflect that the downloaded file is at a particular physical location in either local or remote storage . Thus when the playback control engine or application subsequently requests that particular previously downloaded file to play the VFS is able to access the file regardless of its location.

In at least one embodiment the VFS is by default disabled from providing access to one or more or all resources e.g. remote storage network interface on the external device . For example remote storage is disabled by default and network interface is enabled by default. The VFS responds to various API invocations with regard to external device . An application may access a query API invocation to VFS . In response to the query invocation the VFS reports whether an external device is in fact connected to the media player . Using the query API or other API invocation an application may also request the amount of available space on remote storage . The application can also choose to enable the VFS to access the external device s resources. The application invokes an enable remote storage function of the VFS API for example to cause the VFS to enable access to the remote storage . Alternatively the application can choose for the VFS to continue to be disabled from accessing the remote storage. In some embodiments an enable API function generally applies to all resources in the external device at least all of those resources that the media player is capable of using. In some embodiments multiple API functions are provided with each such function enabling access to a specific resource in the external device. For example access to the remote storage can be enabled without regard to other external device resources. In other embodiments an enable API may be provided that enables or disables multiple or all resources of the external device.

In some embodiments the default configuration of the VFS with regard to enablement or disablement of resources on external device depends on the type of disc that is inserted into the player. For example the default configuration can be different for discs that have applications compared to discs without applications. If the disc contains an application the remote storage is disabled by default and remains disabled unless the application enables it as described herein. However if the disc does not contain an application for example a high definition movie HDMV disc then the remote storage is enabled by default. In this way remote storage can be enabled for discs that are not otherwise able to modify the default setting.

An application may also invoke a disable API to cause the VFS to disable access to the external device. Further still multiple disable API functions may be provided each such disable function causing access to be disabled to certain external device resources.

An application may invoke an enable API function that accepts a boolean parameter to signify whether one or more external device resource are to be enabled or disabled. If the value of the boolean parameter is true the target resource s are enabled and if false the target resource s are disabled. Other embodiments may inverse the interpretation of the boolean parameter.

In some embodiments the connection between the media player and the external device may not have sufficient performance characteristics e.g. bandwidth maximum latency etc. to enable files to be streamed directly from the remote storage to the playback control engine without intervening buffers on the media player .

In some embodiments the media player has only a limited amount of local storage . Earlier discussion explains what happens when a user desires to download a new file into a system that has no or insufficient local storage for the newly downloaded file. The following discussion pertains to the operation of system when a user loads a disc into the player when one or more files e.g. clip files play lists etc. have already been downloaded to the system relative to and bound to that particular disc. The operation of the media player in this situation depends on the location of the previously downloaded files either in the local or remote storage whether the media player even has any local storage and to the extent the media player has local storage the available free capacity of such local storage. The following discussion pertains to the previously downloaded files bound to a particular disc. There are other files that are also bound to the disc such as clip files play lists etc. Such other files are stored on the disc itself and need not be loaded into local storage .

If the previously downloaded files bound to the currently loaded disc are located on local storage such files are accessed from local storage. If however the previously downloaded files are located on remote storage then such files may be transferred to the media player s local storage if present. As described earlier such transfers may instead occur between playback sessions. If the media player does not have any local storage or if directed by local storage cache policies in effect the files are simply accessed from the remote storage as needed. In some embodiments the media player transfers information e.g. downloaded files in its entirety from the remote storage to the local storage and uses such transferred information from the local storage. In other embodiments the media player uses the information directly from the remote storage without first causing the information to be transferred in its entirety to the media player. The scenario in which the media player has local storage but the relevant previously downloaded files are located on remote storage will now be described.

In the embodiment in which the files the media player are to use are located on remote storage the playback control engine builds a list of one or more physical file locations that will be used during a playback session at the outset of the session. In this embodiment the playback control engine issues requests to the VFS prior to the beginning of the session to build a list of the actual physical file locations and is thereafter able to directly access all physical files to be used during the playback. If an embodiment provides the interfaces to support direct access by the playback control engine to files stored in the remote storage then intermediate buffering of remote files is not performed and the media player accesses the files directly from remote storage without first copying them to local storage . However if player does not provide direct access by the playback control engine to remote storage then one or more of such files to be used which are not already present in local storage are transferred to local storage prior to the commencement of each playback session.

The media player may comprise local storage but the local storage may have insufficient capacity to store additional files associated with a newly loaded disc. For example subtitle files trailers etc. associated with a particular disc may already be loaded into local storage of the media player but if the user loads a new disc into the player the local storage may not have enough capacity for the files currently stored in remote storage associated with the newly loaded disc. This scenario is addressed by the media player being able to use the local storage as temporary storage for the currently loaded disc s downloaded bound files.

In one embodiment each application comprises the following functionality depicted in . The actions depicted in are performed when the user loads a disc into player and an application stored on the disc being loaded for execution by the player. Upon execution of application the application ascertains whether previously downloaded files that are bound to the disc can be stored in the local storage of the media player . At action of the application requests the VFS to report the available i.e. free capacity of the media player s local storage for storing additional information. The VFS also lists the previously downloaded files if any bound to the relevant disc and the size of each such file. The application determines the collective size of the bound files. If the capacity of local storage is sufficient for storing the bound files decision then control passes to action in which the local storage is used store the files which may be retrieved from the remote storage . If however the local storage has insufficient available capacity for storing the relevant bound files perhaps due to local storage already containing files associated with other discs then application causes the contents of the local storage to remote storage to be altered. Altering the contents comprises an action such as copying some or all of the contents of the local storage to the remote storage in the external device to make room for the new bound files or deleting some or all of the contents of the local storage. In at least one embodiment the local storage has sufficient capacity for the downloaded bound files associated with only a single disc. Accordingly the application stored on each disc is responsible for managing the use of the player s local storage to accommodate the downloaded files for that disc. In one embodiment applications are provided with sufficient permissions to be able to delete files in local storage that are associated with other discs i.e. are not bound to the current disc thereby enabling the currently executing application to manage local storage. Alternatively if such permissions are not given the embodiment automatically deletes at least one unbound file in local storage to service the local storage requests of the currently executing application relieving applications of the responsibility for managing local storage.

The actions performed by the application in assume that the VFS of media player is capable of responding to the inquiries from the application as explained above. In other embodiments the application first ascertains whether the media player is capable of permitting the application to perform the actions such as illustrated in . Any mechanism can be employed to enable the application to ascertain the nature of the VFS . For example a VFS API function can be provided or a reserved bit in a register readable by the application can be set to a defined value e.g. from 0 to 1 or vice versa to indicate whether the VFS as the functionality described above. If upon determining the available functionality the application determines the VFS is not equipped to enable the actions to be performed the application proceeds without performing one or more actions illustrated in . In this situation the media player is not coupled to an external device and presumably has sufficient local storage to accommodate all files associated with the discs that have been played on player . If application however determines by reading the bit that the VFS is equipped to enable embodiments such as that illustrated in to be performed then media player s local storage is used as described above.

In another embodiment the media player has no local storage and thus the VFS communicates the lack of local storage to the application. In this scenario the application does not attempt to copy contents of local storage because there is no local storage and the application simply defers to the VFS for coordinating access to the previously downloaded files from remote storage .

In yet another embodiment the VFS comprises the functionality described above regarding the use of the local storage as temporary storage. In this embodiment the VFS receives a request from the application for one or more previously downloaded bound files associated with the disc loaded into the player. Upon the first such request for that particular disc the VFS determines the available free space of the local storage compares that amount of space to the collective size of the downloaded bound files for the current disc saves contents of the local storage to the external device s storage if necessary and then uses the local storage for the files associated with the current disc. Once the contents are copied to the remote storage that portion of the local storage that contained the copied contents is marked as available to be overwritten.

In another embodiment the VFS copies current contents of the local storage to make room for new files on an as needed basis. Accordingly rather than copying all of the contents of the local storage at once to make room for all of the previously downloaded files bound to a newly installed disc the VFS performs the copying to remote storage of the current local storage contents and retrieving the new file s in a piece meal fashion similar to the operation of some types of cache memory.

In some embodiments the VFS comprises encryption decryption logic EDL . In other embodiments the EDL is provided separate from the VFS. The EDL encrypts downloaded information pertaining to a particular disc and stores the encrypted information on the storage of the external device . In a reciprocal action the VFS retrieves the encrypted information from the storage in response to a request for such information from for example an application or playback control engine and the EDL decrypts the encrypted information. The VFS then provides the decrypted information to the request of such information. Any suitable mechanism for encrypting and decrypting can be implemented. For example any of a variety of public key private key based techniques can be employed. The private and public keys are stored in the VFS of the media player. Encrypting the information may be desired to protect the information from unauthorized copying and use. For example the information may comprise copyrighted subject matter and encrypting such subject matter provides added protection.

As explained above some discs have an application and other discs may not have an application . Those discs that do have the application are able to take advantage of the media player s ability to gain access to the external device s resources storage network connectivity . However a disc that does not have such an application can still be played on media player albeit possibly without the benefit of the external device s resources. A disc without an application benefits from external device resources when played on a media player that supports direct access to remote files by the playback control engine as described previously. In that embodiment the playback control engine uses remote storage as if it were the local storage .

The above discussion is meant to be illustrative of the principles and various embodiments of the present invention. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. For example the media player can be connected to a plurality of external devices. In such an embodiment the media player can use one or more resources e.g. storage network connections of each of the plurality of external devices. Further information can be downloaded using the external device and loaded onto a portable USB storage device. The USB storage device can then be connected to a USB port on the media player e.g. interface comprises an externally accessible USB port and the media player obtains the requested information from the USB storage unit. It is intended that the following claims be interpreted to embrace all such variations and modifications.

