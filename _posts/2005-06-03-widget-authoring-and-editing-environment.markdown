---

title: Widget authoring and editing environment
abstract: An authoring environment for creating and/or editing user interface elements such as widgets used in a unified interest layer. The authoring environment facilitates creation of widgets that have a consistent appearance and mechanism, and allows third-party developers to easily create widgets that have a look and feel that is consistent with a predefined set of widgets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546543&OS=07546543&RS=07546543
owner: Apple Inc.
number: 07546543
owner_city: Cupertino
owner_country: US
publication_date: 20050603
---
This patent application claims priority under 35 U.S.C. 120 as a continuation in part of co pending U.S. patent application Ser. No. 10 877 968 filed on Jun. 25 2004 entitled Unified Interest Layer for a User interface by Chaudhri et al. the disclosure of which is incorporated herein by reference.

This patent application further claims priority from U.S. Provisional Patent Application No. 60 642 025 filed on Jan. 7 2005 for Unified Interest Layer Widgets by Chaudhri et al. the disclosure of which is incorporated herein by reference.

This patent application is related to U.S. Provisional Patent Application 60 583 125 filed on Jun. 25 2004 for Procedurally Expressing Graphic Objects for Web Pages filed on Jun. 25 2004 and U.S. patent application Ser. No. 11 144 384 entitled Procedurally Expressing Graphic Objects for Web Pages to Williamson et al. filed on Jun. 2 2005 the disclosures of which are incorporated herein by reference.

The present invention relates generally to graphical user interface elements and more particularly to authoring and editing graphical user interface elements.

A hallmark of modern graphical user interfaces is that they allow a large number of items to be displayed on a screen at the same time. The leading personal computer operating systems such as Apple MacOS X and Microsoft Windows XP provide user interfaces in which a number of windows can be displayed overlapped resized moved configured and reformatted according to the needs of the user. Taskbars menus and other UI elements provide mechanisms for accessing and activating windows even when they are hidden behind other windows.

Although many users appreciate the ability of such user interfaces to present such a wealth of information on the screen simultaneously the resulting information overload can be somewhat overwhelming. Users often find that it is difficult to navigate to a particular UI element or window or to even locate a desired element among a large number of onscreen elements. The problem is further compounded when user interfaces allow users to position the on screen elements in any desired arrangement including overlapping minimizing maximizing and the like. Such flexibility may be useful to some users but may result in chaos for other users. Having too many items on the screen simultaneously leads to information overload and can act as an inhibiting factor in the effective use of the computer equipment.

Some user interfaces dedicate certain areas of the screen for holding certain user interface elements that are commonly used such as a menu bar or icons that activate commonly used programs or files . However such areas are generally limited in size so as not to occupy too much valuable screen real estate that could otherwise be devoted to the main workspace area of the display screen. Although small elements such as a digital clock element or taskbar may be well suited for display in such dedicated screen areas other types of elements cannot be usably presented in such a small screen area thus they must be activated or enlarged before they can be used or viewed. This causes yet another level of confusion since the items need to be activated and dismissed. Furthermore the items may overlap or otherwise add to the number of onscreen elements that must be dealt with and organized by the user.

These problems cause many users to fail to use their computers to their full potential and can further result in frustration or confusion particularly in novice users.

What is needed is an authoring environment for creating light weight focused easy to use user interface elements widgets that can be activated or deactivated as part of a unified layer overlaying or replacing the standard desktop user interface. What is further needed is an authoring environment that facilitates creation of widgets that have a consistent appearance and mechanism. What is further needed is an authoring environment that allows third party developers to easily create widgets that have a look and feel that is consistent with a predefined set of widgets.

According to the techniques of the present invention an authoring environment is provided for creating and or editing widgets for use in a user activatable dashboard also referred to as a unified interest layer . Widgets created using the techniques of the invention can have any or all of various characteristics selectable by the widget author including for example the ability to expand and or collapse two sided appearance allowing a user to flip the widget over to see additional user interface elements scrolling regions and the like.

In one aspect the present invention allows a widget author to select a theme the invention then provides functionality for consistently applying the themes to elements of the widget being created.

The dashboard can contain any number of widgets for quick access by a user including widgets created using the authoring environment of the present invention. In response to a command from a user the dashboard is invoked and the widgets are shown on the screen.

Once the dashboard has been activated the user can interact with any or all of the widgets and can configure the dashboard by adding deleting moving or configuring individual widgets as desired. When the user wishes to return to the normal user interface the user issues a command causing the dashboard to be dismissed. Once the dashboard has been dismissed the previous user interface state is restored allowing the user to resume normal interactions with the operating system.

In one aspect the dashboard when activated temporarily replaces the existing user interface display. In another aspect the dashboard partially obscures the existing user interface display but allows some part of the existing display to be visible so as to remind the user of its presence. In another aspect the existing user interface display is faded blurred and or darkened while the dashboard is active.

Widgets can be of any type. They can communicate with a remote server to provide information to the user for example a weather report or they can provide commonly needed functionality for example a calculator or they can act as an information repository for example a notepad or calendar . Some widgets can provide a combination of these types of functions.

In one aspect the present invention is implemented as an application programming interface API to allow third party developers to create and distribute additional widgets that provide different types of functionality.

In one aspect the present invention includes functionality for selecting and applying a template for a widget and for configuring and testing operation of a widget as it is being developed.

One skilled in the art will recognize that these Figures are merely examples of the operation of the invention according to one embodiment and that other user interface arrangements and modes of operation can be used without departing from the essential characteristics of the invention.

The present invention is now described more fully with reference to the accompanying Figures in which several embodiments of the invention are shown. The present invention may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather these embodiments are provided so that this disclosure will be complete and will fully convey the invention to those skilled in the art.

In one embodiment the present invention is implemented as an authoring environment that runs on a personal computer workstation handheld computer mobile device consumer electronics device or the like. One example of an implementation of the present invention is in a Macintosh personal computer running the MacOS X operating system. Referring now to there is shown an example of an architecture for a system for implementing the present invention. Personal computer includes processor memory input devices such as keyboard and mouse and output device such as a display screen. A graphics module such as a graphics card may be provided for generating output for output device . Author interacts with system by providing input via device and viewing output via device . Computer also includes local storage such as a hard drive and can also include network connection for accessing remote server . These components are well known hardware components commonly used for running software applications. In one embodiment software embodying the invention is provided on a computer readable medium such as local storage .

The personal computer used to run the authoring functionality of the present invention may be the same computer that is used for displaying and using widgets in a dashboard or it may be a different computer. For example the authoring functionality can be implemented on a development machine while the dashboard and widgets are installed and run on a user s machine.

The dashboard also referred to herein as a unified interest layer includes a number of user interface elements also referred to herein as widgets. These user interface elements or widgets generally include software accessories for performing useful commonly needed functions. Examples of widgets include without limitation a calendar a calculator an address book a package tracker a weather module and the like. In one embodiment some widgets may interact with remote sources of information such as servers to provide information for example a weather module may retrieve live weather data from a remote server. Widgets may be interactive so that a user performs common input operations such as clicking a mouse or typing on a keyboard to utilize the functionality of a widget.

Users interact with and or configure widgets as desired. In one embodiment users can move widgets around the screen and can resize widgets if applicable. Some widgets may be resizable and some may be of fixed size the widget author may specify whether a widget can be resized. Some widgets may automatically resize themselves based on the amount or nature of the data being displayed. In one embodiment widgets may overlap one another. In another embodiment widgets do not overlap one another if the user attempts to move one widget to the position occupied by another widget one of the widgets may automatically move out of the way to make room. In one embodiment the position configuration and size of widgets are saved when the dashboard is dismissed so that the same state can be restored the next time the dashboard is invoked.

In one embodiment some or all widgets are associated with related fully functional applications providing expanded versions of the functionality of the corresponding widgets. These widgets include a button or icon or other element for quickly launching the associated application. When a user clicks on the button the dashboard is dismissed the normal desktop user interface is reactivated and the associated application is automatically launched. For example as will be described in more detail below a music player widget can include a button for launching a fully functional music player application containing additional features beyond what is available in the widget.

In one embodiment a button can be provided for accessing a website web page or web based application having functionality or information related to a widget. When a user clicks on the button the dashboard is dismissed the normal desktop user interface is reactivated a web browser is launched and the web page or the like associated with the widget is automatically launched. For example a stock quote widget may include a button for accessing a website that includes more detailed information on a portfolio or on a particular stock. In another embodiment related fully functional applications websites web pages or web based applications can be accessed by other means than a button within the widget. For example such functionality can be launched via an onscreen icon or menu or via a keystroke or key combination.

In one embodiment the fully functional application or related website provides context for a launched widget. For example if the user has highlighted a word in a document before activating a dictionary widget the dictionary widget s text field is automatically populated with the highlighted word. In one embodiment a word search is automatically activated and the results automatically displayed so that activating the dictionary widget causes a definition to be displayed without any further user interaction. Similarly if an email message is open on the user s screen when an address book widget is launched the address book is automatically opened to a page corresponding to the contact information for the sender of the email message. In one embodiment such pre population or automatic opening is not performed under certain situations such as for example if the widget is already open to another page or entry. In one embodiment the user can configure the operation of the widget including whether or not such prepopulation or automatic opening occurs and under what circumstances it should occur. One skilled in the art will recognize that there are many other situations where a widget can use context information from a currently running application or website.

In one embodiment some or all widgets have rollover elements these are user interface elements that appear when the onscreen cursor is moved over the widget. The rollover elements disappear when the onscreen cursor is moved so that it is no longer over the widget. In one embodiment rollover elements only appear if the cursor is held over the widget for at least a predetermined period of time such as half a second. An example of a rollover element is a volume ring not shown for music player application.

In one embodiment widgets are preinstalled on the user s computer so that dragging them onto the dashboard merely makes them active. In another embodiment widgets are not preinstalled but are installed in response to the user dragging them onto the dashboard. In another embodiment dragging a widget onto the desktop causes code for the widget to be downloaded from a remote server and installed on the user s machine. In another embodiment installing a widget in this manner also causes a fully functional application containing related functionality to be automatically installed as well although the user can be given the option to decline such an installation for example installing a music player widget can cause a fully functional music player application to be installed as well. Authentication and payment may be prerequisites for such operations in some embodiments. Additional description of widget installation mechanisms is provided in related U U.S. patent application Ser. No. 10 877 968 filed on Jun. 25 2004 entitled Unified Interest Layer for a User interface by Chaudhri et al. the disclosure of which is incorporated herein by reference.

Referring now to there is shown an example of a software architecture for implementing widget functionality according to one embodiment. Operating system is a conventional operating system for a personal computer such as MacOS X from Apple Computer Inc. of Cupertino Calif.

In one embodiment software architecture includes dashboard server dashboard client s and widget s . Dashboard configuration information is used by server and or clients to specify the configuration options for displaying widgets . All of the dashboard configuration information including access levels and the like if applicable is stored in dashboard configuration information . As described above such information may include dashboard configuration information for two or more dashboards configured by the same user or by different users.

In one embodiment widgets are displayed using HTML and related web technology. Dashboard server manages and launches dashboard client processes. Each dashboard client loads a widget which in one embodiment is an HTML webpage and related resources needed to display the page. In one embodiment a client is initiated for each widget to be displayed. In one embodiment clients display widgets without a conventional window frame menu bar or other components typically associated with on screen windows this provides a clean straightforward display of the overall dashboard that avoids confusion and clutter. Clients display widgets by rendering web pages into a WebView the size of each WebView is defined as metadata associated with the corresponding widget . Server is a window server that provides data for rendering a layer that can be overlaid on the normal desktop of the user interface. Widgets are rendered into the separate layer and then that layer is drawn on top of the normal desktop so as to partially or completely obscure the desktop while the dashboard is active.

Dashboard server is a lightweight process that can stand alone or be imbedded in another process. Server can be located at computer or at remote server . Server provides the following functionality 

Non widget UI. In one embodiment server handles user interface functionality that is not directly related to widgets. This includes for example activation deactivation dashboard background background animations and the like.

Window management. In one embodiment server acts as a lightweight window server for the dashboard client processes. Windows are created in server process and then passed to dashboard clients . Operations performed on windows go through dashboard server . Such operations include for example resizing moving fetching of position and size and the like. One advantage to having window operations pass through server is that server can then react to widget changes and update the overall environment. For example server can cause displayed widgets to bounce off of each other stick to sides of the screen snap to grids or the like.

Fast login. In one embodiment dashboard clients are launched and then rendered into a window from dashboard server . Since this can take some time dashboard server provides an initial image to be rendered in the window while client is launched so as to improve visual feedback and to make initial activation animation appear instantaneous. As dashboard clients load and render they take over the window and draw their content.

Event management. In one embodiment server acts as an event server as well as a window server. Events come from the operating system window server to dashboard server and are routed to the appropriate dashboard client . This indirection allows for a variety of features including server side dragging even if a dashboard client is hung filtering of events insertion of server generated events and the like. Dashboard clients communicate with server to describe control regions so that server can initiate server side drags correctly.

Loading widgets . In one embodiment server is responsible for loading widgets . It maintains the list of widgets to load when starting up. In one embodiment the dashboard client corresponding to a particular widget is not launched until the first time the dashboard is activated.

Arbitration of widgets . In one embodiment server is the arbitrator of dashboard clients . It controls the process and passes information to and from each widget . If a widget crashes dashboard server re launches the process automatically. It also prevents crash loops where a widget crashes repeatedly at startup. In one embodiment all communication to a widget goes through dashboard server first.

CoreImage integration. In one embodiment server uses CoreImage technology as described in related U.S. Utility patent applications cross referenced above. Filters are applied to the background window of the server to provide spotlight and ripple effects.

Widget preference management. In one embodiment server stores in configuration information that is stored according to a conventional file system preferences associated with widgets and vends those preferences to widgets .

In one embodiment each client is a lightweight process that uses for example objects defined as part of a development environment such as Cocoa Application Framework also referred to as the Application Kit or AppKit described for example at available at http developer.apple.com documentation ReleaseNotes Cocoa AppKit.html . Clients can be implemented as simplified browser screens that omit conventional interface features such as a menu bar window frame and the like. In one embodiment clients provide the following functionality in implementing the present invention 

Control of the WebView. Client creates a WebView and attaches the HTML of widget to the WebView. Client acts as the delegate for user interface requests made by the WebView. In one embodiment client overrides much of AppKit s default behavior as it regards to communication to server and event handling. WebViews are generic controls for viewing and manipulating HTML and XHTML they are described for example at available at http developer.apple.com documentation Cocoa Reference WebKit ObjC  classic index.html .

JavaScript extensions. In one embodiment client inserts a custom object in the JavaScript runtime of the WebView. This allows for a variety of extensions for widgets including without limitation copy cut paste getting setting preferences notifications when preferences have changed opening a linked application for example a widget may include a button or other trigger that causes a corresponding application to be launched quitting moving resizing and the like.

Managing Plug ins. Some widgets use native code as part of their implementations. In one embodiment client includes the capability to interface with such native code and or with databases and data stores available locally or remotely. In one embodiment widgets also have the ability to create a custom AppKit NSView. A widget developer can use a custom view to enable other types of animations such as OpenGL views plug ins such as Flash and the like.

In one embodiment plug ins are implemented as follows. An ObjC bundle is loaded from a resources folder associated with widget . The bundle has two methods on its Principal Class 

In one embodiment each widget is implemented as an HTML file. The HTML file can reference other local and remote resources such as style sheets other HTML files JavaScript files images and the like. Widgets can be implemented using for example a flat bundle file format or a packaged HTML file format.

The Info.plist describes widget . It also provides an identifier for widget and points to the main HTML file and default PNG file. The default PNG file is used as a temporary display while dynamic elements are loaded from server . An example of a structure for Info.plist is as follows 

My.html can reference any other local resource as well. In one embodiment the resources are specified relative to the HTML file s location.

My.png can have any name based on the DefaultImage key in the Info.plist. This image is rendered by server if there is no cached representation.

In another embodiment widgets include any or all of the following components an HTML file containing the structure of the widget a cascading style sheet CSS file containing style elements a default portable network graphics PNG file containing the image shown as initial background for widget an icon file and other PNG files as desired or appropriate. In one embodiment an operating system component known as dashboard uses these elements to generate a view of a widget on screen.

In one embodiment widgets are stored locally in storage device such as a hard drive. Per machine widgets are stored at for example 

Widgets can also be made available on a per user basis particularly in situations where more than one user uses the same computer . Per user widgets are stored for example at 

One skilled in the art will recognize that these configurations are merely exemplary and that any other file format or directory structure can be used.

In one embodiment widgets can be developed using WebKit described for example at Web Kit Reference for Objective C available at http developer.apple.com documentation Cocoa Reference WebKit ObjC classic index.ht ml . Additional functionality can also be provided such as the ability to drag to and from web pages detect control regions stop plug ins and timers from firing when the dashboard is hidden and the like. In one embodiment such additional functionality is provided using an enhanced Canvas architecture as described in related U.S. Provisional Patent Application 60 583 125 filed on Jun. 25 2004 for Procedurally Expressing Graphic Objects for Web Pages filed on Jun. 25 2004 and U.S. patent application Ser. No. 11 144 384 entitled Procedurally Expressing Graphic Objects for Web Pages to Williamson et al. filed on Jun. 2 2005 the disclosures of which are incorporated herein by reference. In addition web extensions that are well known in the art can be used for providing additional functionality such as drag and drop capability detection of control regions and the like.

For widgets that involve additional more detailed rendering than is available from WebKit HTML a tag is provided. A CoreGraphics context is fetchable from the tag and JavaScript is then used to draw into the context and effectively the HTML page. Detailed description of this implementation can be found in the related applications.

In one embodiment some or all widgets communicate with a remote server in order to perform their functions. For example a weather widget requests current weather data from a remote server while a package tracking widget requests current data regarding package locations from a remote server . Such communication takes place according to well known techniques for requesting and receiving information across a network such as the Internet widget or client forms a request for data and transmits the request according to HTTP or some other network protocol server responds to the request with the information and widget uses the information in forming the output that will be displayed to the user. In one embodiment these operations take place in response to JavaScript code within widget . Server can be a resource that is available generally to the public or it can be a proprietary source of information to which the user has been given access. Where appropriate authorization and or user verification can be required before server transmits requested information. If desired the information can be transmitted across a secure channel and or encrypted prior to transmission according to techniques that are well known in the art.

In one embodiment the present invention provides an environment for authoring and editing widgets . The environment provides easy to use tools that allow an author to create new widgets debug their functionality and edit existing widgets .

In one embodiment the widget authoring environment is implemented as a document based editor of widgets. The author opens a new document within the authoring environment sets or changes widget parameters as desired saves the changes. Widget files including .html .css .js .png and the like are then automatically generated based on the author selected parameters. In one embodiment these files are saved into a bundle specified by the author.

In one embodiment documents within the authoring environment have a unique file extension such as .wdgt. Thus the user can edit existing widgets previously created within the authoring environment by opening a .wdgt file.

The following is a description of a software architecture and user interface of implementing such a widget authoring environment according to one embodiment.

Referring now to there is shown a block diagram depicting components of a widget authoring environment according to one embodiment.

Text editor Many components of a widget are text based files such as .html .css and JavaScript. Text editor supports editing of these text based components from within authoring environment . In one embodiment text editor provides appropriate syntax highlighting as needed and leverages text editing functionality found in Xcode as is well known in the art. In addition support is provided in one embodiment for users to designate third party text editors for use in connection with authoring environment .

Runtime debugger UI Widgets can be run within runtime module of authoring environment for testing purposes. In one embodiment runtime module includes debugger functionality that provides visibility into variables and environmental conditions and allows the author to control execution on a step by step basis in order to evaluate and correct bugs.

Graphics generator In one embodiment a graphics generator is provided which is capable of automatically generating widget elements. Graphics generator supports themes primary and secondary color usage and the like. In one embodiment graphics generator employs CoreImage and CoreGraphics software code bases in implementing its functionality.

In one embodiment as shown in authoring environment is implemented in a client server environment including a client component running on client machine and a server component running on a server . This arrangement protects the authoring environment from the running of a widget that could cause crashing or problems during runtime. The authoring environment is server based when a widget is run a client application is spawned and the client communicates to the server using for example Mach messages.

When a widget author is ready to begin creating a new widget he or she chooses from a palette of themes colors and functionality in attribute area that can be accessed at any time to change theme color and the like for a widget .

The attribute area displays a set of predetermined attributes for the user interface element . The attribute area is comprised of configurable attributes using a theme selector a color scheme selector a shape selector an expandability selector and a sidedness selector . The theme selector allows the author to select a theme for the user interface element . In the depicted example the theme is glass. The color scheme selector allows the author to select a color scheme for the user interface element . In the depicted example five different predetermined color scheme are shown with the one on the far left selected as indicated by the outline around the color scheme. The shape selector allows the author to select the shape of the user interface element . In the depicted example the author has chosen rounded rectangle. An example of another shape can be seen in . The expandability selector allows the author to choose whether or not the user interface element will include the ability to expand and collapse via a collapsible region as discussed further in conjunction with . The sidedness selector allows the author to choose whether the user interface element will be one sided or two sided as described in conjunction with .

The preview area displays the user interface element . As the author selects one or more of the predetermined attributes the user interface element display is updated to incorporate the selected attributes.

The universal area if present provides functionality for manipulating other aspects of the user interface element . The user interface also includes a close button for closing out of the create screen and choose button for choosing to create the user interface element designed therein. After selecting choose the author can edit the user interface element for example as described in conjunction with .

In one embodiment widgets can be created that have a front side and a back side. Initially the front side is shown. The author can click on an icon or activate a command to flip the widget over in order to reveal the back side and can click again or activate the command again to flip it to its front side. Thus auxiliary functionality such as preference controls can be made easily accessible without occupying excess screen real estate.

The user interface element display area displays the user interface element being edited in design mode. Three regions of the user interface element are shown if the user interface element is collapsible. The dividers separating the regions may be repositioned by the author. The user interface element displayed in is similar to the calendar widget of .

The contents area shows the various objects included in the widget including those for the front and back sides of the widget and may also include a files area described in conjunction with . The objects may include text objects input fields images and the like.

The library area includes various objects that can be added to the widget such as various buttons and controls. The library area is separated into objects for the front side and back side of the widget . As the document user interface displays the front side of the widget the back side are of the library is grayed out or otherwise shown as inactive. To add an object to the widget the author can drag the object into the contents area or the user interface display area .

In addition to the contents area described in conjunction with a files area is displayed. The files area inlcudes the files that make up the widget such as code containing files in .html .css or .js format. Objects are further editable by the author via a context sensitive inspector such as windows shown in .

In window shown in the author has selected text bullets. Menu allows selection of the specific appearance of bullets. Menu allows selection of a position for the bullets.

In window shown in the author has selected number bullets. Menu allows selection of the specific appearance of bullets. Menu allows selection of a position for the bullets.

In window shown in the author has selected image bullets. Field allows the author to type in the filename for an image to be used for bullets. Window provides a preview of the image. Button allows the author to select a custom image. Menu allows selection of a position for the bullets.

Edits made in windows D are incorporated into the document user interface when the author closes the window.

In one embodiment the authoring environment also includes a debugger for testing the functionality and operation of widgets during development. For example for widgets that use JavaScript technology a JavaScript debugger can be included that permits the author to set breakpoints inspect variables step through the script and the like.

When the author wants to test widget he or she enters a test mode. All of the appropriate files for widget .html .css .js .png and the like are generated and run from a temporary location for testing purposes. If desired a console window is provided to log runtime errors or provide other information and interaction capability. Referring now to there is shown a screen shot depicting a JavaScript debugging environment according to one embodiment. Environment includes the ability to step through functions set and hit breakpoints evaluate functions and variables global and local and log and see errors and warnings. Pane shows variables pane shows current breakpoints and pane shows the code being run.

The author can open an existing widget from within the authoring environment and can then edit and save widget . In one embodiment when an existing widget is opened from within the authoring environment the files associated with widget are parsed and internal structures are set up as appropriate. The widget being edited is then shown in a view similar to that depicted in . The author can then make changes as desired to the various parameters of widget and save the changes. Updated widget files including .html .css .js .png and the like are then automatically generated based on the new parameters.

The following is a list of examples of widgets that can be authored using the techniques of the present invention. One skilled in the art will recognize that many other types of widgets can be authored.

For many of these widgets the widget obtains information from online data sources via a network in response to queries generated based on user input. The online data sources provide information that is used to generate the widget display. In one embodiment those widgets that obtain their information via a network include a visual indicator to let the user know whether or not the displayed data is live. In one embodiment such widgets also display the date and time of the most recent data update.

In one embodiment clock widget changes in appearance according to the time of day. For example a light colored face can be shown during the day and a dark face can be shown at night. Referring again to clock widget A has a light colored face because the local time in San Francisco is 11 28 am while clock widget B has a dark face because the local time in London is 7 28 pm. In one embodiment other distinguishing visual characteristics are used to denote day and night. In one embodiment local times from 6 00 am to 6 00 pm are indicated as being daytime while local times from 6 00 pm to 6 00 am are indicated as being night time. In another embodiment actual sunrise and sunset times are used for controlling the appearance of clock widget based on the selected location for the clock widget and further based on sunrise sunset information retrieved from stored tables or from a resource such as a website . In another embodiment a continuous gradation is used so that times near sunset or sunrise are shown in some gradation between the dark and light colored faces such times may also be shown in a pinkish hue to further reinforce the sunset or sunrise time period.

In one embodiment display lights up or otherwise changes in appearance to indicate that calculator widget is active. For example display may light up when the user first clicks somewhere within widget and may stay lit until the user dismisses widget or clicks somewhere outside widget . While display is lit widget is active and can receive user input via the onscreen cursor or via a keyboard or other input device.

In one embodiment operator keys light up when clicked and stay lit until the next key is pressed so as to remind the user what operation is being performed. For example in the division operator key is lit signifying that the user has clicked on that key and reminds the user that the current operation is a division operation. In one embodiment operator key stays lit until another operator key is pressed or until the clear button is pressed or until equals key is pressed in another embodiment operator key stays lit until any other key is pressed.

Referring now to there is shown an example of a dictionary thesaurus widget according to one embodiment. A user can type a word in text input field and can select dictionary or thesaurus functionality by clicking on text labels or respectively to see either definition or synonyms . If either definition or synonyms do not fit within the bounds of widget widget can auto resize accordingly or can display arrows for accessing the rest of the information. Thumb index can also be presented allowing the user to quickly access other words that appear on the same dictionary page as the entered word. In one embodiment a reverse lookup dictionary not shown can also be provided the user enters a definition or part thereof and widget responds with one or more words that match the entry . In one embodiment data for the dictionary thesaurus is stored locally at computer in another embodiment the dictionary thesaurus widget retrieves its data from a remote server .

In one embodiment the theaters shown are based on a target location for example a ZIP code entered by the user or known to the widget based on previously entered or derived user data . Theaters within a predefined or user specifiable radius of the target location are shown.

The user can click on the information button to see a synopsis movie poster representation and other information as depicted in . The user can click on back button to return to the previous display. The user can click on the ticket purchase button or the preview button to purchase tickets or view the video preview.

When a movie is selected in the list a quality rating appears one to five stars . The user can click on information button to see more information about the movie or can click on Add Movie to add the selected movie to the user s queue.

In one embodiment a distinctive graphic appears within the widget for example along the top edge of the widget to denote the type of conversion being performed. For example for length conversion a ruler graphic is shown for speed conversion a speedometer graphic is shown and for temperature conversion a thermometer graphic is shown . One skilled in the art will recognize that these graphics can take any form and that the Figures are merely exemplary. In one embodiment these graphics are animated.

In one embodiment weather widget can be expanded or collapsed in response to rollover or in response to the user clicking on a button for expanding and collapsing. For example shows weather widget in an expanded state while shows it in a collapsed state where the forecast is not shown.

In one embodiment graphic shows a moon when it is night and sun when it is day assuming that conditions are clear . Weather widget uses the local machine s internal clock or obtains current time information over a network to determine the time of day or night. In one embodiment when the moon is shown the correct current phase of the moon is depicted. shows a number of widget states for various phases of the moon.

Other examples are shown in in which graphic depicts rain and in which graphic depicts lightning. Any or all of these can be animated if desired. Sound effects can also be provided for example when the user rolls over widget or clicks on it.

In one embodiment the lookup is based on a target location for example a ZIP code entered by the user or known to the widget based on previously entered or derived user data . Listings within a predefined or user specifiable radius of the target location are shown. In one embodiment listings are displayed as the user types updated automatically with each key stroke so the user need not hit Enter or some other button to activate the lookup operation. In one embodiment widget waits for a typing pause of some particular length for example one second before looking up and displaying listings. In one embodiment each listing includes the name of the business telephone number distance from the target location and address. The user can click on a listing to see more information including for example a map reviews or the like. In one embodiment the user can add any displayed listing to a personalized address book for example by clicking on a button not shown adjacent to the listing.

In one embodiment any or all of the above described widgets and or any or all of the widgets described in the above referenced related application include animation or other motion based elements. For example a clock widget can include moving hands and other elements.

In one embodiment the dashboard is also available to a user from a remote location. Configuration information for the user s dashboard is stored at a remote server pursuant to a user command or automatically. The user can then log in from a remote computer or other device and be presented with a web page that duplicates the user s dashboard as it would be viewed from his or her own computer. Widgets are provided via HTML pages per the extended functionality described above. The user can interact with widgets in the same manner as from his or her own computer.

In one embodiment an author can generate a widget based on a template. Referring now to there is shown a user interface for selecting and applying a template for a widget and for configuring and testing widget according to one embodiment.

In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the invention.

In particular one skilled in the art will recognize that other architectures and graphics environments may be used and that the present invention can be implemented using graphics tools and products other than those described above. In particular the client server approach is merely one example of an architecture for providing the dashboard functionality of the present invention one skilled in the art will recognize that other non client server approaches can also be used.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and modules presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatuses to perform the method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules features attributes methodologies and other aspects of the invention can be implemented as software hardware firmware or any combination of the three. Of course wherever a component of the present invention is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present invention is in no way limited to implementation in any specific operating system or environment.

It will be understood by those skilled in the relevant art that the above described implementations are merely exemplary and many changes can be made without departing from the true spirit and scope of the present invention. Therefore it is intended by the appended claims to cover all such changes and modifications that come within the true spirit and scope of this invention.

