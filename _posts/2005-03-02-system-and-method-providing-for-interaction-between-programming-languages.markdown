---

title: System and method providing for interaction between programming languages
abstract: Interaction between programming languages includes receiving a command from a user, where the command is written in a first programming language. The first programming language is converted to an intermediate language. Translations are performed between the intermediate language and a second programming language to provide interaction between the first and second programming languages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07406683&OS=07406683&RS=07406683
owner: Cisco Technology, Inc.
number: 07406683
owner_city: San Jose
owner_country: US
publication_date: 20050302
---
This invention relates generally to the field of telephony applications and more specifically a system and method providing for interaction between programming languages.

Legacy telephony applications have been based upon a structured language such as C. The legacy telephony applications have existed within an entire system such as a traditional circuit based Public Branch Exchange. However recent developments in both software and hardware have lead to the development of telephony solutions that comprise a number of different language applications which are not compatible with the legacy telephony applications. These applications may be based on a number of different languages such as C Java or C .

In accordance with the present invention a system and method providing for interaction between programming languages are provided that substantially eliminate or greatly reduce disadvantages and problems associated with previously developed systems and methods. In particular the present invention contemplates a system and method providing for interaction between programming languages.

According to one embodiment of the present invention interaction between programming languages includes receiving a command from a user where the command is written in a first programming language. The first programming language is converted to an intermediate language. Translations are performed between the intermediate language and a second programming language to provide interaction between the first and second programming languages.

In another embodiment a system providing for the interaction between programming languages includes a command line interface that can receive commands from a user in a first programming language. The system includes an endpoint that has a stack written in a second programming language. A mediation layer facilitates interaction between the first programming language and the endpoint written in the second programming language. The mediation layer includes an executable that receives commands from a user an object oriented language layer that tests the functionality of a stack by invoking methods on the stack and an interface that facilitates interaction between the executable and the object oriented language layer.

Certain embodiments of the invention provide one or more advantages. A technical advantage of one embodiment may include providing a common language to unify disparate systems. Unifying disparate systems provides for systematic testing processes which ensures a consistent behavior from a quality assurance perspective. For example a test process may be implemented for one language based application and that same test may be executed on a different language based application without modification of the test process. In this example the quality assurance testing cycle is shortened. Other embodiments of the invention can be adapted to other programming languages that may be implemented in telephony applications. As an additional advantage multiple language based systems may be mapped to a common language allowing users to use the system without having to know the underlying programming language. This reduces the amount of training needed to test and maintain systems.

Certain embodiments of the invention may include none some or all of the above technical advantages. Other technical advantages may be readily apparent to one skilled in the art from the figures descriptions and claims included herein.

First language and second language may include any different programming languages. First language and second language include a specific syntax and semantics. The syntax includes the spelling grammar or format of the programming language. For example first language may be a scripting language such as Tool Command Language TCL and second language may be an object oriented language such as Java each having a different syntax and unable to communicate directly. The semantics include the instructions and commands used in a language. First language and second language may include any suitable combination of languages that may interact through mediation layer .

Mediation layer processes information that performs the interaction between a first language and a second language . In one embodiment mediation layer includes first interface translation module and second interface that combine to implement the language interaction.

First interface and second interface may represent any suitable port or connection real or virtual including any suitable hardware software or combination of the preceding that allow a first language and a second language to exchange information with other components of system . First interface and second interface may include any suitable application programming interface API that facilitates the interaction between first language and second language . First interface and second interface convert the syntax and semantics of the received languages into an intermediate language.

Translation module translates the syntax and semantics of first language and second language . Translation module may perform translation of the syntax and semantics of first language and second language in any suitable manner. The syntax and semantics of first language and second language include the format of the language and the specific instructions and commands used in a language that allow programs to work. For example translation module executes procedures to translate first language and second language into a common language.

In operation mediation layer receives first language and second language . First interface and second interface convert the syntax and semantics of first language and second language respectively into an intermediate language. Translation module performs translations on the intermediate language to implement a common language between first language and second language .

An element of system may include any suitable configuration of an interface logic and memory for performing the operation of the element. Logic refers to any suitable hardware software or combination of hardware and software. For example logic may comprise a processor. Memory refers to any structure operable to store and facilitate retrieval of information used by a processor and may comprise Random Access Memory RAM Read Only Memory ROM magnetic drives disk drives Compact Disk CD Drives Digital Video Disk DVD drives removal dialog storage any other suitable data storage device or a combination of any of the preceding.

Modifications additions or omissions may be made to the system without departing from the scope of the invention. For example translation module may mediate the interaction between first language and second language by only translating the syntax between first language and second language but not translating the semantics of first language and second language . As another example system may support the interaction between programming languages for any suitable purpose and between any suitable different programming languages. As used in this document each refers to each member of a set or each member of a subset of a set.

Moreover the operations of system may be performed by more fewer or other modules. For example system may have one or more first interface and second interface . The components of system may be integrated or separated according to particular needs. Additionally the operations of system may be performed using any suitable logic comprising software hardware other logic or any suitable combination of the preceding.

Scripting language may include any suitable high level programming language that is interpreted by another program while the program is executing rather than being compiled by a computer s processor. Scripting language is used to write a program. Scripting language may include JavaScript Tool Command Language TCL Practical Extraction and Report Language PERL or any suitable scripting language .

Object oriented language may include any suitable language that combines data structures with functions operating on these data structures to create re usable objects. Object oriented language may also include files arrays lists records or other suitable data structure. Examples of object oriented language include Java C Smalltalk or any suitable object oriented language.

Mediation layer mediates the interaction between script language and object oriented language . Mediation layer may include first interface second interface and translation module coupled as shown. Translation module may include flattening module message queue and mapping agent coupled as shown. First interface and second interface receive scripting language and object oriented language respectively and process the syntax and semantics of the languages to an intermediate language.

Translation module receives the intermediate language from first interface and second interface and translates the syntax and semantics of the intermediate language. Within translation module flattening module and mapping agent translate the intermediate language from first language and second language . Flattening module flattens an object from object oriented language into a series of characters that scripting language can understand. Mapping agent translates scripting language commands into method calls that object oriented language can understand.

Message queue stores the results of flattening module and mapping agent for later retrieval. Message queue may include any suitable memory or storage that retains information for retrieval.

In operation mediation layer receives scripting language at first interface and object oriented language at second interface . At first interface and second interface the syntax and semantics of the received languages are converted into an intermediate language. Flattening module flattens the objects of object oriented language into a series of characters that scripting language can understand. Mapping agent translates the intermediate language of scripting language into objects that object oriented language can understand. This translation allows scripting language to exercise methods on a stack of object oriented language . After flattening module flattens the objects of object oriented language the result is stored in message queue . The information stored in message queue may later be retrieved.

Modifications additions or omissions may be made to system without departing from the scope of the invention. Additionally any suitable logic comprising software hardware other logic or any suitable combination of the preceding may perform the functions of system .

First language commands may include any appropriate scripts of scripting language. First language commands that are scripts include a list of commands that may be executed. In the illustrated embodiment first language commands include tool command language TCL scripts. Using TCL as a common scripting language allows the implementation of a test process for first language commands based application and executes that same test on a different language based application without modification of first language commands .

Mediation layer processes information that allows for the implementation of a common language between the different programming languages interacting. In the illustrated embodiment mediation layer is implemented as a harness. The harness executes methods in the stack of an object oriented program to verify the functionality of the stack.

The harness includes an executable that controls the process of running routines and operations on the stack of a program written in a different language requests information from the stack of the program and receives information regarding the stack of the program. Executable includes any software or code capable of controlling such processes. Executable converts first programming commands to an intermediate language. Executable is a file that a computer can directly execute without having to be compiled or assembled. Executable includes one or more first application programming interfaces API a command line interface CLI one or more first auxiliary modules and one or more worker threads coupled as shown.

Interfaces in system may represent any port or connection real or virtual including any suitable hardware software or a combination of the preceding that allow first language scripts to exchange information with other components of system .

First API may include a control API or any appropriate API that facilitates the interaction between programming languages. In the illustrated embodiment First API represents a connection that initiates the process of testing the stack of a second language. First API may also include interfaces that deliver commands from first language commands to first auxiliary module .

CLI includes or allows the coupling of any number or arrangement of any suitable input device as well as any suitable output device. CLI includes a user interface thread that determines whether the command from the user executes first language commands . CLI may receive an input from a user that includes commands designating what to test execution commands or any other suitable command.

First auxiliary module converts the syntax and semantics of first language commands to an intermediate language. First auxiliary module may be any suitable module that may convert the syntax and semantics of a programming language with any suitable software or code.

Worker threads interact with first auxiliary module to convert the syntax and semantics of first language commands . Worker threads may include any suitable software or code.

An object oriented language OOL Native Interface facilitates the interaction between executable and object oriented layer within mediation layer . OOL Native Interface may include any suitable interface that bridges the gap between a scripting language and an object oriented language. For example OOL Native Interface may be a Java Native Interface. In the illustrated embodiment system uses OOL Native Interface to integrate executable and object oriented layer . OOL Native Interface determines how the second programming language such as object oriented language integrates with first language commands such as TCL scripts that a user executes.

The harness also includes an object oriented language OOL layer that contains one or more second application programming interfaces API one or more second auxiliary modules and a message queue coupled as shown. OOL layer converts the intermediate language to a second programming language. For example OOL layer may be a Java layer and converts the intermediate language into Java. OOL layer also flattens the objects into a series of characters and places the series of characters into message queue . OOL layer also provides notification of the objects to executable . OOL layer may include any appropriate software or code to implement the functions of OOL layer .

Second API may include a control API or any appropriate API that facilitates the interaction between programming languages. Second API may also include interfaces that deliver commands from executable to OOL layer . For example second API may convert the syntax of an OOL to an intermediate language C.

Second auxiliary module converts the syntax and semantics of the second programming language to an intermediate language. Second auxiliary module may be any suitable module that may convert the syntax and semantics of a programming language with any suitable software or code.

Message queue stores the results of second API and second auxiliary module for later retrieval by executable . For example message queue may include a series of characters that results from flattening an object. Message queue may include any suitable memory or storage that retains information for retrieval.

Endpoint may be any combination of hardware software or a combination of the preceding that provides communication services to a user. Endpoint may include for example Internet Protocol IP telephony devices personal computers call managers proxies or any other suitable device. IP telephony devices may include telephones fax machines computers running telephony software gateway devices or any other device capable of performing telephony functions in an IP network. Endpoint includes a user interface a processor a network interface and a memory coupled as shown.

User interface receives commands data or other suitable information from a user to enact processes of endpoint . From user interface endpoint may initiate calls route calls authenticate calls or any suitable feature of endpoint . User interface includes or allows coupling to any number and arrangement of input devices such as microphones keypads pointing devices and other suitable input devices as well as any suitable output devices such as speakers displays light indicators or other appropriate output devices.

Processor processes commands data or other suitable information of endpoint . Processor may include a microprocessor microcontroller digital signal processor DSP or any other suitable hardware software or a combination of the preceding operable to execute instructions and manipulate data to perform operations.

Network interface exchanges information. Such information may include media signaling or a combination of the preceding or control information with other networks call managers or other endpoints .

Memory stores and facilitates retrieval of information used by endpoint . In the illustrated embodiment memory includes stack and API . As an example memory may store information a user inputs into endpoint . Examples of memory may include Random Access Memory RAM Read Only Memory ROM magnetic drives disk drives Compact Disk CD drives Digital Video Disk DVD drives removable media storage other suitable data storage device or any combination of the preceding.

Stack is a set of protocol layers that work together to process any suitable protocol. In an embodiment stack may be a Java Session Initiation Protocol SIP stack that processes SIP messages. Stack may include any software or code operable to process the protocol. Stack includes one or more programming language Application Programming Interfaces API . API may include a control API or any appropriate API that facilitates the operation of endpoint .

According to an example embodiment of operation a user executes the harness to begin testing endpoint . In response to the execution of the harness executable creates CLI . Executable also loads OOL layer and stack into memory of endpoint . From CLI a user may execute first language commands . Executing first language commands initiates the exercise of first API . Additionally executing first language commands creates worker thread which interacts with first auxiliary module . First auxiliary module massages the information passed by first language command to create an intermediate language. First auxiliary module also activates second API in OOL layer through OOL Native Interface . Activating second API in OOL layer causes second auxiliary module in OOL layer to interact with second API . From the intermediate language created by first auxiliary module second auxiliary module creates appropriate second programming language objects and invokes appropriate methods on stack . In an embodiment such methods include methods to test the functionality of endpoint . Once the methods have been invoked on stack stack calls back the appropriate methods in OOL layer .

To provide the resultant information to executable second auxiliary module in OOL layer flattens the information into a series of characters and places the information in message queue . Executable may retrieve the series of characters from message queue using second API . The flattened objects are each assigned an identification that is part of the flat object. Executable takes the resultant information and processes it further. In an embodiment the additional processing by executable may verify the functionality of stack . Executable uses the object identification in subsequent operations to be performed on that object. In an embodiment the object identification and the flattened object depict whether endpoint is working properly.

Modifications additions or omissions may be made to system without departing from the scope of the invention. Additionally any suitable logic comprising software hardware other logic or any suitable combination of the preceding may perform the functions of system .

At decisional step a determination is made whether the command includes executing scripts of a first language. If the command does not include executing a first language s scripts a determination is made whether the command is to terminate the system at decisional step . If the command is to terminate the system the application is terminated at step and the method ends. However if the command does not terminate the system the command is executed at step and continues to receive commands from a user at step .

If the command includes executing scripts of a first language at decisional step the next command is read from the script at step . At decisional step a determination is made whether the application programming interface API is supported. If the API is not supported an error is returned to the user at step and the method continues from step .

If the API is supported at step the executable exercises the API at step . At step the first language script is converted to an intermediate language. An auxiliary module massages the first language script which may include a TCL script to create the intermediate language which may include C. Though the Java Native Interface JNI an API in the Java layer is activated at step . From the intermediate language created in step a second programming language object is created at step . The second programming language invokes methods on the stack at step . The stack is located in an endpoint. In an embodiment invoking methods on the stack allow the stack to be tested for functionality. The results from invoking the methods are flattened by an auxiliary module in the Java layer and stored in a message queue at step . The executable requests the results from invoking the methods at step and processes the results at step . Processing the results further verifies the functionality of the stack. If the termination condition is met at decisional step the script being processed is terminated at step and the method continues receiving commands at step . If the termination condition is not met at step the system continues reading commands from the script already executed at step .

The method described is only an example of interaction between programming languages. For example the method supports any interaction between programming languages for any suitable purpose in addition to testing purposes. Modifications additions or omissions may be made to the method without departing from the scope of the invention. The method may include more fewer or other steps. Additionally steps may be performed in any suitable order without departing from the scope of the invention.

While this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of the embodiment and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the scope and spirit of this disclosure.

