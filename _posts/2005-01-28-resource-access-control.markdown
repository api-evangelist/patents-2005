---

title: Resource access control
abstract: A method and apparatus for enabling multiple application programs to control a system's physical resources by way of multiple resource proxies, while still enabling exclusive control of the physical resource by one application program. Control tokens are used to limit control to one proxy. The proxy having the control token is tracked in an access control list. Java API methods that can alter the state of a physical resource are marked with an access control attribute during grinding. A resource management module intercepts API methods attempting to obtain control of the physical resource. If a proxy controlled by the application program invoking the intercepted method has control the method is allowed to use the proxy to control the physical resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07603719&OS=07603719&RS=07603719
owner: TVWorks, LLC.
number: 07603719
owner_city: Philadelphia
owner_country: US
publication_date: 20050128
---
The present invention generally relates to controlling access to system resources and more specifically to controlling application program access to physical resources in a multiple application environment.

Cable television operators and their equipment suppliers participate in developing various standards and specifications to enable rapid implementation of new applications and services at low cost. One result of this effort is the OpenCable platform which includes specifications for both hardware and middle ware that integrate the consumer s and operator s hardware. The middle ware software layer specifications referred to as the OpenCable Applications Platform OCAP provides for standardized application programming interfaces APIs that enable different hardware devices to operate correctly in a cable system. In practice the application programming interfaces control the operations of the physical resources of the platform hardware.

Using APIs to control the physical resources of platform hardware has proven to be highly beneficial. In fact a given physical resource often can be controlled by different application programming interfaces or by different application programs that are associated with the application programming interfaces by setting up multiple resource proxies i.e. software stand ins for a physical resource . An application program interacts with a particular resource proxy which proxy then controls a corresponding physical resource. A given physical resource can have multiple proxies thus allowing multiple applications to operate simultaneously.

While useful having multiple application programs simultaneously interacting with multiple physical resource proxies can lead to various problems and conflict. For example if one application program requires a physical resource to operate one way while another application program requires the physical resource to operate in some other way incorrect performance will likely result. Furthermore some application programs require exclusive access to a physical resource for correct performance. A way to ensure this it to have only one resource proxy per physical resource which unfortunately limits overall system performance.

Various problems in the prior art are addressed by the present invention of a method and system that enable multiple applications to access physical resources by way of multiple resource proxies while still enabling exclusive control of the physical resource by one application. Moreover the invention contemplates marking methods such as Java application programming interface API methods with an access control attribute so that a virtual machine VM such as a Java VM may intercept invocations of these methods and selectively permit a resource manager to determine whether a resource proxy of an invoking application has or is associated with an access or control token.

To facilitate understanding identical reference numerals have been used wherever possible to designate identical elements that are common to the figures.

Various embodiments of the invention enable multiple applications to access a physical resources by way of multiple resource proxies while still enabling exclusive control of the physical resource by one application. Moreover the invention contemplates marking methods such as Java application programming interface API methods with an access control attribute so that a virtual machine VM such as Java VM may intercept invocations of these methods and selectively permit a resource manager to determine whether a resource proxy of an invoking application has or is associated with an access or control token.

The invention will be described within the context of a middleware environment within a set top box STB within a cable television system. It will be appreciated by those skilled in the art that the invention finds broad applicability within any system in which multiple applications contend for resources that are accessed via more than one resource proxy.

The applications may be provided via for example Java Archive JAR files adapted for use in the target environment. The invention is generally applicable to conventional compressed and or obfuscated Java Class files as well as other file formats adapted for delivering byte code to an interpreter such as a virtual machine. Specifically an additional process denoted as Grinding may be employed in which a number of techniques are used to produce compressed Java jar files that remain directly interpretable while achieving a significant reduction in size. In this process all class method and field bindings remain symbolic thereby preserving polymorphism. The Grinding process transforms Java jars into a format denoted as a ground jar. Since a ground jar is in a different format than a Java jar it cannot be interpreted by a standard Java Virtual Machine VM but only by a virtual machine that has been grind enabled. If desired however the grind process can be reversed by an ungrinding process which converts the ground Jar file into a conventional Java jar file containing conventional Java class files which may be interpreted by standard Java VM.

Techniques methods tools and the like associated with the grinding and ungrinding processes are described in more detail in U.S. patent application Ser. No. 10 757 620 filed on Jan. 14 2004 and entitled METHOD OF TRANSFORMING JAVA BYTE CODE INTO A DIRECTLY INTERPRETABLE COMPRESSED FORMAT which is incorporated hereby by reference in its entirety for all purposes. Briefly in one embodiment of the grinding process a Java Archive JAR file is processed by removing from the JAR file at least a portion of information not necessary for running the application in the target environment mapping at least one of application defined class field and method names to shorter names and mapping at least one of target environment defined class field and method names to corresponding target device names.

The communication network comprises a cable television distribution system a satellite communication network a telephone network and or an access network providing access to the Internet. The communication network may comprise a wired or a wireless communication network.

A content provider provides content such as television programming movies data and the like to the STB via the network . A software developer may provide application software to the set top box directly e.g. pre installed or via the network . Either of the content provider or the software developer may provide preprocessed applications or application portions according to the invention such that runtime execution or interpretation results in appropriate restrictions on access to physical resources.

The STB comprises illustratively a processor as well as memory for storing various control programs and other programs and data. The memory may also store an operating system supporting the programs. The processor cooperates with conventional support circuitry such as power supplies clock circuits cache memory and the like as well as circuits that assist in executing the software routines stored in the memory. The STB also contains input output I O circuitry that forms an interface between the various functional elements communicating with the STB.

Although the STB is described herein as a general purpose computer that is programmed to perform various control functions in accordance with the present invention the invention can be implemented in hardware as for example an application specific integrated circuit ASIC or field programmable gate array FPGA . As such the process steps described herein are intended to be broadly interpreted as being equivalently performed by software hardware or a combination thereof.

The STB may be operably coupled to a number of devices or systems such as input device e.g. a keyboard mouse remote control and the like a network e.g. communications network a display device e.g. presentation device a fixed or removable mass storage device medium and the like.

The STB comprises illustratively an Open Cable platform that is adapted to process illustratively JAVA based applications that utilize techniques described herein with respect to the present invention. The applications utilize a middleware environment providing application programming interfaces APIs that enable the applications to perform various tasks including the controlling of logical and or physical resources. It will also be assumed that the application programming interfaces can cause the set top box to run or attempt to run multiple software methods.

For purposes of discussion it will be assumed that the STB has or has access to a physical resource with multiple proxies that can be controlled by application programs and that a virtual manager exists discussed subsequently that regulates the control of the physical resource by the multiple proxies. Examples of a physical resource includes a channel selector a tuner memory devices a bidirectional link as well as signals and processes that produce an electronic program guide that decrypt encrypted programs that control program access and that record or playback programs.

The invention generally contemplates two environments a preprocessing or server side environment and a runtime or client side environment. The preprocessing environment is where applications such as Java applications are processed in a manner that enables subsequent runtime control of access to physical resources.

During preprocessing the signature of each method is compared with those contained in an Access Control List ACL . Any methods found that match an entry in the ACL are methods that have been denoted as requiring high priority or exclusive access to a resource at runtime. Such methods whose signatures match an entry in the ACL are modified by setting a bit in the method access flags adding an additional method attribute or some like mechanism in a manner hat will allow a virtual machine to recognize at runtime that this method may not be invoked without first consulting the resource manager. Optional preprocessing operations may also be performed such as the compression obfuscation and or grind processing described above. Ultimately the preprocessing of an application is performed in a manner adapted for use by a runtime environment in which a control token however implemented is used to control access to one or more physical resources.

During runtime when the virtual machine is preparing to invoke a method the VM examines the control information i.e. control token associated with the method e.g. in the byte code of the class file within which the method resides . If the control token is set then a resource management function is invoked to manage access to physical resources. Proxies of methods having a control token are granted access to a physical resource those without the control token are either not granted access to the physical resource or are granted only limited access to the physical resource.

Every resource proxy has a resource client. One application may own multiple resource proxies and resource proxies may also be distributed across multiple applications. Multiple applications can instantiate common methods where each instantiated method may be attempting to modify the same physical resource. By modifying the ACL of the various methods at preprocessing contention for resources is avoided during runtime as discussed herein.

One or more physical resources are controlled via one to N proxies . A resource manager controls access to the proxies by one to M methods . The resource manager maintains an access control list ACL of the physical resources that can be controlled the proxies that can control each resource the software methods that can interact with each of the proxies and which proxy actually has control of a physical resource. The resource manager utilizes the access control list to regulate method access to the various resource proxies.

At runtime an application invokes a method that attempts to interact with a proxy to alter the state of a physical resource. The resource manager allows the action only if the proxy has been given control of the physical resource and blocks the action if the proxy does not have control. The resource manager operates to access a lookup mechanism such as a lookup table indicative of proxy access rights in response to a virtual machine request to enforce or determine such rights.

The operation of is entered at step and proceeds to step where a virtual machine VM intercepts an invocation of a method where the method asserts access control information in an attempt to interact with a proxy to alter the state of a physical resource . At step the virtual machine responsively invokes a software resource management module e.g. the resource manager which at step obtains the requested resource s proxy information from illustratively an access control list.

With the proxy information available at step a decision is made as to whether the intercepted application program s proxy is associated with a control token or identifier such as a bit or a word that determines whether the proxy may assert control of a related physical resource. If the software method s proxy has a control token then it can control the physical resource and at step the resource management module allows the application program s method invocation to run.

If the application program s proxy does not have the control token an exception is thrown at step that informs the intercepted software method that it does not have control of the physical resource .

The operation starts at step and proceeds to step where physical resources having method driven controls are identified i.e. those resources that will be controlled via proxies . At step the method of the resource proxy for the identified physical resource s of step is implemented. At step a new entry is added to the access control list ACL for the physical resource s that are controllable by one proxy at a time.

At step attribute control information is inserted into Java method access attributes for methods that can control a physical resource. Step may be performed by itself within the grind process as step G or as part of another preprocessing algorithm. A brief presentation of the steps involved in an embodiment of the grinding process will now be provided.

The Grind process may be performed by for example a server or other computing device. The Grind process of employs the following techniques during the transformation of a Java jar to a ground jar step receiving a Java Jar file for processing step invoking an archive tersing method step invoking a class tersing method step invoking an opcode replacement method step invoking an unreferenced member culling method step invoking a string pooling method step invoking a constant pool optimization method and or step invoking an obfuscation method and step providing a resulting ground Jar file. Each of these techniques will now be discussed in more detail.

Specifics regarding the above described Grind techniques are described in more detail in U.S. patent application Ser. No. 10 757 620 filed on Jan. 14 2004 and entitled METHOD OF TRANSFORMING JAVA BYTE CODE INTO A DIRECTLY INTERPRETABLE COMPRESSED FORMAT which is incorporated hereby by reference in its entirety for all purposes.

The inventors contemplate that the invention may be segmented into a server function and a client function. The server function comprises e.g. the preprocessing function including optional grind method and tools for performing the control token indication and optionally grinding which may be implemented on the server to produce a ground jar file for propagation via the network to the client . The client function comprises e.g. the Java virtual machine VM environment and general application target environment i.e. platform that interprets the ground Jar file to execute the application. Within the context of a peer to peer network the server functions and client functions may be both be implemented on client and or server devices.

The functions associated with the invention are discussed in more detail herein with respect to the various figures. The functions may be implemented as a method by one or more processors. The functions may be embodied as software instructions within a signal bearing medium or a computer readable medium including a representation of software instructions which when executed by a computing device performs a method according to the invention. The invention may be implemented as a computer program product wherein computer instructions when processed by a computer such as may be implemented by STB or content provider adapt the operation of the computer such that the methods and or techniques of the present invention are invoked or otherwise provided. Instructions for invoking the inventive methods may be stored in fixed or removable media transmitted via a data stream in a broadcast media and or stored within a working memory within a computing device operating according to the instructions.

A Java Archive JAR file may be processed to provide an executable application file adapted for a target environment and including control tokens and other information as described above according to the various embodiments of the invention. The JAR file may further be processed according to one or more of the steps of removing from the JAR file at least a portion of information not necessary for executing said application mapping at least one of application defined interface class field and method names to shorter names and mapping at least one of target environment defined interface class field and method names to corresponding target device names.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

