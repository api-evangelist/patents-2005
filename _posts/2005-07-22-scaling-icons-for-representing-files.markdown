---

title: Scaling icons for representing files
abstract: A method and system are provided for displaying icons in accordance with user preferences. The method includes providing a user with a size selection mechanism for selecting an icon size from a range of sizes. The method additionally includes searching a set of stored resources related to the underlying file and generating the icon in the selected size based upon the stored resources. The method may additionally include selecting an icon type including one of an image icon, a detail icon and a generic icon based on at least one of the user's size selection and the represented file. Furthermore, the icon display system of the invention positions labels and overlays in the vicinity of the icon based upon the selected size of the icon.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07992103&OS=07992103&RS=07992103
owner: Microsoft Corporation
number: 07992103
owner_city: Redmond
owner_country: US
publication_date: 20050722
---
This application is a continuation in part of copending U.S. patent application Ser. No. 10 831 145 filed Apr. 26 2004 and entitled System and Method for Scaling Icons. 

Icons have been used for many years in computer systems to display information to users. Icons are images that are used to represent items such as files folders shortcuts applications documents tasks and commands throughout a computer operating system such as MICROSOFT WINDOWS a product of the Microsoft Corporation of Redmond Wash. Icons are currently used in toolbars dialog boxes menus and numerous other locations in file management systems such as Windows Explorer also a product of the Microsoft Corporation. Icons are usually stored as static bitmaps but dynamic icon handlers may also be written to generate icons dynamically.

Currently two types of icons are used to represent items. These two types include traditional icons and thumbnail icons. Whereas traditional icons are typically shared across files and are determined per type thumbnails are determined per item and are not shared across files. A traditional icon is composed of two components including an icon image and a status overlay. The icon image forms the basis of the traditional icon. The status overlay is used to convey status information about the item. It is used for example to display the shortcut overlay.

A thumbnail icon is a particular type of icon displaying an image generated based on the contents of the underlying item. For example an icon for an image file that actually looks like the image itself is a thumbnail of the image file. Thumbnail icons may also include an overlay. Thumbnail icons may be dynamically generated by code run on a user computer although the generated image may be cached.

Although existing operating systems offer thumbnails these thumbnails are not well integrated into existing file management systems such as Windows Explorer. As a result the thumbnail feature is not as useful as it could be. A user has to go to a special thumbnails view to see thumbnail icons today even for objects having thumbnail icons that would be visually effective at a smaller size such as photographs. When in the thumbnails view of existing systems icons for objects without thumbnails appear small and inadequate. The user typically cannot see extra information about each file in thumbnails view as the user can in other views such as tile view or details view. Accordingly the user is often forced to choose between viewing thumbnails and viewing other important information.

Because the thumbnails feature is remote and not extensively utilized little incentive exists for Independent Software Vendors ISVs to write thumbnail generators When ISVs do write the thumbnail generators they are unlikely to invest in making the thumbnail generators powerful. As a result many existing application produce thumbnails of poor quality. Generally since thumbnails are pictures it is difficult to determine what type of item underlies a thumbnail icon. Furthermore while traditional icons appear instantly thumbnail icons are typically noticeably slow to appear because they were not generated in advance.

With traditional icons overlays are often used as a primary or only indication of information about an item underlying an icon. However overlays do not reliably appear. If multiple states need to be shown overlays will only show the highest priority state and will ignore others since no more than one overlay may be shown at a time. Overlays are difficult to recognize at small icon sizes such as the sizes generally used in list or details mode. Overlays have additional drawbacks including the ability to be readily imitated and used in an unauthorized manner. A further limitation is the inaccessibility of overlays to the visually impaired. A user navigating with the keyboard and using a narrator hears a name and type of each file as the file is selected but is not given any information about a state that the overlay represents. Additionally overlays are used inconsistently to convey information about the state of a file.

Features described herein are directed to a method for displaying an icon representing an underlying file on a user interface. The method may include providing a user with a size selection mechanism for selecting an icon size from a range of sizes. The method may further include searching a set of stored resources related to the underlying file and generating the icon in a user selected size based upon the stored resources.

In another aspect a method is provided for enhancing display of icons on a user interface. The method may provide a user selection component for allowing a user to select an icon size for an icon representing a file. The method may additionally include selecting an icon type including one of a traditional icon and a thumbnail icon based on at least one of the size selection and the represented file. The method may additionally include generating the selected icon having the selected size and icon type.

In yet an additional aspect a system is provided for enhancing icon display. The system may include a user icon scaling module for allowing a user to select an icon size for an icon representing an underlying file. The system may additionally include a resource selection module for selecting an image resource for generating the icon based on the size selection. The resource selection module may in some aspects proceed through three levels of potential icons one having an image representing the contents of the displayed object one having an image that displays details of the current object and one having a generic image common to multiple objects.

In yet a further aspect a system is provided for enhancing icon display. The system may include a user icon scaling module for allowing a user to select an icon size for an icon representing an underlying file. The system may additionally include a type selection module for selecting a type of icon including at least one of a traditional icon and a thumbnail icon the type selection based on at least one of the size selection and the underlying file.

Features described herein include a method and system for enabling scaling of icons to enhance a user experience. Icon scaling enables users to resize the icons in file management systems such as Microsoft Windows Explorer to any size in a range from a small size appropriate for looking at a long list of items to a very large size appropriate for looking at a small number of thumbnails within a single view. As an icon is resized the appearance and layout of the icon may change to best accommodate its new size.

Icons may be authored using a predetermined set of sizes such as 16 16 pixels and 32 32 pixels. When a user chooses to view an icon at a size that is not one of the predetermined sizes the scaling module may interpolate to determine what image to show the user. When the size of an icon is changed variables including the type of icon the image resource label placement and or overlay configuration may be affected as set forth herein.

The features herein are described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The features may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The features may also be practiced in distributed computing environments where tasks may be performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to the exemplary system may include a general purpose computing device in the form of a computer which may include a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit .

Computer may include a variety of computer readable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable nonremovable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to nonremovable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable nonremovable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive may be connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive may be connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices may be connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device may also be connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks.

When used in a LAN networking environment the computer may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer may include a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Although many other internal components of the computer are not shown those of ordinary skill in the art will appreciate that such components and the interconnection are well known.

As illustrated by these examples scaled icons may differ in terms of their relative size. The scaling may be done beforehand in which case multiple versions of the icon at different scales may be generated in advance and stored in a system memory. Scaling may also be performed dynamically in which a new scale version of an icon is generated at the time it is needed. The different scale versions of icons may differ in other respects as well. For example larger scale icons may have more graphical space available for additional elements such as additional overlays user interface elements more detailed images etc. and may be more complex than the smaller scale versions by including those additional features. Conversely a smaller scale icon might omit some of these features and may be simpler by comparison.

As set forth above the different icon sizes may also include different overlay sizes. As set forth above with respect to the selection and placement of overlays may be based on user selected scaling. The overlay selection module determines an overlay configuration based on user scaling input.

Two kinds of overlays include status overlays and type overlays. The overlays shown above with respect to are type overlays that indicate a type. The type overlay may be used for thumbnail icons to convey what type of object the thumbnail image portrays. The type overlays appear in a lower right hand corner of the image. Status overlays serve as a visual cue to help a user quickly identify some piece of relevant information about an item being viewed. Status overlays may appear in a lower left hand corner of an image.

One use of a status overlay includes alerting the user of a transitional or temporary state of a file upon which a user may wish to act. An example would be putting a new overlay on a file that has just recently been created. Another possible use for a status overlay is indicating relevant context sensitive information upon which a user may wish to act. An example would be putting an error overlay on a file in the download manager that could not complete downloading. In general information that is being conveyed through a status overlay should also be a property that can be used for any purpose by the user such as sorting grouping stacking filtering and searching. The information can also help the user make an informed decision as to what they want to can do with a file. For example an overlay might indicate that the file was downloaded from the Internet and has not been checked for viruses. Such an overlay would help the user decide whether to open the file or whether to first run a virus scan on it. As another example an overlay might indicate whether the associated file is available locally or if it is available remotely such as from an Internet site . A file that is not available locally might take longer to open and the user might factor that in the decision as to whether to open the file.

The overlays may scale independently from the icons. Between each defined icon snap size such as 256 256 128 128 64 64 32 32 and 16 16 the overlays may scale linearly between the two overlay sizes. Table 2 shown in shows one embodiment of the overlay sizes relative to icon sizes along a continuous range.

As illustrated in in all of the displayed configurations the thumbnail image A is drawn horizontally centered within the thumbnail icon. The vertical placement of the thumbnail image A may be determined by the type of view. If a current view has text labels placed below the icon then the bottom edge of the thumbnail image A may lie along the bottom edge of the thumbnail icon. If the current view has text labels placed to the side of the icon then the thumbnail image A may be vertically centered within the thumbnail icon.

The placement of the status overlay B may depend on the placement of the thumbnail image A within the thumbnail icon. The depicted status overlay B fits within the boundaries of the thumbnail icon. Horizontally the status overlay B may be centered around the left edge of the thumbnail image A but may be moved to the right when necessary to avoid extending over a left boundary of the thumbnail icon itself.

The placement of the type overlay C may depend on the placement of the thumbnail image A within the thumbnail icon. Vertically like the status overlay B the bottom edge of the type overlay C may lie along the bottom edge of the thumbnail image such that the type overlay C fits within the boundaries of the thumbnail icon when the thumbnail image A is bottom aligned. Horizontally like a mirror of the status overlay B the type overlay C may be centered around the right edge of the thumbnail image A but may be moved to the left when necessary to avoid extending over the right boundary of the thumbnail icon itself.

For certain predefined icon sizes such as icons between 16 16 and 47 47 pixels the label placement module may position the filename beside the icon. For example for sizes 32 32 to 47 the label placement module may provide additional tile information beside the icon. For sizes 48 48 and larger the label placement module may place the filename below the icon.

In a default mode type overlays may be shown on a thumbnail icon if and only if it is within the document library. In some instances type overlays will not be shown on photographs or video by default. A setting in the view options may be available to enable users to turn on or off the type overlays on documents. A mechanism such as an application program interface API may be provided that allows applications to associate a type overlay with each file type they own.

The width may be interpolated between the displayed sizes in a similar manner to the overlays shown in Table 2.

The top sprocket may be placed so that its bottom edge aligns with the top edge of the thumbnail image and the bottom sprocket may be placed so that its top edge aligns with the bottom edge of the thumbnail image. If the thumbnail image has a height large enough to make the thumbnail image with the sprockets higher than X pixels then the two sprockets may be moved closer to one another. The top sprocket may be moved down and the bottom sprocket may be moved up until the thumbnail image with the applied sprockets is no taller than the height X.

Other effects may include a gradient effect that may be applied to thumbnail image to make it more attractive. Furthermore a shine effect may be applied to the thumbnail image if the object type has been registered to receive such a treatment. For example POWERPOINT types may be registered to have this treatment applied to them. A thumbnail icon may also include a drop shadow effect or other visual effect.

As set forth above and as illustrated in a user scaling module receives user input such as through a graphical user interface for scaling. illustrates a user scale for allowing a user to scale icons. Users can scale icons to certain predetermined sizes such as between 16 16 and 256 256 pixels. An icon size slider may be provided in a view pane. A view mode control allows a user to switch between an icon mode and a details mode. A user can move the icon slider to adjust the icon size. The icon size slider may have snap points around sizes 16 32 48 128 and 256. If the slide control indicates a size within a few pixels of one of the snap sizes the icons will snap to that size. In some aspects if the slider control is within four pixels in either direction of a snap size the selected icons will be set at the snap size.

Additionally a view menu may have an item labeled Icon Size with the following choices appearing off a submenu Tiny Small Medium Large and Huge or similar selections that correspond to icon sizes such as 16 32 48 128 and 256. For example the view menu may be a pull down menu listing selectable options and the listed menu options may be selected by clicking right clicking etc.

As with others of the inputs described above such inputs may be entered using a graphical element such as a slider bar. Furthermore users may be able to scale icons using a hardware input such as a scroll wheel found on many mice. Moving the scroll wheel forward while holding down the CTRL key can increase the size of the icon and moving the scroller wheel backward while holding down the CTRL key can decrease the size of the icon.

In absence of user scaling the icons may have default sizes. The following Table 5 describes example default sizes of icons in various folder locations.

If the user selection requires that the icon be scaled between snap sizes the system utilizes a scaling mechanism including a mechanism for converting the icons to an appropriate format such as a graphical texture provided by MICROSOFT DIRECTX graphics technology. A hardware accelerated scaling mechanism may implement a bilinear filter or other known mechanism to perform the actual icon scaling while maintaining visual fidelity of the image. The scaling may occur in real time by the icon scaling system . The real time scaling can occur at draw time or optionally at other times.

In step A the system compares the icon size and a pre set size cutoff. If the icon size is above the pre set size cutoff in step A the system seeks a thumbnail icon in step A. If the icon is not above the size cutoff in step A the system selects and shows a traditional item in step A.

In step A the system seeks a thumbnail icon. If a thumbnail icon is not cached in step A the system attempts to extract it in step A. If the thumbnail is not cached in step A or if the extraction is successful in step A the system selects and shows the thumbnail icon in step A. If the extraction is unsuccessful in step A the system selects and shows the traditional icon in step A.

As set forth above the system may provide image snap sizes. The sizes might include for example 16 32 48 128 and 256 pixels. For every item Y at any size X the system may choose the image at the best available size for Y. In step B the system searches for the appropriate sized image X. If X is a snap size and an image for Y is available at size X in step B then the system uses the available image at size X in step B. If an image for Y is not available in size X in step B then the system determines if the largest size was searched in step B. If the largest size was not searched in step B the system searches the next largest size in step B. If the next largest image is available in step B the system uses the available icon in step B. If the image is not available in step B the system continues the search until the largest image has been searched.

Subsequently in step B if the search for larger images representing Y was unsuccessful the system determines if the smallest size has been searched. If the smallest size has not been searched the system continues to search for the next smallest size in step B. If the image is available in step B the system uses it in step B. If the icon is not available and the smallest size has been searched in step B the system uses a generic image in step B. If and only if no image can be found at any size the system will show a generic image. Although the process above is described as considering larger images prior to smaller images the reverse process is also encompassed.

If the user selection requires that the image be scaled between snap sizes the system utilizes a scaling mechanism including a mechanism for converting the images to an appropriate format such as DX9 textures. A hardware accelerated scaling mechanism may implement a bilinear filter to perform the actual image scaling. In addition to scaling the retrieved image the system also attempts to re extract at the correct size. The system uses the closest stored image it can find in the interim time. Once the system re extracts it displays the correctly sized image and also stores the new correctly sized image into a cache for subsequent retrieval. This extraction display store into cache sequence also occurs if the cache is empty and first displays the traditional icon.

The resource selection and or scaling process may also use a variety of different types of icons depending on resource availability. For example depicts an example process in which the resource selection module may select an appropriate icon for display. First in step the system may receive an icon scaling size to be used for the icons appearing in the display. This may be based on a user preference such as the scaling mechanism described above or it may be done automatically by the system as a default or user setting from hardware and or software inputs.

Once the icon scaling size is determined the system may then proceed to step in which the next or first object to be displayed may be considered. The objects may be for example the various files documents data etc. that are to be represented by the icons in the display. In step the system may check to see whether an imaging icon having a reduced size image displaying the current object s contents is available for the current object. This may be accomplished using for example the resource selection process described above and shown in . Other approaches may also be used. For example the system may make the determination based on whether a predefined imaging icon already exists for the current object. Alternatively the system may make the determination based on the object type or its data contents to decide whether a suitable imaging icon may be generated for the display.

If in step the system determines that a suitable imaging icon is available the process may move to step in which that suitable imaging icon may be retrieved and or generated and used for the display of the current object. If however the system determines that no suitable imaging icon is available the process may move to step .

In step the system may check to see if a suitable detail icon is available for the object. A detail icon may be any displayable image whose appearance depends on the contents of the current object but which falls short of an image of the object s contents. For example the detail icon might not include a display showing the object s contents in visual form e.g. a miniature image of a picture file but it may include some indicia of a type e.g. whether it is a word processing document a text document a spreadsheet an audio file a video file etc. status e.g. whether it is editable its age when it was last edited etc. or other characteristic of the object. Although the detail icon does not have an image representation of the object s contents the detail icon may still include helpful information identifying the current object. For example some or all of the overlay information described above may be incorporated or added into the detail icon such that the detail icon conveys information identifying one or more characteristics e.g. object type status contents etc. of the object. For example if the object is a word processing document e.g. a MICROSOFT WORD document but the system decided against displaying an image of the object s contents perhaps the document text was too dense to be adequately represented as a thumbnail the detail icon might display a symbol representing the fact that the object is a word processing document. The detail icon may include for example a type overlay identifying the document type such as overlay . Other object characteristics and or overlay data may also be displayed in the detail icon.

The step determination may follow the same process used in the step determination and may check to see if a suitable detail icon can be retrieved and or generated for the current object. Alternatively the system may be configured to avoid trying to generate detail icons and may instead simply check to see if a predetermined detail icon e.g. a preconfigured bitmap image already exists in the system. Simplifying this step may lead to faster performance.

If in step the system determines that a suitable detail icon is available for the object the system moves to step and uses that suitable detail icon in the display for the current object. However if no suitable detail icon is available then the system may move to step .

In step the system has determined that no suitable imaging or detail icons are available and may use a generic icon to represent the current object in the display. A generic icon may be an image that identifies the existence of an object but which provides minimal information regarding the file or none at all . For example a generic icon might be a plain shape such as a square or a blank sheet of paper to represent the existence of an object. A generic icon may be a predefined image that is common to multiple objects and in some instances may have a constant appearance that does not vary with the object contents type status etc. For example a single generic icon may be defined for use with all objects of unknown file type to the system.

By step the system will have determined whether to use an imaging icon a detail icon or a generic icon for the current object and may then check to see if any other objects are to be displayed. For example if the process is occurring in order to display the contents of a particular project folder the step check may determine whether it has identified the appropriate icon e.g. imaging detail or generic for all objects to be displayed. If additional objects remain to be processed the system may return to step to retrieve the next object and loop through the steps described above to identify an appropriate icon for the next object.

If no further objects remain to be processed then the system may terminate the resource selection process in step .

Using one or more of the features described above various icon images may be generated. A different type of icon image may be selected based on the location of the file represented by the icon e.g. files in a particular folder on the system all share a common icon and or the characteristics of the file e.g. its metadata type how recently it was accessed and or edited etc. . Additionally icon images may be selected using contents of the file e.g. a shortcut icon might retrieve the contents of the underlying file to determine the icon to be displayed .

Thus icon scaling enables users to resize icons to any size in a range from a small size to a very large size depending upon user preference. As an icon is resized the appearance of the icon and the layout of the icons changes to best accommodate its new size.

Users can in real time scale icons across the continuous range of possible sizes and the scaling is visually appealing. Thumbnail icons may consistently convey what type of object they represent e.g. Word Document PowerPoint deck video clip etc. even for thumbnail extractors written by ISVs. Overlays may be used in a consistent and reliable way as visual cues conveying some information about an item.

While particular features have been illustrated and described in detail herein it should be understood that various changes and modifications might be made without departing from the scope and intent of the description herein. The features described herein are intended in all respects to be illustrative rather than restrictive. Alternatives will become apparent to those skilled in the art. For example the scaling processes described above may work sufficiently well when scaling up and scaling down the icon size. As another example although the description above refers to icons for underlying files the system is not limited to representing files and can be used for icons representing any item on a computing system such as directories shortcuts etc.

From the foregoing it will be seen that the features described herein well adapted to attain some or all of the ends and objects set forth above. It will also be understood that certain features and sub combinations may be employed without reference to other features and sub combinations. For example the steps in the processes described above may be rearranged and or omitted as desired.

