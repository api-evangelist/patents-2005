---

title: Generating unique name/version number pairs when names can be re-used
abstract: Various embodiments of a method, system and article of manufacture provide a version number. An object has a present name and a present version number. In response to changing the present name of the object to a different name, the different name having been used by one or more other objects, one or more values of one or more first components of one or more other version numbers associated with the one or more other objects, respectively, are identified. An other version number is generated wherein a value of the first component of the other version number is different from the one or more values of the one or more first components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546322&OS=07546322&RS=07546322
owner: International Business Machines Corporation
number: 07546322
owner_city: Armonk
owner_country: US
publication_date: 20050309
---
This invention relates to versioning and in particular to generating unique name version number pairs when names can be re used.

In computer systems information is typically stored in files. A file is an object in a computer system. An object may also be a directory or folder. A user typically changes the information in a file which provides various versions of the file. A version control system may be used to keep track of the versions of a file.

A version control system is a software application that keeps track of various versions of objects referred to as versioned objects. Some version control systems generate a version number for each versioned object. A versioned object has a name which is typically set by the user and a version number. The combination of the name and the version number provides an identifier to a particular version of the object and also reflects the derivation history of the versioned object. A name version number pair refers to a version of an object which is associated with a version number and is represented by the name of the object for example A followed by a colon then the version number such as A 1.0.

One well known algorithm for generating version numbers can be used if the same name can never be used by more than one object. In this algorithm each version number is a series of dot separated integers. A version number of 1.0 is assigned to the first version of an object. The version number of the first successor to a versioned object is generated by incrementing the last integer in the dot separated series by one. Each successor after the first successor appends a versioning pair comprising two more integers n.0 to the end of the series where n is increased by one for each successor.

Version 1.1 of A is modified again to provide a second successor which is associated with a version number of 1.1.1.0. That is a versioning pair of 1.0 is appended to the version number of 1.1. Version 1.1.1.0 of A is modified to provide a first successor which has a version number of 1.1.1.1.

Version 1.1 of A is again modified to provide a third successor which is associated with version number 1.1.2.0. In this example a versioning pair of 2.0 is appended to the version number 1.1. Version 1.1.2.0 of A is then modified to provide a first successor having version number of 1.1.2.1.

In another example of the technique above successive versions of an object named A are A 1.0 A 1.1 and A 1.2. Successive versions of an object named B are B 1.0 B 1.1 B 1.2 and B 1.3. This name and version numbering scheme works as long as no version of object A can ever have its name changed for example to B because this would result in the following name and version numbers for the object A 1.0 A 1.1 A 1.2 and B 1.3 and leads to a conflict with the identifiers of any other object named B. However it is common for the same name to be associated at different times with different objects. For example the object originally named B might be renamed to C allowing the name B to be reassigned to the object originally named A. . Using the conventional name and version numbering technique results in a conflict. Therefore there is a need for an improved technique for version numbering.

To overcome the limitations in the prior art described above and to overcome other limitations that will become apparent upon reading and understanding the present specification various embodiments of a method system and article of manufacture of providing a version number are described. An object has a present name and a present version number. In response to changing the present name of the object to a different name the different name having been used by one or more other objects one or more values of one or more first components of one or more other version numbers associated with the one or more other objects respectively are identified. Another version number is generated wherein a value of a first component of the other version number is different from the one or more values of the one or more first components.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to some of the figures.

After considering the following description those skilled in the art will clearly realize that the teachings of the various embodiments of the present invention can be utilized to provide unique name version number pairs when names can be re used. Various embodiments of a method system and article of manufacture provide a version number. An object has a present name and a present version number. In response to changing the present name of the object to a different name the different name having been used by one or more other objects one or more values of one or more first components of one or more other version numbers associated with the one or more other objects respectively are identified. Another version number is generated wherein a value of a first component of the other version number is different from the one or more values of the one or more first components.

In various embodiments a component is an integer and the version number is a dot separated series of integers. In the well known algorithm described in the background the first integer of the version number in the dot separated series is always equal to one and therefore has no significance. In accordance with various embodiments of the invention a technique is provided which exploits the first integer of the version number in the dot separated series to differentiate between different versioned objects that use the same object name. To generate a new version number for an object when the name of that object changes to a name which has been used for another versioned object in one embodiment the technique determines the highest value of the first integer of the version number associated with the new object name increments that highest value which provides an incremented value and uses the incremented value as the first integer of the dot separated series that is the version number associated with the new object name for the object. In this way the combined name and version number of any version of an object is unique.

For example if an object named A is renamed to B to provide a new version of the object. If a version of another other object has used the name B with a name version pair of B 1.2 and if the new version of the object is the first successor to A 1.2 the new name version number pair of the new version of the object is B 2.3 or if the new version of the object is the second successor to A 1.2 the new name version number pair of the new version of the object is B 2.2.1.0. If versions of two other objects have used the name B and the new version is the first successor to A 1.2 the new name version number pair will be B 3.3 or if it is the second successor to A 1.2 the new name version number pair will be B 3.2.1.0.

In various embodiments a version number is a delimiter separated series of components. The delimiter is used to separate the components of the version number and is typically a predefined character. In some embodiments the delimiter is a dot. Alternately characters other than a dot may be used as the delimiter. The component is typically an integer. A component pair comprises two components which are also referred to pair components.

A version number of n.m is assigned to the first version of an object. Typically the first version number is 1.0 however values other than one and zero may be used.

A namespace is a set of names each of which is unique within the set such as the names of files in a folder.

Step determines whether the new object version is a first successor to the present version of the source object. If not step identifies how many successors x to the present version of the source object already exist. In step a component pair x.0 is appended to the new version number. For example when generating a version number for a second successor to the present version of the source object x is equal to 1 and a component pair of 1.0 is appended. More generally for an nsuccessor to a present version of a source object a component pair of n 1 .0 is appended.

If step determines that the new object version is a first successor to the present version of the source object in step the value of the last component of the new version number is incremented by one.

If step determines that no versioned objects have the specified name in the namespace in step the present version number of the present version of the source object is copied to provide a new version number. In step the first component of the new version number is set equal to a predetermined starting value such as one and step proceeds to step . In some embodiments step is omitted. If step determines that the name of the present version of the source object is not being changed in step the present version number of the present version of the source object is copied to provide a new version number. Step proceeds to step .

In various embodiments the components of the version number are integers and the value of the first component of the new version number is incremented sequentially. In some embodiments in step the highest value of the one or more identified values is also identified and in step the first component of the new version number is set to a value equal to the highest value incremented by a predetermined value. In various embodiments the predetermined value is equal to one.

A conventional mechanism such as a table is used to associate names and version numbers with the appropriate versions of an object. For example in some embodiments a database table is used.

Continuing with the example another object version of a source object is created using the same name of B. In this example the present version of the source object has a name version number pair of B 2.3. Step determines that the name of the new object version is not different from the name of the present version of the source object and proceeds to step . In step the present version number of the present version of the source object is copied to provide a new version number of 2.3 and step proceeds to step . Step determines that the new object version is a first successor to the present version of the source object which is associated with the name version number pair of B 2.3 and step proceeds to step . In step the value of the last component of the new version number is incremented by one and the new version number is equal to 2.4. In this way the new object version has a name version number pair of B 2.4.

In another example yet another object version of the source object is created using the same name of B. In this example the present version of the source object has a name version number pair of B 2.3. Step determines that the name of the new object version is not different from the name of the present version of the source object and proceeds to step . In step the present version number of the version of the source object is copied to provide a new version number of 2.3 and step proceeds to step . Step determines that the new object version is not a first successor to the present version of the source object which is associated with the name version number pair of B 2.3 and step proceeds to step . In step the number of existing successors x to the present version of the source object are identified. In this example a first successor exists therefore x is equal to 1. The new object version is a second successor to the present version of the source object. In step a component pair of 1.0 is appended to the new version number. Therefore the new version number is 2.3.1.0 and the new object version is associated with a name version number pair of B 2.3.1.0.

As shown in a third successor to the object version associated with name version number pair B 2.3 is created. The third successor has a name version number pair of B 2.3.2.0.

In various embodiments a version control system provides a map associating names and version numbers with objects for example that A 1.2 and B 1.2.1.0 are versions of the same object.

In some embodiments the name of an object plus its version number is used as an identifier for the version of the object. Using an application programming interface API an object identifier OID of an object is available to a user in addition to an identifier which associates the object name and version number so it is possible to identify versions of the same object and the version numbers reflect the derivation history. In some embodiments which use a graphical user interface the OID is not displayed. However the user is able to determine which versions are versions of the same object by requesting all the other versions of a particular object.

Table 1 below shows an illustrative history of a versioned object. A version column shows the version number. A date column shows the date that the version was generated. A uniform resource identifier URI column shows the full path to the versioned object.

Table 1 indicates that a first version 1.0 of an object named Name is created in Folder on Dec. 30 2004. The URI is Folder Name 1.0. Table 1 also indicates that on Jan. 10 2004 the object called Name was modified and the version number is changed to 1.1. The URI is Folder Name 1.1. The next row of Table 1 indicates that on Jan. 12 2004 the object is renamed to NameRenamed and the associated version number is 1.2 because NameRenamed has not been used in the namespace. The next row of Table 1 indicates that on Jan. 15 2004 the name of the object is changed again. This time the object name has been used with one other object within the namespace. For example there is another object associated with ReusedName having a version number of 1.x. Since the version is the first successor to NameRenamed 1.2 the new version number is 2.3. The URI is Folder ReusedName 2.3.

In some embodiments Table 1 is provided in a graphical user interface. A user can click on the URI to cause the associated object to be displayed.

In various embodiments the technique provides version numbers such that the combination of a name and version number is unique within the namespace the version numbers reflect the derivation history even when the name of a versioned object changes and different versioned objects may use the same name at various points in their life cycles.

The memory generally comprises different modalities illustratively semiconductor memory such as random access memory RAM and disk drives. In various embodiments the memory stores an operating system and an application and at least one folder .

The application is typically a version control system and implements the flowcharts of . In some embodiments the application also provides a graphical user interface displaying the information of table 1 for a versioned object. The namespace comprises one or more versioned objects Filename v and Filename v and respectively.

In various embodiments the specific software instructions data structures and data that implement various embodiments of the present invention are typically incorporated in the application . Generally an embodiment of the present invention is tangibly embodied in a computer readable medium for example the memory and is comprised of instructions which when executed by the processor cause the computer system to utilize the present invention. The memory may store the software instructions data structures and data for any of the operating system and application in semiconductor memory in disk memory or a combination thereof. Other computer memory devices presently known or that become known in the future or combination thereof may be used for memory .

The operating system may be implemented by any conventional operating system such as AIX Registered Trademark of International Business Machines Corporation UNIX UNIX is a registered trademark of the Open Group in the United States and other countries Windows Registered Trademark of Microsoft Corporation Linux Registered trademark of Linus Torvalds Solaris Registered trademark of Sun Microsystems Inc. and HP UX Registered trademark of Hewlett Packard Development Company L.P. .

In various embodiments the present invention may be implemented as a method computer system or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof. The term article of manufacture or alternatively computer program product as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. In addition the software in which various embodiments are implemented may be accessible through the transmission medium for example from a server over the network. The article of manufacture in which the code is implemented also encompasses transmission media such as the network transmission line and wireless transmission media. Thus the article of manufacture also comprises the medium in which the code is embedded. Those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention.

The exemplary computer system illustrated in is not intended to limit the present invention. Other alternative hardware environments may be used without departing from the scope of the present invention.

The foregoing detailed description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teachings. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended thereto.

