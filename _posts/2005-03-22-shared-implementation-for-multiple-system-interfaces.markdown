---

title: Shared implementation for multiple system interfaces
abstract: A shared implementation for multiple system interfaces. An embodiment of a method includes receiving a command for a system, the command being a command for one of a plurality of interfaces for the system; generating a data structure for the command, the data structure including an opcode from a common library; and parsing the command using one of a plurality of parsing functions, parsing of the command including inserting an argument from the command into the data structure for the command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07756154&OS=07756154&RS=07756154
owner: NetApp, Inc.
number: 07756154
owner_city: Sunnyvale
owner_country: US
publication_date: 20050322
---
At least one embodiment of the present invention pertains to system interfaces and more particularly to a method and apparatus for shared implementation for multiple system interfaces.

Complex systems utilize various interfaces for system control and management. Among such complex systems are storage servers a storage server being a special purpose processing system used to store and retrieve data on behalf of one or more client processing systems clients . A storage server can be used for many different purposes such as to provide multiple users with access to shared data or to backup mission critical data.

A file server is an example of a storage server that may be accessed using various interfaces. A file server operates on behalf of one or more clients to store and manage shared files in a set of mass storage devices such as magnetic or optical storage based disks or tapes. The mass storage devices may be organized into one or more volumes of Redundant Array of Inexpensive Disks RAID . Another example of a storage server is a device that provides clients with block level access to stored data rather than file level access or a device that provides clients with both file level access and block level access. A client may use any of various interfaces to access the file server.

If a system utilizes multiple interfaces each interface may provide a different method of interfacing with the system. For example a storage system may utilize a command line interface by which a user may directly input instructions for the storage system. In another example a storage system may utilize an application programming interface API . The multiple interfaces may provide differing commands and operations. The interfaces may have different names for the same basic function or may express different functions. In conventional operations each such interface is subject to a separate implementation. The need for separate implementation of each interface complicates the operation of the system and increases the difficulty in making any needed modifications or updates to the system.

An embodiment of a method includes receiving a command for a system for one of a plurality of interfaces for the system. The method includes generating a data structure for the command. The data structure may include an opcode for the command from a common library. The method further includes parsing the command using one of a plurality of parsing functions with parsing of the command including inserting an argument from the command into the data structure for the command.

An embodiment of a system includes a first interface to access the system and a second interface to access the system. The system further includes a common implementation to process commands for both the first interface and the second interface and a common library to support the processing of commands for the first interface and the second interface.

Other aspects of the invention will be apparent from the accompanying figures and from the detailed description that follows.

A method and apparatus for shared implementation for multiple system interfaces are described. As described in greater detail below in certain embodiments of the invention a method includes providing a single implementation to support multiple interfaces to a system such as a storage server.

In one embodiment of the invention a system such as a storage server supports multiple interfaces. The interfaces may have differences in command operations and other factors. In an embodiment the multiple interfaces are supported by a shared implementation. In one possible embodiment the system that is accessed via the multiple interfaces is a storage server.

A system may include interfaces such as for example a first interface that is a command line interface and a second interface that is an application programming interface API . In this example both the first interface and the second interface may be utilized to control or manage a system which may include a storage server. The first interface may include a command line interface to a storage device produced by Network Appliance Inc. The second interface may include the Zephyr API ZAPI a proprietary API of Network Appliance Inc. In one example an API such as ZAPI may provide for marshalling of API name and input parameters using XML extensible markup language with input parameters being typed and the contents of the XML being independent of the programming language and architecture on both client and server sides of a transaction and with the server returning values from the invocation of the API marshaled in the same format as the input. In one embodiment a command line interface is an interactive process with a user while an API is generally a non interactive interface.

Access to a system through an interface may include management of a system through a management console using simple network management protocol SNMP . For example a management console may use an API for the purpose of providing management of a system such as a storage server.

An embodiment of the invention may be implemented in various environments. The environments may include file storage such as NAS network attached storage block based storage such as SAN storage area network or mixed SAN and NAS environments.

In one embodiment of the invention a unified interface process is utilized for multiple types of operations. In one example an interface process for a storage server may be utilized for commands relating to various types of data structures such as volume structures and aggregate structures which are more fully discussed in relation to . For example a first interface and a second interface may each provide differing commands for creating destroying or modifying data structures of a storage server. The command names arguments and other requirements may vary for the interfaces. In one embodiment a unified interface process supports the commands of both the first interface and the second interface. In addition to differences in the commands used the interfaces may not support the same operations and thus some types of commands will be supported in one interface and not in another.

Further a first interface and a second interface may have different command structures to accomplish similar tasks. For example to accomplish a certain task a first system may issue a particular command which may then call multiple functions or sub commands to accomplish the task. A second system may instead utilize a number of commands to accomplish the same task. In one embodiment a shared implementation supports the command structures of both interfaces.

In one embodiment of the invention a shared or common library is provided to implement commands of multiple interfaces. The shared library supports the actual operations of all commands and provides a common set of operation codes opcodes for all command operations of the multiple interfaces.

In one embodiment of the invention an interface implementation assigns one parsing function to each command of each supported interface. For example for a first interface there may be one parsing function assigned for a command to create a structure one parsing function for a command to delete a structure and so on with one parsing function also being assigned for each of the commands for a second interface. In one embodiment a received command is recognized and a parsing function is called for the command. Certain data is passed to the parsing function regarding the command. The data includes a pointer to a data structure or parsing structure that is generated for the command being parsed.

In one embodiment of the invention a command is entered into an interface the interface being one of a number of different interfaces for a system. The command is initially evaluated to identity the command and the parsing function for the command. The command is parsed to determine among other matters what the instruction is what elements are present in the instruction and whether the correct number and type of elements are present. This may be represented by producing a parsing structure of the command. The parsing structure is then passed on to proceed with the operation of the command. The parsing structure is utilized to provide the input parameters and the output or status of the operation such as an error code. If a command is legitimate and provides proper data then after the parsing of the command there is action taken to accomplish the work that is represented by the command. The action to accomplish the work might entail calling a procedure. The procedure may be represented in a file system such as the WAFL Write Anywhere File Layout file system of Network Appliance. The interface then performs a clean up after command execution to complete the operation.

In one embodiment of the invention a plurality of interfaces to a system such as a storage server are implemented utilizing the following 

 1 A common set of operation codes opcodes A common set of opcodes is provided such as in a common library. The set of opcodes includes all of the operations that are used with any of the interfaces to the system. One or more opcodes may be used in less than all of the systems and thus will be non operational in the other systems. A certain command may represent one or more opcodes depending on the structure of the operation.

 2 Access macros One or more access macros or methods are provided to obtain information from entered commands. An access macro is not required to understand the command that is presented but rather is only required to obtain the necessary information from the command. This information then may be used in preliminary operations to prepare for the parsing of the command. As used herein an access macro or method is a macro method or other similar routine used to retrieve data.

 3 Common names for the operations The multiple interfaces may have different names for certain operations. A common name or representation is provided for each operation such that each interface can map into the common name. A particular command may map into one or more of the common names depending on the command structure.

 4 Parsing method for each command A set of parsing methods is provided to support all of the possible commands. An appropriate parsing method is assigned for each command of each of the interfaces. The parsing method for a command will parse the command and produce a parsing structure for the command type thereby providing the operation or operations and arguments for the command. In one example each parsing method may include the common opcode or opcodes for the operation and a common parsing structure for the command.

 5 Implementation methods Certain basic methods may be provided for the processing of a command. These methods may include a an initiation method to generate a basic data structure which may be unified parsing structure containing a common parsing structure within it and provide certain basic information in the data structure b a parsing method to parse the command which results in filling in the basic data structure with the argument information from the command thereby completing the parsing structure for the command and c a clean up method to eliminate any extraneous data references after command execution is completed.

In one embodiment of the invention the first interface and the second interface share a common interface implementation . The common interface implementation is used for commands from both interfaces. In one embodiment the common interface implementation is used to recognize and parse commands from both interfaces. In one embodiment of the invention the common interface implementation includes a common library the common library including a set of common opcodes to be used to implement commands for all of the interfaces to the system .

The parsing function may utilize various methods to parse the command . For example the methods may include an initiation function init which generates a basic data structure or parsing structure including a common parsing structure to accept arguments shown as arguments X Y and Z of the command . The basic data structure may also include an opcode for the operation to be performed the opcode being one of a common set of opcodes obtained from a common library . The opcode represents the operation to provided by command and any other command for any of the interfaces to the system that is intended to perform the same operation.

The methods may further include a parsing method parse to perform the actual parsing of the elements of the command and to fill in the common parsing structure and thereby produce the parsing structure for the command. The methods may also include a method to clean up data clean up after command execution is completed.

A parsing structure for the command is generated and is filled with basic information. An opcode from a common library of opcodes is provided for the command . The command is then parsed to obtain the arguments for the command. The command may have certain fields that are optional and certain fields that are mandatory depending on the nature of the command and the interface involved. If the command does not match the requirements for this command an error condition is present which may be inserted into the parsing structure for the command. Otherwise the data structure is populated with the data from the command . The parsing structure may then be passed on for the performance of the command . Any unneeded data may be cleaned up or deleted after the execution of the command .

In an embodiment a system that implements the invention includes a number of RAID redundant array of independent disks groups which each RAID group including some number of memory disks. The operation of the RAID groups may vary according the specification for the RAID group. Standard specifications include RAID 1 for mirrored arrays RAID 2 for parallel arrays with ECC error checking and correction RAID 3 for a parallel array with parity RAID 4 for a striped array with parity and RAID 5 for a striped array with rotating parity. Operations may further include RAID DP dual or diagonal parity providing additional protection. In one embodiment a system that implements the invention utilizes RAID 4 or RAID DP which are standards that protect against disk failure by computing parity information based on the contents of all of the disks in the array. A RAID 4 group includes a set of data disks and a parity disk that implements RAID 4 with RAID DP including a set of data disks and two parity disks. However embodiments of the invention are not limited to these examples and may be implemented using any RAID specification or other storage standard.

In an embodiment of the invention a number of RAID groups may make up a group known as a plex which is a collection of RAID groups. The use of plexes allows for mirroring a RAID group with a mirror being a copy of the data from the RAID. One or two plexes together depending on whether a mirror exists form an aggregate. An aggregate is a RAID protected area that provides storage.

A volume is a logical construct for the organization of files. A volume exists within a certain number of RAID groups. A file server may include any number of volumes. In a first type of system or subsystem aggregates and volumes are in a one to one relationship each aggregate having one single volume. Any modification of the size of a volume thus requires that a disk be added. In this system the smallest possible volume size is two disks for RAID 4 operations with one disk containing data and a second disk containing parity information or three disks for RAID DP operations one disk containing data and two disks containing parity information . In a second type of system or subsystem aggregates and volumes are not tied in a one to one relationship. Instead an aggregate may contain multiple volumes and the volumes may be adjusted in size in smaller increments. In the second type of system cloning of volumes in an aggregate is possible with a clone in this context being a snapshot of a volume.

In this illustration a storage server provides storage in the form of for example a number of different RAID groups . Each RAID group includes one or more disks . A number of RAID groups form a plex shown as plex . The plex is a part of an aggregate . The aggregate may be mirrored or unmirrored with a mirror being a copy. If aggregate is mirrored then it also includes plex . The storage server may also include other aggregates shown as aggregate and other aggregates which would contain their own data storage disks.

Aggregate may include a volume with a volume being a logical unit of storage. A traditional volume is coextensive with the aggregate the aggregate containing one volume. Any modification in the size of a traditional volume requires an increase in the size of the RAID groups making up the aggregate. A flexible volume is a different type of volume that can be of varying size and that is not required to be in a one to one relationship with an aggregate. Instead an aggregate can contain multiple flexible volumes. In an embodiment of the invention the storage server may include traditional volumes flexible volumes or both.

In one embodiment the storage server receives commands via multiple interfaces. For example the multiple interfaces may include a first interface that is a command line interface and a second interface that is an API. The commands may include operations regarding memory structures including the creation or destruction of aggregates and volumes.

In one embodiment of the invention the commands for the interfaces to the storage server are implemented with a common interface implementation. The commands for the operations may vary and thus are detected and parsed by the common interface implementation. For example a first interface may be a command line interface that utilizes a command vol create volname with a first set of arguments to create a new volume. A second interface may be an API that utilizes a command volume create with a second set of arguments to create a new volume the first set of arguments and the second set of arguments possibly containing different elements. The common interface implementation maps both of the commands to a common structure that can be used to create volumes.

An embodiment of the invention may be implemented in a storage server such as a file server. illustrates a network environment that includes a file server that implements an embodiment of the invention. However a shared implementation for multiple system interfaces is not limited to use in traditional file servers or to use in storage servers at all for that matter. For example embodiments of the invention may be implemented in various other types of systems that utilize multiple interfaces.

A file server shown in is coupled locally to a storage subsystem which includes a set of mass storage devices and to a set of clients shown as a first client and a second client through a network such as a local area network LAN . Each of the clients may be for example a conventional personal computer PC workstation or the like. The storage subsystem is managed by the file server . The file server receives and responds to various read and write requests from the clients that are directed to data stored in or to be stored in the storage subsystem . The mass storage devices in the storage subsystem may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magneto optical MO storage or any other type of non volatile storage devices suitable for storing large quantities of data.

The file server may have a distributed architecture for example it may include a separate N network blade and D disk blade not shown . In such an embodiment the N blade is used to communicate with clients and while the D blade includes the file system functionality and is used to communicate with the storage subsystem . The N blade and D blade communicate with each other using an internal protocol. Alternatively the file server may have an integrated architecture where the network and data components are all contained in a single box. The file server further may be coupled through a switching fabric to other similar file servers not shown that have their own local storage subsystems. In this way all of the storage subsystems can form a single storage pool to which any client of any of the file servers has access.

In an embodiment of the invention the first client may utilize a first interface to control or manage operations for data contained in the storage subsystem through the file server . In one possible example the first client utilizes a command line interface to communicate commands. In one possible example the second client utilizes an API to communicate commands. In an embodiment of the invention the file server supports the interface utilized by the first client and the interface utilized by the second client using a single implementation.

The processors are the central processing units CPUs of the file server and thus control the overall operation of the file server . In certain embodiments the processors accomplish this by executing software stored in memory . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices.

Memory is or includes the main memory of the file server . Memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. Memory stores among other things the operating system of the file server .

Also connected to the processors through the bus system are one or more internal mass storage devices a storage adapter and a network adapter . Internal mass storage devices may be or include any conventional medium for storing large volumes of instructions and data in a non volatile manner such as one or more magnetic or optical based disks. The storage adapter allows the file server to access a storage subsystem and may be for example a Fibre Channel adapter or a SCSI adapter. The network adapter provides the file server with the ability to communicate with remote devices such as the clients and illustrated in over a network and may be for example an Ethernet adapter.

Also logically under the file system the operating system includes a storage access layer and an associated storage driver layer to allow a file server to communicate with a storage subsystem. The storage access layer implements a higher level disk storage protocol such as RAID while the storage driver layer implements a lower level storage device access protocol such as Fibre Channel Protocol FCP or SCSI. To facilitate description it is henceforth assumed herein that the storage access layer implements a RAID protocol such as RAID 4 or RAID DP and therefore may alternatively be referred to as RAID layer . Also shown in is path of data flow through the operating system associated with a read or write operation.

Thus a method and apparatus for shared implementation for multiple system interfaces have been described. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.

