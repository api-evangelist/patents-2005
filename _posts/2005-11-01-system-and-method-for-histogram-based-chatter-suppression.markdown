---

title: System and method for histogram based chatter suppression
abstract: A system and method suppresses chattering events in a storage system by determining a suppression level based upon a rate of growth of log files. An event management system of the storage system calculates a histogram and a set of statistics including a mean and standard deviation associated with non-chattering events. A cutoff point is determined for the non-chattering events and is utilized for each received event to determine if the received event is a chattering event. Events determined to be a chattering event are suppressed according to a predefined suppression rate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08032896&OS=08032896&RS=08032896
owner: NetApp, Inc.
number: 08032896
owner_city: Sunnyvale
owner_country: US
publication_date: 20051101
---
The present invention relates to event management systems and more particularly to histogram based chatter suppression in event management systems.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of data containers such as files and logical units. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the file a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

A known type of file system is a write anywhere file system that does not overwrite data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. Sunnyvale Calif.

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing file based and block based protocol messages in the form of packets to the system over the network.

Many storage systems include an event monitoring system EMS that conveys appropriate system information and event notifications to system administrator and or other interested parties such as a vendor s customer support staff. As events occur within a storage system the EMS logs the events in one or more event log files which may then be utilized by the system administrator and or customer support engineer to identify the cause of problems or to optimize system performance. A noted problem of such logging systems is that the occurrence of events in the storage system typically generates a large volume of event messages that may be logged some of which may be unimportant to the administrator using the system. As the number of unimportant messages that are logged increases the size of the log files increases which forces the administrator to sort through potentially thousands or tens of thousands of superfluous messages to find relevant log entries. Additionally the storage space available for log files in the storage system may be limited. As such as the number of messages being logged increases the probability that the size of the log files exceed the space available increases. Furthermore the log files may often be transmitted to a vendor for analysis after error conditions develop. Accordingly as the size of the log files increase there is a concomitant increase in transmission times and storage space requirements.

Certain event notification messages occur so frequently that they are deemed to be chatter and repeated logging of their occurrences wastes log space and complicates the administrator s ability to find relevant log information. Conventional UNIX based event notification systems use a syslog program as an EMS perform limited suppression of such chatter messages. In such a conventional EMS an event message is only suppressed if the same message occurs twice in a row that is if a chatter message is received twice in a row only one instance is logged. However if any message is received between the two chatter messages then both chatter messages are logged. It is thus possible to have a situation where a plurality of chatter messages is intermingled with other messages such that no suppression occurs. Therefore it is desirous to identify and suppress chatter messages to thereby limit the rate of growth of an event log file in a storage system.

The present invention overcomes the disadvantages of the prior art by providing a system and method for suppressing chattering messages in a storage system using histogram analysis. An event management system EMS first calculates a suppression level based upon a rate at which log files within the storage system are growing. The EMS then determines a possible percentage of non chattering events based on the suppression level and therefore generates a histogram of non chattering events to the median and standard deviation. Additionally the EMS calculates a cutoff point for non chattering events utilizing the generated histogram and mean standard deviation. Events occurring less frequently than the cutoff point are deemed to be non chattering events those that occur more frequently are deemed to be chatter.

When an event notification is received for a possible chattering event a determination is made as to whether the event is truly a chattering event by comparing its frequency of occurrence with the cutoff point. If the event is a chattering event then the EMS suppresses the event notification in accordance with a suppression rate. Illustratively the suppression rate limits logging of chattering events to not more than one log entry per N minutes where N is determined by the rate of growth of the log files. If the event is not a chattering event then the EMS does not suppress the event and the appropriate event notification is sent.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N module on the node while the other processor executes the functions of the D module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes is the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 is level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperation with a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into is the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module to D module communication for data container striping operations described herein.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster.

Further to the illustrative embodiment the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Patent Application Publication No. US 2002 0116593.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

A data container e.g. a file is accessed in the file system using a data container handle. is a schematic block diagram illustrating the format of a data container handle including a volume ID field an inode number field and a uniquei fier field . The volume ID field contains a global identifier within the cluster of the volume within which the data container resides. The inode number field contains an inode number of an inode within an inode file pertaining to the data container. The unique ifier field contains a monotonically increasing number that uniquely identifies the data container handle . The unique ifier is particularly useful in the case where an inode number has been deleted reused and reassigned to a new data container. The unique ifier distinguishes that reused inode number in a particular data container from a potentially previous use of those fields.

The VLDB is a database process that tracks the locations of various storage components e.g. flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N module of each node accesses configuration table that maps the volume ID of a data container handle to a D module that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the volumes within the cluster. An example of such a VLDB entry is a VLDB volume entry .

The VLDB illustratively implements a RPC interface e.g. a Sun RPC interface which allows the N module to query the VLDB . When encountering contents of a data container handle that are not stored in its configuration table the N module sends an RPC to the VLDB process. In response the VLDB returns to the N module the appropriate mapping information including an ID of the D module that owns the data container. The N module caches the information in its configuration table and uses the D module ID to forward the incoming request to the appropriate data container. All functions and interactions between the N module and D module are coordinated on a cluster wide basis through the collection of management processes and the RDB library user mode applications .

To that end the management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database.

The event type field identifies the particular event for which this event statistics data structure is associated. The event severity field identifies a severity level for example routine emergency critical that the administrator has associated with the event. It should be noted that these three severity levels are exemplary only and that in alternate embodiments additional and or differing severity levels may be utilized in accordance with the teachings of the present invention. Illustratively an administrator may associate any given severity level with any particular event. The starting time field identifies the starting time of the current statistical sample. The last processed field identifies the time when the EMS last processed an event notification message i.e. the time when the EMS last permitted an event notification to be sent without being suppressed. The last occurred field identifies the last time the event occurred regardless of whether it was suppressed. The last suppressed field identifies the last time this event was suppressed as chatter in accordance with the present invention. The number suppressed field identifies the total number of messages suppressed as chatter in accordance with the present invention. The number occurred field identifies the total number of occurrences of this event. The array of recent occurrences field illustratively includes 60 entries one for each minute of the previous hour. Each of these entries identifies the number of occurrences that occurred during the specified minute. Similarly the array of last day occurrences illustratively includes 24 entries one for each hour of the previous day and the array of last week occurrences field includes seven entries one for each day of the previous week. The chatter field illustratively contains a Boolean value that identifies whether the event identified by the event name field has been classified as a chatter event in accordance with the present invention.

The present invention is directed to a system and method for suppressing chattering messages in a storage system using histogram analysis. According to the invention an EMS first calculates a suppression level based upon a rate at which log files within the storage system are growing. The EMS then determines a possible percentage of non chattering events based on the suppression level and thereafter generates a histogram of non chattering events to calculate median and standard deviation. Additionally the EMS calculates a cutoff point for non chattering events utilizing the generated histogram and mean standard deviation. Events occurring less frequently than the cutoff point are deemed to be non chattering events those that occur more frequently are deemed to be chatter.

When an event notification is received for a possible chattering event a determination is made as to whether the event is truly a chattering event by comparing its frequency of occurrence with the cutoff point. If the event is a chattering event then the EMS suppresses the event notification in accordance with a suppression rate. Illustratively the suppression rate limits logging of chattering events to not more than one log entry per N minutes where N is determined by the rate of growth of the log files. If the event is not a chattering event then the EMS does not suppress the event and the appropriate event notification is sent.

In step the EMS determines a possible percentage of non chattering events. Illustratively if the suppression level is light then at least 95 of the events are non chattering. If the suppression level is normal then at least 90 of the events are non chattering and if the suppression level is aggressive then only 80 of events are non chattering. It should be noted that these percentages are illustrative only and that the present invention may be utilized with any acceptable percentage of non chattering events. This percentage of non chattering events identifies the percentage of the events occurring that are assumed to be non chattering. In the example of a normal suppression level at least 90 of the events are non chattering which means that those events occurring in the 90th percentile or less are deemed to be non chattering. Only those events occurring in the top 10 of the event occurrences may be chattering events. The EMS utilizes the various occurrence fields of the event statistics data structure for tracking the number of occurrences of each event. In step a histogram of non chattering events is generated and the EMS calculates the mean and standard deviation. These statistics are calculated using the percentages calculated previously. The histogram is calculated using event occurrences previously collected and stored in the event statistics data structure .

The cutoff point for non chattering events is calculated in step . Illustratively the cutoff point is set to twice the 99 confidence interval. Thus Cutoff Point Mean 2 99 Confidence Interval 

Assuming a sufficient number of events e.g. more than 30 this results in 99.999 of non chattering events being below the cutoff point. Events occurring less frequently than the cutoff point are deemed to be non chattering events. This determination is illustratively stored in the chatter field of event statistics data structure .

In step the EMS determines if possible chattering events are real chatter. Illustratively this determination is made upon receipt of an event notification by EMS . Note that the previous steps are illustratively performed on a routine basis to determine which events are chattering events or not. Step illustratively occurs when an event notification has been received by the EMS. To determine if an event is chatter the EMS checks the histogram count of the top N of events against the cutoff point wherein N equals 100 minus the appropriate percentage of events that are non chattering as determined in step above . For example if the suppression level is aggressive then the percentage of events that may be non chattering is 80 . As such the EMS examines the histogram count of the top 20 100 80 of events against the cutoff point. Those events that are beyond the cutoff point are marked as chatter. If it is determined in step that the event is a chatter event then the EMS suppresses that event in accordance with the suppression rate step before completing in step . The suppression rate is illustratively embodied as a time interval of M minutes wherein the value of M is illustratively set to five minutes at the light level 10 minutes at the normal level and 20 minutes at the aggressive level of suppression. Illustratively the suppression rate causes only one event notification to be sent per M minutes regardless of the actual number of events occurring. Thus for example in response to a first message received at the aggressive level of suppression a first event notification is logged. No further logging of this particular event will occur until M minutes have elapsed regardless of the number of occurrences of the event. The EMS utilizes the last processed field last occurred field and last suppressed field of event statistics data structure in tracking when the appropriate suppression rate has been met. If however in step it is determined that the event is not a chattering event then the procedure completes in step .

Illustratively the EMS recomputes the histogram and possible chattering events steps on a regular basis. This enables the EMS to dynamically modify which events are deemed to be chattering events based on actual occurrence values. In alternate embodiments if the EMS detects that a significant number of events of a particular type not currently deemed a chattering event occurs the EMS may initialize procedure to determine if the event receiving an abnormal number of occurrences has become a chattering event.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed file systems. Furthermore while this description has been written in terms of N and D modules the teachings of the present invention are equally suitable to systems where the functionality of the N and D modules are implemented in a single system. Alternately the functions of the N and D modules may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

