---

title: Using a USB host controller security extension for controlling changes in and auditing USB topology
abstract: Protecting computer systems from attacks that attempt to change USB topology and for ensuring that the system's information regarding USB topology is accurate is disclosed. A software model is defined that, together with secure USB hardware, provides an ability to define policies using which USB traffic can be properly monitored and controlled. The implemented policy provides control over USB commands through a combination of software evaluation and hardware programming. Legitimate commands are evaluated and “allowed” to be sent to a USB device by a host controller. Illegitimate commands are evaluated and blocked. Additionally, the USB topology is audited to verify that the system's topology map matches the actual USB topology.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761618&OS=07761618&RS=07761618
owner: Microsoft Corporation
number: 07761618
owner_city: Redmond
owner_country: US
publication_date: 20050325
---
This application is related to U.S. patent application Ser. No. 11 090 547 entitled Accessing a USB Host Controller Security Extension Using a HCD Proxy filed herewith and incorporated by reference in its entirety.

The invention generally relates to the field of the universal serial bus USB and specifically to the security of data associated with the USB.

The manner in which USB peripherals are attached to a USB Host Controller and the manner in which USB drivers communicate with their corresponding devices make it difficult to prevent malicious software from mounting different classes of attacks that attempt to modify the USB topology. Such attacks may take various forms such as for example substitution attacks and snooping attacks.

A substitution attack involves substituting an illegitimate USB device for a legitimate device without the system recognizing that a substitution occurred. Each USB device is attached to a port on either a root hub or an external hub. A hub driver controls the state of its hub ports by sending certain USB commands over the hub s default pipe endpoint 0 . A malicious driver may hide a programmable USB device attached to one of the hub ports by disabling the port to which the device is connected. The driver then may be able to disable a port of a real keyboard that is attached to the same hub and enable the port of the programmable device. In addition the malicious driver may set the USB address of its programmable device to the address that was assigned to the keyboard it disabled. The end result is that the real keyboard is spoofed by a programmable device and the driver for the keyboard is not aware that it is talking to a different device. In sum the system believes that input data is generated by the keyboard when the data is generated programmatically by an adversary.

Another type of attack the snooping attack attempts to modify USB topology by taking advantage of a process in which a device driver reads data from its device by sending it an appropriate USB command. Some data sent by a device ideally should not be read by any entity besides the applicable device driver. An example of such case is when the device has to exchange an encryption key with the driver so that the driver can use the key for decrypting data that the device is going to generate later. An adversary may obtain sensitive data by either sending an appropriate command to the device or by mounting an attack in which the adversary grabs data en route to the requesting device driver. Additionally it is recognized that a software solution may make it more difficult for an attacker to obtain sensitive information but software alone likely cannot provide full protection against such attacks.

Additionally in a computer system with a USB Host Controller and USB peripherals connected to it it is desirable for software to be able to obtain information regarding USB topology. It is currently possible for legitimate system software to obtain such information. Malicious software however may tamper with topology information such that legitimate software may not be able to verify that topology information it receives appropriately reflects actual USB topology. For example an adversary may program a USB device so that it looks to the system like a different device such as a keyboard. Because the system may need to secure certain USB input devices in order to establish a trusted path with a user mounting this attack leads the system to trust a keyboard device even though it is not a really a keyboard. A malicious driver mounts the attack by sending a USB command that configures a physical programmable device. The host controller driver queries the device for its USB descriptors and the device returns descriptors indicating that the device is a keyboard. Thus the system loads a keyboard driver for controlling that device.

This driver then waits for input data to be generated by the device. At that point the malicious driver can trigger the device to generate one or more keystrokes by sending an appropriate USB command to the device. When these keystrokes are generated the keyboard driver sends the corresponding keyboard events to the operating system. The end result is that the malicious driver can inject input events into the system. This also provides the malicious driver with the ability to have the device playback a certain keystroke sequence at a specific time which may create general problems and may even enable the driver to inject input into a trusted input path as if the input was generated by a trusted device.

There is a need therefore for systems and methods to prevent attacks on USB systems that attempt to change USB topology and to audit USB topology to ensure that the information that the system maintains regarding the attached USB devices appropriately reflects the actual USB topology. The systems and methods ideally should not be based solely in software.

The invention provides systems and methods for protecting computer systems from attacks that attempt to change USB topology and for ensuring that the system s information regarding USB topology is accurate. The invention includes defining a software model that together with secure USB hardware provides an ability to define policies using which USB traffic can be properly monitored and controlled. The implemented policy provides control over USB commands through a combination of software evaluation and hardware programming. Legitimate commands are evaluated and allowed to be sent to a USB device through the host controller. Illegitimate commands are evaluated and blocked.

The invention may be implemented to control USB topology changes. Because most topology changes involve a USB setup command sent to a relevant USB hub trusted software may monitor such commands so that the status of USB devices connected downstream from the hub is accurate. According to the invention data associated with a USB device such as a setup command is received by trusted software and a determination is made regarding whether the data is allowed to be sent to the targeted USB device. If the data is allowed then an instruction is sent to a host controller driver to send the data. Additionally the trusted software may program a security extension residing on a host controller chipset to allow the data through to the USB topology and device. If the data is not allowed then the trusted software may program the security extension to block the data from going through.

The invention includes auditing the USB topology to verify that the system s topology map matches the actual USB topology. The invention defines a model in which software and hardware are used together in order to perform the USB topology audit in a trustworthy fashion. Auditing the USB topology is valuable when certain USB devices need to be differentiated from other devices. For example input devices may be differentiated from other USB devices because a user may generate secure input. The differentiation may provide for the establishment of a trusted input path between the user and the system application receiving the user input. The USB topology audit provides an ability to detect input devices residing in the topology in a trustworthy fashion and protects against security attacks to the system through the USB topology.

The USB audit includes receiving a USB topology map from a USB host controller driver. The map generated by untrusted software is verified by trusted software through a series of commands sent to the USB topology through the host controller chipset. The devices provide identifying information that is compared against the map. The identifying information received from the devices is diverted to a secure buffer in the security extension hardware and therefore trusted software is guaranteed to receive device data that hasn t been tampered with by malicious software. Before sending the aforementioned commands to the devices the trusted software resumes all ports of the hubs in the topology in order to make sure that malicious software has not hidden a device by suspending the hub port to which the device is connected. Once the identifying information is received and scrutinized trusted software compares the number of active hub ports with the number of devices and makes sure they are equal and that there are no hidden devices in the topology. The audit also includes identifying and securing input devices such that information generated by the input devices is diverted through a secure buffer in the security extension for evaluation within a trusted execution environment in the system.

The term universal serial bus or USB refers to a cable bus that supports data exchange between a host computer and a wide range of accessible peripheral devices or functions. USB device USB function USB peripheral or peripheral refers to devices that may be attached or that are attached to a USB. USB devices functions or peripherals share USB bandwidth through a host scheduled token based protocol. The USB allows peripherals to be attached configured used and detached while the host and other peripherals are in operation.

While a general purpose computer is described below this is merely one example. The present invention also may be operable on a thin client having network server interoperability and interaction. Thus an example embodiment of the invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as a browser or interface to the World Wide Web.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a central processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

The hardware includes a USB host controller chipset with a hardware security extension SE and a USB topology . The USB host controller chipset is a hardware component to which USB devices are or may be attached. The USB host controller chipset includes several ports that are referred to as root ports or root hub ports. USB related data sent from for example a USB device driver to an associated USB device in the USB topology is delivered by the USB host controller chipset . Likewise data sent from a USB device in the USB topology to its device driver is delivered by or via the USB host controller chipset .

The USB topology includes USB devices that are connected downstream from the USB host controller chipset . The USB topology may also be referred to as a bus topology. The USB topology contains two types of USB devices USB hubs and USB functions. USB hubs are devices that have ports to which either hubs or functions may be connected. A USB function is a device that provides certain functionality such as a web camera or a printer. The USB topology is rooted at the ports on the USB host controller chipset . The ports are grouped together and are generally referred to as a root hub.

The SE is a hardware device located on the USB host controller chipset or between the USB host controller chipset and the USB topology . The SE monitors the communication traffic between devices in the USB topology and the USB host controller chipset . The host controller chipset may not be aware of the existence of the SE and therefore the SE may block USB packets that the USB host controller chipset sends to USB devices in the USB topology as well as block or divert data that a USB device sends to the USB host controller chipset .

The SE may include an SE buffer which is a memory region to which data coming from a USB device in the USB topology can be diverted. Because the SE buffer may only be accessible by trusted software executing in the trusted execution environment software running outside of the trusted execution environment may not be able to access USB data diverted to the SE buffer . Also software running outside the trusted execution environment may not be able to insert USB data into the SE buffer to deceive the system into believing that data was actually generated by a trusted input device.

The SE additionally may include an SE programmable interface . Trusted software thus may be able to control the operation of the SE through the programmable interface . Trusted software may instruct the SE to dispose of data sent from or to the USB topology in a particular manner. For example trusted software may instruct the SE through the SE programmable interface to copy contents of a data phase of a command to the SE buffer when the command is sent to a particular device address. Thus the trusted software may be able to read a device s USB descriptor and be certain that data has not been for example tampered with snooped or spoofed.

The SE programmable interface includes SE allow logic . The SE allow logic is a subset of the SE programming interface using which trusted software can control the hardware behavior with regard to an allow policy. The allow policy dictates which USB commands are and are not allowed to be sent through the SE . In this way trusted software can use the SE allow logic to adjust behavior based on certain rules described herein.

The area outside of the trusted execution environment may generally include software for controlling and communicating with the USB related hardware . The area outside of the trusted execution environment may include a host controller driver HCD and USB device drivers . The HCD is a software module responsible for interfacing with the USB host controller chipset . The HCD communicates with the USB host controller chipset through a hardware interface exposed by the USB host controller chipset . The HCD also exposes an interface that the drivers running on the system can utilize for communicating with their corresponding devices.

Each of the USB devices in the USB topology typically is controlled by program code executed on the system . The program code may be grouped into software modules and each software module may control a USB device. The software modules are the USB device drivers . Different USB devices are controlled by different USB device drivers. For example a hub driver is a software module controlling a USB hub. A keyboard driver is a software module controlling a keyboard. For the most part these drivers are loaded such that the driver hierarchy matches the USB topology . Therefore as USB devices are added to or removed the appropriate drivers are loaded onto the system or unloaded from the system .

The trusted execution environment may be isolated from the area outside of the trusted execution environment for security related reasons. Security policies are implemented or applied to program code memory and any other entities within the trusted execution environment to ensure that it remains isolated and secure. The isolation of software running in the trusted execution environment is performed using processor support so that the trusted execution environment is protected from software attacks. Software running in the trusted execution environment is generally referred to as trusted software.

One piece of trusted software within the trusted execution environment is the SE driver . The SE Driver is a software module for controlling the SE . The SE driver runs in the trusted execution environment and therefore has access to the SE programmable interface . The SE driver in the trusted execution environment obtains information about the USB topology and USB traffic generated by the USB device drivers .

The SE driver includes a trusted audit manager and allow policy software . The trusted audit manager is a software module that implements an audit of the USB topology . Because the trusted audit manager runs in the trusted execution environment it has access to the SE . The trusted audit manager interacts with other components when auditing the USB topology including the HCD and a trusted UI engine . The trusted UI engine is a module within the trusted execution environment responsible for displaying UI in the trusted execution environment . UI elements displayed by the trusted UI engine are protected from tampering by an adversary and are generally combined with the system s trusted input elements when establishing a trusted path.

Along with the trusted audit manager the SE driver additionally includes the allow policy software . The allow policy software is a module that utilizes the SE allow logic programmable interface. This software module runs in the trusted execution environment and therefore has access to the SE . The HCD interacts with the allow policy software before sending any USB commands because the SE allow logic may be programmed such that specific commands are blocked unless allowed to go through by the allow policy software .

The trusted execution environment additionally may include a trusted topology map . The purpose of the trusted audit manager is to verify that a topology map obtained from the HCD matches the actual USB topology . The trusted topology map is an audited topology that is it is the topology that the trusted audit manager ends up with once the audit process is completed successfully. Therefore the trusted topology map matches the actual USB topology .

If at step the allow policy software determines that the SE allow logic should be programmed to allow the command to go through then at step the allow policy software determines if the command is allowed under the circumstances and consistent with a predetermined security policy. If the command is allowed to be sent to the device then at step the allow policy software tunes the settings of the SE allow logic so that the command can go through and instructs the HCD to send the command. For example the SE allow logic can be programmed such that a Set Address command going to device address 0 which is the default address on the host controller port number 3 can go through. If at step the allow policy software determines that the command is not allowed through to the device then the SE allow logic is programmed to block the command and the HCD is instructed not to send the command.

It is understood that it is possible for malicious software to obtain data transferred between the allow policy software and the HCD in the area outside the trusted execution environment . An adversary could cause the HCD to perform an operation that is different than the instructions of the allow policy software . For example when the allow policy software instructs the HCD that a certain command cannot be sent to the device malicious software can cause the HCD to send the command anyway. Because the allow policy software has already programmed the SE allow logic to block the command however the hardware will prevent the command from being sent.

Substitution attacks can be mitigated if the USB topology remains accurate. As described herein a substitution attack involves substituting an illegitimate USB device for a legitimate device without the system recognizing that a substitution occurred. Keeping track of the USB topology by interacting with the HCD alone may not ensure trustworthiness because a malicious driver can interfere with this interaction. Using a system with an SE and a trusted execution environment makes it possible to maintain a topology map that matches the physical bus topology .

To properly track changes to the USB topology the SE allow logic may be programmed by the trusted software such as the SE driver or the allow policy software contained in the SE driver . This may ensure that certain rules are enforced by the SE . One such rule is that any USB command sent to the default address must go through the allow policy software so that the hardware of the SE allow logic can be programmed to allow the command to go through. A second rule is that a USB command sent to a hub in the USB topology goes through the allow policy software so that the SE allow logic can be programmed to allow the command to go through. By applying these and any other appropriate rules USB commands that might have an impact on the USB topology are evaluated and allowed by the allow policy software .

The allow policy software therefore infers a state of the actual USB topology by monitoring the relevant USB commands. In this way the allow policy software will know when there has been a physical change i.e. when a USB device is either plugged in or out of a port to the USB topology .

The allow policy software monitors and detects topology changes differently depending on the type of change. For example in one embodiment of the invention a USB device may be attached to an external hub port. When this happens the allow policy software may look at a Port Reset or similar command that the hub driver sends to the hub device in the USB topology . Later on when the allow policy software sees a command sent to the default address address 0 it knows that the device at the default address is connected to the hub that previously reset its port.

In an alternative embodiment of the invention a USB device may be detached from an external hub port. The allow policy software may not immediately detect this as the hub driver may not send any USB commands to its hub when it detects that a device was disconnected. When a USB command that queries the port s status however is sent to the hub the allow policy software can detect that the status of one of the ports changed and it can therefore infer that whatever was connected to that port before is gone.

In yet another embodiment a device may be attached to a root hub port. The allow policy software will evaluate a USB command sent to the default address address 0 . At that point the host controller chipset is queried for its root ports status. If one of the ports was reset this means that the newly attached device is connected to that port. It is understood that the allow policy software queries the host controller chipset using the SE programmable interface so the operation is trustworthy.

Likewise when detaching a device from a root hub port the allow policy software may not immediately detect the change until a device is connected to that port in which case the steps outlined with regard to attaching a device to the root hub are performed.

Because the USB topology is dynamic the allow policy software may reprogram the SE allow logic when changes in the USB topology require the settings to change. This generally happens when hubs are added to or removed from the USB topology . The SE allow logic is updated with the hub addresses so that when a USB command is sent to a hub it is blocked by the SE allow logic unless it was previously allowed. 

At step the allow policy software determines that the command is allowed and it programs the SE allow logic at to allow the command through to the topology and the applicable device. If the allow policy software determines alternatively that the command may not be sent then the hardware of the SE e.g. the SE allow logic is not altered and if malicious software attempts to send the command the command will be blocked by the hardware. At step the allow policy software sends the command to the HCD for delivery to the device. Additionally the hardware is instructed to divert any data returned from the device to the SE buffer and to send the USB host controller chipset substitute data so that the transaction can be completed properly. At step trusted software executing in the trusted execution environment can access the SE buffer and read the key sent through the USB host controller chipset by the device. Because the data can only be read by trusted software malicious software running on the host does not have access to it.

At step the trusted audit manager fetches the topology map managed by the HCD . After the trusted audit manager obtains the map it sends USB commands to all the devices in the actual USB topology at step . The commands ensure that the type of each device matches information in the topology map fetched from the HCD . For example when a USB hub is found in the actual USB topology a USB command is sent to that hub to fetch certain USB descriptors. At step descriptors or any other information sent by each device to the trusted audit manager are scrutinized to ensure that the descriptors match the type of device indicated on the topology map. It will be understood that to fetch the descriptors in a trustworthy fashion the trusted audit manager programs the SE so that the returned descriptors are put in the SE buffer . Because the SE buffer is only accessible to trusted software such as the trusted audit manager the descriptors are protected from malicious software running outside the trusted execution environment .

If at step the trusted audit manager determines that the descriptor for a device does not match the type of device indicated on the topology map then at step the audit fails and appropriate notifications are made. If at step the trusted audit manager determines that the descriptors match then the trusted audit manager next sends a command to resume all hub ports at step . The trusted audit manager resumes suspended hub ports to ensure that the USB topology has not been attacked through use of a USB device that is hidden by suspending a port on a hub to which the device is connected. At step the trusted audit manager sends appropriate commands to ensure that the number of USB devices i.e. hubs and functions in the HCD s topology map equals the number of active hub ports in the USB topology . Additionally to determine the number of active ports on the root hub of the host controller chipset the trusted audit manager accesses certain registers within the SE registers that contain this information. If at step the number of active ports of the hubs is not equal to the number of USB devices then the HCD s topology map does not match the actual USB topology . Thus the audit fails at step and appropriate actions are taken.

If the number of active ports is equal to the number of USB devices the trusted audit manager next performs steps to secure appropriate input devices. The trusted audit manager secures input devices that generate input data that the SE diverts to the SE buffer . Because the trusted audit manager can differentiate between hubs and functions in the USB topology at step it further examines the USB descriptors of the functions to find all the input devices. The SE is programmed to divert data generated by the input devices to the SE buffer for scrutiny by the trusted execution environment . It is understood however that determining devices that are for example keyboards or mice may not be enough as USB devices may be maliciously programmed to look like input devices.

Therefore the trusted audit manager requests a user to actually generate data from the device in question. To examine user provided input at step the trusted audit manager asks the trusted UI engine to display a trusted UI element on a display screen of the system . The trusted UI element requests the user to for example type a specific word or sequence of characters with the keyboard or to move the mouse to a certain location and clicking a mouse button. At step the trusted audit manager access the SE buffer and examines data generated by the device to verify that the user generated the appropriate data. If the verification fails then the device is no longer trusted and at step the SE is programmed so that input generated by the device is not diverted to the SE buffer . If the verification shows a match then at step the SE remains programmed to divert data generate by the trusted device to the SE buffer .

The trusted audit manager counts the active ports on all the hubs in the topology. In the system the trusted audit manager determines that eight ports are active the respective ports for the three hubs and the five functions . Assuming that the topology map fetched from the HCD contains information indicating that eight ports are active then the audit is successful.

Finally the trusted audit manager secures the input devices namely a keyboard and a touchpad pointed device . The trusted audit manager programs the SE to divert input data from these devices to the SE buffer . The trusted UI engine is asked to display a certain UI element using which the user should generate some input data using these devices . The trusted audit manager accesses the SE buffer and examines the data generated by the devices . If the data matches what the trusted audit manager expected then it is concluded that a user generated input using the devices as opposed to a malicious device generating the input. The devices are properly secured using the SE hardware. If there is a mismatch then it might mean that an adversary has manipulated a programmable USB device and made it look like for example the keyboard . In this case the trusted topology audit fails and the SE will not be programmed to treat these devices as trusted. 

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. A processor that executes program code for performing the steps of the methods of the invention as described in A and B and as claimed constitute a computer system that embodies the present invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the specific examples in conjunction with the various figures it is to be understood that other embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. The examples are offered in explanation of the invention and are in no way intended to limit the scope of the invention as defined in the claims. In summary in no way is the present invention limited to the examples provided and described herein. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

