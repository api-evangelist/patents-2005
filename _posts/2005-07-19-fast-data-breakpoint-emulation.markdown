---

title: Fast data breakpoint emulation
abstract: A technique to implement software debugging capability using breakpoints includes creating breakpoints, storing them in a watchlist, and paging out a virtual address (VA) to physical address (PA) page entry in a translation look-aside buffer (TLB). When software under test is run at full speed, memory is accessed via the TLB VA to PA page translations. When a translation is missing, an exception is generated. Handling the exception includes determining if the page missing from the TLB matches a breakpoint address in the watchlist. The address and operation type are compared to the watchlist. If the operation matches the address and not the specified data, then the software under test is single stepped, the TLB page is removed and the software under test continues to execute. If the breakpoint and data type matches, then a debugger is notified and debugger action to service the breakpoint occurs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07447942&OS=07447942&RS=07447942
owner: Microsoft Corporation
number: 07447942
owner_city: Redmond
owner_country: US
publication_date: 20050719
---
One form of software testing involves running software under test using a target computing device that is compatible with the instruction set presented by the target device. In such a scenario both the software under test and the target hardware may be under development. Accordingly issues related to how the software under test interacts with the hardware may be under scrutiny. In such an environment a hardware software development system having a target device or emulator is typically used. It is common to use breakpoints in such an environment to check the progress of software execution by performing activities such as examining operands for a given address or other registers to determine the state of the target machine during the software execution. Breakpoints may generally be programmed into one part of the development system such that when an instruction pointer address matches the breakpoint the development system halts execution of the software under test.

One typical development system may have one or more hardware devices which can detect the breakpoint address and halt execution of the software under test. In some instances a software only solution to the hardware address detection mechanism is desired. However such software only detection schemes can be very slow because the software program may single step through the software under test generate an exception at every step communicate with debugger software determine if the breakpoint has been reached and then execute the next step. Such a development system does not let the target hardware and software run at full speed.

Breakpoints based on data values are used in debugger technology to trigger a halt or some actionable event based on the access and content of a particular memory location. This access can be just a read or even a write of the same or a different value. In the case of a different value this is a trigger on data change. Data breakpoints can also be called address breakpoints since they trigger on an address access to examine the data.

 A Hardware support typically in the form of on chip address comparators linked to the exception mechanism. This is the most powerful and ideal solution for most cases.

 B Software emulation this is a usually very limited solution that can be used when no address comparators are available. The traditional method used for the data breakpoint software emulation is plagued with several major problems. Software data breakpoints generally only trigger on data change and are generally extremely slow. Software data breakpoints can only trigger after the access is done not just before unlike with address comparators. This occurs because software data breakpoints are based solely on single stepping every instruction and monitoring the change of value at the particular address pointed by the data breakpoint. An improvement in software based data breakpoints is therefore desirable.

The invention addresses a software debugger that has speed advantages. In one aspect of the invention a virtual memory environment is used that implements a translation look aside buffer TLB for virtual address VA to physical address PA translations. A software breakpoint is set and placed into a watchlist. The virtual memory VA to PA translation in the TLB that corresponds to the watchlist breakpoint is paged out. A target device executes software under test until an exception occurs due to a TLB translation miss. A page table walk occurs and the missing VA to PA translation is placed into the TLB. The watchlist is compared to the new TLB entry. If the breakpoint in the watchlist does not correspond to the new TLB entry then the software under test continues to execute at full speed. If there is a match between the new TLB entry and the breakpoint then the breakpoint and instruction pointer data is further tested to determine if the instruction being executed corresponds closely to the breakpoint. If it does correspond then the debugger is notified and a handling program services the interruption allowing user interaction if needed.

In an aspect of the invention if the breakpoint is serviced or if the breakpoint is not a match for the current instruction then the TLB is cleared of the new TLB page entry that corresponds to the breakpoint. This paging out of the TLB entry allows future virtual memory page accesses containing the breakpoint to be detected via the occurrence of a TLB miss exception.

In an aspect of the invention the preferable environment for implementation is a computer system that uses virtual memory. Examples of such systems are the Windows CE and Windows XP operating systems environments available from Microsoft Corporation in Redmond Wash. In another aspect of the invention a fast breakpoint debugger suitable for a software implementation is contemplated.

A TLB is a device used in virtual memory systems to cache a translation of a virtual address VA into a physical address PA . In a virtual memory environment virtual address are generated and translated into physical addresses. The address translation is dependent on many factors including the paging of memory the restrictions placed on the physical memory and operating system and application constraints. When a virtual address is produced by an application the virtual address must be translated into a physical address. If a VA to PA translation is not available in a TLB a machine exception is generated to compute the address translation. Often a page walk must be performed to compute the VA to PA translation. Page walks can be CPU cycle intensive. In order to streamline the conversion process once a VA to PA translation for a memory page is computed it is placed in a TLB which can then be used as a look up cache of translation addresses.

Returning to once the VA to PA page is removed from the TLB step then the breakpoint is added to the watchlist step . The watchlist thus becomes a list of breakpoints and related information. To this point the breakpoints have bee set up and added to the watchlist the TLB has been purged of the breakpoint of interest and the software under test may be executed step . It should be noted the breakpoint may be added before or after the VM page is removed from the TLB. depicts a method where a breakpoint may be removed. Initially a breakpoint to be removed is identified step . The removal is effective when the breakpoint attributes are removed from the watchlist step .

In one embodiment after the page in of the VM page into the TLB step the method tests to see if the VM translation page added to the TLB contains an address corresponding to one in the watchlist step . If the newly added VM page entry in the TLB does not contain an address that matches with an address in the watchlist the software under test in the target system continues to run at full speed until another exception is generated step . In this path an exception was generated but the exception was related to an address page that was not only not in the TLB but was also not of interest because it is not a page relating to a breakpoint in the watchlist.

If the VM page matches with an address in the watchlist step a second test is performed step to determine if the address and operation type matches with an element in the watchlist. Such elements may include such items as a virtual address a data value or a write or read operation type. If the address matches but the operation type does not match the watchlist elements then the target system is single stepped step . This executes the instruction having the address and operation type that is of no interest to the breakpoint. Next the VM page in the TLB is removed from the TLB step . This allows the trapping of addresses in the page range of the breakpoint at a future time. Next the execution of the software under test in the target system is resumed at full speed step and the method waits for the next exception to be generated step .

If the address and operation type of the currently executing instruction does match elements in the watchlist step then the breakpoint of interest from the watchlist has been encountered and the debugger is notified step . At this point the debugger may perform any action step appropriate for the breakpoint such as an examination of key target system registers or requesting a user interface interaction. After the debugger action step is performed the method may resume at step . This allows the debugger to single step step remove the page from the TLB step and allow the debugger to resume full speed step until the next exception is generated step .

Note that the debugger notification in step may notify either the local debugger software or the main debugger software of . In the case where the step notification is to the local debugger software the local debugger software would be responsible for initially performing any breakpoint related tasks. However those task may include contacting the main debugger software. In the case where the step notification is the main debugger software the main debugger software in the debugger computer having the user interface may initially be responsible for performing any breakpoint related tasks. Those task however may include requesting information form the local debugger software and the target system to identify the breakpoint and provide the necessary information for the debugger computer or the user to determine the appropriate response to the breakpoint.

In one embodiment of the invention the system can be used to place code breakpoints in read only memory ROM . For example when a processor tries to read an instruction that is listed on the watchlist and not cached in the TLB and that instruction is an address in ROM then the instruction will result in an exception. This allows the invention to effectively provide a code breakpoint in ROM.

Although not required embodiments of the invention can also be implemented via an operating system for use by a developer of services for a device or object and or included within application software. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs appliances lights environmental control elements minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network bus or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.

With reference to an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer system typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disk Read Only Memory CDROM compact disc rewritable CDRW digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM CDRW DVD or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer system . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory not shown . In addition to monitor computer systems may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer system may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s .NET platform available from Microsoft Corporation includes servers building block services such as Web based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device one or more portions of an embodiment of the invention may also be implemented via an operating system application programming interface API or a middle man object between any of a coprocessor a display device and a requesting object such that operation may be performed by supported in or accessed via all of .NET s languages and services and in other distributed computing frameworks as well.

As mentioned above while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to implement a method to implement fast a software debugging capability using breakpoints. Thus the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same similar or equivalent systems and methods achieved by embodiments of the invention.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the signal processing services of an embodiment of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While aspects of the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the claimed invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

