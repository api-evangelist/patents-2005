---

title: Generating 2D transitions using a 3D model
abstract: A system and method for generating a 2D transition between a first media object and a second media object. A 3D model is defined corresponding to a desired 2D transition pattern. A graphics processing unit (GPU) or a set of instructions generates a transition between the first media object and the second media object as a function of the defined 3D model. A transition generator maps a plurality of vertices of the first media object to a first mesh creating a first mapped media object where the first mesh relates to the 3D model. The transition generator maps a plurality of vertices of the second media object to a transition pattern mesh creating a second mapped media object where the transition pattern mesh relates to the 3D model. The GPU or the set of instructions renders the transition from the first mapped media object and the second mapped media object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07450124&OS=07450124&RS=07450124
owner: Microsoft Corporation
number: 07450124
owner_city: Redmond
owner_country: US
publication_date: 20050318
---
Embodiments of the present invention generally relate to the field of graphics animation and processing. In particular embodiments of this invention relate to generating two dimensional transitions using a three dimensional model and the processing capabilities of a graphics processing unit.

In a typical graphics processing software applications use a hardware interface e.g. a graphical device interface GDI to display or print bitmapped text e.g. TrueType fonts images and other graphical elements. For example the GDI is responsible for drawing items such as dialog boxes buttons and other graphical elements in a consistent style on a screen by calling the appropriate display drivers and passing them the information on the items to be drawn. In order to take advantage of the GDI a software program typically uses a set of routines such as those provided in a software development kit SDK library to configure these software applications to call GDI functions. For example a SDK library includes functions such as icon operations rectangle operations or the like.

Under the current computer systems and configurations most GDI features are executed by a central processing unit CPU . As a result apart from executing other processes the CPU needs to process graphics elements and images such as rendering 2D images video streams or the like. The additional graphical processing impedes overall performances of the CPU and a computer system because graphical processing requires extensive calculations of graphical parameters such as pixel or texture calculation rendering or animation of images or the like. While CPU processing of these graphics or images is adequate an improvement in graphics or image processing is desirable.

In addition most current systems or applications use two dimensional algorithms to process graphics effects. For example a user may insert a transition between two media objects or images such that the resulting sequence of displaying the two media object has a smooth transition. In existing systems the CPU needs resources and time to execute the algorithms and programming instructions in addition to displaying the resulting sequence.

Accordingly a system and method for delegating or shifting graphics processing tasks to a graphics processing unit GPU is desirable by using a 3D model and fixed pipeline functions of the GPU to create two dimensional graphical effects. Alternatively a system and method for creating two dimensional graphics effects using a set of instructions for processing the two dimensional effects in the 3D coordinate system is desired.

Embodiments of the present invention overcome one or more disadvantages of the prior art by implementing two dimensional transitions using a three dimensional coordinate system. Instead of sending the transformed data relating to two dimensional transitions to the CPU to perform matrix calculations pixel or texture calculations embodiments of the present invention send data to the GPU without sending them to the CPU so that the GPU may process the data more efficiently. The GPU may render media objects animations or other graphical elements onto a video buffer to be ready for display. Alternatively a set of computer executable instructions or software applications may process the data in the 3D coordinate system to create two dimensional effects. Hence embodiments of the present invention reduce bus traffic CPU load and assist in shorten rendering time of processing of transitions animations or other graphical transformations.

In addition embodiments of the present invention make some transitions between media objects or images e.g. dissolve cross fade or simple wipe transitions take up less CPU time and make developing new visual variants and transition patterns more efficiently. This design provides users a rich collection of visual variants by mixing wipe patterns rendering techniques and parameters. Embodiments of the present invention also use the GPU fixed function pipeline to execute and process three dimensional media objects while producing two dimensional graphical effects on a large proportion of machines currently in the market. Alternatively embodiments of the invention may use fixed function pipeline of a set of instructions or software applications to process three dimensional media objects to produce two dimensional graphical effects.

In accordance with one aspect of the invention a method generates a two dimensional transition between a first media object and a second media object using a graphics processing unit. A three dimensional model corresponding to a desired two dimensional transition pattern is defined. A transition between the first media object and the second media object is generated as a function of the defined three dimensional model using the graphics processing unit.

According to another aspect of the invention a system generates a two dimensional transition between a first media object and a second media object. An interface receives the first media object the second media object and a transition pattern mesh. A transition generator maps a plurality of vertices of the received first media object to a first mesh to create a first mapped media object. The transition generator maps a plurality of vertices of the received second media object to the transition pattern mesh to create a second mapped media object. A graphics processor renders the transition between the first media object and the second media object from the first mapped media object and the second mapped media object.

According to yet another aspect of the invention a system generates a transition between a first media object and a second media object. A first processor or first set of instructions renders the first media object and the second media object. An interface receives the first media object the second media object and a transition pattern mesh. A transition generator maps a plurality of vertices of the received first media object to a first mesh to create a first mapped media object. The transition generator maps a plurality of vertices of the received second media object to the received transition pattern mesh to create a second mapped media object. A second processor or second set of instructions independent of the first processor or the first set of instructions for rendering the transition between the first media object and the second media object from the first mapped media object and the second mapped media object.

Referring first to a block diagram illustrates a system for generating two dimensional 2D transitions between a first media object and a second media object according to one embodiment of the invention. A transition is a progressive change on a display from a first media object to a second media object according to a pattern. For example supposed the first media object is a white color image and the second media object is a black color image and a user wishes to transition from the white color image to the black color image. One implementation of transitions may be a left to right wipe transition in which the black color image progressively replaces the white color image from the left to the right until the black color image is fully visible and completely replaces the white color image. Such left to right wipe transition may include patterns such as a vertical line moving from left to right horizontally across the white color image and introducing the black color image to the left of the vertical line as the vertical line progressively moves from left to right until the black color image completely replaces the white color image. Other patterns such as a horizontal line moving vertically two vertical lines moving from the center or the like patterns may be implemented.

The system may be a system as illustrated in or other computerized system that includes a first processor a second processor a display and a storage not shown . In another embodiment system includes an application program interface API for manipulating and displaying three dimensional 3D objects. For example such API may be Direct3D by Microsoft Corporation QuickDraw 3D by Apple Computer Inc. or OpenGL by Silicon Graphics Incorporated. The first processor may be a CPU other centralized or main processor a first set of computer executable instructions or software application for processing. The second processor may be a GPU other secondary processor a second set of computer executable instructions or software application for processing data relating a 3D model.

Initially a first media object and a second media object are displayed on the display . For example the first media object or the second media object may be a file or a collection of files for a still image a video stream or other graphical elements e.g. icons buttons web pages or the like to be displayed on display . A user may wish to create a smooth or other interesting transition between first media object and second media object in a timeline. In addition to creating interesting transitions the user may want viewers to focus on the story portrayed through the media objects and not the transitions and or effects. As such the user may want create the transition with subtle effects and variations. For example supposed the user wishes to bring excitement or share glory to viewers such as presenting a trophy the user may want the trophy to make a grand entrance to the scene by creating a transition between first media object and second media object so that the trophy presentation is pronounced. On the other hand the user may generate a subtle transition such as soft edge dissolve edge and or fancy edge transition to transition viewers to the end of a movie scene.

The first media object and second media object are received by an interface . For example the interface may be a graphical user interface GUI of a software application or other interface means to receive first media object and second media object . The first media object and second media object may be input to interface from a non volatile storage a volatile storage or the like via a direct transmission such as a communication network e.g. a system bus internet intranet or the like .

In one example the user may create a wipe transition between first media object and second media object . While a wipe transition is a 2D graphical effect e.g. second media object moving across the computer display from left to right to replace first media object embodiments of the present invention defines a 3D model e.g. x y z coordinate system for any given transition. For example is a block diagram illustrating a 3D model according to one embodiment of the invention. The model shows a 3D view space with three axes x axis y axis and z axis. In another embodiment the 3D view space is configured to adapt to different screen aspect ratio e.g. 4 3 or 16 9 of display . The model also illustrates an eye to show that the viewer is looking at the direction opposite to the z axis as shown by arrow . In other words the z axis points to the viewer.

Referring now to a diagram illustrates an orthogonal projection transform for mapping a 2D media object to a 3D model according to one embodiment of the invention. The transform is a 2D square having an x axis along the horizontal edge and a y axis being perpendicular to the x axis. In one embodiment the length and width of transform is set to 1 unit such that the visible range is 0 to 1. That is the transform is a 1 1 unit square. It is to be understood that other shapes or polygons e.g. triangle rectangles or the like may be used for mapping a 2D shape to a 3D model. A z axis points to an eye which locates above the x y plane. As an example shown in the eye is located at the position 0.5 0.5 1.0 e.g. viewing from the top of the x y plane . In other words a 2D media object may be mapped to the transform i.e. a 0 0 1.0 1.0 space so that the 2D media object may be represented by data relating to the 3D coordinate system in the 3D model. Such data may be processed by the GPU a set of computer executable instructions or software applications to create the 2D graphical effects.

To further describe transition pattern mesh view are diagrams illustrating an implementation of a transition pattern mesh such as a wipe transition that replaces a first media object with a second media object from the center of the first media object according to one embodiment of the invention. For example as shown in first media object is an image filled with lines and second media object is a white colored image. The user viewing from the direction represented by an eye wishes to introduce second media object to first media object from the center. Initially the user only sees first media object as shown by in . In the wipe transition pattern mesh is mapped onto first media object to form a first mapped media object . For example each vertex or pixel point of first media object is transformed or registered onto the transition pattern mesh which is in 3D so that each pixel point on the transition pattern mesh in 3D matches the corresponding vertex or pixel point on first media object in 2D. In one embodiment the second media object is mapped to a first mesh to form a second mapped media object where the first mesh will be discussed below.

Still Referring to as the wipe transition progresses a first mapped media object moves toward a second media object such that the user sees what s shown by in . In other words the user begins to see the transitioning of first media object to second media object . In when the transition progress has completed the user will only see a resulting second media object while first mapped media object is invisible to the user as shown by in .

In one embodiment during the transition progress second media object moves toward first mapped media object . In another embodiment first mapped media object and second media object moves toward each other during the transition progress. As such by using the transition pattern mesh in 3D 2D transitions although known to those skilled in the art are processed by the GPU or software applications instead of the CPU so that these transitions are processed more efficiently.

Returning to interface also receives a first mesh and a transition pattern mesh to which the media objects are mapped so that a transition between the media objects can be rendered. For example the first mesh may be a full screen rectangle mesh for mapping vertices of first media object to form a first mapped media object. In other words each vertex of first media object is mapped onto first mesh in 3D coordinates such that the GPU or software applications may process or calculate pixel values corresponding to each vertex for display. Using as another example transform has a width of 1 unit and a length of 1 unit creating a 1 1 square. Each of the four corners of transform in 2D coordinate system may be represented as 0 0 1 0 1 1 and 0 1 as shown in . In mapping first media object to first mesh each pixel point or vertex of first media object is registered or transformed to transform . Also the z coordinate of transform may be set to 0 to represent a flat 3D object.

In one embodiment first mesh includes vertex data of first media object relating to texture coordinates e.g. texture values relating to individual color values in a texture space in 3D . In another embodiment the texture coordinate values for each vertex equal to the values of values of x y coordinate i.e. tu tv x y such that four corners of the texture are mapped to four corners of first mesh . In another embodiment the Gouraud shading mode is used and the texture values are applied to fill first mesh . Section 2 of Appendix A describes exemplary implementation of creating first mesh . For information on first mesh and or transition pattern mesh implementation the entire DirectX Software Development Kit of MICROSOFT Direct3D available on the MICROSOFT Developer Network MSDN subdomain of MICROSOFT web site is hereby incorporated by reference.

In another embodiment the first mesh defines a set of vertices and a set of polygon faces. After receiving first mesh and first media object a transition generator maps first media object onto first mesh to form the first mapped media object. Also the transition pattern mesh includes transition patterns to be selected by users for transitioning from first media object to second media object or vice versa. For example interface displays examples of a variety of transitions such as a wipe transition with various shapes or the like on display and the user may use an input device e.g. a mouse or a keyboard to select a desired transition pattern.

Similarly another perspective side view a circle in wipe transition of an incoming or second media object and an outgoing or first media object . Instead of starting from a point at the beginning or when z coordinate value is near 0 the circle in wipe transition starts with a larger circle to a point as incoming or second media object transitions to outgoing or first media object .

To further illustrate shows three views of a circle wipe transition. A screen shot shows a snapshot of a first media object A transitioning to a second media object B with a circle out wipe. An orthogonal view shows the circle in a 2D view while a perspective side view shows that the circle in a cone shape. As such embodiments of the present invention apply a circle shaped transition to the 3D model such as model so that a 2D circle is transformed as a cone shape. By using transition pattern mesh in a 3D model embodiments of the present invention send data relating to the 3D model for 2D transitions to second processor or a second set of instructions collectively as second processor so that the 2D transitions may be processed more efficiently.

It is to be understood that while the user experience of wipe transitions with different patterns may be known in the art processing 2D transitions using 3D transition patterns using a GPU or software applications is more efficient and uses less CPU processing.

It is also to be understood that transition patterns as shown in e.g. the circle in and circle out wipe transitions are illustrated by way of example and not limitations. For example other transition patterns such as swipe diagonal down star wheel bow tie circle rectangle split reveal and inset iris filled V zigzag checkerboard diagonal box diagonal cross diamond radar stars circles keyhole heart sweep in up out down fan up out down in eye or other transitions may be implemented without departing from the spirit of the present invention. As additional examples see which are illustrations of implementations of exemplary transition patterns according to one embodiment of the invention. shows a rectangle transition at 30 progress. also depicts an orthogonal top view and a perspective side view. Similarly depicts a zigzag transition at 30 progress an orthogonal top view and a perspective side view of the transition pattern. In addition section 1 of the Appendix A describes an implementation of creating transition patterns using a 3D model.

Similar to forming the first mapped media object transition generator after receiving second media object and transition pattern mesh from interface maps transition pattern mesh to vertices of second media object to create a second mapped media object. The first mapped media object and the second mapped media object are transmitted to second processor for rendering a transition between first media object and second media object from a first mapped media object and a second mapped media object on display . For example block in shows the result of rendering of a circle out transition from first mapped media object and second mapped media object using second processor or second set of instructions .

In one embodiment system also includes a frame buffer to temporarily store vertex texture stencil or other data for second processor for rendering the transition . For example second processor may process a wipe transition in the following rendering sequence 1 render the transition pattern mesh to a mask if needed 2 render first mesh to frame buffer and 3 render transition pattern mesh to frame buffer . For example at each step second processor maintains a rendering state in the sequence so that before displaying the next media object or transition system may apply the proper rendering state to the displaying media object or transition. In another example frame buffer may be a video memory in a volatile storage non volatile storage or other storage medium.

In another embodiment second processor creates temporary objects to assist in rendering the transition . For example during rendering of a transition e.g. a wipe transition second processor may create temporary objects to access additional hardware and software functions such as accelerated rasterization and hardware software vertex processing. In yet another embodiment second processor creates additional temporary objects to handle first and transition pattern meshes alpha and dissolve blending to be discussed below . For example second processor creates temporary objects to create or load first mesh transition pattern mesh alpha and dissolve blending so that these objects may call or execute specific functions from hardware or software. These temporary objects may be removed or destroyed from the storage after second processor renders transition or other processing.

In one embodiment embodiments of the present invention create additional effects along with the transitions. For example transitions depicted in and show sharp edges of the transition patterns as the transition patterns change from the first media objects to the second media objects. is a flow chart illustrating a method for generating a 2D transition between a first media object and a second media object with a sharp edge of transition patterns according to one embodiment of the invention. Initially at system loads first mesh e.g. first mesh and a transition pattern mesh e.g. transition pattern mesh . For example the interface receives a transition pattern mesh e.g. circle in zigzag or the like from a user after selecting from a collection of transition patterns provided by a software application or supplied from other sources. At system defines a 3D model for generating the selected 2D transition. For example by using model and orthogonal transform system defines animation loop for progress from 0.0 to 1.0 as defined transform .

At interface receives a first media object as an outgoing media object e.g. first media object . The transition generator maps the first media object to the first mesh to form a first mapped media object at . The interface receives a second media object e.g. second media object at and the transition generator maps the second media object to the selected received transition pattern mesh from the interface at See descriptions of for an example of an implementation of mapping . The second processor next renders the transition e.g. transition between the first media object and the second media object from the first mapped media object and the second media object at . For example in rendering second processor first calculates data relating to vertices pixels and or texture of the first mapped media object and the second media object before the transition takes place. The second processor next calculates the data as a function of progress i.e. as the transition progresses in changing first media object to second media object . Upon completion of calculating the data second processor converts calculated data to formats to be displayed on display . For example display may be a computer monitor with aspect ratio 4 3 and second processor may convert the calculated data suitable to display the transition on display with aspect ratio 4 3. As a result after rendering display displays the transition transitioning from first media object to second media object . See section 3 of the Appendix A describes one implementation of creating sharp edges.

As discussed embodiments of the present invention create additional effects to transitions between media objects in addition to generating transitions using a 3D model. For example embodiments of the present invention may soften the edge during the transition as the first media object intersects the second media object.

To soften the hard or sharp edge by previous techniques alpha blending techniques may be used. For example interface receives an alpha map for softening sharp edges of transition patterns. In one embodiment second processor receives and processes parameters such as per primitive material alpha parameters per vertex vertex alpha parameters per pixel alpha texture frame buffer and render target alpha parameters or the like alpha blending parameters. Through alpha blending techniques alpha values decrease gradually around the edge where the first media object and the second media object intersects. In one embodiment the alpha map is used for storing alpha values.

At 70 progress alpha values along a line are selected to define the transition progress. For example the alpha value at point defines the transition progress value for two corresponding points and in object in . Similarly the alpha value at point defines the transition progress value for a corresponding point in object in . It is to be understood that as the transition progresses another line indicative of the transition progress would indicate where the alpha values are to be selected from alpha map .

In a further alternative embodiment a dissolve blending technique is applied to the edge intersecting between the first media object and the second media object. For example this technique requires two rendering processes by second processor . The second processor first renders transition pattern mesh to generate a dissolve map having dissolved alpha values. In the second rendering process second processor renders the first mapped media object and the second mapped media object with the dissolve map. In other words similar to rendering with the alpha map second processor generates a separate dissolve map having dissolved alpha values to be rendered with the first mapped media object and the second media object.

In another embodiment both an alpha blending technique and a dissolve blending technique may be used. For example alpha values from the alpha map are retrieved as in the alpha blending technique. Next a dissolve map is created having dissolved alpha values and calculated with the alpha values from the alpha map to fashion the dissolve blending effect. For example the calculation is done by applying the ADDSIGNED operation e.g. ADDSIGNED calculates Alpha from alpha map Alpha from dissolve map 0.5 and restricts result between 0 and 1. In another embodiment only pixels with calculated alpha value larger than 0.25 are displayed as part of the transition. In this example although these pixels are not displayed the calculated alpha values are stored for other uses e.g. storing them in a stencil buffer . Section 8 of the Appendix A describes an implementation of a dissolving edge technique.

Alternatively in one embodiment interface receives a third media object at . For example in addition to alpha blending dissolve blending or soft edge techniques a user may create an edge consisting of texture or shading data that is different from the texture or shading of the first media object and or the second media object. As such transition generator maps the third media object to the transition pattern mesh to form a third mapped media object at . The second processor renders the transition between the first media object and the second media object from the first mapped media object the second mapped media object the third mapped media object at . Section 6 of the Appendix A describes an implementation of creating a transition using a third media object.

In yet another embodiment second processor renders transitions to incorporate techniques such as alpha blending dissolve blending soft edge sharp edge third media object blending or a combination of above described techniques. For example a user may create a transition by a combination of a third media object blending technique and a sharp edge technique to control which pixel will be eventually displayed. In this example transition generator maps the third media object to form a third mapped media object in addition to mapping the second media object to form a second mapped media object. Next transition generator places the second mapped media object behind the third mapped media object e.g. in negative z coordinate direction with the amount of current animation progress . That is the vertices or pixel values of the second mapped media object are mapped behind the vertices or pixel values of the third mapped media object so that the user may only see pixels of the third mapped media object. Next transition generator uses the third mapped media object to replace pixels where first media object and second media object intersect. In other words unlike alpha or dissolve blending techniques described earlier the third media object blending technique uses a third media object to replace texture values of pixels along the edge where first media object and second media object intersect. Hence when second processor renders the transition between the first media object the second media object using the third media object the user sees on display the third media object along the edge where the first media object and the second media object intersects. In one embodiment the width of the third mapped media object starts narrow and grows wider as the animation of the transition progresses. Section 7 of the Appendix A describes an implementation of transition effects described above.

In another example of using a combination of techniques described above a combination of a soft edge technique and a third media object blending technique may be used. In one embodiment second processor first renders second mapped media object and then renders the third mapped media object or vice versa. The alpha values of the alpha map are used blend the pixels of the edge where the third mapped media object intersects with the first media object and or the second media object.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

The order of execution or performance of the methods illustrated and described herein is not essential unless otherwise specified. That is elements of the methods may be performed in any order unless otherwise specified and that the methods may include more or less elements than those disclosed herein. For example it is contemplated that executing or performing a particular element before contemporaneously with or after another element is within the scope of the invention.

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

In view of the above it will be seen that the several objects of the invention are achieved and other advantageous results attained.

As various changes could be made in the above systems and methods without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

