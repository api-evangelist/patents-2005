---

title: Method and apparatus for low overhead network protocol performance assessment
abstract: A method and apparatus for testing network performance are provided. In data provided by an application on a first host for transport or communication to an application associated with a second host according to a first data transport protocol is intercepted at the first host and wrapped or encapsulated in a test data packet formatted according to a second data transport protocol. The test data packet formatted according to the second data transport protocol includes, in addition to data comprising all or a portion of the original data packet, instrumentation information. The test data packet is then delivered to the second host, which unpacks the original data packet and the instrumentation information. A response packet containing instrumentation information may be sent from the second host to the first host to provide roundtrip performance metrics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07573829&OS=07573829&RS=07573829
owner: Avaya Inc.
number: 07573829
owner_city: Basking Ridge
owner_country: US
publication_date: 20050912
---
The present invention is directed to network performance testing. In particular network performance is tested by encapsulating data intended for transmission using a first protocol in a data packet formatted according to a second protocol and including test information.

Networks interconnecting computers or other hosts to one another are increasingly used to support real time communications in addition to the transfer of data files. When use of a computer network in connection with voice telephony video telephony or other real time communications is desired it is often advisable to test the network in order to determine whether a sufficient level or quality of service can be provided for such uses. For example packet loss rates transmit time delay and arrival time variations jitter of data packets all must be within certain limits in order to provide an acceptable level of service for real time communications. Furthermore the network should be capable of supporting one or more quality of service enabling technologies such as the resource reservation protocol RSVP .

In order to assess the ability of a data network to support real time communications such as Internet protocol IP telephony probes and sniffers to generate network traffic and measure network performance by observing characteristics such as packet loss jitter delay and support for quality of service enabling technologies usually must be deployed. However many current Internet protocol networks such as IPv.4 networks are restricted in the number of spare IP addresses left to allocate. Therefore the introduction of probes or new traffic onto a network can have a detrimental effect on the existing traffic and network capacity. In particular the deployment of probes and sniffers on a network can compromise measurements of that network s performance. Also by adding new traffic more of the available network bandwidth and processing power is consumed.

In addition to problems with network congestion and capacity that can be introduced by adding probes some systems for performing such testing require the addition of hardware to networks. Such hardware can be in the form of stand alone computers single board computers or servers. Furthermore even if probes are deployed as software applications on existing network entities the problems noted above with respect to the addition of network traffic and network entities remain. Furthermore test facilities that are added as software to existing network entities as an additional application compete with other applications on the network entity for resources potentially adversely affecting the performance of the network entity.

Embodiments of the present invention are directed to solving these and other problems and disadvantages of the prior art. According to embodiments of the present invention existing traffic sent between network hosts in a network is used to test network performance. In particular embodiments of the present invention instrument the network stack of network hosts in order to encapsulate or wrap the data or traffic in the form of one or more test data packets formatted in accordance with a data transfer protocol that is different than the data transfer protocol that would normally be used to send the data to another host. In addition embodiments of the present invention add information for transmission with encapsulated data packets that is used in connection with performance testing. Accordingly existing or native traffic can be sent according to a protocol to be tested rather than according to a protocol that would otherwise be used to transmit that traffic.

In accordance with still other embodiments of the present invention instrumentation added to the network stack at a receiving host operates to unpack encapsulated data for delivery to a recipient application. In addition the instrumentation at the receiving host retrieves the information added at the sending host for test purposes. In accordance with still other embodiments of the present invention the receiving host can repackage the information related to testing of the network and add additional test information. The test information may then be placed in a response packet formatted according to the protocol being tested and returned to the originating host. When a response packet is received at the originating host network performance metrics such as roundtrip transit time delay and jitter can be determined. In addition in connection with a flow of data involving a number of data packets information regarding packet loss can be obtained.

In accordance with further embodiments of the present invention the instrumentation in the network stack of the originating host directs the packet encapsulating the original data traffic to a port on the receiving host associated with the protocol being tested rather than the port on the receiving host to which the traffic or data was originally addressed. The network instrumentation on the receiving host then delivers the transmitted data to the recipient application after unpacking that data from the data packet that was addressed to the tested port.

Additional features and advantages of embodiments of the present invention will become more readily apparent from the following discussion particularly when taken together with the accompanying drawings.

With reference now to components of a system for network protocol performance assessment are illustrated. In general the system includes a number of network hosts interconnected to one another by a network . In general each network host includes or is associated with an application . The application may comprise a source and or sink for data. As examples an application may generate data process data provided from another application or network entity or may comprise a communication application for transferring data.

Each network host also generally includes a network protocol stack . Although the network protocol stack is not limited to any particular configuration an example of a network protocol stack includes a transmission control protocol Internet protocol TCP IP protocol stack. As can be appreciated by one of skill in the art the network protocol stack of a network host may operate to receive data from the application associated with the network host to create data packets according to the protocol implemented by the network protocol stack and to provide those data packets to the network over a first port for transmission to a recipient network host . For example packets created in the network protocol stack of the first network host are generally passed to the network via a first port . Furthermore packets created in the network protocol stack of a first network host are generally addressed to a corresponding first port of the recipient network host . In addition the network protocol stack generally functions to receive data packets including data packets delivered to a first port of an associated network host to retrieve data contained in those data packets and to deliver the data to an associated application . For example data packets addressed to the first port of the second network host may be processed by the network protocol stack associated with the second network host and data contained in such data packets may be delivered to an associated application

In accordance with embodiments of the present invention each network host additionally includes a shim inserted in the network protocol stack referred to herein as an encapsulator . The encapsulator generally functions to intercept traffic i.e. data packets generated by an application from the protocol stack . Intercepted data is encapsulated by the encapsulator in test or wrapper data packets that are formatted according to a protocol that is different than the protocol generally used by the network protocol stack to form data packets. The encapsulator also inserts information in the test data packet encapsulating the intercepted data packets. Such information may include an identifier time stamp or other data for use in connection with measuring the performance of the network . The encapsulator then delivers the test data packet formatted according to the second protocol to the network for instance through a second port . As an illustrative example the network protocol stack on a first host may format data received from an application for transmission according to a first protocol such as the TCP IP protocol. One or a number of the TCP IP data packets are then intercepted by the encapsulator and encapsulated in one or more test data packets formatted according to a second protocol for example a real time protocol RTP . In addition to the TCP IP data packet or packets carrying the traffic generated by the application the test data packet or packets formed by the encapsulator includes an identifier and a time stamp. The test data packet or packets carrying the encapsulated data packet or packets as a payload are then passed by the encapsulator to the network via a second port

The encapsulator also functions to handle data packets received at the second port of an associated network host . In particular the encapsulator retrieves encapsulated data from test data packets received at the second port . The encapsulated data when removed from the test data packet received at the second port may be in the form of data packets formatted according to the first protocol that normally would have arrived at the host via the first port . The retrieved data packets are then provided to the network protocol stack for delivery to the application as if the data had been delivered via the first port . In addition the encapsulator retrieves information from received data packets that can be used in connection with performance testing of the network . As an example a test data packet sent via the second port of a first network host according to a second protocol may be received at the second port of the second network host . The encapsulator then unpacks the encapsulated data packet or packets and the added information regarding network performance. The data packet or packets that had been encapsulated are then passed from the encapsulator to the protocol stack for retrieval of the data from those data packets and for delivery to the receiving application

The encapsulator of a network host also may function to provide response packets. By sending response packets more complete network performance information can be obtained. For example round trip transit times can be determined. In general an encapsulator formats response packets according to the protocol being tested. In addition such packets may include information used in connection with testing the performance of the network . Such information may include information originally transmitted with encapsulated data information derived from information originally transmitted with encapsulated data and or information added by the encapsulator creating the response packet. For example after the encapsulator on the second network host has unpacked and delivered data packets that were encapsulated to the network protocol stack and has retrieved information related to network performance including an identifier and a time stamp indicating the time at which the data packet including information was originally sent from the first network host the encapsulator may create a response packet. The response packet may include the received identifier the time stamp from the first network host a new time stamp indicating the time at which the response packet was sent from the second network host and or other information. The response packet is sent to the first network host via the second port of the second network host . Upon receipt of the response packet at the second port of the first network host the encapsulator may retrieve the information related to performance testing of the network associate a time stamp indicating the time at which the response was received at the first network host and provide that information to a test application or database. In accordance with embodiments of the present invention a response packet may be received for some or all encapsulated data packets delivered to a receiving host .

With reference now to components of a network host incorporating an encapsulator in accordance with embodiments of the present invention are depicted in block diagram form. The components may include a processor capable of executing program instructions. Accordingly the processor may include any general purpose programmable processor digital signal processor DSP or controller for executing application programming. Alternatively the processor may comprise a specially configured application specific integrated circuit ASIC . The processor generally functions to run programming code implementing various functions performed by a network host including encapsulation and test operations as described herein.

A network host may additionally include memory for use in connection with the execution of programming by the processor and for the temporary or long term storage of data or program instructions. The memory may comprise solid state memory resident removable or remote in nature such as DRAM and SDRAM. Where the processor comprises a controller the memory may be integral to the processor .

In addition the network host may include one or more user inputs or means for receiving user input and one or more user outputs or means for outputting . Examples of user inputs include keyboards keypads touch screens touchpads and microphones. Examples of user outputs include speakers display screens including touch screen displays and indicator lights. Furthermore it can be appreciated by one of skill in the art that the user input may be combined or operated in conjunction with a user output . An example of such an integrated user input and user output is a touch screen display that can both present visual information to a user and receive input selections from a user.

A communication device or server may also include data storage for the storage of application programming and or data. In addition operating system software may be stored in the data storage . The data storage may comprise for example a magnetic storage device a solid state storage device an optical storage device a logic circuit or any combination of such devices. It should further be appreciated that the programs and data that may be maintained in the data storage can comprise software firmware or hardware logic depending on the particular implementation of the data storage .

The data storage generally includes one or more applications . An example of an application includes applications that can be used to generate or modify data such as word processing spreadsheet or publishing applications or any other type of application capable of generating or modifying data. Other examples of applications include communication applications and mass storage applications. In addition the data storage of a network host in accordance with embodiments of the present invention may include a network stack that has been instrumented to include an encapsulator as described herein. The encapsulator may be integrated into the network protocol stack or the network protocol stack and the encapsulator may exist as separate programs or applications.

A communication device or server may also include one or more communication network interfaces . Examples of communication network interfaces include a network interface card a modem a wireline telephony port a serial or parallel data port or other wireline or wireless communication network interface.

With reference now to the relationship between software associated with a network host and the network is illustrated. In particular illustrates the operation of the encapsulator in relation to other software components on a network host . The application running on or associated with the network host communicates with other applications running on or associated with other network hosts . When an application wants to use the network to communicate it does so through an application programming interface generally provided as part of the network protocol stack . The encapsulator generally comprises software that is executed to observe and intercept communication requests and or data packets as they pass through the network stack from the application to the network layer. Furthermore with respect to packets received at a network host the encapsulator observes intercepts test data packets encapsulating other data packets and retrieves encapsulated data packets as they pass from the network layer through the protocol stack to the application .

At the interface between the application programming interface and the encapsulator Location the encapsulator determines if a network request is destined for another host that has an encapsulator installed if the traffic being sent is suitable to be encapsulated into a packet of the protocol type being tested if it is time to schedule a test and or if any other eligibility criteria are met. If the network transfer does not meet the encapsulator s requirements the traffic comprising the transfer passes through the network stack normally by passing from the application programming interface directly to the socket library at location for delivery to the network over a first port .

If the network transfer meets the requirements of the encapsulator the encapsulator encapsulates the data packets i.e. the traffic being sent to be transferred in data packets formatted according to the protocol being tested and adds additional information for use in connection with performance testing to form a test data packet. Accordingly as used herein a test data packet is a data packet formatted according to a protocol to be tested that contains data packets formatted according to another protocol and that contains test information. The test data packet is then provided to the socket library at its interface between the encapsulator and the socket library location for delivery to the network over a second port .

With reference now to aspects of the operation of a system for network protocol performance assessment in accordance with embodiments of the present invention are illustrated. Initially at step instrumentation of network traffic at a network host is enabled. A determination may then be made as to whether an application on the network host requests use of the network for a communication step . If no request to use the network by an application is detected the process may idle at step .

Upon detecting a request by an application to use the network for communication for example to transfer data the encapsulator intercepts the request as that request passes through the network protocol stack step . A determination may then be made as to whether the network communication is destined for another network host with an encapsulator step . This determination may be made by an encapsulator on the sending network host . Alternatively the encapsulator at the sending host may encapsulate all or some fraction of the outgoing traffic.

If the communication is destined for a network host having an encapsulator the data packet or packets comprising the communication or transfer from the sending host and test information are encapsulated in a test data packet or packets of the type to test formed by the encapsulator or at the direction of encapsulator step . For example if the network is to be tested for real time protocol performance data packets comprising the communication are encapsulated in an RTP test data packet. The test information that is inserted in the test data packet with the data packet or packets for transfer may include an identifier. In addition the instrumentation information may include information for test purposes such as a time stamp. The type of service and other parameters for example RTP parameters for the test data packet are then set as appropriate for the stream to test step . In addition information related to the original IP header parameters for the traffic that the application wishes to send may be inserted step . The test data packet is then sent to the receiving host on the port to test step . As can be appreciated by one of skill in the art after consideration of the description provided herein the ports on the receiving host to which the test data packet encapsulating the original traffic is sent is different than the port to which the traffic is originally addressed. In addition the identifying information time stamp and or other information related to testing the performance of the network is recorded at the sending host step .

If at step it is determined that the network communication requested by the application is not destined for another host with an encapsulator or if it is determined that the communication is otherwise ineligible for encapsulation a data packet using the original IP header parameters may be passed to the network for transmission step . The data packet using the original IP header parameters may then be sent to the receiving network host on the original port step . After sending a normal data packet to a receiving host at step or after sending a test packet to a receiving host at step and recording identifying information at step the process for sending network traffic may end.

With reference now to additional aspects of the operation of a system for testing network performance in accordance with embodiments of the present invention are illustrated. At step a data packet is received at a network host having an encapsulator . A determination may then be made as to whether the received data packet is an RTP test packet or other type of test packet in a protocol whose performance on the network is being tested having instrumentation information and having data for an application on that host has been received. If it is determined that a test data packet has been received the instrumentation information is copied into the payload of a response packet and additional instrumentation such as a local time stamp is added to the payload step . The response packet is then sent to the network host that sent the original packet step . At the time the response packet is sent instrumentation information such as identification and or time stamp information is recorded from the original packet at the receiving host step .

The test packet payload including the data packets comprising the data for the application is then unpacked by the encapsulator on the receiving host step . In addition if the data comprising the payload is fragmented over a number of data packets it may be reconstituted by the network protocol stack . The data packets are then passed into the stack for delivery to the application step .

If it is determined that the data packet received at the receiving network host does not include instrumentation information it may not be operated on by the encapsulator . Instead it is passed to the network protocol stack for delivery to the application as a normal i.e. as a non test data packet step .

With reference now to a process flow in accordance with embodiments of the present invention is illustrated. In particular a process flow in accordance with embodiments of the present invention that includes an initiation packet flow and a response packet flow is illustrated. As depicted in a sending host application provides data for transmission as the payload of an IP data packet . The IP data packet may be formed by operation of the protocol stack associated with the sending host application . The IP data packet is then encapsulated into a test or wrapper packet or packets and instrumentation information is associated with the test data packet shown in at process arrow . Encapsulation and instrumentation may be performed by operation of the encapsulator associated with the protocol stack that formed the original IP data packet . As a result of the encapsulation and instrumentation a test or wrapper data packet is formed. Furthermore the IP data packet encapsulated by the test or wrapper packets may be divided into fragments that are associated with different test or wrapper packets . For example in a first wrapper packet contains fragment of an IP data packet while fragment n is included in wrapper packet n

The test or wrapper data packets are transmitted across the network as the initiation flow . The wrapper packets are then received at the encapsulator associated with the receiving host application and reconstitution or recovery of the original IP data packet is performed shown at process arrow . The recovered data packet is then delivered to the receiving host application . As can be appreciated by one of skill in the art from the description provided herein the recovered data packet may be identical to the form of that packet when it was initially formed by the protocol stack associated with the sending host application

When the instrumentation information is added as part of the encapsulation process instrumentation information is also stored in a metric collector . Information maintained in the metric collector may include the time stamp information added as part of the encapsulation process and the identifier associated with the encapsulation packet or packets formed.

Instrumentation data included in the wrapper packet is passed to a metric collector which may be associated with the receiving host . The collected information may then be modified and or added to additional instrumentation information as part of a response packet generation process . In accordance with the embodiments of the present invention a response packet may be generated to correspond to each wrapper packet received at the receiving host . For example a response packet may be generated that corresponds to the wrapper packet received at the receiving host . The response packet may include the identifier sequence number time stamp or other information added as a part of the instrumentation of the wrapper packet and or the response packet . Similarly a response packet n may be generated corresponding to wrapper packet n

At the sending host instrumentation information is recovered from received response packets . Such instrumentation information may be recovered by the encapsulator associated with the sending host . The instrumentation information recovered from the response packets may be delivered to the metric collector

Although certain examples provided in the present description have discussed the encapsulation TCP IP data packets in test or wrapper packets comprising RTP data packets it should be appreciated that embodiments of the present invention are not so limited. In particular embodiments of the present invention may be applied in connection with the wrapping or encapsulation of a data packets formatted according to any protocol into another data packet formatted in accordance with any other protocol and including instrumentation information. Accordingly embodiments of the present invention may be applied to test the performance of networks in connection with the delivery of data streams formatted according to a first protocol by transporting data formatted according to a second protocol using data packets formatted according to the first protocol. Furthermore the first and second protocols may both operate at the same network layer or level according to a layered model of the applicable network.

The foregoing discussion of the invention has been presented for purposes of illustration and description. Further the description is not intended to limit the invention to the form disclosed herein. Consequently variations and modifications commensurate with the above teachings within the skill or knowledge of the relevant art are within the scope of the present invention. The embodiments described herein above are further intended to explain the best mode presently known of practicing the invention and to enable others skilled in the art to utilize the invention in such or in other embodiments and with the various modifications required by their particular application or use of the invention. It is intended that the appended claims be construed to include alternative embodiments to the extent permitted by the prior art.

