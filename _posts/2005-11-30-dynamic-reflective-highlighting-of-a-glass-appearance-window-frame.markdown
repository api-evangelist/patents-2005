---

title: Dynamic reflective highlighting of a glass appearance window frame
abstract: Aspects for changing a reflective highlight on a glass appearance window frame of an application window are described. An illustrative method includes steps of displaying a first reflective highlight on a glass appearance window frame of an application window, calculating a second reflective highlight in response to detection of an event, and changing the displayed first reflective highlight on the glass appearance window frame of the first application window to the second reflective highlight. The event may correspond to a command to move and/or resize the application window, determination of a time of day event, determination of a change in active/inactive status of the application window, or to a command to change a reflective highlight configuration. Reflective highlights may be changed automatically and/or in response to receipt of an input from a user to change one or more portions of a reflective highlight configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07412663&OS=07412663&RS=07412663
owner: Microsoft Corporation
number: 07412663
owner_city: Redmond
owner_country: US
publication_date: 20051130
---
Over the last two decades the number of users of computers has constantly increased. Beyond the staple of use of computers in the work environment the use of computers at home and in personal settings has also increased during this same time. As this use of computers in both the workforce and personal life has increased so has the desire to allow for easier use of them. In order to make the process easier for users many operating systems today utilize a windows based configuration of application programs.

Application windows are a user interface facility of graphical user interface GUI systems. While application windows may vary in appearance across systems they share many common attributes such as a frame area with a title bar control containing window management controls the ability to be resized and repositioned and the ability to exist among other application windows associated with different applications. Together multiple application windows can appear simultaneously on the screen even layered on top of each other typically represented by the order each application window was last accessed by the user. When an application window is the window that a user is working with currently its frame appears in an active visual state. This is in contrast to an inactive visual state when the application window is not the window the user is currently working with. These two states typically have different appearances and primarily serve to communicate to the user which application window she is currently working with.

Increasing a user experience in an operating environment and additional manners for identification of application windows property sheets and dialogs for the user are always under development. Creating real world environments during a user experience facilitates an easier understanding of use of an application window and other user interface elements displayed as part of an operating system. Aspects of the invention include a system for rendering dynamic reflective highlighting to a glass appearance window frame. Other aspects are directed to methods for reflective highlight image placement that is calculated in real time to change the glass appearance window frame s visual appearance over time and or in the event of an action.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. The Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In the following description of various illustrative embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a digital camera a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a pen stylus and tablet microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into and and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

In Windows Vista by Microsoft Corporation of Redmond Wash. a user experience may be a glass appearance window frame common to all application windows property sheets and dialogs. The properties of this glass appearance window frame may include a partially transparent frame appearance. Additionally any visible region behind the glass appearance may be blurred. When combined these individual elements may capture and convey some of the visual attributes associated with a real world physical pane of glass.

One additional element to capturing and conveying the properties of a real world physical pane of glass is the visual and behavioral attributes of a dynamic reflective highlight. Also referred to as a reflection highlight or environment highlight a dynamic reflective highlight is a visual treatment that describes a stationary light source or reflection applied to a potentially non stationary and reflective object. If the object is moved the reflection highlight may remain stationary and either not move with the object or move at a different speed or direction from the object. In order to provide more user interface elements to enhance a user s experience such visual and behavioral attributes of a dynamic reflective highlight are needed.

As shown in desktop space is an area or region of a display that allows for the display of application windows corresponding to application programs. Application window is used by an application program to display content to a user. Application window is shown to include a glass appearance window frame. The glass appearance window frame of application window may be configured to only be shown around the top of the application window and or one or more other sides of the application window .

The glass appearance window frame of application window is shown being represented by a number of reflective highlight regions and non reflective highlight regions . In a user experience and the rendering of the glass appearance window frame a visual and behavioral element that effectively mimics dynamic reflection highlights is introduced. The configuration of reflective highlight portions and non reflective highlight portions are dynamic in that they can change over time or in response to some event. The reflective highlight regions may be slightly more opaque e.g. whitish regions in the glass appearance window frame compared to the non reflective highlight portions which suggest a highlight reflected by glass. Together the transparency underlying blur and the reflective highlight suggest the properties associated with real world glass.

The reflective highlight portions and non reflective highlight portions may be part of the composition of common glass appearance window frames and may be a combination of a pre defined bitmap image and a programmatically described position and masking on top of the glass appearance window frame as described below. The configuration of the reflective highlight portions and non reflective highlight portions illustrates a first state of the glass appearance window frame. In accordance with at least one aspect of the present invention the reflective highlight portions and non reflective highlight portions change dynamically.

It should be understood that the pattern of reflective highlight portions and non reflective highlight portions is merely illustrative of one configuration of a reflective highlight of a glass appearance window frame for an application window . As described below the point of reference for the light source creating the reflective highlights may be changed thus creating a difference appearance for the reflective highlight and non reflective highlight portions.

The reflective highlight portions and and non reflective highlight portions and may be calculated in real time for each refresh frame of a display screen. In addition and in accordance with at least one aspect of the present invention the portions and are calculated and displayed during an application window move and or resize operation. The portions change during a move and or resize operation based on a set of rules that describe a reflective highlight image s placement relative to the current position of the application window within desktop space . The result is that the reflective highlight portions move independently from the movement of the application window glass appearance frame. Such a configuration creates the impression of a reflection highlight.

It should be understood by those skilled in the art that the number of application windows shown is merely illustrative and that any number of application windows may be open at a time including those presented on the desktop space .

The configuration of the reflective highlight portions and the non reflective highlight portions may be based upon a reference point of a light source. Reference point is not a physical point but merely a reference location for generation of reflection highlight image bitmap . It should be understood by those skilled in the art that reference point may be positioned to change the configuration of the portions and . The configuration of the portions and may be part of an operating system theme and or may be user configurable. For example a default configuration of the highlight reflection image bitmap may be changed by a user changing the relative location of the reference point . By extending the relative distance between the reference point of a light source and the image bitmap the configuration of the portions and changes. For example the angle of the slants differentiating the reflective highlight portions A H and the non reflective highlight portions A I may change in response to a change in the relative distance of the between the reference point of a light source and the image bitmap .

Reflective highlight image bitmap may be an 800 700 pixel bitmap that creates the highlight itself e.g. the diagonal stripes in . It should be understood by those skilled in the art that a variety of display screen dimensions may be utilized by stretching the image bitmap to fill the screen dimensions e.g. for a 1024 768 pixel region.

The application window position within a desktop determines what region of the reflective highlight image bitmap is revealed. For example as shown in the location of application window from is shown by the dashed line region A. This region A is utilized in rendering the appearance of the glass appearance window frame of the application window in . The reflective highlight image bitmap is another layer in development of the overall appearance of the application window and its corresponding glass appearance window frame. Also as shown in the location of application window from is shown by the dashed line region B. This region B is utilized in rendering the appearance of the glass appearance window frame of the application window in .

Therefore as the application window is moved from its location within a desktop space in to its location in different regions of the reflective highlight image bitmap are utilized for rendering of the application window during the movement. This visual feature is then further enhanced by using the application window offset from the center of the desktop space to calculate the offset of the reflection highlight. The reflective highlight may move across the application window at a different rate than the application window. Such is the dynamic behavior of the reflection highlight. Although not described in the Figures it should be understood by those skilled in the art that the same manner for dynamically changing the reflective highlight may occur during a resizing of an application window as well and that the present invention is not so limited to the examples described herein.

The properties of this glass appearance application window frame may include a partially transparent frame appearance and reflection highlights. Additionally any visible region behind the glass appearance frame in the desktop space may be blurred. When combined these individual elements capture and convey the visual attributes associated with a real world physical pane of glass including a dynamic reflective highlight.

Proceeding to step a determination is made as to whether a command is received to move and or resize the application window. If no the process returns to step for a refresh of the display screen in which the application window is displayed. If yes to step the method moves to step where the application window is moved and or resized in accordance with the command. For example the command may be a user click and drag of the application window from its first location shown in to its end location shown in . At step a reflective highlight image placement of the application window is calculated during the movement and or resizing operation. Similarly at step the application window is displayed in accordance with the calculated reflective highlight image placement. At step a determination is made as to whether the movement and or resize operation on the application window is complete. If so the process ends if not the process returns to step . In accordance with one or more steps of the method of the reflective highlight on an application window dynamically changes for each frame of the refresh of a display screen that displays the application window to a user.

The configuration of the reflective highlight portions and the non reflective highlight portions may be based upon a reference point of a light source. As described above reference point is not a physical point but merely a reference location for generation of reflection highlight image bitmap . It should be understood by those skilled in the art that reference point may be positioned to change the configuration of the portions.

As shown in a 24 hour time scale is shown and a window is shown in dashed lines. Window is associated with the desktop space and represents the reflective highlight image bitmap portion that changes over time. Window is shown to be the portion of the reflective highlight image bitmap utilized by an operating system in rendering a glass appearance window frame of an application window between the hours of 2 AM and 8 AM. Again it should be understood by those skilled in the art that the configuration of the reflective highlight image bitmap may be different and or the configuration of the time scale and or portions shown of the image bitmap may be different. The present invention is not so limited to the examples provided herein. For example although shown in a horizontal and linear manner the window may be configured to move around a circular type image bitmap a non linear image bitmap and or some other configuration.

Proceeding to step a determination is made as to whether a time of day event has occurred. If no the process returns to step for a refresh of the display screen in which the application window is displayed. If yes to step the method moves to step where the reflective highlight image placement of the application window is changed in accordance with the time of day event. For example the time of day event may be a change in the time from 8 AM to 10 AM. At step a reflective highlight image placement of the application window is calculated in accordance with the time of day event. Similarly at step the application window is displayed in accordance with the calculated reflective highlight image placement. In accordance with one or more steps of the method of the reflective highlight on an application window dynamically changes over time.

Example A in illustrates an active state reflective highlight pattern of reflective highlight portions A  and non reflective highlight portions A  of a first application window A and an inactive state reflective highlight pattern of reflective highlight portions B  and non reflective highlight portions B  of a second application window B. In this example the reflective highlight portions A  may be more opaque than the reflective highlight portions B . In accordance with one or more aspects of the present invention the degree of difference in opacity may be such that a user can visually delineate the difference between the different reflective highlight portions of the two application windows. For example the opacity designation may be on a scale of 10 to 90 opacity where an entry of 10 corresponds to a mostly transparent reflective highlight portion while an opacity of 90 corresponds to a mostly opaque reflective highlight portion.

Upon an occurrence of application window B becoming the active window application window A automatically becomes inactive. Example B in illustrates an end transition from with an inactive state reflective highlight pattern of reflective highlight portions A  and non reflective highlight portions A  of the first application window A and an active state reflective highlight pattern of reflective highlight portions B  and non reflective highlight portions B  of the second application window B. In this example since application window B is now the active application window the reflective highlight portions A  may be less opaque that the reflective highlight portions B . Such an occurrence of an event may occur when a user clicks on application window B with an input device.

Proceeding to step an inactive state reflective highlight image placement of the first application window is calculated and at step the first application window is displayed in accordance with the calculated inactive state reflective highlight image placement for the glass appearance window frame of the application window. At step a determination is made as to whether a command has been received to change the first application window to an active state status. If not the process ends. If a command has been received in step the process moves to step .

At step an active state reflective highlight image placement of the first application window is calculated. Moving to step the first application window is displayed in accordance with the calculated active state reflective highlight image placement for the glass appearance window frame of the application window. At step an inactive state reflective highlight image placement of the second application window is calculated and the second application window is displayed in accordance with the calculated inactive state reflective highlight image placement for the glass appearance window frame of the application window at step before ending. Although not shown within these Figures it should be understood by those skilled in the art that more than two application windows may be configured within a desktop space and that the present invention is not so limited to one or two application windows.

Starting at step a default reflective highlight image placement of an application window is calculated. At step the application window is displayed in accordance with the calculated default reflective highlight image placement. At step a determination is made as to whether a command has been received to change the default configuration of the reflective highlight image placement. If not the process ends. If the determination to step is yes the process moves to step where a user defined reflective highlight image placement of the application window is received. For example a user may decide to change the reference point for a light source creating the reflective highlight. Proceeding to step the user defined reflective highlight image placement of the application window is calculated. Finally at step the application window is displayed in accordance with the calculated user defined reflective highlight image placement and the process ends.

It should be understood by those skilled in the art that although the Figures illustrate examples of reflective highlights that dynamically change in a horizontal manner the present invention includes application to changes in a vertically manner as well. In addition other variables such as stacked windows obscured windows and or overlapping windows may also be taken into account when rendering a reflective highlight on a glass appearance window frame of an application window. Those skilled in the art would appreciate these variables and all the possible configurations that may exist.

With respect to an application programming interface API various aspects of the present invention may be performed by an API. For example public APIs may interface with an operating system to allow the operating system to provide the various features of the present invention. In one embodiment a software architecture stored on one or more computer readable media for processing data representative of a change in the reflective highlight on a glass appearance window frame of an application window may include a component configured to change a reflective highlight on a glass appearance window frame of an application window and an application program interface to access the component. An API may receive a request to change the reflective highlight on a glass appearance window frame of an application window access the necessary function s to perform the operation and then send the results back to an operating system. The operating system may use the data provided from the API to perform the various features of the present invention.

While illustrative systems and methods as described herein embodying various aspects of the present invention are shown it will be understood by those skilled in the art that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention.

