---

title: System, method, and computer readable medium for integrating an original language application with a target language application
abstract: A system, method, and computer readable medium for integrating an original language application with a target language application comprises receiving properties related to a source file in the original language application, parsing the source file based on the received properties into a common format for the original language application and the target language application, receiving the parsed source file by a repository module, and placing contents of the received parsed source file on an interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578349&OS=08578349&RS=08578349
owner: Curen Software Enterprises, L.L.C.
number: 08578349
owner_city: Wilmington
owner_country: US
publication_date: 20050323
---
The present application is related to U.S. patent application Ser. No. 11 086 101 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING APPLICATIONS IN MULTIPLE SOFTWARE LANGUAGES U.S. patent application Ser. No. 11 086 121 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING AN ORIGINAL APPLICATION WITH A REMOTE APPLICATION U.S. patent application Ser. No. 11 086 211 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING APPLICATIONS IN MULTIPLE LANGUAGES and U.S. patent application Ser. No. 11 086 102 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR NORMALIZING SOURCE FILES IN MULTIPLE SOFTWARE LANGUAGES the disclosures all of which are hereby incorporated in their entirety by reference herein.

The present invention is related to integrating applications and more specifically to a system method and computer readable medium for integrating an original language application with a target language application.

Various limitations are associated with integrating applications such as difficulty in sharing the structure of application data and application programming interfaces classes . As such it is cumbersome for an application written in one language to access a functionality provided by an application written in a different language. It is currently tedious to integrate these applications because a common structure must be defined in a third language such as Extensible Markup Language Common Object Request Broker Architecture Event Definition Language etc. .

The present invention overcomes these problems and limitations by providing a system method and computer readable medium for integrating an original language application with a target language application.

In one embodiment a method for integrating an original language application with a target language application comprises receiving properties related to a source file in the original language application parsing the source file based on the received properties into a common format for the original language application and the target language application receiving the parsed source file by a repository module and placing contents of the received parsed source file on an interface.

In another embodiment a method for integrating an original language application with a target language application comprises receiving properties related to a source file in the original language application and parsing the source file based on the received properties into a common format for the original language application and the target language application.

In a further embodiment a computer readable medium comprises instructions for receiving properties related to a source file in an original language parsing the source file based on the received properties into a common format for the original language and a target language and receiving the parsed source file by a repository module.

In yet another embodiment a method for integrating an original language application with a target language application comprises receiving information from an interface wherein the information includes at least one of a class methods of the class and fields of the class wherein the methods of the class include at least one of parameters of the method result of the method exceptions of the method a data type of the parameter a data type of the result and a data type of the exception wherein the fields of the class include at least one data type of the field and integrating the original language application with the target language application based on the received information.

In yet a further embodiment a computer readable medium comprises instructions for receiving information from an interface wherein the information includes at least one of a class methods of the class and fields of the class and integrating an original language application with a target language application based on the received information.

In yet another embodiment a method for integrating an original language application with a target language application comprises receiving properties related to a target language and generating integration classes in the target language based on the received properties wherein the generated integration classes in the target language correspond to classes in an original language.

In yet a further embodiment a computer readable medium comprises instructions for receiving properties related to a target language and generating integration classes in the target language based on the received properties wherein the generated integration classes in the target language correspond to classes in an original language.

In yet another embodiment a system for integrating applications in multiple languages comprises a module adapted to create a repository structure receive properties related to an application in an original language import source files related to the application into the repository place contents of the repository on an interface and receive information from the interface wherein the information is adapted to integrate the original language application with a target language application.

Referring now to a system of the present invention is depicted. The system includes a user s environment application files module that includes various file formats such as Java a programming language that derives much of its syntax from C and C but has a simpler object model and fewer low level facilities C or cpp and C or C sharp cs a user interface a current project module and a folder repository . At step a user or software application starts the user interface and creates a project in the user interface. A project captures all the activities performed by the user on the user interface . The user imports source files from his her programming environment potentially in multiple languages. The user performs a selection of classes and methods in the imported files and optionally performs a mapping of parameter return exception data types in a source language to a target language.

The user interface creates a project file on the computer storing the information at the project level including importing properties and generation projects. The project file also contains the list of files imported into a project. The user interface also creates a distinct repository file for each imported source language file . A normalization function in the user interface normalizes the constructs in different languages into a common representation to be used by the display and mapping and generator modules to be described later in the user interface.

Referring now to another embodiment 40 of the present invention is depicted. After creating a project in the system the user provides 71 generation properties for the various languages . Generation properties include namespaces to be used directories where files are created and others. After creating a project in the system the user provides 72 importing properties from a properties module for the various languages. Importing properties include directories macro definitions compiler flags and others for C class path source path VM parameters and others for JAVA a programming language that derives much of its syntax from C and C but has a simpler object model and fewer low level facilities and reference libraries compiler flags and others for C . The properties module user interface saves the properties information into the project file . The user can optionally change the properties information provided at project creation before importing a source language file.

The user can select the importing function in the system which displays a file chooser for the user to select a file in this example a .java file . The user interface invokes the parser module for JAVA a programming language that derives much of its syntax from C and C but has a simpler object model and fewer low level facilities and passes it the importing parameters so that the imported source language file can be successfully parsed. The parser module for JAVA a programming language that derives much of its syntax from C and C but has a simpler object model and fewer low level facilities uses the repository module to create a repository file for the imported source language file. The repository module also creates a repository file . The user interface updates the view with the new data in the repository corresponding to the newly imported file.

Referring now to a further embodiment 80 of the present invention is depicted. After a source language file is imported into the system the user interface displays the classes in the repository in a class explorer type view . The user performs a selection of classes and methods in the classes that are of interest or should be exported to the target language application. The user or software maps data types in the source language to data types in the target language if required using a mapping module function in the user interface. The mapping module updates the repository in memory with the new data. The repository makes the user s choice persistent in a file on the computer when the user chooses the save option on the user interface. The user interface then updates the class view with the new data.

Referring now to another embodiment 100 of the present invention is depicted. If C is selected as one of the target languages the user interface verifies the repository to see if the user has accurately provided all the information needed to perform such mapping. If C is selected as one of the target languages the user interface verifies the repository to see if the user has accurately provided all the information needed to perform such mapping. The user interface verifies the repository to see if the user has accurately provided all the information needed to perform mapping of the source language data types.

If CPP is selected as a target language by the user the user interface invokes the CPP generator module to generate the necessary classes. The CPP generator module generates Proxy Classes in C Streamer Classes in C and Data Classes in C . It should be noted that since CPP is not the original source language adapter classes are not generated. For Java source language applications the user interface invokes the JAVA generator module to generate the necessary classes. The JAVA generator module generates Adapter Classes in JAVA and Streamer Classes in JAVA . It should be noted that since JAVA is the original source language proxy classes and data classes are not generated. If C is selected as a target language by the user the user interface invokes the Csharp generator module to generate the necessary classes. The Csharp generator module generates Proxy Classes in Csharp Streamer Classes in Csharp and Data Classes in Csharp . It should be noted that since Csharp is not the original source language adapter classes are not generated.

In one embodiment of the present invention a method for integrating an original language application with a target language application comprises receiving properties related to a source file in the original language application parsing the source file based on the received properties into a common format for the original language application and the target language application receiving the parsed source file by a repository module and placing contents of the received parsed source file on an interface. The method further comprises storing the received parsed source file in a repository file.

In another embodiment of the present invention a method for integrating an original language application with a target language application comprises receiving information from an interface wherein the information includes at least one of a class methods of the class and fields of the class wherein the methods of the class include at least one of parameters of the method result of the method exceptions of the method a data type of the parameter a data type of the result and a data type of the exception wherein the fields of the class include at least one data type of the field and integrating the original language application with the target language application based on the received information wherein the received information is at least one of a non complex class and a complex class. The method further comprises mapping of the complex class to at least one target language a pre defined mapping of the non complex class to at least one target language. The method also comprises repeating the steps in the method for at least one of a following construct including classes fundamental data types structures unions type definitions interfaces enumerations reference types pointer types and template types.

In yet another embodiment of the present invention a method for integrating an original language application with a target language application comprises receiving properties related to a target language and generating integration classes in the target language based on the received properties wherein the generated integration classes in the target language correspond to classes in an original language. The method further comprises generating adapter classes related to the original application generating proxy classes related to the target application wherein the proxy classes are adapted to communicate with the adapter classes generating data types related to the target application wherein the data types related to the remote application are equivalent to the data types related to the original application and generating streamers related to the target application wherein the streamers related to the remote application are adapted to be utilized by the proxy classes wherein the adapter classes are adapted to provide access to functions of the original application.

The communication comprises sending input parameters related to the original application to the adapter classes receiving output parameters return values and exceptions related to the original application at the proxy classes receiving input parameters related to the original application at the adapter classes and sending output parameters return values and exceptions related to the original application to the proxy classes wherein the streamers related to the remote application are adapted to convert data communicated by the proxy classes to the adapter classes and convert data communicated by the adapter classes to the proxy classes wherein the data is converted into a neutral data format marshaling and wherein the streamers are adapted to receive the data in neutral data format and convert the data to corresponding data types unmarshaling .

Although an exemplary embodiment of the system and method of the present invention has been illustrated in the accompanied drawings and described in the foregoing detailed description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims. For example the functionality performed by the various modules described above can be performed by one or more of the module in the current architecture a distributed architecture and on or via any electronic device. Further such functionality may be performed by described depicted un described and or un depicted contents of the modules.

