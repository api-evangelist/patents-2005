---

title: Model of sensitivity of a simulated layout to a change in original layout, and use of model in proximity correction
abstract: A memory is encoded with a model of sensitivity of a distorted layout generated by simulation of a wafer fabrication process, with respect to a change in an original layout that is input to the simulation. The sensitivity model comprises an expression of convolution of the original layout with spatial functions (“kernels”) that are identical to kernels of a process model used in the simulation. A difference between the distorted layout and the original layout is computed, and the difference is divided by a sensitivity value which is obtained directly by evaluating the kemel-based sensitivity model, and the result is used to identify a proximity correction (such as serif size or contour movement) to be made to the original layout. Use of a sensitivity model based on a process model's kernels eliminates a second application of the process model to evaluate sensitivity, thereby to reduce memory and computation requirements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07458059&OS=07458059&RS=07458059
owner: SYNOPSYS, Inc.
number: 07458059
owner_city: Mountain View
owner_country: US
publication_date: 20051031
---
The invention relates to design of layouts used in lithography of semiconductor wafers. More specifically the invention relates to a method and an apparatus for applying proximity corrections to layouts of integrated circuit IC chips.

In the manufacture of integrated circuit IC chips minimum feature sizes have been shrinking according to Moore s law. Currently the minimum feature size is smaller than the wavelength of light used in the optical imaging system. In order to achieve reasonable fidelity including resolution and depth of focus between a a layout designed in a computer and b shapes of circuit elements formed in a wafer after fabrication a number of reticle enhancement technologies RET have been developed over the last decade such as optical proximity correction OPC phase shifting masks PSM and sub resolution assist features.

Proximity correction as performed in prior art is briefly described below. First an originally drawn shape called layout or pattern is created in a computer see by use of electronic design automation EDA software available from for example Synopsys Inc. Then layout is etched into a standard mask . Mask is then used to form a wafer using a lithography process during which pattern is subject to optical effects resist effects and etch effects . The result is an uncorrected wafer structure which contains a number of deviations from layout .

One or more such differences between structure and original layout may be measured and used to identify wafer proximity corrections . Wafer proximity corrections are then used to overcome this specific set of optical effects resist effects and etch effects when using layout to form a wafer. Specifically as shown in layout is subjected to wafer proximity corrections to form a corrected mask . Use of corrected mask in lithography results in a corrected wafer structure with significantly fewer deviations from pattern .

Wafer proximity corrections may be obtained by overlaying on original layout a number of predetermined shapes called serifs . These serifs may add or remove area from the layout. illustrate a portion of an original layout and an adjusted version thereof obtained by addition of square shaped serifs . Although serifs are illustrated as square in shape other shapes such as rectangles or long lines of effectively infinite length and finite width may be used. The size of each of serifs is selected depending on a specific amount of deviation at individual x y locations in structure relative to corresponding locations in original layout .

Wafer proximity corrections may be obtained by forming in a computer a model of a wafer fabrication process process model using one or more convolution kernels to simulate the wafer image distribution that results from a lithography process. The term intensity is sometimes used to denote wafer image distribution resulting from a combination of optical effects resist effects and etch effects of a semiconductor wafer fabrication process to create a layer in the wafer for example a metal layer or a polysilicon layer. Such a distribution is typically generated from a kernel based model of the fabrication process including each of optical effects resist effects and etch effects by convolving an IC layout with convolution kernels to obtain a simulated wafer image. Convolution kernels used in prior art to model a wafer fabrication process are shown in .

The specific convolution kernels that are used in a process model are normally identified by a supplier of the model. The supplier may generate the process model by empirically fitting data from test wafers using any conventional software such as Progen a lithography model development tool available from Synopsys Inc. or Calibre available from Mentor Graphics Inc.

A process model typically contains a set of spatial filtering kernels where the 2 dimensional kernel surface is defined as an algebraic expression or as numerical values on a grid of 2 D points. Each of these kernels will be convolved against an IC mask layer. The mask layer is a 2 dimensional surface defined by polygons where the value of the surface inside the polygon is 1 and 0 outside the polygon or vice versa for a clear field mask . The process model also contains one or more algebraic expression s describing how to combine the convolution results into an intensity surface. The process model also contains an algebraic expression typically a constant describing a threshold value for drawing contours in the process intensity surface.

For more information on making and using process models see the following articles all of which are incorporated by reference herein in their entirety as background 

Explicit descriptions of the process model expressions that are conventionally used to combine convolution values at a given location in a layout to generate an intensity value at that location are provided in a number of prior art publications such as the following articles all of which are incorporated by reference herein in their entirety as background 

Prior art methods of proximity correction involve a first application of a process model to an unperturbed layout to obtain an unperturbed intensity surface or value at a point which represents the wafer s image distribution as a function of location x y or at a single point . Thereafter the layout is perturbed by adding or removing a serif of an initial serif size followed by a re application i.e. a second application of the process model to the perturbed layout to obtain a perturbed intensity surface or a perturbed intensity value at a point. The initial serif size when scaled by a ratio of a a difference between a threshold and unperturbed intensity and b a difference between the perturbed intensity and the unperturbed intensity yields a serif size used in proximity correction. In current commercial tools known to this inventor the second application of the process model is performed iteratively until the individual serif is properly sized to within a predefined tolerance.

The just described second application of the process model is typically performed 1000s of times once for each location x y where one wishes to place a serif In the end when the original layout has been adjusted at sufficient locations a simulated wafer image from using all the proximity corrections conforms to the original unadjusted layout sufficiently to proceed to actual fabrication of production wafers.

Note that a second application of the process model is required for every serif because current prior art known to this inventor does not teach how to separately account for the individual intensity contribution from an individual serif. Such an individual contribution cannot be simply added to an earlier computed intensity when the process model is non linear. In practice process models are at least 2order non linear as both optical energy and optical coherence effects are second order. The prior art known to this inventor always re evaluates the process model after every perturbation in the layout shape. This inventor notes that the two applications of the process model once without the serif and a second evaluation with the serif are providing a numerical response of the process model intensity with respect to the serif without modeling sensitivity as described herein by this inventor after this background section.

After proximity corrections are identified as described above a corrected mask is created using a proximity corrected layout see step in followed by use of the corrected mask in lithography and related wafer fabrication processes see step to produce a production wafer having the corrected layout i.e. this layout sufficiently conforms to the originally designed unadjusted layout . As shown in a test wafer may be initially used to formulate a correction recipe that is stored in a recipe library for use in proximity correction of new IC designs .

In the process described in paragraph 0008 the most compute intensive work is performed in applying a process model to a layout which as noted above requires a second application of the process model for each serif U.S. Pat. Nos. 6 081 658 and 6 289 499 that are incorporated by reference herein in their entirety describe fast convolution methods for calculating intensity at a single location. These methods can be used to apply a process model to a layout as often as needed and they operate in the space domain. All commercial full chip proximity correction tools known to this inventor use this space domain fast convolution method for process model evaluation. To calculate the effect of a perturbation these tools rely on two calls to the process model one without the serif and a second with the serif. When using the fast convolution method the second application of the process model is fast enough to make full chip proximity correction tools practical

Application of a process model to a layout for proximity correction can also be performed in the frequency domain using any conventional FFT fast Fourier transform to transform the layout into the frequency domain where the convolutions are calculated. See for example U.S. Pat. No. 6 263 299 granted to Aleshin et al. and U.S. Pat. No. 6 171 731 granted to Medvedeva et al. both of which are incorporated by reference herein in their entirety as background. Note that these two patents also require the second application of the process model within the loop over each location where a serif is to be added as described above in paragraph 0015 .

When using the method of FFT to calculate convolutions in a process model the second application of the process model at each serif is prohibitively expensive. There is currently no known method to the knowledge of this inventor to calculate the effect of a perturbation on the process model without calculating the effect of the perturbation on each of the individual FFT s used in the process model. Because there may be between 4 to 40 separate FFT s used in the application of the process model calculating the effect of the perturbation on each is cumbersome. Also to the knowledge of this inventor an FFT approach is currently not used in any commercially available software for full chip optical proximity correction in part because of the inability to calculate the effect of a perturbation quickly.

An article by Yuri Granik published March 2005 in the Proceedings of SPIE Vol. 5754 47 entitled Solving Inverse Problems of Optical Microlithography describes a method to calculate the effect of a perturbation in the layout when using an FFT based method for the calculation of intensity. Towards the end of this article in section 5 thereof Granik suggests that saving electrical fields Afor a mask mand calculating the intensity for a slightly different mask m as per equation 61 based on the saved fields A is faster than a second convolution of the perturbed layout by FFT. The convolutions in equation 61 are quickly calculated by direct multiplication according to Granik. Therefore Granik calculates the effect of each perturbation on each saved electric field then applies the process model a second time to calculate a perturbed intensity. Granik s perturbed intensity the original intensity and a target intensity are used to calculate a serif size using the same serif size calculation currently used in commercial tools as described in paragraph 0011 .

In Granik s method computational complexity may be reduced to order d M N where d is the number of pixels modified in the pattern M is the number of pixels in the kernel and is typically on order of two hundred fifty to twenty thousand and N is the number of intermediate electric fields and is typically on order of four to forty. Granik states the particular importance of the case where one perturbs a pattern one pixel at a time where d 1. However even when d 1 the number of calculations necessary per perturbation is on order of one thousand to one million. Hence Granik s method appears to be too slow for practical applications.

Furthermore caching intermediate FFT results requires memory. If an IC design has been divided up into a number of subdivisions of area 100 by 100 micron with pixel resolution of 50 nanometers then each subdivision requires roughly 32M Bytes per FFT. And this value easily grows by another order of magnitude by increasing the area of the FFT or the decreasing the pixel size. Assuming between 4 40 FFT s in a typical application this results in 100M to 1.2 G Bytes of cached information in Granik s method a size far too large to be accessed quickly using cache technologies available in today s computers.

In the above discussed article Granik applies the process model a second time for each serif. Although he has proposed a faster method to evaluate the effect of the serif his calculation still relies on a numerically calculated response which can be easily identified by his two applications of the process model with and without a serif. Since the process model in practical applications is non linear the second call to the process model at each serif is computationally expensive. In this regard Granik s method is consistent with current commercial tools which apply the process model a second time at each serif. Granik fails to disclose or suggest a second model of sensitivity as described herein by this inventor in text following this background section.

Granik s method also requires saving the intermediate electric fields. This is another indication that he is calculating a numerical response as the second application of the process model requires these intermediate electric fields. In the method discussed next it is not necessary to save or regenerate the intermediate electric fields and hence not possible to calculate the process model a second time.

It is well known in the prior art to compute a parameter called mask error factor MEF as the change in an imaged edge position per unit change in the corresponding drawn edge position. In the language of OPC this inventor postulates a MEF equivalent to be the change in process model contour position per unit change in perturbation width . Prior art known to the inventor calculates MEF numerically by calling the process model twice as noted above once without the perturbation once with the perturbation. Thereafter the two corresponding contours are calculated followed by taking the difference and calculate the MEF as the change in the contour difference divided by the size of the perturbation. To the knowledge of this inventor there is no prior art method to derive an algebraic MEF sensitivity function which defines the MEF at any arbitrary polygon edge.

A memory in accordance with the invention is encoded with a model of sensitivity of a layout where the layout distorted layout is generated by simulation of a wafer fabrication process on an original layout and a computer when appropriately programmed with the sensitivity model simulates the change in the distorted layout with respect to a change in the original layout. The sensitivity model comprises an expression of convolution of the original layout with spatial functions kernels that are identical to kernels of another model namely a model of a wafer fabrication process hereinafter process model . The process model is used in the simulation to generate the distorted layout. A single difference between the distorted layout and the original layout is computed and the difference is divided by a sensitivity value which is obtained directly from the sensitivity model. The result of the division is used to identify a proximity correction such as serif size or edge movement to be made to the original layout.

The prior art second application of the process model at each serif is eliminated in many embodiments of the invention by use of the sensitivity model. In several embodiments identifying the effect of each serif on the distorted layout requires an evaluation of the sensitivity model. Such embodiments are superior over the prior art s double application of the process model for three reasons. First the sensitivity model is based on the process model s kernels and corresponding unperturbed convolution results. There is no need to re calculate the effect of the perturbation on each of the individual convolution surfaces used in the process model. Second in the typical case where the process model is 2order non linear the sensitivity model is 1order linear . This linear model is easier to compute as compared to the non linear model. Third since it is not necessary to re calculate perturbed convolution results it is not a requirement that one save modify or regenerate the intermediate convolution results for each serif at each x y location thereby reducing memory requirements.

The methods data structures systems and combinations thereof described herein for creating and using a sensitivity model may be extended in some embodiments to model a measure of sensitivity commonly known in the art as mask error factor MEF . A MEF model is determined in some embodiments in a manner similar or identical to a sensitivity model as described herein. Such a MEF model is further used in several embodiments to directly calculate the sizes of serifs from errors in the distorted layout s contours.

Depending on the embodiment the sensitivity model is used regardless of whether the process model is evaluated using a fast convolution approach or an FFT approach. However the computational benefit from eliminating the second application of the process model at each serif is most apparent in embodiments using the FFT approach to calculate the process model.

In numerous embodiments the sensitivity model is used independent of how it is created and vice versa although some embodiments combine a specific creation method with a specific usage method of the type described herein.

A memory of a computer is encoded in accordance with the invention with a model of sensitivity of a layout generated by simulation of fabrication of a wafer hereinafter distorted layout with respect to a change in an original layout of an integrated circuit IC chip that is input to the simulation. The change in original layout may be in any form such as a serif of unit area or a movement of a polygon edge in the layout by a unit distance. During simulation the computer evaluates another model namely a model of a wafer fabrication process hereinafter process model to generate the distorted layout. A sensitivity model can be created from the process model in any manner either manually or automatically and creation of model as per operation in in certain illustrative embodiments is described below.

Distorted layout generated by use of process model includes optical effects resist effects and etch effects as described above in reference to after performance of a semiconductor wafer fabrication process to create a layer in a wafer such as a metal layer or a polysilicon layer. Process model is similar or identical to any process model in the prior art and a specific expression E used therein may be either known or unknown depending on the embodiment.

Sensitivity model contains in many embodiments of the invention an expression E of convolution of original layout with one or more functions called kernels that form the basis of process model . Hence sensitivity model s expression E of many embodiments uses a subset of the kernels that are required for process model s expression E. An expression typically includes a form and a set of coefficients typically one coefficient for each term in the form. The form includes the number of terms in the expression the kernel s associated with each term the order of the term e.g linear squared cubic and the type and order of arithmetic operations to be performed on each term e.g add divide . A common form for process model s expression E is four to forty terms each term using the convolution result of a single kernel where the arithmetic operation is to square each term and sum the result a sum of squares . Several embodiments of the invention use in sensitivity model an expression E that has between one to five terms each term using the convolution result of a single kernel where the arithmetic operation is the linear sum of terms.

A memory encoded with a kernel based sensitivity model ensures that a single set of kernels is used in both models and . Use of the sensitivity model provides significant improvements in computation speed and memory utilization when used to identify proximity corrections to an original layout as compared to methods that apply the process model a second time. As noted above in the Background section application of the process model is computationally expensive especially when applied the second time in a loop.

A sensitivity model that uses kernels as discussed in paragraph 0049 can be created by assuming and using directly or indirectly a derivative relationship of the sensitivity model to the process model . The derivative relationship may be used directly e.g. if the process model is completely known then a mathematical differentiation operation is performed thereon either manually or automatically depending on the embodiment. The derivative relationship is used indirectly in some embodiments if the process model is only partially known e.g. if the process model is known to be of order M and uses a group of predetermined kernels then a sensitivity model is created by empirically fitting a set of observed sensitivity measurements from a test wafer to an expression of a next lower order i.e. order M 1 that also uses the predetermined kernels. If order M is not known it is determined empirically.

In some embodiments a mathematical derivative or approximation to a mathematical derivative of an expression E in process model or an adjusted version thereof is stored in memory as the sensitivity model s expression E. Hence in the just described embodiments evaluation of sensitivity model has one order less computational complexity than the complexity in evaluating its corresponding process model . In a first example of such embodiments if process model s expression E is a sum of squares e.g. cA cB cC. . . wherein c c c are constants and A B and C are convolutions of kernels with layout then its mathematical derivative namely 2 cA cB cC . . . is stored in memory of some embodiments as the sensitivity model s expression E. In a second example if the process model s expression E is written as any general algebraic expression then its algebraic derivative is determined and is stored in memory of some embodiments as expression E of sensitivity model .

Instead of storing in memory a strict mathematical derivative as expression E as discussed in paragraph 0052 an approximation is stored in some variants of the discussed embodiments. For example some embodiments approximate a mathematical derivative of model expression E by a Taylor series that is stored as sensitivity expression E. Moreover some embodiments use an adjusted sensitivity expression E or an approximation thereto to account for the effect of large sized serifs e.g. by adding terms to expression E which account for higher order derivatives of process model expression E and make the sensitivity expression dependent on the serif s size. Other embodiments to make other such adjustments either manually or automatically will be apparent to the skilled artisan in view of this patent application.

In making adjustments one or more terms may be excluded from expression E in some embodiments. For example manual or automatic inspection of a mathematical derivative which may itself be generated manually or automatically may reveal that certain coefficients are so small that during evaluation of expression E they result in terms whose contribution is negligible. A term s contribution may be determined manually or by computer to be negligible if an error in proximity correction from dropping the term is less than a predetermined limit set by a human . Hence if a term s contribution is negligible and at the same time computational complexity in evaluating the term is sufficiently high it may be worthwhile to drop the terms from sensitivity expression E.

In one illustrative example of such approximation two checks are made to see 1 if a first coefficient is an order of magnitude smaller than a second coefficient which two coefficients are taken from the top of sorted list obtained by sorting all coefficients in ascending order and 2 if the first coefficient s multiplicand is of a higher degree than the second coefficient s multiplicand and if both answers are true then a term in the derivative of expression E which contains the first coefficient is dropped thereby to identify the sensitivity expression E. The just described approximation technique can be implemented manually or automatically or in a combination thereof depending on the embodiment. In a combination technique a computer may be programmed to automatically identify one or more terms for dropping from an automatically generated derivative followed by display of the identified terms to a human and dropping of the term s on receipt of manual approval thereby to implement the approximation.

Still other embodiments store in memory a linear expression e.g. cA cB cC . . . as expression E of sensitivity model without regard to and independent of a specific form of the expression E in the corresponding process model although in these embodiments as well both models and use the same kernels . Therefore regardless of the embodiment a computer memory in accordance with the invention is encoded with a unique combination of two different models and that both use a common set of kernels whereby one model sensitivity model when evaluated provides sensitivity of a distorted layout output by the other model process model relative to changes in an original layout input to the other model process model .

A sensitivity model of the type described in paragraph 0049 which is based on kernels that are also the basis of process model is used in accordance with the invention to reduce or eliminate the number of times compute intensive acts are repeatedly performed. Specifically some embodiments perform a convolution of an original layout with each of the N kernels only once in stage regardless of the number of locations at which proximity corrections are to be made. The convolutions in stage may be performed in any manner well known in the art. Subsection A in paragraph 0134 describes some industry standard methods that are used in some embodiments to evaluate a process model in stage and . Stage generates as output N two dimensional 2 D arrays of convolution values for locations on a grid superposed on the layout one array for each kernel. The 2 D arrays are also referred to herein as convolution surfaces. Stage supplies the N convolution surfaces to stage in all embodiments of and also optionally supplies them to stage in embodiments that evaluate a known expression in stage as further described below in reference to .

In embodiments wherein process model has a known expression the N surfaces which result from convolution with N kernels are supplied from stage to each of stages and for evaluation of the respective model expressions E and E. An inter relationship between these three stages in is shown customized for such embodiments in and described further below.

In embodiments wherein process model has an unknown expression the N surfaces are supplied from convolution stage to only one evaluation stage namely stage for evaluation of sensitivity model as shown and described in reference to . In these embodiments evaluation of the process model in stage is performed by invoking a library fiction a macro call or other such application programming interface API that may or may not internally perform convolutions and may or may not access the convolution surfaces generated in and such internal performance is not known and not under the control of these embodiments.

Regardless of whether convolutions are performed only once in case of a known expression for the process model or twice in case of an unknown expression for the process model whose evaluation performs its own convolutions internally it is important to note that in most embodiments that use a sensitivity model convolution calculations and their related complexity are excluded from a loop which is shown in by thick dark arrows. Specifically stages and are performed repeatedly in a loop 1000s of times once for a current location x y to obtain a sensitivity value in stage followed by determining a proximity correction for the current location in stage followed by identifying the next location x y in stage .

Stage receives as input the N surfaces generated by convolution stage thereby to eliminate the computational complexity and memory requirement involved in performing convolutions. Some embodiments use the N convolution surfaces during each iteration of the loop as illustrated in . Other embodiments further reduce computations performed in the loop by using the N convolution surfaces in stage just once to pre compute and store a sensitivity surface that identifies a sensitivity value at each location on a grid that covers the original layout and it is the sensitivity surface that is used repeatedly optionally by interpolating therein if a current location falls between grid points during each iteration of the loop as illustrated in B A B and .

In many embodiments stage which is in the loop is implemented as a simple arithmetic operation of computing a difference between a value of the distorted layout from stage at the current location and another value of the original layout at the current location followed by dividing the difference by the sensitivity value. Note that in some embodiments the layout contours are not in fact computed and instead the corresponding intensity values which yield the layout contour on application of a threshold are directly used to compute the difference.

In et seq arrows with dashed lines are used to denote the flow of data and arrows with continuous lines are used to denote flow of control within a processor that implements stages . As noted above heavy lines form a loop that is performed 1000s of times. Note also that in solid arrows are not shown among stages and because these stages can be performed in any order relative to one another depending on the embodiment as illustrated in .

Although four different memories and are shown in as will be apparent to the skilled artisan any number of memories even a single memory can be used instead depending on the embodiment. Also depending on the embodiment one or more of memories and can be volatile non volatile or combination thereof and can be cache main memory hard disk or combination thereof. Moreover instead of a single processor as shown in any number of processors that communicate with one another may be used to implement any one or more of stages or portions thereof depending on the embodiment.

Also note further that stages may be performed in any order relative to one another unless a specific order is imposed thereon by the need for data from one stage to be received in another stage. For example in embodiments that use a process model having a known expression stage is performed first followed by stages and in any order relative to one another and all the just described stages are performed prior to stage . As another example in embodiments that use an unknown process model stage is performed in any order relative to stage but both are performed prior to stage .

Some embodiments of the type shown in use a known expression for the process model and are implemented as illustrated in . As will be apparent to a skilled artisan in view of this disclosure other embodiments that also use a known expression may be implemented differently from . Note that stage and depending on the embodiment stage require the layout as input i.e. these stages involve application of the layout and hence they are grouped together and shown in a single box that is not further broken down into its respective stages in .

In the embodiments of process model and sensitivity model are both stored in non volatile memory e.g. on one or more disks. In some embodiments models and are stored on in a single non volatile memory such as a single hard disk or a CD ROM. Depending on the embodiment non volatile memory may additionally store the kernels on which models and are based. An original layout not shown in see may be stored in the same non volatile memory or may be stored in a different non volatile memory depending on the embodiment.

In embodiments of as the expression of process model is known its derivative is created in an operation which can be performed manually or automatically depending on the embodiment. As the process model s expression is known in embodiments illustrated in N convolution surfaces which are generated by stage are used in stage A in addition to being used in stage . Generating convolution surfaces only once in stage outside of the loop over xy coordinates and their dual use in evaluating both the process model and the sensitivity model further reduces computation time as compared to processes that calculate N perturbed convolution surfaces within the xy loop.

In each of evaluation stages A and the respective expressions are used to algebraically combine N convolution values for a current location x y that are obtained from the corresponding N convolution surfaces. A specific algebraic combination that is performed in each of stages A and depends on the form of each expression. In one example the process model expression is a sum of squares of the N convolution values and the sensitivity expression is a summation of N products obtained by multiplying N convolution values with N constants such as Kernel Center Values in case of square shaped serifs and or Kernel Cross Section Values in case of finite width infinite length serifs.

The N constants also called expression constants are obtained in such embodiments from the respective N kernels illustrated as values and see respectively at a center coordinate thereof i.e. with radius r 0 in case of Kernel Center Value or as the area of cross section obtained by cutting through the kernel along a predetermined angle typically the x axis in case of Kernel Cross Section Values illustrated as the integrated area or in FIG. C and in . Note that while the specific kernel forms depend on the specific embodiment certain embodiments use kernels of the form Kn s x y fs r cos n theta where n is an index that describes the kernel shape as a function of theta and s is an index that sequentially numbers multiple shapes in the radial direction. Kernels where n 1 exist in pairs although only one of the pair may appear in a process model file. For example a the kernel pair for n 2 are as follows f r cos 2 theta and f r sin 2 theta .

In several such exemplary embodiments convolution with one particular kernel such as the kernel shown in dominates the sensitivity expression and an approximation is made in these embodiments by dropping the remaining terms in the derivative so that a sensitivity expression can be evaluated in stage by performing just one multiplication. An example of the single multiplication is between the convolution value at the current location x y for the kernel in which is received from stage with a scaled version of the Kernel Center Value in case of a square serif for the kernel in as the expression constant. In some embodiments the expression constant e.g. scaled version of the Kernel Center Value is computed ahead of time prior to entering stage to reduce computation complexity in the loop. For example the scaling factor such as 2 is multiplied with the Kernel Center Value for the kernel in ahead of time to avoid performing this multiplication in the loop.

A number of embodiments of the type shown in use an unknown expression for process model and are implemented as illustrated in . Other embodiments that use an unknown expression may be implemented differently from . In the embodiments of as the expression of process model is unknown its algebraic derivative is not obtained directly but a derivative is determined empirically. Hence such embodiments perform an operation that assumes the process model for a predetermined wafer fabrication process e.g. a process for a metal layer to be of some maximum order typically a 2order expression and creates a sensitivity model where expression E is one order less than the maximum typically a 1order linear expression and takes as arguments the convolutions of kernels with the layout. Operation invokes an API or other interface to process model to see how the process model distorts a number of shapes that are likely to be present in an original layout. Operation also convolves the kernels with original shapes and with corresponding distortions and uses the difference between the resulting process model values to solve a set of simultaneous equations for constants in the linear expression E.

When operation completes expression E which models the sensitivity is completely known. Although expression E containing convolutions equal in number to the number of kernels may be used in a sensitivity model for some fabrication processes other fabrication processes may be sufficiently simple to be modeled by convolution of a single kernel as described above in paragraph 0071 . Hence operation in some embodiments assumes expression E for the sensitivity model is a product of the single convolution with a constant and solves for the constant empirically by invoking the API for one or more typical shapes and using the responses to solve a set of simultaneous equations for the constant . Operation can be performed manually or automatically depending on the embodiment. Implementation of such an operation to create sensitivity model in some embodiments is illustrated in which is described below in detail.

As the process model s expression is unknown stage B repeatedly invokes the API for each of a number of locations x y in the original layout. Note that stage B may be performed prior to stage because stage B may not use convolution values generated by stage . Alternatively stage may be performed prior to or simultaneously with stage B. Note that each of stages A and B in respective require a layout as input although stage A receives the layout information indirectly in the form of convolution results while stage B may receive the layout directly or may receive it indirectly in the form of convolution results from depending on the embodiment.

Stages and of that are repeatedly executed in the loop over different locations x y are improved in their computational complexity in some embodiments that compute layout deviations in the form of intensity deviations as illustrated in . Items shown in are similar to corresponding items shown in . Reference numerals for many items in are derived from reference numerals of corresponding items in by adding 200 thereto.

Stages that are applied to a layout in are similar or identical to stages in except that stages stop short of computing the distorted layout itself and instead stages supply two pieces of data from which the distorted layout can be computed e.g. intensity surface and contouring threshold. As noted above the intensity that is obtained by evaluation of process model is not limited to optical effects but also takes into account resist effects and etch effects. A number of intensity values are obtained for a corresponding number of grid points on a grid overlaid on the original layout and all the values are stored in a 2 D array in memory which is also referred to as an intensity surface. The N convolution values at each grid point are also stored temporarily in memory as N surfaces .

The size of a grid used in stages may be made larger than the distance between two adjacent locations x y at which proximity correction is done in the loop. For this reason embodiments of the type shown in use two interpolation stages A and A that look up adjacent locations in surfaces and and perform interpolation on the looked up values. Any prior art method of interpolating between four or more grid points may be performed to generate an approximation of a corresponding value at any desired location.

N convolution values one for each of N convolution surfaces that are generated by interpolation stage A for each location x y are supplied to sensitivity evaluation stage for use in evaluating the algebraic expression in sensitivity model . Note that these embodiments of use stage in the same manner as that described above in reference to except that the input supplied thereto has been obtained by interpolation. Note that while some embodiments use interpolation stages A and A other embodiments avoid interpolation by selecting a grid size for use in stages to be identical to the distance between adjacent locations x y in the loop for calculation of proximity corrections.

The embodiments of calculate the distortion at any point x y by comparison in a subtraction stage B that receives data from an upstream operation namely the intensity value at location x y from interpolation stage A and the contouring threshold from stages . In some process models the contouring threshold is a constant. A cut line through the intensity surface at this constant value results in closed contours that represent the distorted polygons in the distorted layout. In other process models the threshold value is an expression and the threshold value varies depending on the x y location. One common variable threshold model defines the threshold as a constant term plus a second term which is a scaling constant times the gradient of the intensity surface at that x y point. The scaling of the second term is such that the threshold varies about some nominal value such as 0.30 but may range from 0.27 to 0.33 depending on the gradient of the intensity surface at that x y point. Examples and descriptions of other variable threshold forms are found in the prior art articles on creating process models as described above in the Background Section.

The embodiments of calculate the distortion in step B within the loop that repeats for each x y location. In these embodiments the distortion is represented as the difference or error between a contour threshold and the process model intensity at that point. By comparison in the distorted layout is represented more generally for example as a set of distorted contours as a map of the intensity error difference from the contour target at all x y points or as table of contour errors distance from the contour to the original polygon edge at all polygon edge points.

The result from subtraction stage B which is the deviation in intensity a form of layout deviation is supplied to a division stage C that divides the intensity deviation by the sensitivity to obtain a size of the serif. The serif size generated by stage C is stored in memory for use in generating a corrected layout by a proximity correction tool such as Proteus available from Synopsys Inc. Alternatively if the shape of the serif is known for this x y point for example the serif width or length is fixed then the actual dimensions of the serif are stored in memory.

Embodiments illustrated in can be improved in computation speed by removing the sensitivity evaluation stage from the loop over different locations x y as illustrated in . Specifically the sensitivity evaluation stage is used by the embodiments of to pre calculate a sensitivity value at each grid point in a grid used in stages . Note that there is no interpolation prior to stage in these embodiments of . The sensitivity value at each grid point is temporarily stored in memory which may be a volatile memory as a sensitivity surface .

During performance of the loop over different locations x y embodiments illustrated in use an interpolation stage A to generate a sensitivity value at current location x y which is thereafter used in division stage C. Stage A differs from stage A in that only one interpolation is performed in stage A as compared to N interpolations in A. Also in these embodiments the evaluation of the sensitivity expression in has been moved out of the x y loop. Moreover in these embodiments of stages A B and C operate in the same manner as described above in reference to . Note that the computation speed of the loop over different locations x y has been significantly improved in the embodiments of because all stages A A B C and that are in the loop perform only arithmetic operations. Several such embodiments store the two surfaces and in a memory that the processor can access quickly such as a cache thereby to further speed up execution of the loop.

Several embodiments reduce the memory used in stages and that are performed outside of the loop as illustrated in . Specifically in stage generates all N convolution surfaces that are temporarily held in memory for use by stage . Depending on the grid size the number of locations x y at which the convolution surfaces have values can be large and hence the total memory required to hold N convolution surfaces and one intensity surface could become sufficiently large to cause such embodiments to execute slowly due to memory constraints .

For the just described reason some embodiments as illustrated in maintain only one convolution surface in memory by performing stages and repeatedly in a loop over different kernels. Specifically during each iteration of this kernel based loop stage applies a single kernel and accumulates a set of partial intensity values at each grid point for intensity surface . Also during each iteration stage evaluates the sensitivity expression and accumulates a set of partial sensitivity values at each grid point for sensitivity surface . After accumulation of the respective values in the surfaces and the convolution surface that was used to generate them is overwritten by the convolution surface resulting from application of the next kernel to the layout by stage .

Note that convolutions of an original layout with a single set of kernels that are used in both a process model and a sensitivity model can be implemented either in the space domain or in the frequency domain as discussed in subsection A below depending on the embodiment. Specifically A B A and B illustrate equally well numerous embodiments that can be implemented in either or both domains.

A computer may be programmed to automatically generate a sensitivity model empirically by solving for constants of a given form of a sensitivity expression. For example if a first order expression is to be used in a sensitivity model such a computer is programmed in some embodiments to automatically use the process model to set up an N N 1 array which represents N linear equations with N unknowns wherein N is the number of kernels. The array is automatically solved in these embodiments to obtain coefficients of the linear expression that is then saved for future use as the sensitivity model.

Several illustrative embodiments automatically generate a sensitivity model as illustrated in by two applications of a process model at each of several locations x y in a test layout shown in . The test layout may be manually prepared to contain features that are typically present in a layout that is to be proximity corrected. In addition to the test layout and the process model the computer of several embodiments receives as input e.g. from a human through a graphical user interface GUI a form of the expression to be used for the sensitivity model e.g. 1order or 2order .

In the embodiments illustrated in the process model is applied twice at each location x y once in stage with the test pattern by itself i.e. unperturbed and a second time in stage with the test pattern perturbed by addition of a serif at the location x y . The application of the process model in stages and could use any known methods for evaluating a process model including the methods in subsection A. Stages and respectively generate an unperturbed intensity value and a perturbed intensity value that are subtracted from each other by stage and the result of subtraction is stored in an array as described next. Specifically array in a memory of this computer is a two dimensional array of N 1 columns wherein N is the number of kernels. Each row of this array holds the results generated by stages and at a single x y location. The N columns of each row in memory hold N convolution values for each of N kernels used by stage . Note that array does not hold the precise x y values that were used to generate the convolution values because the x y values are irrelevant to solving for constants in the sensitivity expression.

After each row in the array is filled a new location x y is selected and the process is repeated until there are as many rows as necessary. Each location x y may be selected at random e.g. to be on an edge of a polygon. The number of rows that are necessary depends on the form of the sensitivity expression e.g. for a linear expression only N 1 rows are needed one for each kernel and a constant term. Thereafter a fitting tool such as MATHEMATICA OR MATHCAD is invoked to invert the N N 1 array of convolution values followed by multiplication with the 1 N vector of sensitivity values thereby to obtain the N 1 coefficients of the linear expression to be used as the sensitivity model.

A test layout for input to stages and may be automatically generated by a suitably programmed computer e.g. by selection of a region of the to be corrected layout either automatically by the computer or manually by the human through the GUI or some combination thereof. Selection of a region in the layout as a test layout may be done randomly and or pursuant to a predetermined selection criterion that is indicative of likelihood of the region to contain typical features. In one example a region of a predetermined size e.g. input by a human through the GUI or hard coded into the software is randomly selected followed by counting the number of times that certain predetermined shapes e.g. line ends and corners are present. If the count for each shape exceeds a predetermined threshold for that shape the region is used as the test layout and if any count falls short the selection process is repeated.

In many embodiments the number of rows or sample points for fitting the model is selected to be greater than the number of coefficients in the model. To fit a first order model the minimum number of rows is N 1 corresponding to one coefficient for each kernel plus a constant term. In the typical case of a 2order model where there are no first order terms and no cross terms between convolution surfaces the minimum number of rows is N 1 . If the linear terms are included this minimum becomes 2N 1 . The number of terms in the empirical fit determines the minimum number of rows in the model. Since the row data in many embodiments is calculated directly from the process model it is noiseless other than the precision of the computer which is much smaller than our measured intensity result . Therefore it is acceptable to increase the number of rows above the minimum requirement without fear of creating problems for a regression fitting software tool e.g an internal matrix inversion .

Most known regression fitting software tools including Mathematica and Mathcad can fit a coefficient to 2order and higher terms by internally generating a new column of data that contains the squared or higher order results. For these regression tools it is not necessary to expand the data structure to include columns representing the squared or higher order values. For other regression tools that may be used in some embodiments additional columns are added to the data structure where each new column corresponds to a higher order term in the model and the data in that column is calculated by the equivalent high order operation on the original N convolution values.

One method to empirically determine the process model s sensitivity to a perturbation is described below in subsection D in paragraph 0137 . The method in subsection D is merely illustrative of one implementation of this embodiment which is provided by way of example and numerous embodiments variants and implementations will be apparent to the skilled artisan in view of this disclosure. Note that any method to empirically fit an unknown process model can also implement embodiments that use known process models.

While and subsection D describe methods to fit a sensitivity model empirically in cases where the process model kernels and expression E are known certain embodiments are implemented by use of an analytical method involving differentiation of the process model either automatically or manually to create the sensitivity model as described below in subsection E in paragraph 0138 .

In many embodiments as described above a square shaped serif is used to represent any arbitrary shaped serif of the same area. However other serif shapes may be used in other embodiments. For example a serif of infinite length and finite width is preferred when working with long lines where we would consider a line to be long if it extends in both directions from our x y point farther than the width of the convolution Kernels. The finite width calculated for an infinite serif very closely approximates the optimal serif width to use on long lines. To calculate the sensitivity of the process model with respect a serif of infinite length one makes the following changes to square serif embodiments. In the derivation of the sensitivity model using an algebraic derivative as described in subsection E replace the Kernel Center Value with a Kernel Cross Section Value which is defined by cutting a cross section through the kernel through the origin and along a predetermined theta direction.

The Kernel Cross Section Value is the integrated area under the curve created by the cross section as shown in . When the kernel value is above the x axis the area contribution is positive when the kernel value is below the x axis the area contribution is negative. Area For circular symmetric models where the process model yields the same result regardless of the theta orientation of the IC layout then the preferred axis for making the cross section is the theta 0 direction the x axis . For circular asymmetric models such as the common Quadrapole imaging systems both the process model and the sensitivity model change their values as the IC pattern is rotated. In this case the sensitivity model depends on the direction of the infinite length serif For example in quadrapole imaging systems adding the infinite length serif parallel to the x or y axis produces one sensitivity. Adding the infinite length serif parallel to the x y or x y forty five degree slopes produces a second different sensitivity. In this case there is potentially a different sensitivity model for every theta direction that the infinite serif may be placed. In practice the serif is placed in only two orientations parallel to the x or y axis or at forty five degrees to the x or y axis. In this practical case only two sensitivity models are required. The respective Kernel Cross Section Values for these two sensitivity models is calculated at theta 0 x axis and the theta 45 diagonal cross section .

When using an infinite serif of finite width the units for the sensitivity model become change in process model per change in unit width . The evaluation of the sensitivity model in act is similar or identical to that described above. Also the calculation a serif size results in units of width not area. However the serif size calculation in act is also similar or identical to that described above. The serif sizes at each xy point saved in memory are now in units of width not area. In practice a mix of serif shapes is used within the same xy loop. At some xy locations such as line ends the square serif is a good estimate and along long lines an infinite length serif is used in several embodiments.

In some embodiments a process layer such as a metal layer or a polysilicon layer includes more than one polygon type. For example one PSM phase shifting mask lithography technique involves three data layers Phase Layer A Phase Layer B and Trim Layer and all three data layers are used to image a single process layer. In such embodiments multi sensitivity embodiments there may be one sensitivity model for each data layer. When a tool for OPC such as Proteus available from Synopsys Inc. adds a serif it could be added in any data layer. Depending on the data layer of the serif one uses the corresponding sensitivity model for that data layer.

In multi sensitivity embodiments if using the algebraic derivative of the process model the sensitivity model for Phase Layer A uses only those kernels that are convolved with Phase Layer A polygons. Kernels convolved with the other layers are considered constants. The sensitivity model for the trim layer uses only those kernels that are convolved with the Trim polygons. This rule is consistent with the rule for derivatives on multivariable functions.

In multi sensitivity embodiments if using the empirical fit method of deriving the sensitivity function the process is repeated once for each data layer. For the first data layer add a polygon perturbation of that layer type then fit the sensitivity model as described. Then repeat the entire process for M data layers but use a serif of the Mdata type. When done the result is a potentially different sensitivity model for each data layer.

In multi sensitivity embodiments the maximum potential number of convolution surfaces output from stage is one surface for each combination of kernel and data layer. If all N kernels are used on all M data layers then there are N M convolution surfaces. Such multi sensitivity embodiments use the multiple sensitivity models and or multiple sensitivity surfaces to calculate proximity corrections for each data layer. For example a tool such as Proteus is used to add serifs to polygons by using the type of polygon and serif to identify a corresponding sensitivity model for that polygon and serif type. The identified sensitivity model is then used to calculate the serif size.

Although several embodiments of the type described above compute proximity corrections based on intensity values other embodiments compute errors in the contour positions by calculating a value called MEF at each x y location. MEF stands for Mask Error Factor and is the change in a modeled linewidth in a distorted layout per unit change in the drawn linewidth in the original layout . MEF measures a sensitivity in the contour position a lateral displacement in the contour as compared to an intensity based sensitivity that measures a change in the intensity at a given x y point. For more information on MEF see the following articles which are both incorporated by reference herein in their entirety 1 The mask error factor in optical lithography by Wong A. K. Ferguson R. A. Mansfield S. M. IEEE Transactions on Semiconductor Manufacturing Volume 13 Issue 2 May 2000 Page s 235 242 Digital Object Identifier 10.1109 66.843639 and 2 Theoretical MEF calculation for periodic patterns by Terasawa T. Hasegawa N. 2000 International Microprocesses and Nanotechnology Conference 11 13 Jul. 2000 Page s 16 17 Digital Object Identifier 10.1109 IMNC.2000.872602

Any of the embodiments for deriving a sensitivity model can be extended using a method described herein to create a MEF model. First the definition of MEF describes the sensitivity to unit change in width of a long line. Therefore the derivation method for the sensitivity model uses the infinite length finite width serif shape. Hence the coefficients in the model corresponding to the Kernel Center Value are replaced with the corresponding coefficients representing the Kernel Cross Section Value .

Several embodiments define a MEF model as MEF Sensitivity Model Intensity Gradient The MEF model and the sensitivity model are nearly identical in such embodiments except the MEF model is scaled by 1 over the gradient of the intensity surface at the x y point i.e. the gradient inverse . A calculation of MEF is illustrated in by a stage that is similar to the sensitivity evaluation stage described above in reference to except for the just described difference. Embodiments illustrated in correspond to embodiments illustrated in however in and B the evaluation in stage includes the intensity surface as an input and the output of stage is a MEF surface .

In both embodiments illustrated in a calculation of the distortion in a contour s position is made by stage A. The size of the distortion is divided by the MEF sensitivity in stage B resulting in a serif width that is saved in memory.

Several embodiments of the type discussed above lose accuracy for large serif sizes unless modified as discussed below. The accuracy loss is because the sensitivity when adding a small serif is slightly different than when adding a large serif. To improve the accuracy for larger serifs some embodiments add higher order terms to the serif size calculation. The relationship between the serif size and the process model error from target where sensitivity is the derivative of the process model with respect to the serif Area is written as follows First order 1st Der Area Change in Process Model a. 2nd order 1st Der Area 2nd Der 2 Area 2 Change in Process Model b.

The sensitivity model can be extended to use the second derivative of the process model with respect to changes in the pattern. To derive the second derivative needed in the 2nd order expression one can use the algebraic derivative method a second time using the 1st derivative as input and getting the 2nd derivative as output. In a 2nd derivative model may be stored in the non volatile memory separate from sensitivity model or alternatively model may be stored as part of sensitivity model . In stage which is similar to stage discussed above during sensitivity evaluation the 2nd derivative model is also evaluated using any of the embodiments for the sensitivity evaluation that have already been discussed. The output of stage now includes an additional 2nd derivative surface . Interpolation act A provides interpolated values for both the sensitivity surface and the 2nd derivative surface. In many typical models the second derivative evaluates to a constant wherein the 2nd derivative surface is replaced by a constant value and the interpolation of the 2nd derivative in act A is not necessary. In this embodiment the calculation of serif area is no longer a simple division but requires the solution to the quadratic equation b listed in the previous paragraph using the well known expression for solutions to quadratic equations 

In such large serif embodiments when the process model is unknown but the sensitivity model has been derived empirically some embodiments use the empirically derived sensitivity expression E plus the algebraic derivative method of subsection E to derive the 2derivative model.

Any proximity correction identifier of the type described above may be used in a digital ASIC design flow which is illustrated in in a simplified exemplary representation. At a high level the process of designing a chip starts with the product idea and is realized in a EDA software design process . When the design is finalized it can be taped out event . After tape out the fabrication process and packaging and assembly processes occur resulting ultimately in finished chips result .

The EDA software design process is actually composed of a number of stages shown in linear fashion for simplicity. In an actual ASIC design process the particular design might have to go back through steps until certain tests are passed. Similarly in any actual design process these steps may occur in different orders and combinations. This description is therefore provided by way of context and general explanation rather than as a specific or recommended design flow for a particular ASIC. A brief description of the components of the EDA software design process stage will now be provided.

System design stage The circuit designers describe the functionality that they want to implement they can perform what if planning to refine functionality check costs etc. Hardware software architecture partitioning can occur at this stage. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include Model Architect Saber System Studio and DesignWare products.

Logic design and functional verification stage At this stage the VHDL or Verilog code for modules in the system is written and the design which may be of mixed clock domains is checked for functional accuracy. More specifically does the design as checked to ensure that produces the correct outputs. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include VCS VERA DesignWare Magellan Formality ESP and LEDA products.

Synthesis and design for test stage Here the VHDL Verilog is translated to a netlist. The netlist can be optimized for the target technology. Additionally the design and implementation of tests to permit checking of the finished chip occurs. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include Design Compiler Physical Compiler Test Compiler Power Compiler FPGA Compiler Tetramax and DesignWare products.

Design planning stage Here an overall floorplan for the chip is constructed and analyzed for timing and top level routing. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include Jupiter and Flooplan Compiler products.

Netlist verification stage At this step the netlist is checked for compliance with timing constraints and for correspondence with the VHDL Verilog source code. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include VCS VERA Formality and PrimeTime products.

Physical implementation stage The placement positioning of circuit elements and routing connection of the same occurs at this step. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include the Astro product. Although circuitry and portions thereof such as rectangles may be thought of at this stage as if they exist in the real world it is to be understood that at this stage only a layout exists in a computer . The actual circuitry in the real world is created after this stage as discussed below.

Analysis and extraction stage At this step the circuit function is verified at a transistor level this in turn permits what if refinement. Exemplary EDA software products from Synopsys Inc. that can be used at this include Star RC XT Raphael and Aurora products.

Physical verification stage At this stage various checking functions are performed to ensure correctness for manufacturing electrical issues lithographic issues and circuitry. Exemplary EDA software products from Synopsys Inc. that can be used at this include the Hercules product.

Resolution enhancement stage This involves geometric manipulations of the layout to improve manufacturability of the design. Exemplary EDA software products from Synopsys Inc. that can be used at this include iN Phase Proteus and AFGen products. Note that the output of this stage may be used in proximity correction identifier as shown in . Various embodiments of a proximity correction identifier have been illustrated and described above in reference to et seq. If the displayed results are not satisfactory a chip designer may go back to stage to make changes to the layout.

Mask data preparation stage This provides the tape out data for production of masks for lithographic use to produce finished chips. Exemplary EDA software products from Synopsys Inc. that can be used at this include the CATS R family of products. Note that proximity correction identifier may also be used with the output of this stage . Actual circuitry in the real world is created after this stage in a wafer fabrication facility also called fab .

The data structures and software code for implementing one or more acts described in this detailed description can be encoded into a computer readable medium which may be any storage medium and or any transmission medium that can hold code and or data for use by a computer. Storage medium includes but is not limited to magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs and DVDs digital versatile discs . Transmission medium with or without a carrier wave upon which the signals are modulated includes but is not limited to a wired or wireless communications network such as the Internet. In one embodiment the transmission medium uses a carrier wave that includes computer instruction signals for carrying out one or more steps performed by the methods illustrated in et seq. In another embodiment the transmission medium uses a carrier wave that includes a process model and a sensitivity model that both use the same kernels as illustrated in et seq.

Note that a computer system used in some embodiments to implement a proximity correction identifier of the type described herein uses one or more linux operating system workstations based on IBM compatible PCs and or unix operating systems workstations e.g. SUN Ultrasparc HP PA RISC or equivalent each containing a 2 GHz CPU and 1 GB memory that are interconnected via a local area network Ethernet 

Numerous modifications and adaptations of the embodiments described herein will become apparent to the skilled artisan in view of this disclosure. For example in some embodiments the known process model in contains multiple models describing the process behavior at multiple conditions in the process such as defocus different stepper exposures etc. In such embodiments the multiple process models are used to generate one or more sensitivity models. Moreover in some embodiments the two models in and are encapsulated in a single file or single data structure and supplied by a single supplier.

Some of the sensitivity model embodiments of included in this patent application cover a range of derivative relationships such as sensitivity of intensity to the adding of or removing of a square serif sensitivity of intensity to adding or removing of an infinite length and finite width serif and the sensitivity of contour position MEF to both square and infinite length serif shapes. In other embodiments the sensitivity to other types of pattern changes can be defined such as sensitivity to a serif placed at some point other than the point x y of evaluation sensitivity to other serif shapes sensitivity to groupings of multiple serifs sensitivity to a some parameterized shape change to a predefined original polygon configuration sensitivity to adding or removing serifs commonly called assist features or scattering bars and sensitivity to serifs added to contact masks to suppress the printing of extra contacts from optical sidelobes.

Also as apparent from this patent application in other embodiments sensitivity model of can characterize the change in characteristics other than Intensity or Contour Position such as the change in the convolution value calculated for any individual kernel the change in any model expression that uses one or more kernel convolutions as arguments of the expression the change in other intensity related characteristics such as the intensity gradient magnitude intensity gradient direction intensity maximum value within a predefined area intensity minimum value within a predefined area intensity surface derivatives of any order and direction and an intensity error from a target value the change in other contour position related characteristics such as contour curvature near corners area enclosed within a contour contour distance from some defined point edge or nearby contour and separate and independent errors in contour position in two orthogonal directions such as x axis and y axis and the change in the contouring threshold value.

It is further apparent that in some embodiments the sensitivity model in can be substituted back into model and any embodiment of the method for creating the sensitivity model from can be repeated iteratively to create sensitivity derivatives of higher order such as second and third derivatives. It is also apparent in that the sensitivity evaluation in is a first order estimation if the sensitivity model models only the first derivative of expression E. However the sensitivity evaluation in can achieve any desired precision by adding higher order derivatives of expression E to the sensitivity model.

In some embodiments the xy loop that repeats 1000 s of times in efficiently calculates and stores other characteristics at each x y point and that serif size for a square serif or serif width for an infinite length serif are just two examples. Other examples of characteristics that can be efficiently calculated and stored in memory that use a sensitivity model and the distorted layout as inputs include sensitivity to defocus sensitivity to exposure variations range of acceptable defocus variations at that x y point range of acceptable exposure variations at that x y point estimation of the proportion imaged features yield that meet a predefined criteria for acceptable shape and or other process characteristics. It is also apparent that in the original layout of the IC chip of some embodiments can include a layout that already includes serifs resulting from one or more previous reticle enhancement technology steps including proximity correction addition of assist features or phase shift mask phase assignment.

It is apparent that for an unknown process model in where the kernels are known but the expression E is unknown that the expression E can be empirically determined either exactly or as an approximation using a general expansion such as a Taylor series. One such embodiment that uses a test pattern and regression fitting has been discussed above. But other embodiments treat the process model evaluation stage B as a black box and empirically characterize the behavior of the black box. Such embodiments may directly modify the shapes of the convolution kernels or directly overwrite the convolution surface inputs to the black box. A systematic choice of modifications to the kernel shapes or directly overwriting the convolution surface inputs while recording the output of stage B efficiently and accurately derives the fit coefficients to determine both the form and coefficients of expression E. It is further apparent that if the unknown expression E in can made known by any of a number of embodiments then the sensitivity model can be derived algebraically from the empirically determined process model expression E.

It is apparent that the methods to empirically determine the process model expression E can be modified to empirically determine the derivatives of the process model directly without explicit determination of the process model expression E. The methods to evaluate the behavior of B need only be modified to record the change in the output of B its partial derivative with respect to some small perturbation in the convolution surface values. If the perturbation in the convolution surface values is chosen to mimic the addition of a small square serif or an infinite serif of finite width then the sensitivity model can be empirically determined directly from the output of B without ever knowing the process model expression E and without the use of a test pattern.

It is also apparent in that the loop that efficiently calculates the process model in and the sensitivity model in can also include more than one process model more than one sensitivity model and one or more higher derivative models where the output of the loop will be P surfaces one for each of P expressions corresponding to P total models. And the P surfaces can all be used in the xy loop to calculate any number of pattern layout and or process characteristics.

These embodiments that are apparent from paragraphs 0124 0131 exhibit some or all of the advantages common to as follows. First all sensitivity models are based on the process models kernels and corresponding unperturbed convolution results. Hence there is no need to calculate the effect of the perturbation on each of the individual convolutions used in the process models e.g. a second application of the process models . Second the sensitivity models will be at least one order of complexity simpler than the process model and easier to compute. Third since it is not necessary to calculate perturbed convolution surface results it is not a requirement that one save modify or regenerate the intermediate convolution results thereby reducing memory requirements.

Numerous modifications and adaptations of the embodiments described herein are encompassed by the scope of the invention. The following subsections contain illustrative exemplary directions to humans and or pseudo code for the evaluation of a process model that occurs in number SUBSECTION A Methods to evaluate a Process Model SUBSECTION B Creation of a convolution surface by FFT SUBSECTION C Creation of a convolution surface by Space Domain Integration SUBSECTION D One embodiment to empirically determine the derivative of an unknown process model and SUBSECTION E One embodiment to algebraically determine the derivative of a known process model. Each of these subsections A E is an integral portion of this detailed description section of this patent application and is incorporated by reference herein in its entirety.

SUBSECTION A Methods to evaluate a Process Model Given as inputs A N kernels B IC Layout Data for a single process layer typically will be for some portion of the IC design such as a 100 um square area. Produce as outputs C N convolution surfaces one for each kernel D An intensity surface E A contouring threshold value which may vary with x y position and F An optional set of distorted contours calculated from D E. Step 1 Choose a grid size for the convolution surface where the spacing between gridpoints is the minimum size of the IC design. Step 2 Create an array to hold the intensity surface of the same grid size.

SUBSECTION C Creation of a convolution surface by Space Domain Integration. For each xy point in the grid Evaluate the convolution using the method of U.S. Pat. No. 6 289 499 Proximity Correction Software for wafer lithography . This method integrates the convolution kernel and the IC layout at a given xy point using a fast space domain calculation. Increment to next point in transformed IC layout. The result is the convolution surface which is stored and used in SUBSECTION A.

