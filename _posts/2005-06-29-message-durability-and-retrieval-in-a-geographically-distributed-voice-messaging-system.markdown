---

title: Message durability and retrieval in a geographically distributed voice messaging system
abstract: A message retrieval subsystem comprises a voice extensible mark-up language browser, a message server, and a message library. The VXML browser is configured with an application programming interface that enables a subscriber of a distributed voice messaging service to request a stored message. The message server receives a request to open a connection from a client process operative on the voice extensible mark-up language browser, spawns a thread to enable the connection, uses the thread to queue one or more subscriber requests for respective blocks of audio information, removes and processes the one or more subscriber requests, and uses the thread to forward a retrieved block of audio information to a subscriber. The message library is coupled to the message server and interposed between the message server and a common message store. The upper library isolates the VXML browser from a streaming protocol used to access the stored message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07308083&OS=07308083&RS=07308083
owner: Glenayre Electronics, Inc.
number: 07308083
owner_city: Duluth
owner_country: US
publication_date: 20050629
---
This application claims priority to U.S. provisional application entitled Message Durability and Retrieval filed on Jun. 30 2004 and accorded application Ser. No. 60 584 046 which is incorporated reference herein its entirety.

This application is related to now abandoned U.S. utility patent application entitled Distributed IP Architecture For Telecommunication System filed on Mar. 15 2005 and accorded application Ser. No. 11 080 744 which is incorporated by reference herein in its entirety.

Systems and methods that relate generally to voice messaging are invented and disclosed. More particularly systems and methods for managing messages communicated using a voice messaging architecture with geographically distributed components.

Over the past several decades voice mail has continued to expand and establish itself as a key element in the successful operations of most businesses. Some voice mail systems consist of components that communicate with each other on the client side of a public switched telephone network PSTN and thus have been geographically co located. This can be a great disadvantage for companies that have geographically dispersed offices.

In today s global economy even small businesses may have a need for multiple offices for serving clients interacting with vendors or various other reasons. Presently available wide area networks including the Internet support email video conferencing and other products that allow dispersed business sites appear more seamless and integrated. In addition wired and wireless telephonic networks provide network based voice mail services that are used by small business and personal consumers to communicate with others wherever they may be located. Other telecommunication products have been developed to provide voice mail service to small businesses and other institutions such as schools hospitals government offices and the like. These other telecommunication products generally include local voice message storage.

However a significant problem that still exists for geographically dispersed offices is providing a telephonic system that operates as a single co located system while still serving the specialized needs of the various offices. Establishing a separate data storage facility at each office can be a costly endeavor as duplicative hardware must be purchased and maintained at each site. Furthermore logistics for enabling inter office voice mail access can become complex.

A centralized storage facility could reduce cost and provide a seamless voice mail platform. However integrating a centralized storage facility for voice messages across a geographically disperse enterprise is problematic because of system latency when processing voice messages between remotely located sites. One component of system latency is the time it takes to identify the particular storage medium where the message was stored and correctly position a read write mechanism proximal to the identified medium. System latency is also affected by the speed and capacity of the underlying network or networks used to couple remotely located sites to the central storage facility.

System latency presents a new challenge. On the one hand the subscriber desires a reliable and accurate retrieval and playback of a previously stored voice message. On the other hand requiring the subscriber to wait for delivery of the entirety of the stored voice message prior to initiating playback of the voice message is not desirable. Accordingly further improvements to geographically disperse voice mail systems are desired.

An embodiment of a message retrieval subsystem that provides streaming audio in a distributed voice messaging system comprises a voice extensible mark up language browser a message server and a message library. The message server receives a request to open a connection from a client process operative on the voice extensible mark up language browser spawns a thread to enable the connection uses the thread to queue one or more subscriber requests for respective blocks of audio information removes and processes the one or more subscriber requests and uses the thread to forward a retrieved block of audio information to a subscriber. The message library comprises an upper library and a lower library. The upper library is communicatively coupled to the message server interposed between the message server and the lower library and isolates the voice extensible mark up language browser from a streaming protocol used to access a stored message.

Related methods of operation are also provided. An embodiment of a method for providing streaming audio information in a distributed voice messaging system comprises providing a voice extensible mark up language browser on a media server providing a message server on a document server communicatively coupled to the media server and a common message store configured with message information receiving a request to open a connection between the voice extensible mark up language browser and the message server spawning a connection thread for processing a subsequent request for information stored in the common message store receiving the subsequent request for information using the connection thread to queue the subsequent request using a worker thread to remove and process the subsequent request and using the connection thread to forward a response to the voice extensible mark up language browser.

Other features and advantages of the systems and methods for message durability and retrieval will be or become apparent to one with skill in the art upon examination of the following figures and detailed description. All such additional features and advantages are within the scope of the systems and methods for message durability and retrieval in a geographically distributed messaging system as protected by the accompanying claims.

Various embodiments of a distributed messaging system that provides functionality to support modern small or large office business settings with telecommunication system options such as call forwarding auto attendant voice mail voice messaging etc. will be described with respect to . The distributed messaging system is made up of components that can be located in various locations that are remote from each other. Each of the components is coupled to an Internet protocol IP based wide area network. The system provides message storage assurance to subscribers and enables a caller to generate a message and terminate the communication with a voice recorder without having to wait on the line for a confirmation that the voice message was successfully delivered and stored. The system also provides message durability in that once the voice message is recorded the system ensures that despite device and network service outages the voice message is saved in the common message store. Moreover the system provides the capability to stream message files from the common message store to a VoiceXML VXML browser on a media server.

An exemplary embodiment of a message retrieval subsystem comprises a media server a document server and the common message store. A message server resides on the document server. The message server acquires voice information blocks by invoking functions provided by a message library. The message server also supplies a socket connection for the VXML browser operative within the media server. The VXML browser receives the voice information blocks through the socket connection. The message library exposes the common message store to the message server while hiding the streaming protocol from the VXML browser. The message library comprises an upper library and a lower library. The multi layered architecture of the message library enables the integration of multiple message stores with the document server.

Having described the general structure and operation of an exemplary message retrieval subsystem various embodiments of the underlying distributed messaging system will be described with respect to . Thereafter discussion will address the functionality and architecture of the exemplary message retrieval subsystem with respect to .

A voice over IP VOIP gateway integrates the media server with a modular voice processor or other devices that use session initiation protocol SIP . Access control manages the complexities of integrating multiple media servers with Internet protocol IP network . When a single media server is used a communication link using SIP SigTran or the H.323 messaging protocols couples media server to IP network . One or more automatic speech recognition ASR modules and one or more text to speech TTS conversion modules are coupled to media server to enable both audio and text input and output to from distributed messaging system . A voice over IP VOIP gateway integrates the media server with a modular voice processor or other devices that use session initiation protocol SIP . A simplified protocol is used for communications between the remaining components of the distributed messaging system.

Voice extensible markup language VoiceXML or VXML is one mode of communication between media server and remotely located document server . VXML which uses hypertext transfer protocol HTTP to communicate information in packets allows a user to interact with devices coupled to IP networks using voice recognition technology. Instead of a traditional graphical user interface based browser VXML relies on a voice browser and or any of a plethora of voice based devices such as telephones mobile phones and combination devices. Instead of a traditional browser that relies on a keyboard and a mouse VXML relies on a voice browser and a voice based device. Using VXML the user interacts by listening to audio output that is either pre recorded or synthesized and submits input through the user s natural speaking voice or a touch tone keypad. VXML is designed for creating audio dialogs that feature synthesized speech digitized audio and recognition of spoken and dual tone multiple frequency encoded inputs recording of voice messages and mixed conversations. As will be explained in further detail below VXML HTTP requests are communicated from media server to document server which manages the storage confirmation and retrieval of voice messages saved in common message store .

Application server coupled to document server and Internet provides a mechanism for subscribers of the distributed messaging system and third parties with proper access privileges to access previously stored voice messages from common message store .

Messages are durable when once a subscriber records a message in a VXML session the message is saved and accessible via a common message store remotely located from the subscriber despite media server failures document server failures and wide area network service outages. This is accomplished because message storage from a local data store to the remotely located common message store can be asynchronous. That is the subscribing caller does not need to wait on the line for acknowledgement of a successful transfer of the message. Because the common message store comprises an array of disks the messages and metadata stored therein can survive numerous device failures and request restarts for transfers of message blocks.

As further illustrated in a message retrieval subsystem comprises media server document server and common message store . As will be explained in further detail below various elements distributed across these components are used to form a channel that supports the transfer of audio information from the common message store to a subscriber of services provided by the distributed messaging system .

Sender communicates requests to document server via simple object access protocol SOAP . Sender provides a socket connection for VXML browser . The socket connection can be accessed by multiple languages using multiple computing platforms. Request information transferred to the document server includes attachment file path and name message type identifier message status identifier time for delivery originator identifier and identifiers for one or more recipients. Sender is configured to save the request including message request delivery state information into local data store send message header information metadata together with the attachment file to the document server delete the request and delivery information when the message has been successfully delivered to the document server and retry delivery for messages that are not successfully delivered.

Document server comprises receiver message server message manager unified message service layered service provider server and application . Receiver is configured to receive the SOAP requests from sender retrieve the message information and attachments invoke the unified message service to create a Java message service message and save the created message in message server persistently. Receiver is further configured to handle SOAP fault reporting when data transfer errors occur. Unified message service communicates with message server via connector . Message server provides persistent storage to the message and related data on the document server asynchronous message delivery ensures once and only once delivery of the message to the common message store and deletes the message when the message has been successfully stored in the common message store . Message manager gets messages from the message server then forwards them to the common message store using the link provided by the unified message service application interface and the layered service provider server . Message manager is configured to status the message server regarding whether the message was successfully delivered to the common message store . Message manager is further configured to retry message delivery for messages that were not successfully uploaded and integrated with the common message store .

Two approaches for providing message attachment are contemplated. The first approach is that the attachment content of the SOAP message received by the receiver is delivered to the message server together with the header information or metadata as one Java message service compatible message without writing to an intermediate file. Using this approach the receiver and the message server have the flexibility to be distributed so that any document server is able to deliver a message stored in the message server to the common message store.

The alternative approach is that the attachment content of the SOAP message received by receiver is saved into a file then the file name and message metadata are delivered to the message server . Using this approach the message server handles text data only.

Application server interposed between unified message service and VXML browser exposes previously stored messages to one or more subscribers communicatively coupled to media server .

In operation subscriber initiates a call with a telephone at a location coupled to PSTN . The call is established over PSTN and terminated by media server which provides the telephony interface between PSTN and distributed messaging system . Message deposit application operable within media server generates a new filename for the message about to be recorded and collects or otherwise generates new metadata in accordance with one or more identifiers used to classify or otherwise describe the nature of the call subscriber and the voice message. Metadata is associated with the filename.

The message deposit application addresses the VXML browser sender file system and local data store to ensure the media server is prepared to record the voice message. If any of these devices reports a non ready condition to the message deposit application the message deposit application immediately informs the subscriber that a system failure has occurred that the message cannot be recorded and aborts the recording process. Otherwise if each of the media server devices is ready voice message is recorded and temporarily stored within media server . Thereafter the subscriber can access other system functions or terminate the call without waiting for acknowledgment that the voice message has been saved in the common message store .

The message deposit application in accordance with a self generated initialization trigger or an externally generated signal forwards a request to sender process to forward the data to remotely located document server . Sender process accepts the request saves the request and metadata in a local database and forwards the request via an IP based network to a receiver associated with the document server . The document server in turn saves a received copy of metadata and message in a common data store not shown .

Method begins with block where a call originated by a subscriber of the distributed voice messaging system is serviced by media server . Next as indicated in block the subscriber is prompted to record a voice message at some time during the call. The subscriber records the voice message as shown in block . Thereafter media server generates a filename for the voice message and associates appropriate metadata for identifying the voice message as indicated in block . After the voice message has been recorded the filename voice message and any header information such as metadata is stored in a local data store as indicated in input output block .

Metadata associated with the voice message includes storage location type caller session urgency and confidentiality identifiers. The local storage location identifier contains an absolute path and filename of the data file on local file system . The type identifier indicates whether the processed message is a voice or a fax message. The caller identifier indicates a subscriber identification if the message depositor is a subscriber of the system. Otherwise the caller is identified as a guest. The session identifier indicates a depositor session identification. The urgency identifier indicates whether the associated message is a high priority message or a standard priority message that may be processed and addressed in due course. The confidentiality identifier indicates whether the message is designated for access to a limited number of recipients. Metadata associated with the voice message also identifies the message sender and one or more message recipients.

Additional and optional metadata associated with a voice message may include information indicative of a preferred date and time for delivery. When not associated with the message the media server is configured to periodically initiate the transfer of a new message to common message store .

Conditional metadata is also associated with some messages processed by the distributed messaging system . For example conditional metadata identifies when the stored voice message is a comment referring to an attached forwarded message. In addition to a forwarded message identifier conditional metadata includes forwarded message note and dictation length identifiers. The forwarded message identifier is the message identifier associated with the forwarded voice message. The forwarded message note identifier is a separate identifier associated with a note or comment regarding the forwarded message. The dictation length identifier indicates the length of the forwarded message associated with the note.

As indicated in block the common message store prepares space for the new voice message designated for integration in common message store . Next as shown in block and query block common message store requests message content using a block by block repetitive process until the entire message has been delivered via the document server and received in the common message store . Once the entire message has been received common message store sends an acknowledgement that the entire message has been received as shown in block . The acknowledgement issued from the common message store is received and forwarded by document server as shown in block . The acknowledgement received by document server is forwarded to the media server as shown in block . The acknowledgement received by media server confirms that the voice message has been successfully stored and integrated with common message store . In an alternate embodiment polling for new messages in the local data store associated with the media server may be performed by software or firmware operable within the document server or by an application in communication with document server . In this way one or more remotely located devices can be configured to monitor multiple media servers.

The message manager receives the message from the message server and forwards the message to a unified message service application interface which in turn forwards the message via a LSP server that deposits the message in the common message store . Once the common message store has successfully deposited the message an acknowledgement message identified by the associated message identifier is forwarded to the message server via the LSP server unified message service application interface and message manager in that order. In response the message server deletes the message and associated metadata.

When the request is for a greeting the upper library responds to the request by issuing a get greeting message data process. If the greeting message data is not present in the upper library the upper library forwards a request to get the greeting message data from the lower or second library . The upper library caches the greeting message data returned from the lower library . Thereafter the upper library uses the cached greeting message data to issue a request for a voice block that includes the greeting. Not illustrated but implied by the datagram the lower library responds by forwarding the identified voice block from the common message store which is returned to the VXML browser via the upper library and message server .

As indicated by flow control arrow in subscriber communicates a request to open a connection with the message server using VXML browser . The request to open a connection is serviced by main thread which opens connection thread as indicated by flow control arrow . Once connection thread is available subscriber using the VXML browser issues a request for voice message information as shown by flow control arrow . Thereafter connection thread forwards the request for voice message information to request queue as indicated by flow control arrow . Pool which comprises a plurality of worker threads such as worker thread worker thread and worker thread is configured to remove the request from a request queue and process the requests for voice message information. Each of the worker threads through are configured to interface with common message store not shown by invoking functions resident in the upper library to process the various requests for message information. The number of worker threads available in pool is adjustable to control possible loads on lower library and common message store . Flow control arrow is indicative of removing and processing a request from request queue . Note that retrieved message blocks are sent via connection thread to subscriber via the VXML browser. Request queue includes a mechanism for managing and processing requests. Thereafter as indicated by flow control arrow connection thread forwards retrieved message information back to the requesting subscriber via VXML browser . Flow control arrow and flow control arrow are representative of a socket connection generated between VXML browser and message server as a result of the initial request to open a connection.

As further indicated in the diagram of the streaming channel formed by the message server and media server is scalable to support multiple subscribers e.g. subscriber and subscriber using multiple connection threads e.g. connection thread and connection thread . Alternatively a single connection thread can be used to support requests from two or more subscribers. In these embodiments the connection thread uses a mechanism for locking out or otherwise blocking requests from all but an initial subscriber until the requested message information has been transferred.

The flow diagrams of A B and and the datagrams of B A and B show the architecture functionality and operation of a possible implementation via software and or firmware associated with a host of communicatively coupled hardware devices that causes the process of collection integration and distribution of voice based messages. In this regard each block represents a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the blocks may occur out of the order noted in the drawings. For example two blocks shown in succession in the flow diagram of may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

The operational software programs that may be used by the various devices of the distributed messaging system as well as operational software that may be used in conjunction with the VXML browser telephonic devices and applications that interface with distributed messaging system which comprise an ordered listing of executable instructions for implementing logical functions can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable medium can be any means that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM magnetic a read only memory ROM magnetic an erasable programmable read only memory EPROM or Flash memory magnetic an optical fiber optical and a portable compact disc read only memory CDROM optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

While various embodiments of the message retrieval subsystem systems and associated methods have been described it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible that are within the scope of the accompanying claims. Accordingly the systems and methods for message retrieval are not to be restricted beyond the attached claims and their equivalents.

