---

title: Techniques for providing role-based security with instance-level granularity
abstract: Techniques for providing role-based security with instance-level granularity are provided. A security service detects a request made by a principal for access to a resource. Access to the resource is conditioned on a status of a role. The role is associated with the request, the principal, and the resource. The security service evaluates a constraint associated with the role to determine the status. The status is subsequently consumed to determine whether access to the resource for the purposes of satisfying the request is permissible.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07774827&OS=07774827&RS=07774827
owner: Novell, Inc.
number: 07774827
owner_city: Provo
owner_country: US
publication_date: 20050606
---
The invention relates generally to software security and more particularly to techniques for providing role based security with instance level granularity.

Securing access to information and resources is an important function of business software. Business software stores sensitive information including financial records credit card numbers customer lists and client records. The effects of unauthorized access to this sensitive information can be costly and dangerous.

For example medical records software in a hospital should allow only those with a legitimate need such as a doctor or nurse to access patient records. Unauthorized access to patient records unnecessarily compromises patient privacy. Business software should secure sensitive information such as patient records by preventing unauthorized access to sensitive information.

One manner of providing software security is to use role based declarative security. In role based declarative security an administrator or deployer assigns each user of a software application an appropriate role. The administrator also allocates each resource such as a database an object a data structure a printer a network an application and the like a permission assignment comprising a list of roles that may legitimately access the resource.

Typically the software application executes within an application server. Each time a user requests access to a resource the application server compares the role assigned to the user with the permission assignment for the resource to determine whether access is permissible. If the user s role is on the permission assignment list the application server allows the user to access to the resource. If the role is not on the permission assignment list the application server denies access to the resource.

For example each user of medial records software may be assigned a role such as patient doctor nurse administrator nutritionist or orderly. The application administrator assigns each resource such as a patient record a printer or a telephone directory a permission assignment containing a list of the roles that may legitimately access the resource. A patient record may have a permission assignment including the roles doctor and nurse. 

The application server underlying the software would allow a user assigned the role doctor to access the patient record since doctor is one of the roles included in the patient record s permission assignment. However a user assigned the role orderly would not be allowed access to the patient record since orderly is not one of the roles included in the patient record s permission assignment.

In role based declarative security users are assigned a role based on their designations. For example all doctors receive the doctor role and all nurses receive the nurse role. This conventional approach results in limited granularity of roles. For example all users assigned the role doctor in a role based access scheme may be permitted to access patient records.

In the example described above role based declarative security allows a doctor to access a patient record for someone who is not that doctor s patient but another doctor s patient. Such access may compromise patient privacy. This problem may be overcome by creating a unique role for each doctor and allocating that role to the permission assignment of each of each doctor s patients.

Furthermore a programmer may have to modify and re release the software for purposes of creating new role types each time new access conditions exist. For example a new role type defined as a Primary Care Physician may provide access to only those patient records that lists a particular doctor as being an authorized participant of the general doctor role. To account for this situation a programmer would have to re release the software to take into account the new role type for the general role. This approach is impractical. Consequently role based declarative security does not offer a practical way to implement fine grained role based security.

Of course the software application could perform role based security rather than the underlying application server. This approach to security is known as application security or imperative security. However the code required to properly control access is complex and expensive to implement.

Accordingly there is a need for improved techniques of role based declarative security. The security techniques should implement fine grain access controls for a given resource without modifying interfaces associated with that resource.

In various embodiments techniques for providing role based security with instance level granularity are presented. More specifically and in an embodiment a principal requests access to a resource. A security service detects the request. Access to the resource is allowed based on a status of a role associated with the principal. The security service dynamically evaluates a constraint associated with the role to determine the status. The status is compared with the request for access to the resource to determine whether access to the resource for the purposes of satisfying the request is permissible.

In various embodiments of the invention the term principal is used. A principal is an electronic representation of a user or an application. In one embodiment the term principal is consistent with how that term is generally understood in the security arts.

For example the term principal can be used in the context of Security Assertion Markup Language SAML which is an extension of the Extensible Markup Language XML . SAML is used for securely declaring assertions about a user or application i.e. principal . More recently SAML has been extended with technology referred to as Liberty. Liberty is part of the Liberty Alliance Project LAP and is attributed to open interoperable standards for federated network identities. Thus the term principal can also be used in the context of Liberty technologies.

However it is to be understood that SAML and Liberty techniques are not needed to perform the teachings of all embodiments of the invention. These techniques complement some embodiments of this invention. In this sense the integration of SAML and Liberty techniques with some of the embodiments presented herein is intended to be part of certain aspects of this invention but not all embodiments of this invention are dependent on SAML or Liberty technology.

In a similar manner various other existing authentication techniques may be practiced in connection with some embodiments of this invention. However these other authentication techniques are not necessary for realizing the benefits of all embodiments of the invention. Some of these techniques include Public Key Infrastructure PKI techniques including public private key pairs digital certificates biometric authentication or use of conventional identifications and passwords.

The term resource as used herein refers to an electronic entity a component an application a Uniform Resource Locator URL a web page a web service endpoint a data store a directory or a set of applications or data stores that cooperate for purposes of controlling access to confidential information. Thus the resource is accessed for performing some operation e.g. read or write on the confidential information. Confidential information includes secure data about a principal such as Social Security Number SSN name address phone number e mail address Internet Protocol IP address bank account number password password secrets for obtaining the password mother s maiden name name of pet etc. password birth date name of spouse number of children salary employer and the like.

The resource is accessed by calling a method or function associated with the resource. The method or function performs an operation associated with the resource. For example the method or function may read confidential information stored by the resource or write confidential information to the resource. One of ordinary skill in the art will recognize other operations that a method or function may perform such as deleting formatting editing printing scanning acquiring an image and the like.

The term resource is also used to refer to an electronic device such as a printer scanner web camera and the like. The electronic device is accessed to perform an operation such as acquiring an image scanning a document printing a document and the like.

In various embodiments of the invention the term context manager is used. A context manager provides an environment in which one or more software applications may be operated. The context manager provides one or more services to the applications such as transaction services life cycle management services memory persistence and security services. In an embodiment the context manager comprises an operating system OS or a virtual machine overlaid on an OS. In another embodiment the context manager comprises container software such as a Java 2 Enterprise Edition J2EE Enterprise Java Bean EJB Container. In yet another embodiment the context manager may be a call context application domain runtime environment etc.

An access request is an electronic request for accessing a resource. The request can be for the resource to perform some operation or for the resource to acquire and deliver some particular desired information. Identity information includes any data that is useful in establishing the identity of a principal such as passwords identifiers biometric data keys certificates and the like. A service is an application or system that a principal uses for gaining access to a resource. It is also to be understood that in some cases a resource may be viewed as a service and vice versa.

Various embodiments of this invention can be implemented in existing network architectures. Of course the embodiments of the invention can be implemented in a variety of architectural platforms operating and server systems or applications. Any particular architectural layout or implementation presented herein is provided for purposes of illustration and comprehension only and is not intended to limit aspects of the invention.

In an embodiment the method is implemented as a service that interfaces with a context manager. The method need not be in operation e.g. it can be embedded on one or more removable machine readable media e.g. CD DVD diskette memory stick etc. and distributed but when the method is operational it performs the following techniques for providing declarative role based security with instance level granularity.

Initially at the processing of method hereinafter security service detects a request by a principal for access to a resource. In an embodiment the principal sends the request to a context manager. The designations of a principal and a resource are both created by an application executing within the context manager.

The context manager controls access to the resource by permitting access by principals having an acceptable role. The context manager examines the request to determine which of the resource s methods the principal is calling. Next the context manager determines which roles are associated with the resource and perhaps more particularly which roles may be associated with each method of the resource. Each method associated with a single resource may have an associated permission assignment comprising a list of approved roles for the method. Consequently each method associated with a single resource may have a different list of approved roles. Alternatively a single permission assignment listing roles approved to access the methods of the resource may be associated with the resource. The permission assignment may list roles approved to access the resource generally without specifying approved roles on a per method basis.

As an example illustration consider that a product price record a resource may have one method for reading the record and another method for editing the record. A permission assignment for the read method may include the roles employee and supervisor. A permission assignment for the edit method may include the role supervisor. 

Continuing with the present example a first principal assigned a role of employee may be permitted to read the record by calling the read method. However the first principal is prevented from editing the record through the edit method since the role employee is not included in the permission assignment of the edit method. A second principal assigned a role of supervisor is able to both read and edit the record by calling the read method and the edit method since the role supervisor is included in the permission assignments for both the read method and the edit method.

Once the context manager has determined the approved roles by examining the permission assignment associated with the requested resource or resource method the context manager determines which roles are associated with the principal.

A principal may be associated with one or more roles. Each role may be a static role or a dynamic role. Static roles are assigned to a principal. One way to assign a static role is for the context manager to assign the static role based on a configuration associated with an identity of the principal. The configuration may specify for example that all principals derived from a particular class receive a particular static role.

Additionally the security service may assign a static role. The security service may provide the context manager with one or more static roles that the context manager subsequently assigns to a principal. A third way to assign a static role is for an identity service to provide the context manager with one or more static roles that the context manager assigns to a principal. In an embodiment the identity service provides the roles via a SAML assertion. Once a static role is assigned to a principal the principal retains the role until an administrator the security service the context manager or the identity service changes the static assignment.

A principal may also be assigned a dynamic role. A dynamic role has a status of either active or inactive. If the status of the dynamic role is active then the principal possesses the same privileges with the assigned dynamic role as a statically assigned role. If the status of the dynamic role is inactive the principal does not possess the privileges associated with the role. In this case it is as if the role had not been associated with the principal at all.

Each dynamic role has one or more associated constraints. The constraints when evaluated determine the status of the role. The results associated with evaluating the constraints are resolved to either true or false. If the constraints evaluate to true the status of the role is active. If the constraints evaluate to false the status of the role is inactive. In an embodiment each time the principal attempts to access a resource the constraints evaluate to true or false. In this manner the status of a dynamic role associated with a particular principal may change for each constraint evaluation. Consequently the principal s privileges may change each time the principal makes an access request due to the changing status of the dynamic role.

In an alternative approach the result associated with evaluating the constraint may be managed from cache such that after some configurable period of time the constraint is re evaluated but the constraint does not have to be evaluated for each access of a principal. In a similar but different technique the principal s relationship with the resource is dictated by an active session. Here the constraint may be evaluated once for an active session or at configurable points in time during that session.

In an embodiment the security service provides a list of dynamic roles associated with a principal to the context manager at . In another embodiment an identity service provides a specific role associated with the principal to the context manager. The identity service may provide the roles via a SAML assertion. The identity service may maintain a list of dynamic roles for each principal or may retrieve the list of dynamic roles from a policy store. A policy store is a file database directory or combinations of the same that houses roles associated with a principal. The roles may be static roles or dynamic roles. For a static role the status of an identity service provided role is active. Conversely if a dynamic role is used then the status active or inactive is determined when evaluation of the constraints occur. In some cases the identity service may evaluate the constraints and in these situations a time to live value may be associated to any active dynamic roles assigned by the identity service. Additionally the policy store may contain one or more constraints associated with each dynamic role. It is noted that constraints may also be viewed as policies and that a given constraint may be associated with a global policy.

Once the context manager has determined the approved roles associated with the method requested by the principal and the roles associated with the principal making the request the context manager notifies the security service of the request. The context manager provides a list of dynamic roles associated with the principal to the security service and requests that the security service provide a status for each of the dynamic roles.

The context manager may provide a list of all the dynamic roles associated with the principal to the security service or may provide a list of the dynamic roles associated with the principal that are also associated with the permission assignment of the resource method that the principal has requested to access. In some embodiments the context manager may also provide the security service with the name of the method the principal has requested access to and the roles listed in the permission assignment for the method.

Alternatively in another embodiment the security service may detect the principal s request directly by intercepting the request. In this embodiment the security service independently determines the roles associated with the method requested by the principal and the static and or dynamic roles associated with the principal making the request.

At the security service evaluates the constraint associated with a dynamic role to determine the status of the dynamic role. In an embodiment the security service determines the status of each dynamic role provided in a request from the context manager. In another embodiment the security service determines the status of each dynamic role associated with the principal that is also associated with the permission assignment of the resource method that the principal has requested access to.

The constraint is a logical expression that evaluates either true or false. In an embodiment the logical expression comprises an XML file. The constraint may comprise operators values function calls method calls and variables. Operators comprise functions such as AND OR not equal and the like. Values comprise explicit numbers text strings and the like. Variables represent values. For example a constraint may take the form time of day 8 00 AM AND time of day 

In an alternative embodiment the constraint may evaluate to a non binary value such as a range of values or a percentage. In response to the percentage a policy or other conditional logic may ultimately determine whether a role is to be active or inactive. That is the constraint evaluation can be associated with more complex or fuzzy logic and does not have to resolve to a strict binary result. For example consider a particular constraint that evaluates to a confidence factor of 80 . This indicates with 80 confidence a particular principal is assigned an active role of Vice President VP . Another policy may state that if a current time is outside normal business hours then the confidence factor has to exceed 95 before an active role of VP is appropriate.

In one embodiment variables represent instance level data. Instance level data is data created by an application executing within the context manager. Each principal and resource managed by the context manager may be associated with instance level data. Instance level data may include a method name associated with a resource parameter data associated with the principal parameter data associated with the resource and parameters passed by the principal in a method call. Instance level data may also include temporal data such as the time of day or the name of the application with which the principal is associated. Moreover the instance level data may include other metadata appended by or acquired from the context manager and or security service. The instance level data may modify the original request may be wholly included with the original request and or may be partially part of the request and partially separately located from the request.

The security service may identify at instance level data referenced in the constraint. Next at the security service may retrieve instance level data referenced by variables in the constraint from the context manager. The security service may retrieve the instance level data through an API. In one embodiment the security service retrieves the instance level data through a Java Authorization Contract for Containers JACC API. In another embodiment the security service retrieves the instance level data through a Java Authentication and Authorization Service JAAS API. In yet another embodiment the security service obtains a reference to an EJB or Servlet API from a JACC API. The security service then retrieves instance level data through the EJB or Servlet API.

The security service uses the retrieved instance level data to evaluate the constraint by plugging retrieved values into the constraint and then determining if the resulting constraint is true or false. Based on the evaluation the security service assigns the dynamic role a status of active or inactive.

Constraints comprising variables referencing instance level data may evaluate to true in some evaluations and false in other evaluations because instance level data may change over time. Since the evaluation of the constraint may change the status of the dynamic role may also change. Accordingly the roles associated with a principal may change during the execution of an application. As a result the context manager may allow some requests to access a resource based on the roles associated with the principal and deny other requests because at the time of the request the status of a role used for access is inactive.

In some embodiments a plurality of constraints is associated with a single role. The security service may evaluate each of the plurality of constraints to determine a current status for the role. The security service may combine the results from evaluating the plurality of constraints to determine the current status in a number of ways. For example the security service may determine that the role is active if any of the plurality of constraints evaluates true. Alternatively the security service may determine that the role is active if all of the plurality of constraints evaluates true including global and local constraints.

The plurality of constraints may each have an associated identifier. The identifier specifies the conditions under which the constraint should be evaluated. For example the identifier may specify that the security service evaluate the constraint each time the security service determines the status of the role. The identifier may also specify that the security service evaluate the constraint only if the principal is attempting to access a particular type of method or a particular class of resource. Alternatively global policies or configurations associated with constraint identifiers may be used to determine the interval or frequency with which the constraints are evaluated.

In an embodiment at the security service assigns a time to access value to the status of a dynamic role. The time to access value specifies an amount of time that the status of a dynamic role remains valid. While the status is active the constraint may not require re evaluation because the prior determined status is considered active for the period specified by the time to access value. In this manner the time to access value may reduce the number of constraint evaluations performed by the security service and may establish an expiration for an assigned role.

For example if the security service evaluates a constraint and determines that a dynamic role has an active status the security service may specify a ten minute time to access value for the status. Before issuing a subsequent request to evaluate the constraint the context manager references the time to access value to see if the prior determined status of the constraint has expired.

If the subsequent request to evaluate the constraint occurs within ten minutes of the prior request the context manager may use the prior status and need not ask the security service to evaluate the constraint. If the subsequent request to evaluate the constraint occurs more than ten minutes after the prior request the context manager requests that the security service evaluate the constraint again and does not use the prior status. Alternatively the context manager may request that the role assignment be reconfirmed upon the expiration of the ten minutes. Configurable situations such as this may also be handled via a constraint that evaluates to a fuzzy value and the fuzzy value is further inspected to determine actions associated with role assignments.

The time to access value may be a default value known to the security service or an administrator configured value. The security service may specify a single time to access value for the entire application or the security service may specify a time to access value for each constraint.

Once the constraint has been evaluated the security service at provides the status of the dynamic role to the context manager. The security service may provide the status by placing the status in a variable file or other data structure by calling an Application Programmer Interface API associated with the context manager by returning the status as part of a function call or by other techniques. In some embodiments at the security service also provides the time to access value associated with the status to the context manager.

Next the context manager decides whether to allow the principal to access the resource according to the request. In one embodiment the context manager compares static roles assigned to the principal with the approved roles associated with the resource or resource method that the principal desires to access. If one of the principal s static roles matches one of the approved roles the context manager allows the principal to access the resource.

If the principal does not have an associated static role that matches one of the approved roles the context manager determines if dynamic roles are associated with the principal. If there are no dynamic roles associated with the principal the context manger denies the principal s request to access the resource.

If there are one or more dynamic roles associated with the principal the context manager interacts with the security service to determine the status of the dynamic roles as described above. If one or more of the dynamic roles has an active status as determined by the security service the context manager compares the dynamic roles with the active status to the approved roles. If any of the dynamic roles with an active status matches one of the approved roles the context manager allows the principal to access the resource.

In various embodiments one or more of the approved roles associated with a resource or a resource method of a resource is a dynamic role. In determining whether the principal s request is permissible the context manager identifies the dynamic approved role. The security service evaluates a constraint associated with the dynamic approved role to determine a status for the dynamic approved role. The security service evaluates the role in a manner similar to that described above including requesting instance level data if necessary for the evaluation. If the constraint evaluates true then the status of the dynamic approved role is active. If the constraint evaluates false the status of the dynamic approved role is inactive.

If the status of the dynamic approved role is active the context manager uses the dynamic approved role in determining if the request is permissible in a manner similar to that described above. If the status of the dynamic approved role is inactive the context manager ignores the dynamic approved role in determining if the request is permissible.

It should be noted that in the embodiments described above the context manager not the application that the principal is associated with determines whether the principal s request to access a resource is permissible. This enhanced role based declarative security approach is advantageous since the code to implement checking of roles is not part of the application.

Instead the application relies on the context manager to determine permissibility. Many applications within a single context manager may rely on the context manager to perform role checking. One of ordinary skill in the art will recognize the efficiency of using this enhanced role based declarative security approach to make access decisions instead of implementing security code in each application.

In some embodiments the security service at compares the static and dynamic roles associated with a principal to the approved roles and determines whether the access request is permissible. The security service may make this determination despite the fact that the context manager makes a similar determination. In one embodiment the security service provides its determination of the permissibility of the request to the context manager. The context manager may honor the security service s determination by using the determination instead of its own determination.

In another embodiment the security service may force the use of its determination by overriding the determination made by the context manager. In this embodiment at the security service permits the principal to access the resource if the principal has a static role or valid dynamic role matching one of the approved roles for the resource. Conversely if the principal does not have a static role or valid dynamic role matching one of the approved roles for the resource the security service at denies the principal s request to access the resource.

The embodiments of method demonstrate a security service that interacts with a context manager for purposes of providing role based security with instance level granularity. The method uses dynamic roles to determine whether access by a principal to a resource is permissible thus securing the resource. The method achieves instance level granularity by evaluating a constraint associated with a dynamic role comprising variables that reference instance level data to determine a status for the dynamic role.

The role is dynamic since the status of the role may change each time the security service evaluates the constraint. In some embodiments the security service evaluates the constraint each time the principal requests access to a resource. This instance level granularity is possible due to the constraints associated with dynamic roles.

Initially at the processing of method hereinafter security manager service detects a request by a principal for access to a resource. In an embodiment the principal sends the request to access a resource to the security manager service.

The security manager service controls access to the resource by permitting access by principals having an acceptable role. The security manager service examines the request to determine which method associated with the resource the request is calling. Next the security manager service determines which approved roles are associated with the method in a manner similar to the manner discussed above with respect to . Once the security manager service has determined the approved roles the context manager service next determines which static and or dynamic roles are associated with the principal in a manner similar to that discussed above with respect to .

In some embodiments the security manager service at receives a list of static and or dynamic roles associated with a principal from an identity service. The identity service may maintain a list of roles for each principal or may retrieve the list of roles from a policy store. Additionally the context manager service may also receive the constraints associated with the roles from the identity service. The identity service may retrieve the constraints from the policy store.

The security manager service authenticates with the identity service to create a trust relationship between the security manager service and the identity service. Once the security manager service and identity service establish a trust relationship the identity service may provide identity information about a principal including roles to the security manager service. In an embodiment the identity service provides the identity information via a SAML assertion.

Principals may also authenticate with the identity service. The identity service authenticates a principal by asking for specific authentication information such as a user name and password etc. Once the identity service has authenticated a principal the identity service can vouch for the principal by assuring other services such as a context manager or security manager service of the authenticity of the principal. One way the identity service can vouch for the principal is to provide a credential.

The security manager service may receive at an assertion from the identity service in response to a request for information about a particular principal. The assertion comprises information about the principal such as static and dynamic roles associated with the principal as well as the constraints associated with each dynamic role. In addition the assertion vouches for the authenticity of the principal. In an embodiment the assertion is a SAML assertion.

Once the security manager service has determined the approved roles associated with the method requested by the principal and the roles associated with the principal making the request the security manager service at evaluates the constraint for each dynamic role associated with the principal to determine the status of the dynamic role. In one embodiment the security manager service determines the status of each dynamic role associated with the principal. In another embodiment the security manager service determines the status of each dynamic role that is also an approved role.

The constraint is a logical expression similar to the constraint discussed above with respect to that may be evaluated either true or false. In one embodiment the constraint comprises variables representing instance level data. The security manager service identifies and retrieves instance level data referenced in the constraint. Based on the results of the evaluation the security manager service at may assign a status of active or inactive to the dynamic role. The assigned status may be stored in memory a file an object a database or the like.

Once the security manager service has evaluated the constraint the security manager service at provides the status of the dynamic role. In an embodiment the security manager service provides the status of the dynamic role to itself by storing the status in memory a file an object a database or the like. The security manager service subsequently uses the status to determine if the principal s request to access the resource is permissible.

In other embodiments the security manager service at may supply the status to a context manager. The context manager subsequently uses the status to determine if the principal s request to access the resource is permissible in a manner similar to that described above in relation to . The security manager service may supply the status to the context manager by placing the status in a variable file or other data structure by calling an Application Programming Interface API by returning the status as part of a function call or by other techniques well known to those of skill in the art.

Next the security manager service in some embodiments decides whether to allow the principal to access the resource according to the request. The security manager service evaluates a condition to determine at if the request is permissible. In one embodiment the condition specifies that one or more of the static roles and or valid dynamic roles matches one or more of the approved resource roles.

In other embodiments different conditions may be used. For example a condition specifying that more than one of the static roles and or active dynamic roles matches one or more of the approved resource roles. A further example condition may require that a license obligation be met. For example the license obligation may require that no more than a predetermined number of principals may access a resource simultaneously.

The condition evaluates as either true or false. If the condition evaluates true the security manager service permits the principal to access the resource. If the condition evaluates false the security manager service prevents the principal from accessing the resource.

In another embodiment the context manager determines whether to allow the principal to access the resource according to the request. The context manager evaluates the condition in the manner described above to make a determination.

Next at some embodiments of the security manager service dynamically modify the status of a dynamic role. The security manager service may re evaluate the constraint associated with the dynamic role to make a subsequent determination of the status. The security manager service may periodically re evaluate the constraint and modify the status. For example the security manager service may automatically re evaluate the constraint every second.

Alternatively the security manager service may rely on a trigger to re evaluate the constraint. For example a change in a particular variable referencing instance level data may trigger a re evaluation of the constraint.

If the status changes due to the re evaluation the security manager service provides the modified status to the context manager. If the prior status did not satisfy the condition and the modified status does satisfy the condition the context manager allows the principal to access the resource. If the prior status did satisfy the condition and the modified status does not satisfy the condition the context manager revokes the previously allowed access and prevents further access to the resource.

The embodiments of method demonstrate a security manager service that provides role based security with instance level granularity. The method uses dynamic roles to determine whether access by a principal to a resource is permissible thus securing the resource. The method may achieve instance level granularity by evaluating a constraint associated with a dynamic role comprising variables that reference instance level data to determine a status for the dynamic role. The role is dynamic since the status of the role may change each time the principal requests access to a resource based on the evaluation of the constraint.

The role based security system includes a role a constraint and a security service . Optionally in some embodiments the role based security system also includes an identity service . Further embodiments of the role based security system may also optionally include a policy store . Each of these will now be discussed in turn.

The role is an identifier assigned to a principal. A context manager uses the role to determine if a principal assigned the role may access a resource. Multiple principals may have the same role . The role may be a static role or a dynamic role. A principal assigned to a static role retains the static role unless the static role is revoked.

A dynamic role has a status of either active or inactive. If the status of the dynamic role is active the principal possesses the same privileges associated with the role as if the role was statically assigned to the principal. If the status of the dynamic role is inactive the principal does not possess the privileges associated with the role . In this situation it is as if the role had not been associated with the principal at all.

Each dynamic role has an associated constraint . The constraint is a logical expression that may be evaluated either true or false. The constraint may comprise operators values and variables as described above in relation to . The constraint is evaluated to determine the status of the role . If the constraint evaluates true the status of the role is active. If the constraint evaluates false the status of the role is inactive.

In some embodiments the constraint may comprise variables that reference instance level data. The instance level data may comprise the name of a method associated with the resource that is called by the principal as well as the parameters associated with the method call. The instance level data may also comprise parameter data associated with either the resource or the principal. The instance level data may also comprise temporal data not associated either the principal or the resource such as the time of day that the principal makes the request. Furthermore the instance level data may include a variety of other metadata acquired from the context manager or from the security service .

The constraint may also comprise one or more policies associated with the instance level data. In some cases policies may be viewed as sub constraints that are aggregated to form the constraint . Each policy is itself a logical expression that may be evaluated either true or false. The policies may comprise operators values and variables. Policies are aggregated to form the constraint using Boolean operators such as AND OR NOT and the like. Each policy may comprise variables that reference instance level data.

For example one policy may be that no principal may access personnel records outside of business hours. Another policy may be that principals assigned a supervisor role may access personnel records but principals assigned an employee role may not access personnel records. A constraint resulting from the aggregation of these two example policies would specify that personnel records may be accessed by principals assigned a supervisor role during business hours. Policies and constraints may be global meaning that they can be applied globally to resources roles and principals. Moreover policies and constraints may be local meaning that they can be applied under certain detected conditions for a particular resource role and principal.

The security service detects a request made by a principal for access to a resource. The security service may detect the request by directly intercepting the request or may detect the request via a notification or request from a context manager. The security service identifies one or more roles associated with the principal and determines which of the roles are dynamic roles. The security service also identifies the constraint associated with each dynamic role.

The security service may evaluate the constraint each time the principal attempts to access a resource. In this manner the status of a dynamic role associated with a particular principal can change each time the principal makes a request to access a resource. Consequently the principal s privileges may change each time the principal makes an access request.

The security service may provide the status of the dynamic role to the context manager. The security service may communicate with the context manager through an Application Programming Interface API associated with an external interface of the context manager.

The context manager controls access to the resource by permitting access by principals having an acceptable role. The context manager examines the request to determine which method associated with the resource the principal is calling. Next the context manager determines which approved roles are associated with the method in a manner similar to that described above in relation to .

The context manager compares static and or valid dynamic roles assigned to the principal with the approved roles. If one of the principal s static and or active dynamic roles matches one of the approved roles the context manager allows the principal to access the resource. The context manager may comprise an operating system virtual machine VM a J2EE EJB container a Mono container object a .NET container object or the like.

In some embodiments the identity service supplies the security service with a list of static and or dynamic roles associated with the principal. The identity service may provide the roles via a SAML assertion. The identity service may maintain a list of roles for each principal or may retrieve the list of roles from a policy store .

The security service may authenticate with the identity service to create a trust relationship between the security service and the identity service . A trust specification defines the trust relationship. The trust specification includes policies and access rights that bound the interaction between the security service and the identity service .

Attempted violations of the trust specification by either the security service or the identity service may result in the cancellation of the trust relationship. Once the security service establishes a trust relationship with the identity service the identity service may provide the list of roles to the security service .

The identity service may request a trust relationship before providing the list of roles to ensure a secure transfer to a trusted entity. The list of roles and the constraints associated with the roles are sensitive information that are protected against rogue intruders.

In response to a request for a list of roles associated with a principal the identity service provides an assertion to the security service . The assertion comprises information about the principal such as static and dynamic roles associated with the principal as well as the constraints associated with each dynamic role. In addition the assertion may vouch for the authenticity of the principal.

The policy store is a file database directory or combinations of the same that securely houses roles associated with a principal. The roles may be static roles or dynamic roles. Additionally the policy store houses constraints associated with dynamic roles. The policy store may allow the identity service to access to the data the policy store houses if a trust relationship exists with the identity service .

In an embodiment the operation of the security service is transparent to the context manager. The security service may provide the status of the role to the context manager without the context manager s knowledge. For example the context manager may routinely reference a role list for the principal in determining whether to allow the principal s request.

The role list may comprise an object variable file or other data structure within the environment of the context manager. The security service may modify the role list within the environment by adding a valid dynamic role to the role list. The security service modifies the role list before the context manager accesses the role list to make its determination. In this manner the security service transparently modifies the role list without the context manager being aware of the security service .

The operation of the security service may also be transparent to the principal. Since the principal does not interact directly with the security service the principal is not aware of the security service . Similarly since the resource does not interact directly with the security service the resource is not aware of the security service .

The role based security system permits a security service to interact with a context manager for purposes of providing role based security with instance level granularity.

The role based security system includes a context manager and a security service . Optionally in some embodiments the role based security system also includes an identity service .

The context manager controls access to a resource by permitting access to principals having an acceptable role. The context manager makes an independent decision regarding a principal s request by examining the request to determine which method associated with a resource the principal is calling. Next the context manager determines which approved roles are associated with the method in a manner similar to that described above in relation to .

The context manager compares static and or active dynamic roles assigned to the principal with the approved roles. If one of the principal s static and or active dynamic roles matches one of the approved roles the context manager allows the principal to access the resource.

The context manager also receives a decision regarding the principal s request from the security service . The context manager examines both its own independent decision and the decision provided by the security service and decides whether to grant access to the resource. In one embodiment if the two decisions conflict the context manager gives preference to its own decision by overriding the security service decision.

In another embodiment if the two decisions conflict the context manager gives preference to the security service decision by overriding its own decision. In yet another embodiment if either of the decisions indicates that access should be denied the context manager denies access. In yet another embodiment the security service may force its decision about access by manipulating an API associated with the context manager to force the decision of the security service .

The context manager may comprise an operating system VM a J2EE EJB container a Mono container object a .NET container object or the like. The context manager provides an environment in which one or more software applications may execute. The environment may comprise instance level data associated with objects created within the environment by applications and one or more services available to applications operating within the environment such as transaction services life cycle management services memory persistence and security services.

The security service detects a request made by the principal for access to the resource. The context manager may detect the request by directly intercepting the request or may detect the request via a notification from the context manager . The security service may resolve a role for the principal by identifying one or more roles associated with the principal. The security service also determines which of the identified roles are dynamic roles and identifies a constraint associated with each dynamic role.

The security service may evaluate the constraint in a manner similar to that described above in relation to . In evaluating the constraint the security service may acquire information associated with the environment such as temporal data. Additionally the security service may acquire access related data associated with the resource the principal or both the resource and the principal. The access related data may comprise the name of a method associated with the resource that is called by the principal as well as the parameters associated with the method call. The access related data may also comprise parameter data associated with either the resource or the principal.

The security service may evaluate the constraint each time the principal attempts to access a resource. In this manner the status of a dynamic role associated with a particular principal can change each time the principal makes a request to access a resource. Consequently the principal s privileges may change each time the principal makes an access request. Alternatively evaluation may occur once during a session between the principal and the resource or occur at predefined intervals during the session.

The security service may also evaluate a condition associated with the principal s request to decide whether to allow the principal to access the resource according to the request. In one embodiment the condition specifies that one or more of the static roles and or active dynamic roles associated with the principal match one or more approved resource roles in a manner similar to that discussed above in relation to .

In other embodiments different conditions may be used. For example a condition specifying that more than one of the static roles and or active dynamic roles matches one or more of the approved resource roles. A further example condition may require that a license obligation be met. For example the license obligation may require that no more than a predetermined number of principals may access a resource simultaneously.

The condition evaluates as either true or false. If the condition evaluates true the security service decides to permit the principal to access the resource. If the condition evaluates false the security service decides to prevent the principal from accessing the resource.

The security service communicates its decision to the context manager in a manner recognized by the context manager . The manner of communication may be a variable file or other data structure by calling an Application Programming Interface API by returning the status as part of a function call or by other techniques well known to those of ordinary skill in the art.

In an embodiment the identity service assists the security service by resolving the identity of the principal in a manner similar to that described above in relation to . Additionally the identity service may resolve a list of roles with which the principal is associated and provide the list to the security service in a manner similar to that described above in relation to .

The role based security system permits a security service to interact with a context manager for purposes of providing role based security with instance level granularity. One now appreciates how an application may provide role based security with instance level granularity. This provides novel benefits to customers in that fine grained security control of resources is possible with minimal additional administrative overhead.

The above description is illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of embodiments should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

The Abstract is provided to comply with 37 C.F.R. 1.72 b and will allow the reader to quickly ascertain the nature and gist of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.

In the foregoing description of the embodiments various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting that the claimed embodiments have more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Description of the Embodiments with each claim standing on its own as a separate exemplary embodiment.

