---

title: System and method for a context-awareness platform
abstract: An improved system and method for a context-awareness platform that may be used to adapt an execution environment is provided. A framework with interfaces for setting, tracking, and getting context information about the execution environment of a computer system includes a context engine and a unified data store for aggregating context information at a platform level for access by executables running on the platform. The context engine may receive requests to perform context information operations from executables such as setting, tracking and getting context information in the data store. Upon receiving a notification of a change in context information, one or more executables may change the execution environment such as reconfiguring system settings. In this way, an executable may adapt its execution environment using context information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716651&OS=07716651&RS=07716651
owner: Microsoft Corporation
number: 07716651
owner_city: Redmond
owner_country: US
publication_date: 20050126
---
The invention relates generally to computer systems and more particularly to an improved system and method for a context awareness platform that may be used to adapt an execution environment.

Computer users have been frustrated for a long time by the inability of computer systems to intelligently adapt to new or changed computing and or operating environments. This frustration may be even more acute for users of mobile computers who may work on numerous different activities often at multiple physical locations and under varying circumstances. For instance at the beginning of a day a mobile computer user may be home interacting with family or friends using email or instant messaging. The mobile computer user may then later make a presentation during a meeting at work. In the evening the mobile computer user may be preparing a business proposal while traveling on an airplane for a business meeting the next day.

Unfortunately the computer may remain similarly configured for each of these different environments and uses even when the configuration for one environment no longer remains relevant and needs to be changed in another environment. For example a user may need to configure the mobile computer for changes in physical location when the user moves between a home network and a work network. In this case the user may need to change the default printer setting the default internet browser home page the internet browser proxy settings and other related settings. A user may also need to configure the computer for changes in activity. For instance a user preparing to make a presentation may adjust the volume of the computer turn off instant message notifications turn off a screensaver time out and make other setting adjustments. The user may also need to configure the computer to interact with different people at work than those at home. For example a different default email account may be used at home to communicate with friends and family than the email account used at work. As a result a mobile computer user may have to reconfigure a mobile computer each time the computing environment changes.

What is needed is a way for a computer system to accumulate and expose context information about the computing environment such as the physical location the people the user may interact with at the physical location the user s activities etc. so that the context information may be used to intelligently adapt the computer to the computing environment. Such a system and method should accumulate and expose context information in a uniform and systematic way so that any executable may provide or use the context information to intelligently adapt the computer system.

Briefly the present invention provides an improved system and method for a context awareness platform that may be used to adapt an execution environment. To this end the present invention provides components and a framework with interfaces for setting tracking and getting context information about the execution environment of a computer system. Among the components provided may be a context platform operably coupled to various executables and data storage facilities including a unified data store. The data store may provide unified storage of context information for the context platform by aggregating context information at a platform level for access by executables running on the platform. Any type of context information may be stored including but not limited to user context data executable context data and system context data.

The context platform may include context application programming interfaces and executable code henceforth referred to as the context engine for coordinating the programmatic interactions and data interchange between various parts of the context platform and other executables. The context application programming interfaces may provide access for executables to set track or get context information. Any executable may be operably coupled to the context application programming interfaces to set track or get context information. The context engine may receive requests to perform context information operations from executables such as setting tracking and getting context information in the data store. For example the context engine may receive a request to update context information may look up the executables that requested to be notified about a change of the context information and may then send a notification of the change in the context information to the executables. As a result of receiving a notification of a change in context information one or more executables may change the execution environment such as reconfiguring system settings. In this way an executable may adapt its execution environment using context information.

The context platform may advantageously allow a computer system to accumulate and expose context information about the execution environment such as the physical location the people the user may interact with at the physical location and the user s activities etc. so that the context information may be used to intelligently adapt the computer to the execution environment. Furthermore the context platform is extensible and supports any number of executables which may provide and use context information. Additionally the context platform may support context information data of any size and or format. Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings in which

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices headless servers multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or other devices including a device that contains a biometric sensor environmental sensor position sensor or other type of sensor. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like connected to the system bus via touch screen interface . Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

The present invention is generally directed towards a system and method for a context awareness platform. The context awareness platform may advantageously allow a computer system to accumulate and expose context information about the execution environment such as the physical location the people the user may interact with at the physical location and the user s activities etc. so that the context information may be used to intelligently adapt the computer to the execution environment. An execution environment as used herein means executable settings such as installation or configuration settings executable instructions and operating system services. As will be seen the architecture of the present invention provides components and a framework with interfaces for setting tracking and getting context information about the execution environment of a computer system. Among the components provided may be a context engine and a unified data store for aggregating context information at a platform level for access by executables running on the platform. Any type of context information may be stored including user context data executable context data and system context data. As will be understood the various block diagrams flow charts and scenarios described herein are only examples and there are many other scenarios to which the present invention will apply.

Turning to of the drawings there is shown a block diagram generally representing an exemplary architecture of system components for a context awareness platform. Those skilled in the art will appreciate that the functionality implemented within the blocks illustrated in the diagram may be implemented as separate components or the functionality of several or all of the blocks may be implemented within a single component. As an example the functionality of the context APIs in the context platform may be implemented in a separate component.

The context platform shown in may be operably coupled to various executables as well as to storage facilities such as data store . The context platform may include context application programming interfaces APIs and a context engine . The context APIs may be an application programming interface API an object a control or other executable code. The context APIs may provide for example access to set track or get context information by including invocable interfaces such as SetContextData to add context information to the data store TrackContextData to be notified of updates to context information in the data store and GetContextData to retrieve context information in the data store . Other context APIs may also be used to manipulate the context information.

The context engine may be any executable software code including a kernel component an application component a component of a linked library an object and so forth. The context engine may receive requests to perform context information operations from executable software code such as setting tracking and getting context information in the data store . For example the context engine may keep track of requests to be notified of an update or change in context information and may notify executables upon receiving an update or change of the context information requested to be tracked. For purposes of persistently storing context information the context engine may be operably coupled to various storage facilities such as data store . The context engine may associate a unique identifier such as a GUID with a block of context data representing the context information that may be used for storing the context information.

Data store may provide unified storage of context information for the context platform by aggregating context information at a platform level for access by executables running on the platform. The data store may store context types. A context type may be a GUID that serves as an identifier of context information represented by a data block of bits. Context information as used herein includes but is not limited to any information about the logical and physical execution environment including location activity and state information. Indeed context information may be any size format or type of data. For example context information may include binary data formatted data media data such as audio or video human readable data XML encrypted data and so forth. Among the various context information stored in data store may be user context data executable context data and system context data . User context data may include information about activities of the user such as surfing the web using a presentation program and so forth. Executable context data may include information about the state of an executable such as program settings opened files and so forth. And system context data may include information about the system state such as the state of hardware devices like battery power level network connectivity and so forth.

An executable may be any application program kernel component or other executable that may provide or obtain context information and or adapt its computing environment according to a change in context information. An executable may be operably coupled to the context APIs to access invocable interfaces to set track or get context information. For example the Network Location Awareness NLA service for the Microsoft Windows XP operating system may monitor for network changes and may provide the network information to the context platform by invoking the SetContextData API to set the context information of the network to the new network connection. The context engine may receive the new value to associate with the network connection and it may look up the executables that invoked the TrackContext API to be notified about the change of context information for the network connection. The context engine may then send a notification of the change in context information for the network connection to these executables. As a result of receiving the notification of the change in network connection one or more executables may change system settings such as the default printer setting the default internet browser home page the internet browser proxy settings and so forth. In this way an executable may adapt its execution environment using the context information upon notification of an update of context information.

The SetContext method may be used by executables to provide new context information on a type of context. The type of context may be determined by the type of object passed to the method. The context engine may store the context information by associating it with the GUID corresponding to the object passed to the method. Executables may use the GetContext method to obtain the current context information for a particular type of context. The context engine may use the GUID for the type of context to lookup stored context information that may be written into the data store by a previous call to the SetContext method.

The managed context APIs may also include an event mechanism accessible by an object called a ContextClient. The ContextClient may expose an event named ContextChanged and an event handler named ContextChangedEventHandler that may make use of a ContextChangedEventArgs object with properties such as OldContext NewContext ContextType and Stale. The OldContext and NewContext properties may allow the event receiver to determine the state of the context before and after it was changed so that the receiver may take appropriate action. The ContextType may represent the type of the objects in this event. Finally the Stale flag may be used to indicate whether or not the executable that provided this context information may still be resident in volatile memory.

The context message processor may store the context information in memory as illustrated by context information . Among the various context information stored in context data may be user context data executable context data and system context data . The context engine may store context information as a GUID with an associated data block containing the context information. Whenever a GetContextData request may be received the context message processor may obtain the context information requested from context data and may place a copy of the context information in a shared memory buffer or memory mapped file or other shared location such as an on disk file or a system registry etc. so that an executable may read it upon receiving notification. Whenever a SetContextData request may be received the context message processor may update the context data by adding the context information in the SetContextData request to the context data and then the context message processor may place the context information in the context notification queue . In one embodiment the context information may be an update object that may include the old context information the new context information and a list of executables that requested to be notified of an update in this context information. In another embodiment the list of executables that requested to be notified of an update in context information may be separately stored in notification table where lists of executables may be associated with one or more context types or GUIDs. After the context information may be placed in the context notification queue a context notifier may be awakened. In one embodiment the context notifier may be a thread spawned by the context engine . The context notifier may read updates of context information from the context notification queue and send a notification message to each executable that requested to be notified of an update in this context information.

In one embodiment the context notifier may spawn one or more notifier threads for asynchronously sending a notification message with the context information to notify an individual executable of an update of the context information. Thus a syncronous block by any executable on a notifier thread may not prevent sending other notifications and any number of notifications may be sent to executables without requiring completion of a previous sent notification to any one executable. Upon receiving notification of an update of context information an executable may access the update of context information from a shared location such as a shared memory buffer or memory mapped file.

Periodically the context engine may write the context information in the context data to persistent storage such as data store . The context engine may also write the notification table to persistent storage. In one embodiment the context engine may go to sleep after a period of inactivity. Prior to going to sleep the context engine may write the context data and the notification table to persistent storage The default period of inactivity may be one hour for example. In various embodiments other periods of time may be used that may be suitable for the expected duration of user activities. In some embodiments the duration may be set by the user. When the context engine may be awakened it may read the context data from persistent storage and write it to the context data as well as read the notification lists from persistent storage and write them to the notification table .

Whenever an executable may wish to provide context information for use by other executables the executable may send a set request to the context engine. presents a flowchart generally representing exemplary steps undertaken by an executable in one embodiment for setting context information. A change in context may first be detected at step . And then a request to set context information may be sent at step . For example an executable such as the Network Location Awareness NLA service for the Microsoft Windows XP operating system may monitor for network changes and may detect a new network connection. The executable may then provide the network information to the context platform by invoking the SetContextData API to set the context information of the network to the new network connection.

At step any executables that requested to be notified of an update of this context information may be looked up in a list of executables to be notified for an update of this context information. For example a list of executables that requested to be notified of an update in this context information may be separately stored in one embodiment in a notification table such as notification table where lists of executables may be associated with context types or GUIDs. In another embodiment a list of executables that requested to be notified of an update in this context information may be stored in an update object that includes among other information the updated context information.

At step it may be determined whether there are any executables that may have requested to be in a list of executables to be notified of an update of this context information. If so then a notification may be sent to the list of executables that requested to be notified of an update in this context information at step . In one embodiment context notifier may read updates of context information from the context notification queue and send a notification message to each executable that requested to be notified of an update in this context information. In various embodiments the context notifier may spawn one or more notifier threads for asynchronously sending a notification message with the context information to notify an individual executable of an update of the context information.

After a notification may be sent to the list of executables that requested to be notified of an update in this context information at step or if it may be determined that there are not any executables that may have requested to be in a list of executables to be notified of an update of this context information at step then the update of the context information may be persistently stored at step . For instance the context engine may periodically write the updated context information in the context data to persistent storage such as data store . After a period of inactivity the context engine may write the context data in one embodiment to persistent storage prior to going to sleep. After the updated context information may be persistently stored processing may be finished.

Returning to step if the context information operation received was not a set request then it may be determined at step whether the context information operation received may be a request to track context information. If so then the list of executables to be notified of an update of context information may be updated at step . Next the updated list of executables to be notified of an update of context information may be persistently stored at step . For instance the context engine may periodically write the updated list of executables in the notification table to persistent storage. In another embodiment the context engine may periodically write the updated list of executable in an update object that includes among other information the updated context information to persistent storage. After a period of inactivity the context engine may write the updated list of executables in various embodiments to persistent storage prior to going to sleep. After the updated list of executables to be notified may be persistently stored processing may be finished.

Returning to step if the context information operation received was not a track request then it may be determined at step whether the context information operation received may be a request to get context information. If so then the context information may be retrieved at step . For example in one embodiment the context engine may get the context information from context data . In another embodiment the context engine may get the context information from data store . Next the context information may be sent at step to requestor. After sending the context information to the executable that sent the get request processing may be finished. In one embodiment a notification may be sent to the list of executables that requested to be notified of an update in this context information whenever any executable may receive context information in response to sending a get request.

Advantageously the system and method may allow a computer system to accumulate and expose context information about the execution environment so that the context information may be used to intelligently adapt the computer to the execution environment. An executable may adapt the execution environment by using a single item of context information or may adapt the execution environment by using multiple items of context information. Moreover an executable may operate independent of other executables or in conjunction with several executables to set context information or adapt the execution environment using available context information. The context information may be aggregated at a platform level in a unified data store so that any executable running on the platform may provide or use the context information to intelligently adapt the computer system to enhance a user s productivity.

As can be seen from the foregoing detailed description the present invention provides an improved system and method for a context awareness platform that may be used to adapt a execution environment. The architecture of the present invention provides components and a framework with interfaces for setting tracking and getting context information. The system and framework provided is extensible. Any type of context information may be used including user context data executable context data and system context data. Any number of executables may be supported that may provide or use context information. As is now understood the system and method thus provide significant advantages and benefits needed in contemporary computing.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

