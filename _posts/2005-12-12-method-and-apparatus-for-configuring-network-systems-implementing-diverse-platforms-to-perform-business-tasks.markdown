---

title: Method and apparatus for configuring network systems implementing diverse platforms to perform business tasks
abstract: Method and apparatus for configuring systems implementing diverse platforms in a network is described. In one example, functional units of the systems are exposed to define abstract function signatures. A template is specified using at least one of the abstract function signatures to define at least one executable task. The template is translated into configuration data adapted to configure each of the system to collectively perform the at least one executable task. The configuration data is applied to the systems through a coupler layer adapted to interface with each of the diverse platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539496&OS=08539496&RS=08539496
owner: AT&T Intellectual Property II, L.P.
number: 08539496
owner_city: Atlanta
owner_country: US
publication_date: 20051212
---
Embodiments of the present invention generally relate to network systems and more particularly to a method and apparatus for configuring network systems implementing diverse platforms to perform business tasks.

An enterprise business process involves multiple steps usually operating in a variety of areas involving a variety of systems. A system is a software application deployed on a computer or a set of computers working together to implement specific business functionality. For example the functionality could be billing ordering provisioning inventory ticketing sales etc. Each of these systems typically provides an interface to interact with external systems or applications. Different systems are implemented using different technology and different platforms. Some business tasks require the interaction of systems having diverse platforms. Conventionally a user wishing to perform such a business task must understand the details of each platform in order to properly configure each system. This requires the user to have knowledge and expertise for several different types of systems and platforms. Accordingly there exists a need in the art for an improved method and apparatus for configuring network systems implementing diverse platforms to perform business tasks.

Method and apparatus for configuring systems implementing diverse platforms in a network is described. In one embodiment functional units of the systems are exposed to define abstract function signatures. A template is specified using at least one of the abstract function signatures to define at least one executable task. The template is translated into configuration data adapted to configure each of the system to collectively perform the at least one executable task. The configuration data is applied to the systems through a coupler layer adapted to interface with each of the diverse platforms.

Each of the systems and include a software application deployed on a computer or set of computers working together to implement a specific business functionality. For example the systems and may implement billing ordering provisioning inventory ticketing sales and like type business functionalities known in the art. Each of the systems and provides an interface for interacting with external systems. Notably the server may communicate with each of the systems and through such interface. The systems and employ various diverse platforms written using different languages and having different types of interfaces.

The server implements a multi system configuration and optimization platform M SCOP . The M SCOP is an intelligent configurable system that allows independent software applications and systems to expose their functionality to the M SCOP . Users may interact with the M SCOP to specify a template that combines various exposed functionalities into a combinable unit for accomplishing a business task. The users interact with the M SCOP through a front end implemented by the clients . Each of the clients includes a computer such as a desktop computer or workstation. Those skilled in the art will appreciate that the network architecture is just one example of a network architecture in which the present invention may be employed. For example the M SCOP may be implemented on a computer with which users directly interact rather than in a client server architecture. In general the M SCOP may be employed to configure various systems implementing diverse platforms in a network.

The API provides a software interface through which an external system can register with the M SCOP and announce its functionality. The API receives registration input from external systems via the system interfaces . For each system the registration input comprises information associated with the system. In one embodiment the registration input includes an identifier and parameter information for each functional unit being exposed. The registration input may include other types of data such an address on which the system providing the registration input is being hosted. The parameter information may include a list of input parameters and types of such input parameters a functional unit accepts and a list of output parameters and types of such output parameters the functional unit provides. The API is configured to store the registration input in the database .

Notably the database stores abstract function signatures . The abstract function signatures provide an abstract representation of exposed functional units of the systems. The abstract function signatures hide the platform differences among the systems by representing the functional units in terms of functionality input data and output data. The database may also store system information associated with the systems such as the addresses on which the systems are hosted. The database may also store explanation data for the exposed functional units. The explanation data may include detailed information regarding the functionalities of the exposed function units as well as up to date knowledge of how the functional units may be combined to achieve specific business tasks.

The front end interface may comprise a graphical user interface GUI or like type interface to the M SCOP . For example a user may access the M SCOP via a Web enabled browser on the GUI. Through the front end interface users may access the function signatures and explanation data stored in the database . The front end interface enables specification of a template using one or more of the function signatures to define at least one executable task. The abstract function signatures enable the user to combine functional units of the systems into a single executable unit that hides the platform differences of the systems. Templates may be further specified using various conditional constructs along with the function signatures such as if then logic basic Boolean expression evaluation and the like. The templates may further include user defined functions that are defined by one or more function signatures and conditional constructs. That is function signatures and conditional logic may be bundled as a separate function allowing programmable building blocks for faster definition of executable tasks. In this manner the front end interface provides template data .

The configuration engine translates a specified template into configuration data. The configuration data is adapted to configure the systems associated with the functional units used in the template to collectively perform the executable task s defined by the template. The configuration engine employs a pattern recognition process to process the template to produce the configuration data. In one embodiment the pattern recognition process is a rule based engine for converting the template into configuration data for the systems. For example similar to compilation of program code such as C the rule based engine may include a lexical analysis a syntactical analysis and a semantic analysis. Lexical analysis involves dividing the template into regular expressions for further processing. Syntactical analysis involves identifying structure of the template from the regular expressions. Semantic analysis involves recognizing the meaning of the template with respect to the functional units of the systems. The configuration data includes input data for each of the functional units of the systems involved in the task s .

The coupler interface is configured to apply the configuration data produced by the configuration engine to particular systems involved in the requested task s . The coupler interface is coupled to each of the system interfaces . The coupler interface includes adapters through N collectively where N is an integer greater than zero. The adapters are configured to communicate with the diverse interfaces of the systems. That is each of the adapters provides an interface between the M SCOP and a particular platform implemented by one or more systems. The coupler interface allows the platform language differences among the system interfaces to be hidden from the user. Exemplary adapters include simple socket interfaces to more sophisticated modules written in CORBA J2EE .NET and like type languages.

In one embodiment the event collection facilitation system is configured to send notifications of events to the configuration engine . The configuration engine may display the notification to a user via the front end interface . In this manner the user may identify a change in one or more systems and take appropriate action by specifying a template to perform a particular task. In one embodiment the configuration engine may process the notification data from the event collection facilitation system and in accordance with rule data automatically select one or more templates from the template data to configure systems to perform particular task s . Thus the configuration engine may cause the systems to perform particular business tasks automatically without human intervention based on particular notifications received from the event collection facilitation system .

The memory may store all or portions of one or more programs and or data to implement the processes and methods described herein. Notably the memory may store program code to be executed by the processor for implementing the M SCOP and performing the method of . Although one or more aspects of the invention are disclosed as being implemented as a computer executing a software program those skilled in the art will appreciate that the invention may be implemented in hardware software or a combination of hardware and software. Such implementations may include a number of processors independently executing various programs and dedicated hardware such as ASICs.

The computer may be programmed with an operating system which may be OS 2 Java Virtual Machine Linux Solaris Unix Windows Windows95 Windows98 Windows NT and Windows2000 WindowsME and WindowsXP among other known platforms. At least a portion of an operating system may be disposed in the memory . The memory may include one or more of the following random access memory read only memory magneto resistive read write memory optical read write memory cache memory magnetic read write memory and the like as well as signal bearing media as described below.

An aspect of the invention is implemented as a program product for use with a computer system. Program s of the program product defines functions of embodiments and can be contained on a variety of signal bearing media which include but are not limited to i information permanently stored on non writable storage media e.g. read only memory devices within a computer such as CD ROM or DVD ROM disks readable by a CD ROM drive or a DVD drive ii alterable information stored on writable storage media e.g. floppy disks within a diskette drive or hard disk drive or read writable CD or read writable DVD or iii information conveyed to a computer by a communications medium such as through a computer or telephone network including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such signal bearing media when carrying computer readable instructions that direct functions of the invention represent embodiments of the invention.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

