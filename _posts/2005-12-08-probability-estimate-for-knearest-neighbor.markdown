---

title: Probability estimate for K-nearest neighbor
abstract: Systems and methods are disclosed that facilitate producing probabilistic outputs also referred to as posterior probabilities. The probabilistic outputs include an estimate of classification strength. The present invention intercepts non-probabilistic classifier output and applies a set of kernel models based on a softmax function to derive the desired probabilistic outputs. Such probabilistic outputs can be employed with handwriting recognition where the probability of a handwriting sample classification is combined with language models to make better classification decisions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07451123&OS=07451123&RS=07451123
owner: Microsoft Corporation
number: 07451123
owner_city: Redmond
owner_country: US
publication_date: 20051208
---
This application is a continuation of U.S. patent application Ser. No. 10 183 213 filed Jun. 27 2003 and entitled PROBABILITY ESTIMATE FOR K NEAREST NEIGHBOR the entirety of which is incorporated herein by reference.

The present invention relates generally to the classification of patterns more particularly assigning class probabilities to novel input examples.

Computer systems are ever increasingly employed to classify e.g. recognize objects. Classifiers or classification systems are typically employed to perform a variety of applications including identifying and or classifying objects such as handwriting samples medical images faces fingerprints signals automatic control phenomena natural phenomena nucleotide sequences and the like.

Classification systems often provide non probabilistic outputs e.g. object A belongs to class C . Such outputs are sufficient for some applications but not others. Probabilistic outputs also referred to as posterior probabilities are required in many situations such as when combining classifiers with other knowledge sources such as language models. The probabilistic output provides a probability for a class based on a given object or data point. Typically this posterior probability is denoted by P class input .

One widely utilized high performance non probabilistic classifier is the K nearest neighbor classifier KNN . The KNN classifier is especially applicable for systems that operate with a relatively large numbers of classes e.g. Asian handwriting recognition . As with other classifiers the KNN classifier generates outputs that do not include probabilities. It would be advantageous to convert those outputs into usable probabilities. However there fails to exist a suitable mechanism for converting the KNN classifier outputs into useful probabilities. Histogramming can sometimes be employed to generate probabilities from classifier outputs. However there is often insufficient data to generate such probabilities with histogramming.

Another type of non probabilistic classifier is a support vector machine SVM . SVMs are a trainable classifier and are generally considered more accurate at classification than other classification methods in certain applications e.g. text classification . They can also be more accurate than neural networks in certain applications such as reading handwritten characters for example. SVMs generate outputs that are uncalibrated values and do not include probabilities. Conventional approaches do exist to convert non probabilistic outputs of SVM classifiers into probabilistic outputs. For example a logistic function has been employed with SVM classifier outputs to convert the outputs into usable probabilities. However the training speed of SVMs is often prohibitive for a large number of classes so the KNN classifier is often preferred. However conventional approaches fail to provide an adequate mechanism that convert non probabilistic outputs of KNN classifiers into probabilistic outputs.

Probabilistic outputs can be produced by neural networks. A neural network is a multilayered hierarchical arrangement of identical processing elements also referred to as neurons. Each neuron can have one or more inputs and one output. The inputs are typically weighted by a coefficient. The output of a neuron is typically a function of the sum of its weighted inputs and a bias value e.g. an activation function . The coefficients and the activation function generally determine the response or excitability of the neuron to input signals. In a hierarchical arrangement of neurons in a neural network the output of a neuron in one layer can be an input to one or more neurons in a next layer. An exemplary neural network can include any suitable number of layers such as an input layer an intermediary layer and an output layer.

The utilization of neural networks typically involves two successive steps. First the neural network is initialized and trained on known inputs having known output values referred to as classifications. The network can be initialized by setting the weights and biases of neurons to random values typically obtained via a Gaussian distribution. The neural network is then trained using a succession of inputs having known outputs referred to as classes. As the training inputs are fed to the neural network the values of the coefficients weights and biases are adjusted utilizing a back propagation technique such that the output of the neural network of each individual training pattern approaches or matches the known output to mitigate errors. Once trained the neural network becomes a classifier to classify unknown inputs. By selecting a suitable function to specify cost of an error during training outputs of a neural network classifier can be made to approximate posterior probabilities.

The following is a summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

Systems and methods are disclosed that facilitate producing probabilistic outputs also referred to as posterior probabilities. The probabilistic outputs include an estimate of classification strength. The present invention intercepts non probabilistic classifier outputs and applies a set of kernel models based on a softmax function to derive desired probabilistic outputs. For example a received data point is analyzed with respect to K nearest neighbors and a model is evaluated on the analyzed data. The model is trained via processing example inputs and outputs so as to train the model to provide probabilistic outputs as compared to conventional schemes which simply provide non probabilistic outputs. Such probabilistic outputs can be employed with handwriting recognition where the probability of a handwriting sample classification being above or below a given threshold might determine whether the sample is identified as the letter j the letter i or a stray pen mark altogether for example. Additionally by integrating with other sources of information such as language models the output of probabilities decreases likelihood of errors in handwriting recognition systems.

The present invention results in a probabilistic classification system that is well informed and well calibrated. Additionally the invention maps non probabilistic outputs to probabilistic outputs by employing a trained parametric model. The parameters of the model are trained via a suitable training set of data to provide probabilistic outputs in accordance with an acceptable test error amount.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

The present invention is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It may be evident however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the present invention.

As used in this application the terms component and system are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

The system includes a trained classifier a mapping component and an application and is described at a relatively high level to further illustrate the present invention. The system can be implemented on a number of suitable devices such as but not limited to a personal computer a personal digital assistant a cellular telephone a biometric device and the like.

The trained classifier receives a number of inputs and generates classifier outputs. The inputs can be feature vectors of objects to be classified. The classifier is trained via a suitable training algorithm. A number of types of classifiers can be utilized however a K nearest neighbor KNN type classifier is typically employed. For the KNN type classifier a class of an input point is determined by measuring or determining distances of points in a database and obtaining the K nearest points e.g. neighbors . Then the class of those K nearest points is employed to determine the class of the input point e.g. by a majority vote . Thus the KNN classifier can provide as an output a distance of the input to K nearest points the classes of the K nearest points and or the identities of the K nearest points.

The mapping component converts the outputs from the trained classifier into posterior probabilities also referred to as probabilistic outputs. Generally the mapping component employs a probability model to convert or map the outputs from the trained classifier into the posterior probabilities. The respective posterior probabilities are thus a function of a corresponding respective output and substantially all of the other outputs of the trained classifier .

A parametric model is employed by the mapping component to perform the mapping. The parametric model has a varying number of parameters that are learned or trained. Once the parameters are trained e.g. via a second training set disjoint from a first training set used to train classifier the parametric model permits the mapping component to compute probabilities from the classifier outputs. It is appreciated that the parametric model utilizing learned parameters is generally more accurate and efficient than an approach such as majority rule wherein a posterior probability can be estimated by employing relative frequencies of occurrence s of a given class.

The application component is operative to receive the posterior outputs from the mapping component . The application component then employs the posterior outputs to perform a function such as for example handwriting recognition medical image diagnoses e.g. determining whether an image identifies a tumor speech recognition image compression and the like.

Turning now to a block diagram of a system that facilitates generation of posterior probabilities is depicted. The system is similar to that of but is described at a more detailed level. The system includes a distance computation component a database of stored examples and a trained probability transducer . The system is computationally efficient and adjustable in that speed and accuracy can be traded off. Furthermore the system can also be referred to as a probabilistic classifier in that the system produces probabilistic outputs that include class information. Additionally the system can be further referred to as a pattern recognition system.

The distance computation component is a piecewise constant classifier and is operative to classify inputs without providing probabilities. The distance computation component employs a K nearest neighbor KNN approach. The distance computation component receives a number of inputs and generates K outputs. The K outputs each comprise a class a distance and or an index of one of the K closest examples stored in database . The K outputs are sorted or ranked according to increasing distance to the inputs. Additionally the K outputs are also referred to as a classifier output vector. The inputs are feature vectors of objects to be classified. The classifier and or the system is trained via a suitable training mechanism typically via a P admissible loss function such that the outputs meet error requirements for a desired task.

The trained probability transducer receives the K outputs from the distance computation component and maps or converts the K outputs into posterior probabilities also referred to probabilistic outputs. The posterior probabilities can then be employed for a suitable application e.g. such as handwriting analysis . The trained probability transducer comprises a softmax function and a parametric model .

The distance computation component is generally implemented as a KNN classifier. As discussed with respect to a KNN type classifier is particularly suitable for implementations involving large numbers of classes. For the KNN type classifier a class of an input point is determined by measuring or determining distances of points in database and obtaining the nearest points e.g. neighbors . Then the classes of those K nearest points are employed to determine the class of the input point or of a given point. Additionally the distance computation component can utilize kernels to transform the distances between test points and stored examples in database into output values suitable for input to the parametric model . For example one suitable kernel takes the exponential of the negative of a scaled Euclidean distance of a test point to a stored example and produces a Gaussian similarity measure between the test point and the stored example. Another such kernel can always produce a value of 1 as long as the stored example is in the K nearest stored examples to the test point.

The parametric model can be implemented in a number of different embodiments three of which are further described infra. The parametric models in each of the three embodiments comprise trained or learned parameters. The probability transducer is trained via a suitable training method e.g. minimizing a P admissible loss function . Generally a number of test points are input and the outputs are compared with expected results. Component parameters such as weights coefficients and functions are adapted so as to produce outputs within a tolerable amount of error.

The system is trained and developed such that it is well informed and well calibrated. Generally a well calibrated classifier is one for which as the amount of training data increases e.g. number of training points the predicted probabilities converge to the measured frequencies. A well informed classifier is one such that if an algorithm is employed to convert the classifiers outputs to probabilities then the test error should not increase if the predicted posteriors are employed instead of the original e.g. expected outputs. Calibration and informativeness are typically somewhat dependent on each other. Thus if the modeled or generated posterior probabilities are equal to the true or actuation probabilities the resulting probabilities are well informed and well calibrated.

Another factor to be considered for the training of probability transducer is P admissibility which is correlated with informativeness and calibration. It is desirable that the error metric to train probability transducer is P admissibile which generally results in a classifier that is well informed and well calibrated. A P admissible loss function L y y is a function which for any given x is minimized at y E y x where E y x denotes the expectation of y for a fixed given value of x. Additionally for the case of a single output variable if probability transducer does not have sufficient capacity to learn the true posterior it still comes relatively close to the solution in the sense that minimizing the expectation of a P admissible loss function over the joint distribution of x and y is equivalent to first replacing y by E y x and then minimizing the expectation of the loss function over the marginal distribution p x .

The probability transducer is trained utilizing a set of training points separate from those stored in the database of stored examples . This is performed to circumvent an inherent bias that can be present in a trained KNN classifier for example if a trained KNN classifier is used to classify the data upon which it was trained the closest point to a given point x will be x itself with distance zero which is unlikely to occur on unseen test data . These separate training points are labeled as to correct class. The posterior probabilities generated by the trained probability transducer also referred to as posteriors are modeled utilizing the softmax function also referred to as a softmax map as follows 

The softmax map is a convenient tool to map the range of z . . . to 0 1 . The variable cin the numerator on the right hand side of 2 represents a hypothesized class of an input point x represents a feature vector generated from the input point cin the denominator of the right hand side of 2 represents classes of neighboring points represents parametric weights and z is the output of a trained parametric model relating distance and class information. Note that the structure of the model resides in the choice of functional dependence of z on the x c and . A regularized log likelihood of the class labels is employed for the objective function which is sought to be maximized note that dropping independent terms this is equivalent to maximizing the regularized negative cross entropy 

where g is a regularization function and P c x is the true posterior probability. Assuming data is utilized without label noise permits that P c x where denotes the true class of point x and where is defined to take the value 1 if c cand zero otherwise and the objective function becomes 

It is additionally appreciated that the data processed by the distance computation component can be first normalized to further mitigate test errors. The data is normalized such that each point lies on a unit sphere unit norming . This alleviates the problem of a bias that can occur with an ordinary Euclidean norm for handwriting applications due to the fact that some digits e.g. 2 and 8 have on average much more ink than others e.g. digit 1 . An example of unit norming is depicted in . With a Euclidean normalization pattern A is equidistant to B and C. With unit normalization pattern A is closer to C. Euclidean normalization and unit normalization distances are illustrated below the patterns. Experiments with and without unit norming demonstrate an advantage for unit norming.

We now turn to three different approaches for implementing the probability transducer which exploit different models as the parametric model . These approaches of probability transducer are depicted in and . These approaches can be trained via stochastic gradient descent of the objective function in equation 4 . The training of the embodiment of is shown in . The training of the embodiment of is shown in . The training of the embodiment of is shown in .

For all three approaches the probability transducer accepts K outputs from distance computation along K rows of the and . Thus the Nrow in and corresponds to the Nnearest neighbor in rank order to the input point. Each column in and corresponds to a particular hypothesized class for the input point specifically each of the C columns classes of and computes the output of the parametric model for a particular class. Thus the three approaches comprise a plurality of rank class computations each of which lie on an intersection of a row and a column. A rank class computation contains a model of how a single ranked output of the distance computation influences the probability of a single class. The three approaches utilize varied rank class computations.

Turning now to a first approach for implementing the trained probability transducer is illustrated. In each output from the distance computation component is depicted as comprising a class label of the corresponding element in the database and a distance of the test point to the corresponding element in database . Recall that the distance computation component can use a kernel to transform the true distance into a form suitable for input to the parametric model . In each distance is multiplied by a weight a learned parameter corresponding to its row. This multiplication is carried out by multiplier .

In each rank class computation first compares the class label to the class of the column by component . Component produces a 1 if they are the same class and 1 otherwise. The result of component is multiplied by the output of multiplier . This multiplication is performed by multiplier . The output of multiplier is added to a partial sum by adder . When the rows have contributed to the partial sum the result is an output z of the parametric model . Outputs for every column are then supplied to the softmax component to produce a posterior probability for every class where denotes sum over index i.

There are alternatives for the initialization of partial sum . One alternative is to initialize it to zero. The preferred alternative is to initialize each partial sum to a separate learned parameter one per column class .

Posterior probability is computed by applying the probability transducer in to the same example in the second training set that is providing the K distance outputs. The target probability is the known probability that the current example in the second training set belongs to the class corresponding to the current column. An error signal is produced by subtracting the target probability from the computed posterior probability . This subtraction is performed by subtractor . The error signal is scaled by a step size . This scaling is performed by multiplier . The scaled error signal is then supplied to the rank class update computations in the corresponding column. The scaled error is also applied at to adjust the learned parameter that initializes the partial sum if such a learned parameter is used in . For the update of the partial sum initialization parameter the scaled error rate can be multiplied by an additional constant to allow for the fact that the number of contributions to an update of the partial sum initialization parameters is different than the number of contributions to an update of the weight parameters at a given iteration of the training process

Each rank class update computation compares the class of the stored example in database corresponding to its row to the class of its column. This comparison is performed by component . The result of this comparison is 1 if the classes are the same and 1 if they are different. The result of the comparison is multiplied by the scaled error at multiplier . Multiplier then multiplies the result of multiplier by the distance of the example in database to the current example in the second training set. Again this distance may be modified by a kernel function. Finally the output of the multipliers are summed by adders to produce an update for the weight parameter corresponding to the appropriate row.

It can be appreciated by those skilled in the art that implements a stochastic gradient descent algorithm. Other suitable optimization algorithms can be also be employed in accordance with the subject invention. can be modified to compute a complete gradient by removing multiplier and accumulating the updates for the parameters over the second training set. Alternatively P admissible error metrics other than shown in equation 4 can be used.

Turning now to a second approach for implementing the trained probability transducer is depicted. is analogous to except that the form of the rank class computation is altered and multiplier is not utilized. Thus some description is omitted for brevity. Class label is analogous to class label . Distance is analogous to distance . Column class label is analogous to column class label . Initialization of the partial sum is analogous to initialization of the partial sum . Parametric model output is analogous to parametric model output . Softmax component is analogous to softmax component . Posterior probability output is analogous to posterior probability output .

Rank class computation uses class label and column class label to look up a value in a lookup table . The values in this lookup table depend on the row of the rank class computation . If the number of possible classes is C then the number of entries in each lookup table is C. The index set of the lookup table is the Cartesian product between the possible class labels and column class labels . The values in lookup table are trained parameters and are updated by the process described in .

The value selected by lookup table is multiplied by the distance of the corresponding row. This multiplication is performed by multiplier . Adder then takes the output of multiplier and adds it to partial sum for further computation.

Rank class update computation multiplies the distance of its row ranked output point by the scaled error of its column class . This multiplication is performed by multiplier . The result of the multiplication is provided to the update of the lookup table . The lookup table update will modify one entry of each lookup table for rank class update computation s . The index of the modified entry is computed by combining the class label of the row with the column class label in the same manner as the index is computed by lookup table . The corresponding entry is the adjusted by the output of multiplier .

Turning now to a third approach for implementing the trained probability transducer is depicted. As with the other approaches each row corresponds to an output from the distance computation component sorted by rank and each column corresponds to a particular class. According to this approach the trained parametric model comprises a plurality of rank class computations .

For this approach the distance computation component is operative to produce for each rank an index which identifies the Nth closest point in the database of stored examples to the input point a class label which is the class of the Nth closest point in the database of stored examples and a distance which is the distance of the Nth closest point in the database of stored examples to the input point. Again the distance may be computed via a kernel function. The initialization of the partial sum is analogous to the initialization of the partial sum in . The computation of the posterior probability by softmax component from the output of the parametric model is analogous to the computation of the posterior probability by softmax component from the output .

Each rank class computation compares the class of the Nth closest point to the class label for its column. This comparison is performed by class determination component . The class determination component produces a 1 if they are the same class and a 0 otherwise. The value produced by the determination component is multiplied by the distance . This multiplication is performed by multiplier . The result of this multiplication is multiplied by the output of the lookup table . The index used by the lookup table is the index of the Nth closest point. There is a lookup table entry for each example in the database of stored examples . The multiplication of the lookup table result is performed by multiplier . The result of multiplier is then added to the partial sum by adder .

It can be appreciated by someone of ordinary skill in the art that if one of the multiplicands used by multiplier is 0 the output is zero and hence the value added by adder will also be zero. Therefore only one of the rank class computations per row needs to be performed the one occuring in the column whose class is equal to class for the row. All other rank class computations can be skipped. This approach uses only K rank class computations rather than KC rank class computations in the other approaches where K are the number of outputs of the distance computation component and C is the number of classes.

It can also be appreciated that the rows of are not distinguished the same computation occurs on every row. Therefore for such approach the output of the distance computation component need not be ranked.

As in the rank class update only needs to be performed if the class is the same as the class label for the column. The other rank class updates for that row can be skipped because the result of multiplier will always be zero. Therefore only one rank class update needs to be performed per row.

The three approaches described above and illustrated in can be further illustrated with the following exemplary mathematical description s . It is to be appreciated that the invention is not limited to such mathematical description s and discussion with respect thereto is merely being provided to facilitate understanding of the invention in accordance with specific implementations. The first approach described by is further illustrated via the first model and the second model. The second approach described by is further illustrated via the fourth model. Finally the third approach described by is further illustrated via the third model. The foregoing discussion with respect to as well as the following discussion is for illustrative purposes and is not intended to limit the present invention. It is appreciated that variations of the below models can be employed in accordance with the present invention.

The first model that can be utilized with the trained probability transducer as the parametric model is a sparse rank ordering model. This model enforces sparseness by construction as follows. For a kernel K x x this model depends on the rank ordering of the nearest neighbors and on the class labels of those nearest neighbors 

where the parameters wand vare weights that are learned by training and where I x denotes the index set of the N nearest neighbors to the point x and where the subscript rdenotes the rank of xin the list of the Nnearest neighbors. This model has only N free parameters further discussed below thus the additional computation beyond that required to find Iis minimal. The regularization function g is set to zero Eq. 4 since the number of parameters is small. F is then bounded above by zero and at zero corresponds to the probability one being assigned to the correct class for every training pattern. By assigning a target probability of one for the correct class and zero for other classes the update rule for the ith pattern is 6 

Note that if Eq. 6 starts with w 0 j then walways so the model has just N parameters to learn corresponding to the weight parameters in and Eq. 6 becomes 

A second model that can be employed with the trained probability transducer as the parametric model is an adding class dependence model. The first model described supra fails to parameterize per class dependence z x c gets positive or negative contributions according to whether the class of the training point under consideration is the same or not as c. However such per class information could be useful for example to model easily confused classes. Thus C parameters bare added to the model corresponding to the partial sum initialization parameters in 

The update rules for the second model are as they are for the first model but with the addition of b P c x where the update to the parameters bare given their own step size to allow for the fact that the number of contributions to an update of the bparameters is different than the number of contributions to an update of the w parameters at a given iteration of the training process. As with the first model w giving 

A third model that can be utilized with the trained probability transducer as the parametric model is a per point class model. Here the equation employed is 

For this model one parameter is utilized per training point which corresponds to an entry in lookup table of . The idea is to use the weights to model the value of each training point in predicting its own class. However it is appreciated that rank information is not required with the third model. The indicator function is defined as x to be a 1 if x X x where X x denotes the set of N points closest to x 0 otherwise and the training update rules become w x K x x 2 P x and b P c x . Note that the band ware again given different learning rates. Since after one training epoch the mean number of wupdates per wparameter is N and the mean number of bupdates per bparameter is m and assuming that F wand F bare of roughly the same size requiring that the mean size of the updates also be roughly the same yields N m . This is necessary to ensure that choice of a suitable learning rate for the wresults in a suitable learning rate also for the b.

Although the number of parameters for the third model is large in an evaluation phase only O N C operations are needed. The small number of parameters used to classify a given point permits not using a regularization term for the third model.

A fourth model that can be employed with the trained probability transducer is a combined Rank Class Class model RCC model . If the wis permitted to vary based on class as well as rank then a class dependent rank ordering can be learned. For example suppose that N 3 and that a given test point has nearest neighbors of class 1 1 3 rank ordered . If for handwriting analysis it is allowed that the probability that the test point is a 1 is different than if the nearest neighbors were 1 1 7 since 7 s are more often confused with 1s than 3s are then the proposed model is able to parameterize this information. Therefore CN parameters ware introduced which correspond to the N different lookup tables each containing Centries. The second subscript c in w indexes the hypothesized target class the third subscript is the class of the jth nearest neighbor. Since the number of parameters can become unwieldy for a large number of classes a regularization scheme is required to enforce sparcity. Two illustrative examples of such a scheme are to add the L1 norm of the weights to the loss function F so that g w and a batch version where after training epoch a fraction e.g. 90 of the weights with the smallest values are set to zero. A justification for the latter is that it is closer to estimating the gradient in batch mode and provides better accuracy on a validation set. Thus for this model 

The update rules for the fourth model are for the ith pattern 2 1 1 for c and 2 1 1 for c . The update rule for the priors bis as before. The learning rate for the bis chose to be 1 C times that for the w for the same reasons described for the previous three models.

It is appreciated that other implementations and or suitable trained parametric models in addition to or instead of the four described above can be employed for the trained probability transducer and still be in accordance with the present invention. Further it also appreciated that some parametric models do not require ranking and thus the distance computation component can be configured so as to not provide ranking information in order to increase computational efficiency.

In view of the foregoing structural and functional features described above methodologies in accordance with various aspects of the present invention will be better appreciated with reference to . While for purposes of simplicity of explanation the methodologies of is depicted and described as executing serially it is to be understood and appreciated that the present invention is not limited by the illustrated order as some aspects could in accordance with the present invention occur in different orders and or concurrently with other aspects from that depicted and described herein. Moreover not all illustrated features may be required to implement a methodology in accordance with an aspect the present invention.

The method begins at where data point s are received. The data point s comprise information such as but not limited to image data measurements audio data database information and the like. The data point s are then processed individually to obtain a vector of ranked outputs at also referred to as classifier outputs. A given output respectively comprises a class label an index identifying a particular element in the database used to train the classifier a distance measure and a ranking for K nearest neighbors. Generally a KNN classifier is employed to generate the ranked outputs. The vector of ranked outputs does not include probabilistic information.

Subsequent to obtaining a vector of ranked outputs for respective data point s mapping or converting the outputs into probabilistic outputs e.g. posterior probabilities at via a suitable mapping mechanism e.g. a trained parametric model . A suitable mechanism can be one of the models described with respect to . Then the posterior probabilities are employed to perform an application such as handwriting analysis at .

It is appreciated that sufficient training should be performed prior to utilizing the method for a pattern recognition application.

The method begins at block where a data set is split or segmented into a first training subset and a second training subset. The second training subset and the first training subset are disjoint. The data set comprises examples and each example comprises an input data point and a class label. The split between the first and the second training subsets can be performed via a stochastic process. For example 70 of the data set can be assigned at random to the first training subset while the remaining 30 can be assigned to the second training set. At block the non probabilistic classifier is trained using the first training set via a suitable training algorithm for non probabilistic classifiers. For example the training of a KNN classifier can be accomplished by loading the training set into a database of stored examples. Alternatively other known methods such as reduced nearest neighbor can be employed wherein a subset of the training set can be selected for storage.

Continuing with block an example from the second training set is selected. Such selection can be accomplished by drawing an example at random or by sequentially sweeping through a random permutation of the second training set. Alternatively more sophisticated algorithms such a leave one out can be used in conjunction with block . Block then applies the example selected at block to the non probabilistic classifier. The output of the non probabilistic classifier is then processed by the probability transducer to yield an output at block . Depending on the implementation block will execute the approaches described with respect to and or a similar method. Block then updates the parameters of the parametric model by comparing the output at block with the true class label of the example chosen at block . Block uses an update rule such as described with respect to and or suitable variations thereof that is appropriate for the chosen implementation of the probability transducer. Alternatively block can use a similar process to the update rule to compute the gradient of an error metric with respect to the parameters and then periodically update the parameters based on the gradient or other information e.g. such as the Hessian of the error metric .

Block then determines whether the training of the probability transducer is complete. The training may be complete when a pre determined number of examples have been applied to the probability transducer or when the rate of decrease of the error metric has reduced below a pre determined threshold.

According to an alternate aspect of method the original data set at block is split into three subsets a first training set a second training set and a validation set. After a pre determined number of applications of examples to the probability transducer all of the examples in the validation set may be applied to the system and the error metric can be used to measure the error on the validation set. If the error on the validation set has reached a minimum the training may be stopped and the parameters of the parametric model that yielded the minimum error can be saved and used to evaluate new test points.

If the method determines that training is not finished at block then control flows back to block where another example is selected from the second training subset. Otherwise training of the parametric model is complete and the probability transducer can be utilized e.g. in a pattern recognition system and or a method that facilitates generating posterior probabilities e.g. method of .

With reference to an exemplary environment for implementing various aspects of the invention includes a computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The processing unit may be any of various commercially available processors. Dual microprocessors and other multi processor architectures also can be used as the processing unit .

The system bus may be any of several types of bus structure including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The computer memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during start up is stored in ROM .

The computer may further include a hard disk drive a magnetic disk drive e.g. to read from or write to a removable disk and an optical disk drive e.g. for reading a CD ROM disk or to read from or write to other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The computer typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by the computer . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

A number of program modules may be stored in the drives and RAM including an operating system one or more application programs other program modules and program non interrupt data . The operating system in the computer can be any of a number of commercially available operating systems.

A user may enter commands and information into the computer through a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a satellite dish a scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port a game port a universal serial bus USB an IR interface etc. A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical and or physical connections to one or more remote computers such as a remote computer s . The remote computer s may be a workstation a server computer a router a personal computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or is connected to a communications server on the LAN or has other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It is to be appreciated that for purposes of the present invention any or all of the functionality associated with modules systems and or components discussed herein can be achieved in any of a variety of ways e.g. combination or individual implementations of active server pages ASPs common gateway interfaces CGIs application programming interfaces API s structured query language SQL component object model COM distributed COM DCOM system object model SOM distributed SOM DSOM ActiveX common object request broker architecture CORBA database management systems DBMSs relational database management systems RDBMSs object oriented database management system ODBMSs object relational database management systems ORDBMS remote method invocation RMI C C practical extraction and reporting language PERL applets HTML dynamic HTML server side includes SSIs extensible markup language XML portable document format PDF wireless markup language WML standard generalized markup language SGML handheld device markup language HDML graphics interchange format GIF joint photographic experts group JPEG binary large object BLOB other script or executable components .

What has been described above includes examples of the present invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly the present invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

