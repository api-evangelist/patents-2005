---

title: Distributed document version control
abstract: Systems and techniques to provide distributed document version control. In general, in one implementation, the technique includes: receiving information, in a distributed document control system, specifying a locally saved copy of a first electronic document; determining, in response to the received information, whether the first electronic document should supersede a second electronic document in the distributed document control system; and storing, based on an outcome of the determining, information in the distributed document control system that links the first electronic document with the second electronic document in a superior-subordinate relationship such that when an action is requested with respect to the second, subordinate electronic document, the distributed document control system forces an action to be taken with respect to the first, superior electronic document. Various implementations include those in computer program products and client-server systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832047&OS=08832047&RS=08832047
owner: Adobe Systems Incorporated
number: 08832047
owner_city: San Jose
owner_country: US
publication_date: 20050727
---
This application is related to U.S. patent application Ser. No. 10 699 520 entitled DISTRIBUTED DOCUMENT VERSION CONTROL to inventors Jonathan D. Herbach James Donahue and William M. Shapiro which was filed on Oct. 31 2003. The disclosure of the above application is incorporated herein by reference in its entirety.

The present application describes systems and techniques relating to document control for example distributed document version control.

Traditional document control systems have included servers that store and manage encryption keys for documents secured by the system providing persistent protection for documents by requiring the server to be contacted before a secured document can be opened. Such systems have also provided offline capabilities by caching a cryptographic document key on a client to allow the client to open a document for a limited time when the user is offline provided the document is first opened while online. Such systems have also been able to log document access information including caching of log information while offline for use in auditing document access.

Conventional document management systems have included document permissions information associated with documents that allow different groups of individuals to have different permissions and conventional document viewing software applications have also included software plug ins designed to translate document permissions information from a document management system format to a format used by the software application i.e. a separate software plug in required for each integration with a document management system. Moreover the eXtensible Rights Markup Language XrML is being defined to theoretically allow a document viewing application to understand resources and permissions from any system that complies with the XrML rules.

Many different encryption schemes have been used to secure documents. These have included symmetric encryption on a per document basis requiring individuals to remember passwords for individual documents and combined asymmetric symmetric encryption schemes e.g. Pretty Good Privacy PGP encryption that provide the ability to decrypt multiple documents based on the user s single password. In the network multicast broadcast context various encryption protocols have also been used that cache encryption keys on clients. Many software products directly integrate with existing enterprise authentication systems e.g. Lightweight Directory Access Protocol . Moreover various systems have also provided functionality to allow users to find the most recent version of a distributed document such as the Tumbleweed Messaging Management System which secures e mail systems and can send a recipient of an email with an attached document an email notification when the original version of the attached document is updated where the email notification has a URL Universal Resource Locator link back to the current document.

In general in one aspect the invention features operations including receiving information in a distributed document control system specifying a locally saved copy of a first electronic document determining in response to the received information whether the first electronic document should supersede a second electronic document in the distributed document control system and storing based on an outcome of the determining information in the distributed document control system that links the first electronic document with the second electronic document in a superior subordinate relationship such that when an action is requested with respect to the second subordinate electronic document the distributed document control system forces an action to be taken with respect to the first superior electronic document. As used herein the terms first and second used in connection with documents do not indicate a time of document generation in a system but rather a time of document introduction in this description. Thus the first document can be a document distributed at a time later than the creation of the second document.

The first electronic document can be a document secured previously by a permissions broker server the receiving can involve receiving information at the permissions broker broker server and the determining can involve checking at the permissions broker server for previously stored notification of edits performed on the first electronic document. The operations can also include receiving from a client at the permissions broker server a request to open the second electronic document identifying in response to the request at the permissions broker server the information that links the first electronic document with the second electronic document in the superior subordinate relationship and imparting information to the client concerning the first electronic document wherein the client prevents opening of the second electronic document and redirects a user to the first electronic document in response to the imparted information. The client can redirect the user to the first electronic document by identifying a source from which the first electronic document can be obtained or by other techniques.

The locally saved copy can be saved by a client in a location that is inaccessible by the distributed document control system absent the client e.g. a local hard disk . The operations can also include storing a duplicate copy of the first electronic document based on the outcome of the determining in a repository of the distributed document control system receiving a request to open the second electronic document identifying in response to the request the information that links the first electronic document with the second electronic document in the superior subordinate relationship and causing the duplicate copy of the first electronic document to be obtained and opened in place of the second electronic document.

Receiving the information specifying the locally saved copy of the first electronic document can involve receiving at a permission broker server a request to secure the first electronic document with an anonymous user. The determining can involve searching a data repository for document metadata matching that of the first electronic document. The matching document metadata can include a filename and a securing user.

The determining can involve comparing document contents of the first electronic document and the second electronic document. Comparing document contents can involve comparing digital signatures embedded in the first and second electronic documents. The determining can involve prompting a user regarding whether the first electronic document should supersede the second electronic document in the distributed document control system in response to the first electronic document being saved. Moreover the determining can involve requesting permission from an author of the second electronic document regarding whether the first electronic document should supersede the second electronic document in the distributed document control system in response to the first electronic document being saved.

The systems and techniques described can be implemented in one or more computer program products tangibly embodied in an information carrier operable to cause one or more data processing apparatus to perform the operations described. Such operations can include receiving information specifying a locally saved copy of a first electronic document comparing data of the first electronic document with data of a second electronic document to determine whether the first electronic document should supersede the second electronic document in a distributed document control system and based on an outcome of the comparing storing information in the distributed document control system that links the first electronic document with the second electronic document in a superior subordinate relationship such that when an action is requested with respect to the second subordinate electronic document the distributed document control system forces an action to be taken with respect to the first superior electronic document.

Comparing data can involve comparing cryptographic checksums of the first and second electronic documents. Comparing cryptographic checksums can involve comparing digital signatures embedded in the first and second electronic documents. Moreover the operations can include based on the outcome of the comparing storing a duplicate copy of the first electronic document in a repository of the distributed document control system.

According to another aspect of the invention a system can include a client operable to send a server notification regarding a locally saved copy of a first electronic document and a server operable to receive the notification and in response to the notification the server being operable to determine whether the first electronic document should supersede a second electronic document and store information that links the first electronic document with the second electronic document in a relationship such that when a client attempts to open the second electronic document the server imparts information concerning the first electronic document to force opening of the first electronic document in place of the second electronic document.

The system can further include a document repository operable to store a duplicate copy of the first electronic document in response to a request from the client. The server can be operable to determine whether the first electronic document should supersede the second electronic document by comparing document metadata including filename securing user and timestamp information. The server can be operable to determine whether the first electronic document should supersede the second electronic document by comparing cryptographic checksums of the first and second electronic documents which can involve comparing digital signatures embedded in the first and second electronic documents.

The invention can be implemented to realize one or more of the following advantages. A document control system can be easily and tightly integrated with existing enterprise infrastructure such as document management systems storage systems and authentication and access control mechanisms. Users of the document control system can be enabled to perform authorized actions with minimal annoyance including through the use of an anonymous guest user authorization technique. Client installations can be minimized and server initiated transparent client customization can be performed thereby easing the process of deploying an enterprise solution. Moreover the document control system can be deployed on multiple platforms and not be intimately tied to a particular platform.

A document information delivery technique can be provided that automatically sends information concerning different versions of a document to be accessed. A document can be tethered to a document control system and when a local copy of the document is opened the system can be contacted and relate information concerning a different document that should be accessed instead. This different document can represent a later version of the document and viewing of the different document can be suggested to or forced on the user or both can be possible dependent upon the document. The version information for documents secured by the system can thus follow the documents even as they are distributed widely from an original document source and in some circumstances the end use need not know or understand that a different document has been swapped in for the document initially requested.

A distributed document control system can actively determine when to use persistent versioning with a given document. The final decision regarding whether to revoke a document in favor of a new one can be made automatically by the system or by a user s or author s individual decision such as after a prompt by the system. The distributed document control system can suggest the use of persistent versioning if a user modifies a document e.g. adds comments and other users with local copies of the originally distributed document can thus readily learn that they do not have the latest version of the document as soon as they try to open the copy they have.

The client e.g. the document viewing application need not subscribe to a common workspace or file sharing network because the client can contact a server for a tethered document and assess the need for persistent versioning at the same time a document is being saved locally. For example when a recipient of a secured document saves the document under a new filename e.g. saves a copy of an email attachment the client can automatically trigger the persistent versioning techniques described herein which can improve document control in a distributed network environment without requiring extra efforts on the user s part above and beyond the standard action of saving a document to local disk.

Various improvements in identifying linkages between documents and maintaining control over enterprise documents can be realized. Comparisons of document contents e.g. comparing embedded digital signatures can identify connections between documents which can then be maintained in a document control system. Moreover the systems and techniques described can be advantageously integrated with traditional Content Management systems to further improve the efficiency and control of document versioning in the course of enterprise management.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features and advantages of the invention will become apparent from the description the drawings and the claims.

The systems and techniques described can be used to realize a document control system such as may be used by an enterprise in connection with document management. The document control system can operate as a stand alone system or as a component of another system. The document control system can provide persistent document security by controlling who can view documents and what can be done with them regardless of where the document resides. As used herein the terms document and electronic document mean a set of electronic data including both electronic data stored in a file and electronic data received over a network which can be represented as a single document icon in a graphical user interface of an operating system OS or software application. An electronic document does not necessarily correspond to a file. A document may be stored in a portion of a file that holds other documents in a single file dedicated to the document in question or in a set of coordinated files. Additionally as used herein the term periodically means recurring from time to time and does not require regular intervals.

The systems and techniques described can be used with many different types of documents including for example PORTABLE DOCUMENT FORMAT PDF documents. PDF documents are in a format originated by Adobe Systems Incorporated of San Jose Calif. A PDF document is an example of an electronic document in a platform independent document format that can define an appearance of the electronic document. This document format can be a platform independent storage format capable of storing many different types of data including graphics animation and sound and the defined appearance can be defined for multiple types of display devices providing a document originator with control over the look and feel of the document regardless of the final destination device. Using documents in this type of format with the techniques described can result in additional advantages for the resulting systems. For example the document control system can have an architecture that is not tied to a particular software development platform e.g. the system can be designed to run on both Java and NET and can use platform independent documents such as PDF documents. Thus the document control system can readily function across several platforms.

Various details of a distributed document control system are now described in connection with . Certain portions of this detailed description are similar to the details described in U.S. patent application Ser. No. 10 699 520 entitled DISTRIBUTED DOCUMENT VERSION CONTROL to inventors Jonathan D. Herbach James Donahue and William M. Shapiro which was filed on Oct. 31 2003. As will be appreciated embodiments of the present invention can be realized using the various example implementations described below or using different implementations.

The enterprise system s can be a storage system an authentication system a communication system and or a document management system. The server s can be designed to tightly integrate with existing enterprise system s and leverage existing enterprise infrastructure. For example the server s can provide rich support for user and group information in enterprises where such information may come from multiple sources as is common in large companies that have been involved in recent mergers. The server s can provide document security while being minimally obtrusive making the system easier to use and thus easier to deploy effectively. For example the server s can implement a document control system that provides a sophisticated offline access mechanism as described further below that allows users to view documents while offline even if they have not previously viewed the document while online. Thus the document control system can maintain a low profile during normal operation making the presence of document security less visible and thus more usable.

The configuration component can define an interface to a configuration object and the logging component can define an interface to a logging object used by the server to log a wide variety of information. The configuration object can be a server configuration file e.g. a .ini file read by the server and the logging object can be a log file e.g. a text file . Alternatively the configuration object and the logging object can be local or remote objects defined using a standardized interface e.g. the java standards JMX java management extension and log4j respectively . An example standardized interface that can be used is the Java Preferences API Application Programming Interface .

The RPC interface provided by the server core can be used to present a method interface to the clients a client can RPC each named method and provide an appropriate set of arguments. The server can initialize itself by reading a set of method classes that export the server method interface and define the methods that the server will make available to clients. The internal services can be internal components of the server that are used across all of the methods . These can be statically defined and or dynamically loaded as dependencies of methods. The internal services can include cryptography components document securer processes and an access control evaluation and creation infrastructure.

The methods that the server exports to clients may depend on additional services with implementations that are dependent on a backend infrastructure of an enterprise system environment. The external service providers can define a set of service provider interfaces that specify the connection s between the methods and their execution environment. Upon initialization the server can load and initialize the set of service providers that are needed for this environment. The external service providers can include default implementations and can be added to over time with additional implementations tailored to different backend infrastructures using the included service provider interfaces.

Example service providers are discussed below but additional or alternative service providers are also possible. The definitions of the service providers are given in terms of interfaces that the service providers implement. These interfaces can be defined generically so that they can be implemented across a wide variety of systems. Thus information that crosses system boundaries can be defined in simple terms to provide greater flexibility in implementation on various systems.

An authentication service provider can be used to authenticate a user. In the context of computer security authentication is the procedure by which a programmable machine confirms the identity of another machine and or the other machine s current user from which a communication has been received. There are many types of systems in which authentication can be used and there are many types of events that can trigger an authentication process depending on the needs of a particular implementation. The authentication systems and techniques described herein can be used in a document control system as described or in other systems.

Additionally the request can represent multiple communications between the client and the server . The client can first communicate to the server that the action has been requested and the client requests to know whether authentication is to be performed and if so how authentication is to be performed. The information identifying the server and the document can be included in the document itself and the server can determine whether user authentication is needed based on the information identifying the document and the nature of the requested action. The server can respond as to whether authentication is needed and if so the type of authentication to be used including potentially multiple types of acceptable authentication mechanisms from which the client can choose which one to use. If the client does not already have the specified authentication functionality the client can then request a corresponding authentication update.

The server can be a dedicated authentication broker server or the server can provide other resources as well. For example the server can be a document control server as described herein and various client initiated operations e.g. document viewing revoking and securing can effectively also be server based operations in that completion of these operations may require contacting the server such server based operations initiated by a client can also trigger authentication using a dynamically delivered authentication process.

The server can respond to the request by obtaining an authentication process and sending the authentication process to the client . The authentication process can be stored by the server or by another server e.g. a server in an enterprise system . Thus authentication components can reside at the client on the server and optionally on a separate authentication server. Authentication can be handled via a service provider interface that allows the server to be configured to use an existing enterprise authentication mechanism e.g. password based authentication or even to implement a custom authentication mechanism that may be developed later e.g. a biometric authentication or a new smart card system . The authentication service provider interface can define the methods that the server uses to authenticate a user and authentication service providers can be implemented for Windows and LDAP Lightweight Directory Access Protocol authentication and also for one or more document management systems such as authentication using the Documentum Login Manager in the Documentum content management system provided by Documentum Inc. of Pleasanton Calif.

The authentication process represents a software program having instructions operable to cause a machine to perform operations effecting an authentication procedure. The authentication process can become a component of the client upon receipt or stand alone and communicate with the client . The authentication process can be a plug in to a document viewing application such as the ADOBE ACROBAT software provided by Adobe Systems Incorporated of San Jose Calif. The authentication process can use an existing interface provided by the client to communicate authentication information to the server e.g. the document viewing application can include a security handler component that communicates with the authentication process such as described further below . The authentication process can be a client authentication library e.g. a dynamic link library DLL or a server service provider.

Thus the client can be transparently updated with a new authentication process as a result of sending the request to the server . The specific mechanism s of authentication is therefore configurable and end to end delivery of authentication components can be performed without the user being aware of the update. If an administrator changes the authentication procedure to be used for a document all clients that attempt to perform an action that requires the specified authentication with respect to that document can be automatically and transparently updated to be able to authenticate using the newly specified mechanism. An authentication procedure can even be changed between sequential actions on a document and thus a new request can result in a new authentication process being delivered for the same action to be performed on an already delivered document.

The authentication process can implement an authentication procedure at the location of the client interfacing and controlling any local hardware as needed e.g. a biometric authentication procedure using biometric reading device and the authentication process can use an interface provided by the client to communicate authentication information back to the server . The authentication process can implement a wide variety of different authentication procedures including multi level and or multi factor authentications depending on the action being attempted. Because the authentication process can be dynamically delivered in response to each request an organization can readily change authentication procedures adding new security features to a document control system as needed.

The authentication process can query a user at the client for input e.g. text biometric data etc. encode the received input and return the encoded input to an authentication provider on the server e.g. send the encoded input to the security handler in the client which forwards the information to the server . The server can then handle authentication either directly on in conjunction with an authentication server . In this pass through authentication mechanism the client can provide credentials to the server and the server can work with a third party authentication system such as LDAP or RADIUS to authenticate the user. If authentication is successful the authentication service provider can return an authenticated username.

Additionally the server need not be able to directly interpret client authentication information. Instead of the client giving credentials directly to the server the client can first authenticate and then provide some resulting information to the server to allow the server to re verify that the client previously authenticated. For example the authentication process can contact the authentication server to authenticate the user directly and a receipt of authentication can be returned to the server . The server can pass the receipt to the authentication server and verify that there was in fact a successful authentication. Thus the client can provide credentials to a separate authentication system directly and then provide an authenticated token to the server which can be used to verify the user s identity with the separate authentication system.

The server can use multiple authentication service providers. The server can dynamically deliver one or more authentication processes to the client as needed using the interface described below. Such authentication process es can be delivered securely to the client and spoofing can be prevented such as described below in connection with secure code library loading. The client can also have one or more default authentication processes already available such as an authentication library that can capture username password text entry. Such default authentication process es can include support for user interface UI customization and a standard format for extracting this information within authentication service providers. Moreover the client can retain credentials for a period of time so that a user need not logon each time they perform an operation. An example of such retaining of client credentials to support offline access is described further below in connection with .

Secure code library loading can be implemented to all the server s to push one or more authentication libraries e.g. DLLs java bytecode javascript etc. to clients to provide updates or customize clients without requiring any action or knowledge on the part of the user while also preventing these authentication libraries from being spoofed on the client e.g. by a Trojan horse program . A mechanism can be provided to verify the authenticity of the authentication libraries downloaded from the server . When the server pushes an authentication library to the client the server can compute a hash of the library and also send this hash to the client and or the server can sign the authentication library before sending it to the client. The hash can be retained locally at the client and the client can ensure the authentication library is valid by computing a hash of the authentication library and verifying it against the retained value at load time. Additionally a selected set of libraries can be signed by the provider or all the libraries can be signed by the provider and the provider s public key can be retained at the client e.g. a DLL can be signed by Adobe when the client is the ADOBE ACROBAT software with the Adobe public key included .

An authentication interface can provide either a text based username password description or a single authentication library. This can be implemented using two types of methods for authentication. The first method can take an opaque token e.g. an uninterpreted byte string as well as a username although the implementation can choose to ignore either. The second method can take a username password and optionally a third argument which can specify the domain or a connect string if desired. The authentication provider can implement its own defense against brute force attacks and can have the option to deny authentication even if the correct credentials are presented.

Implementations can also return an authentication reply that specifies whether the user successfully authenticated verified . If verified is false an additional error message indicating why it was not verified e.g. no such user can be returned this error message need not be returned to the client but can just be logged on the server so as not to provide the client with helpful information that could be used to crack the authentication system . A token to be used in future authentication attempts can also be returned although the server can ignore this. The username should also be returned for verified attempts such that the server can understand who has authenticated. The access control list ACL service provider should be able to take this username and canonicalize it. The canonical form of the username can be consistently used across workflows and the definition s governing canonical form s in the system can vary with implementation.

Because the client can authenticate via multiple methods the server should be able to describe how the client should attempt to authenticate by default or if authentication failed what method to attempt next. The authentication service provider can describe how authentication should occur e.g. via a specific code library or via a basic text entry dialog being displayed to the user. If a code library is to be used the server can communicate metadata about the code library to the client e.g. a DLL s name size etc. . If a basic text entry dialog is used the server can specify what the UI should look like to the user e.g. the title should say Please enter your company LDAP password and that only two fields username and password are required.

In addition to the authentication systems and techniques described document control systems and techniques can be provided. These can be combined with the described authentication or used separately.

When the document source is of the first type document permissions information can be retained at the document source and sent to the permissions broker server when needed. Thus the document permissions information need not be retained at the permissions broker server although such information can be retained at the server in a permissions definition format specified for the server . When the document source is of the second type the document permissions information can be generated at the document source at the permissions broker server or at the client when the document is secured to create a secured document and the document permissions information can be retained at the permissions broker server . The document permissions information can be an ACL that defines the types of actions that are authorized for the document . Moreover document permissions information can specify access permissions at a level of granularity smaller than the document itself e.g. controlling access to specific page s paragraph s and or word s in the document .

The secured document can be encrypted using an encryption key generated by the permissions broker server and the secured document can include information identifying the server and the document e.g. a link to the server and a document identifier that is unique within the context of the server . The secured document can be delivered to the client in any manner e.g. email download from a document repository received on a compact disc etc. and the secured document can be a copy of another secured document e.g. an attachment to an email forwarded from another source .

When the client needs to take an action with respect to the secured document the client can determine that the document is secured extract the information identifying the server and the document and send a request to the server corresponding to the action and including the document identifying information. In response to this request the permissions broker server can translate the document permissions information into second document permissions information . The second document permissions information can be sent to the client to govern the action with respect to the document at the client . The client can be a document viewing application such as the ADOBE ACROBAT software provided by Adobe Systems Incorporated of San Jose Calif. and the document can be a PDF document.

Referring again to the first document permissions information can be in a first permissions definition format that includes at least one type of permission information that cannot be fully defined in the second permissions definition format used in the second document permissions information and translating between the two sets of information can involve translating based upon additional information associated with the request . For example the first information can include time dependent permission information that cannot be fully defined in the second information because the permissions definition format includes no notion of time. But this time dependent permission information can be defined in the second document permissions information for the limited purposes of the current request by taking the time of the request into consideration. If the first document permissions information in conjunction with the time of the request indicates that the requested action is authorized then this can be represented in the second document permissions information and likewise if the first document permissions information in conjunction with the time of the request indicates that the requested action is not authorized then this can be represented in the second document permissions information . When a subsequent action is requested the translation can be performed again based on the time of the subsequent request.

As another example the first information can include user dependent permissions information that cannot be fully defined in the second document permissions information because the permissions definition format includes no notion of users. This user dependent permissions information can include both user and group based document control information and can be defined in the second document permissions information for the limited purposes of the current request by taking into consideration user identification information obtained via the client . This user identification information can be obtained using the authentication systems and techniques described elsewhere herein. When a subsequent action is requested the translation can be performed again based on newly obtained user identification information. Moreover the multiple requests received by the permissions broker server can cause the server to store information relating to the actions taken at the client with respect to the document . These actions can be associated with the username and also with a network address e.g. an Internet Protocol IP address associated with the client both as reported by the client and as reported by the server . Requested actions can also be considered actions taken and the stored information can be used by the server to generate an audit of stored actions taken information associated with the document as described further below. The stored information can also include actions performed and or requested at either the server or the document source e.g. actions performed at the file system document management system etc. and a generated audit can include this information as well.

The server can communicate with the repository using the document identifier to obtain document permissions information e.g. an ACL from a CMS or file permissions information from a file system . The document permissions information can be specific to the document or can define permissions for multiple documents e.g. a policy maintained by a document management system or a set of file permissions maintained by a file system . The obtained document permissions information can be used by the server to generate an initial ACL for the document . A set of data that can include the initial ACL the document identifier and a key generated by the server can be sent back to the securing client . The client can use the set of data to create a secured document which is an encrypted version of the document . This secured document can include the initial ACL the document identifier and the key packaged as part of the document .

When a client attempts an action with respect to the secured document e.g. attempts to open the document or any copies of this document the document identifier can be retrieved from the document sent to the server and used to obtain the current ACL for the document where the current ACL reflects the current state of the document in the repository . Thus actions taken with respect to the secured document can be controlled based on document permissions information defining current permissions for a source document in the document repository . The source document can be the originally secured document or in the case where secured documents are not sent back to the repository the source document can be the original document . The server need not store document permissions information as this information can be retrieved from the repository and translated whenever access to the document is requested although the server may store the document permissions information for other purposes.

When a client attempts an action with respect to the secured document e.g. attempts to open the document or any copies of this document the document identifier can be retrieved from the document sent to the server and used to obtain the current ACL for the document where the current ACL reflects the current state of the document ACL stored in the server . The sender of the email can interact with the server to change the current ACL for the document even after the email has been sent. Thus actions taken with respect to a secured document can be controlled and nature of the security on the document can be modified even after the secured document has been distributed.

An authentication service provider can be implemented as described elsewhere herein and an access control service provider can effect the access control infrastructure described. ACLs can include a set of Access Control Entries ACEs and a set of properties. ACL properties can apply to the ACL as a whole e.g. expiration date . An ACE can map principals to rules and can include a list of principals a rule and a validity period for the ACE. When an ACL is evaluated only ACEs that are within their validity period need be considered. Validity periods can allow different users and groups to be granted permission to view a document at different times. For example an ACE can specify that only members of the public relations staff may view a document before its release date after which anyone can view the document. 

Rules can include of a set of properties and granted and denied permissions. These permissions can be specific to a viewing client application e.g. the ADOBE ACROBAT software and or server defined. Additionally permissions like properties can be extensible so new ones can be added without changing the ACL format.

The server can have its own simple mechanism that allows users to specify Access Control Lists using a Securing Client interface without the use of any external ACL mechanism. Additionally third party ACL rights specifications can be translated to the internal ACL format used by the server . The server can integrate with other systems access control facilities e.g. Document Management Systems Database Systems File Systems etc leveraging the functionality in these systems.

The server can support integrating with diverse user and group repositories that may contain incomplete information and the server can be enabled to efficiently access this information in a canonical user centric manner. Facilities for manipulating ACLs on both the server and a client can be provided. The server can verify ACLs to ensure they are valid before a document is secured either using a server based document securer or a client based document securer . ACLs can be extensible and can allow opaque third party permissions. Moreover securing of documents can be done in an online fashion connected to the server because the server can verify ACLs.

The server can associate ACLs with documents in order to specify which principals e.g. users and groups have which permissions for a document. A principal can have multiple names however a principal should also have a distinguished canonical name. One of the tasks of the server can be translating the various names of a principal into its canonical name. While both permissions and properties can describe authorized operations permissions can be Boolean valued and properties can be of a variety of types. Permissions can be granted if explicitly granted and not explicitly denied undeclared permissions can be implicitly denied.

Each document can be associated with a single ACL. Typically this relationship can be 1 1 but in the case of policies this relationship can be N 1 where multiple documents share the same ACL. The electronic document file can contain an immutable snapshot of the ACL dating to the time of securing. The server can also maintain a copy of the latest ACL which can be modified by authorized individuals. The server can canonicalize ACLs e.g. translate all principal names to their canonical forms before they are used. This can be done whenever ACLs are created or modified e.g. at the time of securing or when ACL definitions are changed . Once ACLs are in canonical form it can be much simpler to evaluate ACLs on both the clients and the server since determining membership within groups as well as determining relevant authorizations for specific authenticated users can be done via basic string matching.

The server side evaluation of ACLs for a specific user at a specific point in time e.g. for online viewing revocation document audit retrieval etc. can be implemented within the server directly. The server can examine the ACL looking for ACEs that are currently valid and that also contain either the authenticated user or a group in which s he is a member and then extract the permissions and properties. The server infrastructure to handle canonicalization within the server can have three tiers. A first tier can be an in memory cache in the server that maps non canonical principals into their canonical forms. A secondary persistent cache can store canonical mappings and user in group information this cache can potentially be used across multiple servers . The third tier can be the access control service provider .

The access control service provider can include a set of principal modules that provide the canonical form of some set of non canonical strings. These principal modules can also specify whether the canonical form corresponds to a canonical group or a canonical user. However the architecture need not assume that a specific principal module will generally know all answers or be able to give a complete answer about a specific non canonical string. To support multiple domains of expertise within the context of user and group repositories each principal module can publish the domain s over which it is the authority. The process of canonicalization which can be implemented within the server directly can take a non canonical form and iteratively refine it by querying modules with authority until one declares the returned value as canonical. Alternatively canonicalization can be done in one step.

Methods in the server can be authenticated user centric because a typical scenario involves the server determining whether a specific user has permission to perform an operation taking into account what groups s he might be in. Many third party group mechanisms organize group membership accessible by who are members of a group but not which groups contain a specific user Moreover in many cases groups may contain non canonical forms of users. Thus the output of group repositories may not be directly usable by the server and a translation intermediary can be employed.

A very low common denominator can be assumed for group providers. A group provider can be expected to be able to provide a list of known canonical groups. Thus valid groups can be those in the union of known groups specified by group modules. Group modules can also provide membership information organized in a group centric manner which can be an efficient approach given the implementation of many existing repositories.

The server can have the capability to batch preprocess group information for subsequent use within the system. For example one server in a group of servers can run such a batch operation on a daily basis. This can be implemented in the server core and can involve enumerating all groups canonicalizing members examining group nesting and computing the transitive closure. Most of the transitive closure computation can be within a storage provider since it is natural to perform these types of operations using database systems.

A principal can be either a user or a group. Principals can be represented as strings. Groups can contain principals. Principals can have many alias expressions that can be evaluated and reduced to a primary canonical form. Users and groups can be of multiple domains. A convention involving the name sub.domain.com format used in email addresses can be adopted even if the document control system integration is not email based. Moreover the specification of what the canonical form should be can be left undefined in the general system as this specification can be integration dependent. Examples in a particular integration context can be as follows herbach company.com is the canonical form for many strings including jonathan herbach corp.company.com and jherbach company.com likewise atg company.com is the canonical form for atg sea.company.com . Alternatively XML eXtensible Markup Language descriptors along the lines of can be used such as described in the Portable Document Rights Language PDRL Specification published by Adobe Systems Incorporated of San Jose Calif.

An access control service provider interface can include principal providers which can be divided into two subtypes user modules and group modules. The goal of these modules can be to provide canonical information and group membership information. A principal provider can translate a principal to the best of its ability into canonical form. The principal provider can indicate whether the returned value is in canonical form whether it is known to be a group or a user and how long the returned result can be considered valid in a cache. A principal provider can have a domain of authority specified as a set of regular expression definitions and a group provider can enumerate all the groups it knows about in its domain of authority.

To support the various server methods user and group information can be provided logically as there might be multiple sources of such information. Thus there can be several User Modules and several Group Modules. From a high level each one can be configured differently can interface with different backend systems and can be an authority over possibly multiple domains. Moreover defining different modules as domain authorities can assist in providing extranet support.

Configuration of the principal modules can describe the appropriate class file. Each module can also have some module dependent configuration information such as connect strings and preferences as well as infrastructure to configure what the authorities are. Different implementations can also have a rule governing pre processing and post processing to facilitate integration with the rest of the system.

An ACL manager can contain code relevant to loading an arbitrary number of principal providers. is a block diagram illustrating example details of the server from . The server can have a primary in memory cache handled by an ACL manager for group membership or canonical mappings. The user can store within memory the recent canonical mappings such that the service providers need not be called for common requests.

The ACL manager can also include cross method code and an ACL Service Provider Manager can be a transparent interface to storage level e.g. cross server caching. Queries to the ACL Service Provider Manager can first result in checking whether a storage provider has the necessary information and return that. If not the ACL Service Provider Manager can issue queries to user and group modules and attempt to persist as much information to the storage layer as possible. Cache entries can be cleaned as per an expiration associated with the canonical result returned e.g. as specified by either the storage provider or the principal modules .

Referring again to a storage service provider can provide an interface that describes a collection of methods that the server uses to create and retrieve data in persistent storage. This interface can be the largest service provider interface in the system and can grow further as new integrations and features are implemented in a document control system. The storage service provider can provide methods in the following areas 1 Allocation of document tickets each document that is secured on the server can be given a ticket with a GUID global unique identifier 2 Recording document revocation 3 Saving encryption keys for users groups documents and the root server keys 4 Caching user alias and group membership data 5 Auditing user access and securing 6 Management and storage of named ACLs or policies 7 Storage and retrieval of the current ACLs for documents 8 Creation of initial ACLs for documents.

The storage provider interface can be designed to allow multiple implementations across a wide variety of backend systems. This can be done using a generic relational database implementation which can work with both ODBC Open DataBase Connectivity and JDBC Java DataBase Connection . In addition the storage provider interface can be designed to support an implementation for a content management system such as the Documentum system. Ticket generation can be straightforward. For example this can be implemented by having an integer in the database that is incremented on each reservation. Document revocation can be defined as the ability to revoke a document based upon its ticket and to separately query whether the document associated with a given ticket has been revoked. The storage provider can also store and retrieve keys which can be arbitrary byte arrays by name.

The storage provider can also provide storage for user alias and group membership data. Alias and membership information can be used to evaluate access control lists the storage provider can be used as a cache to help ensure reasonable performance even if the access control service provider is not capable of providing efficient access to this information. For example in the limiting case the access control information might come from flat files that provide the required data. When caching user and group alias information the storage provider can perform retrieval queries based upon a principal much like user and group providers. The data returned should be of the same format also providing an indication of the validity. The goal can be such that when the server uses user alias or group membership data the server should not distinguish whether the data provided is real time or a cached version.

For a given user or group the canonical name of the user or group can be obtained. For a user all of the groups to which this user belongs can be obtained. Changes to alias data can be immediately visible. Changes to the group membership cache may be more complicated because of transitive closures computation group memberships of groups that contain groups . Because of this group content changes may not be immediately visible if the server is currently computing the transitive closure of groups.

Document securing operations and document access attempts whether successful or not can be audited through auditing methods of the storage provider . In addition to defining the methods to record securing and access events the interface can also define a couple of query methods on the audit history querying by document ticket and by user. The storage provider can also implement methods that allow ACL creation and modification. These methods can be used to keep auditing history information. Multiple implementations of the storage service provider can be implemented as needed including using a relational database and or using existing document management system notions of audit logs e.g. Documentum audit trail objects .

The storage provider can store and retrieve ACLs by name. An ACL can be a private ACL e.g. for a particular user or a public ACL. Public ACLs represent policies that are intended to be shared across multiple documents secured by various users. The stored representation of an ACL can be a matter of concern only to the storage provider as the provider implementation can be designed to simply take ACLs as arguments and return ACLs as results the ACLs can be described in terms of an AccessControlList interface.

The storage provider can have a set of methods to create update delete and retrieve ACLs. The methods can take arguments describing either a named ACL or a policy e.g. a public ACL . There can also be methods to associate a stored ACL with a given document via the ticket GUID . When associating a given document with an ACL ticket data can also be stored. This ticket data can be specific to a particular document and can be used to store document specific information like the date when the document was secured as well as which principal secured the document. An ACL shared amongst documents can also specify controls relative to the time of securing or to the person who secured the document. The ticket data can also be used by the securing client to provide information corresponding to the service provider. For example in a Documentum system integration the ticket data can provide the Documentum GUID for the source document. The service provider information can also be a byte sequence received from the service provider including a set of name value pairs that capture appropriate informational aspects of the document corresponding to the service provider.

In addition to the ability to retrieve ACLs by their name the server can also retrieve an ACL for a specific document. When retrieving an ACL for use the server can optionally provide a principal as a parameter. This provides a hint allowing an optimized storage provider to return the subset of an ACL that is relevant for that particular principal.

When creating and storing an ACL there is also the opportunity to pass through service provider specific data that was presented to the securing client. This can provide an end to end mechanism to give a hint to the service provider on what specific ACL this document refers to. This is analogous to the capability described above in connection with the ticket data but may be specific to an ACL as opposed to a document.

The storage providers need not interpret ACLs. The storage provider can simply store and retrieve ACLs without doing any interpretation of them. When a document is created it can be given an initial ACL which can be stored in the document and used for offline access control if no other ACL for the document exists locally at the client. The storage interface can provide the methods by which these current and initial ACLs are passed back to the securing or viewing components of the server. In general there can be two main cases 1 the content being secured does not have any separate identity outside of the document control system e.g. the content is an email attachment 2 the content does have an identity outside of the document control system e.g. the content is a PDF rendition of a document inside a Documentum repository . In this latter case the service provider should be able to dynamically control access to the content in terms of the current rules the repository applies to the object from which the content was derived. Moreover once an ACL has been saved it can be modified by the owner or by a system administrator in the case of a policy.

Both the initial and the current ACL can be generated by the storage service provider and access control for the content can be mediated in terms of the access control on the underlying object. Otherwise the management of the content may be precisely the same in both the online and offline case. In addition a Boolean supportsProvider method can be provided that the client can use to see what service s are supported by the service provider. The client can thus have an expectation of which service provider it can use and can determine from the supportsProvider method if this service is actually supported by this document control server configuration e.g. this determines what set of name value pairs can be legally included in the service provider information in the ticket data . If supportsProvider is true for some service then the remainder of the interface should be implemented. Thus a customer could use the same server both to protect content in a document repository and to protect email attachments.

The server can also include a cryptography component which can have duplicate implementations that take advantage of various native cryptography components e.g. Java Cryptography Extension or Net Crypto components . In general a document control server uses several cryptographic primitives. These cryptographic primitives implementations can be placed behind general interfaces allowing the implementations to be changed e.g. change key sizes etc. as needed such as to add security features and or to address the needs of specific enterprises. Additionally these cryptographic primitives implementations can use standard cryptographic operations as well as custom operations.

The interface of the cryptography component can provide support for the following primitives 1 symmetric encryption and decryption e.g. 128 bit AES Advanced Encryption Standard and or 128 bit RC4 Rivest Cipher 4 2 public key encryption and decryption plus signing and verification e.g. 1024 bit RSA 3 message authentication code MAC used to provide document integrity e.g. the one way HMACSHA1 hash function with a 128 bit key 4 a secure hash function for which it is computationally infeasible to find two messages that hash to the same value e.g. SHA1 and 5 random number generation used to create cryptographic keys and introduce randomness into messages e.g. the Secure Random number generator provided with the .Net framework for a Net implementation and the java.SecureRandom class for generating random numbers in a Java implementation . These cryptography primitives can be implemented in Java using the Java Cryptography Extension JCE mechanism and in one of the NET languages using the Net Service Provider mechanism. This cryptography interface and the cryptography implementations should also be used on the clients as both the clients and the servers in the document control system can secure and access documents using these cryptography techniques. The cryptography interface can also be implemented in C for any cryptographic operations used on clients written in C .

In general the client and the document control server periodically synchronize to update any changes to offline access information retained at the client where this offline access information can effectively pre authorize the client to allow actions with respect to secured documents that have yet to be accessed while the client is connected to the network e.g. a secured document received via email at the client but not yet opened . The client can send a request to the document control server . The request can be for an update to its offline access information. For example an agent can be provided with the client that periodically connects to the server and downloads offline access information this synchronization operation can happen silently in the background without a user of the client being aware of the updates the next time the user attempts to open a document the downloaded offline access information can be used by the client for future access while offline. Synchronization information can include an indication of whether a document has been revoked and if so a new document identifier and or a URL pointer such that an offline client can know how why a document has been revoked.

The request can be any type of request sent to the server periodically such as a request from the client to take an action with respect to a document which may be located at the client or elsewhere and may be a secured document or not. The server can verify an authenticated user at the client in connection with the request and this verification of an authorized user can cause the synchronization operation to initiate. For example the server can be a server such as any described above and the synchronization operation can piggyback on other operations that use authentication e.g. when a user attempts to access or secure a document while online . Alternatively synchronization can occur without prior authentication the server can encrypt the offline access information using the user s public key so that only the user can decrypt them the encrypted offline access information can be retained by the client and when the user next attempts to open a document the retained information can be decrypted and used to update the client s secure local database as described further below.

When the client synchronizes with the server the server can send offline access information which includes a key associated with a group of users to which the current user belongs a picture of a key is used symbolically in the figures to represent one or more encryption keys . The key can be used to access a secured electronic document while offline by decrypting a second key in the electronic document . The electronic document can include content encrypted with the key and the electronic document can include the key encrypted with the key . Alternatively there can be one or more levels of indirection in this key encryption relationship. For example the key can be used to decrypt the key which can be used to decrypt another key that is then used to decrypt the content of the document . Regardless of the number of levels of indirection and the number of keys employed the key which is associated with a group of users can be used to access the secured electronic document while offline by decrypting a second key in the electronic document . Additionally the offline access information can include other group specific keys one or more user specific keys at least one set of document permissions information associated with multiple documents e.g. a policy as described above and a document revocation list.

The synchronization operation can also involve the client sending back to the server an offline audit log of operations performed by the client while offline. Thus the client can periodically synchronize with the server to upload audit log messages that have been retained locally and to download the latest revocation list and any updates to policies. In a system employing ACLs as described above all new ACLs need not be downloaded with each synchronization because of the potentially large number of ACLs in the system. The document control system can provide a constrained set of guarantees as to the freshness of data. The guarantees used can be as follows 1 Each document specific ACL and policy specifies a period of offline validity e.g. a number hours or days for which the document specific ACL is valid before another synchronization with the server is needed and after which the document may not be viewed offline without synchronization . 2 At each synchronization all revocations and policy updates are synchronized with the client. Thus a policy or revocation list can be at most a specified number of time units out of date with respect to a particular document. Moreover the synchronization can also send a current ACL for any document being accessed while online.

If an update is needed the server sends offline access information at . This can involve the server sending the client a list of the keys to remove and the keys to add locally. If no update is needed the server sends a validation of the current user group information at . This indicates to the client that current offline access information is valid and the client and server are synchronized as of the current time. Additionally when the server sends the offline access information at or revalidates the client s offline access information at the server can also send a server reference time to be recorded at the client and used in determining when a client server synchronization is needed again in the future. Finally the server receives an offline audit log from the client at . Thus the server can generate audits as described above that include information relating to actions taken with documents while offline.

Security may be provided by encrypting the files with a cryptographic key stored in tamper resistant hardware such as a smartcard or an embedded security chip such as those that ship with some laptops provided by International Business Machines Corporation of Armonk N.Y. If hardware tamper resistant storage is not available software obfuscation techniques may be used to provide some security. The data retained at the client can include user and group private keys a document revocation list updated ACLs for policies updated ACLs and security data for documents the client has accessed while online and an offline audit log of operations performed by the client while offline.

A request to access a document is received when the client is not connected to the network at . A check is made to determine if a recent server synchronization has occurred at decision . For example the client can check whether a difference between a current time and a receipt time of the offline access information exceeds a server synchronization frequency parameter. The server synchronization frequency parameter can be specific to the document to be accessed. Moreover determining the current time can involve comparisons between the last known synchronization time and the local system clock.

If a synchronization with the server has not occurred recently enough the client prevents access to the document at . If a synchronization has occurred recently enough the first key is used to decrypt a second key in the document at . Actions with respect to the electronic document can be governed based on document permissions information associated with the electronic document at . Governing actions with respect to the electronic document can involve obtaining the document permissions information from the electronic document itself. Governing actions with respect to the electronic document can involve identifying a document policy reference in the electronic document and obtaining the document permissions information retained locally based on the document policy reference. Additionally an offline audit log which can record both document access and attempted document access can be maintained at .

An example encrypt dictionary includes document permissions information e.g. the initial ACL described above and one or more encrypted document keys . The document key used to encrypt the content of the document can be encrypted multiple times using group keys and user keys and these encrypted document keys can be included in the encrypt dictionary in the secured document . A document control server can dynamically generate and maintain user and group keys for the user and groups in a document control system. By including the encrypted document keys and the document permissions information in the document offline access can be supported by providing the appropriate user and group keys to the client using the synchronization operation described above.

Another example encrypt dictionary includes a document key an ACL a document ticket version information e.g. a format version string and encrypted session keys . The document key can be a random 128 bit key generated by the document control server and used to encrypt the document content e.g. using RC4 or AES encryption . A portion of the encrypt dictionary can be encrypted using a generated session key and a MAC can be used to detect any modification of the encrypt dictionary. The encrypted session keys can be the session key encrypted multiple times using the group keys and the user keys. Additionally the session key can be encrypted with the server s public key.

When a user attempts to open a document offline the client can check to see if the session key for the document has been encrypted with the user s key or the group key of any group of which the user is a member. The client can obtain the user s key and keys for all groups of which the user is a member during synchronization with the server. The appropriate key is then used to decrypt the information in the document s encrypt dictionary. The client can then evaluate the ACL in the same way ACLs are evaluated on the server to determine what permissions the user has. The client s revocation list can be checked and if the document has not been revoked and has not expired the document can be opened and the user s access to the document can be audited locally. If the document has been revoked the additional information can be checked to determine what where the new document is.

This initial access model allows a user to be offline the first time they access a document. When the document is secured the initial ACL for the document can be embedded immutable in the document. When a user attempts to open the document the embedded ACL can be used to determine whether they have access. The document can still be revoked or expire even though an initial ACL is kept within the document. Moreover the current ACL for the document maintained elsewhere can be updated and this ACL can be used when the client is online as described above.

When a user accesses a document online the current ACL which can be stored on the server can be retained on the client and used for that access. The retained ACL can then be used for future offline access to the document. When the client obtains the updated ACL from the server the client can also obtain the document session key separately encrypted with the key of each user and group that can access the document. Both the ACL and the encrypted keys can be secured in a manner similar to that initially embedded in the document.

Moreover the document permissions information in the document can include a policy i.e. a document policy reference or identifier. Thus the client can identify a document policy reference in the electronic document while offline and obtain the document permissions information of the policy retained locally based on the document policy reference. As the document control system can guarantee that all policy updates are reflected on the client with each client server synchronization an administrator can change a policy and know that within a bounded amount of time the change will be reflected on all clients that are still providing access to any documents.

In addition to the initial offline access model described above a traditional lease model can also be used in the document control system to provide additional flexibility. In this model the first time a user accesses a document from a particular machine they must be online. At that time they receive an offline lease which allows them to view the document for a specified period of time offline before the lease must be renewed. Such a lease model can be implemented in the document control system described by embedding an initial ACL allowing access to no principals and employing a validity interval that specifies how long an ACL can be retained on the client before a new one needs to be fetched from the server. Additionally the document control system can be configurable to enable a no offline access model in which the user must be online in order to access a document in this case the keys needed to open the document need not ever be retained on the client.

The document control system can provide all of the following security guarantees together as well generally subject to the accuracy of client time. 1 Policy Modification A policy modification is guaranteed to be reflected on each client within the offline validity interval specified in the policy since all policies are synchronized at every synchronization operation. 2 ACL Modification A non policy ACL that has been modified will be reflected on the client only if it is viewed while online. Retained non policy ACLs are guaranteed to be dropped from the client within the validity period if specified in the ACL. 3 Revocation A document that has been revoked is guaranteed to be unviewable by all clients in the system within the offline validity interval specified in the document s ACL since revocation is synchronized with the client at every synchronization operation. 4 Expiration A document that has expired will be unviewable on the expiration date regardless of whether the user is online or offline. 5 Expiration modification Expiration is specified in the ACL and so expiration modifications are reflected as per Policy or per ACL modifications. 6 User or Group membership modification If a user s key is revoked e.g. because they leave the company or if the user is removed from a group it can be guaranteed that the user will not be able to view a document that they no longer have access to within the offline validity interval for the document.

Relating the second document information to the client can involve sending the second document information to the client to allow selection of one of the first and second documents with respect to the action. Relating the second document information to the client can involve obtaining the second electronic document and sending the second electronic document to the client to allow taking of the action with respect to the second electronic document instead of with respect to the first electronic document. The second document can already exist or may need to be generated in whole or in part which can be indicated by the associated information indicating the second document.

The client can force a user to view the second document based on the information . For example the second document can be a later version of the first document and the information can include document permissions information specifying that the action is not permitted with respect to the first document . The first document can be replaced with the second document e.g. opened in place of the first document and or written to storage over the first document by the client including potentially without the knowledge of the user. The second document can also be a different language version e.g. a French version of an English original or a different format version e.g. a different file compression and or encryption scheme of the first document .

Obtaining the second electronic document at the server can involve generating at least a portion of the second electronic document including potentially generating the entire document or the document can be a pre existing document. The associated information can include user based association information and obtaining the document can involve obtaining the document based on the user based association information and an identified user at the client . The document can be customized for a particular user the user s location and or the user s time of access e.g. the document can be a stub document that is already identified as outdated when sent and when this stub document is opened each user can automatically receive a new document generated specifically for that user at the time of the access attempt i.e. the stub document looks like and can be manipulated as a regular document in an operating system but is always current when opened while online . Customization of the document can be done at the server or elsewhere. The user can be identified as described above and the document control system can also employ the systems and techniques described throughout this patent application the documents can be secured documents as described above.

A document control system can thus address both issues of document security and version management in one system. If a different version of a distributed document should be viewed in place of the distributed version this can be defined and controlled in a document control server that also handles document security for distributed documents. An author of a document can specify that a distributed version of a document is outdated and a newer version should be viewed instead and the system can do this automatically as well. Moreover an author can easily control multiple versions of a document and user based definitions of who should view which version.

An author or administrator can designate which documents are appropriate versions for which recipients including the possibility that two users receive entirely different documents with different content and which are different document versions in the sense that they both relate to an originally distributed document. Version relationships among documents can be specified using the document identifiers generated for document security purposes. The version relationships can be defined using a directed graph in which each node is a version and the directed edges indicate which versions take precedence. Each edge can also indicate to which users it applies. A graphical user interface for displaying diagrams can be used to define the version relationships such as by drag and drop operations to specify which versions become outdated in favor of other versions. This user interface for defining version relationships can be used by an author to specify new version relationships or to alter existing version relationships including those generated automatically by the system.

In the context of different sequential versions of a document where each document can be revised and the system can ensure that each user only views the latest version of a document the notion of revocation in the document control system can be extended to include whether a document has been replaced with another. Thus upon opening a document in addition to checking whether users have access to perform traditional actions on the document e.g. print etc. a determination can be made as to whether the user should have access to a specific version of the document. The server can store information about where documents can be found including potentially providing an additional repository service where documents that are being persistently versioned can be stored.

In the case where each user can view a different version a similar approach can be used with the addition of the ability to specify intersecting user groups e.g. instead of version zero all employees should see version A all managers should see version B and an executive should see version C where additional version relationship information specifies that the executive can open the subordinate versions A and B in addition to version C . Rules for resolving conflicts can be provided.

In addition to an author or administrator having control over version management in a distributed document control system the system itself can automatically employ document version control as appropriate to make document version control a routine regular aspect of managing security for distributed documents. is a block diagram illustrating workflow in a document control system employing document version control. A client can be communicatively coupled with a permissions broker server via a network . The permissions broker server can restrict access to documents by encrypting them and allowing selective decryption of the documents for use when an authorized user attempts to view the secured documents. Using the systems and techniques described even after a document has been freely distributed to various recipients over the network the distributed document can be revoked by the system from subsequent usage such that the client can be forced to view a different document than the locally retained but revoked document.

This revocation of a secured document can be performed by an author such as when the document to be revoked is being viewed by the author on a client or through a web interface of the server . As used herein the term author indicates a person who has secured a document using the permissions broker server and need not indicate the actual author of the content within the document the document author can also be thought of as the document publisher. When the document is revoked a URL to a different document can be specified as the version that should instead be opened. When the original document is subsequently viewed e.g. a distributed copy of the originally secured document users can be notified that the original document should not be viewed users can be directed to open the new document as described above. This process can be understood as persistent versioning in that the version information persistently follows documents even as they are distributed widely from an original document source. In addition to this described approach to persistent versioning the distributed document control system can also determine on its own when a secured document should be revoked without direct input from the original securing author. Thus persistent versioning can arise on its own in the system without the active participation of the document author.

The system can decide that a first document should supersede a second document which was previously secured by the server . The first document can be a previously secured document or not. For example the document can be a local copy of the secured document which local copy is being modified by the document recipient. When the secured document is modified on the client this information is communicated to the server such as using the audit log messages described above. Any modification action taken with respect to the document e.g. a user adding comments to the document or completing form fields can cause the server to suggest the use of persistent versioning and thus the revocation of document . For example when a user saves their local copy of the document at the client after making various modifications to the document the client can communicate this to the server which can in turn after possibly checking whether the original author previously indicated permission for recipient initiated document revocation cause the client to suggest to the user that the document be secured as a new version of document using the revocation persistent versioning mechanism. The client can also provide a brief description of how persistent versioning works along with the suggested use of persistent versioning.

In the event that the server determines to use persistent versioning the server can revoke document and generate document association information such as that described above in connection with . The information which can be stored locally or elsewhere links documents and in a superior subordinate relationship such that when an action is requested with respect to the document or a distributed copy of the document the distributed document control system forces an action to be taken with respect to the document . This forced action can be a forced opening of the document instead of the document or this forced action can be a required user selection with respect to the document . For example the client can present a prompt to the user that requires the user to actively select not to open the document before the document can be opened.

The revocation of document can be communicated to a document repository . Moreover the server can upload a copy of the newly secured document and send a copy to the document repository thus making the document available to others even when the client saves the local copy of the document to a location e.g. a local hard disk that is inaccessible by the server absent the client .

The server can also use persistent versioning even without input from the recipient user. For example the server can include in its records an indication that the document author would like persistent versioning to be employed automatically for the secured document . In this case when a recipient user saves a modified local copy of the document or when a recipient user attempts to secure a modified local copy of the document as a new document with the server persistent versioning can automatically be employed. For example the author can pre approve the use of persistent versioning at the time of publishing the document such as by delegating a set of users who are automatically allowed to cause persistent versioning to occur e.g. pre authorize document recipients who are a member of a Role to effect a new version of the secured document .

Furthermore while the author need not be involved in the adoption of persistent versioning for the documents the system can allow the author to undo the revocation of the document at a later time. The system can be built to allow specific authorization of each use of persistent versioning such as by having the server or client send an email to the author suggesting persistent versioning and allowing the author to reply to either permit or not permit the use of persistent versioning in a specific case. Thus the use of persistent versioning need not be forced on the original document author.

In addition the document may be an unsecured document that a user at the client is attempting to secure in the system using the server . In this case the server can check to determine whether the document is related to an existing secured document e.g. comparison of digital signatures . If so the server can then either suggest persistent versioning or automatically use persistent versioning as described above. Determining whether the document is related to an existing secured document can involve checking metadata about a document such as who secured the document the filename at the time of securing document size information timestamp information or some combination of these. For example the server can search existing metadata to determine if a similar document exists in the system and can use timestamp information to prevent linking documents that are similar but too far apart in time e.g. similar trip expense reports that occur a year apart .

Determining whether the document is related to an existing secured document can involve comparing document contents to check for content similarity which can indicate that two documents are related. The client can send the document or a portion of the document to the server which can compare this with document content retained at the server or obtained from another source such as the document repository or the server can offload this comparison to the document repository or some other resource in the network . For example if the document includes a digital signature the system can check for secured documents that have the same digital signature. A digital signature can be considered a type of cryptographic checksum in that generating a digital signature can involve encrypting a cryptographic checksum e.g. a hash or fingerprint with a private key in an asymmetric encryption scheme. Note that the digital signature can be a digital signature of the whole document or just a portion of the document.

Other document comparisons can also be performed. For example two documents can share the same form template where one copy of the document includes completed fields thus the system can tell that the two documents are the same but the one with the added form data is the new version. Other small differences in document contents such as two documents that are the same but for some added comments can also indicated a relationship between the two and trigger persistent versioning.

Furthermore the distributed document control system can be designed to secure all documents whenever they are saved at a client regardless of whether the user is currently recognized in the system. The document control system can include an anonymous user in the group and user concepts described above. This special anonymous user can be understood as a guest user where when an unknown user tries to open a secured document they authenticate as the guest user. In this case all documents saved by the client can be secured with a permissions broker server irrespective of the current user. In fact such a system can have the client automatically tether with a server all documents created by the client and the persistent versioning techniques described herein can be used with such anonymously secured documents.

Whether the first document should supersede a second electronic document can be determined at . For example the server can perform one or more types of document comparisons. The server can search a data repository for document metadata matching that of the first electronic document e.g. matching filename and securing user . The server can compare document contents to look for similarities either in viewable or non viewable content. For example a cryptographic checksum e.g. a digital signature of the first document can be compared with others to identify similarities or document text can be compared using text similarity algorithms. Such text similarity algorithms can provide a weighted measure e.g. percentage likelihood that two documents are the same based upon the words in the documents. Many such algorithms are available including for example the shingles method see e.g. Krishna Bharat and Andrei Broder Mirror Mirror on the Web A Study of Host Pairs with Replicated Content where the resemblance r A B of two documents A and B is defined as follows 

Information that links the first and second electronic documents can be stored at . This information links the first and second documents in a superior subordinate relationship such that when an action is requested with respect to the second subordinate electronic document e.g. a request to open the second document the distributed document control system forces an action to be taken with respect to the first superior electronic document. Thus the second electronic document can be revoked in the distributed document control system in favor of the first electronic document based on the outcome of the determination at .

Subsequent to this revocation of the second document a request to open the second electronic document can be received at . The link information can be identified and information regarding the first electronic document can be imparted to the client at . This imparted information can prevent the client from opening the second electronic document and can redirect a user to the first electronic document. The redirection can involve actually obtaining the first electronic document initiated either by the server or the client or identifying a source either a person a URL a document GUID or some combination of these from which the first electronic document can be obtained by a user.

The systems and techniques described herein can be combined in a comprehensive document control system employing multiple document control servers. Referring again to the document control server can implement the various techniques described in combination. To increase system security all client server communications can be over Secure Socket Layer SSL which encrypts the communications and provides server authentication and or securing of documents can be done using client side securing. The server can be physically secured from an attacker and can sit behind at least one firewall. All sensitive state information in the server can be encrypted before it is persisted to stable storage the encryption key used for this can be embedded in the server code hidden in obscure system resources and or contained within a tamper resistant cryptographic module. Moreover on the client side a user s logon credentials can be cached to avoid repeated authentications for multiple consecutive operations that require authentication. Cached credentials can be signed by a server private key dedicated to this purpose and reside on the client the signed credential can include an expiration date to limit its validity period and can be presented when the client attempts to authenticate against the server .

As mentioned above documents can be secured either at the server or at the client. A document can be converted from one format to another e.g. from Microsoft Word to PDF before securing the document control system can be integrated with a PDF creation service for this purpose. The securer component can be a wrapper around a PDF library that takes a PDF document as input as well as an encryption key and a set of name value pairs that represent information to be embedded in the PDF document s encrypt dictionary. The securer can encrypt the document with the provided encryption key and embed the specified information in the document. When the securing is performed on the server the securing can be done in a separate process a pool of such processes can be kept available so that multiple securing requests can be simultaneously satisfied and the maximum number of such processes can be a configuration option for the server . These securing processes can be terminated after some number of successful securing operations which number can also be a configuration option or after any unsuccessful securing operation.

The securing client can prepare a specification of the desired security for the document to be secured. This can involve end user interaction in a client such as an email application like Outlook software provided by Microsoft Corporation of Redmond Wash. The client can connect to the server via the RPC authenticate and send information up to the server . If the system is using server side securing the client can send the unencrypted document and the securing specification up to the server. If the system is using client side securing then only the specification need be sent.

The server can authenticate the user ensuring that he has permission to secure a document . The service provider can provide a ticket GUID for the document . The Access Control List specification can be given to the Access Control Manager so it can canonicalize the principals and possibly validate permissions . The ACM can first attempt to use an in memory cache of canonical mappings. The storage provider can be queried for other cached canonical mappings . Principal providers can be queried for all non cached noncanonical entries . The canonicalized ACL can be persisted in the storage provider to allow for subsequent modification of the ACL .

The information to be encrypted and stored in the document e.g. ticket and ACL can be provided to the Crypo Service Provider which can create a document key that will be used to encrypt the document. If document shredding is not desired then document key ticket and ACL can be encrypted using the server public key. If shredding is desired then the document key should not be encrypted as the key should not leave the server. If the system is using server side securing the encrypted ticket data from the Cryptography module can be embedded within the document and the document key can be used to encrypt the document . If the system is using client side securing this is not needed.

The system can audit that a document was secured . If the system is using server side securing the encrypted file can be returned to the client . Otherwise the encrypted ticket data and the document key can be returned to the client . If the system is using client side securing the document securer on the client can embed the encrypted ticket data and encrypt the document using the document key on the client .

When multiple document control server instances are used requests can be routed to other servers if one goes down. A load balancer can handle routing of requests to the server instances . Within a server itself high reliability can be achieved by writing the server in a language using managed code such as Java or a .NET language. In order to manage many canonical and non canonical principals two levels of cache can be provided for principal information. A server can have an in memory cache of canonical mapping and group membership for recently queried canonical users. Many document control servers can share the secondary cache within the storage provider.

Should the desired information not exist within either of these caches the servers can directly access the direct principal providers within the Access Control service provider and then cache the information both locally and within the storage provider. Group membership information should be batch processed such that it can be retrieved as needed in a reasonable amount of time. One of the document control servers as a secondary service can be designated a master and have the responsibility of performing the batch processing tasks. In many cases the actual securing can be done on the client to remove the overhead of transferring the document to and from the server and to reduce the load on the server. Likewise with client side securing the client can also perform the document encryption further decreasing server load.

The three tier architecture allows server replicas to be added to scale to large enterprises. Documents can be tethered to a cluster of servers instead of to a specific hostname as described above. DNS Domain Naming System round robin can be added to the system to allow for additional hardware to act as document control servers. The servers can contain no state so the hardware scalability concern can be reduced to the standard one database problem. Algorithms regarding principal management can be designed to be O for individual operations and O n for aggregate operations batch processing etc. .

Embodiments of the invention and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structural means disclosed in this specification and structural equivalents thereof or in combinations of them. Embodiments of the invention can be implemented as one or more computer program products i.e. one or more computer programs tangibly embodied in an information carrier e.g. in a machine readable storage device or in a machine readable storage medium for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple processors or computers which apparatus can include in addition to hardware general programming e.g. processor firmware a protocol stack a database management system or an operating system. A computer program also known as a program software software application or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file. A program can be stored in a portion of a file that holds other programs or data in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver to name just a few. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the invention can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example the operations of the invention can be performed in a different order and still achieve desirable results. The operations can be provided as a hosted service using a subscription business model and integrations can be performed with generally available system infrastructure available over the Internet. The document version control techniques can be implemented using peer to peer systems and techniques. Moreover the sets of permissions for documents can be extended to cover various actions with respect to document content given different workflows e.g. permissions that allow only certain people to sign a document or portions of a document and or permissions that control who may fill out and or view different sections of an electronic form .

Additionally an alternative to always synchronizing policy updates but not necessarily other ACLs can involve providing information regarding which ACLs in the system have changed. Synchronization operations can then be divided into high and low priority operations. High priority synchronizations can occur in the background more frequently and provide indications of when information has changed. For example an indication of which access control lists and policies have changed since the client s last synchronization. Low priority synchronization operations can entail how information has changed. For example this can include the offline access information for every document in the system that has changed. Synchronizing how access control information has changed should be generally more resource intensive than a summary of what has changed. If access control for a document has been modified and the client is aware of a modification but has not performed a low priority synchronization the system can be conservative and an implementation can prevent access to that document until the low priority synchronization has taken place.

As used herein the terms first and second used in connection with documents does not indicate a time of document generation in a system but rather a time of document introduction in this description. Thus these terms do not imply temporal information about the documents.

