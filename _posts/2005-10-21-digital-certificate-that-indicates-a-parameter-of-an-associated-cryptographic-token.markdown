---

title: Digital certificate that indicates a parameter of an associated cryptographic token
abstract: In at least some embodiments, a method comprises obtaining a digital certificate that indicates a parameter of a cryptographic token associated with the digital certificate. The method further comprises associating a level of trust with the digital certificate based on the parameter of the cryptographic token.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08090939&OS=08090939&RS=08090939
owner: Hewlett-Packard Development Company, L.P.
number: 08090939
owner_city: Houston
owner_country: US
publication_date: 20051021
---
A digital certificate issued by a certificate authority CA is able to be stored on or bound to a local computing device through the use of a Cryptographic Service Provider CSP or a Public Key Cryptography Standards PKCS module both hereinafter referred to as cryptographic service modules or CSMs . The local computing device may use the certificate to engage in trusted transactions or trusted communications with computer applications referred to as challenger applications that challenge the authenticity of the local computing device or its user. For example a challenger application may verify the signature of the CA associated with a certificate and allow a trusted transaction or trusted communication based on the verification.

Each digital certificate provides information that identifies the CSM e.g. by name used to bind the certificate on the local computing device. However simply identifying a given CSM does not enable a challenger application to establish trust unless the challenger application has prior knowledge e.g. hard coded information regarding the given CSM and or the cryptographic token i.e. the module that performs the cryptography used by the given CSM. Even if a challenger application has prior knowledge of the given CSM and or the token that is used by the given CSM establishing trust based on prior knowledge is not easily scalable i.e. accounting for new CSMs or tokens is problematic nor dynamic i.e. accounting for switches from a CSM or token to another CSM or token is problematic .

Certain terms are used throughout the following description and claims to refer to particular system components. As one skilled in the art will appreciate computer companies may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not in function. In the following discussion and in the claims the terms including and comprising are used in an open ended fashion and thus should be interpreted to mean including but not limited to . . . . Also the term couple or couples is intended to mean either an indirect direct optical or wireless electrical connection. Thus if a first device couples to a second device that connection may be through a direct electrical connection through an indirect electrical connection via other devices and connections through an optical electrical connection or through a wireless electrical connection. A cryptographic token refers to a hardware module a software module or a firmware module or any combination of these that protects access to a private key or other secret data using cryptographic techniques.

The following discussion is directed to various embodiments of the invention. Although one or more of these embodiments may be preferred the embodiments disclosed should not be interpreted or otherwise used as limiting the scope of the disclosure including the claims. In addition one skilled in the art will understand that the following description has broad application and the discussion of any embodiment is meant only to be exemplary of that embodiment and not intended to intimate that the scope of the disclosure including the claims is limited to that embodiment.

Embodiments of the invention provide methods and systems for distributing and using information regarding the cryptographic tokens used by Cryptographic Service Providers CSP or Public Key Cryptography Standards PKCS modules hereinafter referred to as cryptographic service modules or CSMs . In at least some embodiments the token information is distributed via digital certificates sometimes referred to as public key certificates such as X.509 certificates. As will be described herein Version 3 of the X.509 certificate specification supports an extendable format that is capable of storing the token information as will later be described. However embodiments of the invention are not limited to X.509 Version 3 certificates. Rather any existing or future digital certificate that is capable of transmitting the token information may be used.

As an introduction to embodiments of the invention a description of public key certificates and the X.509 specification is provided herein. A public key certificate is a digitally signed statement from a first entity that indicates the public key and other information of a second entity has some specific value. The combination of the public key and the other information represents an identity of the second entity. X.509 is the name of a commonly encountered standard for public key certificates. Although other standards exist X.509 has been a widely accepted standard for public key certificates. The body responsible for X.509 is the International Telecommunications Union ITU .

The X.509 specification defines what information can go into a certificate and how it is stored. In accordance with the X.509 specification a certificate usually contains information such as the certificate holder the signer a unique serial number expiration dates and other fields as shown in Table 1.

As shown in Table 1 an X.509 certificate has several data fields. Some but not all of the data fields are discussed herein for convenience in describing at least some embodiments of the invention. The data in an X.509 certificate is encoded using two related standards called Abstract Syntax Notation 1 ASN.1 and Distinguished Encoding Rules DER . ASN.1 describes data and DER describes a single way to store and transfer that data.

As shown in Table 1 the Issuer field is not just a single string. Rather the Issuer is a Distinguished Name DN which in the Abstract Syntax Notation 1 ASN.1 is a sequence of several object identifiers OIDs with their corresponding values. Some available OIDs to be used in an X.509 Distinguished Name are defined in gnutls x509.h. The Version field indicates which version of the X.509 specification applies to the certificate. For example a value of 1 may indicate a Version 1 certificate and a value of 3 may indicate a Version 3 certificate. The Validity field indicates the date that the specific certificate was activated and the date the certificate s key would be considered invalid.

As shown the Extensions field applies only to X.509 Version 3 certificates. Certificate extensions provide information about the certificate s subject that did not fit in the typical certificate fields. For example e mail addresses or a flag that indicates the certificate belongs to a Certificate Authority CA may be provided in a certificate s extension. Extensions can be classified in two categories constraint extensions and informational extensions.

Constraint extensions provide restrictions or constraints on how and where the certificate or the key in a certificate can be used. For example a constraint extension can limit the usage of the key for Digital Signatures only or limit a Domain Name for which a CA may issue a certificate or limit the usage trust of a certificate to a particular Domain Name. Some common constraint extensions are key usage extended key usage and name constraints. Most CA and public key infrastructure PKI systems enforce constraint extensions.

In contrast to constraint extensions informational extensions provide general information that may or may not be useful for certificate users and is independent of how a certificate can or should be used. Common informational extensions include key identifiers and alternative names which allows other identities such as data source names DSNs email addresses internet protocol IP addresses to also be associated with a certificate s public key . Table 2 shows a list of common certificate extension identifiers for X.509 Version 3 certificates.

As shown in Table 2 there are several existing extensions for X.509 Version 3 certificates. The extensions are implemented as a linked list a sequence of one or more individual extensions. An individual extension has the following elements an Extension Identifier ExtnID element a Critical element and an Extension Value ExtnValue element. The ExtnID element comprises an Object used as an identifier for the extension and is usually referred to as an Object Identifier OID . An OID can represent either a constraint extension or an informational extension.

The Critical element comprises a Boolean flag default is FALSE that indicates whether an extension is critical or not. The Boolean flag is used to protect CAs against any incorrect assumption or interpretation made by a challenger application or other applications which do not support a particular extension. Thus if a challenger application does not understand a particular extension marked as Critical BOOL TRUE the challenger application must not make any assumption about the usage of the extension and either should not continue or should make no use of the information contained in the extension i.e. the challenger application should ignore the extension . The X.509 Version 3 specification requires that a certificate must be regarded invalid if an unrecognized critical extension is encountered or used.

If the Boolean flag indicates that an extension is non critical the non critical extension can be regarded as a guideline and not a requirement i.e. a challenger application can freely choose to follow a guideline or not . For example a non critical extension that limits the use of a public key for Digital Signatures can be used for encryption. Thus implementing non critical constraint extensions is usually ineffective because a challenger application either must ignore or is free to ignore non critical constraint extensions.

The ExtnValue element provides a string e.g. an OCTET containing the value of the extension. In at least some embodiments the ExtnValue element is used to provide cryptographic token information that can be used to establish trust as will later be described in further detail.

X.509 certificates with or without extensions are used in many applications. One application of X.509 certificates is in web browsers that support the Secure Socket Layer SSL protocol. SSL is a security protocol that provides privacy and authentication for network traffic. Other technologies that rely on X.509 certificates include but are not limited to code signing schemes secure e mail standards and e commerce protocols. For example to enhance e mail security a secure e mail standard may require that both correspondents possess and exchange digital certificates as a pre condition to the secure email dialogue. Other uses of X.509 certificates include authenticating a user when setting up an encrypted on line session using virtual private networking VPN technology.

As an example of using an X.509 certificate suppose that a service a web server wishes to authenticate a user requesting access. In the set up process for the transaction the user presents a certificate which contains his her public key. In response the server sends a challenge which may be a randomly generated sequence of characters back to the user s web browser. Upon receiving the challenge random sequence of characters the user s web browser encrypts the challenge with the user s private key and returns the encrypted string to the server. Upon receiving the encrypted challenge the server determines if the encrypted string can be successfully decrypted using the public key supplied in the certificate. Thus the server confirms the user is in possession of the private key and is thus the person to whom the certificate was issued.

The process described in the above example is sometimes called Stronger Authentication as no real secret information e.g. a password or a private key ever gets exposed to the Internet traffic. Furthermore since the challenge data is random and the private key cannot be determined from the public key or other exchanged information any attacker who manages to capture the data being transferred between the user s web browser and the server is unable to determine the user s private key or the authentication sequence at least not in a later session .

There are many available security mechanisms referred to herein as cryptographic tokens to safeguard access to a private key. As with any public key cryptography scheme if the private key is compromised the user s identity can be impersonated. To measure the ability of a cryptographic token to protect private keys and other secrets i.e. not all cryptographic tokens provide the same amount of security several parameters characteristics associated with a cryptographic token can be used. These parameters may be classified as physical parameters and operative parameters. For example physical parameters such as token type e.g. hardware software firmware and if and how a cryptographic token is physically bound to a platform e.g. soldered or removable can be used to determine the ability of a cryptographic token to protect private keys and other secrets. In some cases a hardware based cryptographic token e.g. a Trusted Platform Module TPM or a Smart Card provides improved security over software or firmware based cryptographic tokens by storing secrets such as the private key and or hash values and performing internal cryptographic operations using these secrets. These secrets are not available outside the hardware based cryptographic token. Accordingly identifying a hardware based cryptographic token may provide a higher measure of security or trust than identifying a firmware or software based cryptographic token.

Also operative parameters such as token capabilities e.g. supported cryptographic operations or key lengths and token specific information e.g. platform configuration register PCR values or whether a private key is encrypted by the token can be used to measure the ability of a cryptographic token to protect private keys and other secrets. Other operative parameters include but are not limited to how an owner of a cryptographic token accesses the cryptographic token e.g. via a personal identification number PIN or a pass phrase . By distinguishing between the different physical and operative parameters of various cryptographic tokens provided for example in a X.509 certificate extension challenger applications are able to establish some level of trust in the user of a certificate. This trust is separate from and complimentary to existing techniques such as verifying a CA signature and existing private key operations. In at least some embodiments the physical and or operative parameters of a cryptographic token may be verified by a challenger application. In such case a verified physical and or operative parameter provides an even higher level of trust in the user of a certificate.

In practice the X.509 specification is implemented in various profiles i.e. configurations through different vendors. The primary difference between the X.509 specification and a particular profile from a vendor is that the specification doesn t generally set limitations on what can and can t appear in various certificate types while a profile sets various limitations based on vendor capabilities and offerings. For example one such limitation is to require that signing and confidentiality keys be different as in the Swedish and German profiles . Table 3 shows a list of common X.509 specification profiles.

Even the most common official profiles such as the profiles shown in Table 3 tend to function autonomously such that users of a profile must use the certificate issued under the profile in a manner prescribed by the profile. The X.509 specification does not provide suggestions or guidelines to explain how to make a certificate from one X.509 profile function with other X.509 profiles. Thus conforming to one profile generally prevents conformance with other profiles unless the profiles happen to match exactly. Furthermore there is currently no way to mark a certificate to indicate that it should be processed in a manner conformant to a particular profile. Thus certificate users often don t know how their certificate will be processed by a particular profile.

When challenger applications of a particular profile system receive a certificate the challenger application determines how much trust to place in the certificate. For example the challenger application can check the signature on the certificate or request a private key operation. Checking the signature verifies the issuer and indicates that the certificate has not been forged or otherwise tampered with otherwise the signature verification process would not succeed . If the challenger application is previously configured to trust certificates issued by a given CA no further determination of trust is needed.

In some cases e.g. when a given CA is not trusted a challenger application may verify the checks the issuing CA has been through before issuing the signed certificate. In such case the challenger application examines the Certificate Policy CP and Certificate Practice Statement CPS under which the certificate issuing process was carried out. The CP and CPS should indicate how rigorously an individual s identity was checked before he she was provided with the certificate. While examining the CP and CPS provides some additional information to establish trust besides verifying the signature there are other ways to establish trust. As previously described the physical and or operative parameters of a cryptographic token may provide an additional measurement of trust. The physical and operative parameters of the cryptographic token indicate the checks that an individual must go through to validate his her identity on a platform before gaining access to the private key associated with the identity i.e. trust may be established based on the strength and the validity of where the private key is stored how the private key is stored and how the private key is protected .

Identification of the physical and or operative parameters of a cryptographic token could be used to support a standardized manner for a challenger application to establish additional levels of trust in a particular platform that implements the cryptographic token. For example verifying that the physical and or operative parameters of a platform s cryptographic token as provided in a certificate s extension have not changed since a certificate was issued or signed indicates that the platform is indeed secure. This verification process can be performed using cryptographic techniques.

As an example if a certificate extension identifies a platform s cryptographic token as a TPM having certain PCR register values the PCR values indicate configuration settings of the TPM a challenger application can use a cryptographic verification process to communicate with the TPM and verify the PCR values. In the case of a TPM platform the challenger application may authenticate the TPM using Pseudo Anonymous Identities from the Trusted Computing Group TCG standard. If the PCR values are the same the verification process indicates that the TPM is secure i.e. the TPM s configurations have not changed from when the certificate issued and that transactions communications from the platform are also secure. If the PCR values have changed the verification process indicates that changes have been made to the TPM s configuration since the certificate issued. Thus the security of the TPM s platform is questionable i.e. the changes may or may not be valid .

In at least some embodiments different challenger applications are free to interpret the physical and or operative parameters independently i.e. various levels of trust can be established based on the parameters themselves . Also different challenger applications are free to verify the physical and or operative parameters and interpret the results of the verification independently i.e. various levels of trust can be established based on the verification process . Thus challenger applications are able to establish trust directly from the token information provided with the certificate and or to establish trust by verifying the token information provided with a certificate extension. This is true even if a certificate is issued based on a first X.509 profile system that does not conform to certificates issued based on a second X.509 profile system i.e. systems configured to issue and interpret certificates compatible with the second X.509 profile may still establish some level of trust based on the cryptographic token information .

There are many ways to implement an X.509 Version 3 certificate extension so as to provide token information in accordance with embodiments of the invention. Provided below is an example of how the X.509 Version 3 certificate extension could be implemented. However embodiments of the invention are not limited to the extension implementation provided herein.

As previously described X.509 certificate extensions have three elements an Extension Identifier ExtnID element a Critical element and an Extension Value ExtnValue element. For illustrative purposes only some embodiments may associate the ExtnID element with an OID called id token type info . The Critical element may indicate that the extension is an informational type extension or is otherwise non critical. Thus different challenger applications are free to use the cryptographic token information as a guideline with no requirement to act upon the cryptographic token information.

The ExtnValue element indicates the token information as well as other information. For example in some embodiments the ExtnValue element indicates whether private key storage is internal to an associated computer system i.e. a platform or is external to the associated computer system e.g. if the private key is on a USB flash drive or Smart Card . The storage may be identified by a name or other identification. The ExtnValue element also indicates whether the protection provided by the cryptographic token is based on software firmware or hardware. The ExtnValue element also indicates other token information such as a token identification number a token name a token alias a standard specification related to the token and a token key strength. The ExtnValue element also indicates token type information such as a size of the information in Bytes and whether the private key is migrate able or non migrate able.

If the cryptographic token is based on hardware the token type information indicates how the token is bound attached to a computer system e.g. soldered or removable . The token type information also indicates a Common Criteria Evaluation Assurance Level CC EAL or other conformance criteria. The token type information also indicates a platform certificate uniform resource location URL a manufacturer of the cryptographic token and a manufacturer of a computer system that implements the cryptographic token.

The token information described above for the ExtnValue element is illustrative of some embodiments but is not exhaustive i.e. more information less information or different information could be provided . As described above the purpose of the token information is to enable a challenger application to establish trust in a user of the certificate either directly automatically from the token information or by verifying some or all of the token information. Establishing trust in this manner is separate from and in some cases in addition to other techniques for establishing trust such as verifying a certificate signature and some private key operations.

As previously mentioned information in the extension is encoded using DER encoding as an ASN.1 encoded structure. The extension may be encoded in compliance with a Request for Comments RFC standard such as RFC3281. Presented herein are some application programming interfaces APIs that allow the manipulation of the extensions of a X.509 Version 3 certificate. APIs are specific to a platform Operating environment as well as language syntax used. Thus the APIs presented herein are illustrative only and embodiments of the invention are not limited to the illustrated APIs.

For illustrative purposes only some embodiments implement a java.security.cert package that provides APIs that can be used to manipulate an X.509 certificate extension. Specifically the java.security.cert package includes an interface i.e. the X509Extension interface that provides public methods to manipulate X.509 Version 3 certificate extensions and X.509 Version 2 certificate revocation lists CRLs . Table 4 shows some details of APIs that can be used to manipulate extensions.

As an example of using the java.security.cert package to manipulate an extension the API getNonCriticalExtensionOIDs may be used to obtain the OID for the extension that provides token information. The API getExtensionValue may be used with the OID assigned to the extension to retrieve an OCTET string value representing the token information. The retrieved information can be parsed based on whatever format was used by a standardizing body or a developer to extract relevant information. For example a standardizing body or developer may parse information using an Extensible Markup Language XML schema i.e. the XML schema can easily be represented as an OCTET string . After the extension has been manipulated the token information is signed by a CA as part of a digital certificate.

The certificate can be used by the user computer to participate in trusted transactions trusted communications or other trusted actions. In addition to issuing and signing certificates the CA is configured to verify certificate signatures or other information such as the token information during or prior to a trusted action. To issue certificates sign certificates or verify signatures the CA implements a CSM coupled to a cryptographic token that protects the CA s private key . Although the CA private key is shown as being stored internal to the token the CA private key could alternatively be stored external to the token .

As previously mentioned the signed certificate is provided to the user computer . The signed certificate as well as a user private key can be stored by the user computer in several ways. As shown in the certificate and the user private key are stored in an external storage medium e.g. a Flash memory drive or a Smart card and are accessible via a CSM coupled to a cryptographic token . Although the certificate and the user private key are shown as being stored together separate storage arrangements are possible. In some embodiments the certificate and or the user private key are stored internally to the user computer . In such case the certificate and user private key may be encrypted by the cryptographic token and stored in a non secure memory. Alternatively the certificate and or the user private key may be stored securely within the cryptographic token as in the case of a Trusted Platform Module TPM .

To carry out trusted actions e.g. transactions such as purchases or communications such as email a user accesses a user interface that couples to an input output I O interface of the user computer . As an example the user interface may comprise a graphical user interface GUI as well as a keyboard and or a mouse. Also in at least some embodiments the user computer is configured to perform trusted actions using the certificate without human interaction.

Prior to or during a trusted action the user computer presents the certificate to a challenger application executed by other computers not shown for convenience coupled to the user computer via the network . A challenger application may establish trust with the user of the certificate by submitting a challenge typically a random number that must be operated on at the user computer with the user private key to the user computer and verifying the signature of the CA that signed the certificate . Based on the results of the verification a challenger application allows a user to proceed with the trusted action.

As previously described there may be cases where establishing trust in addition to verifying a signature is desirable e.g. when a CA is not trusted . In such cases a challenger application may be configured to establish additional levels of trust directly automatically from the token information provided with the certificate . Additionally or alternatively the challenger application may be configured to establish even higher levels of trust by verifying the token information provided with the certificate . In some embodiments verifying the token information strengthens the assumption that the user private key is safe because no changes have occurred to the cryptographic token and or the platform that protects the user private key since the time the certificate was issued and signed.

The challenger device comprises a processor that couples to a memory . The memory stores a challenger application that comprises trust determination instructions and action determination instructions . In at least some embodiments the challenger device couples to the user device remotely e.g. via a network . For example the challenger device may be a server that is located remotely from the user device . In alternative embodiments the challenger device couples to the user device locally. For example if the user device is a hand held device the challenger device may be a computer that is configured to access the stored certificate via an appropriate local port or local card reader. In either case the challenger application when executed causes the certificate to be retrieved from the memory of the user device and examined.

The trust determination instructions when executed cause the processor to examine the token information of the certificate . The token information comprises token parameters characteristics such as physical or operative parameters. For example token parameters such as token type binding information token capabilities or token specific information may be included. Based on the token information and or a token information verification process the trust determination instructions determine some level of trust to be associated with the certificate or the certificate s user. Again the determined level of trust based on the token information is separate from and may be in addition to other procedures for determining trust e.g. challenging a user platform to perform a private key operation or verifying the CA s signature .

As shown the token information comprises one or more data fields such as a token type field a binding information field a token capabilities field and a token specific information field . In at least some embodiments the token type field provides data that identifies the category of a cryptographic token. For example categories such as hardware HW token software SW token firmware FW token or other token may be used. Additionally or alternatively the token type field may provide data that identifies specific cryptographic tokens such as a TPM.

The binding information field provides data that identifies how the cryptographic token is bound to a platform. For example the binding information field may identify a token as being soldered removable or some other binding description. The token capabilities field provides data that describes capabilities of a cryptographic token such as cryptographic operations that are supported the strengths of key lengths that are supported or other capabilities. The token specific information field provides data that identifies specific information relating the token to the certificate . For example the token specific information may be the values of the Platform Configuration Registers PCRs at the time of the certificate creation in the case of a TPM token . The token specific information also may identify whether the private key is encrypted or wrapped by the token.

The token information also may comprise other information or parameters as described previously. For example the token information may indicate a token identification number a token name a token alias a standard specification related to the token a token key strength a Common Criteria Evaluation Assurance Level CC EAL or other conformance criteria a platform certificate uniform resource location URL a manufacturer of the cryptographic token a manufacturer of a computer system that implements the cryptographic token whether the user private key is migrate able or non migrate able or whether the user private key or the certificate is stored external to or internal to an associated platform. Again the token information described herein is not exhaustive i.e. more information less information or different information may be provided .

Returning to after the trust determination instructions determine some level of trust based on the token information and or verifying at least some of the token information the action determination instructions when executed cause the processor to perform an action based on the determined level of trust. For example if the determined level of trust is greater than a threshold level the action determination instructions cause the processor to allow a trusted transaction or a trusted communication. If the determined level of trust is less than a threshold level the action determination instructions cause the processor to disallow or prevent a trusted transaction or a trusted communication. Other possible actions supported by the action determination instructions include but are not limited to limiting or allowing access to a secure network e.g. a corporate network limiting or allowing access to resources of a secure network limiting or allowing access to web based email and limiting or allowing access to file shares.

The additional levels of trust provided by the token information and or by verifying the token information can also be used for non repudiation of trusted transactions. For example if the token information identifies a specific platform and is verified evidence on a claim that a trusted transaction was fraudulent is provided since the transaction verifiably originated from a particular platform.

