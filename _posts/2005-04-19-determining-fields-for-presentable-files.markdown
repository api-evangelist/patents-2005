---

title: Determining fields for presentable files
abstract: Fields for presentable files can be determined by an application (i) based on a field type and at least one parameter of the fields and (ii) responsive to raw data and a separate transformation engine, even when the application is unaware of the mechanics of the separate transformation engine. In a described implementation for a given field, the field type indicates that the given field is to be evaluated based on raw data that is referenced by the at least one parameter of the given field. The transformation engine is applied to the referenced raw data to produce a result for the given field that is suitable for presentation. In an example implementation, the transformation engine includes multiples sets of presentation rules that may be selectively established for application to the fields. In an example embodiment, respective presentation rule subsets target respective types of raw data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07818668&OS=07818668&RS=07818668
owner: Microsoft Corporation
number: 07818668
owner_city: Redmond
owner_country: US
publication_date: 20050419
---
This disclosure relates in general to determining fields of a presentable file and in particular by way of example but not limitation to utilizing information that is external to a presentable file when determining fields of the presentable file.

Word processing documents for example can include embedded fields. Fields represent a portion of a document that is visibly represented by presentation data based on a field type and at least one field parameter. The presentation data can therefore change in response to changes in the value s of the at least one field parameter. There can be different types of fields for different purposes. Examples include a number of pages of a document a name of the file of the document the current date time a number for a e.g. paragraph outline page etc. numbering feature and so forth.

When the presentation of a word processing document is updated the presentation data is likewise updated based on the at least one parameter. For example if there is a field for a number of pages of a document each time the document is updated for printing the current number of pages of the document is inserted as the presentation data at the location of the embedded field.

With existing fields the at least one field parameter pertains to intrinsically known or determinable information. For instance the date and or time is intrinsically known by a computing system. Also the file name and the internal numbering operations are intrinsically determinable from the document itself. Consequently existing embedded field technology is limited and inflexible.

Accordingly there is a need for schemes mechanisms techniques etc. that can increase the power flexibility and or extensibility of fields that are embedded in presentable files.

Fields for presentable files can be determined by an application i based on a field type and at least one parameter of each of the fields and ii responsive to raw data and a transformation engine that is separable from and external to the application even when the application is unaware of the internal mechanics of the transformation engine. In a described implementation for a given field the field type indicates that the given field is to be evaluated based on raw data that is referenced by the at least one parameter of the given field. The transformation engine is applied to the referenced raw data to produce a result for the given field that is suitable for presentation. In an example implementation the transformation engine includes multiples sets of presentation rules that may be selectively established for application to the fields. In an example embodiment respective presentation rule subsets target respective types of raw data. In an example implementation the fields comprise bibliographies and citations to bibliographic sources the raw data comprises bibliographic data for the cited sources the different sets of presentation rules comprise different bibliographic formatting standards and the respective types of raw data comprise respective types of sources.

Other method system approach apparatus device media procedure API arrangement etc. implementations are described herein.

As described herein above conventional embedded field technology is limited to field parameters that are determinable based on predetermined intrinsic information. On the other hand schemes mechanisms techniques etc. that are described herein below are directed to determining fields for presentable files in a flexible and or extensible manner.

In an example described implementation a field can be a transform reference field type. A transformed reference field type indicates that referenced raw data is to be transformed and the transformed raw data is then presented as the presentation data result of the field. A set of presentation rules may be selected from a transformation engine so that the referenced raw data is presented in a desired manner.

The transformation engine is independent of the application presenting the field and the application is unaware of the specifics of the internal mechanics e.g. the presentation rules of the transformation engine. Moreover a user can independently create or modify a transformation engine without utilizing the application relying on the application or even understanding details on how the application is to apply the transformation engine as long as the created transformation engine adheres to or comports with a schema as promulgated for transformation engines generally. For example using non proprietary open standards such as XML and XSLT enables a user to create edit etc. the raw data and the transformation engine respectively without involving the application.

Fields of a transform reference field type may be employed in a myriad of contexts. In an example context a bibliographic feature employs transform reference field type schemes mechanisms techniques etc. Raw data contains one or more bibliographic sources and the transformation engine includes at least one set of presentation rules. Each presentation rule can implement a documented approach for citing bibliographic sources. Additionally bibliographies and citations can be quickly repurposed by changing the selected set of presentation rules. This can cause the presentation of each cited bibliographic source to be changed accordingly.

To facilitate understanding this description is separated into five sections. A first section is related to and is entitled General Example Implementations for Determining Fields . A second section is related to and is entitled Specific Example Implementations for Determining Fields . A third section is related to and is entitled Bibliographic Related Example Implementations for Determining Fields . A fourth section is entitled Conclusion . There is also a fifth section that references and is entitled Example Operating Environment for Computer or Other Device .

A data stream construction for field is illustrated. Data stream construction may be represented as Field Type Field Parameter s Result . The Field Type indicates a field type of many possible field types to which a given field belongs. The Field Parameter s recite at least one field parameter that serves as an argument for the Field Type. The Result symbolizes the result of a function characterized by a Field Type and Field Parameter s pair.

By way of example only the field type may be a paragraph reference number with the field parameter being a pointer to the referenced paragraph having a number. The result is therefore the current paragraph number of the referenced paragraph. For certain field types the field parameter may be empty or omitted when the field type alone provides information that is sufficient to determine the result.

A logical construction for field is illustrated as a block diagram. Field includes function information and result . Function information includes the pair of field type and one or more parameters . When the function characterized by field type and parameters is evaluated or otherwise determined result is produced. When presented file is updated result is presented as presentation data as part of data stream presentation .

Presentable file is the origin or underlying information for presented file of . In other words the information in presentable file enables an application to create data stream presentation of when presentable file is being presented. Presentable file may be presented on a visual screen on a print out and so forth.

As illustrated presentable file includes data stream information and additional information . Data stream presentation is produced primarily from data stream information . Additional information if present contains additional information that is usable for manipulating presenting or otherwise utilizing data stream information and or the overall presentable file . For example additional information may include properties information a change history etc. for presentable file . Moreover additional information can contain all or a portion of raw data and or transformation engine to enhance the portability of presentable file as is described further herein below with particular reference to .

Raw data and transformation engine are also illustrated in . Raw data includes data that is to be at least partially presented as presentation data of for field . Transformation engine includes presentation rules not explicitly shown in that transform raw data into result . Transformation engine in an example implementation complies with an open standard so that individual users may elect to modify or augment a transformation engine provided by others or to create a new transformation engine without using application which may be of any general application type including a word processing program such as Microsoft Word from Microsoft Corporation . Examples of raw data are described further herein below with particular reference to and examples of transformation engine including presentation rules are described further herein below with particular reference to . Also the transformation is described further herein below with particular reference to .

Application in a described implementation includes field interpreter raw data extractor and raw data transformer . Field interpreter is capable of interpreting field especially function information . Raw data extractor is capable of extracting raw data from raw data in accordance with a parameter that contains a reference to raw data . Raw data transformer is capable of transforming the extracted raw data in accordance with one or more presentation rules of transformation engine without being in direct control of the transformation.

Raw data transformer is capable of applying transformation engine to the extracted data of raw data without being aware of the internal mechanics including the specifics of any included presentation rules of transformation engine . Hence result of field can be independent of application . A schema is known to application and application is adapted to interoperate with transformation engines that adhere to comport with schema . Schema specifies one or more formats for transformation engine . Consequently as long as transformation engine adheres to comports with schema raw data transformer is capable of applying transformation engine to raw data without being aware of the internal mechanics thereof. It should be understood that application may also be capable of independently interpreting other e.g. traditional fields without relying on raw data or a transformation engine .

As illustrated in the example block diagram of raw data and transformation engine are separate from presentable file and application . By way of example raw data may be a separate file such as a separate master raw data file. Also transformation engine may be an independent file a separate program a plug in module an operating system OS feature and so forth. As noted above however all or a portion of raw data and or transformation engine may alternatively be included as part of additional information .

In fact in a described implementation at least a portion of raw data is stored as part of additional information and at least a portion of transformation engine may be utilized by application when transforming referenced raw data to produce result . With such an implementation at least the relevant e.g. referenced raw data of raw data is transportable as part of presentable file . Consequently a presentable file may be e.g. emailed to a recipient with the relevant raw data being included as part of presentable file . Similarly if the recipient has an application that is expected to access and properly present presentable file the inclusion of at least a portion of transformation engine as a part of additional information ensures that presentable file can be presented in a manner intended by its creator.

At block data stream information of a presentable file is processed until an embedded field is encountered. For example data stream information of presentable file may be processed into data stream presentation of presented file until a field is encountered.

At block the field is interpreted. For example field interpreter of application may interpret field . More specifically at block a field type is ascertained. For instance field interpreter may ascertain field type of function information . At block one or more parameters are acquired. For instance field interpreter may acquire parameter s of function information .

In a described implementation field type comprises a transform reference field type . This indicates to field interpreter that a reference points to raw data which is to be transformed prior to presentation. Thus at least one parameter comprises a reference to raw data . Another parameter may identify all or part of transformation engine . Alternatively a transformation engine that is to be employed for a presentable file may be identified and optionally contained in the additional information . As another example transformation engine may be identified by a global setting that is set by or through application .

At block raw data for the field is extracted. For example raw data extractor of application may extract raw data for field from raw data . More specifically at block raw data is located responsive to acquired parameter s . For instance raw data extractor may locate raw data and or a portion thereof responsive to at least one parameter that includes a reference to the raw data. At block the located raw data is retrieved. For instance raw data extractor may retrieve the located raw data from raw data .

At block the extracted raw data is transformed. For example raw data transformer of application may cause the extracted raw data of raw data to be transformed responsive to the separate transformation engine . More specifically at block the relevant transformation engine is identified. For instance raw data transformer may identify the relevant transformation engine and or the relevant presentation rules thereof using at least one parameter using a transform identification e.g. a transformation engine identifier in additional information using a global setting of application and so forth. At block the identified transformation engine is applied to the retrieved raw data. For instance raw data transformer may apply the identified transformation engine including a set of presentation rules thereof to the retrieved raw data of raw data to produce result . Raw data transformer can cause transformation engine to perform this transformation without knowing any specifics about the contents of transformation engine .

At block the transformed raw data or field result is presented as part of the data stream presentation of the presented file. For example application may present result which comprises the transformed raw data as presentation data for field as part of presented file . The actions of flow diagram may be performed in orders that vary from those that are illustrated. For example the transforming of block may be performed prior to or completely or partially overlapping with the extracting of block . Thus in an example implementation only those portions of the raw data that are to remain after any filtering need be fully extracted.

Field interpreter ascertains that field type is a transform reference field type as indicated by arrow . As such field is determined based on raw data reference and responsive to i raw data of that is referenced by raw data reference and ii transformation engine .

Field interpreter provides raw data reference to raw data extractor as indicated by arrow . Field interpreter also provides transform identification to raw data transformer as indicated by arrow . Three example locations at which transform identification may be found are illustrated. These examples include parameter s additional information and application . However transform identification may alternatively be located within or in association with other component s . Also raw data transformer may alternatively be capable of independently acquiring transform identification from any location.

Data items include one or more respective tag fields and associated respective data which are referred to herein as tag data couplets. As illustrated data item k includes n respective tag fields that are associated with n respective data entries . In other words tag field is associated with data entry tag field is associated with data entry tag field is associated with data entry and tag field n is associated with data entry n. The manner in which tag fields are utilized by raw data transformer is described further herein below with particular reference to .

As illustrated raw data reference references data item k . Raw data reference can comprise a link a pointer an address a universal resource locator a uniform resource locator some combination thereof and so forth. Raw data extractor uses raw data reference to locate and then retrieve data item k as indicated by arrow portion . Data item k or at least a portion thereof is then provided to raw data transformer as indicated by arrow portion .

Filter order and or format capability is adapted so as to filter order and or format data item k with respect to tag fields in accordance with a selected set of presentation rules and responsive to a data item type of data item k . In this example case the selected set of presentation rules pertaining to data item type is applied to data item k because it is of data item type .

Generally presentation rules can stipulate which tag fields are filtered out how the remaining tag fields are ordered and how the surviving data entries are formatted. Specifically tag data couplets e.g. respective tag fields that are associated with respective data entries may be filtered ordered and or formatted. More specifically one or more individual tag data couplets may be filtered out e.g. removed and or excluded from presentation . Also tag data couplets may be reordered into a prescribed order. Furthermore tag data couplets may be formatted such that the presented text is centered bolded italicized underlined spaced appropriately capitalized punctuated some combination thereof and so forth.

Thus filter order and or format capability of transformation engine produces result which is presented as presentation data . As illustrated in the tag data couplets from to n have been filtered out except for the tag data couplets and m as shown at result . These couplets have also been re ordered as follows tag data couplet tag data couplet and tag data couplet m.

The data entries may also be formatted individually or as a group to produce the final appearance for presentation data . Although result is shown as including tag fields in addition to data entries result may alternatively be streamlined by omitting tag fields such that result is effectively equivalent to presentation data . Consequently result may be presented as presentation data without first stripping out tag fields .

With reference to the set of presentation rules A A there is a different subset of presentation rules for each data item type of multiple data item types. As illustrated presentation rules A A includes rule subsets that target data items of type type type . . . type . The presentation rule subsets for each data item type may include their own set of filter order and or format capability . Consequently data entries that are associated with the same kind of tag field may be filtered ordered and or formatted differently if they are part of data items that correspond to different data item types. This is further explained by way of example in the following section with the bibliographic related examples.

Transform identification of may identify an individual set of presentation rules of a transformation engine . If the set of presentation rules is globally established e.g. by application or additional information then fields of the transform reference field type are each presented in accordance with the globally established set of presentation rules . Alternatively the set of presentation rules to be used may be established for each field e.g. with a parameter for each section or area of a file e.g. also possibly identified in additional information or in any other manner.

Although both sets of presentation rules A and B A and B as illustrated in the transformation engine of apparently include the same presentation rule subsets presentation rule subsets may differ. For example presentation rules C C does not include a presentation rules subset for data items of type but it does have a presentation rules subset for data items of type . Also presentation rules D D only includes presentation rule subsets for data items of types and . Furthermore a presentation rule subset for a given data item type may be exclusive to a single set of presentation rules . Other combinations and permutations of presentation rule sets and presentation rule subsets are possible.

An example application for determining fields in accordance with certain implementations as described herein above is in a bibliographic context. Bibliographic data for cited sources may be entered once and the bibliographic data may subsequently be used for footnotes endnotes and so forth. A user can retrieve bibliographic data for a citation or bibliography entry to a given source whenever that source data has been entered.

Moreover cited sources within a presentable file are included within data stream information as fields having a field type of transform reference . Accordingly bibliographic data may be extracted from raw data . Additionally the raw bibliographic data may be transformed in accordance with an established presentation rule . The presented file may then be re purposed merely be selecting a different presentation rule . In other words the user can insert a citation or bibliographic entry pulling raw data the source data and transforming it according to a documentation style such as MLA or APA. After a citation or bibliographic entry is inserted it can be repurposed by selecting a different documentation style transform .

Transformation engine e.g. as an XSLT or other non proprietary file is installed and or called by application . However application need not be used to create or modify a transformation engine . Instead a user may utilize any program that is capable of generating a file that adheres to or comports with the schema that specifies available format s for transformation engine . Hence a transformation engine that is generated by an unknown file can be installed and or called by application to determine fields in presentable files. For example a word processing program realization of application may install or call any transformation engine that comports with the specified schema regardless of how the transformation engine was created.

In a described implementation raw data may comprise a master bibliographic data file and or a portion of additional information of presentable file . For example a user may enter bibliographic data directly into a master file and have cited portions thereof copied into additional information . Alternatively a user may enter bibliographic data directly into additional information e.g. via an application and have the bibliographic data of the newly entered citations copied into the master file for subsequent use. As noted above inclusion of bibliographic data in additional information is an optional implementation.

Raw data includes at least one data item . As illustrated in raw data includes data item k of type . In a bibliographic related implementation data item k comprises an individual bibliographic source k that is being cited and the type comprises a source type such as a book. Other example bibliographic source types include but are not limited to periodicals journals broadcast programs conference proceedings speeches journal articles magazine or newspaper articles sound recordings performances theses dissertations reports art works musical compositions internet sites documents from internet sites and so forth.

Data item k typically includes multiple entries. Specifically there are respective data entries that are associated with respective tag fields . Tag field n is shown in this example as a title for the book that is the source for this data item . Consequently the associated data entry n comprises the actual title of source k. Although only one tag data couplet is shown in there are typically multiple such couplets. Additional example bibliographic related realizations for tag fields include but are not limited to author publication date pages publisher chapter title article title volume issue edition URL performer writer artist version director and so forth. The specific tag fields that are supported may optionally vary by data item type.

In a bibliographic related implementation transformation engine comprises one or more bibliographic formatting standards. Thus each presentation rule may be realized as an individual bibliographic formatting standard. As illustrated presentation rules A A is realized as a set of rules that transforms raw bibliographic data into bibliographic data that comports with the American Psychological Association APA rules of documentation style. Other example bibliographic related realizations for presentation rules include but are not limited to the following bibliographic standards Modern Language Association MLA Chicago Manual of Style Turabian Author Date and so forth.

In such a bibliographic related implementation transformation engine can therefore be an XSLT for MLA APA etc. that is installed or called by a word processing application. Other XSLTs for other bibliographic documentation styles can be created by users and then installed or called by the word processing application. Such other transformation engine realizations operate in conjunction with the word processing application as long as they are created so as to adhere to the specified schema . The word processing application need not understand the internal mechanics of a transformation engine and the user need not create or modify the transformation engine with the word processing application.

Because presentation rules tend to differ by source type each source type has a corresponding item type presentation rule subset . Consequently book citations may be formatted differently from periodical citations. As illustrated item type is realized as a presentation rules subset of APA that is targeted to transforming raw data for books into book citations that comport with the APA and item type is realized as a presentation rules subset of APA that is targeted to transforming raw data for periodicals into periodical citations that comport with the APA.

In operation parameters in a presentation rules subset stipulate which tag fields are to be present in result as well as their order. They may also stipulate the appropriate formatting including capitalization and punctuation. More specifically the parameters stipulate which ones of data entries are to be presented as presentation data of presented file .

The devices actions aspects features functions procedures modules data structures components etc. of are illustrated in diagrams that are divided into multiple blocks. However the order interconnections interrelationships layout etc. in which are described and or shown is not intended to be construed as a limitation and any number of the blocks can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses APIs arrangements etc. for determining fields for presentable files. Furthermore although the description herein includes references to specific implementations including a general device of the illustrated and or described implementations can be realized in any suitable hardware software firmware or combination thereof and using any field delimiter s field presentation update procedure s raw data format and or organization s transformation engine format and or organization s application involvement level s and or raw data transformation engine interaction mechanism s and so forth.

In a described implementation a transformation engine is created in accordance with a selected open standard e.g. XSTL so as to adhere to a given schema. The given schema is associated with a given application. The given schema specifies a format for transformation engines with which the given application is capable of interoperating.

Thus the given application is adapted to apply the transformation engine to fields of a presentable file e.g. by installing and or calling the transformation engine . The fields may be determined by the given application based on a field type and at least one parameter of the field as well as responsive to raw data and the transformation engine. This determination may be effectuated by the application even if the application is unaware of the internal mechanics of the transformation engine.

The transformation engine may be created modified etc. by a user without utilizing the given application. The creation and or modification is performed such that the resulting transformation engine comports with the given schema. The user may utilize any program that is capable of manipulating files for transformation engines of the selected open standard type.

By way of example only the fields being determined can be bibliographic related entries for a word processing document. The raw data which may be formatted in accordance with an open standard such as XML may include bibliographic related data. The transformation engine may comprise one or more bibliographic citation styles such as APA and MLA. A user may create his or her own bibliographic citation style or modify a documented one without utilizing the word processing application. Regardless the word processing application may determine bibliographic related fields of the word processing document by applying a transformation engine comprising at least one bibliographic citation style without the word processing application having to understand details of the internal mechanics of the transformation engine.

Example operating environment is only one example of an environment and is not intended to suggest any limitation as to the scope of use or functionality of the applicable device including computer network node entertainment device mobile appliance general electronic device etc. architectures. Neither should operating environment or the devices thereof be interpreted as having any dependency or requirement relating to any one or to any combination of components as illustrated in .

Additionally implementations for determining fields for presentable files may be realized with numerous other general purpose or special purpose device including computing system environments or configurations. Examples of well known devices systems environments and or configurations that may be suitable for use include but are not limited to personal computers server computers thin clients thick clients personal digital assistants PDAs or mobile telephones watches hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics video game machines game consoles portable or handheld gaming units network PCs videoconferencing equipment minicomputers mainframe computers network nodes distributed or multi processing computing environments that include any of the above systems or devices some combination thereof and so forth.

Implementations for determining fields for presentable files may be described in the general context of processor executable instructions. Generally processor executable instructions include routines programs protocols objects functions interfaces components data structures etc. that perform and or enable particular tasks and or implement particular abstract data types. Realizations of field determination for presentable files as described in certain implementations herein may also be practiced in distributed processing environments where tasks are performed by remotely linked processing devices that are connected through a communications link and or network. Especially but not exclusively in a distributed computing environment processor executable instructions may be located in separate storage media executed by different processors and or propagated over transmission media.

Example operating environment includes a general purpose computing device in the form of a computer which may comprise any e.g. electronic device with computing processing capabilities. The components of computer may include but are not limited to one or more processors or processing units a system memory and a system bus that couples various system components including processor to system memory .

Processors are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions. Alternatively the mechanisms of or for processors and thus of or for computer may include but are not limited to quantum computing optical computing mechanical computing e.g. using nanotechnology and so forth.

System bus represents one or more of any of many types of wired or wireless bus structures including a memory bus or memory controller a point to point connection a switching fabric a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example such architectures may include an Industry Standard Architecture ISA bus a Micro Channel Architecture MCA bus an Enhanced ISA EISA bus a Video Electronics Standards Association VESA local bus a Peripheral Component Interconnects PCI bus also known as a Mezzanine bus some combination thereof and so forth.

Computer typically includes a variety of processor accessible media. Such media may be any available media that is accessible by computer or another e.g. electronic device and it includes both volatile and non volatile media removable and non removable media and storage and transmission media.

System memory includes processor accessible storage media in the form of volatile memory such as random access memory RAM and or non volatile memory such as read only memory ROM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules instructions that are immediately accessible to and or being presently operated on by processing unit .

Computer may also include other removable non removable and or volatile non volatile storage media. By way of example illustrates a hard disk drive or disk drive array for reading from and writing to a typically non removable non volatile magnetic media not separately shown a magnetic disk drive for reading from and writing to a typically removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from and or writing to a typically removable non volatile optical disk such as a CD DVD or other optical media. Hard disk drive magnetic disk drive and optical disk drive are each connected to system bus by one or more storage media interfaces . Alternatively hard disk drive magnetic disk drive and optical disk drive may be connected to system bus by one or more other separate or combined interfaces not shown .

The disk drives and their associated processor accessible media provide non volatile storage of processor executable instructions such as data structures program modules and other data for computer . Although example computer illustrates a hard disk a removable magnetic disk and a removable optical disk it is to be appreciated that other types of processor accessible media may store instructions that are accessible by a device such as magnetic cassettes or other magnetic storage devices flash memory compact disks CDs digital versatile disks DVDs or other optical storage RAM ROM electrically erasable programmable read only memories EEPROM and so forth. Such media may also include so called special purpose or hard wired IC chips. In other words any processor accessible media may be utilized to realize the storage media of the example operating environment .

Any number of program modules or other units or sets of processor executable instructions may be stored on hard disk magnetic disk optical disk ROM and or RAM including by way of general example an operating system one or more application programs other program modules and program data . These processor executable instructions may include for example one or more of a presentable file having embedded fields raw data a transformation engine an application that is capable of processing embedded fields some combination thereof and so forth.

A user may enter commands and or information into computer via input devices such as a keyboard and a pointing device e.g. a mouse . Other input devices not shown specifically may include a microphone joystick game pad satellite dish serial port video camera scanner and or the like. These and other input devices are connected to processing unit via input output interfaces that are coupled to system bus . However input devices and or output devices may instead be connected by other interface and bus structures such as a parallel port a game port a universal serial bus USB port an infrared port an IEEE 1394 Firewire interface an IEEE 802.11 wireless interface a Bluetooth wireless interface and so forth.

A monitor view screen or other type of display device may also be connected to system bus via an interface such as a video adapter . Video adapter or another component may be or may include a graphics card for processing graphics intensive calculations and for handling demanding display requirements. Typically a graphics card includes a graphics processing unit GPU video RAM VRAM etc. to facilitate the expeditious display of graphics and performance of graphics operations. In addition to monitor other output peripheral devices may include components such as speakers not shown and a printer which may be connected to computer via input output interfaces .

Computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computing device . By way of example remote computing device may be a peripheral device a personal computer a portable computer e.g. laptop computer tablet computer PDA mobile station etc. a palm or pocket sized computer a watch a gaming device a server a router a network computer a peer device another network node or another device type as listed above and so forth. However remote computing device is illustrated as a portable computer that may include many or all of the elements and features described herein with respect to computer .

Logical connections between computer and remote computer are depicted as a local area network LAN and a general wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets the Internet fixed and mobile telephone networks ad hoc and infrastructure wireless networks mesh networks other wireless networks gaming networks some combination thereof and so forth. Such networks and logical and physical communications connections are additional examples of transmission media.

When implemented in a LAN networking environment computer is usually connected to LAN via a network interface or adapter . When implemented in a WAN networking environment computer typically includes a modem or other component for establishing communications over WAN . Modem which may be internal or external to computer may be connected to system bus via input output interfaces or any other appropriate mechanism s . It is to be appreciated that the illustrated network connections are examples and that other manners for establishing communication link s between computers and may be employed.

In a networked environment such as that illustrated with operating environment program modules or other instructions that are depicted relative to computer or portions thereof may be fully or partially stored in a remote media storage device. By way of example remote application programs reside on a memory component of remote computer but may be usable or otherwise accessible via computer . Also for purposes of illustration application programs and other processor executable instructions such as operating system are illustrated herein as discrete blocks but it is recognized that such programs components and other instructions reside at various times in different storage components of computing device and or remote computing device and are executed by processor s of computer and or those of remote computing device .

Although systems media devices methods procedures apparatuses techniques schemes approaches procedures arrangements and other implementations have been described in language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or diagrams described. Rather the specific features and diagrams are disclosed as exemplary forms of implementing the claimed invention.

