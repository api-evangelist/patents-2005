---

title: Copy and paste extensibility
abstract: Described is technology allowing computer programs to participate in the copy and paste process at various times. A source program, from which data is requested to be copied to the clipboard, may participate as desired, including, for example, to cancel the copy, or to determine which data formats will be placed on the clipboard, including one or more custom data formats. A target program, to which data may be copied from the clipboard, may also participate as desired, including, for example, to cancel the paste, or to determine which data format will be pasted, which may be a custom data format. In one implementation, events provide notifications and APIs may be called to facilitate the communication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07689925&OS=07689925&RS=07689925
owner: Microsoft Corporation
number: 07689925
owner_city: Redmond
owner_country: US
publication_date: 20050913
---
One of the more valuable features of contemporary computer systems is the ability to copy or cut content from one program or program instance and paste the content into another program or instance. In general the operating system provides a clipboard in which the content is maintained in various formats. Upon pasting a default format is selected for the content or the user can select another format e.g. via a Paste Special operation.

In general the operating system provides the primary cut and paste mechanism for editing whereby the application author is not able to participate in the process. As a result computer application programs are limited in what they can accomplish with regard to copying or cutting and pasting data.

Briefly various aspects of the present invention are directed towards allowing programs to participate in the copy and paste process at various times. The source program from which data is requested to be copied to the clipboard may participate as desired including for example to cancel the copy or to determine which data formats will be placed on the clipboard including one or more custom data formats. Upon receiving an event corresponding to a request to copy data from a source program to a clipboard an editor and the source program communicate to allow the source program to participate in the copying of data to the clipboard.

A target program to which data may be copied from the clipboard may also participate as desired including for example to cancel the paste or to determine which data format will be pasted which may be a custom data format. Upon receiving an event corresponding to a request to paste data from a clipboard to the target program an editor and the target program communicate to allow the target program to participate in the pasting of data from the clipboard.

Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various aspects of the technology described herein are directed towards extended copy and paste technology wherein as used herein the term copy and its derivatives e.g. copying implicitly refer to cut operations e.g. cutting and the like which is essentially a copy and delete operation as well as dragging except where otherwise noted. Pasting similarly refers to dropping except where otherwise noted.

In general the extended copy and paste technology allows an application program to provide code for participating with the operating system s copy and paste components to provide code for handling all of an application program s copy and or paste operations or to simply use the operating system s copy and paste mechanism e.g. in a conventional manner. To this end in one implementation the operating system provides an application programming interface API set and notification mechanism for communicating copy and paste related information to and from application programs. However as will be understood the present invention is not limited to APIs and notifications or even to operating systems but rather to any medium that allows transfer of content from one program to another. As such any of the examples mentioned herein are non limiting and the present invention may be used various ways that provide benefits and advantages in computing in general.

Turning to of the drawings there is shown an example implementation in which data content is copied from a source application program e.g. from an element therein having a selection marked to a clipboard of an operating system framework . Some time later data from the clipboard e.g. maintained in a data object may be pasted to one or more target application programs as data content e.g. to an element therein having focus . Note that in general data content may be copied to the clipboard in multiple formats and a selected one of the formats may be pasted from the clipboard .

To copy and paste between application programs which may be different instances of the same program an editing component of the operating system framework provides a copy mechanism and a paste mechanism . As described below the source application program may participate in the copy operation via its own copy code . Similarly the target application program may participate in the paste operation via paste code .

In general the source application program from which content is being copied to the clipboard is able to provide code to handle the operation on its own essentially with no support from the operating system. Alternatively the source program code may work in conjunction with the copy mechanism of the operating system and may include code that participates in the copy operation essentially before copying during copying and or after copying as described below. For example the source program may wish to copy data onto the clipboard in a custom format such as an enhanced format e.g. a list format and or object format that only a certain other application program such as another instance of the same program can understand. Also the source program may not wish to have a certain format or formats included on the clipboard s available formats e.g. only encrypted content may be copied such as to limit plaintext or visible image pasting to only target programs that have the correct decryption key.

The target program to which the content may be pasted also may include paste code that participates in the paste operation. The participation essentially may be before paste takes place during the paste operation and or after the paste. For example a program can cancel a paste modify a property on the data object that contains the content in the various formats select a format other than the default format including a custom format even if the user has not requested paste special and the like.

To enable application programs to perform their own handling of copy and paste even when there is a default implementation for a given editor notification of an operation that is about to occur along with access to the data being used are provided. For copy a source application program may need to provide the data to the data object placed on the clipboard so that this data can be de serialized upon paste at some later time.

For paste a target application program may need to interpret the data object from the clipboard in a manner specific to the target application program or the default implementation of paste may not know how to paste custom data from a data object.

Because the application programs may now be included in the performance of copy and paste operations the programs may also need to be including in specifying whether associated commands Cut Copy Paste and Drag and Drop are enabled for a given focused element. Note that any text editor will have the same requirements and thus events are attached or fired from any editor that wishes to expose this functionality. In one implementation the copy command is issued as a bubbling event from an element it does not matter which element raised the event however the event starts from that element.

When a standard command such as copy is fired as a command event the editor component e.g. TextEditor handles this by default. The source application program is given an opportunity to participate in the copy process. More particularly an editor component attached either at or above the command issuing element receives a notification corresponding to the copy command. At this point the process of actually performing the copy operation starts.

More particularly in one example implementation step of represents the editor firing a Setting Data event to the source application program e.g. along with a possible format for inclusion. Note that such an event can be raised before this point in an alternative implementation. As part of the event the notification will pass an argument that allows access to the data object e.g. IDataObject . The IDataObject can be manipulated with normal IDataObject members.

If the source application program does not accept the format step the source cancels that format e.g. calls a cancel command method provided via event arguments. Otherwise that format for the data is included in the data object at step thereby building up the format or formats for the data that are available for pasting.

Steps and repeat the iterative process until no formats remain to be potentially added. Note that the source object thus has a way to determine exactly which format or formats are placed in the data object .

Before placing the data object onto the clipboard the source program is given a notification that the copy to the clipboard is about to take place. This gives a source program the ability to cancel any copying as represented at step . For example a source program that does not want any copying to take place need not separately cancel every possible format but rather can simply cancel the entire copy command at step . To this end in one implementation to cancel the source program sets a RoutedEventArgs.Handled member to true to prevent the copying of the data object to the clipboard from taking place. Alternatively the source program can handle the entire copy operation on its own and set the RoutedEventArgs.Handled member to true to prevent further copying by the editor .

If not handled canceled or handled directly via steps and the source program is also given an opportunity to add custom data e.g. one or more custom formats to the data object . As described above this extends the ability of a program to transfer data to an appropriate target program via the copy and paste mechanism.

The actual data object is pushed to the clipboard at step . At this time the source program is finished interacting with the copy mechanism . Note that if the command was a Cut command instead of a Copy copy command the selection of content that was copied is deleted. Note that even if canceled e.g. regardless of the Handled property s value the deletion will be allowed to take place.

Step represents getting the data object from the clipboard and step represents a pasting data event. In one implementation at this point the target program has access to the IDataObject via the event arguments. Step gives the target the opportunity to cancel the paste operation entirely or handle it on its own. For example the target program may set the RoutedEventArgs.Handled to True so that the process bypasses the editor s pasting steps. Again the target program is given the opportunity to participate in the paste operation including preventing or directly handling the paste before an actual paste occurs.

Step represents determining whether the target program accepts the data object in its current state. For example the data object may contain a number of data formats and the target program can determine as part of the pasting process whether it wants any of those formats. If not the target program can modify a property of the data object for example to enhance the data prior to the actual paste as described below.

If the data object is acceptable to the target program the target program can select the default format chosen for it e.g. the editor may determine the richest available data for the IDataObject on the clipboard for the target element and use that data for pasting. Otherwise the target program can select a different format as represented by step . This may be data in a format that the target deems more appropriate for its use e.g. plaintext instead of rich text or XAML. The selected data also may be custom data placed by the source as described above with reference to step of . The target program may give the user an opportunity to select a format e.g. a menu or other input mechanism as if the user selected Paste Special or the like even if not actually selected.

At step if not canceled at step a copy of the actual selected or default data is inserted from the data object into the target element of the target program e.g. the element that raised the event. As can be readily appreciated the target program is thus given opportunities to cancel the paste change the property of the data to be pasted or select a particular format from among those available.

The applicability of a command such as copy and paste is dependent on a number of factors including what element has focus and whether the command can be applied e.g. based on rules of the editor the state of the clipboard and so forth . Often the status of a command is used to enable or disable a toolbar button or menu item. The default implementations of copy and paste in one framework e.g. managed NET code Common Language Runtime or CLR is able to understand when commands are applicable. However in the case that an application program overrides the rules of the editor by customizing the handling of copy and paste operations the ability to determine the applicability of a command is not possible.

Therefore in one implementation an OnCheckingCommandStatusEvent is made available. This event is fired at the time that a command status is queried but before the status is reported. This event gives the target application program the opportunity to specify whether or not it knows how to apply data from the clipboard to the focused element. The application program can do this by calling a DataFormatAccepted method on the arguments. Note that it is not possible to unaccept the data since several consumers of the event could make different decisions however if at least one program can handle the data such a program should be allowed to do so.

Returning to step it is possible that the target program recognizes the data as having more than its straightforward meaning e.g. as text. For example contacts data may be present in the data object and a target application program that recognizes text on the clipboard as contacts data can do more with that data than simply paste the data as is. For example the target program can access a database indexed by something in the data and associate an image from that database with the contacts data.

With reference to drag and drop such concepts are primarily manifestations of the copy and paste events in a similar form. The events notifying of data transfer operations will be fired as described above. The application will need to listen to the QueryContinueDrag GiveFeedback and DragEvent DragEnter DragOver DragLeave and Drop e.g. to change the icon or handle drag and drop events appropriately.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

