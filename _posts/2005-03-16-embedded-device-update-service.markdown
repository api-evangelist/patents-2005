---

title: Embedded device update service
abstract: A method and system for updating an OS of an embedded device. The embedded device provides its current OS version information to a mobile operation network via a SMS message. The embedded device can provide its current OS version information to a mobile operation network in response to a request from a mobile operator network that has implemented the SyncML specifications promulgated by the Open Mobile Alliance (OMA). The mobile operator network interacts with the datacenter to provide the embedded devices's current OS version and get the address of the image update. The mobile operator service sends the address to the embedded device via another SMS message. The embedded device downloads the image update using the RF link via a global packet radio service (GPRS) connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716661&OS=07716661&RS=07716661
owner: Microsoft Corporation
number: 07716661
owner_city: Redmond
owner_country: US
publication_date: 20050316
---
Portable communication and or computing devices mobile devices can often be linked to various networks. For example cell phones can be used to browse web sites offered through the Internet. Additionally some cell phones can send and receive text messages in addition to offering normal voice communications using an RF communications link. Further some cell phones can receive and store data such as ring tones and themes e.g. for user interfaces via their RF communications link.

Some mobile devices have flash memory in which an operating system OS to be executed by a processor is stored. The mobile device may execute the OS directly from the flash memory i.e. an image of the OS stored in the flash memory . Such mobile devices are also referred to herein as embedded devices . An OS provider may update an OS from time to time to incorporate new features e.g. security features or correct bugs . However updating an OS also referred to herein as an image update on an embedded device can be burdensome due to limitations inherent in embedded devices and the way they are typically used.

Embodiments of the present invention have aspects directed toward systems and methods to provide image updates to embedded devices. According to one aspect a computer implemented method for providing an image update to an embedded device includes providing the embedded device s current OS version information to a datacenter which then determines the information needed to update the embedded device s OS to a later or desired version. The datacenter then provides an address from which the embedded device can download the needed update information.

According to another aspect the embedded device can provide its current OS version information to a mobile operation network via a SMS message. The mobile operator network can then interact with the datacenter to provide the embedded device s current OS version and get the address of the image update. The mobile operator service can then send the address to the embedded device via another SMS message. The embedded device can then download the image update using the RF link via a global packet radio service GPRS connection.

According to another aspect the embedded device can provide its current OS version information to a mobile operation network in response to a request from a mobile operator network that has implemented the SyncML specifications promulgated by the Open Mobile Alliance OMA . For example the mobile operator network may include an OMA Device Management Server OMA DMS that supports OMA SyncML operation with the embedded device having a corresponding OMA DMS client. The mobile operator network can then interact with the datacenter to provide the embedded device s current OS version and get the address of the image update. The mobile operator service can then send the address to the embedded device via a SMS message. The embedded device can then download the image update from the datacenter using the RF link via a global packet radio service GPRS connection.

In another aspect the datacenter includes a network interface implemented according to a web services model. As well as providing an interface to an external network e.g. the mobile operator network the web services can include or use APIs that support secure transfer of update information between the external network and update information stored in the datacenter.

In another aspect the datacenter generates an optimal image update based on the embedded device s current OS version and newer updates stored in the datacenter. The datacenter can determine a combination of canonical and difference updates that reduce the total size of the image update package.

In another aspect update information is stored in a database having tables with a column containing XML metadata that specifies interrelationships between a particular update and other updates stored in the database. The XML metadata column includes an extended metadata field that can be used to add more relationships as more updates are created and added to the database.

In another aspect the embedded device can provide its current OS version information to and download an image update from the datacenter via a network connection like the Internet. For example the embedded device can make an Internet connection through a link with a computer that can connect to the Internet. The datacenter can present a list of updates from which the user can select. The datacenter then provides the image update to the embedded device via the Internet and the computer linked to the embedded device.

In accordance with the above aspects a user may easily update the OS of an embedded device using an RF Internet or other communication link.

Embodiments of the present invention are described more fully below with reference to the accompanying drawings which form a part hereof and which show specific exemplary embodiments for practicing the invention. However embodiments may be implemented in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the invention to those skilled in the art. Embodiments of the present invention may be practiced as methods systems or devices. Accordingly embodiments of the present invention may take the form of an entirely hardware implementation an entirely software implementation or an implementation combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

In this embodiment embedded device has a processor a memory a display and a keypad . Memory generally includes both volatile memory e.g. RAM and non volatile memory e.g. ROM Flash Memory or the like . Embedded device includes an operating system which in this embodiment is resident in a flash memory portion of memory and executes on processor . Keypad may be a push button numeric dialing pad such as on a typical telephone a multi key keyboard such as a conventional keyboard or may not be included in the mobile device in deference to a touch screen or stylus. Display may be a liquid crystal display or any other type of display commonly used in mobile computing devices. Display may be touch sensitive and would then also act as an input device.

One or more application programs are loaded into memory and run on operating system . Examples of application programs include phone dialer programs e mail programs scheduling programs PIM personal information management programs word processing programs spreadsheet programs Internet browser programs and so forth. In one embodiment application programs include an image update application . Embedded device also includes non volatile storage within the memory . Non volatile storage may be used to store persistent information that should not be lost if embedded device is powered down. The applications may use and store information in storage such as e mail or other messages used by an e mail application contact information used by a PIM appointment information used by a scheduling program documents used by a word processing application and the like. A synchronization application not shown also resides on the mobile device and is programmed to interact with a corresponding synchronization application resident on a host computer to keep the information stored in the storage synchronized with corresponding information stored at the host computer. In some embodiments storage includes the aforementioned flash memory in which the OS and possibly other software is stored.

Embedded device has a power supply which may be implemented as one or more batteries. Power supply might further include an external power source such as an AC adapter or a powered docking cradle that supplements or recharges the batteries.

Embedded device is also shown with two types of external notification mechanisms an LED and an audio interface . These devices may be directly coupled to power supply so that when activated they remain on for a duration dictated by the notification mechanism even though processor and other components might shut down to conserve battery power. LED may be programmed to remain on indefinitely until the user takes action to indicate the powered on status of the device. Audio interface is used to provide audible signals to and receive audible signals from the user. For example audio interface may be coupled to a speaker for providing audible output and to a microphone for receiving audible input such as to facilitate a telephone conversation.

Embedded device also includes a radio that performs the function of transmitting and receiving radio frequency communications. Radio facilitates wireless connectivity between the embedded device and the outside world via a communications carrier or service provider. Transmissions to and from the radio are conducted under control of the operating system . In other words communications received by the radio may be disseminated to application programs via the operating system and vice versa.

The radio allows the embedded device to communicate with other computing devices such as over a network. The radio is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

End user computer can be implemented using any suitable computer that can communicate with embedded device via a link such as a USB interface an IR interface serial port etc. to allow synchronization of data between end user computer and embedded device . This synchronization data is typically persistent data used by applications such as email media players calendars spreadsheets text documents etc. and is different from the updates for the OS of the embedded device. In addition end user computer can communicate with datacenter via a network e.g. the Internet .

Mobile operator network is the entity that provides wireless communication services to be accessed using embedded device . For example mobile operator network can be provided and operated by a cellular telephone service provider such as for example Cingular Verizon Sprint or other mobile telephone operators that exist in many countries throughout the world. Mobile operator network in this illustrated embodiment supports wireless data services such as SMS and GPRS as well as mobile telephone voice service to embedded devices. Mobile operator network can also communicate via other networks wired or wireless such as for example the Internet. In some embodiments mobile operator network can communicate with datacenter via the Internet.

Datacenter in this embodiment is a network that provides storage and access to data used by embedded devices and mobile operator networks for content applications and application updates etc. For example datacenter can store and provide access to ring tones email settings UI themes applications updates and new applications for use in embedded devices via a network interface e.g. an Internet connection .

In accordance with this embodiment of the invention datacenter can also store and provide access to information to update the operating systems of embedded devices. For example OS update information can be uploaded and stored in datacenter by the OS vendor via an Internet connection.

Datacenter can then send embedded device a message e.g. a text message that includes an address e.g. a URL of where updated OS information can be accessed. Datacenter may send this message either after a request from embedded device received via a wireless message or from the network connection via end user computer or in response to a wireless message sent by datacenter via mobile operator network . Embedded device can then download the OS update information e.g. an image of the updated OS or updated portion s of the OS from datacenter either wirelessly e.g. a GPRS connection or from the network connection via end user computer .

At a decision block the availability of an OS update i.e. an image update for an embedded device is determined. For example in an embodiment using system the vendor of the OS may signal datacenter that a complete new version of the OS or patch to the OS is available for upload via a network connection such as the Internet.

If at decision block it is determined that an update is available at a block the update is uploaded. For example in an embodiment using system the vendor can upload the update via a secure web service implemented by datacenter which can also perform an authentication process to ensure that the update is provided by the true OS vendor. The operational flow then proceeds to a decision block described below. In addition if at decision block it is determined that an update is not available the operational flow also proceeds to decision block .

At decision block the availability of configuration information which includes the version of the OS of the embedded device is determined. For example in an embodiment using system embedded device can provide this configuration information to datacenter via a wireless text message via mobile operator network or via a network connection using end user computer . This message can include an identifier e.g. a telephone number of the embedded device as well as the version number of the embedded device s OS.

If at decision block it is determined that the embedded device s configuration is not available the operational flow returns to block . Otherwise the operational flow proceeds to a block .

At block the embedded device s configuration information is received. For example in an embodiment using system datacenter receives this configuration information. As previously described this configuration information includes the version of the OS and can be received via a text message e.g. a SMS message sent by embedded device . In other embodiments embedded device can send a message via a network connection e.g. a HTTP request with the OS version included in the HTTP header .

At a block an image update is determined for the embedded device. The image update is generated so that it will update the OS to the most recent version or to a selected version from the OS version currently stored in the embedded device. For example in an embodiment using system if the OS version currently stored in embedded device is version 5.2 and the most recent version of the OS is version 5.4 which results from the addition of the two most recent patches then datacenter can determine the image update for the embedded device must include the two most recent patches. Basically in this embodiment datacenter performs block to determine what version OS is in embedded device and then performs block to determine what embedded device needs to have an up to date OS.

At a block an address of the image update determined at block is provided to the embedded device. For example in an embodiment using system datacenter stores the image update in a datastore and provides the address e.g. a URL at which the image update is stored. In one embodiment datacenter can provide the URL to embedded device by sending a SMS message that includes the URL via mobile operator network .

At a block the image update is downloaded to the embedded device. For example in an embodiment using system datacenter downloads the image update via mobile operator network using a GPRS connection in response to embedded device sending a request for the data residing at the URL provided at block . In another embodiment datacenter can download the image update via an Internet connection in response to a HTTP request for the data residing at the URL.

Although the above operational flow is described sequentially in other embodiments some operations may be performed in different orders or concurrently.

In this embodiment of system embedded device includes a SMS listener a firmware Configuration Service Provider CSP a download agent UI data transfer module DTM and a wireless data connection interface also referred to herein as data connection . In this embodiment data connection is a GPRS connection Firmware CSP is an OMA SyncML client according to the OMA SyncML standard and DTM is a module of the OS that manages data transfers using GPRS so that the transfers are secure and authenticated despite interruptions in the transfer which can be common in some scenarios .

Mobile operator network in this embodiment includes an OMA DMS server a SMS Center SMSc server and an end user portal server . OMA DMS server conforms to the aforementioned OMA DMS standard. SMSc server and end user portal server can be implemented using any suitable commercially available server components software.

In this embodiment datacenter includes an untrusted or DMZ section that includes a web services server s also referred to herein as web services and a web file server s also referred to herein as web file server and is protected using one or more firewalls not shown . This embodiment of datacenter also includes an internal or trusted zone section that includes metadata service MDS server s also referred to herein as MDS server and a database cluster that stores MDS system information image binary files and package binary files generated for particular embedded devices based on their OS version information. In this embodiment MDS server exposes an application program interface API that allow MDS web services and web file server to initiate functions operations by MDS server . Some of the functions i.e. methods of the MDS server API are described further below.

In one scenario a patch is uploaded to datacenter as indicated by arrow . For example the vendor of the OS of embedded device can create and upload patch using MDS web services supported by web services servers .

OMA DMS server of mobile operator network which conforms with the OMA DMS standards promulgated by the Open Mobile Alliance OMA sends a notification trigger to embedded device as indicated by an arrow . In this embodiment OMA DMS server on a fairly regular schedule sends notification triggers to embedded devices in its coverage area in accordance with the OMA DMS standard. In particular OMA DMS server causes SMS Center server to send the notification trigger to embedded device via a SMS message. This SMS message conforms to the OMA SyncML standard promulgated by the OMA.

Embedded device in response to receiving the notification trigger sends its configuration information to datacenter as indicated by an arrow . In this embodiment SMS listener of embedded device detects and receives the notification trigger. In response SMS Listener causes Firmware CSP to send a DevInfo object specified in the OMA SyncML standard containing the OS version information to OMA DMS server .

OMA DMS server then sends the DevInfo object to datacenter as indicated by an arrow . In this embodiment OMA DMS server makes a connection with MDS web services of datacenter and then sends the DevInfo object to MDS server using MDS web services . In one embodiment MDS web services expose APIs that allow OMA DMS server to send the DevInfo object to MDS server as well as perform other functions needed to support other data transfers.

In one embodiment MDS server then determines which update information is needed to update the OS of embedded device . In this embodiment MDS web services causes MDS server to determine the update image needed by embedded device by making a call to a Define Package method of the MDS server API as indicated by an arrow . In one embodiment the Define Package method compares the OS version information included in the DevInfo object with images information stored in database cluster to determine which canonical and or patch es if any are missing from the embedded device s OS. As used herein a canonical is an image of an entire OS version as opposed to a patch that is added to an OS version. In this scenario patch was uploaded before OMA DMS sent the notification trigger to embedded device so an image update will be needed.

MDS server then builds an update package to include any image binary file s defined by the Define Package method as indicated by an arrow . In this embodiment MDS web services causes MDS server to build the update package by making a call to an Update Package Generator method of the MDS server API. In one embodiment the Update Package Generator method gets binary files from an image binaries datastore of database cluster corresponding to the canonical and or patch es defined when the Define Package method was called.

MDS server then signs the package generated by the Update Package Generator method with an OEM or Operator certificate as indicated by an arrow . In this embodiment MDS web services causes MDS server to sign the package by making a call to a Package Signing method of the MDS server API. In one embodiment the Package Signing method signs the package as described in the aforementioned U.S. Patent Application entitled Secure Certificate Enrollment of Device Over a Cellular Network . This embodiment of the Package Signing method creates a token associating the token with identification information of embedded device e.g. the telephone number of the embedded device . In other embodiments the package need not be signed.

MDS server then stores the package and token in a device package datastore of database cluster as indicated by an arrow . In this embodiment MDS web services causes MDS server to store the package by making a call to an File Publisher method of the MDS server API which returns to MDS web services a URL for the location of the stored package.

MDS web services then provides the URL of the stored package to OMA DMS server as indicated by an arrow . In this embodiment MDS web services sends the URL to OMA DMS server via a network connection.

OMA DMS server then sends the URL to the embedded device via an SMS message as indicated by an arrow . In this embodiment the message is a User Confirm Alert according to the aforementioned OMA SyncML standard and the URL contains the token created by the aforementioned Package Signing method. The embedded device can receive the User Confirm Alert via SMS listener .

In response to receiving the User Confirm Alert embedded device notifies the user of the new update which the user can then accept. For example the notification can be provided via download agent UI . If the user accepts the update embedded device can download the image update i.e. the stored binary package using DTM and data connection . In other embodiments embedded device can be connected to end user computer and download the image update through an Internet connection to web file server . Embedded device can then install the downloaded image update using firmware CSP .

After the installation process embedded device then sends a SMS message to OMA DMS server indicating the result of the installation process as indicated by an arrow . In this embodiment the message is a final result Alert according to the aforementioned OMA SyncML standard.

At a block an OMA SyncML notification trigger is sent to an embedded device. In one embodiment a mobile operator network sends a text message to the embedded device that causes the embedded device to reply with its OS version information. For example OMA DMS causes SMSc server to send the notification trigger to embedded device via a SMS message that conforms to the OMA SyncML standard promulgated by the OMA. In this embodiment the rest of operational flow is performed by a datacenter such as datacenter of .

At a block information regarding the OS version residing on the embedded device is received from the embedded device. In one embodiment the datacenter receives the OS version information from the embedded device via the mobile operator network. For example in an embodiment using system embedded device in response to receiving the notification trigger sends its configuration information to datacenter via OMA DMS . More particularly OMA DMS server makes a connection with MDS web services and then sends the aforementioned DevInfo object to MDS server using MDS web services .

The datacenter then determines the image update needed by the embedded device by comparing the received OS version information with the most recent OS update s . Alternatively the embedded device may include information requesting specific OS update. In one embodiment the datacenter determines the image update using a two step process as indicated by blocks and in which canonical and difference updates are determined. As previously described a canonical update corresponds to an entire OS image rather than a portion of an OS image. In this embodiment canonical and difference updates are stored by the datacenter. For example the datastore of canonical and difference updates can be implemented in the image binaries database of database cluster . An example datastore is shown in with canonical updates including version 3 version 5 and version 6 and difference updates including patches that update an OS from version 1 to version 3 version 2 to version 4 version 3 to version 8 version 4 to version 5 version 5 to version 6 version 6 to version 7 and version 7 to version 8. In this example the most recent OS version is version 8.

Returning to at block the datacenter determines an optimal canonical update based on the received OS version information and the desired OS version. If for example the embedded device has OS version 2 and the most recent OS version is desired i.e. version 8 in this example the version 3 canonical is an optimal selection because then the difference update from version 3 to version 8 can be used to form the most recent version of the OS. In contrast if the version 6 canonical were selected then two difference updates i.e. version 6 to version 7 and version 7 to version 8 must be used to form version 8 of the OS.

At block the datacenter then determines an optimal difference update based on the canonical selected at block and the desired OS version. Using the example described above for block because the version 3 canonical was selected at block the datacenter would then select difference update from version 3 to version 8. For example in an embodiment using system MDS web services causes MDS server to determine the update image needed by embedded device by making a call to a Define Package method of the MDS server API.

At a block the datacenter generates and stores an image update package based on the update determined at blocks and . The stored image update package can be signed. For example in an embodiment using system MDS server builds an update package to include any image binary file s defined by the Define Package method. MDS web services causes MDS server to build the update package by making a call to the Update Package Generator method which gets binary files from the image binaries datastore of database cluster . MDS server then stores the package in the device package datastore of database cluster by making a call to the File Publisher method which returns to MDS web services a URL for the location of the stored package.

At a block the datacenter sends an address of the stored package to the embedded device. In one embodiment the datacenter sends a text message with a URL of the stored package via the mobile operator network. For example in an embodiment using system MDS web services provides the URL of the stored package to OMA DMS server which then sends the URL to the embedded device via an SMS message. In one embodiment the SMS message is a User Confirm Alert according to the aforementioned OMA SyncML standard and the URL contains the token created by the aforementioned Package Signing method.

At a block the datacenter then downloads the image update if the user of the embedded device accepts the update. In one embodiment the user can send the datacenter a text message accepting the update via the mobile operator network. The datacenter can then download the image update to the embedded device using a GPRS connection. For example in an embodiment using system embedded device notifies the user of the new update in response to the User Confirm Alert which the user can then accept. If the user accepts the update embedded device can download the image update i.e. the stored binary package using DTM and data connection . In other embodiments embedded device can be connected to end user computer and download the image update through an Internet connection to web file server .

Although the above operational flow is described sequentially in other embodiments some operations may be performed in different orders or concurrently.

In this embodiment of system embedded device is substantially similar to the embedded device described above in conjunction with . In addition this embodiment of embedded device includes an interface to a computer not shown such as end user computer which in turn can form a connection with datacenter . In this embodiment the connection between the computer and the datacenter is the Internet.

In one scenario patch is uploaded to datacenter as indicated by arrow . This operation is substantially similar to the patch upload operation described above in conjunction with .

In this scenario embedded device selects an update by accessing portal of mobile operator network as indicated by an arrow . The user can request updates independently of whether a new patch is uploaded to datacenter but in this scenario the patch is uploaded before the user s selection to illustrate the entire update process.

Mobile operator network then sends a patch request to datacenter as indicated by an arrow . In one embodiment portal sends the patch request to web services . In addition mobile operator network sends a download trigger message to embedded device as indicated by an arrow . In one embodiment the download trigger message is an SMS message.

In response to the download trigger in this embodiment embedded device sends information related to its OS version to datacenter as indicated by an arrow . In one embodiment the OS version information is included in a message sent to web file server via the Internet. In some embodiments the OS version information is included in a DevInfo object substantially similar to the DevInfo object described above in conjunction with except that the DevInfo object is included in the HTTP header of the message.

Web file server then sends the DevInfo object to MDS server . In one embodiment MDS server then determines which update information is needed to update the OS of embedded device . In this embodiment MDS web services causes MDS server to a determine the update image requested by embedded device b build an update package c sign the update package and c store the update package in database cluster by making calls to the Define Package method the Update Package Generator method the Package Signing method and the File Publisher method as previously described for system .

Web file server then provides the URL of the stored package to embedded device via the Internet as indicated by an arrow . In response embedded device notifies the user of the new update which the user can then accept. For example the notification can be provided via download agent UI . If the user accepts the update embedded device can download the image update i.e. the stored binary package via the Internet. Embedded device can then install the downloaded image update using firmware CSP .

With reference to one exemplary system for implementing the invention includes a computing device such as computing device . Computing device may be configured as a client a server mobile device or any other computing device. In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more applications and may include program data . In one embodiment application includes an authentication application . This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included.

Computing device also contains communication connections that allow the device to communicate with other computing devices such as over a network. Communication connection is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

