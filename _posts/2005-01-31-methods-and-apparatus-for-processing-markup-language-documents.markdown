---

title: Methods and apparatus for processing markup language documents
abstract: A method for facilitating the processing of markup language documents, e.g., XML documents, uses a code generator that creates programs configured to read dynamic XML documents at run time, avoiding many of the complexities arising from the use of conventional “XML Parse” statements. In one embodiment, this process involves (1) creating a template document using the markup language, wherein the template document includes a set of tags associated with the markup language documents; (2) parsing the template document to determine a data structure corresponding to the tags in the template document; and (3) generating an application program in the programming language (e.g., COBOL), wherein the application program includes a definition of the data structure, and is configured to read, during run-time, the markup language document and generate a corresponding set of data elements corresponding to the data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683318&OS=08683318&RS=08683318
owner: American Express Travel Related Services Company, Inc.
number: 08683318
owner_city: New York
owner_country: US
publication_date: 20050131
---
This application claims priority to and the benefit of U.S. Provisional Application Ser. No. 60 587 701 filed Jul. 14 2004 and entitled System and Method to Facilitate Reading XML Documents in COBOL which is hereby incorporated by reference.

The present invention generally relates to the reading and processing of markup language documents e.g. extensible markup language XML documents using traditional procedural programming languages e.g. COBOL and the like .

Many organizations have discovered that the cost effort and risk required to replace older legacy systems with modern software and database systems are overwhelming. Rather organizations continue to place an emphasis on supporting legacy systems by bridging gaps between old and new computing technologies wherein bridging the gap often includes modification of existing legacy data and programming languages.

COBOL is one such programming language. Despite the existence of modern object oriented programming languages and Internet based applications COBOL will likely remain a vital part of many organizations computing centers. Traditional COBOL however lacks some of the flexibility of modern languages such as the ability to read extensible markup language XML documents.

XML resembles Hypertext Markup Language HTML in appearance and structure however XML is functionally different HTML specifies how to display data while XML is used to describe data. Accordingly XML has provided developers with a means for displaying different types of data in a consistent manner. Generally a developer may create formatting instructions within a data type definition DTD file. When a data type is defined a developer need only add an XML tag within an HTML document which corresponds to a tag in the DTD.

Because COBOL is a legacy programming language it must often be retrofitted to support various functionality relating to newer computing technologies. Technologies such as XML were not designed with older computing technologies such as COBOL in mind. Modifying the language or creating add on products most often results in extra layers of sophistication and complexity for the developer. One such example is XML PARSE which is a function included within IBM Enterprise COBOL. While XML PARSE provides an effective means to parse and process various types of XML it may still present a formidable task for developers in that they must be aware of all of the events associated with the verb. Further it typically requires the creation of complex COBOL structures that mimic XML data structures.

In general the invention provides a method for facilitating the processing of markup language documents e.g. XML documents through the use of a code generator that creates programs configured to read dynamic XML documents at run time while minimizing or avoiding many of the complexities arising from the use of conventional XML Parse statements. In one embodiment this process involves 1 creating a template document using the markup language wherein the template document includes a set of tags associated with the markup language documents 2 parsing the template document to determine a data structure corresponding to the tags in the template document and 3 generating an application program in the programming language e.g. COBOL wherein the application program includes a definition of the data structure and is configured to read during run time the markup language document and generate a corresponding set of data elements corresponding to the data structure.

In some organizations the transformation of the XML message to a COBOL layout is performed on a middleware layer. This additional layer increases operating costs and response times. The manual creation of the transformation logic is labor intensive and cumbersome and costly to maintain and modify. Implementing this invention may lower operating expenses over the middleware approach because it may save about 50 of the development cost as the manually intensive transformation logic definition is avoided. The invention also reduces associated maintenance costs as most of the maintenance and versioning of software is confined to the requester and provider i.e. the additional layer is not present to be modified. Avoiding transformation on the middleware layer may effectively increase the capacity of the middleware server for other tasks by up to about 40 . The latency associated with the transformation is greatly reduced up to about 75 by this approach and improves the efficiency of processing for every message that has a COBOL process somewhere in its path. The invention also increases the quantity quality and or performance of existing services. The total throughput of messages between requester and provider can improve significantly due to for example the latency reduction mentioned above and may result in better system response and this in turn may lead to higher customer satisfaction.

The following description is of exemplary embodiments of the invention only and is not intended to limit the scope applicability or configuration of the invention in any way. Rather the following description is intended to provide a convenient illustration for implementing various embodiments of the invention. As will become apparent various changes may be made in the function and arrangement of the elements described in these embodiments without departing from the scope of the invention.

Referring now to an exemplary method in accordance with the invention will now be described. Initially in step a template XML document is created which includes substantially all possible tags both optional and mandatory that are likely to be encountered in the particular context. The tags may be populated for example with sample values that represent the maximum length of the tag and may be repeated to represent multiple occurrences. Alternatively using a user interface the developer can adjust the field lengths and array sizes as desired. In the illustrated embodiment the system uses the maximum lengths.

The various tags used in XML documents are known in the art and are covered in a variety of language specifications and developer publications. See e.g. Elliotte Harold IDG 1998 which is hereby incorporated by reference.

With momentary reference to a typical user interface may appear as shown including a region for selecting the appropriate XML file a region for specifying the name and attributes of the output source file and various options for generating and editing the appropriate copybooks and API code. It will be appreciated that a variety of user interfaces may be employed and that the illustrated interface is not intended to be limiting.

Referring once again to in step the template XML document is fed through the XML READ tool. This may be completed for example via the user interface just described or any other appropriate interface or may be completed automatically.

In steps the system then reads records from the template XML document and creates a corresponding XML string. A suitable parsing statement is then used to parse the XML string e.g. the IBM COBOL XML Parse statement. step . For a description of the IBM COBOL XML Parse statement see e.g. Version 3 Release 3 Third Ed. February 2004 which is hereby incorporated by reference.

Next in step the system intercepts the various XML events and generates the XML COBOL data structure that is used in the linkage section as fixed format output. The various XML events that are intercepted are described in further detail below.

In step the system generates suitable COBOL procedure division statements e.g. program code to extract each tag and attribute into fixed format layout. This may be completed for example using ISPF edit macros and static code snippets. With the program code generated in step subsequent XML documents may be processed as described above in conjunction with .

Having thus given on overview of the illustrated method a detailed discussion of the various procedures will now be discussed. illustrates an exemplary method of parsing the template XML document to create a suitable COBOL data structure steps in . As shown the exemplary system in steps parses the XML by intercepting various XML events and generating the corresponding COBOL data structure to be used in the linkage section as fixed formal output.

The XML is suitably parsed step . Each event of START OF ELEMENT ATTRIBUTE NAME and the like generates a GRP field that reflect the tag attribute in fixed format data structure step . Similarly each event of CONTENT CHARACTERS and CONTENT CHARACTER generates a COBOL variable with appropriate length step . The tags that have content are given variable names of LS XML xxxx with appropriate length wherein xxxx represents the tag name. Each event of ATTRIBUTE CHARACTERS and ATTRIBUTE CHARACTER generates a COBOL variable with a name of LS ATR xxxxx where xxxx represents the attribute name step .

With respect to the naming conventions described above it will be appreciated that any suitable convention and combination of characters may be used and that variable names given above are merely examples and are in no way limiting.

If there is a parsing error during the previous steps and the error is not fatal the system loops back to step and continues parsing until complete . In the case of a fatal error a suitable error procedure is called step . An example of a non fatal error is where the XML error code is either between 49 and 100 or between 299 and 500.

Finally in step the system generates a Linkage data structure with the fields identified in steps and . In one embodiment the data structure follows the same hierarchy as the XML document.

Next in step the system creates a COBOL XML PARSE statement corresponding to the inputted XML document. shows an example XML PARSE statement.

In step the system creates a COBOL Section to contain the code that follows. This section preferably processes for example the following XML events START OF ELEMENT ATTRIBUTE NAME ATTRIBUTE CHARACTERS ATTRIBUTE CHARACTER END OF ELEMENT CONTENT CHARACTERS and CONTENT CHARACTER 

Next in step the system generates necessary code for each tag that participates in an array so that the appropriate indexes are maintained allowing data to be moved to the corresponding occurrence. In one embodiment the generated code is configured such that each time a new element is started the tag is evaluated to determine whether it participates in an array and its dimension is appropriately updated. Similarly the system generates appropriate code to decrement the dimension when an end of element occurs. An element or attribute name is identified by comparing the entire hierarchy of elements. shows an example section of such code.

In step the system generates code configured to extract the content character s and attribute character s of an element or attribute. In the illustrated embodiment this involves creating code comprising a series of if conditions to trap the appropriate tag or attribute. An element or attribute name is then identified by comparing the entire hierarchy of elements attributes. This is intended to eliminate any misinterpretation due to potential duplicate tag names in the XML. For instance to uniquely identify the tag in the template XML shown below the tool will generate the example code shown in .

As a result of the process described above the template XML document is used to produce corresponding COBOL code. In this regard shows an example printout of template XML being fed to the XML READ tool while the corresponding COBOL data structure including the linkage section is shown in . The complete procedure division statements generated by the tool for the above XML are .

As will be appreciated by one of ordinary skill in the art the present invention may be embodied as a customization of an existing system an add on product upgraded software a stand alone system e.g. kiosk a distributed system a method a data processing system a device for data processing and or a computer program product. Accordingly the present invention may take the form of an entirely software embodiment an entirely hardware embodiment or an embodiment combining aspects of both software and hardware. Furthermore the present invention may take the form of a computer program product on a computer readable storage medium having computer readable program code means embodied in the storage medium. Any suitable computer readable storage medium may be utilized including hard disks CD ROM optical storage devices magnetic storage devices and or the like.

For the sake of brevity conventional data networking application development and other functional aspects of the systems and components of the individual operating components of the systems may not have been described in detail herein. Furthermore the connecting lines shown in the various figures contained herein are intended to represent exemplary functional relationships and or physical couplings between the various elements. It should be noted that many alternative or additional functional relationships or physical connections may be present in a practical system. The various system components discussed herein may include one or more of the following a host server or other computing systems including a processor for processing digital data a memory coupled to the processor for storing digital data an input digitizer coupled to the processor for inputting digital data an application program stored in the memory and accessible by the processor for directing processing of digital data by the processor a display device coupled to the processor and memory for displaying information derived from digital data processed by the processor and a plurality of databases. Various databases used herein may include client data merchant data financial institution data and or like data useful in the operation of the present invention. As those skilled in the art will appreciate user computer may include an operating system e.g. Windows NT 95 98 2000 OS2 UNIX Linux Solaris MacOS etc. as well as various conventional support software and drivers typically associated with computers. The computer may include any suitable personal computer network computer workstation minicomputer mainframe or the like. User computer can be in a home or business environment with access to a network. In an exemplary embodiment access is through a network or the Internet through a commercially available web browser software package.

As used herein the term network shall include any electronic communications means which incorporates both hardware and software components of such. Communication among the parties in accordance with the present invention may be accomplished through any suitable communication channels such as for example a telephone network an extranet an intranet Internet point of interaction device point of sale device personal digital assistant cellular phone kiosk etc. online communications satellite communications off line communications wireless communications transponder communications local area network LAN wide area network WAN networked or linked devices keyboard mouse and or any suitable communication or data input modality. Moreover although the invention is frequently described herein as being implemented with TCP IP communications protocols the invention may also be implemented using IPX Appletalk IP 6 NetBIOS OSI or any number of existing or future protocols. If the network is in the nature of a public network such as the Internet it may be advantageous to presume the network to be insecure and open to eavesdroppers. Specific information related to the protocols standards and application software utilized in connection with the Internet is generally known to those skilled in the art and as such need not be detailed herein. See for example DN ISP 1998 J2 C various authors Sybex 1999 DRER MHTML 4.0 1997 and L TCP IP CE 1997 and DGBT HTTP TDG 2002 the contents of which are hereby incorporated by reference.

The various system components may be independently separately or collectively suitably coupled to the network via data links which includes for example a connection to an Internet Service Provider ISP over the local loop as is typically used in connection with standard modem communication cable modem Dish networks ISDN Digital Subscriber Line DSL or various wireless communication methods see e.g. GH UDC 1996 which is hereby incorporated by reference. It is noted that the network may be implemented as other types of networks such as an interactive television ITV network. Moreover the system contemplates the use sale or distribution of any goods services or information over any network having similar functionality described herein.

Many of the communications inputs storage databases or displays discussed herein may be facilitated through a website having web pages. The term web page as it is used herein is not meant to limit the type of documents and applications that might be used to interact with the user. For example a typical website might include in addition to standard HTML documents various forms Java applets JavaScript active server pages ASP common gateway interface scripts CGI extensible markup language XML dynamic HTML cascading style sheets CSS helper applications plug ins and the like.

It should be understood that the detailed description and specific examples indicating exemplary embodiments of the present invention are given for purposes of illustration only and not as limitations. Many changes and modifications within the scope of the instant invention may be made without departing from the spirit thereof and the invention includes all such modifications. Corresponding structures materials acts and equivalents of all elements in the claims below are intended to include any structure material or acts for performing the functions in combination with other claim elements as specifically claimed. The scope of the invention should be determined by the appended claims and their legal equivalents rather than by the examples given above.

