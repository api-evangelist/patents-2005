---

title: Privacy friendly malware quarantines
abstract: The present invention provides a system, method, and computer-readable medium for quarantining a file. Embodiments of the present invention are included in antivirus software that maintains a user interface. From the user interface, a user may issue a command to quarantine a file or the quarantine process may be initiated automatically by the antivirus software after malware is identified. When a file is marked for quarantine, aspects of the present invention encode file data with a function that is reversible. Then a set of metadata is identified that describes attributes of the file including any heightened security features that are used to limit access to the file. The metadata is moved to a quarantine folder, while the encoded file remains at the same location in the file system. As a result, the encoded file maintains the same file attributes as the original, non-quarantined file, including any heightened security features.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716743&OS=07716743&RS=07716743
owner: Microsoft Corporation
number: 07716743
owner_city: Redmond
owner_country: US
publication_date: 20050114
---
The present invention relates to computing devices and more particularly to protecting a computing device against malware.

As more and more computers and other computing devices are interconnected through various networks such as the Internet computer security has become increasingly more important particularly from invasions or attacks delivered over a network or over an information stream. As those skilled in the art will recognize these attacks come in many different forms including but certainly not limited to computer viruses computer worms system component replacements denial of service attacks even misuse abuse of legitimate computer system features all of which exploit one or more computer system vulnerabilities for illegitimate purposes. While those skilled in the art will realize that the various computer attacks are technically distinct from one another for purposes of the present invention and for simplicity in description all malicious computer programs will be generally referred to hereinafter as computer malware or more simply malware.

When a computer system is attacked or infected by a computer malware the adverse results are varied including disabling system devices erasing or corrupting firmware applications or data files transmitting potentially sensitive data to another location on the network shutting down the computer system or causing the computer system to crash. Yet another pernicious aspect of many though not all computer malware is that an infected computer system is used to infect other computers.

A traditional defense against computer malware and particularly computer viruses and worms is antivirus software. Generally described antivirus software scans data looking for identifiable patterns associated with known computer malware. Frequently this is done by matching patterns within the data to what is referred to as a signature of the malware. One of the core deficiencies in this malware detection model is that an unknown computer malware may propagate unchecked in a network until a computer s antivirus software is updated to identify and respond to the new computer malware.

When a malware infection occurs the infection may be handled in one of many different ways. Preferably the infected computing device is capable of being cleaned so that the malware is no longer resident. However in some instances the malware may be configured to employ self preservation techniques to resist being cleaned. In this instance cleaning the computing device may not be feasible or may only be possible with a software update. Alternatively files associated with the malware may be deleted from the computing device. However as known to those skilled in the art and others some malware attach to innocuous hosts which contain user data that will be lost if an infected file is deleted.

In yet another alternative the malware may be quarantined. Typically a quarantine occurs when data associated with the malware is altered to prevent execution of the malware. Quarantining malware is especially useful when a file may have been incorrectly identified as malware the user wants to delay cleaning a file until a later time or an infected file contains user data that needs to be saved. In some existing systems a quarantined file is both prevented from executing program code and concealed from antivirus software that scans a computing device for malware. For example one method of implementing a quarantine includes moving a file to a quarantine folder along with associated metadata that describes the location of the file. Among other things the quarantine folder has established settings that prevent files from executing program code. To conceal the quarantined file from antivirus software the data in the file is typically encoded. As a result the file is not capable of causing harm to a computing device and will not be identified as malware if scanned by antivirus software.

In instances when one or more files are moved attributes of the files may change in ways that are unexpected by users. For example to prevent some users from accessing unauthorized data heightened file system security features are implemented on some files directories and not others. In this instance a file may be encrypted and therefore inaccessible to unauthorized users who do not possess a key. However if the file is moved the new directory that stores the file may not maintain the same heightened security features as the directory that originally stored the file. Thus in instances when a file infected with malware is moved to a quarantine folder user data may become accessible to unauthorized users even though the file was originally encrypted in a directory that implemented security features designed to prevent unauthorized access. More generally attributes associated with a file in one directory may change in ways that are unexpected to users when the file is moved to a different directory.

In light of the above identified problems it would be beneficial to have a system and method of quarantining a file while allowing the file to retain its original attributes.

The present invention provides a way to quarantine a file that may be infected with malware. Data in a quarantined file is incapable of causing harm to a computer even though the file retains its original attributes. Also files marked for quarantine are altered so that file data will not be identified as malware by antivirus software. One aspect of the present is a method for generating a quarantined file. More specifically the method includes encoding a file that may be infected with malware with a function that is reversible. Then a set of metadata is identified that describes attributes of the file including any heightened security features that are used to limit access to the file. The metadata is stored in both a quarantine folder and with the encoded file data located in the file system. In this regard the encoded file data is combined with the set of metadata to form a new quarantine file. The attributes associated with the quarantine file are set to match the attributes that were associated with the original file which is deleted from the computing device.

Another aspect of the present invention is a method for restoring a quarantine file to its original state. To satisfy certain commands available from antivirus software the present invention restores a quarantine file that contains encoded data back into its original decoded state. For example antivirus software may be updated with new virus definitions. In this instance the antivirus software may issue a command to perform a scan of a quarantine file to determine whether 1 the quarantine file is in fact infected with malware and 2 whether the quarantine file may be cleaned of the malware. To satisfy these types of commands the quarantine file is decoded and its original attributes are reinstated. Finally a determination is made regarding whether the decoded file data is valid. If the file data is not valid an error occurred and an exception handler attempts to recover from the error condition.

In yet another aspect of the present invention a software system for quarantining a file and restoring the file in response to commands is provided. The software system includes but is not limited to a quarantine module user interface and a quarantine folder. In one embodiment of the present invention the quarantine module is operative to generate a quarantine file that contains both encoded file data and metadata that describes attributes of the original file. A copy of the metadata is stored in the quarantine folder along with metadata associated with other files that are quarantined. The user interface is operative to search the quarantine folder for metadata associated with quarantined files and display the metadata to users. Also the user interface accepts commands that include but are not limited to commands to quarantine restore submit find rescan and delete a quarantine file.

The present invention provides a system method and computer readable medium for quarantining a file. Data in a quarantined file is incapable of causing harm to a computer even though the file retains the same attributes as the original non quarantined file. For example file data is stored in the same location in the file system without being moved to a special folder. Also a quarantine file is altered so that file data will not be identified as malware by antivirus software that performs a scan of the file system. Embodiments of the present invention are included in antivirus software that maintains a user interface. From the user interface a user may issue a command to quarantine a file or the quarantine process may be initiated automatically by the antivirus software after malware is identified. In any event when a file is marked for quarantine aspects of the present invention encode data in the file with a function that is reversible. Then a set of metadata is identified that describes attributes of the file including any heightened security features that are used to limit access to the file. The metadata is stored in both a quarantine folder and with the encoded file data located in the file system. In this regard the encoded file data is combined with the set of metadata to form a quarantine file. The attributes associated with the quarantine file are set to match the attributes that were associated with the original non quarantined file.

Although the present invention will primarily be described in the context of quarantining a file that is identified as being infected with malware those skilled in the relevant art and others will appreciate that the present invention is also applicable to other types of software systems. The following description first provides an overview of a system in which the present invention may be implemented. Then methods that implement the present invention are described. The illustrative examples provided herein are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Similarly any steps described herein may be interchangeable with other steps or combinations of steps in order to achieve the same result.

Referring now to the following is intended to provide an exemplary overview of one suitable computer environment in which aspects the invention may be implemented. The illustrated environment comprises an antivirus application quarantine folder and user domains and that are associated with users and . As illustrated in the antivirus application includes an antivirus engine quarantine module and user interface . Also user domains and maintain FILE A FILE B and FILE C which are associated with MANIFEST A MANIFEST B and MANIFEST C respectively.

Since many components and functions of the antivirus application and antivirus engine are not important for an understanding of the present invention they are not illustrated in or described in the accompanying text. With respect to the present invention the antivirus engine scans files to determine whether the files are infected with malware. When malware is detected an attempt to clean the malware is undertaken. However as described above in some instances cleaning the malware may not be possible. When this occurs software implemented routines in the quarantine module described below may be used to create a quarantine file. In one embodiment of the present invention when the antivirus engine is updated with current malware definitions files that are quarantined are scanned for malware by the antivirus engine to determine whether the files are actually infected.

Increasingly computing devices are configured to serve multiple users each user having a different user profile that defines a computer configuration with regard to that user. Multiple user scenarios are especially prevalent in networking environments in which users share data. In this type of system computing devices track which users have access to resources stored in the network. For example some computing devices maintain access control lists ACLs that define which users or groups of users that may access particular files. For purposes of the present application the resources that a user may access is referred to as the user domain. Thus as illustrated in user may access file since the file is in the domain associated with the user . However user may not access files and since those files are only in the domains that are associated with users and .

As illustrated in the antivirus application includes a quarantine module for quarantining files that may be infected with malware. In general terms describing one embodiment of the present invention the quarantine module creates a quarantine file that is comprised of two components. The first component consists of file data encoded by routines in the quarantine module . Since the function used to encode the data is reversible the data may be decoded at some later time. The second component is a manifest that consists of a set of metadata that describes attributes of the file that is being quarantined. The set of metadata includes traditional metadata that is typically associated with a file including name path in the file system ACLs and the like. Also the set of metadata in the manifest includes data that describes the quarantine such as time of the quarantine current version number of the antivirus engine and the malware identified. For example illustrates three quarantine files and that consist of a file with encoded data and a manifest. More specifically FILE A and MANIFEST A collectively form quarantine file . Similarly FILE B and FILE C along with MANIFEST B and MANIFEST C collectively form quarantine files and respectively.

As illustrated in a copy of the manifests are replicated in the quarantine folder . When generating the quarantine files the quarantine module causes the manifests to be replicated in a quarantine folder that is specifically designed for use by the antivirus application . As described in more detail below replicating the manifests at a single location provides the antivirus application with an easy way to identify all files in a file system that are quarantined.

The antivirus application illustrated in also includes a user interface . As known to those skilled in the art and others a user interface is an input output system characterized by the use of graphics on a computer display to communicate with a computer user. For example information regarding files that are quarantined may be displayed on the user interface . In this regard the user interface may search the quarantine folder for metadata associated with the files that are quarantined. Also as described in further detail below with reference to the user interface allows a user to click buttons and generate commands in order to quarantine files or restore files from quarantine.

As illustrated in each component of the antivirus application e.g. the antivirus engine the quarantine module and the user interface are interconnected and able to communicate with other components. As known to those skilled in the art and others is a simplified example of one antivirus application capable of performing the functions implemented by the present invention. Actual embodiments of the antivirus application will have additional components not illustrated in or described in the accompanying text. Also shows one component architecture for creating a quarantine file but other component architectures are possible.

From the user interface a user may issue commands that are handled by the present invention. In this regard the exemplary user interface illustrated in contains embedded controls in the form of buttons for generating commands. More specifically the user interface includes an add button a restore button a delete button a submit button a rescan button and a find button . When a user activates the add button with a pointer communicatively connected to a mouse or similar input mechanism any selected files are marked for quarantine. In response the present invention quarantines the selected files in accordance with the method described below with reference to . In an alternative embodiment a file may be quarantined after the antivirus engine scans the file and determines that the file is infected with malware. If an attempt to clean the malware fails the user will be presented with an option to quarantine the infected file.

As illustrated in the user may also activate the restore button in order to remove a file from quarantine. In response the present invention restores the selected files to their original state in accordance with the method described below with reference to . A user may determine that a quarantined file does not contain data that needs to be saved. In this instance files may be selected and the delete button activated in order to remove the files from the computer. Also the submit button allows users to transmit data such as an infected file to an antivirus software vendor. In this instance a user may select a file displayed on the user interface and activate the submit button to cause the file to be transmitted to a remote database. To satisfy the submit command a copy of the data in the quarantine file is restored to its original non quarantined state in accordance with the method described below with reference to .

As illustrated in the user interface also contains a rescan button . As mentioned previously a quarantine file contains encoded data that will not be identified as malware by antivirus software even in instances when the non quarantined file was infected with malware. In order to scan a quarantine file to determine if the file is actually infected with malware the file is restored to its original state. Thus to satisfy the rescan command the present invention 1 restores the quarantine file in accordance with the method described below with reference to and 2 causes the antivirus engine to scan the restored file for malware.

The user interface also contains a find button that when activated generates a command that is satisfied by the present invention. As mentioned above all files on a computing devices that are quarantined will typically have associated metadata in the quarantine folder . However increasingly hardware devices are available that are easily moved between computing devices. In instances when a quarantine file is stored on a mobile hardware device and moved between computing devices the quarantine folder may not contain metadata for the file. Thus the command generated when the find button is activated is satisfied with a search for files that are quarantined. When a previously unknown quarantine file is identified the manifest associated with the file is copied to the quarantine folder . As a result an entry for the previously unknown quarantine file will be added to the user interface .

As illustrated in the quarantine method begins at block where it remains idle until a command to quarantine a file is received. As mentioned above the present invention provides a user interface operative to accept a user generated command to quarantine a file. However a command to quarantine a file may be received in other contexts not described previously. For example a user preference may be established so that certain files are quarantined automatically at the occurrence of an event. In this instance antivirus software may identify malware in a file and attempt to clean the malware. If the file infected with malware is incapable of being cleaned then a command to quarantine the file may be generated automatically based on a user preference. However as known to those skilled in the art and others commands to quarantine a file may be generated in other contexts and the examples provided above should be construed as exemplary and not limiting.

At block the quarantine method encodes data in the file that is the object of the quarantine command received at block . In one embodiment of the present invention the encoding performed at block uses exclusive OR hereinafter referred to as XOR encryption. As known to those skilled in the art and others XOR encryption is implemented using the Boolean algebraic function XOR. The XOR algebraic function is a binary operation that takes two arguments and returns true if one and only one of the two arguments is true. Typically XOR encryption uses a randomly generated key as one argument to the binary function and file data reduced to a sequence of bits as the second argument. Stated differently at block the XOR operation is repeatedly applied with a randomly generated key as one argument and bits that represent data in a file as the second argument. The output produced by the XOR operation is stored in a new file and appears to be an entirely random series of information. Reversing the XOR operation when the value of the key and the encoded file data is known is a simple operation. However when the value of the key or encoded data is not available reversing the operation is nearly impossible. It should be well understood that the XOR encryption described above is merely exemplary and should not be construed as limiting. The present invention may encode data at block using different techniques not described herein.

As illustrated in at block the quarantine method generates a manifest of the file that is the object of the quarantine command received at block . As described previously a manifest consists of a set of metadata that describes attributes of a file that is the object of a quarantine command. In this instance the manifest includes traditional metadata that is typically associated with a file such as file name path in the file system and ACLs. Also the manifest includes metadata that describes information about the quarantine process including but not limited to time of the quarantine version number of the current antivirus engine and the identity of malware infecting the file. In one embodiment of the present invention the manifest contains metadata that is in the Extensible Markup Language XML format. Since metadata in the manifest may be identified and stored in XML format using techniques that are generally known in the art the techniques used at block will not be described in further detail here.

At block the quarantine method creates a quarantine file. As mentioned previously a quarantine file is comprised of two components that includes encoded file data and a manifest that contains a set of metadata. At block the encoded file data and manifest are combined into a single file referred to herein as the quarantine file . In one embodiment of the present invention the quarantine file is compressed into a CAB file. As known to those skilled in the art and others a CAB file is an archive file type that requires less storage space than non archived files. In order to easily identify files manipulated by the present invention a unique file extension is assigned to the quarantine file.

As illustrated in the quarantine method at block sets the attributes of the quarantine file created at block to match the file that was the object of the quarantine command received at block . As known to those skilled in the art and others each file in a file system maintains a set of attributes that provides the operating system and application software information about the file. In most instances file attributes are automatically set through inheritance. Thus when the quarantine file is created a set of default attributes are associated with the file based on where the file is located in the file system. Since the present invention stores the quarantine file in the same directory as the file that was the object of the quarantine command the default attributes assigned to the quarantine file will typically match the attributes associated with the file that was the object of the quarantine command. However in some instances the default attributes may not match. Thus the quarantine method may set the attributes of the quarantine file at block . To set the attributes one or more function calls are made to an Application Programming Interface API that is provided by the operating system.

As mentioned previously in instances when a file is moved between directories attributes of the file may change in ways that are unexpected by users. Thus by storing the quarantine file in the same directory as the file that is the object of the quarantine command unexpected behaviors are prevented. For example the quarantine file will be protected with the same file system security features i.e. encryption as the original non quarantined file. Also the quarantine file will have the same ACLs permissions owner read bit value and other file attributes as the original file. As a result user data in the quarantine file will not be accessible to unauthorized users.

At block the manifest generated at block is copied to a central location such as the quarantine folder . As mentioned previously a manifest consists of a set of metadata that describes attributes of a file that is the object of a quarantine command. The user interface searches manifests in the quarantine folder so that metadata may be displayed to the user. Thus at block the manifest is copied to a central location i.e. quarantine folder that is accessible to routines in the user interface . As a result metadata may be displayed in an event driven system that supports user generated commands for performing actions on files that are quarantined. Also the manifests are created with the same attributes i.e. ACLs as the file that is the object of the quarantine command. Since the attributes of the original file are preserved information in a file that is quarantine will not be disclosed to any unauthorized domains. However a manifest in the quarantine folder is created with privileges so that an administrator may read delete or perform other actions on the manifest.

At block the original non quarantined file that was the object of the quarantine command received at block is deleted. Since techniques for deleting a file are generally known in the art the technique used by the present invention at block will not be described here. As mentioned previously deleting the original file prevents antivirus software from repetitively scanning the file for malware. Also deleting the file prevents the user from issuing a command to execute any malware program code in the file.

At decision block the quarantine method determines whether the quarantine command received at block was successfully satisfied. As known to those skilled in the art and others software routines may fail for any number of reasons. For example a computing device may not have sufficient memory to create a quarantine file. In this instance an operating system will typically return information that indicates the type of error condition that occurred. In any event at block the method determines whether the quarantine file was successfully created or an error condition occurred. If the file was created successfully the quarantine method proceeds to block where it terminates. If an error condition occurred the method proceeds to block .

At block the error condition identified at block is handled. If an error condition is identified then previously developed exception handlers will attempt to recover from the error condition. As known to those skilled in the art and others exception handlers are event driven routines that use a structured method of handling error. In some instances an error condition is recoverable and the quarantine command may be satisfied. In other instances the error condition is critical and the command may not be satisfied. Then the quarantine method proceeds to block where it terminates.

Now with reference to one exemplary embodiment of a restore method formed in accordance with the present invention will be described. The restore method provides a way to restore a quarantine file back to its original state. In many respects the restore method is the converse of the quarantine method described above with reference to . With continuing reference to and the accompanying descriptions an exemplary restore method illustrated in will now be described.

As illustrated in the restore method begins at block where it remains idle until a command to restore a file from quarantine is received. A command to restore a file from quarantine may be received in many different contexts of which the following are only examples. As mentioned above and described above with reference to the present invention provides a user interface operative to accept user generated commands. Several commands available from the user interface will cause a file to be restored. For example activation of the restore button will cause a file to be restored. However activation of the submit button and rescan button will also cause a file to be restored so that an additional action may be performed on the restored file data.

At block the quarantine file that is the object of the restore command received at block is decompressed. The restore method is designed to work in conjunction with the quarantine method described above with reference to . As described previously in one embodiment of the quarantine method a file is created that is in CAB format. At block the quarantine file that is the object of the restore command is decompressed so that the contents of the file may be decoded. Since techniques for decompressing a file in an archived format are generally known in the art the technique used at block by the present invention will not be described here.

At block encoded file data in the quarantine file is decoded back to its original state. In one embodiment of the present invention the encoding performed by the quarantine method uses XOR encryption. To decode file data at block the XOR algebraic operation is repeatedly applied to successive bits of data in the quarantine file along with the randomly generated key. The output produced is the data that was originally encoded by the quarantine method . However as mentioned previously the present invention may encode data using other techniques not described herein. Thus the embodiment of the present that encodes and decodes file data using the XOR Boolean function should be construed as exemplary and not limiting.

As illustrated in at decision block the restore method determines whether the file data produced at block is valid. In one embodiment of the present invention a checksum is used to determine if the file data is valid. As known to those skilled in the art and others a checksum is a redundancy check where basic components of a file typically the number of bytes are recorded. Then at some later time the contents of the file are validated to make insure that the file data is valid. In this instance the number of bytes in a file is recorded before being encoded. Then at block after decoding has occurred the restore method determines if the number of bytes in the file remained the same through the encoding decoding process. If the checksum indicates that the file data is not valid the restore method proceeds to block described below. Conversely if the checksum indicates that the file data produced is valid the restore method proceeds to block .

At block the restore method sets the attributes of the non quarantined file that contains the file data decoded at block . As described with reference to at block in most instances file attributes are automatically set through inheritance. Since the present invention stores both the encoded decoded file data in the same directory most if not all file attributes are set automatically when a file is created. However in some instances the inherited attributes of the file that contains the decoded file data may not match the attributes of the quarantine file. Thus the restore method may set certain file attributes at block by making one or more API calls. Also at block the restore method may perform administrative operations. For example the manifest stored in the quarantine folder that is associated with the quarantine file is deleted. As a result the file will no longer maintain an entry in the user interface .

At decision block the restore method determines whether the restore command received at block was successfully satisfied. As mentioned above software routines may fail for any number of reasons. At block the method determines whether the restore command was satisfied or if an error condition occurred. If the command was satisfied the quarantine method proceeds to block where it terminates. Conversely if an error condition occurred the method proceeds to block .

At block the error condition identified at block is handled. If an error condition is identified then previously developed exception handlers will attempt to recover from the error condition. In some instances an error condition is recoverable and the restore command will be satisfied. In other instances the error condition is critical and the command can not be satisfied. Then the method proceeds to block where it terminates.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

