---

title: Systems and methods for supporting flexible information appearance and behavior with extensible multi-phase transform engine
abstract: Flexible information appearance and behavior can be achieved with an extensible multi-phase transform engine. The transform engine can apply a series of transforms to markup language content. In a help service embodiment, application creators can specify a Uniform Resource Indicator (URI) for help content, and a collection of transforms and/or executable code for formatting and presenting the help content. The transforms may be custom transforms registered with the help service, or may be selected from a set of stock pre-registered transforms. The transforms can be applied by the engine to the help content. Custom transforms and transform selection may be used to control content appearance and engine output format. Transform operation may also trigger custom executable code to accomplish desired help behaviors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07644354&OS=07644354&RS=07644354
owner: Microsoft Corporation
number: 07644354
owner_city: Redmond
owner_country: US
publication_date: 20050429
---
This invention relates to computing and more particularly to presentation of mark up language content and more particularly to supporting flexible control over the appearance and behavior of such content.

Modem computing systems may provide some centralized functions that are accessible by various applications. Often though not always such centralized functions are associated with an operating system. One function that may be centralized is display of information e.g. information of a particular type to a user.

For example consider the help service that is incorporated into the MICROSOFT WINDOWS operating system. As computers and applications become more sophisticated it is desirable to provide users with information to educate themselves on the features of their computing environment and applications. A help service may provide users with information on an enormous range of topics. It may provide for example information and instructions for proper use of an operating system. Some of the topics may be helpful to users in a multitude of scenarios so the help service may also comprise functions for selectively presenting topics to maximize value for users.

As a service such as the help service becomes more sophisticated it is desirable to access it from applications. An application may draw upon a help service for explanation of an operating system feature for example. In another example the application creator may wish to specify his own help content but draw upon other helpful features of a centralized help service. In such situations the application creator may prefer to direct a user through the application s user interface to a centralized operating system help service. This may be easier than designing a new help service. This would allow for more efficient application design because application creators could reuse existing centralized functions. Thus the help service is an example of a function for displaying information that could be centralized for the benefit of the applications that may run on a computer system.

Content that is managed and displayed in many modem computing settings may be markup language content. Extensible Markup Language XML Hyper Text Markup Language HTML and Microsoft Assistance Markup Language MAML are all examples of markup languages. Markup languages can be displayed by processes that recognize the various elements within a particular markup language file and display a corresponding element with any specified properties in the markup language file.

Markup language files may be converted from one format to another using a transform. As one might imagine transforms involve code that identifies every element in a first markup language file and then re identifies and reconfigures those elements into a format that is recognizable to a different schema or application. Such code must be properly written according to the need and the confines of the transformation language. To draw from XML for an example transforms of one XML document into another XML document or some other data format are generally performed using Extensible Stylesheet Language Transformations XSLT .

Thus in a system such as the MICROSOFT help service described above we have markup and or other content that can be drawn upon for visual display by a computer system. Some of the markup content may be centralized and various processes for accessing and rendering the content may also be centralized such that it is accessible from a variety of applications with access to the computer system. It would be desirable in this setting to support customization of the appearance of the content. Application creators may want content to appear consistent with the other aspects of their application. They may also want to insert features and additional content that may not be present or available from the centralized system.

Systems and methods for supporting flexible information appearance and behavior can comprise an extensible multi phase transform engine. The transform engine can apply a series of transforms to markup language content. By separating content transformation into a number of phases flexibility is achieved. The form of content that such a multiphase transform engine can take as input is flexibly modifiable to suit diverse needs as is the output format and properties or behaviors of engine output. In a help service embodiment application creators can specify a Uniform Resource Indicator URI for help content and a collection of transforms and or executable code for formatting and presenting the help content. The transforms may be custom transforms registered with the help service or may be selected from a set of stock pre registered transforms. The transforms can be applied by the engine to the help content to control content appearance and engine output format. Transform operation may also trigger custom executable code to accomplish desired help behaviors.

Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the invention. Certain well known details often associated with computing and software technology are not set forth in the following disclosure however to avoid unnecessarily obscuring the various embodiments of the invention. Further those of ordinary skill in the relevant art will understand that they can practice other embodiments of the invention without one or more of the details described below. Finally while various methods are described with reference to steps and sequences in the following disclosure the description as such is for providing a clear implementation of embodiments of the invention and the steps and sequences of steps should not be taken as required to practice this invention.

The extensible multiphase transform engine and various aspects thereof may be used in conjunction with the various other aspects of help service . Multiple applications may access centralized functions provided by help service . This may be accomplished by making function calls to API . The API is a service that can receive function calls or requests from applications and initiate operations in the help service to satisfy the requests. API may ultimately return any requested data to the requesting application s or may initiate some other action in response to a request. An exemplary request to API may comprise a request to locate and display identified markup content. A request may also provide some identified help content parameters and request identification location and display of appropriate content that meets the provided parameters.

Identification and retrieval of requested help content may be carried out by . A Uniform Resource Identifier URI may be used to pinpoint the exact location of requested markup content. A URI may be resolved from a friendly name or text string that is more readily recognizable to human users. Once the URI is resolved associated content may be retrieved by . Search may also be beneficially incorporated in a help service . Search allows matching of markup content that meets requested content parameters as discussed above.

The content retrieved by may itself may be centralized in a data store or database not shown or may be custom content that is specified by an application. Content whether centralized or custom may exist anywhere in a computer network. Content is frequently stored in networked databases and servers not shown or via an internet connection to a remote server not shown . Content may also be stored locally i.e. on a disk that is physically controlled by the same machine that executes software associated with the help service .

The appearance and behavior of retrieved content may be manipulated by transforms kept in transformation library and or executable code behaviors loaded and executed by . Transformation engine may be responsible for applying transforms from and initiating operation of behaviors via . Transformation library need not keep a closed list of available transforms but may instead keep an updatable list of transforms that are registered with help service . A set of default transforms may be made available in . New transforms may be registered for example by applications application creators help service administrators and so forth. Similarly new executable code may be registered with and or and made available as part of help service .

Examples of help behaviors that could be loaded by are state adaptation inclusion of content from external sources and product branding. U.S. patent application Ser. No. 10 819 607 and U.S. patent application Ser. No. 10 819 606 discuss behaviors in the context of a help service and are hereby incorporated by reference in their entirety. Allowing custom help behaviors to be added to a help service and called through transforms provides the help service with custom extensibility.

Finally the exemplary help service of may comprise User Interface UI components such as the navigation UI and the help service render component . These components may be used for example by requesting applications to render and display help service features. In one arrangement an application may open the help navigation UI in the application window allowing for navigation through help topics within the environment of the application. The render component may be responsible for display of any final output from the transformation engine . One advantageous feature of the transform engine arrangement disclosed herein is the ability to output a variety of file formats that can be rendered by the particular rendering component that may be available with a particular computer platform. Different output formats can be generated by selected transforms and or behaviors from the various transforms and or behaviors referenced in library .

While a help service provides a useful embodiment of the invention for purposes of illustrating aspects of the invention it should be understood that the invention is not limited to help service implementations. Any service for displaying markup content on behalf of computing applications may profitably employ aspects of the invention.

Since markup language content processed by the multiphase transform engine may be subject to a selected set of transforms potentially including custom transforms and a selected set of behaviors potentially including custom behaviors a means for flexibly determining which transforms and which behaviors to apply to particular content is desirable. The collection of transforms referred to in the help context as a help collection serves this function. The collection of transforms identifies the transforms and behaviors to apply to a particular piece of markup content. The collection of transforms may be understood with reference to and .

The above process as illustrated in provides an exemplary means of registering a collection of transforms. Other processes are possible. For example help content itself may specify a collection of transforms to be used when processing the content. A user rather than an application may specify the collection. In other words the mechanism for determining what help collection will be associated with display of any arbitrary markup at any arbitrary time may change based on the needs of a given embodiment. Allowing application creators to specify a help collection for all help content called upon by a given application provides the advantages of giving the application creator control over that application s help functions. Other embodiments may be advantageous in other settings.

In particular since the help service described herein can adapt to different rendering technologies a collection of transforms may be maintained individually for each rendering target. For example there could be a transform library for plain text and a different one for DHTML.

The transforms in are denoted using the string XSLT XSLT and so forth. XSLT is an XML language that specifies rules to execute to transform one XML document to another. An XSLT document is called a stylesheet or transform the terms are considered equivalent . An XSLT stylesheet contains templates. An XSLT processor as may be included in the transformation engine provided herein compares the elements in an input XML document to the templates in a stylesheet. When it finds a matching template it writes the template s contents into an output or resultant tree. When it completes this step it may serialize the output tree further into an XML document or another format such as plain text or HTML. XSLT transforms are one very common type of transform for use with the invention. It should be noted that transformation of markup may be conducted via other means that may not be properly considered XSLT compliant. Any documents for use in transforming markup content from one form to another may be considered a transform or to be a process of transforming for the purposes of this description and claims.

Consider an exemplary application that can access a help service MICROSOFT WINDOWS . Note that while Windows is an operating system it can access a help service just as any other application. Opening the MICROSOFT WINDOWS help collection in one embodiment can open all of the help transforms and behaviors associated with the Windows Operating System OS and its utilities. This is accomplished by passing the help service a collection identifying said transforms and behaviors. Only the transforms and extensible objects registered by the MICROSOFT WINDOWS help collection need be considered by the help service.

The help collection as illustrated in can inform a transform engine as to which transforms are to be executed which phases execute and how to find the different transforms and extensibility objects. As laid out in the help collection can comprise two row groups and two columns. Of course the collection object can also be organized according to any other format for establishing the illustrated relationships. The first row group can be a listing of transforms to execute. These transforms can be divided into phases as shown. Each phase may comprise transforms in a conceptual category. It may be helpful to divide the transforms into phases in this way for a number of reasons. Phase division supports extensibility because custom transforms that fit with a particular phase may be associated with that phase. Phases also facilitate troubleshooting. Exemplary phases are illustrated in .

The second row group can list extensibility object information for any objects associated with the collection. These objects may be only the custom objects associated with the collection while default or standard objects need not be listed or in other embodiments all objects to be utilized can be listed in .

The first column can comprise identifiers for the transforms and or the various phases into which the transforms are organized as well as identifiers for the executable code or objects that may be associated with operation of the various transforms. The second column may comprise information for locating the items identified in the first column e.g. the URIs for listed transforms or locational and or operational information for the executable code.

The data in a collection can be maintained per help collection so each application or content provider can tailor it to their specific needs. The default help service may provide it s own implementation of a collection. In one embodiment the default collection can comprise the transforms and executable code discussed with reference to and . This default collection can thus comprise XSLTs for a structural and a presentation phase and any corresponding extensibility objects for use in the base default service.

Transform engine may also call executable code to provide some processing and or generate properties for markup language content . The executable code that is called by transform engine may be referenced by an element in transform . Thus custom behaviors may be produced by writing and registering a custom transform and referencing executable code from the transform via some predefined referencing means. In other words a transform may contain a reference to executable code that can be interpreted by the engine . The reference may be for example a reference to an identifier in a collection. A transform engine can be configured to load and execute any code associated with the identifier.

A series of engine operations may operate in succession on the output of the previous engine operation. Engine operations may convert raw XML input into a final output format such as Dynamic Hyper Text Markup Language DHTML . Transforms governing the details of engine operations may be selected by an application creator to achieve the appearance they desire. Operations may also call help behavior executable code to further customize appearance or behaviors of output .

Next the presentational phase may transform from the output data from the structural phase e.g. a MAML document to a rendering solution or final output supported by the help service. Some examples of rendering solutions are rich text plain text or DHTML. These transformations may also define the look and feel of final help content displayed by a particular application. The presentational transforms may be based on the same data sources those of the structural transforms. This phase may accomplish tasks such as make titles bold or larger create popup window placeholders create the appropriate UI representations for links or other UI specific affordances.

The various techniques illustrated here allow for tailored adaptation to the rendering technologies available to a particular computer system. For example if a computer system has no HTML rendering capabilities different transform phases can execute and display text or rich text instead. Then at a later date if HTML or a more sophisticated technology that has a transform pass exists the transform engine can make use of that functionality with out any change to the existing application.

In embodiments where collections are kept that can adapt to a variety of different rendering technologies collections may include different transform phases for different rendering targets. For example a first portion of a collection may comprise a transform library for plain text and a second portion may comprise a transform library for DHTML. In this situation a selection step can be included in for example between steps and .

When applications are created that draw on a help service such as that provided herein such applications may alter the way their desired help service content is presented to the application user. Application creators may plug in additional transforms to the help service or select desired transforms from a list provided by the help service thereby dictating for their own application which help service transforms are run and which are not run.

For example consider an exemplary help service that may be incorporated into the MICROSOFT WINDOWS operating system. This exemplary operating system help service consumes content in the Microsoft Assistance Markup Language MAML . MAML provides an XML schema for help service content. Suppose an application creator wanted to use MAML for their application s help content without any changes to MAML to describe custom content. However the application creator may want their MAML help content to have a distinctive appearance. For example the application creator may want all Arial 14 point italic font. In this situation custom transforms could be inserted into the transform engine pipeline to accomplish desired content appearance criteria.

Suppose an application creator wanted to extend MAML by adding additional XML tags to it. Since stock help service transforms would not recognize these tags the application creator may provide pre processing or post processing tags that are recognized. The pre or post processing tags may instruct the help service to either call custom code developed by the application creator or to apply a custom transform to the custom tagged markup content. Such extensibility allows additional help behaviors to be added and called through transforms. Examples of help behaviors are state adaptation inclusion of content from external sources product branding and so forth as described in the U.S. Patent Applications listed above and incorporated by reference.

Extensibility of the system for causing code to execute may be carried out by having special tags that are known by transforms call code or by a generic process which allows for a string ID to be passed in to a generic object loading and executing mechanism. This process for defining and loading code plugged into our system allows XSL transforms to make use of custom objects as well as the objects provided by a help service.

Among the many useful aspects of the invention it allows for use of multiple phases of transformation for building a document in a help service use of multiple phases of transformation for creating a rendering target to be rendered in a help service extensibility to allow others to register and plug in code to be executed during these stages extensibility to allow content providers to register and have executed particular transformations in a help service and ability to selectively turn off or on transformations or phases for content in a help service.

With reference to an exemplary computing device suitable for use in connection with the systems and methods for authenticating a user interface to a computer user is broadly described. In its most basic configuration device typically includes a processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile A such as RAM non volatile B such as ROM flash memory etc. or some combination of the two. Additionally device may also have mass storage removable and or non removable such as magnetic or optical disks or tape. Similarly device may comprise input devices such as a keyboard and mouse and or output devices such as a display that presents a GUI as a graphical aid accessing the functions of the computing device . Other aspects of device may include communication connections to other devices computers networks servers and so forth using wired or wireless media.

Volatile memory A non volatile memory B removable mass storage and non removable mass storage are examples of computer readable media. Computer readable media may comprise communication media as well as computer storage media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Computer storage media may be implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium.

The invention may be implemented at least in part via computer executable instructions such as program modules being executed by a computer . Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types.

Computer executable instructions are generally embodied as digital information available to computer on some form of computer readable media. In for example system memory may store an operating system and application programs as well as other program modules and program data. Applications and such may be bundled with an operating system or may exist separately and draw upon operating system services to function.

Finally it should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the user interface techniques of the present invention e.g. through the use of a data processing API reusable controls or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

