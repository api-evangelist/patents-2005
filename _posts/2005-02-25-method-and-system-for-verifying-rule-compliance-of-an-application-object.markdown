---

title: Method and system for verifying rule compliance of an application object
abstract: A verification tool applies a set of rules to determine whether an application object is rule compliant when a condition associated with the object is met. The verification tool determines whether the object is associated with a rule compliant property value. If the property value does not comply with the rule, then the rule has been violated and an error message is issued. The rule corresponds to settings implemented by a developer on the component. Thus, the developer is informed when at least one property value associated with the object does not comply with the corresponding rule. Feedback is provided about which specific object is not rule compliant such that the component may be modified to be rule compliant.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07448023&OS=07448023&RS=07448023
owner: Microsoft Corporation
number: 07448023
owner_city: Redmond
owner_country: US
publication_date: 20050225
---
Web page developers commonly design web pages to conform to certain requirements e.g. extensible hypertext markup language conformance business rules style rules accessibility etc. . The intent of these rules is to enforce a standard such that third party client software may interpret the information is a consistent manner commiserate with best practices. For example the Web Content Accessibility Guidelines WCAG explain how to make web content accessible to people with disabilities. Section 508 of the Americans with Disabilities Act ADA requires Federal agencies to make their electronic and information technology accessible to people with disabilities. These accessibility rules eliminate barriers in information technology present new opportunities to people with disabilities and encourage development of technologies focused on these goals.

Private industry and research entities have also begun demonstrating significant initiative in improving information technology access for people with disabilities. For example blind users of the Web frequently use software called a screen reader to read the contents of a web page out loud. Screen readers allow users to hear the contents of a web page rather than read them. However a screen reader can only read text not images or animations. Thus it is important that images and animations have text descriptions associated with them for a screen reader to use. This text is referred to as alternate text.

Rules may be difficult to enforce when responding to a client because an abstraction may exist between the original code and the response. For example a web page developer may easily design a run time component on dynamically created web page e.g. an ASP.NET page that is accessible to people with disabilities. However the developer may neglect to include critical information on the page such that the component is rendered inaccessible. For example the developer may forget to provide an image tag with an alternate text property. The developer is not informed that the component is inaccessible until after the page is compiled and the corresponding hypertext markup language HTML is generated. The HTML is presented to an accessibility rule checker that generates an error message when the component is inaccessible. The error message indicates where the error occurred in the HTML. However the developer is not informed where the information was omitted on the ASP.NET page. This is problematic because the HTML tags do not directly correspond to the tags on the ASP.NET page.

The present disclosure is directed to a method and system for verifying rule compliance of an application object. A verification tool may access and apply a set of rules to determine whether a run time object is rule compliant. The object provides an abstraction over raw generated content. In one embodiment the run time object is a component on an dynamically created web page. The component may be a control a tag a form a web service element or any other run time object. Each component may be associated with a condition that executes a corresponding rule when met and a property value that is checked to determine rule compliance.

The rules may be any guidelines that an application developer relies on to design the application. For example the rules may correspond to WCAG ADA Section 508 markup language compliance guidelines customized rules for an enterprise localization rules for a specific language country or geographic region etc. Each rule may be a self contained conditional verification rule that the component is tested against to determine whether the component is rule compliant. The rules may be self defined such that any verification tool may be used to determine whether a component is rule compliant when the condition associated with the component is met.

The verification tool determines whether the component is associated with property values that comply with the corresponding rule in the abstraction. If the property value does not comply with the rule then the rule has been violated and an error message is issued. Information embedded in the component is used to generate the error message.

The rule corresponds to settings implemented by the developer of the component. Thus the component user may be informed when at least one property value associated with the component does not comply with the corresponding rule. Feedback is provided about which specific property value s of the component caused the failure such that the component may be modified to be rule compliant. The component may be modified automatically or in response to user input.

In accordance with one aspect of the invention an object is accessed. The object provides an abstraction over raw generated content. A determination is made whether a condition associated with an object is met. Another determination is made whether the object complies with a rule in the abstraction when the condition is met. When the object does not comply with the rule a message is issued that the object does not comply with the rule. The message references the object. The object is then modified to comply with the rule when the object does not comply with the rule.

The present disclosure is directed to a method and system for verifying rule compliance of an application object. A verification tool applies a set of rules to determine whether the object is rule compliant when a condition associated with the object is met. The rules may be any guidelines that an application developer relies on to design the application. The verification tool determines whether a rule compliant property value is associated with the object. If the property value does not comply with the rule then the rule has been violated and an error message is issued. The rule corresponds to settings implemented by the developer on the component. Thus the developer is informed when at least one property value associated with the objects does not comply with the corresponding rule. Feedback is provided about which specific object is not rule compliant such that the component may be modified to comply with the rule.

Embodiments of the present invention now will be described more fully hereinafter with reference to the accompanying drawings which form a part hereof and which show by way of illustration specific exemplary embodiments for practicing the invention. This invention may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the invention to those skilled in the art. Among other things the present invention may be embodied as methods or devices. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

With reference to one example system for implementing the invention includes a computing device such as computing device . Computing device may be configured as a client a server a mobile device or any other computing device that interacts with data in a network based collaboration system. In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more applications and may include program data . A rule verification module which is described in detail below with reference to is implemented within system memory .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included.

Computing device also contains communication connections that allow the device to communicate with other computing devices such as over a network. Networks include local area networks and wide area networks as well as other large scale networks including but not limited to intranets and extranets. Communication connection is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

The system includes ASP.NET page rule checker and HTML page . Rule checker is an example of a verification tool. A web developer creates ASP.NET page by inserting at least one run time object e.g. a component on the page. The object provides an abstraction over raw generated content. The component may be a control a tag a form a web service element or any other run time object. For example ASP.NET page may include components such as tags and login control . The components may be predefined in the application imported from a third party source e.g. a vendor generated from an existing component as described in further detail below or created by the web developer.

Each component includes an embedded set of rules. For example tag includes rules tag includes rules and login control includes rules . Rules may be any rules in the abstraction that a web developer relies on to design ASP.NET page . For example the rules may correspond to WCAG ADA Section markup language compliance guidelines customized rules for an enterprise localization rules for a specific language country or geographic region etc. Furthermore the rules may include multiple rule versions that target different guidelines e.g. WCAG 1.0 1.1 and 2.0 XHTML 1.0 and 1.1 etc. .

In one embodiment the rules are self contained conditional verification rules. The rules may be self defined such that any verification tool may be used to determine whether a component is rule compliant. In one embodiment the web developer defines a condition that when met causes the component to be tested for compliance with the corresponding rule. For example a condition may be defined as SubmitButtonType Image. In other words when the property value of the property SubmitButtonType is an image then a rule associated with alternate text for images is verified for compliance because the condition that the button is an image is met. However if SubmitButtonType PushButton the condition is not met so the rule is not checked. The web developer may also define additional information associated with the condition such as a name additional resources and a priority level. Conditions are described in further detail below.

The web developer submits ASP.NET page to rule checker . Rule checker may predict how the components on ASP.NET page will be compiled on rendered HTML page . Rule checker determines whether the components on ASP.NET page are compliant with corresponding rules . Because rules are embedded in the corresponding components rule checker informs the web developer when at least one property value of the components on ASP.NET page does not comply with the corresponding rule. The web developer is also informed which specific component is not compliant with rules such that any noncompliant components may be modified to overcome the rule violation.

The actions performed by rule checker are independent of the rendered output e.g. rendered HTML page . Rule checker checks whether the condition that causes a rule to execute has been met. Rule checker also determines whether the property values of the components e.g. tags and login control are in compliance with rules . If the property values are determined to be noncompliant with rules feedback is provided about the specific property value s that caused the violation. In one embodiment the feedback may be used to provide specific guidance to inform the web developer how to overcome the rule violation. In another embodiment the feedback may be used to automatically modify the component to be rule compliant. The feedback may be provided as part of an issued error message.

In one embodiment rules may be encapsulated within the corresponding components such that the components conform to rules by default. In another embodiment rules and conditions may be synchronized with the underlying code to reduce maintenance issues as attributes evolve during development.

Each rule within rules may include information related to type of violation error or warning the guidelines that are applied the priority the relevant section of the guidelines and a corresponding text message. The information may be provided to an application programming interface. For example WCAG includes a rule that is referred to as alternate text for images. The rule includes the following information 

An example component e.g. login control to check for compliance with the alternate text for images rule may include the following information 

A web developer may insert login control on ASP.NET page . A screen reader may read corresponding alternate text e.g. Click here to log in . The web developer may then check ASP.NET page to determine WCAG compliancy. Rule checker processes ASP.NET page and locates login control .

Rule checker determines that the condition corresponding to login control states that the SubmitButtonText property must be an image i.e. from Check Condition . Rule checker also determines whether any text has been provided for the corresponding property values i.e. the value of the SubmitButtonText property cannot be null . If no text values have been entered for the SubmitButtonText property an error message is issued that informs the web developer of a WCAG violation. The web developer is informed that a text value must be entered for the SubmitButtonText property to make login control accessible for a screen reader. An error of priority 1 is generated corresponding to WCAG section 1.1. The issued error message reads An image is missing a meaningful text equivalent. Please check the value of SubmitButtonText property. In one embodiment default text is automatically associated with the corresponding property values such that login control is rule compliant.

In one embodiment a component may be derived from an established component. For example tag may be a predefined component that a web developer selected and positioned on ASP.NET page . Tag is associated with a set of verification rules e.g. rules . The web developer may need a component that is similar to tag . Rather than creating a new component a new tag e.g. tag may be derived from tag . Tag inherits the existing verification rules e.g. from tag . A web developer may customize the derived component for a specific purpose by adding deleting or editing the inherited rules. Alternatively the inherited rules may be overridden by the web developer.

In another example of rule inheritance an image may be associated with a rule that checks for an associated alternate text property. A new image component may be inherited from the original image. The rule associated with the new image component is automatically inherited from the original image. In one embodiment a component may be inherited and a second set of verification rules may be associated with the component. Thus a second set of conditions are checked against the second set of verification rules. The more often that a rule is inherited and associated with components at lower levels of a component hierarchy the more complex the rule may become. Thus rule inheritance precludes the need to replicate the same rule information for each child component.

The ASP.NET page is submitted to a verification tool to verify whether the components are rule compliant at block . Proceeding to block the verification tool accesses a component on the page. The component provides an abstraction over raw generated content. The component may be accessed during run time design time or verification time. Each component includes information related to the type of component the condition that must be met to execute the corresponding rule and an acceptable property value of the component for rule compliance.

Advancing to decision block a determination is made whether the condition associated with the component has been met. In one embodiment the condition is defined by a web developer. If the condition has been met processing continues at block . If the condition has not been met processing proceeds to decision block where a determination is made whether any other components exist on the ASP.NET page that need to be verified for rule compliance. If no further components need to be verified processing terminates at an end block because no errors or warnings need to be issued. If any other components exist on the page that have not yet been verified for rule compliance processing returns to block where the next component on the page is accessed.

Transitioning to block the verification tool retrieves the rule associated with the component. The rule may include information regarding the type of error the guidelines applied the priority level the relevant section of the guidelines and a corresponding text message. The rule is a self contained conditional that the component is tested against to determine whether the component is compliant with the rule when the condition is met. The rule corresponds to settings implemented by the developer on the component. Thus the developer is informed when a property value associated with the component does not comply with the corresponding rule.

Continuing to decision block a determination is made whether the component violates the rule in the abstraction. For example the verification tool determines whether a rule compliant property value has been entered for a property of the component. If the rule has been violated processing continues at block . If the rule has not been violated processing continues to decision block .

Moving to block an error message is issued. Information embedded in the component is used to generate the error message. The error message may include the type of error e.g. WCAG error the severity of the error e.g. priority 1 a text message that describes which component caused the rule violation and a resource link that provides further information and examples associated with the error.

Proceeding to block a specific element of the component that caused the rule violation is referenced to inform the web developer which property value must be changed to overcome the rule violation. In one embodiment a parent tag may be referenced along with the associated property value that caused the rule violation because the rules are encapsulated within the conditional property.

Advancing to block the web developer is provided with guidance on how to modify the component to be rule compliant. In one example the web developer may be provided with a link to resources that provide explanations and examples for overcoming the rule violation. In another example the guidance is provided with the issued error message.

Transitioning to block the component is modified to be rule compliant. In one embodiment the component may be modified by any user e.g. a web developer a component user a page developer to be rule compliant. The user may modify the component based on the provided guidance. In another embodiment the component is automatically modified to be rule compliant. For example an acceptable property value of the component is automatically associated with the component. Processing then terminates at an end block.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

