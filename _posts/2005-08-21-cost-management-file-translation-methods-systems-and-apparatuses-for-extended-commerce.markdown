---

title: Cost management file translation methods, systems, and apparatuses for extended commerce
abstract: A quantity of an item referenced within a multilevel bill of material (BOM) is determined. A price bid for the item is received into an application framework from a supplier. The price bid is associated with the item. The cost of the multilevel BOM is determined based on the quantity of the item and the price bid.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08170946&OS=08170946&RS=08170946
owner: Co-eXprise, Inc.
number: 08170946
owner_city: Wexford
owner_country: US
publication_date: 20050821
---
This application claims the benefit of U.S. Provisional Application No. 60 603 401 filed Aug. 21 2004 which is incorporated herein by reference.

The present application is related to the following applications which are assigned to the same assignee as the present application and which were filed on even date herewith Ser. No. 11 208 693 entitled FILE TRANSLATION METHODS SYSTEMS AND APPARATUSES FOR EXTENDED COMMERCE Ser. No. 11 209 091 entitled SUPPLIER CAPABILITY METHODS SYSTEMS AND APPARATUSES FOR EXTENDED COMMERCE Ser. No. 11 209 090 entitled COLLABORATIVE NEGOTIATION METHODS SYSTEMS AND APPARATUSES FOR EXTENDED COMMERCE and Ser. No. 11 208 694 entitled COST MANAGEMENT FILE TRANSLATION METHODS SYSTEMS AND APPARATUSES FOR EXTENDED COMMERCE. 

The process of developing and manufacturing products requires cooperation between multiple functional groups in separate corporate enterprises. Original Equipment Manufacturers OEM must cooperate with suppliers vendors contract engineers and distributors to deliver products to market on time and on budget. Collaboration is the interaction between multiple parties to achieve a common goal through a cooperative effort. Collaboration between OEM and suppliers vendors contract engineers and distributors to deliver products involves sharing common goal oriented information such as engineering design documents procurement documents project management schedules and production schedules. Collaboration enables a corporate enterprise to manage product design sourcing and manufacturing.

Today collaboration is more challenging due to globally distributed corporate engineering sourcing and manufacturing operations for one or more buying and supplying companies. The global distribution of engineering sourcing and manufacturing resources makes it more difficult to collaboratively share information in a timely efficient and controlled manner. The advent of the Internet has enabled corporate enterprises to communicate using computers. The affiliation and or collaboration of multiple resources in separate corporate enterprises forms an extended enterprise. Conventional collaboration software applications focus on individual functions like design engineering. The software generally does not link multi discipline resources throughout the extended enterprise to enable collaboration on a project. This shortcoming has forced the resources to revert to conventional forms of communication. It is difficult to collaborate on a project using conventional telephone fax and or electronic mail e mail without the benefit of a collaboration tool that integrates multiple functional resources working toward a common goal.

In one embodiment a method comprises determining a quantity of at least one item referenced within at least one multilevel bill of material BOM . At least one price bid price for the item is received into an application framework from at least one supplier. The at least one price bid is associated with the at least one item. A first cost of the at least one multilevel BOM is determined based on the quantity of the at least one item and the at least one price bid.

The various embodiments described herein enable collaboration between resources distributed throughout an extended enterprise. In one embodiment the collaboration throughout the extended enterprise may occur over the Internet via web based collaboration tools. An extended enterprise is the affiliation and or collaboration of multiple functional resources distributed in separate corporate enterprises. As previously stated collaboration is the interaction between multiple parties to achieve a common goal through a cooperative effort. In one embodiment the functional resources of a buying organization and its suppliers form an extended enterprise. Functional resources may comprise purchasing buying engineering sales marketing management operations and financing resources of the buying organization or the supplier. As used herein a supplier may comprise vendors contract engineers distributors and manufacturers that have a relationship with the organization. Further a supplier may supply items or services to the organization. Items and or services provided by a supplier may comprise stamping casting circuit board fabrication packaging general fabrication machining molding welding among various other services normally associated with the design manufacture and distribution of an item. The functionality for web based collaboration is provided by various embodiments of computer hardware and software modules forming a distributed platform. The modules enable distributed resources to collaborate while working on a common project. In one embodiment a project may encompass any activity from new product design engineering to item sourcing to product manufacturing phases. The term item refers to any mechanism device product instrument machine machinery assembly sub assembly component element section material service process and or any other material goods or services required to design build source construct manufacture assemble and or fabricate a product.

Sourcing is the strategic process of selecting a supplier and entering into an agreement to purchase and supply items. Sourcing also may comprise negotiating prices for an item at a given volume with the supplier over a fixed period of time from the time an item is introduced throughout the life cycle of the item. The negotiation element of sourcing may be addressed with one or more sourcing methods. One example of a sourcing method is a reverse auction which may utilize the Internet an e auction and involves one buyer and many sellers. The general idea is that the buyer specifies what it wants to purchase and invites two or more suppliers to submit offers bids regarding the buyer specified item. To make sure the awarded supplier is suitable the buyer may pre qualify those suppliers who are allowed to participate in the negotiation. The process will usually produce the lowest possible price. Embodiments of the modules described herein provide item management sourcing management project management and collaboration tools for the extended enterprise. The modules address strategic sourcing activities from the design costing phase of a new item through production sourcing and item approval and product life cycle management.

Various embodiments of the modules described herein enable electronic sourcing e sourcing of items over a web based environment. The modules provide a platform for selecting a supplier and awarding a contract to the supplier and entering into an agreement to purchase items from the supplier. In one embodiment these functions occur over a wide area network WAN enabled environment such as the Internet. E sourcing enables an organization to rapidly and globally deploy a variety of electronic files to one or more of its extended enterprise partners for the purpose of negotiating prices of items. The electronic files can include any proprietary patented and or copyrighted information including engineering design drawings in a variety of two dimensional 2 D and three dimensional 3 D computer aided design CAD formats technical specifications item specifications manufacturing drawings manufacturing plans and intellectual property IP . The electronic file also can include comprehensive requests for quotes RFQs requests for proposals RFP and requests for information RFI associated with an item.

Organizations within an extended enterprise network may collaborate to complete a project using the electronic files to address technical or commercial issues associated with supply chain management. Embodiments of the modules provide a collaborative negotiation environment to negotiate with multiple suppliers the total cost value of items and services taking into account price and non price factors and efficiently arrive at the best negotiated contract award decision.

Digital rights management DRM technology may be applied to any electronic files transmitted throughout the extended enterprise to preserve the proprietary nature of the electronic files that may be exchanged during collaboration and negotiation. User viewing permissions are embedded within an electronic file. If a user lacks permission the user cannot view the file. DRM technology encrypts the electronic files for safe distribution across the extended enterprise over the Internet to prevent unauthorized access copying and distribution. Encrypted electronic files may be freely distributed as they are exchanged between collaborating and negotiating parties throughout the extended enterprise. Embodiments of DRM technology enable the publishers to protect control track and audit the digital content of the electronic files. In one embodiment DRM technology limits viewing of the electronic files to licensed subscribers. In one embodiment DRM technology prevents republication and or redistribution of the electronic files to non subscribers. In one embodiment DRM technology may point to an unauthorized user via a link to a publisher subscription service. In one embodiment DRM technology may provide granular control and tracking of unauthorized distribution by identifying for the publisher all unauthorized users who attempted to view illegally distributed copies of an electronic file and all licensed users that illegally forward a file. DRM technology allows a user to limit access to an electronic file. In one embodiment post award of a sourcing contract to one or more suppliers a buyer may utilize DRM technology to limit access to confidential electronic files to the one or more suppliers that were awarded the contract. As used herein utilization of DRM technology enables a secure collaboration environment throughout the extended enterprise. In one embodiment a secure collaboration environment may comprise encryption authentication authorization and auditing of content by use of the DRM technology. In addition a secure collaboration environment may comprise security in transport of media information throughout the extended enterprise security in storage of media information authentication of the sender authentication of the recipient authorization non repudiation where only that sender may have sent a message and no one else tamper proofing the media information to maintain integrity of the original time stamping tracking and archiving transmissions of media information restricted authorization privileges to access the media information and creating audit trails.

Nodes may be referred to as first client nodes. Nodes may be referred to as second client nodes. Node may be referred to as a host processing node that enables secure collaboration between the first client nodes and the second client nodes . In one embodiment the system may include for example one or more first client nodes and one or more second client nodes . The host processing node provides the platform and functionality to seamlessly integrate electronic transactions between the first client nodes and the second client nodes via the network . The host processing node provides functionality in the form of a plurality of hardware and software modules running on a dedicated platform to enable the exchange of electronic files and managing project activities. In an item development example the electronic files may include computer aided design CAD files that describe a mechanical design design or model of an engineered item. CAD files may include 2 D or 3 D images and descriptive data as defined herein . In one embodiment the descriptive data describes the item and is embedded in the electronic file. In a collaborative item development environment the host processing node may enable the exchange of a plurality of electronic CAD files across network between the first client nodes and the second client nodes 

In one embodiment the first client nodes may represent one or more buyer organizations whose function is to purchase items from suppliers within system . The first client nodes may include OEM enterprises that design develop manufacture and source items. These OEM enterprises have a need to procure items and deliver products to their customers. In this context the first client nodes may be referred to as customer or buyer nodes. The second client nodes may represent a supplier organization whose function is to sell items to the buyer organization. The second client nodes may be associated with one or more enterprises that can supply items to the OEM enterprises associated with the first client nodes . In this context therefore the second client nodes may be referred to as supplier or supply chain nodes. In this example the host processing node enables the electronic exchange of information associated with designing manufacturing and sourcing items e.g. digital form between any of the fist client nodes and any one of the second client nodes . Collaborative electronic exchange of information across the extended enterprise system replaces conventional forms of information exchange over a plurality of communication mediums such as telephone facsimile e mail file transfer protocol FTP from a web portal site and paper and provides a single medium for exchanging electronic files in a collaborative environment.

The host processing node provides the functionality to enable the collaboration between resources at the first and second client nodes . Collaboration may include collaborative project management and communicating design sourcing and manufacturing information related to an item.

As used herein each one of the first and second client nodes and the host processing node may include any physical or logical entity for communicating information in the system and may be implemented as hardware software or any combination thereof as desired for a given set of design and or system parameters or performance constraints. Although the system may show a limited number of nodes by way of example it can be appreciated that additional or fewer nodes may be employed for a given implementation.

A node may include any physical or logical entity having a unique address in the system . The unique address may include for example a network address such as an Internet Protocol IP address a device address such as a Media Access Control MAC address and so forth. The embodiments are not limited in this context.

The first and second client nodes and the host processing node of the system may include and or form part of the network such as an Internet network a Local Area Network LAN a Metropolitan Area Network MAN a Wide Area Network WAN a Wireless LAN WLAN the World Wide Web a telephony network e.g. analog digital wired wireless PSTN ISDN or xDSL a radio network a television network a cable network a satellite network and or any other wired or wireless communications network configured to carry data. The network may include one or more elements such as for example intermediate nodes proxy servers firewalls routers switches hubs adapters sockets and wired or wireless data pathways configured to direct and or deliver data to other networks. The embodiments are not limited in this context.

The first and second client nodes and the host processing node of the system may be arranged to communicate one or more types of information such as media information. Media information refers to any data representing content meant for a user such as image information video information graphical information audio information voice information textual information numerical information alphanumeric symbols character symbols and so forth. Other examples of media information communicated over the system may include for example electronic files that include proprietary patented and or copyrighted information including engineering drawings mechanical design design information drawings and or CAD files that describe a design or model of an engineered item images of the item descriptive data describing for example attributes properties and features of the item 2 D and 3 D CAD models technical specifications product and item specifications manufacturing drawings manufacturing plans bills of material comprising one or more items BOM intellectual property IP and other proprietary business documents including for example comprehensive documents defining an RFQ RFP RFI among other documents associated with the lifecycle of an item. The media information may be referred to herein as customer information project information and or supplier information. Customer buyer information may include for example drawings parts lists material specifications finish specifications process specifications heat treatment specifications quality procedures quality forms quoting forms and any other information that defines an item and its properties. Project information may include for example tasks due dates person responsible to complete a task commitment dates associated with a project list of items documents that define items and or item trees e.g. a list of items and their product structural relationship and or a relationship to another project . In one embodiment such project information may relate to for example RFQ new product introduction NPI cost out quality improvement and product line rationalization. Supplier information may include for example first article inspection equipment specifications capacity documents quoting documents tolerance capabilities jig fixturing documents and control charts. CAD information may include information formatted in any CAD format including but not limited to raster and or vector formats such as AutoDesk Inventor Bentley AutoCAD Catia Ideas Unigraphics Solid Works Solid Edge Pro Engineer files among others described herein. Media information also may include for example information formatted in intelligent documents. In one embodiment intelligent documents may comprise meta data and or meta tags that are read by the authoring program. In one embodiment the meta data and or meta tags may represent for example document formats tracking and or animation. In one embodiment such intelligent documents may include for example MS Word files MS Excel files MS Power Point files Word perfect files Lotus files and printer document format PDF files. Media information also may include extensible markup language XML forms among others described herein. Media information may originate from or be destined to any one of the first client nodes and or the second client nodes as enabled by the platform of the host processing node . The embodiments are not limited in this context.

The first and second client nodes and the host processing node of the system may be arranged to communicate one or more types of information such as control information. Control information refers to any data representing commands instructions or control words meant for an automated system. For example control information may be used to route media information throughout the system or instruct the first and second client nodes the host processing node to process the media information in a predetermined manner. The control information may be communicated from and to a number of different devices or networks. The embodiments are not limited in this context.

The first and second client nodes the host processing node of the system may communicate media and control information in accordance with one or more protocols. A protocol may include a set of predefined rules or instructions to control how the nodes communicate information between each other. The protocol may be defined by one or more protocol standards as promulgated by a standards organization such as the Internet Engineering Task Force IETF International Telecommunications Union ITU the Institute of Electrical and Electronics Engineers IEEE and so forth. For example the system may include a packet network communicating information in accordance with one or more packet protocols such as one or more Internet protocols such as the Transport Control Protocol TCP and Internet Protocol IP TCP IP X.25 Hypertext Transfer Protocol HTTP and User Datagram Protocol UDP . In another example the system may communicate packets using a medium access control protocol such as Carrier Sense Multiple Access with Collision Detection CSMA CD as defined by one or more IEEE 802 Ethernet standards. In yet another example the system may communicate packets in accordance with one or more Asynchronous Transfer Mode ATM protocols Frame Relay Systems Network Architecture SNA and so forth. In one embodiment system may communicate packets using secure hypertext transfer protocol S HTTP and secure socket layer SSL protocol for example. In one embodiment system may communicate encrypted information such as for example using advanced encryption standard AES Federal Information Processing Standards FIPS Publication 197 FIPS 197 encryption for example. The embodiments are not limited in this context.

In various implementations the host processing node may be illustrated and described as including several separate functional elements such as modules and or blocks. Although certain modules and or blocks may be described by way of example it can be appreciated that a greater or lesser number of modules and or blocks may be used and still fall within the scope of the embodiments. Further although various embodiments may be described in terms of modules and or blocks to facilitate their description such modules and or blocks may be implemented by one or more hardware components e.g. processors DSPs PLDs ASICs circuits registers software components e.g. programs subroutines logic and or combinations thereof.

In one embodiment the host processing node may include multiple modules connected by one or more communications media. Communications media generally may include any medium capable of carrying information signals. For example communications media may include wired communications media wireless communications media or a combination of both as desired for a given implementation. Examples of wired communications media may include a wire cable printed circuit board PCB backplane semiconductor material twisted pair wire co axial cable fiber optics and so forth. An example of a wireless communications media may include portions of a wireless spectrum such as the radio frequency RF spectrum. The embodiments are not limited in this context.

The modules may include or may be implemented as one or more systems sub systems devices components circuits logic programs or any combination thereof as desired for a given set of design or performance constraints. For example the modules may include electronic elements fabricated on a substrate. In various implementations the electronic elements may be fabricated using silicon based IC processes such as complementary metal oxide semiconductor CMOS bipolar and bipolar CMOS BiCMOS processes for example. The embodiments are not limited in this context.

In one embodiment each of the first and second client nodes and the host processing node may include modules in the form of executable code implemented in a general purpose computing device. is a schematic diagram of one embodiment of a computing environment in which the various modules and sub modules of the first and second client nodes and the host processing node may be implemented. Those skilled in the art will appreciate that the computing environment may include all the components shown in a subset of these components or additional components as may be required by a specific implementation and the embodiments are not limited in this context. In various embodiments a general purpose computing device may be in the form of a personal computer PC a server a router a switch a network PC a peer device or other common network node that includes one or more processing units a system memory and a system bus that couples various system components including the system memory to the one or more processing units . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM .

A basic input output system BIOS containing the basic routines that help to transfer information between elements within the general purpose computing device such as during start up is stored in the ROM . The general purpose computing device further includes a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and the optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the general purpose computing device .

Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges RAM ROM and the like may also be used in the exemplary operating environment.

A number of modules may be stored on the hard disk the magnetic disk the optical disk the ROM or the RAM including an operating system OS one or more application program modules other modules and program data . The OS the one or more application program modules the other modules and the program data may include various firmware components such as software programs data drivers application program interfaces APIs and so forth. The OS the one or more application program modules the other modules and the program data may be stored in nonvolatile NV memory of the processing node such as in bit masked read only memory ROM or flash memory. The NV memory may include other types of memory including for example programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM or battery backed random access memory RAM such as dynamic RAM DRAM Double Data Rate DRAM DDRAM and or synchronous DRAM SDRAM . The embodiments are not limited in this context.

In various embodiments the OS may include but are not limited to the Cisco Internetwork Operating System IOS Juniper JUNOS Microsoft Windows OS e.g. 95 98 NT ME 2000 XP CE Longhorn Apple Macintosh OS IBM OS Linux Unix Solaris 3Com Palm OS and the like. The embodiments are not limited in this context.

A user may enter commands and information into the general purpose computing device through input devices such as a keyboard and pointing device such as for example a mouse. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the one or more processing units through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The general purpose computing device may operate in a networked environment using logical connections to the one or more remote computers . The remote computer may be another general purpose computing device personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the general purpose computing device although only a memory storage device has been illustrated in . The logical connections depicted in may include a LAN and a WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the general purpose computing device is connected to the local network through a network interface or adapter . When used in a WAN networking environment the general purpose computing device typically includes a modem or other means for establishing a communications over the WAN such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the general purpose computing device or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In one embodiment the first client node includes a computer and a database for example. In one embodiment the second client node includes a computer and a database . In one embodiment the computers each may include an application framework described herein that comprises a control module and a web browser . In one embodiment the computers may represent a plurality of computers interconnected over a LAN or WAN. In one embodiment the computers are representative of the general purpose computing device shown in and may include all or a sub set of the elements described with respect thereto. In one embodiment the network is the Internet and the application framework is a graphical user interface to the collaboration negotiation system and the extended enterprise network . According to this embodiment the application framework is in communication with the processing node and the functional modules and the host computing platform comprised therein.

In one embodiment a functional resource such as a buyer at the first client node may create one or more extended enterprise accounts for functional resources i.e. users located at the first and second client nodes . The accounts grant users access to the processing node and the software modules comprised therein. A user will not be enabled to gain access to the processing node unless the user receives valid login user identification and password from the processing node and the processing node has successfully authenticated the computers on the extended enterprise network . Upon successful authentication the processing node initiates execution e.g. launches a digital rights management DRM module to determine if a viewer module is currently installed on the computer . If the viewer module is not installed on the computer the processing node transmits a dialogue to the computer requesting to install the viewer module on the computer . If the user elects not to install the viewer module on the computer the computer will gain access to the application framework but will not gain access to the viewer module and thus will not gain access to media information presented by the viewer module . If the user elects to install the viewer module the processing node downloads the viewer module onto the computer . If the viewer module is installed on the computer the processing node executes a check on the viewer module and determines whether a mandatory and or optional upgrade to the viewer module is required. In one embodiment a mandatory upgrade may involve uninstalling one or more previous versions of the viewer module and installing a newer version of the viewer module on the computer . In another embodiment the processing node may transmit a dialogue to the computer querying if the user desires to add functionality to the existing viewer currently residing on the computer .

In one embodiment the application frameworks on the computers each may comprise a control module . The web browser enables the first and second client nodes to view one or more web pages. Each web page may be segmented into two or more frames that function independently of each other. With reference to C D E and F various embodiments of representative graphical user interfaces associated with various instances of one embodiment of the application framework are illustrated. One embodiment of a specific instance of the application framework is described with reference to graphical user interface . The application framework may include one or more navigation frames one or more command and control frames and one or more tool bar frames . The control module manages the inter process communication and synchronizes the events between the navigation frames the command and control frames and the tool bar frames . In one embodiment the control module may be written in a scripting language that runs on computers to manage web pages such as for example JavaScript. The control module may be configured to save store and or recall a user session in the application framework to and from a client side session cookie. A user session may include for example the last navigation made by the user and or the position and sizing of windows set by the user.

In one embodiment the navigation frames may include a tree control of hierarchical objects called tree nodes. In one embodiment each tree node is user definable and extensible. Each tree node includes a graphical representation and a programmed behavior such as for example expand minimize sub nodes present the tree node contents in the navigation frame and or the command and control frame initiate communication between the frames of the application framework and or enable disable an application application view and or application component in the toolbar frame . The programmed behavior of a tree node also may include executing business logic to manage parametric inputs. The parametric inputs are associated with a selected application application view and or application component . For example if a DCM tab is selected a design cost management DCM module application is launched and the tree node may receive forecasted annual usage data and price data e.g. quotes current price should cost price for an item and execute algorithms that involve such data. In another embodiment if a sourcing tab is selected a sourcing module application is launched and the tree node may receive actual annual usage data and price data e.g. quotes current price should cost price for an item and execute algorithms that involve such data.

Tree nodes may be in the form of one or more 1 individual nodes 2 group nodes and or 3 folder nodes . A folder node is a user defined node to organize one or more individual nodes and or group nodes . A group node is a node that is automatically created when two or more individual nodes exist of the same type. An individual node is a node containing a specific type of data and or content.

In one embodiment the types of individual nodes may include document nodes item nodes program project process task and or subtask nodes functional resource nodes message nodes line item nodes lot nodes and or collaborative BOM CBOM nodes . A document node is a node that includes one or more media information files in various file formats such as for example a secure neutral format SNF as defined herein . An item node is a node that includes one or more identifiers. The identifier may represent an item such as for example a part number storage keeping unit SKU service number and or descriptive data. Program project process task and or subtask nodes are nodes that organize one or more actions of functional resources. The program node is a collection of project nodes. The project node is a collection of process nodes. The process node is a collection of task nodes. The task node is a collection of action nodes. The action node is an assigned unit of work that comprises a description of the assigned action one or more functional resources assigned to complete the action a target date in which the action is to be completed and or a commitment date that the assigned function resource committed to have the action completed. A functional resource node is a node that includes one or more names of people who are located throughout the extended enterprise network and have to be authorized to access the extended enterprise network for a specific program project process task and or subtask. A message node is a node that includes one or more message threads regarding media information.

In one embodiment line item node is a node that is automatically created based on a user selection of items and or assemblies he she desires to quote. The user may select such items and or assemblies in the command and control frame . The line item node is a node that includes item pricing information. The users throughout the extended enterprise network e.g. external suppliers at second client nodes submit pricing information for each item line item price bid . The line item price bid is summarized at the line item node level for purposes of collaborating and or negotiating a collection of items. A lot node is a node that is automatically created based on a user selection of items and or assemblies he she desires to quote. The user may select such items and or assemblies in the command and control frame . The lot node is a node that includes the contents and or behavior of the line item node including 1 the ability to receive an initial single price at a lot level lot price bid from users throughout the extended enterprise wherein the lot level includes two or more line items 2 the ability to subsequently receive line item price bids from users throughout the extended enterprise and 3 the ability to receive extended enterprise user inputs that adjust line item price bids until the summation of all line item prices included in the lot equals the lot price bid.

In one embodiment a CBOM node is a node that is automatically created based on a user selection of items and or assemblies he she desires to quote. In one embodiment the user may select such items and or assemblies in the command and control frame . The CBOM node contains two sub nodes 1 the first sub node top level items contains top level items and or assemblies that the user selected and the items that are part of the product structure in which the top level items and or assemblies call out and 2 the second sub node end items contains an automatically generated list of only the end items that are to be quoted omitting intermediate product structure levels that a buyer does not wish to quote such end items are required to construct the top level items and or assemblies that the user selected e.g. the end items that are called out by the items and or assemblies that the user selected . The CBOM node also includes the contents and or behavior of the lot node such as for example an end item sub node may be organized into lots and line items and quoted accordingly. After users throughout the extended enterprise network submit pricing at the end item sub node the top level items sub node automatically calculates and rolls up the price inputs to arrive at a total price for the top level items and or assemblies contained therein.

In one embodiment the one or more command and control frames may include an Active X control container object that comprises one or more Active X components e.g. independent software applications that execute within a designated frame in the browsers . The Active X components may comprise 1 a viewer module 2 a media information upload download module 3 a compression decompression module and 4 an encryption decryption module for example. Active X controls are provided by Microsoft Corporation Microsoft 

In one embodiment the viewer module includes a special purpose application program downloaded from the host processing node that executes within the browsers . In one embodiment the viewer module is a web based or desktop viewing and mark up tool that supports one or more files comprising data such as for example media information defined herein. For example the viewer module enables a user at the first and second client nodes with the computer and the application framework to access and view secure neutral format files and or other file formats for example commonly used raster vector CAD intelligent documents and or XML forms throughout the extended enterprise network . As used throughout this application viewer module shall mean viewer module operating in conjunction with the computer the application framework and or the host processing node . In one embodiment the viewer module displays mechanical designs bills of material BOM and descriptive data associated with the mechanical designs and enables users to make annotations thereto. In one embodiment the viewer module provides a graphical user interface to display a BOM structure and relate a selected item of a mechanical design in a graphical manner. In one embodiment the viewer module displays images of media information such as for example images of mechanical designs in CAD files whether or not the user who is viewing such information has access to the software that was used to create the image. In one embodiment the viewer module displays descriptive data of a mechanical design that is embedded in a CAD file. Further description of the viewer module is provided below. In one embodiment the viewer module may be implemented in the C programming language due to its efficiency in managing and presenting graphics.

In one embodiment the media information upload download module enables upload download processes between the first and second client nodes and the host processing node . These processes may comprise locating selecting e.g. clicking on moving e.g. dragging and or placing e.g. dropping electronic files into the application framework hosted by one of the web servers where c is any number at the host processing node and selecting the destination of the electronic files as any one of the web servers . In one embodiment the application framework may include communicate and or interface with any one of the DRM module the CN module the DCM module and or the EEC module . In one embodiment the EEC module includes the converter module the viewer module the collaboration module and the project management module as shown in for example.

The compression decompression module enables the compression and decompression of files during the upload download process. In one embodiment files may be compressed using any known compression technique prior to or during the uploading process. In one embodiment at the host processing node the uploaded files may be de compressed by any of the web servers and or any one of the application servers where d is any number .

The encryption decryption module enables the encryption decryption of files during the upload download process. In one embodiment the files may be encrypted automatically prior to or during the uploading process. In one embodiment the format files may be encrypted a using the FIPS 197 encryption. Other encryption methods may be applied to the files as the embodiments are not limited in this context. In one embodiment at the host processing node the uploaded files may be decrypted by any of the web servers and or any one of the application servers 

Any view that is conditionally presented in the navigation frames the control frames and the tool bar frames is determined by the selected application the selected application view the selected application component the selected object within the navigation frame and a particular user s permissions.

In one embodiment the browsers are generally referred to as web browsers and include any software application that is used to locate and display web pages. The browsers run on the computers respectively as a client program using the HTTP protocol to make requests of web servers throughout the Internet network on behalf of a user. In one embodiment the browsers may use the S HTTP protocol to securely make requests of various web servers on the Internet network . The browsers enable their users to view and interact with resources available on the World Wide Web including the host processing node . In addition the browsers enable their users to download upload surf or otherwise access document files e.g. pages on the World Wide Web including the host processing node . In various embodiments the browsers may include Internet Explorer Netscape and Mozilla.

In one embodiment the control module includes a special purpose application program downloaded from the host processing node that seamlessly incorporates pre made modules such as the viewer module embedded in the browsers . In one embodiment the control module may include core technology elements of Active X controls provided by Microsoft . The core technology elements of Active X controls may be licensed from the Open Group standards organization and may be implemented on multiple platforms and computing environments. In one embodiment the Active X controls may be software modules based on Microsoft Component Object Model COM architecture. On the Internet Active X controls may be linked to web pages and downloaded by Active X compliant browsers . In one embodiment the Active X control module can provide full access to resources and application modules located at the host processing node .

In one embodiment the host processing node includes a host computing platform . In one embodiment the host computing platform provides a framework either in hardware or software to enable software application modules to execute. In one embodiment the host computing platform may include the computer architecture operating system programming languages and associated runtime libraries to implement an extended enterprise platform. In one embodiment the host computing platform includes one or more web servers one or more application servers and one or more database servers for example where e is any number . The database servers each may include a database management system DBMS . The web servers respond to requests from the browsers . The application servers provide e mail functionality and execute one or more functional modules to process data. The database servers execute the DBMS systems . The database servers also store the data required by the functional modules the web servers and the application servers . The host computing platform may be adapted to process one or more functional modules to process information. In one embodiment the functional modules may include for example an extended enterprise collaboration EEC module a digital rights management DRM module a collaborative negotiation CN module and a design cost management DCM module . In one embodiment the DCM module may comprise sub module . These functional modules may be executed individually or concurrently by various elements of host computing platform for example. The embodiments are not limited in this context.

In one embodiment the host computing platform may be based on a three tiered distribution structure which provides separate physical tiers for functionality and scalability for the web servers the application servers and the database servers . In various embodiments the EEC module and the host computing platform may be modular such that one tier may be modified or replaced without affecting the other tiers. Furthermore each of the web servers the application servers and the database servers may be load balanced and scaled across all three tiers by separating the web services functions and the application functions from the database functions. In one embodiment the three tiered distribution host computing platform may include a client server architecture including three separate processes each running on a different platform. The three separate processes execute on the web servers the application servers and the database servers . The embodiments are not limited in this context.

In one embodiment the web servers may be implemented as a plurality of distributed load balanced and scalable web servers executing independently. In one embodiment load balancing between two or more web servers may be implemented with network load balancing clusters. In one embodiment the application servers may be implemented as a plurality of distributed load balanced and scalable application servers executing independently. In one embodiment each of the one or more application servers may include two physical and two logical multithreaded processors for executing up to 20 parallel threads. In one embodiment for example the application servers each may be adapted to perform hyper threading. Those skilled in the art will appreciate that hyper threading is a threading technology implementation of the simultaneous multithreading technology on the Pentium 4 micro architecture provided by Intel Corporation Intel for example. Hyper threading refers generally to a form of super threading provided by the Intel Xeon processors and the Pentium 4 processors for example. Multithreading technology may improve processor performance under certain workloads by providing useful work for execution units that would otherwise be idle.

In one embodiment the database servers may be implemented as one or more structured query language SQL database servers running in a failover cluster as the database subsystem. A failover cluster implementation provides a backup operation that can automatically switch to a standby database server or network if the primary system fails or is temporarily shut down for servicing. Failover is a fault tolerance function of systems that rely on constant accessibility. Failover automatically and transparently to the user redirects requests from a failed or disabled system to the backup system that mimics the operations of the primary system. In another embodiment the data base servers may execute software comprising complex business logic that is applied to the data stored in the data bases . In one embodiment the software may leverage the ability of SQL 2005 provided by Microsoft to write queries in a higher level language other than SQL such as for example C . In one embodiment the SQL database servers and network load balancing clusters may be provided by Microsoft for example.

In one embodiment the EEC module includes multiple executable modules that may be executed either by the web servers or the application servers . The executable modules of the EEC module perform various collaboration and sourcing processing operations at the host processing node . Host processing operations may include one or more operations such as generating managing communicating sending receiving storing forwarding accessing reading writing manipulating encoding decoding compressing decompressing encrypting filtering streaming or other processing of media or control information. The embodiments are not limited in this context.

In one embodiment the ECC module includes sub modules to facilitate sharing electronic files across the extended enterprise network between collaborating resources at the first and second client nodes . The EEC sub modules may be adapted to convert native files uploaded to the web servers in their native file format to a compressed neutral file format. With the viewer module users across the extended enterprise network can display the contents of files converted to the neutral file format. As used herein a native file format refers to the format of any electronic file or document generated by a software application and stored in the unique format specified by the application. As used herein a neutral file format refers to any electronic file or document in a format where the original content of the native file has been converted to be displayed using the viewer module without the need for the original software application used to create the native file. The secure neutral format file also may be compressed to a smaller file size than the native file format and or may be encrypted. Examples of native format files are illustrated below in the examples of Tables 1 5.

In one embodiment the DRM module is arranged to encrypt electronic files to digitally secure the contents of any electronic file prior to transmitting the file across the extended enterprise network . Both native format files and secure neutral format files may be encrypted with the DRM module . In one embodiment user view permissions are embedded in the electronic file. Thus an unauthorized user cannot view the content of the electronic file even if the unauthorized user has the file and the viewer module . In one embodiment the encryption is FIPS 197 for example.

In one embodiment the EEC module is arranged to enable online sharing of media information such as for example documents including 2 D and 3 D CAD files of mechanical designs and descriptive data of the mechanical designs embedded in the CAD file. In one embodiment the EEC module may be arranged to enable annotation and markup of media information such as for example electronic image documents converted to the neutral file format and displayed by the viewer module without modifying the original content of the electronic file. In one embodiment the EEC module enables collaboration between resources at the first and second client nodes .

In one embodiment the host processing node of the extended enterprise network is implemented as an application service provider ASP . An ASP may be defined as an organization that offers individuals or enterprises access over the Internet e.g. network to application programs and related services that otherwise would reside in their own personal or enterprise computers e.g. computers . As an ASP the host processing node is arranged to provide a set of language independent interoperability technologies that enable software components written in different programming languages to work together throughout the extended enterprise network . In one embodiment the host processing node provides the application framework to the first and second client nodes . In one embodiment the ASP implementation of the host processing node can be realized using .NET technology provided by Microsoft . Accordingly the client node computers include a web presentation framework implemented into ASP.NET Active Server Page technology also provided by Microsoft . A built in page controller mechanism in ASP.NET may be used to implement the presentation logic for the EEC module within the ASP.NET framework. In one embodiment the software code executing on the web servers the application servers and the database servers is rendered on the browsers e.g. server side coding and paging .

As previously described in one embodiment the control module includes Active X controls including COM core technology elements. When network is an Internet network the Active X control module may be linked to web pages hosted by the web servers . The Active X control module may be downloaded from the web servers by the Active X compliant browsers . The Active X control module enables the browsers to access resources available at the host processing node .

Native format files may originate from repositories in any of the first and second client nodes and the host processing node . In one embodiment a native format file may originate from the database repository located at the first client node . A native format file may originate from the database repository located at the second client node . Each of the first and second client nodes and and the host processing node may include multiple native format files in various formats. Examples of multiple native format files and their corresponding native file formats file extensions versions and file categories e.g. CAD Vector Raster intelligent office document forms etc. are illustrated in the examples of Tables 1 5 below.

In one embodiment an authorized user either at the first or second client nodes may initiate upload of native format files from their respective databases . As illustrated in C and D a user at the first client node may for example initiate a native file upload using the application framework . Using the media information upload download module the upload process may include locating selecting e.g. clicking on moving e.g. dragging and or placing e.g. dropping the native format file into a web based application hosted by one of the web servers and selecting the destination of the native format files as any one of the web servers at the host processing node . In one embodiment the web based application may include any one of the viewer module the collaboration module and the project management module . Using a similar upload process and the application framework an authorized user at the second client node may select a native format file to upload to the host processing node for conversion to a secure neutral format file . The user may select one or more native format files to upload. Collectively any one of or all users at the first and second client nodes may select and transfer a plurality of native format files to the host processing node for conversion to corresponding secure neutral format files 

During the upload process a user may provide additional input with the browser to indicate whether the native format files include additional information content or association with other files. For example the user may indicate whether the native format files include any assemblies or sub assemblies. A user also may link the selected native format files in a business context associated with a project item repository BOM or business communication. In one embodiment the servers may host a web based application that provides a collaborative environment relating to a project specific business context such as quoting issue resolution and or new product introduction. In one embodiment the native format files are associated with such a project specific business context.

In one embodiment the native format files are encrypted prior to upload. In one embodiment the files may be encrypted automatically prior to or during the uploading process. In one embodiment the native format files may be encrypted a using the FIPS 197 encryption. Other encryption methods may be applied to the native format files as the embodiments are not limited in this context. In one embodiment the native format files may be compressed sing any known compression technique prior to or during the uploading process.

The native format files are uploaded from any one of the client nodes over the network e.g. the Internet to any one of the web servers at the host processing node . In one embodiment at the host processing node the uploaded native format files may be decrypted and de compressed by any of the web servers and or any one of the application servers . If necessary the web servers may manage broken uploads. The uploaded native format files may be stored in the databases . In one embodiment the uploaded native format files may be transferred directly from the web servers to the application servers for format translation processing by the converter module .

As the extended enterprise network expands the web servers and the application servers may be load balanced to handle large volumes of incoming native format files for format translation processing. Thus the one or more application servers may load one or more instances of the converter module to translate the uploaded native format files . The converter module translates each of the native format files to corresponding secure neutral format files . Once translated the content of the secure neutral format file can be displayed by the viewer module regardless of the native software application used to create the native format file . After conversion the secure neutral format files are available for displaying and collaborating by users at the first and second client nodes . The secure neutral format files may be stored in any one of the databases or may be downloaded to and or stored at the first and second client nodes for displaying and collaborating.

Once invoked by the application servers the converter module automatically determines the native file format of the incoming native format files and translates them to corresponding secure neutral format files . In one embodiment the converter module automatically translates each of the native format files to corresponding secure neutral format files ready for displaying by the viewer module and for collaborating. In one embodiment the converter module may be adapted to receive multiple native format files . Each of the multiple native format files may have a different native file format as illustrated in the examples of Tables 1 5 below.

The converter module also converts and populates web based applications running on any one of the one or more web servers with content that enables end users at the first and second client nodes to download the secure neutral format files into a context specific business applications with which the users may be collaborating. Downloading the secure neutral format files is generally within the context of a user specific business application and thus does not require a user to exit an application to display and collaborate over the secure neutral format files 

The converter module provides the translation functionality to enable multiple end users at the first and second client nodes to collaborate using the secure neutral format files In one embodiment collaboration may occur over within a project specific business context. In one embodiment the secure neutral format files also may be encrypted by the DRM module for secure collaboration between the first and second client nodes the host processing node throughout the extended enterprise network . The encrypted neutral file format may be referred to as a secure collaboration format for example.

In operation the converter module reads the native format files . In one embodiment the converter module may process the one or more native format files either serially or in parallel. For simplicity the operation of the converter module is described with respect to processing a single native format file . The embodiments however are not limited in this context. The converter module determines the native file format independent of the file extension. The native format may not be ascertained solely based on file extension alone because there may exist multiple files with the same file extension yet having different formats. Nevertheless in one embodiment the converter module first may determine the file extension to narrow the selection of file interrogation templates to determine the native file format. Once a sub set of possible native file formats is ascertained based on the file extension in one embodiment the converter module verifies the structure and content of the native format file using a template based file interrogation technique. Also once the native file format is verified the converter module determines the actual format translation logic flow to convert the native format file to a corresponding secure neutral format file . The converter module then extracts metadata contained in the native format file . The metadata describes the file attributes of the native format file .

In one embodiment the native format file may be categorized into one of a 2 D graphics raster vector 3 D vector intelligent document and or forms e.g. XML file format. To determine the format of the native format file a file format interrogation module parses the header and or the body portion of the native format file searching for format type indicators embedded in the file. The file format interrogation module parses the header searching for byte patterns strings and other format type indicators embedded in the native format file . If the native file format is a 3 D vector format for example the converter module parses the contents of the body of the native format file searching for key strings or byte patterns associated with 3 D CAD models.

Using the Application Program Interface API corresponding to the native software application used to create the native format file the converter module executes one or more sub modules to translate the native format file to a secure neutral format file . With the API the one or more sub modules extract descriptive data which are associated with the item embedded in and or defined by the contents of the native format file . The descriptive data may include attributes physical properties item features and or entities of the item. Item attributes may include whether the item is a sheet metal part a circuit board a wire harness a weldment and the like. Physical properties may include length width thickness height material finish and other properties that specify the item. Item features may associate the item with a manufacturing process used to manufacture build assemble or otherwise fabricate the item. Item entities may include identifiers that indicate whether the item is represented by a 2 D or 3 D CAD model. Once the item attributes physical properties and or item features are extracted and or created based on the extracted information the converter module searches a database to match the item attributes physical properties item features and item entities with a supplier and or manufacturer capable of sourcing and or manufacturing the design. If the item includes one or more assemblies the converter module extracts the number of assemblies and the hierarchical relationship between multiple items within each assembly and extracts the number of occurrences of a particular item that is common to one or more assemblies. Based on the extracted information the converter module may determine if all the native format files associated with the item were received in the upload and notifies the user if any files or data are missing. Once all the item attributes physical properties and item features are extracted from the native format file the converter module creates a corresponding secure neutral format file . The converter module extracts the descriptive data from the native format file to create an image of the item and a list of item attributes physical properties and item features that may be displayed with the viewer module within the application framework . If the native format file contains an assembly the secure neutral format file includes a representation of the assembly views that are displayed as an assembly tree by the application framework . The assembly tree view displays the relationship between each item within an assembly and may include a display of the item description revision quantity roll up and other information. The secure neutral format file contains embedded information about the item to enable the viewer module to graphically display the item views as was originally intended to be displayed using the native CAD software application used to create the item. The graphics display information also may include information about whether an item is linked to a manufacturing process and may create additional multiple views and or additional item attributes physical properties and or item features of the item that may not have been contained in the native format file as part of the original item. The additional views may include for example flattening and folding of sheet metal components weldments and other features. In one embodiment the original view of the native format file may be saved as one secure neutral format file and the additional view of the native format file may be saved as a separate secure neutral format file . Additional item attributes physical properties and or item features may include for example the length width and or thickness associated with the additional item views.

Tables 1 5 below illustrate several examples of native format files that may be converted to secure neutral format files by the converter module . For each of the native format files the examples of Tables 1 5 illustrate the native software application used to generate it a brief description of the file type file extension version and file category. As used herein a file category indicates whether the native format file is a CAD vector or raster formatted file. It should be understood that the examples illustrated in Tables 1 5 are a non exhaustive exemplary list of native format files and is not intended to limit the scope of the embodiments in this context.

Table 1 below illustrates examples of mechanical CAD design native format files that may be supported in one embodiment of the converter module .

Table 2 below illustrates examples of electrical electronic CAD design native format files that may be supported by the converter module .

Table 3 below illustrates examples of vector based graphics native format files that may be supported by the converter module .

Table 4 below illustrates examples of raster based graphics native format files that may be supported by the converter module .

Table 5 below illustrates examples of intelligent document native format files that may be supported by the converter module .

In one embodiment the dispatcher is a module to identify the format of the native format files e.g. as illustrated in the examples of Tables 1 5 to be translated and to select one or more converter service modules to translate the native format to the secure neutral format. Once the native file format of an input native format file is identified the dispatcher sends the native format file to one or more converter service modules to be translated to the corresponding secure neutral format file . In one embodiment if there are multiple input native format files the dispatcher may send the files to the one or more queues which may be adapted as first in first out data structures to process multiple demands from the dispatcher . In one embodiment the queues may be adapted such that later arriving native format files are added to the tail of the queues and the converter service modules take the native format files that arrived earlier from the head of the queues 

In one embodiment the dispatcher includes a file interrogation module . The file interrogation module receives the native format files and determines their native file formats. In one embodiment determining the format of the native format file may include applying one or more individual rule engines or combinations thereof to the native format file . The rule engines may include one or more executable modules collectively referred to herein as the file interrogation module . In one embodiment the file interrogation module applies a series of templates against the header and the body portions of the native format files . In one embodiment the templates may reside in the databases . Once the native file format is determined the file interrogation module selects one or more of the converter service modules to translate the native format files to corresponding secure neutral format files . In one embodiment for each of the native format files the converter service modules load the API of the software application used to create the native format files . The converter service modules use the facilities provided by the native software application to extract the contents of the native format files . For example extract the image and the descriptive data of the design embedded in the native format files 

In one embodiment the DJVU converter service module may translate Windows Bitmap Graphics Interchange Format GIF JPEG File Interchange Format Portable Network Graphics Tagged Image File Format TIFF Portable Gray Map File Portable Bit Map File Portable Pixel Map File Portable Any Map File Adobe Portable Document Format PDF and Apple McIntosh File native file formats to the secure neutral file format.

In one embodiment the Spatial converter service module may translate Hewlett Packard Graphics Language File Format HPGL Initial Graphics Exchange Specification IGES 2 D format Computer Graphics Metafile STEP 2 D Stereolithography Interface Format Verband der Automobilindustrie German Automobile Industry Association and Virtual Reality Modeling Language native file formats to the TIFF intermediate file format which then may be processed by the TIFF converter service module .

In one embodiment the TIFF converter service module may translate Spatial LeadTools Net Converter and Batik File to the DJVu intermediate file format which then may be processed by the DJVu converter service module .

In one embodiment the DJVU PDF converter service module may translate the TIFF and PDF formats to the secure neutral file format.

In one embodiment the Model Press converter service module may translate Initial Graphics Exchange Specification IGES 3 D the STEP 3 D 3D Studio File HOOPS Stream File Extensible Graphics Language and ACIS native file formats to the secure neutral file format.

In one embodiment the AutoCAD converter service module may translate AutoCAD AutoCAD Drawing Exchange and Drawing Exchange native file formats to the HPGL intermediate file format which then may be processed by the TIFF converter service module .

In one embodiment the HPGL converter service module may translate AutoCAD DWF Inventor SolidWorks SolidEdge and Pro Engineer formats to the Spatial intermediate file format which then may be processed by the Spatial converter service module .

In one embodiment the DWF converter service module may translate the AutoDesk Design Web native file format to the HPGL intermediate file format which then may be processed by the HPGL converter service module .

In one embodiment the Inventor converter service module may translate the AutoDesk Inventor Drawing native file format to the HPGL intermediate file format which then may be processed by the HPGL converter service module . The Inventor converter service module also may translate AutoDesk Inventor Part and AutoDesk Inventor Assembly native file formats to the 3DF intermediate file format which then may be processed by the 3DF converter service module .

In one embodiment the 3DF converter service module may translate the Inventor SolidWorks SolidEdge and Pro Engineer to the Model Press intermediate file format which then may be processed by the Model Press converter service module format input.

In one embodiment the SolidWorks converter service module may translate the SolidWorks Drawing native file format to the HPGL intermediate file format which then may be processed by the HPGL converter service module . The SolidWorks converter service module also may translate SolidWorks Part and SolidWorks Assembly native file formats to the 3DF intermediate file format which then may be processed by the 3DF converter service module .

In one embodiment the SolidEdge converter service module may translate the SolidEdge Draft native file format to the HPGL intermediate file format which then may be processed by the HPGL converter service module . The SolidEdge converter service module also translates SolidEdge Part SolidEdge Assembly SolidEdge Sheet Metal Part and SolidEdge Weldment native file formats to the 3DF intermediate file format which then may be processed by the 3DF converter service module .

In one embodiment the Pro Engineer converter service module may translate the Pro Engineer Drawing native file format to the HPGL intermediate file format which then may be processed by the HPGL converter service module . The Pro Engineer converter service module also translates the Pro Engineer Part and Pro Engineer Assembly native file formats to the 3DF intermediate file format which then may be processed by the 3DF converter service module .

In one embodiment the LeadTools converter service module may translate JPEG 2000 Code Stream bitmap JPEG 2000 JP2 Windows Metafile Targa BitMap Computer Aided Acquisition and Logistics Support Raster Graphics Multipage PCX Bitmap ZSoft PCX Bitmap and Encapsulated Post Script native file formats to the TIFF intermediate file format which then may be processed by the TIFF converter service module .

In one embodiment the Net Converter converter service module may translate Windows Metafile and Windows Icon native file formats to the TIFF intermediate file format which then may be processed by the TIFF converter service module .

In one embodiment the BatikFile converter service module may translate the Scalable Vector Graphics native file format to the TIFF intermediate file format which then may be processed by the TIFF converter service module .

In one embodiment the Image Magic converter service module may translate Kodak PhotoCD Bitmap and Sun Raster Bitmap native file formats to the secure neutral file format.

In one embodiment the Black ICE Printer Driver converter service module may translate the Microsoft Word Excel Power Point Project and VISIO native file formats to the EMF intermediate file format which then may be processed by the EMF converter service module .

In one embodiment the DJVU EMF converter service module may translate the Windows Exchange Metafile native file format to the secure neutral format.

In one embodiment the EMF converter service module may translate the output from the Black Ice Printer Driver converter service module to the LeadTools intermediate file format which then may be processed by the LeadTools converter service module .

Any number of other converter service modules may be employed to implement translations from any native or intermediate file format to the secure neutral file format. The embodiments are not limited in this context.

To simplify the description of the operation of one embodiment of the converter service modules herein reference is now made to B which are diagrams illustrating the file structures of a native format file and a secure neutral format file respectively. is one embodiment of a structure of a native format file . As shown the native format file includes a header and a body . The header and the body each may include multiple elements. The header includes information in the form of byte patterns strings and or a combination of both. Portions of the header information may be associated with the format of the native format file and may include the file extension the name of the native application used to create the native format file an identifier associated with the native application and or the version number of the native application among other information for example. The body may include information in the form of byte patterns strings and or a combination of both. Portions of the body information may be associated with the content of the native format file . For example the body may contain information about an image and descriptive data of a design object and or entities that indicate whether the design object is a 2 D or a 3 D CAD design.

The native format file is received by the converter module and in one embodiment the file interrogation module identifies the file extension. Although the file extension is not required to translate the native format file identifying the file extension reduces the number of predefined templates to be applied to the header and the body . It should be appreciated by those skilled in the art that the file extension alone may not be an adequate indicator for selecting one of the converter service module . There are many native format files that have the same file extension but have different native file formats. As an example Cadence Unigraphics and ProEngineer CAD software applications each generate native CAD files with a .PRT extension. Each of these native applications however has a different format and requires a different converter service module to translate. Nevertheless because the number of native format files that have the same file extension is a sub set of the population of native format files supported by the converter service modules identifying the file extension reduces the total number rule based templates to be invoked to identify the file format. Thus the file interrogation module selects and invokes one or more rule templates based on the file extension and selects the appropriate converter service modules . Once the file extension is identified a sub set number of rule templates is identified based on the file extension and these rule templates are applied to the native format file .

After reading the file extension of the native format file and identifying a subset of the rule templates the file interrogation module invokes a multithreaded instantiation of the sub set of the rule templates on one or more of the application servers . In one embodiment the multiple rule templates may be parallel processed across the one or more application servers or may be serially processed. In one embodiment for example each of the one or more application servers may execute five threads against each processor unit to expedite the conversion process. The file interrogation module applies one or more predefined templates and compares the contents of the header and or body to the template. The file interrogation module reads the contents of the header the body or both of the native format file . The contents are then compared to the multiple predefined templates to identify the native file format. In various embodiments the file interrogation module includes the application of multiple rule engines including using templates including at least some information about known native file formats and comparing the contents of the header and the body to the information defined in the templates . In general a different template may be defined for each native file format. In one embodiment the file interrogation module processes the native format file with the templates using various matching based rules such as byte pattern global string logical function such as a Boolean logic function a content based identifier and or any combinations of these rules or all of these rules. In one embodiment the template based rule engine may be an extensible markup language XML based file format interrogator for example. It should be appreciated that these rules are merely provided as examples and the scope of the converter module is not limited in this context.

In one embodiment after the file interrogation module determines the format of the native format file it selects one or more of the converter service modules based on the identified native file format. The native format file may be dispatched to one or more of the queues for further processing. The dispatcher sends the file to the one or more selected converter service modules for translation to the corresponding secure neutral format file . In one embodiment for example the file interrogation module may select a converter service module to perform a direct translation. Accordingly the converter service module is invoked and executed in a single or multi threaded manner to extract the desired content of the native format file required to generate the corresponding secure neutral format file .

The service modules invoke the native API and translate the native format file to the secure neutral format file . To perform the translation the converter service module invokes the API of the software application used to generate the native format file and extracts the graphic image and descriptive data content of the native format file . The graphic image and descriptive data content of the native format file may define an item having a certain structure with properties attributes and manufacturing features. As previously described the term item refers to any mechanism device instrument machine machinery or assembly or components elements sections materials or resources needed to build construct manufacture assemble or fabricate a product represented by digital information that forms a portion of the content of the native format file . For example the converter service module may extract information associated with various properties of the item as may be defined by the content of the native format file . For example the content may define an item structure. The structure may be defined by certain properties attributes and manufacturing features. In one embodiment the converter service module also may extract information about features as may be defined by the content of the native format file . The features are associated with the manufacturing process employed to create the item. The manufacturing process may include for example stamping casting circuit board fabrication packaging general fabrication machining molding welding among various other services normally associated with the design manufacture and distribution of an item. Based on the identified file format the service modules may translate the native format file into one or more intermediate file formats prior to outputting the secure neutral format file because there may not be a direct converter service module to perform a direct translation. The embodiments are not limited in this context.

Several examples of applying the rule based templates are now described. In one embodiment the file interrogation module may apply a byte pattern rule template to the header portion of the input native format file . Accordingly the file interrogation module reads the contents of the header and compares the contents at predetermined positions within the header to one or more predefined byte patterns that are characteristically associated with a particular native file format. For example byte patterns that are characteristically associated with any one of the known native file formats as illustrated in the examples of Tables 1 5. The file interrogation module identifies the format of the native format file when there is a match between the byte pattern defined in the byte pattern rule template for example and the contents of the header at the predetermined positions of the native format file . The conversion process then continues to one or more of the converter service modules that correspond to the particular identified format. As previously discussed the translation process may include one or more intermediate translations before arriving at the output secure neutral format file that corresponds to the input native format file .

An example XML based byte pattern rule template to identify a Windows Bitmap type raster file with a .BMP extension is shown below 

If no match is found using the byte pattern rule template in one embodiment the file interrogation module may apply a global string pattern rule template to the header and the body portions of the input native format file . Accordingly the file interrogation module reads the contents of the header and the body and compares the contents against one or more predefined template string patterns characteristically associated with a particular native file format. These may include strings that are characteristically associated with any one of the known native file formats as illustrated in the examples of Tables 1 5. The file interrogation module identifies the format of the native format file when there is a match between the string pattern rule template and the contents of the header and or body of the native format file . The conversion process then continues to one or more of the converter service modules that correspond to the particular identified format. As previously discussed the translation process may include one or more intermediate translations before arriving at the output secure neutral format file that corresponds to the input native format file .

An example XML based global string pattern rule template to identify a SolidEdge Assembly type vector file with a .ASM extension is shown below 

If no match is found using either the byte pattern rule template or the global strings rule template in one embodiment the file interrogation module may apply a Boolean logic function such as a logic OR function rule template to the header and the body portions of the native format file . Accordingly the file interrogation module reads the contents of the header and the body and performs a logic OR function against one or more specific byte or string patterns that are characteristically associated with a particular native file format. These may include bytes or strings that are characteristically associated with any one of the known native file formats as illustrated in the examples of Tables 1 5. The file interrogation module identifies the format of the native format file when the OR function produces a byte or string pattern match between the Boolean logic rule template and the contents of the header and or body of native format file . The conversion process then continues to one or more of the converter service modules that correspond to the particular identified format. As previously discussed the translation process may include one or more intermediate translations before arriving at the output secure neutral format file that corresponds to the input native format file .

An example XML based Boolean OR rule template to identify an AutoCAD type vector file with a .DWG extension is shown below 

If no match is found using the byte pattern rule template the global strings rule template or the Boolean logic rule template in one embodiment the file interrogation module may apply a 2 D content based identifier code check rule template to the header and the body portions of the native format file . Accordingly the file interrogation module reads the contents of the header and the body and compares the contents against the 2 D content based identifiers in the form of specific byte or string patterns that are characteristically associated with a particular native file format. These may be bytes or strings that are characteristically associated with any one of the known native file formats as illustrated in the examples Tables 1 5. The file interrogation module identifies the format of the native format file when the 2 D content based identifiers match a byte or string pattern in the header and or body portion matches 2 D drawing specific content associated with a 2 D design in the native format file . The conversion process then continues to the one or more of the converter service modules that correspond to the particular identified format. As previously discussed the translation process may include one or more intermediate translations before arriving at the output secure neutral format file that corresponds to the input native format file .

An example XML 2 D content based identifier referred to herein as code check rule template to identify a 2 D Initial Graphics Exchange Specification IGES type vector file with a .IGES or .IGS extension is shown below 

If no match is found using the byte pattern rule template the global strings rule template the Boolean logic rule template or the 2 D content based identifier rule template in one embodiment the file interrogation module may apply a 3 D content based identifier code check rule template to the header and the body portions of the native format file . Accordingly the file interrogation module reads the contents of the header and the body and compares the contents against the 3 D content based identifiers in the form of specific byte or string patterns that are characteristically associated with a particular native file format. These may be bytes or strings that are characteristically associated with any one of the known native file formats as illustrated in the examples of Tables 1 5. The file interrogation module identifies the format of the native format file when the 3 D content based identifiers match a byte or string pattern in the header and or body portion matches 3 D drawing specific content associated with a 3 D design in the native format file . The conversion process then continues to the one or more of the converter service modules that correspond to the particular identified format. As previously discussed the translation process may include one or more intermediate translations before arriving at the output secure neutral format file that corresponds to the input native format file .

An example XML 3 D content based identifier referred to herein as code check rule template to identify a 3 D Initial Graphics Exchange Specification type vector file with a .IGES or .IGS extension is shown below 

In the code check process to determine whether the file is a 2 D or a 3 D file the file interrogation module may look for content based identifier referred to as 3 D entities that may be associated with a 3 D file. If no 3 D entities are matched the file interrogation module defaults to a 2 D file. These 3 D entities may include for example the following IGES entity mapping for 2 D and 3 D geometry determination and attribute extraction. For example the interrogation module may parse the code for entity attributes associated with items such as angular dimension diameter dimension general label general note linear dimension radius dimension general symbol section drawing and view for example. The file interrogation module also may parse the code for 3 D entities associated with the item such as parametric spline surface ruled surface surface of revolution tabulated surface rational bspline surface curve on a surface bounded surface trimmed surface plane surface right circular conical surface and toroidal surface for example. The file interrogation module also may parse the code for solid 3 D entities associated with the item such as a manifold solid object for example.

Other rule templates may be applied to identify multiple format types not discussed above. The embodiments are not limited in this context.

Following are two additional examples of rule templates that may be applied once the file extension is identified. As previously described Pro Engineer and Unigraphics CAD applications each generate native files with a .PRT extension even though the native file formats for these two CAD files are different and cannot be converted using the same converter service module.

An example XML rule based template using a byte pattern and global string matching technique to identify a Pro Engineer Part File with a .PRT extension is shown below 

An example XML rule based template using a byte pattern and global string matching technique to identify a Unigraphics Part File with a .PRT extension is shown below 

As previously described the native format file may take many forms including Text ASCII SGML HTML Images TIFF and GIFF Graphics collections of vectors such as DAD CAM GIS files Audio collections of bits structured according to sound wave theory Video mpeg CAD mechanical design file formats CAD electronic design EDA ECAD PCB file formats vector based documents graphics file formats raster based graphics file formats and intelligent office documents file formats among others for example. The descriptive data as defined by the content of the native format file may include for example item properties summary information user defined properties and mass properties of the item defined by the native format file for example. Table 7 below provides examples of the various properties that may be associated with an item defined by the content of the native format file in its native file format.

In one embodiment in addition to item structural properties and attributes the converter service module may extract additional information associated with the item such as for example intelligence about any missing parts assembly views sheet metal flattening and additional properties related to flattening welds and sub file types for example.

Some native file formats are directly translatable to the neutral file format . For example in one embodiment native file formats are directly translatable to the neutral file format . Thus the Windows Bitmap Graphics Interchange Format GIF JPEG File Interchange Format Portable Network Graphics Tagged Image File Format TIFF Portable Gray Map File Portable Bit Map File Portable Pixel Map File Portable Any Map File Adobe Portable Document Format PDF and Apple McIntosh File are directly translated to the neutral file format by the DJVu converter service module . Accordingly the file interrogation module may select the DJVu converter service module to translate these formats directly to the secure neutral file format .

In one embodiment the Initial Graphics Exchange Specification IGES 3 D the STEP 3 D 3D Studio File HOOPS Stream File Extensible Graphics Language File and ACIS File native file formats are directly translated to the neutral format by the Model Press converter service module .

As previously discussed however there may be one or more intermediate translations from one format to another if a single converter service module cannot perform a direct translation. The number of intermediate translations depends on the input native file format . The converter module may perform one or more intermediate translations using the various converter service modules shown in .

Accordingly the Hewlett Packard Graphics Language File Format HPGL Initial Graphics Exchange Specification 2 D Computer Graphics Metafile STEP 2 D Stereolithography Interface Format Verband der Automobilindustrie German Automobile Industry Association and Virtual Reality Modeling Language native file formats are translated by the Spatial converter service module . In one embodiment the output of the Spatial converter service module is translated by the TIFF converter service module . In one embodiment the output of the TIFF converter service module is translated by the DJVu PDF converter service module and or the DJVu converter service module to the secure neutral file format .

In one embodiment the AutoCAD File AutoCAD Drawing Exchange Format and Drawing Exchange Format native file formats are first translated with the AutoCAD converter service module to an HPGL intermediate file format. In one embodiment the HPGL converter service module output is translated by the Spatial converter service module . In one embodiment the output of the Spatial converter service module is translated by the TIFF converter service module . In one embodiment the output of the TIFF converter service module is translated by the DJVu converter service module to the secure neutral file format .

In one embodiment the AutoDesk Design Web Format native file format is first translated by the DWF converter service module . In one embodiment the output of the DWF converter service module is translated by the HPGL converter service module . In one embodiment the output is translated by the Spatial converter service module . In one embodiment the output is then translated by the TIFF converter service module . In one embodiment the output of the TIFF converter service module is translated by the DJVu converter service module to the secure neutral file format .

In one embodiment the AutoDesk Inventor Part File and AutoDesk Inventor Assembly File native file formats are first translated by the Inventor converter service module . In one embodiment the output is translated by the 3DF converter service module . In one embodiment the output of the 3DF converter service module is translated by the Model Press converter service module . In one embodiment the output is then translated to the neutral file format .

In one embodiment the AutoDesk Inventor Drawing File native file format is first translated by the Inventor converter service module . In one embodiment the output is translated by the HPGL converter service module . In one embodiment the output is translated by the Spatial converter service module . In one embodiment the output is then translated by the TIFF converter service module . In one embodiment the output of the TIFF converter service module is translated by the DJVu converter service module to the neutral file format .

In one embodiment the SolidWorks Part File and SolidWorks Assembly File native file format are translated by the SolidWorks converter service module . In one embodiment the output is then translated by the 3DF converter service module . In one embodiment the output is translated by the Model Press converter service module to the neutral file format .

In one embodiment the SolidWorks Drawing File native file format is first translated by the SolidWorks converter service module . In one embodiment the output is then translated by the HPGL converter service module . In one embodiment the output of the HPGL converter service module is translated by the Spatial converted service module . In one embodiment the output is translated by the TIFF converter service module . In one embodiment the output of the TIFF converter service module is translated by the DJVu converter service module to the neutral file format .

In one embodiment the SolidEdge Part File SolidEdge Assembly File SolidEdge Sheet Metal Part and SolidEdge Weldment File native file formats are translated by the SolidEdge converter service module . In one embodiment that output is then translated by the 3DF converter service module . In one embodiment the Model Press converter service module then translates the output of the 3DF converter service module to the secure neutral file format .

In one embodiment the SolidEdge Draft File native file format is converted to the HPGL intermediate file format by the SolidEdge converter service module . In one embodiment that output is translated by the HPGL converter service module . That output is then translated by the Spatial converted service module . In one embodiment the output of the Spatial converted service module is translated by TIFF converter service module . In one embodiment that output is then converted by the DJVu converter service module to the secure neutral file format .

In one embodiment the Pro Engineer Part File and Pro Engineer Assembly File native file formats are first translated by the Pro Engineer converter service module . In one embodiment the output is then translated by the 3DF converter service module . In one embodiment that output is translated by the Model Press converter service module to the secure neutral file format .

In one embodiment the Pro Engineer Drawing File native file format is translated by the Pro Engineer converter service module . In one embodiment the output is translated by the HPGL converter service module . In one embodiment that output is then translated by the Spatial converted service module . In one embodiment the output is translated by the TIFF converter service module . In one embodiment that output is then translated by the DJVu converter service module to the secure neutral file format .

In one embodiment the JPEG 2000 Code Stream bitmap JPEG 2000 JP2 File Format Windows Metafile old Win 3.x format Targa BitMap Computer Aided Acquisition and Logistics Support Raster Format Graphics Multipage PCX Bitmap ZSoft PCX Bitmap and Encapsulated Post Script native file formats are first translated by the LeadTools converter service module . In one embodiment that output is then translated by the TIFF converter service module and the DJVu converter service module translates it to the secure neutral file format .

In one embodiment the Windows Metafile and Windows Icon File native file formats are first translated by the Net Converter converter service module . In one embodiment the output is translated by the TIFF converter service module . In one embodiment that output is then translated by the DJVu converter service module to the secure neutral file format .

In one embodiment the Scalable Vector Graphics File native file format is first translated by the BatikFile converter service module . In one embodiment the output is translated by the TIFF converter service module . In one embodiment that output is then translated by the DJVu converter service module to the secure neutral file format .

In one embodiment the Kodak PhotoCD Bitmap and Sun Raster Bitmap native file formats are translated directly to the neutral file format by the Image Magic converter service module .

In one embodiment the Adobe PostScript native file format is translated directly to the neutral file format by the DJVu PDF converter service module .

In one embodiment the Microsoft Word Document Microsoft Excel File Microsoft PowerPoint Document and the Microsoft Project File native file formats are translated by the Black Ice Printer Driver converter service module . In one embodiment that output is translated by the EMF converter service module . In one embodiment the output is then translated by the Lead Tools converter service module . In one embodiment the output is translated by the TIFF converter service module . In one embodiment that output is then translated by the DJVu converter service module to the secure neutral file format .

As previously described the converter service modules illustrated in are a representative example of possible converter service modules and is not an exhaustive list of converter service modules that may be used in any one application. Therefore it should be understood that the converter module is not limited in scope thereto. Furthermore the conversion translation process of selecting the appropriate converter service modules performing the translation is automatic and is based on the output of the file interrogation module .

In various embodiments the viewer module enables users to view media information includes functionality to enable collaboration between resources throughout the extended enterprise network and enables XML data input capabilities. In one embodiment the viewer module displays 2 D and 3 D CAD graphic images contained in the secure neutral format files . The viewer module receives the translated secure neutral format files from the host processing node and displays the contents of the files on the monitor . The viewer module may be adapted to accept and display multiple secure neutral format files with content that was originally generated using a variety of document image CAD and other native file type applications each one with its own proprietary file format as illustrated in examples of Tables 1 5 above.

To view a graphic image in a secure neutral format file the user can invoke the viewer module on the client computer by selecting the image of the file in a folder or on the computer desktop with the pointing device . This launches the viewer module as a stand alone application in the web browser . When the viewer module is invoked it reads the view state of the graphic image from the XML header embedded in of the secure neutral format file . The viewer module applies the current view state and displays the graphic image on the monitor .

In one embodiment the viewer module enables collaboration between resources at the first and second client nodes and over media information such as for example engineering design and office documents. In one embodiment the viewer module enables resources at the first and second client nodes and to exchange and collaborate over RFQ documentation to communicate item requirements from a buyer to a supplier. Item requirements include the items that make up a design. When the item represents an assembly the requirements may include the individual elements that together form the item. For example to procure items for a given design a RFQ may include a dimensioned drawing a 3 D solid model and other documents that convey to the supplier all the necessary details of a technical specification that may be employed to adequately quote an item as requested by the buyer.

The viewer module may include DRM technology enabled by the DRM module to enable a secure exchange of such documents. In one embodiment the secure neutral format files may be deployed throughout the extended enterprise network in a secure collaboration format using the AES FIPS 197 Encryption Standard. The secure neutral format files may be implemented as a fully compressed file format to minimize file size. In one embodiment the viewer module enables annotations to images and drawings displayed on the monitor . Annotations include redline markup overlays on a user interface view with a message context to collaborate. Redline markup overlays are saved as XML in any one of the databases along with a collaboration message thread.

The viewer module may be implemented using Microsoft Visual C Microsoft Foundation Class library MFC and Active Template Library ATL . The viewer module code can be executed on the user computer . In one embodiment the viewer module may be implemented as an Active X Control for use in a variety of different containers including for example Internet Explorer browser e.g. browsers and other containers ranging from software development tools to end user productivity tools. In one embodiment the viewer module also may be implemented as a XPCOM based Netscape Plugin to support Gecko Based Browsers e.g. browsers .

In one embodiment the design properties pane displays descriptive data associated with the graphic image . The descriptive data illustrated in the design properties pane is the descriptive data extracted form the native format file and embedded in the converted secure neutral format file . The design properties pane may include for example item properties summary information and mass properties . The information displayed in the properties pane is derived from the descriptive data associated with the graphic image . As previously discussed the descriptive data is extracted from the native format files by the converter module during the translation process as described above.

In the item structure pane the viewer module displays an item structure tree that is associated with the graphic image . A selected item on the item structure tree relates to a corresponding graphic image view of the selected item . The item structure tree includes files that define an item associated with the graphic image . The item may be a single stand alone object or may form a portion of an assembly including multiple items or an item may include multiple elements. In one embodiment the files displayed in the item structure tree may define two or more items and a structural relationship between the two or more items. The files that define the item or the structural relationship between the two or more items include one or more viewable files in a neutral file format. In one embodiment the files illustrated in the item structure tree are embedded within the data portion of the secure neutral format file . The files illustrated in the item structure tree include the graphic image files capable of displaying the structural characteristics of the item in multiple views and all of the descriptive data associated with all the views for the graphic image .

In the illustrated embodiment the graphic image represents an assembly. Accordingly the top level of the item structure tree is the assembly view . The level below the assembly view is a subassembly level view of various assembly components and . The level below subassembly view is an element level view of the various subassembly components . Selecting a file in the item structure pane with the pointing device launches the associated graphic image in the image pane associated with that file. The corresponding graphic image is displayed according to the view state saved in the XML header of the secure neutral format file . In the illustrated embodiment the pointing device selection is the subassembly file . The graphic image corresponding to the subassembly file is displayed in the image pane according to the most recently saved view state in the XML header .

The viewer module enables the user via a toolbar frame and or the navigation frame for example to interact with the graphic image in multiple ways. In various embodiments the viewer module coupled with one or more functional modules e.g. EEC module may enable users at the first and second client nodes to save one or more view states in the XML header of the secure neutral format file in database located at the processing node and or in databases located at client nodes . In one embodiment view states may include cropping the image applying a blotter to the image removing background layers from the image e.g. remove a blue layer from a blue print image applying a rubber stamp effect to the image and or annotating the image . The viewer module extracts viewer directives from the XML header of the secure neutral format file and displays the graphic image accordingly. In other embodiments the viewer module can rotate the image explode the image of an assembly item into its components assemble the image of components into an assembly item auto dimension the image toggle through parts of an assembly of the image skew deskew the image and or search for text in the image via optical character recognition OCR . In yet other embodiments the viewer module can enable users at the first and second client nodes to collaborate. In one embodiment the image is the subject matter of the collaboration. In one embodiment the XML header of the secure neutral format file includes viewer directives that define a current view state of the graphic image . The XML header instructs the viewer module on how to display the graphic image . The viewer module displays the graphic image in accordance with the most recent version of view state directives in the XML header . The view state directives modify the way the graphic image is displayed but does not modify the underlying data portion of the secure neutral format file . Further in one embodiment if the view state is modified the viewer module does not modify the data does not overwrite the current secure neutral format file or previously saved view states and does not create and store a new copy of the secure neutral format file with the modified view. The new view state is saved in the XML header in one or more of the databases in addition to the one or more other view states that were previously saved in the XML header of the same secure neutral format file .

With reference now to both illustrate one embodiment of a viewer module view state graphical user interface . According to this embodiment the viewer module in conjunction with the EEC module may create and save a view state. In one embodiment the view state involves removing background layers from the image e.g. remove blue from a blue print . In one embodiment by selecting the touch up button a user at the first or second client nodes may initiate the application framework and the EEC module to remove background layers from the image . Scanned engineering drawings Blue Prints are treated as color documents and are partitioned into a foreground plane and a background plane. The foreground plane contains the text and the line drawings compressed as a bitonal or low color image at maximum resolution thereby preserving the sharpness and readability of the text. The background plane contains the paper textures and background color introduced via the drawing reproduction process in copying the Mylar master drawing document. The background is compressed at reduced resolution with IW44. Areas of the background covered by foreground components are smoothly interpolated so as to minimize the encoding cost of background areas occluded by foreground components. A foreground background segmenter first detects objects that are sharply contrasted with their surroundings and then classifies them into the foreground or the background planes using several criteria such as their color uniformity their geometry and an estimate of their encoding cost. This intelligent separation into background and foreground layers enables the viewer module to turn off the display of the segmented background layer thereby removing the blue background and leaving a clear high resolution foreground image of the document without the annoying background color that reduces original drawing fidelity that makes it difficult to read.

Another example of how view state directives get attached to the XML header is when a user at either first or second client nodes of a document wishes to only publish a subset of the image . In one embodiment the user may utilize the viewer module and the EEC module to crop the image . According to this embodiment the user may 1 click Start Crop Start Crop changes to Apply Crop 2 drag a rectangle around the subset of the image 3 click on Apply Crop and then 4 click on Save Changes . Once Save Changes is clicked the viewer module generates the cropped view state to the XML header which is transmitted to the processing node and stored in the database . The one or more process node servers may then apply the new XML header to the secure neutral format file . The next time the secure neutral format file is displayed in the viewer module the viewer module reads the crop view state directives in the XML header and applies the crop to the original secure neutral format file .

As the zoom window is panned along the directions indicated by arrows it will eventually end in the corners respectively of the graphic image display area. Once the zoom window is in any one corner the cross hair moves and aligns with to the respective corner . The zoom window and the cross hair now remain fixed. For example as shown the zoom window is placed against corner and the cross hair is aligned with the corner and is fixed. As the user continues to pan the zoom window into the corner the zoom window does not disappear into the corner . Rather the graphic image pans under the zoom window in a direction opposite to the intended panning direction of the zoom window . This creates the visual effect to the user of scrolling within the graphic image instead of scrolling over it with the zoom window . Thus as the user attempts to move the zoom window further into the corner the zoom window remains fixed in place but now the graphic image pans underneath the fixed zoom window so that the corresponding corner of the graphic image becomes centered with the cross hair . Accordingly the user is able to magnify the corresponding corner of the graphic image .

In one embodiment the zoom window may include an enhanced zoom module that further magnifies the graphic image contained in the zoom window . According to this embodiment a user may direct the pointer to prompt an enhanced zoom bar which when initiated causes the enhanced zoom module to execute.

In the illustrated embodiment the graphical user interface illustrates a pixilated scanned image of a drawing that contains graphical images of printed text and geometric patterns . To find occurrences of the text the user invokes a FIND user dialog box to search for the desired text . The user types the text in the input line of the user dialog box . As shown the user wishes to search for the word THERMAL and has typed it in the input line . The viewer module takes the search directive from the user dialog box and highlights the occurrences of the text THERMAL on the scanned image . By scanning the image indexing the text and storing the equivalent characters or strings in a database a user can automatically search for dimensions tolerances limitations and notes located on the image . Further once the text is recognized and converted to an ASCII string or binary data it can be downloaded to another database for cost estimating and manufacturing planning.

A blotter may be applied to a portion of the scanned pixilated image by taking a Gaussian sample to define a spectral distribution of the image in the vicinity of where the blotter is to be applied. Once the Gaussian sample is taken of the image area of interest the blotter function allows a user to erase text or geometric shapes on the image and then apply the blotter which applies a blend of pixels in accordance with spectral distribution in the vicinity of the erased portion. The blotter pixels blend in the erased portion of the image to conceal that an erasure took place in that portion of the image . For example the blotter may be applied to conceal confidential information such as trade secrets and or costing information.

The navigation frame may comprise one or more message threads. The message threads may comprise one or more message nodes between a user at the first or second client nodes that initiated the message and respondents at the first or second client nodes that replied to the initial message. The message nodes are organized in a chronological sequence of discussions. In the illustrated embodiment the graphical user interface includes an image display pane a collaboration pane and a navigation frame .

To initiate a collaboration session the user may click on the message node of the message thread in the navigation frame . Accordingly the graphical context in the command and control frame sequences to match the selected message node . The respondent may repurpose e.g. rotate explode assemble etc. the initial view of the graphical context of the graphic image and save this repurposed image as an additional view state in the XML header of the secure neutral format file as previously described herein. The graphical context of the message may include a dialogue box that contains the text of the message thread. The dialogue box may fade in and out and or appear transparent so that a user can view the portions of the graphic image behind the dialogue box . In one embodiment the dialogue box and other user interfaces described herein may be coded for example in dynamic HTML. In other embodiments the collaboration pane may be enabled with a rich text editor such as for example a text editor provided by CUTESOFT.NET .

During a collaboration session users can annotate the graphic image as it appears in the image display pane . In one embodiment the viewer module enables redline markup overlays on the image as it is displayed in the image display pane with a message context in the collaboration pane . The navigation frame illustrates a message tree including collaboration message threads related to a program project process and or task. The message context is associated with the highlighted user selected message thread in the message tree . Annotations may be made using XML based highlighting notation and or redline markup directly on the image . The annotations appear on image in various colors selected by the user. The annotated image and the message context may form the subject of collaboration. Annotations overlays are saved as XML view state directives in the XML header of the secure neutral format file as previously described. Although illustrates one message thread collaborating over one image in other embodiments the collaboration module coupled with the application framework may involve one or more message threads collaborating over one or more images.

The command and control frame also may comprise an image snapshot pane . In one embodiment the image snapshot pane displays an original thumbnail view of the originally transmitted graphic image and an annotated thumbnail view of the annotated image. The annotated thumbnail view includes a box that indicates where the annotation was made.

The image captured in the thumbnail view may be transmitted to each of the collaborating parties at the first and second client nodes via e mail by selecting a reply message tab or a send message tab within the collaboration pane . The e mail recipient also receives the annotated image and using a local copy of the viewer module can make additional annotations to the image and so forth. Collaborations are maintained in the navigation frame to track communication history related to a project. In one embodiment the message threads are saved in XML along with the annotation overlays.

With reference to the figures above in various embodiments the EEC module may include a collaboration module to enable the collaboration of multiple resources at the first and second client nodes and throughout the extended enterprise network . As previously discussed the EEC module may include the converter module to convert media information to a secure neutral file format viewable by all authorized resources throughout the extended enterprise network with the application framework to enable collaboration. In one embodiment collaborative communication between resources at the first and second client nodes and may be enabled by real time communication services implemented with Visual C and Win 32 SDK provided by Microsoft . In one embodiment the real time communication service enables real time collaboration capabilities such as presence instant messaging real time redline markup and voice chat.

The collaboration module can be arranged to effectively process project templates collect data via secure templates in offline mode secure file exchange for native file formats supports 2 D and 3 D design file formats for items components and assemblies manage workflow XML forms that function online or offline to collect data batch support for upload download and printing of documents deploy workflow packages that provide data collection and document collaboration collaborate and access project message threads from a standard e mail client collaborate with multi constituents and multi documents and maintain a collaboration journal throughout the entire life cycle of a product where the journal may include individual issues and their resolution.

In various embodiments the collaboration module may be arranged to provide the functionality to enable collaboration across the extended enterprise network between users at the first client node and users at the second client node . In one embodiment the collaboration functionality provided by the EEC module and the converter module enables organizations to share media information including engineering mechanical graphic images and descriptive data of the mechanical designs. With the viewer module a user can display the graphic images and the descriptive data of the design without using run the native CAD software application used to create the electronic files. Through the collaboration module the EEC module may be arranged to manage entire projects online with record retention of design revisions and a journal of decisions and agreements amongst the collaborating parties at the first and second client nodes and .

In various embodiments the EEC module including the converter module the viewer module and the collaboration module may be arranged to perform near real time project collaboration between resources at the first client node and resources at the second client node . In the early stages of new product design and development near real time project collaboration enables the resources throughout the extended enterprise network to collaborate and share their expertise in the product design and manufacturing phases. Many design and manufacturing errors may be identified by collaboratively reviewing the product design specification and manufacturing requirements. In one embodiment the collaboration module may be arranged to communicate and correct these errors in a systematic and near real time manner.

In various embodiments the collaboration module may be arranged to provide a paperless electronic based engineering change process with online collaboration to improve product accuracy and reduce the cycle time to implement product design changes. Using both online and offline workflow resources at the first client node can collect data from resources at second client node using XML based electronic forms for example. These XML based electronic forms are a documentation package which may include all necessary project documents including drawings standards specifications process instructions quality process plans among others.

In other embodiments the collaboration module may be arranged to deliver a collaboration message between resources at the first and second client nodes via e mail. In one embodiment the application server may comprise a dispatch service module that provides reliable asynchronous delivery of email collaboration messages. According to this embodiment the dispatch service module provides a queuing framework for all collaboration emails to be transmitted. In one embodiment email messages may be dispatched to recipients using a simple mail transfer protocol SMTP relay. In one embodiment the e mail may contain a hyperlink that launches the application framework . Upon a resource receiving the e mail the resource may select the hyperlink to launch the application framework and access the collaboration negotiation system for example. In one embodiment the resources may respond to the collaboration message that initiated the e mail and or employ other modules of collaboration and negotiation system described herein.

With reference to the above figures in various embodiments the EEC module includes a project management module arranged to provide project management communications and media information sharing internal to the first client node e.g. an OEM buyer or internal to the second client node e.g. the strategic partners and or suppliers and between the first client node and the second client node . In one embodiment the project management module is arranged to facilitate project management related action on enterprise related tasks. In one embodiment the project management module provides a re useable project plan and or standard processes which may be stored in a repository. The project management module manages a variety of processes including but not limited to item sourcing and negotiation preparations production part approval new product introduction and equipment installations. The project management module may be arranged to prompt users of virtual project team tasks due to store and retrieve message thread history and to annotate or redline project related media information.

In various embodiments programs projects processes tasks and or subtasks created with the project management module are used in a collaboration context throughout the enterprise network . The project management module provides a role based project management tool with reusable role based projects. The roles may be defined within an organizational context. The role based functionality of the project management module provides multipurpose contextual roles that enable the user to set up generic project plans. The generic role based projects are reusable because they are not tied to specific resources. To support collaboration the project management module compresses and encrypts native format files upon upload to the host processing node . The converted secure neutral format files are made available to projects for collaboration. To track project related or collaboration related communication the project management module provides collaborative message threads. Project related items are structured in a tree format where the addition of a sub item including one or more objects of the same type within a tree automatically generates a group node.

In the illustrated embodiment the graphical user interface includes a project display pane within the command and control frame . In one embodiment the image display pane includes a task name tab task type tab predecessor start date tab duration tab estimated end date tab commitment date tab and a status tab each of which when selected initiate the execution of a module. The commitment date portion includes a plurality of commitment specific buttons associated with each task name. Selecting the commitment specific button displays a calendar box associated with that task and indicates the current date and the commitment date .

The navigation frame may comprise programs projects processes tasks and or subtasks. The command and control frame may comprise task names and functional resources. The navigation frame and the command and control frames may include tree nodes and tree control of hierarchical tree node objects. In one embodiment each tree node is user definable and extensible. Each tree node includes a graphical representation and a programmed behavior such as for example expand minimize sub nodes present the tree node contents in the navigation frame and or the command and control frame initiate communication between the frames of the application framework and or enable disable an application application view and or application component in the toolbar frame .

In one embodiment the functional modules that include the EEC module DRM module CN module and the DCM module may enable a user at the first and second client nodes to publish a program project process task subtask and or media information. The publication is accessible to all authorized functional resources throughout the extended enterprise by selecting a publish tab within the application framework . In one embodiment publishing comprises sending an e mail notification to one or more functional resources at the first and second client nodes inviting them to participate in a specific program project process task and or subtask. If a functional resource accepts the invitation they are provided a user identification ID number and password if the functional resource is not currently in possession of a user ID and password. If the functional resource has a user ID and password the user ID and password are updated to provide access rights to the specific program project process task and or subtask in which the resource was invited to participate. The access to a specific program project process task and or subtask enables the functional resource to gain access to all media information associated with the specific program project process task and or subtask. In one embodiment this may include access to design documents such as for example the secure neutral format files . In one embodiment the resource may access the application framework the host processing node host computing platform resources and one or more of the functional modules contained therein.

The project management module enables users e.g. functional resources located at the first and second client nodes with project management capabilities. The project management capabilities may include but are not limited to 1 assigning tasks to functional resources 2 identifying tasks as predecessors and or successors to other tasks and or 3 enabling functional resources to enter start date end date task durations commitment dates and the status of a given task. The project management module also may include the capability to automatically calculate start dates end dates and or task durations as well as the capability to import export external project plans that are configured in various file formats such as for example Microsoft Project.

In the illustrated embodiment the document may comprise media information. The document security functionality is provided by the DRM module . The graphical user interface illustrates one embodiment of secure media information such as for example a design document including AES FIPS 197 with 512 binary key codes security protection that is about to expire. The design document represents any document including sensitive confidential and proprietary information that may be used for collaboration outside of the organization e.g. first or second client node organizations that originally published the document . Security is applied to these documents to prevent the unauthorized distribution of their confidential and proprietary contents when a program project process task and or subtask is completed and or if the functional resource is not granted access to such content. Dialog window shows an absolute expiration date at which time the document disables the viewing privileges of predetermined resources. Thus after the expiration date these unauthorized users will no longer have access to the document .

In one embodiment the DRM module provides control to all document privileges such as viewing printing and forwarding. In one embodiment the DRM module can revoke document privileges in real time in situations where a user is no longer functions as a member of a project team or a supplier gets canceled or a purchase order expires. In one embodiment the DRM module automatically notifies and updates subscribers when a new revision or supercedure of the document is available. In one embodiment the DRM module provides both online and offline protection. In one embodiment the DRM module pre notifies the user that the document is near the subscription expiration. In one embodiment to highlight that the document is being replaced with a new revision the DRM module temporarily revokes access or annotates such documents with a watermark. In one embodiment the DRM module provides protection for documents located on servers and desktops whether or not they are connected to the Internet. In one embodiment the DRM module enables access to a document for a predetermined time period and or controls the number of times a document can be viewed by a specific user.

The DRM module enables functional resources who publish media information within the collaboration and negotiation system publishers to protect control track and audit digital content in native format files uploaded to the host processing node and or secure neutral format files used in collaboration throughout the extended enterprise network . In one embodiment the DRM module limits viewing of electronic copies of sensitive documents to licensed subscribers and prevents these files from being republished or redistributed to non subscribers. In one embodiment the DRM module also provides granular control and tracking of any unauthorized distribution by identifying for the publisher all unauthorized users who attempted to view an illegally distributed copy and all licensed users that illegally forwarded the document.

In one embodiment the DRM module assures effective compliance for publishers even when content is resold and re distributed by licensed users. In one embodiment the DRM module manages the number of copies that can be viewed and distributed in large volume based subscriptions and or single subscriber applications. Accordingly the DRM module enables an organization to securely share and collaborate on media information such as for example engineering designs and business documents without disrupting their current business process. For example often a publisher s document is packaged with other documents and then forwarded to a user e.g. an RFQ package sent from a buyer to a supplier wherein the RFQ package includes drawings material specifications and process specifications . Using the DRM module the forwarded user is able to view any encrypted document within a given business application e.g. an RFQ package once the user becomes authorized to access the document.

In one embodiment the DRM module captures the distribution route of a document from the publisher to the recipient and may provide an audit trail of all attempts to defeat compliance. In one embodiment the DRM module adds watermarks to the viewed or printed copy of a document. In one embodiment the DRM module encrypts documents with U.S. Government Advanced Encryption Standard AES FIPS 197 .

The application framework may access the DRM module to provide secure 2 D and 3 D engineering and office document viewing collaboration and XML data input capabilities. The DRM module accepts native format files including document image and native CAD formats such as the file formats discussed above with reference to the examples illustrated in Tables 1 5. The DRM module protects a wide range of engineering design and office document formats used in collaboration throughout the extended enterprise e.g. as illustrated in the examples Tables 1 5 . The secure neutral format files may be secured with the DRM module . The secure neutral format files include an XML header that includes metadata cached permissions and document routing tags that 1 can be utilized to track the secure neutral format files throughout the extended enterprise network and 2 assign and or revoke policy based permissions to each user at the first and second client nodes . In one embodiment the policy based permission may include for example printing viewing transmitting and or mark up capabilities. Because such policy based permissions are embedded in the secure neutral format file the application framework in conjunction with the processing node is capable of not permitting a user to view for example a secure neutral format file despite the user having access to the application framework . For example if a supplier located at client node supplies items to two different buying entities Buyer and Buyer . In one embodiment Buyer Buyer are competitors and Buyer terminates the supplier s view permissions to Buyer s media information supplier who still has access to the application framework via Buyer s authorization cannot view Buyer s media information despite supplier having access to the application framework . Likewise Buyer would not be able to view Buyer s media information if such media information was forwarded to Buyer by supplier because the secure neutral format file comprising Buyer s media information would not enable Buyer to view Buyer s secure neutral format file 

In one embodiment the DRM module inserts document routing tags in the XML header of the secure neutral format files . This feature enables a publisher to granularly track the distribution of a secure neutral format files document within an organization and throughout the extended enterprise network . In one embodiment the DRM inserts a publisher point back link embedded in the XML header of the secure neutral format files where a publisher subscription server that may be part of the host computing platform can manage and track the viewing rights of the document each time a user attempts to open the document in the extended enterprise network . In one embodiment the publisher point back link is a web link that operates in conjunction with the subscription server and is embedded in the secure neutral format files to provide an unauthorized user the opportunity to obtain a subscription by directing the unauthorized user to a publisher website. One embodiment provides a compliance mechanism for the unauthorized user and the existing subscribers of the publisher who forward the document to the unauthorized user. In one embodiment the DRM module provides bulk subscription tracking capability. In one embodiment the bulk subscription tracking capability may be implemented as a block of subscriber viewer addresses contained in the encrypted XML file header of the secure neutral format file . One embodiment provides granular subscription management by allocating a number of viewer modules licensed to an organization and decrementing the number as each viewer module is downloaded to user. Once the viewer count reaches zero the publisher is notified that the bulk subscription has been exhausted.

The DRM module also provides revision notification that informs subscribers of any document revision change or document supercedure. This revision notification feature functions both a stand alone document and when a document is included in a kitted information package. This method of revision control works for both online and offline documents. In one embodiment the DRM module provides revision notifications of the secure neutral format files 

In one embodiment the DRM module protects documents with high security using the advance encryption standards AES FIPS 197 with 512 binary key codes. The DRM module enables encryption and secure distribution of the native format files and the secure neutral format files throughout the extended enterprise network . In one embodiment the DRM module functionality may be implemented using .NET technology and Visual C software development tools provided by Microsoft . In one embodiment the DRM module may be implemented using a web presentation framework embedded into ASP.NET also provided by Microsoft . In one embodiment the DRM module may be embedded within the viewer module using Visual C for example. In addition the DRM module communicates with the other functional modules defined herein using .NET XML Web services.

In one embodiment the systems described above and the functional modules provided by the host processing node such as the EEC module sub modules such as the converter module viewer module collaboration module and project management module the DRM module the design cost management module DCM and the application framework may be coupled with the collaborative negotiation module to form a collaborative negotiation framework that may be implemented throughout the extended enterprise networks . The collaborative negotiation module enables organizations represented by first and second client nodes to use the host processing node to implement a total spend negotiation technique that addresses multiple factors such as price inventory ownership order frequency lead time and warranty negotiation for total cost negotiation. For example in one embodiment the collaborative negotiation module may leverage the functionality of the EEC module and the DRM module to provide a secure collaborative environment for buyers at the first client node to manage item sourcing activities with their globally dispersed suppliers at the second client nodes 

Using conventional sourcing and or auction tools many buyer organizations buyers cannot openly bid their total item spend volume due to the inability of securely distributing throughout the extended enterprise media information that describes an item that which a buyer desires to source. For example conventional reverse auctions deliver only price discovery with potential savings do not provide a complete sourcing solution that includes total cost negotiation for a given spend volume. Conventional auctions for example do not account for the total operating costs arising from a buyer supplier relationship. Because of these limitations in current sourcing capabilities buyers can bid only on a small percentage of their annual contractible spend volume. Much of the spend volume in a buyer organization cannot be competitively quoted because of limited supply base inability to cost effectively and securely distribute media information that describes the spend proprietary nature of competitive designs and or long term relationships with existing suppliers. In addition buyers have not fully exploited the benefits of the Internet or WAN technology to manage the sourcing function in their business. Thus in one embodiment the collaborative negotiation module provides the functionality to deliver a detailed spend analysis and negotiation tool to enable buyers to evaluate a greater percentage of their spend volume and target high leverage opportunities with supplier organizations suppliers .

In one embodiment the collaborative negotiation module enables the conversion of buyer and supplier design and specification documents from a native format native format files to a neutral format secure neutral format files using the converter module . In addition the DRM module adds security to the electronic transactions of the native format files and the secure neutral format files and enables the buyer and supplier to collaborate over secure extended enterprise networks . Thus design and specification documents that support a variety of RFQ RFP and or RFI RFx documents can be exchanged securely between the first client node buyer and the one or more second client nodes suppliers . Once the design specification and RFx documents collectively represented by native format files are uploaded to the host processing node and are converted to secure neutral format files with embedded security the collaborative negotiation module may extract metadata from the secure neutral format files to automatically populate a RFx document with the applicable extracted information. In addition the collaborative negotiation module can process the extracted metadata to automatically match an engineered item to an appropriate supply base for that item. For example the collaborative negotiation module can extract metadata such as the thickness length width and height of an item that represents a stamped component and automatically calculate the press tonnage required to manufacture the item. The collaborative negotiation module can then utilize the tonnage calculation to narrow the bid participants to include only suppliers that are capable of producing the item.

In one embodiment a collaborative negotiation module provides a framework to implement collaborative negotiation throughout the extended enterprise network . A collaborative negotiation framework is a negotiations platform that enables sourcing professionals e.g. buyers to design custom negotiations formats. To provide for different negotiation implementations embodiments of the collaborative negotiation framework enable sourcing professionals to choose among various negotiation parameters and negotiation methods. In one embodiment the collaborative negotiation platform provides the capability to take pre bid data and automatically transport data to an implementation system. In one embodiment the collaborative negotiation platform provides multi variant active negotiation terms where suppliers can bid and buyers can award contracts based on price and non price related negotiation terms. Accordingly the collaborative negotiation platform enables suppliers to differentiate themselves on non price related active negotiation terms as well as total price to influence a buyer decision to award the contract. Generally electronic competitive negotiations require multiple successive rounds of bidding before a contract award decision is made by the buyer.

Embodiments of the collaborative negotiation framework utilize price and non price active negotiation terms. The collaborative negotiation module monetizes the impact of non price active negotiation terms on the total cost value of the bid offering. The monetized values of the non price active negotiation terms may be fixed or variable and may be locked at any time during the collaborative negotiation event. Additional or fewer active negotiation terms may be utilized based on the specific implementation. The embodiments are not limited in this context.

An active negotiation term refers to a single atomic unit of a negotiation such as payment term lead time and others described herein. An active negotiation term may include values that are processed by a formula that is then monetarily factored into the bid price basis to define the best offer. The total cost value is the adjusted basis price in accordance with the monetized active negotiation terms.

For example if the issue is price variance of a purchased commodity over a period of time one goal of the negotiation for a buyer may be to engage into a long term fixed price contract with a supplier. If the issue is timely delivery one goal of the negotiation for the buyer may be to select a supplier with a compliant lead time. Thus non price active negotiation terms such as for example term and lead time may have considerable impact on the total cost value of the negotiation rather than bottom line bid price alone.

Active negotiation terms may be divided into two categories. Those that translate non price factors into economic impact and those that have a result set that can be optimized by a negotiations object. Active negotiation terms may be chosen from a library containing common negotiation terms and custom negotiation terms that may be defined by the buyer. Custom active negotiation terms may be submitted by the supplier in predefined fields in order to make their bid. A formula translates these custom active negotiation terms into their economic impact to arrive at the total cost value.

As shown the supplier bid can be analyzed with respect to the current offering basis price of 302 389 and active negotiation terms payment terms of 1 252 and spoilage of 30 239. When the active negotiation terms are considered the total cost value of the bid submitted by supplier is 331 376 which is greater than the current offering basis price of 302 389. A similar analysis applies to supplier with a current offering basis price of 256 331 and a total cost value of 280 904. Likewise supplier submitted a current offering basis price of 278 409 which translates to a total cost value of 304 402.

The bid submitted by supplier may be analyzed in terms of a current offering basis price of 309 151 and active negotiation terms such as quality system qualification score of 52 lead time of 733 payment term of 1 279 spoilage factor of 30 915 and plastic molding qualification score of 95. When the active negotiation terms and are considered the total cost value of the bid submitted by supplier is 339 519 which also is greater than the current offering basis price of 309 151.

In the illustrated embodiment the buyer selected a reverse auction negotiation method. Other electronically facilitated negotiation methods may comprise for example RFQ collaboration initial offer reverse auction split of business forward auction Dutch auction English auction multi attribute bid ask transportation supplier lotting among other negotiation methods. Despite the cost savings that can be realized using these negotiation formats electronic negotiation methods are used only for a minority of large scale purchases made by an organization. One limitation is that contracts are awarded on bid basis price alone because these negotiation methods generally do not take into account active negotiation terms.

In the illustrated embodiments of the collaborative negotiation framework suppliers can differentiate their offerings based on price such as current offering objective active negotiation terms such as lead time payment terms spoilage tooling and fixturing and subjective active negotiation terms such as quality system qualifications and plastic molding qualifications . Accordingly the active negotiation terms in accordance with the embodiments described herein enable the suppliers to influence a buyer decision on more than bid basis price alone. This technique also eliminates the need for post bid analysis by the buyer to select a supplier based on active negotiation terms.

The active negotiation terms described herein are listed as examples only. There may be additional fewer or different active negotiation terms without limitation. The embodiments are not limited in this context.

The marketplace pane also displays feedback elements to indicate the market position of the supplier relative to the market for the negotiation event. A market lead gap provides the supplier an indication on terms of the actual amount by which his bid leads or lags the market. A weighted score based on the subjective active negotiation terms is displayed. The overall impact on the bid also is displayed to the supplier . In the illustrated example the supplier leads the market with respect to tooling by 83.07. The supplier is even with the market based on fixturing . With respect to the payment the supplier lags the market by 6 653.00 . With respect to the lead time the supplier lags the market by 733.25 . With respect to spoilage the supplier lags the market by 25 376.81 . With respect to the basis bid the supplier lags the market by 93 877.65 . With respect to the plastic molding qualifications the supplier has a weighted score of 70.75. Finally with respect to quality system qualification the supplier received a weighted score of 77.33. The total offering with respect to market lead gap is displayed along with the total weighted score and the total impact on the basis bid. The impact on the basis bid is displayed for each supplier negotiation parameter . Feedback with respect the impact of a supplier negotiation parameter is provided to the supplier if a supplier negotiation parameter is revised. Furthermore the bidder can revise the values for each of the supplier negotiation parameters and immediately see the impact it makes on the basis bid prior to actually submitting the revised to the market by selecting place bid button .

In one embodiment the collaborative negotiation module provides a feedback mechanism to the supplier e.g. supplier based on any individual supplier negotiation parameter previously submitted to the buyer by the supplier . After a bid is submitted bid basis the collaborative negotiation module adjusts the bid based on active negotiation factors which operate on the supplier negotiation parameters submitted by the supplier . The supplier receives feedback of the adjusted bid relative to the most recently submitted supplier negotiation parameters . In one embodiment the collaborative negotiation framework displays its formulas to the supplier and provides the supplier with an opportunity to adjust the supplier negotiation parameters based upon the cost structure and cost impact to the supplier . Feedback can be in the form of a display on the computer showing the market position price impact and market equilibrium of the supplier bidder relative to the market leading adjusted bid position.

Market position feedback informs the supplier of his market position relative to the other bidders based on the supplier negotiation parameters . In one embodiment a feedback mechanism includes a graphical user interface element to indicate to the supplier the basis bid offering adjusted based on the supplier negotiation parameters . The supplier may be indicated by the element based on color icon graphics sound and or any combination thereof. In one embodiment for example the leading supplier would see a different manifestation of the element from the lagging suppliers. For example the leading bidder may see a green element to indicate that the bidder has the greatest cost impact for a supplier negotiation parameter while the other suppliers may the element in various other colors based on their relative position with respect to that supplier negotiation parameter. For example the lagging bidders may see the element in a different color e.g. red to indicate that they do not have the best offering on that individual factor. An element may be provided for each supplier negotiation parameter . The embodiments are not limited in this context.

Price impact on bid feedback is the ability to view the monetized impact of each individual supplier negotiation parameter on his basis bid. Price impact on bid feedback may assist the supplier in modifying their bid or modifying one or more supplier negotiation parameters in a manner that would make the greatest impact on the total cost value of the basis bid.

In one embodiment the collaboration negotiation module may include market equilibrium feedback in the form of a graph. In one embodiment one dimension of the graph may contain cost impact and the other N dimensions may contain the supplier negotiation parameters. Two lines are plotted one line shows the cost impact on total offering and the other shows the cost impact to the bidder provide the total offering. This shows to the bidder the optimal terms that can provide the greatest impact for the buyer within the bidder s and or buyer s own constraints.

In one embodiment the collaborative negotiation module provides the suppliers with tools to conduct real time negotiations throughout the extended enterprise . In one embodiment these tools include supplier cost bid test objective focus and calculation transparency. A supplier cost tool provides the supplier with the ability to see in real time the cost impact of changing a supplier negotiation parameter against the cost to the supplier for providing the supplier negotiation parameter . The bidder also may see the impact of changing any one of the supplier negotiation factors from the buyer perspective.

The supplier may prepare a local bid on the client computer prior to submitting the bid to the market. A bid test tool compares the local bid to a market committed bid. The bid test tool enables the supplier to modify the basis or modify any of the supplier negotiation parameters to see the impact of the modifications to the total cost value relative to the marketplace before committing that bid to the market during the negotiation event. To submit the local bid to the market the supplier selects the place bid button . At which time the local bid may be transferred to the buyer and the impact of the bid would be viewable by the other suppliers and the buyer for example.

The collaboration negotiation module enables the supplier to automatically sort all supplier negotiation parameters based on those parameters that have the greatest impact difference between the supplier offering and the market shown at the top of the list. This enables the supplier to focus on the negotiation parameters that have the greatest opportunity to close the market lead gap .

The collaboration negotiation module enables the supplier to see the exact formula used to calculate the impact of an individual supplier negotiation parameter on the total cost value .

In one embodiment the collaborative negotiation module enables several interchangeable negotiation methods. An interchangeable negotiation method provides the capability to change negotiation methods in and out of a framework while keeping all other elements the same. In one embodiment the collaborative negotiation module may be arranged to provide an interchangeable architecture capable of handling any negotiations format and to provide normalized outputs for all negotiation formats. In one embodiment the bids are ranked ordered from best to worst and certain bids can be marked as being in a winning position. In a reverse auction negotiation the lowest price is placed at the top of the list and marked as the winner. In a split of business negotiation there may be multiple winners. The collaboration negotiation module negotiation templates provide the ability for a buyer to create their own negotiation formats and store them in a reusable library.

In one embodiment the UI includes UI components for the active negotiation terms UI components for negotiation objects and a UI activation framework . The UI displays inputs to the negotiation engine and displays outputs from the negotiation engine . The UI presents the market state of the negotiation to the end user e.g. supplier bidder buyer and provides resources for manipulating the active negotiation terms and how they relate to the market. The UI interacts with both the negotiation engine and the market execution coordinator . The UI includes the visual components to support the negotiation engine . In one embodiment the UI activation framework is a rich client application that can be run in any standard web browser. The UI calls the peer to peer dispatcher to load the negotiation engine for the bid being accessed.

In one embodiment the negotiation engine includes one or more active negotiation terms and negotiation objects and processes one or more negotiation rounds and negotiation lots in a given negotiation event. The UI includes the visual components for all the active negotiation terms and the negotiation objects . The negotiation engine receives input data performs calculations on it and returns favorable targeted market positioning information. In one embodiment the negotiation engine processes bids into a ranked and ordered list of suppliers based on their current market position. It accepts buyer and supplier negotiation parameters and bid basis adjustments and performs bid specific calculations to arrive at its result. The active negotiation term operates on one or more of the negotiation terms such as for example if a bidder changes one negotiation term that change may affect other negotiation terms. The active negotiation terms calculate and return a result set to be optimized. The negotiation objects execute the active negotiation terms in a predetermined order as they are received from the bidders and rank orders all bidders relative to current market position. The negotiation engine executes the same and produces the same results regardless of whether the bid events are online and or offline events and may be replayed offline.

In one embodiment the active negotiation term creates reusable elements that contain formulas to calculate a value to enable the buyer to see the best offering for the negotiation in real time. This technique enables buyers to understand the total cost value associated with each bidder and simultaneously enables the bidders to see how the factors impact the total cost value of their bid. Each item in an RFI RFP or RFQ that requires supplier response has a modeled negotiation factor corresponding to an item of that type. Each active negotiation term has a defined group of buyer and supplier negotiation factor parameters and calculates these parameter inputs into a monetized impact on the bid basis for the price portion of the negotiation. Normalizing the RFI RFP and RFQ inputs into a monetary impact on the price bid basis provides an objective analysis for the buyer to make an effective contract award decision. Also the objective analysis of prior rounds of the negotiation can be carried as an input into the analysis of subsequent negotiation rounds.

The active negotiation terms may be grouped into a monetized impact on basis and requirements in relation to other negotiation terms. In one embodiment in a monetized impact on basis approach the monetized calculations can be broken into quantitative and qualitative terms. Quantitative active negotiation terms can be considered easily as there is a clear quantifiable cost associated with elements of this type. Qualitative active negotiation terms such as risk can have codified formulas created to quantify a value for each type of risk. These calculations account for the cost of the risk event occurring divided by the probability of its occurrence. Quantitative active negotiation terms may include discount terms e.g. discount given for paying within a given time frame and quality e.g. percentage of product that is non conformant . Active negotiation terms of this type have one set of formulas associated with understanding their dollar cost impact.

The active negotiation term relates both quantitative and qualitative negotiation terms to a bid basis. This provides the flexibility to take all negotiation terms to be considered when making a contract award decision based on the outcome of the negotiation in a normalized format. By normalizing the quantitative and qualitative negotiation terms a buyer can give a supplier better and more immediate feedback as to how the negotiation factors can affect the buyer decision.

The quantitative negotiation terms include 1 volume discounts 2 standard terms and conditions 3 quality 4 warranty 5 deadlines 6 location 7 pricing method 8 performance specifications 9 previous relationships with suppliers 10 demurrage 11 spoilage 12 pre payments e.g. partial and down payments 13 tooling 14 fixturing and 15 consignment inventory. There may me additional or fewer quantitative negotiation factors. The embodiments are not limited in this context.

The qualitative negotiation terms include 1 optimally allocating business among the supply base 2 delivery time requirements 3 quota restraints 4 customer service 5 ramp to volume 6 sole supplier split of business 7 and minority DBE companies. There may me additional or fewer qualitative negotiation factors. The embodiments are not limited in this context.

Qualitative negotiation terms may be more difficult to conceptualize within cost terms. Nevertheless qualitative negotiation terms can be monetized based on their importance to the buyer or discomfort to the supplier. One example of a qualitative negotiation factor is the risk of switching suppliers. Different risk negotiation factors may be assigned for new suppliers within the country versus new suppliers outside the country. One way that risk can be monetized is by associating the risk to the cost of an undesirable event happening divided by the percentage chance or probability that it might happen.

In one embodiment the active negotiation term supports customizable terms to define custom negotiation parameters and a formula that operates on those custom parameters. Thus any desired parameter may have an impact on the negotiation. The flexible architecture of the collaborative negotiation framework enables buyers to design custom negotiations with specific active negotiation terms properly weighted into the negotiations process. Qualitative risk negotiation terms include 1 financial viability 2 transportation delay and 3 previous relationships with suppliers. There may me additional or fewer qualitative risk negotiation factors. The embodiments are not limited in this context.

Within a negotiations process there may be dependencies between active negotiation terms where certain active negotiation terms can influence other active negotiation terms or may require the presence of certain active negotiation terms to be defined. For example if the cost of a supplier failing to supply what is required is determined and other active negotiation terms are present that add or subtract from the probability of that occurrence then these other active negotiation terms can influence each other and are dependent on each other. For example geography quality process and incumbency are all three risk influencing active negotiation factors. If geography is a risky location where there may be a 5 chance of failing to deliver attributed and the quality process in use is ISO 9002 e.g. a 5 chance of failing to deliver attributed and the supplier is not the incumbent 10 chance of failing to deliver attributed then overall the probability that the supplier will fail to deliver is 10 . The buyer enters a value showing the cost of the supplier being able to deliver and the total monetized value may be concluded.

The negotiation object coordinates the execution of the active negotiation terms and places the bidding suppliers in a ranked order. The negotiation object is extended for each new bidding format to be created for example allocation based items split of business reverse auction and others.

The active negotiation terms or negotiation objects defined as collaboration server only are executed on a server at the host processing node .

In one embodiment the market execution coordinator includes an execution framework . The market execution coordinator communicates between instances of the negotiation engine to create a market state. Because there can be many running instances of the negotiation engine on the first and second client nodes and on bidding servers at the host processing node the market execution coordinator executes the completed bids in the proper order and communicates back to all running instances of the negotiation engine . The market execution coordinator ensures that all calculations have integrity and are executed on the best available computers.

In one embodiment the market execution coordinator manages the movement and execution of the negotiation object and the active negotiation term parameters. When a user prepares a bid it is executed on its local client computer . When the user submits the bid to the market the bid data is transmitted to any one of the web servers abstracted and transmitted to the least loaded bidding server i.e. load balanced . That bidding server executes the bid and submits it back to the web server . The bid results are pushed from the web server to the client computers to show the changes in the negotiation market equilibrium.

In one embodiment the persistence manager includes a Relational Database Management System RDBMS layer and an XML layer . The persistence manager is a storage abstraction component to load and save buyer and supplier parameters and data throughout the collaborative negotiation framework system. There may be two implementations of a generic persistence manager one that writes to a SQL Server database and the other that creates XML data that is saved to the local disk at each supplier bidding client and buyer bidding console. The persistence manager stores the state of all parts of the executing run time and restores them from this persisted state. This abstraction layer enables the market execution coordinator to request storage of the state of the negotiation engine and then at a later time the market execution coordinator can restore the state of the negotiation engine within that state. Two persistence managers may be necessary to ensure that the state of the negotiation can be saved either at the first and second client nodes for preparation of offline bids or server side at the host processing node for online bidding.

In operation the negotiation engine receives input negotiation parameters in terms of buyer negotiation parameters defined by the buyer and supplier negotiation parameters defined by the supplier to create a bid. The negotiation engine then compares that bid to other competitive bids in the marketplace to return an ordered list of suppliers ranked in accordance with their bids. This list may be ordered in terms of most competitive to least competitive bid and may be tagged in terms of bidders that are currently within an optimal or winning set.

The negotiation engine executes the active negotiation terms and bid ranking logic on all bids in the marketplace presented to it. To facilitate scalable distributed processing of bids and active negotiation terms the multiple instances of the negotiation engine are coordinated.

In the illustrated embodiment in a first instance of the supplier negotiation client bidder enters the first bid of the negotiation event . The bidder instance of the supplier negotiation client calculates the impact of the active negotiation terms on the bid basis and determines a total cost value. Based on the total cost value and a set of negotiation rules which may be selected in accordance with negotiation practice the bid is either accepted or rejected. If the bid is accepted because there are no other bids at this time the bid from bidder establishes the market leading position. The bid from bidder and the results from the active negotiation term calculations are transmitted to the market execution coordinator . The market execution coordinator passes the work to be performed to the execution framework . The execution framework provides input values to an instance of the negotiation engine regarding basis adjusted basis and then the instance of the negotiation engine establishes the initial market position. Based on buyer supplier negotiation parameters market negotiation position information is transmitted to selected supplier negotiation clients and buyer negotiation consoles . The execution framework records the results of the first bid submitted by bidder through the persistence manager .

The supplier negotiation clients and the buyer negotiation consoles are updated to include the calculated total cost value thus far of the bid submitted by bidder . Then bidder submits his first bid. The instance of the negotiation engine computes the total cost value and determines a new market position relative to the previous bid. The information associated with the new market position is then transmitted to all the supplier negotiation clients and the buyer negotiation consoles 

When a bidder submits a second bid the instance of the negotiation engine first determines if that bid creates a market advantage compared to the previous bid submitted by the same bidder. If it does not the bid is rejected. If the bid does create a market advantage over the previous bid then the current bid is processed in accordance with the method previously described. For example the instance of the negotiation engine computes the total cost value associated with the current bid and determines a new market position relative to the previous bid. The information associated with the new market position is then transmitted to all the supplier negotiation clients and the buyer negotiation consoles and so forth.

The negotiation parameters support editable states locked states global versus local states factor owner states and constraints. The editable states property manages the states that a negotiation parameter can be manipulated in. In one embodiment there may be setup and run time supplier and buyer states. The locked states property is set if a negotiation parameter can be updated in a current context. Internally the active negotiation term can log the date and time that a negotiation parameter was changed to track the user ID of an entity that manipulated the negotiation parameter . A negotiation parameter may be defined to be shared with other active negotiation terms or may be explicitly reserved for use with a particular active negotiation term 

The following quantitative active negotiation term example illustrates the parameterization associated with differing buyer and supplier parameters for determining monetized cost. For example two negotiation parameters of an active negotiation term associated with a bid may include Discount and Paid Within such as for example the supplier would give the buyer a 1 discount on the basis if the buyer pays within net 30 days. Translation of these two supplier bid parameters into monetized cost is relative to the buyer and supplier because the cost of capital may be different for each entity. For example the cost of capital for a buyer may be 0.15 per month whereas the supplier may not track cost of capital depending on his size. From this perspective the buyer may realize an advantage in the position granted to the supplier in the marketplace while the supplier may not see an impact on his bid cost.

Following is an example of a buyer s total cost value of a basis bid of 1 000 000 if an active negotiation term discount of 1 given to the buyer if the buyer pays within 30 days. The total cost value is related to the buyer s net present value of the basis minus the supplier s 1 discount. In this example the BASIS is 1 000 000.00. The supplier parameter is a 1 DISCOUNT if PAID WITHIN 30 days. Payment after discount BASIS 1 DISCOUNT and the total cost value is the buyer s net present value which is related to the Payment after discount Buyer s Cost of Capital for 30 Days. 

The negotiation feedback filter operates on the marketplace results and returns a processed version of the marketplace results object that properly reflects what feedback should be supplied to supplier negotiation clients . Each negotiation feedback filter can transform market result data according marketplace feedback rules compliant to the selected negotiation format. The negotiation object maintains a collection of filters that can be executed in a daisy chain manner progressively filtering data to comply with the selected market feedback rules.

A negotiation round has a one to one relationship with the negotiation object . The negotiation round controls the time based aspects of the negotiation. Basis is defined differently based upon the scope of the operation of the transaction. Basis begins at an individual item . A lot basis is an aggregate of the item basis . The event basis is an aggregate of the lot basis .

A description of a negotiation event execution of RFI RFP RFQ and price negotiation relative to a collaborative negotiation framework follows. Architecturally a collaborative negotiation framework differs from a conventional sourcing process due to the desire to support a comprehensive collaborative approach to negotiations. Generally negotiations are set up in terms of RFI to identify appropriate suppliers RFP to understand supplier offerings RFQ a formal definition of request and price negotiation. Under the collaborative negotiation framework these areas are blurred from an application standpoint but can still be defined using these terms by the end users.

During the RFI portion of a negotiation exploratory questions are asked regarding supplier capability some of which may include or exclude a supplier while others speak to a degree of capability to provide what the buyer is seeking. The questions that are inclusive or exclusive have limited applicability in the RFP round as suppliers that are not capable of meeting these requirements can be excluded from the RFP round. Those that speak to a degree of capability may impact the RFP round.

Examples of an RFI item may include quality process. If a buyer organization has strict requirements that the supplier organization must be certified for a quality process it may be included in the RFI round. Some suppliers will be certified for better processes than others and as such is a factor that may weigh in the on the decision of the buyer organization in the RFP price negotiation and award portions of the negotiation. This issue may be given greater weight in the RFP round where the answers and proposals provided by the supplier organization differentiate their offering from other offerings. For this reason the negotiation execution framework does not architecturally perceive any difference between what would normally be defined as RFI RFP RFQ or price negotiation. Each of these portions of the negotiation may be viewed as a round .

Ranked ordering can be calculated at the sub branch after the branch level rounds are over. For example Pre Event Round 1 can be executed including ranked ordering calculation. When Pre Event Round 2 is executed the factor objects that are part of Pre Event Round 1 and Pre Event Round 2 are calculated but the ranked ordering of the selected negotiation object in Pre Event Round 2 is executed. Extending this example if the event has progressed to Lot 2 Round 2 the execution can proceed as follows 

Following is an example of a sourcing negotiation according to the various embodiments described above. To begin a negotiation a buyer logs onto the host processing node and runs the collaborative negotiation module builds a request for items to be purchased and sets up a new collaborative negotiation. The buyer may choose to create a new negotiations template. The buyer initiates a first round of negotiation. In the first round the buyer selects Negotiation Terms Quality and Lead Time as the buyer parameters . For the first round of negotiation the buyer selects the start and end dates for the negotiation event.

The buyer may create a second round of negotiation. The buyer then selects the negotiation method e.g. split of business bidding format . Next the buyer invites suppliers to bid at the negotiation event. As the suppliers are invited they are sent an e mail informing them where the RFQ for the items is located. The supplier logs in to the host processing node and enters supplier parameters into round one. The supplier may elect to test a bid before submitting it. Active negotiation terms that take into account the buyer parameters and the supplier parameters influencing the bid may be highlighted and brought to the attention of the supplier. Based on feedback the supplier may elect to revise a bid or revise a supplier parameter . The supplier then submits the bid.

At some time in the future a live split of business price volume negotiation event occurs. The supplier enters bids with competitive dollar amounts and notes the status of the bids relative to the market position. With each price bid entered the collaborative negotiation framework notifies the supplier of the impact that the active negotiation terms have on his bid price. The supplier can revise the bid or the supplier parameters and submit another bid until the negotiation event times out.

In one embodiment the systems described above and the functional modules provided by the host processing node such as the EEC module sub modules such as the converter module viewer module collaboration module and project management module the DRM module and the collaborative negotiation module and the application framework may be coupled with the design cost management module DCM to form a collaborative negotiation framework that may be implemented throughout the extended enterprise networks . In one embodiment the DCM module explodes multiple bills of material BOM into end items with aggregate annual usages for quoting existing and new parts. In one embodiment the DCM module utilizes item attribute extraction for quoting parts and tooling and has the functionality to allow users buyers and suppliers to add cost data for parts and tooling. In one embodiment the DCM module compares historical costs and new quotes against a desired cost model.

The DCM module enables an OEM to manage profit margins through the new item introduction phase as well as throughout the lifecycle of an item. An item may include multiple assemblies or may be a sub assembly for another item. The item may include other items that may be common across the multiple assemblies or sub assemblies manufactured by the same OEM. During different manufacturing phases the items may be purchased sourced from multiple suppliers or the same supplier. At each purchasing event the items may have been quoted and sold at different prices. For a given product OEMs generally maintain an engineering bill of material BOM and or a manufacturing BOM that describe 1 the item 2 the assembly in which it is used and 3 the quantity required for each assembly. These BOMs however do not directly address the sourcing concern where the same item is quoted and or sold at difference prices from one or more suppliers because it was quoted multiple times in different assemblies or in different products that include the item during multiple purchasing events. In one embodiment the DCM module enables both buyers and suppliers to manage a single view of an item that may be common to one or more assemblies. The DCM module provides a sourcing BOM that captures the cost history of an item the target cost of the item and or a quote for the item. In one embodiment the quote may be entered by one or more suppliers. The DCM module can establish a desired cost model for an item and track the actual cost of the item from its introduction and throughout the lifecycle of the item.

In one embodiment the DCM module reduces multiple items and or their assemblies or sub assemblies to an end item list of common and unique items and presents the end item list to suppliers via a WAN e.g. the Internet to quote total item quantities. In one embodiment this ability to receive quotes from suppliers at second client nodes located throughout the extended enterprise network provides a method for the buyer at first client nodes to obtain market pricing for an item and or assemblies with more than one item that may be aggregated for quoting and purchase.

In one embodiment the DCM module can be used to develop a should cost model by leveraging multiple supplier views of item cost data collected over time. This provides a direct comparison of what each supplier quoted for the same item in an assembly over time. The should cost models developed in this manner support uniform material pricing from previously quoted items.

In addition the DCM module may be integrated with the EEC module and DRM module to enable suppliers to receive secure documents and technical specifications required for quoting without downloading native software to view the information. Suppliers will also be able to collaborate with the OEM on any commercial and or technical questions they may have in preparing their quote. The DCM module also communicates to the supplier and the OEM latest revision status of all items being managed and alerts the parties of any pending revision change.

In one embodiment the DCM module provides Internet based extended enterprise project management process for each item cost requirement. The process may be initiated via an e mail link that is sent to one or more suppliers for a given BOM to be quoted. All suppliers can be tracked to schedule and alerted when their assigned quotes are at risk of being over due. This extended enterprise project management capability frees the buyer to intervene on an exception basis. For example when one or more suppliers are at risk of missing a due date. In addition the DCM module contains the information that a supplier needs to provide their quote on the BOM. In one embodiment the DCM module may comprise a sub module to implement a collaborative BOM CBOM . Prior to initiating CBOM a user according to one embodiment may be employ the application framework and one or more functional modules and the host computing platform to upload one or more BOMs from the first and second client nodes and to the host processing node .

With reference now back to D and E in one embodiment the line item node the node is automatically created based on a user selection of items and or assemblies he she desires to quote. The user may select such items and or assemblies in the command and control frame . The line item node is a node that includes item pricing information. The users throughout the extended enterprise network e.g. external suppliers at second client nodes submit pricing information for each item line item price bid . The line item price bid is summarized at the line item node for purposes of collaborating and or negotiating a collection of items. The lot node is a node that is automatically created based on a user selection of items and or assemblies he she desires to quote. The user may select such items and or assemblies in the command and control frame . The lot node is a node that includes the contents and or behavior of the line item node including 1 the ability to receive an initial single price at a lot level lot price bid from users throughout the extended enterprise wherein the lot level includes two or more line items 2 the ability to subsequently receive line item price bids from users throughout the extended enterprise and 3 the ability to receive extended enterprise user inputs that adjust line item price bids until the summation of all line item prices included in the lot equals the lot price bid. The CBOM node is a node that is automatically created based on a user selection of items and or assemblies he she desires to quote. In one embodiment the user may select such items and or assemblies in the command and control frame . The CBOM node contains two sub nodes 1 the first sub node top level items contains top level items and or assemblies that the user selected and the items that are part of the product structure in which the top level items and or assemblies call out and 2 the second sub node end items contains an automatically generated list of only the end items that are to be quoted omitting intermediate product structure levels that a buyer does not wish to quote such end items are required to construct the top level items and or assemblies that the user selected e.g. the end items that are called out by the items and or assemblies that the user selected . The CBOM node also includes the contents and or behavior of the lot node such as for example an end item sub node may be organized into lots and line items and quoted accordingly. After users throughout the extended enterprise network submit pricing at the end item sub node the top level items sub node automatically calculates and rolls up the price inputs to arrive at a total price for the top level items and or assemblies contained therein.

The command and control frame may display the CBOM. The CBOM provides several views. In one embodiment the CBOM provides an assembly view and an end items view as described below. In one embodiment the CBOM may comprise a price comparison frame for the assembly view and or end items view . In one embodiment the price comparison frame includes one or more quotes entered by one or more suppliers from the second client nodes for a single item and or assembly. In another embodiment the price comparison frame may include a cost rollup of prices resulting from quotes entered by suppliers associated with line items and assembly labor. Using the assembly view and or the end items view one or more buyers at first client nodes can view and compare quoting information wherein the quoting information is directly entered into the application framework by one or more suppliers .

With respect to the CBOM the term item may comprise any entity that either may be manufactured or purchased. An item may be referenced according to a corresponding item number or may be referenced in accordance with a drawing number. In one embodiment there are two basic item types 1 a part or 2 an assembly. Accordingly an item may be referenced as a part or an assembly. In one embodiment a part may comprise a single entity type of item with a single cost referred to as a unit price. Generally a BOM is not required for a part because it is a single entity with no sub parts or sub components. In one embodiment an assembly may comprise a type of item that contains other items. Accordingly in one embodiment an assembly may comprise other parts or assemblies for example. Assemblies are categorized and referenced with a BOM. In one embodiment a BOM may comprise a list of items that make up a particular assembly. When costing or rolling up an item that is an assembly the price may comprise two components 1 the price of all the parts plus 2 the cost to fabricate assemble the parts into the final assembly. In one embodiment an end level assembly is used to reference the highest level assembly which may be referred to as a final and or end assembly. An assembly that forms a portion of another assembly which may or may not be a final assembly may be referenced as a sub assembly.

As previously discussed the CBOM provides several views. In one embodiment the CBOM provides the assembly view and the end items view . In one embodiment the assembly view displays the structure associated with a BOM for a top level assembly TopAssembly1. The top level assembly may comprise multiple items including for example parts and assemblies and each of the parts and assemblies may comprise unique parts or parts that are common to two or more items up to the top level assembly. Accordingly the assembly view may be arranged into one or more levels . In one embodiment a top level assembly may be referenced as a level 0 item . Items that form a portion of the level 0 item may be referenced as level 1 items . Items that form a portion of the level 1 items may be referenced as level 2 items and so forth for as many levels that the top level assembly may comprise. In the illustrated embodiment the top level assembly TopAssembly1 comprises five sub assemblies SubAsm1 SubAsm2 SubAsm3 SubAsm4 and SubAsm5 SubAsm 1 5 . In the illustrated embodiment each one of the SubAsm 1 5 comprises a part CommonPart1 that is common to all the subassemblies SubAsm 1 5. Further each of the SubAsm 1 5 comprises a unique part UniquePart 1 5 respectively.

In one embodiment the end item view displays a single instance of all the items provided in the assembly view . As previously discussed there may be multiple occurrences of the same item referenced in a BOM structure. In the illustrated embodiment for example the top level assembly TopAssembly1 comprises five sub assemblies SubAsm 1 5 and each of the SubAsm 1 5 comprises a common part CommonPart1 and a unique part UniquePart 1 5. The CommonPart1 is listed five times in the assembly view and is listed only once in the end item view . The CBOM summarizes the total quantity of the common part CommonPart1 across all the sub assemblies SubAsm 1 5 for the single top level assembly item TopAssembly1. In the illustrated embodiment as shown in the quantity portion each of the five sub assemblies SubAsm 1 5 contains a quantity of two common parts CommonPart1. Thus each of the top level assembly item TopAssembly1 contains a total quantity of ten common parts CommonPart1. As shown in the extended quantity portion a total of 1 000 top level assembly items TopAssembly1 are required. Therefore as shown at entry of total quantity portion of the end item view a total quantity of 10 000 common parts CommonPart1 are needed to meet the requirements for the top level assembly items TopAssembly1.

In one embodiment the CBOM accumulates and aggregates items across a one or more BOMs and it accumulates and aggregates items and their quantities across multiple top level assemblies. Accordingly if there is another top level assembly item TopAssembly1 that requires additional common parts CommonPart1 the total quantity needed is aggregated.

Using the CBOM a buyer can choose multiple items for sourcing or pricing from a single supplier. The CBOM automatically finds all common parts such as for example CommonPart1 and accumulates the common item quantities so that a supplier can enter a single cost for each common item at the quantities required to produce all top level assemblies such as for example TopAssembly1 and so forth.

In one embodiment the CBOM provides lotting. As defined herein lotting refers to the condition where a buyer purchases more than one type of part from a single supplier. Lotting enables the buyer to source all items in a CBOM or lot from a single supplier. By grouping items that have similar attributes meaning that suppliers can provide every item in a lot e.g. stamping casting machining and so forth the buyer can negotiate price per item based on the total volume of items to leverage a better price from the supplier. Suppliers may negotiate or bid against each other at the lot level. The lot price bid comprises each individual item price.

Lotting may be implemented as follows. In one embodiment lotting may be used if there are too many items to effectively rollup pricing in a negotiation event e.g. auction . For example lots may contain hundreds or even thousands of individual part types. Accordingly it would be more practical to have each supplier break down their pricing after they make the final cut in the negotiations. A negotiation event may be conducted so that each supplier can bid only at the rolled up lot cost. Once a supplier is selected as one of a few potential suppliers based on the outcome of the negotiation event the supplier may provide a cost break down of each item in the lot which should be reconciled with respect to the total lot price which was bid by the supplier.

In one embodiment lotting may be used if a buyer needs a cost break down for an item in order to make an initial offer. For example the initial price may be broken down prior to the negotiation event but the price is still based on the total lot rolled up lot price. At the conclusion of the negotiation event the suppliers can adjust their final break down pricing to reconcile it with the total lot price.

In one embodiment lotting may be used when the lots are small and may be managed during the negotiation event. In one embodiment the supplier enters individual item pricing in a supplier user interface and the CBOM calculates the final submitted rolled up lot price. The CBOM enables the user to reduce the final bid price by a certain percentage or amount. The CBOM then automatically reduces the individual price of each item by that percentage so that the sum of all the line items equals the desired lot rolled up price. In one embodiment the suppliers also may reduce each line item individually to see the effect on the final submitted lot rolled up price.

Line items may be defined as multiple lots with a single line item in each of the lots. In one embodiment the buyer may award each line item to a different supplier. Accordingly each supplier may not be required to bid on every item. In one embodiment each item comprising the line items may be treated as a single entity. A user may create a line items group with multiple items rather than creating multiple lots with a single line item for each lot. This provides one user interface for suppliers to review and submit their bids.

Operations for the above system and subsystem may be further described with reference to the following figures and accompanying examples. Some of the figures may include programming logic. Although such figures presented herein may include a particular programming logic it can be appreciated that the programming logic merely provides an example of how the general functionality described herein can be implemented. Further the given programming logic does not necessarily have to be executed in the order presented unless otherwise indicated. In addition the given programming logic may be implemented by a hardware element a software element executed by a processor or any combination thereof. The embodiments are not limited in this context.

The project may include providing an item or a service. The parties may select a negotiation technique and provide the selection to the collaborative negotiation module . The negotiation technique may include any one of the following negotiation techniques request for quote collaboration initial offer reverse auction split of business forward auction Dutch auction English auction multi attribute bid ask transportation and supplier lotting. The total cost value may be determined based on a plurality of active negotiation terms from the plurality of parameters for each of the bidders. The active negotiation terms take into account a proportional relevance of each of the parameters rather than treating each of them equally. At the host processing node the collaborative negotiation module receives information including the plurality of parameters from each of the bidders. The plurality parameters are associated with the project. The collaborative negotiation module assigns a weight to each of the multiple parameters and determines the active negotiation terms based on the weights. The collaborative negotiation module determines a score based on at least one of the plurality of active negotiation terms. The information received by the collaborative negotiation module during the round of negotiation includes multiple negotiation variants quality system qualification lead time payment terms spoilage tooling fixturing and plastic molding qualifications. The buyer awards the project based on the total cost value.

During the round of collaborative negotiation at a first time event the application framework displays the total cost value for each of the bidders. In one embodiment aspects of the application framework may be accessible only to the buyer and is not accessible by each of the bidders. The collaborative negotiation module provides a bid summary through the application framework which includes at least one of the plurality of bid prices parameters and active negotiation terms. At subsequent time events within the round the collaborative negotiation module receives supplemental price bids and or supplemental information including at least one variable that is different from a previously submitted variable from each of the bidders. The revised total cost value for each of the plurality of bidders are displayed by the application framework. The collaborative negotiation module updates the active negotiation terms in near real time as the supplemental information is received. The collaborative negotiation module also displays a hierarchy of the plurality of bidders based on the total cost value of the negotiation. The application framework displays the bid price and a plurality of parameters a relative gap between the bid price and a market leading bid and the impact of the plurality of parameters on the bid price. Aspects of the application framework provide views that are accessible only to the bidder that submitted the bid price and the plurality of parameters.

In one embodiment the collaborative negotiation module provides supplier relationship management capabilities that enables automated matching of item attributes to the process or production capabilities of a supplier. In addition supplier relationship management capabilities can provide advanced notification alerts to manage risk of supplier insolvency late delivery and poor quality.

The item descriptive information associated with the item may include for example an attribute that defines a physical property of the item and a feature that defines a material property of the item. The collaborative negotiation module determines a process specification based on the extracted descriptive information that defines the manufacture of the item based on any one of the item attributes and features. The collaborative negotiation module then associates the process specification with the supplier capability profile.

In one embodiment the first file is received by a processor at the host processing node . To determine the first format a rule engine is applied to the first file to compare the first format to a plurality of file formats. The rule engine may match the information contained in the first file to a byte pattern a string patterns Boolean logic or file content identifier. In one embodiment the rule engine may comprise an XML template. In one embodiment the file interrogation module identifies a file extension of the first file and applies a set of rule engines based on the file extension to the first file to compare it to a plurality of file formats based on the file extension. Once the file format is identified the file is translated by invoking a converter based on the first format invoking an application programming interface API associated with said first format and extracting information associated with a content of said first file based on said API. In one embodiment extracting information associated with a content of the first file comprises extracting features associated with the manufacture of a structure defined by the content. In one embodiment extracting information associated with a content of the first file comprises extracting attributes associated with a structure defined by the content. The second file in the second format may be hosted at the at the host processing node .

Any reference to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be implemented using an architecture that may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other performance constraints. For example an embodiment may be implemented using software executed by a general purpose or special purpose processor. In another example an embodiment may be implemented as dedicated hardware such as a circuit an application specific integrated circuit ASIC Programmable Logic Device PLD or digital signal processor DSP and so forth. In yet another example an embodiment may be implemented by any combination of programmed general purpose computer components and custom hardware components. The embodiments are not limited in this context.

Some embodiments may be described using the expression coupled and connected along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example some embodiments may be described using the term connected to indicate that two or more elements are in direct physical or electrical contact with each other. In another example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

Some embodiments may be implemented for example using a machine readable medium or article which may store an instruction or a set of instructions that if executed by a machine may cause the machine to perform a method and or operations in accordance with the embodiments. Such a machine may include for example any suitable processing platform computing platform computing device processing device computing system processing system computer processor or the like and may be implemented using any suitable combination of hardware and or software. The machine readable medium or article may include for example any suitable type of memory unit memory device memory article memory medium storage device storage article storage medium and or storage unit for example memory removable or non removable media erasable or non erasable media writeable or re writeable media digital or analog media hard disk floppy disk Compact Disk Read Only Memory CD ROM Compact Disk Recordable CD R Compact Disk Rewriteable CD RW optical disk magnetic media various types of Digital Versatile Disk DVD a tape a cassette or the like. The instructions may include any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code and the like. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language such as C C Java BASIC Perl Matlab Pascal Visual BASIC assembly language machine code and so forth. The embodiments are not limited in this context.

Unless specifically stated otherwise it may be appreciated that terms such as processing computing calculating determining or the like refer to the action and or processes of a computer or computing system or similar electronic computing device that manipulates and or transforms data represented as physical quantities e.g. electronic within the computing system s registers and or memories into other data similarly represented as physical quantities within the computing system s memories registers or other such information storage transmission or display devices. The embodiments are not limited in this context.

While certain features of the embodiments have been illustrated as described herein many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments.

