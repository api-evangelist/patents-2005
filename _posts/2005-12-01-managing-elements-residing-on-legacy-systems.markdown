---

title: Managing elements residing on legacy systems
abstract: In certain embodiments, a method includes receiving, from a user of a local system, a request for a list of elements residing on the local system. Elements residing on the local system and elements residing on a legacy system are identified. The legacy system is incompatible with the local system. Both the legacy elements and the local elements are presented, to the user of the local system, as residing on the local system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08141106&OS=08141106&RS=08141106
owner: Computer Associates Think, Inc.
number: 08141106
owner_city: Islandia
owner_country: US
publication_date: 20051201
---
This application claims the benefit of U.S. Provisional Application No. 60 632 127 filed Dec. 1 2004.

This invention relates to managing documents and more particularly to managing elements residing on legacy systems.

Generic software applications are frequently used to access external data sources when processing a request from a user. These applications typically require that a user provide technical details in order to access external data sources. For example the user frequently must provide a database name a table name a column name and or a link column in order to access the external data sources. After these details are provided such applications retrieve and display the information. As a result the user is fully aware that they are accessing external data sources. If integration of local data and external data is desired the user may then manually integrate the local and external data.

In certain embodiments a method includes receiving from a user of a local system a request for a list of elements residing on the local system. Elements residing on the local system and elements residing on a legacy system are identified. The legacy system is incompatible with the local system. Both the legacy elements and the local elements are presented to the user of the local system as residing on the local system.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

At a high level system is includes or is communicably coupled with one or more clients legacy systems and server . In other words data management system is typically a distributed client server system that allows users of clients to retrieve and or perform actions on legacy elements residing in legacy systems . But system may be any other suitable environment without departing from the scope of this disclosure. Generally dynamically as used herein means that certain processing is determined at least in part at run time based on one or more variables. Whereas the term automatically as used herein generally means that appropriate processing is substantially performed by at least part of data management system . It should be understood that automatically further contemplates any suitable administrator or other user interaction with system without departing from the scope of this disclosure.

Client is typically a computer that requests and receives services and information from server via network . In the illustrated embodiment client includes a graphical user interface GUI and a thin client . It will be understood that there may be any number of clients coupled to server . In general client may include input devices output devices mass storage media processors memory interfaces communication ports or other suitable components for communicating requests to server and receiving responses via network . For example client may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept information and an output device that conveys information associated with the operation of server or clients including digital data visual information or any other suitable information. Both the input device and output device may include fixed or removable storage media such as magnetic computer disk CD ROM or other suitable media to both receive input from and provide output to users of client through a portion of a data display namely GUI . As used in this document client is intended to encompass a personal computer a workstation network computer kiosk wireless data port personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. The present disclosure contemplates computers other than general purpose computers as well as computers without conventional operation systems.

GUI comprises a graphical user interface operable to allow the user of client to interface with at least a portion of system for any suitable purpose. Generally GUI provides the user of client with an efficient and user friendly presentation of data provided by system such as charts and tables. GUI may comprise a plurality of displays having interactive fields pull down lists and buttons operated by the user. It should be understood that the term graphical user interface may be used in the singular or in the plural to describe one or more graphic user interfaces in each of the displays of a particular graphical user interface. Further GUI contemplates any graphical user interface such as a generic web browser that processes information in system and efficiently presents the information to the user. Server can accept data from client via the web browser e.g. Microsoft Internet Explorer or Netscape Navigator and return the appropriate Hyper Text Markup Language HTML or extensible Markup Language XML responses. In addition GUI provides an interface with thin client for exchanging elements with legacy system .

Thin client is typically software and may be written or described in any appropriate computer language including for example C C Java J Visual Basic assembler Perl any suitable version of 4GL or any combination thereof. As used herein software generally includes any appropriate combination of software firmware hardware and or other logic. In general thin client processes converted legacy elements and or interacts with the user via GUI . For example thin client may perform one or more of the following tasks receive and process selections indicated by the user via GUI transmit documents to server including list and or parameters transmit actions to perform on legacy elements receive converted legacy elements execute local post conversion actions generate execution reports transmit execution reports to server or others. In some embodiments thin client may be executed from a browser program and communicated with server using the HTTP or other similar protocol. In some embodiments thin client includes a web based application perhaps running Java Server Pages JSP technology to facilitate communications with legacy system such as mainframe or computer . In this embodiment thin client may include a software component initially packaged into a Java Archive file and may be running for example as one or more Java Applets under the control of a browser s Java plugin or other similar technology. In this case Sun s Java Runtime JRE may be directly downloaded from server in order to execute Applet logic. Thin client may hide the details of the existing Internet download and upload protocols. As a result communication between thin client and legacy systems may be fully transparent. In the illustrated embodiment thin client is coupled to legacy elements via network and server .

Network facilitates wireless or wireline communication between clients and any other local or remote computer such as legacy systems and or server . Illustrated network comprises two sub nets or virtual LANS and respectively. Indeed while illustrated as two networks network may be a continuous network without departing from the scope of this disclosure so long as at least portion of network may facilitate communications between thin client and one or more of legacy systems . In other words network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components in system . Network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. Network may include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the global computer network known as the Internet and or any other communication system or systems at one or more locations.

As mentioned above system includes invokes executes references or is communicably coupled with a plurality of legacy systems . Each legacy system is generally any logical or physical data repository whether local or remote that is incompatible with client . For example each legacy system may have been developed in the past and thus inherited languages platforms and techniques developed earlier than current technology. This earlier technology is frequently incompatible with current technology. In the illustrated embodiment system includes two legacy systems and . In this example first legacy system is a mainframe and second legacy system is a personal computer . Examples of legacy system include mainframes relational databases object oriented databases file systems document storage systems or any other suitable storage or data structure. In one example legacy system comprise a mainframe including a database accessed through proprietary statements. In this example legacy system may be any computer or processing device such as for example a blade server a server pool general purpose personal computer PC Macintosh workstation Unix based computer or any other suitable device. Legacy system may be adapted to execute any operating system including Linux UNIX Windows Server or any other suitable operating system. In another example legacy system may also include XML documents Btrieve files flat files CSV files text files and or other data structures or objects. In yet another example legacy system may be a computing device similar to client but not directly accessible or compatible with client .

Each legacy system typically includes a memory for storing legacy elements . Memory may include any memory or database module and may take the form of volatile or non volatile memory including for example magnetic media optical media Random Access Memory RAM Read Only Memory ROM removable media or any other suitable local or remote memory component. In the illustrated embodiment memory includes legacy elements but may include other suitable information. Legacy elements are one or more data entries or any data structures not directly accessible and or compatible with client . In general legacy elements may comprise files tables documents and or other data structures. As mentioned above legacy element may include an indication that it should be transferred in its native format. In this case system not convert legacy element to a format compatible with client while it is being transferred to client . For example the indication may be a parameter Binary. In this case the indication instructs system to transfer the file in binary without attempting conversion of legacy element . In some embodiments legacy elements may store or define various data structures such as Java objects text files eXtensible Markup Language XML documents Virtual Storage Access Method VSAM files flat files Btrieve files comma separated value CSV files internal variables or one or more libraries. In short legacy elements may comprise one table file or object or a plurality of tables files or objects stored on one computer or across a plurality of computers in any appropriate format.

Illustrated server includes memory and processor and comprises an electronic computing device operable to receive transmit process and store data associated with system . For example server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation Unix based computer or any other suitable device. Generally provides merely one example of computers that may be used with the disclosure. For example although illustrates one server that may be used with the disclosure server can be implemented using computers other than servers as well as a server pool. Server may be adapted to execute any operating system including Linux UNIX Windows Server z OS or any other suitable operating system. But the present disclosure contemplates servers other than general purpose computers as well as servers without conventional operating systems. According to one embodiment server is a Web based application running Sun JSP technology.

Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. In this embodiment illustrated memory includes one or more application program interfaces API s and client profiles but may include any other suitable information. Each API comprises a conventional application program interface providing an interface between server and legacy systems . For example API may convert translate or otherwise modify data calls and other elements between formats. In some embodiments each API provides an interface for a different legacy system such as a legacy mainframe a legacy PC or others. In some embodiments a single API provides multiple interfaces each to a particular legacy system . In general API includes a set of routines protocols and or tools used to perform actions on and or retrieve legacy elements . API may comprise a file script executable template or any other suitable description such that server may transmit commands to legacy systems . API may be created or supplied by server a third party or any other suitable user of system . In some embodiments API includes either source code for class definitions written in or an executable code for class definitions based on any appropriate language such as for example C C Java Pert and others.

Client profiles includes one or more entries or data structures that describes actions associated with legacy elements . For example client profile may include indicate or reference one or more of the following a client identifier a legacy element identifier an action type a time a date element type reason codes completion codes parameters a success failure indication and or any other suitable information. In some embodiments client profile includes information associated with multiple actions. For example client profile may include information identifying multiple actions performed on a particular legacy element and or legacy elements residing on a particular legacy system . In addition client profile may be associated with an individual and or multiple legacy elements . Client profile may be stored in any suitable format such as for example an XML document a flat file comma separated value CSV file a name value pair file SQL table or others. Indeed each profile may be a temporary or a persistent data structure without departing from the scope of the disclosure. Client profile are typically generated or loaded based on data or other information received or retrieved from legacy system . But client profile may also be created updated or supplied by client a third party software vendor or any appropriate user of any computer in system loaded from a default profile or received via network .

Illustrated server also includes processor . Processor executes instructions and manipulates data to perform the operations of server such as for example a central processing unit CPU an application specific integrated circuit ASIC or a field programmable gate array FPGA . Although illustrates a single processor in server multiple processors may be used according to particular needs and reference to processor is meant to include multiple processors where applicable. Illustrated processor executes software such as example management engine and reporting module . As with other disclosed example software reporting module is any software hardware firmware or combination thereof operable to generate reports regarding actions associated with legacy elements . For example reporting module may receive information associated with legacy elements and automatically generate and or update client profiles based at least in part on the received information. In some embodiment reporting module receives information indicating whether an action performed on a particular legacy element was a success or failure and updates an associated client profile . In addition reporting module may generate reports based at least in part on client profiles and transmit the reports to clients . The reports may indicate a list of actions performed on a particular legacy element or group of legacy elements . The reports may include additional information associated with legacy element . Reporting module may be written in or based on any appropriate computer language including C C Java Visual Basic Perl and others.

Management engine can include any software comprising instructions mappings algorithms or any other directive used to convert legacy elements to forms compatible with clients . For example management engine may convert between a legacy element coded in one character set to a different character set. In some embodiments management engine facilates binary transfer between legacy systems and clients . In addition management engine may receive a request to perform actions on legacy elements and transmits the request to the appropriate legacy systems . In some embodiments the request may include associated parameters. In this case management engine may validate the parameters prior to transmitting the request to legacy system . After receiving the request management engine may execute the requested action using API . In addition management engine may receive documents from clients and in response to at least receiving the documents dynamically generate JSP pages. For example the documents may comprises documents in which post API actions are performed by clients . In some embodiments management engine receives documents from clients and parses the received documents. In this case management engine dynamically generates one or more JSP pages based at least in part on the parsed documents. Management engine may be written in or based on any appropriate computer language including C C Java Visual Basic Perl and others. In some embodiments management engine comprises one or more Java beans. It will be understood that while management engine and reporting module are each illustrated as single multi tasked modules the features and functionality performed by these engines may be performed by one combined application. Moreover while not illustrated management engine and reporting module may each comprise a child module of another software application.

In one aspect of operation client transmits to server a request to browse the local directory residing on client . In some embodiments server may provide security mechanisms such as requiring a user ID and password to login into the server . In some embodiments legacy system may provide security mechanisms such as requiring a user ID and password to login into legacy system . In response to at least the request server identifies the list of local elements and generates a web page based at least in part on the list. In some embodiments the list includes legacy elements . Server transmits the web page to client for presenting a list of local elements to the user. In response to receiving a selection from the user of client client transmits a request to perform an action on a particular legacy element to server . For example the action may request that the particular legacy element be retrieved from updated in or added to legacy system . In the case of adding an element to legacy system the element may include an indication that it should be transferred in its native format. In this case the element is transmitted and added to legacy system independent of conversion engine . Based at least in part on the requested action management engine executes the requested action in legacy system using API . Management engine may also determine whether the performed action was successful. In this case management engine may receive from the legacy system the particular legacy element including results. Prior to transmitting any information to client conversion engine may convert the particular legacy element to a form compatible with client . After conversion management engine transmits the legacy element to client . As discussed above legacy element may include an indication that it should remain in its native form while being transferred to client . In this case management engine transmits legacy element to client independent of conversion engine . Client may then apply any post API actions to the legacy element and transmit the updated legacy element to server . Server may dynamically generate a JSP page based at least in part on the updated legacy element . Server then transmits the JSP page to client . The JSP page may include a list of legacy elements and actions performed on those legacy elements .

Turning to the illustrated embodiments illustrates an example login view . In this view the user may be provide an option to login into legacy system and or server . In the legacy case the user may provide a user name password and host identifier in order to login into legacy system . In the server case the user may provide a broker identifier in order to login into server . In the event that the user is logging into legacy system for the first time system may present view as illustrated in .

Turning to the server side processes illustrates an example method identifying the steps performed by server when adding elements to or updating elements in legacy system . Method begins at step where server receives a request to browse local file system including a list of elements residing on client . At step server identifies the list of elements residing on client . Server generates a web page including the list of elements at step . This step may include parsing the identified list validating the list and storing the list in server . Next at step server receives a request to perform an action on a selected element. As mentioned above this request may include parameters for adding an element to legacy system or updating a particular legacy element residing in legacy system . At step management engine executes the action on the element using API . Server receives the result of the actions at step . For example server may receive an indication whether the action was a success or failure. At step conversion converts the legacy element to a form compatible with client and transmits the converted element with results to client . Next at step server receives the element updated with post API actions performed by client . At step server dynamically generates a JSP page using the updated element . Server transmits the JSP page to client at step .

Turning to the server side processes illustrates an example method identifying the steps performed by server when retrieving legacy element from legacy system . Method begins at step where server receives from client a request to browse local file system. At step server identifies a list of elements in the local file system based at least in part on the request. Next at step server generates and transmits a web page including the list to client . Server receives from client a request to retrieve a selected legacy element from legacy system at step . In response to at least the request server executes an API action on the particular legacy element using API at step . At step server receives the particular legacy element and converts the legacy element to a form compatible with client . After conversion server transmits the converted element to client at step . Next at step server receives from client the element updated with post API actions. Based at least in part on the updated element server dynamically generates a JSP page at step . Server transmits the JSP page to client at step .

Although this disclosure has been described in terms of certain embodiments and generally associated methods alternatives and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

