---

title: System and method for resource reconciliation in an enterprise management system
abstract: A method to reconcile multiple instances of a single computer resource identified by resource discovery operations includes: (1) accessing information describing one or more resources; (2) identifying, via the accessed information, at least one resource that has been detected or discovered by at least two of the discovery operations; and (3) merging attributes associated with the identified resource from each of the at least two discovery operations into a single, reconciled resource object. Illustrative “resources” include, but are not limited to, computer systems, components of computer systems, data storage systems, switches, routers, memory, software applications (e.g., accounting and database applications), operating systems and business services (e.g., order entry or change management and tracking services).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09137115&OS=09137115&RS=09137115
owner: BMC SOFTWARE, INC.
number: 09137115
owner_city: Houston
owner_country: US
publication_date: 20050815
---
This application claims priority to U.S. provisional patent application entitled Change Configuration Management filed 6 Dec. 2004 assigned Ser. No. 60 633 640 and which is hereby incorporated by reference.

A computer program listing appendix has been submitted in accordance with 37 C.F.R. 1.96 c 1.77 b 4 and 1.52 e . The afore mentioned computer program listing appendix comprises a single compact disk having stored thereon the following files schema.txt created 15 Jul. 2005 having 3 762 902 bytes and api.txt created 15 Jul. 2005 having 62 157 bytes . File schema.txt is an ASCII text file comprising concatenated source code files that collectively specify an illustrative class schema in accordance with one embodiment of the invention see for example element in . File api.txt is an ASCII text file describing a reconciliation engine to database application programming interface in accordance with one embodiment of the invention see for example element in . The source code listings provided as part of the computer program listing appendix contain material which is subject to copyright protection. The copyright owner BMC Software Inc. has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records but other wise reserves all copyright rights whatsoever. The source code listings provided as part of the computer program listing appendix are hereby incorporated by reference.

The invention relates generally to enterprise management systems and more particularly to the reconciliation of objects representing resources input to the management system from different sources.

Today s businesses rely on a myriad of complex software applications to service customers or clients as well as to manage internal operations. Many of these applications require an extensive set of information technology IT components some unique and some shared with other applications. It will be appreciated that in an enterprise environment in which an organization s network or interconnected networks can span diverse geographical locations and include a number of different computational platforms operating systems protocols and network architectures it is becoming more and more important to know what resources are available so that they may be used most efficiently in supporting the businesses needs. In addition regulations such as Sarbanes Oxley are putting pressure on businesses to accurately discover track and report what resources they own who has access to them and the change history around those systems and software. As used herein the term resource includes but is not limited to computer systems components of computer systems data storage systems switches routers memory software applications e.g. accounting and database applications operating systems and business services e.g. order entry or change management and tracking services .

In large computing environments or enterprises multiple applications may be used to discover or detect resources comprising or available for use by or within the computing environment. In such situations a single resource may have been discovered and reported to an enterprise s configuration management system multiple times. Thus it would be beneficial to provide a mechanism to identify and reconcile the discovery of IT resources from multiple sources. Only with this capability can an enterprise s resources be effectively managed.

In one embodiment the invention provides a method to reconcile computer resources identified by resource discovery operations. The method includes accessing information describing one or more resources obtained from a plurality of discovery sources identifying via the accessed information at least one resource that has been detected or discovered by at least two of the discovery sources and merging the attribute values associated with the resource from each of the discovery sources that detected the resource into a reconciled resource object. The method may be stored in any media that is readable and executable by a computer system. In addition methods in accordance with the invention may be executed by one or more processing units comprising a computer system.

Techniques to reconcile the detection of computational resources e.g. hardware software and services from a number of different sources are described. The following embodiments of the invention described in terms of a change configuration management system are illustrative only and are not to be considered limiting in any respect.

Referring to reconciliation process in accordance with the invention includes identification phase and merge phase generating reconciled dataset . During identification phase resources are detected through for example automated and or manual discovery operations. Illustrative discovery operations include those provided by the Discovery Express and PATROL Visualis products from BMC Software Inc. PATROL is a registered trademark of BMC Software Inc. of Houston Tex. Illustrative resources include computer systems computer system components data storage systems switches routers memory software applications e.g. accounting and database applications operating systems and business services e.g. order entry or change management and tracking services . It will be recognized that in a typical software embodiment each detected resource may be represented as an object a software entity that includes one or more attributes. For example a computer system resource may be represented by a computer system object whose attributes include among others Name IP Number and Operating System. Identification phase also analyzes detected resources to determine if they were previously identified and reconciled or whether they are a newly detected resource. During merge phase the data associated with resource objects e.g. a resource objects attributes identified as being different instances of a common resource are combined into a single or reconciled resource object. This reconciled resource object is pushed into i.e. associated with reconciled dataset . Unitary identified resource objects may also be moved into reconciled dataset . 

Referring to illustrative change management system includes reconciliation engine database class schema and database application programming interface API . Reconciliation engine utilizes reconciliation process in accordance with the invention. Database provides inter alia for the storage of information related to discovered and identified resources datasets through reconciled resources reconciled dataset and the rules or policies by which reconciliation engine performs the acts of identifying identification rules and merging merge rules . Class schema defines the resource object hierarchy which reconciliation engine and in fact change management system operates. That is class schema defines the types and attributes that a resource object may have. For example while each resource discovery source e.g. or may use its own scheme for representing detected resources each source must supply its information to change management system through API in accordance with class schema . In one embodiment database comprises a configuration management database CMDB in accordance with the Information Technology Infrastructure Library ITIL standard. See http www.ogc.gov.uk index.asp id 2261 for ITIL information. An illustrative class schema is described in source code format in a computer program listing appendix. As will be discussed in further detail below in addition to defining what attributes any given type of resource includes class schema defines an object identifier Object ID and reconciliation identifier Reconciliation ID attribute for each object type. Accordingly every instance of a resource object stored in database includes an Object ID and a Reconciliation ID attribute value. It will be recognized that one potential Object ID or Reconciliation ID value is a NULL value such value indicating the resource object has not been identified and or reconciled e.g. a newly created an unreconciled object may have Object ID and or Reconciliation ID values of zero 0 . Database API provides a mechanism by which entities such as reconciliation engine and resource discovery sources through retrieve information from and or store information into database e.g. datasets . An illustrative application programming interface API is provided in source code format in a computer program listing appendix.

One embodiment of identification phase is shown in detail in . Referring to a first unreconciled resource object is selected from all of the unreconciled resource objects supplied by discovery sources to database and stored in for example datasets block . After identifying the dataset associated with the resource object and therefore the source that detected the resource block an attempt is made to match the selected resource object with similar objects in accordance with class schema in other datasets that have already been identified and reconciled block .

Generally reconciliation engine uses identification rules to drive the match process. In one embodiment identification rules are organized into identification groups with each rule specifying what attributes should be considered when determining a match the type of object to be matched and the discovery source or dataset to which the rule applies. Identification groups may contain any number of rules and in addition may be ordered such that individual rules within a group are processed in a given order. For example if Dataset represents the bulk of discovered resources and Dataset contains relatively few instances it is more likely that an unidentified object will find a match in Dataset. As such Dataset may be listed and processed before Dataset in the identification group. Alternatively if Dataset represents resources discovered by a particularly robust or accurate discovery process it may be searched first. shows a screen shot image of an identification rule dialog box in accordance with one embodiment of the invention. shows a screen shot image of an identification group dialog box in accordance with one embodiment of the invention. Table 1 provides a textual description of the illustrative identification group shown in .

It will be recognized that class schema see defines an object hierarchy to which inheritance applies. As shown in identification rules and identification groups are associated with a dataset for a given class of object. Since reconciliation engine is aware of class schema rules may be applied to instances of a class sub classes. That is the same identification rule may be applied to unidentified instances whose class derives from the class associated with the rule specified in the identification rule. In one embodiment this rule inheritance feature may be the default mechanism for processing rules during identification phase . In another embodiment rule inheritance may not be used. In still another embodiment rule inheritance may be turned on or off by a user on a per class basis.

Referring again to if the object selected in accordance with block is determined to match a prior identified resource object the YES prong of block it is marked as identified block . In one embodiment the act of marking an object as identified comprises assigning the object s Reconciliation ID attribute value with that value assigned to the resource object which was used to identify it.

Referring now a test is then made to determine if the newly identified object includes or comprises sub objects block . For example if the identified object is a computer system object it may include monitor keyboard pointing device processor memory or storage media sub objects. Further a sub object e.g. a storage resource object may itself include sub objects e.g. disk drive CD ROM tape unit and floppy disk objects . If the newly identified object contains unidentified sub objects the YES prong of block an attempt to identify each sub object is made block such identification proceeding as described with respect to blocks . If the newly identified object has no sub objects the NO prong of block or identification in accordance with block is complete a check is made to determine if additional unidentified objects remain to be processed block . If no more objects remain to be processed the YES prong of block merge phase is initiated. If more objects remain to be processed the NO prong of block the next unidentified and unprocessed object is selected block and processing continues at block .

Referring once again to if the object selected in accordance with block is determined not to match a prior identified resource object the NO prong of block a check is made to determine if the selected object is associated with an auto identify dataset. In the embodiment described in one or more datasets may be designated as auto identify datasets via the identification rules see discussion above . Reconciliation engine assigns a unique Reconciliation ID to each resource object instance in an auto identify dataset if the following conditions are satisfied 1 at least one of the identification rules associated with the object searches in the reconciliation phase s master dataset for a match and 2 the identification rules fail to find a match. In general the master dataset is that dataset that is the target of the reconciliation process e.g. reconciled dataset . If the selected object is from a dataset designated as auto identify the YES prong of block it is assigned unique object and reconciliation identifier values block whereafter processing continues at block as described above. If the selected object is not from a dataset designated as auto identify the NO prong of block a check is made to determine if additional objects remain to be identified. If no more objects remain to be processed the YES prong of block merge phase is initiated. If more objects remain to be processed the NO prong of block processing continues at block as described above.

It will be recognized that if after identification phase one or more resource object instances remain unidentified it may be necessary to either refine the identification rules or perform a match manually through for example a user interface. In one embodiment of a manual identification operation the user could be presented with a list of unidentified resource object instances and a list of identified resource object instances. The user could then select an unidentified resource object instance perform searches to refine the candidate list of identified instances select an identified resource object instance and apply the identity e.g. the Reconciliation ID attribute value of the unidentified resource object instance would be set to the value of the Reconciliation ID attribute of the identified resource object instance .

In the embodiments described herein merge phase pulls together resource object instances from different datasets that thru identification phase have been assigned the same Reconciliation ID attribute value and either modifies or creates an instance of the resource object in a resulting dataset e.g. reconciled dataset . One particular embodiment of merge phase is shown in detail in . To begin a first group of objects determined during identification phase to be different instances of a single resource are selected block . For example in the embodiment described above this would be all identified objects having a common Reconciliation ID attribute value. Attributes associated with each of the selected objects are then merged into a single reconciled resource object block which is then associated if it is not already with reconciled dataset block . If no additional objects remain to be processed the YES prong of block reconciliation process is complete block . If however additional objects remain to be processed the NO prong of block the next group of unreconciled objects are selected block and processing continues in accordance with block .

In one embodiment the attribute merge operation of block is shown in . A group of one or more resource objects is identified for processing where each member of the group was assigned the same reconciliation identifier value during identification phase block . From the selected group a first resource object is selected block . A weight is then assigned to each of the identified resource object s attributes in accordance with merge rules block . Until all of the resource objects within the currently identified group have had weights assigned to their attributes the NO prong of block the next object within the group is selected block whereafter processing continues at block . Once all attributes for each of the resource objects in the identified group have been assigned a weight the YES prong of block that attribute value for each defined attribute associated with the resource object having the largest weight is selected and assigned to the corresponding attribute in the reconciled data object block . For example if there are N resource objects in the selected group there could be up to N values for each attribute associated with the object. In the embodiment described herein that attribute value assigned the largest weight during the acts of block would be selected and assigned to the corresponding attribute in the reconciled data object. If all identified objects have been processed the YES prong of block merge phase is complete block . If however additional identified objects remain to be processed the NO prong of block the next group of resource objects is identified block and processing continues at block . It will be recognized that although merge operation has been described as assigning weights in practice this may not actually occur. For example it has been found convenient to assign weights through rules that is weights are associated with rules see discussion below that are evaluated during merge operation . In this context weights are not assigned but rather evaluated during merge operation with the object having the highest evaluated weight being selected.

Reconciliation engine uses merge rules to assign a weight value to each attribute for each resource object reconciled in accordance with . Referring to in one embodiment merge rules are organized into merge groups e.g. and each merge group being associated with a single dataset e.g. Dataset and DatasetN . As shown each merge group can include a default weight value e.g. and zero or more class or attribute specific rules e.g. and an Inheritance flag e.g. and a Defer if Null indicator e.g. and and an attribute value combination designator e.g. and .

With respect to default weight value this is the weight value assigned to each attribute of each object in associated dataset if no class or attribute specific rule exists to override it. Class or attribute specific rules can be put in place to override any default value. For example a class specific rule could stipulate that all resource objects of a given type e.g. a computer system resource object or storage media resource object be assigned a specified value. Similarly an attribute specific rule could stipulate that one or more attributes in a designated object class be assigned a specified value. Class or attribute specific rules and may include no rules or any combination of one or more class or attribute specific rules.

In one embodiment of the invention weight values are assigned to specific resource objects attributes during the acts of block in accordance with the algorithm shown in Table 2.

With respect to a merge group s inheritance flag e.g. and class and attribute specific merge rules e.g. and may be made to apply in accordance with the inheritance properties of the data objects to which they are associated. For example if a merge group s inheritance flag is set to Yes or some functionally equivalent value the weight assigned to any given attribute will be that weight that accounts for or incorporates the inheritance of the attribute s associated object class. By way of example consider the case where objects of type ClassA and ClassB are defined in class schema ClassB objects being a subclass of ClassA objects. Further let ClassA objects include attributes A and A and ClassB objects include an attribute A. If the relevant merge group includes class specific rules that specify a weight value of 200 for all attributes from objects of ClassA and a weight value of 600 for all attributes from objects of ClassB then the attributes for an instance of ClassB would have the following weight values A 200 A 200 and A 600. If on the other hand the merge group s inheritance flag is set to No or some functionally equivalent value and the merge group s default weight value was 100 the attributes for an instance of ClassB would have the following weight values A 100 A 100 and A 600.

With respect to a merge group s defer if null indicator e.g. and this parameter allows a user to specify what action to take when an attribute of an instance of a resource object has a null or no value. The defer if null indicator allows the user to defer to the dataset with the next weight for a given attribute if the highest weighted value is null. This allows a user to basically say I d rather have some value than no value at all even if the source isn t the highest weighted. For example if the relevant merge group s defer if null indicator is set to True or some functionally equivalent value the dataset with the next weight for a given attribute value is checked if it s defer if null value is False or some functionally equivalent value the attribute s value is assigned if its value is also null then the next value is checked and so on until all the datasets have been checked. If no mating value is detected the attribute may be assigned a null or nothing value.

With respect to a merge group s attribute value combination designator e.g. and this parameter allows a user to assign more than one value to an attribute of a reconciled object. For example if the relevant merge group s attribute value combination designation is set to Yes or some functionally equivalent value the attribute values for each instance in a group may be combined e.g. concatenated with individual values separated by a semicolon or comma with the resulting list being assigned to the corresponding attribute value in the reconciled object. If the relevant merge group s attribute value combination designation is set to No or some functionally equivalent value the value assigned to the reconciled object s attribute is that value associated with the highest weight as described above.

Various changes in the details in the components and illustrated operational methods are possible without departing from the scope of the following claims. For instance database may be embodied as a distributed or federated database. In addition identification rules may use more than a single attribute to perform a match see and Table 1 . For example an identification rule could be based on a combination of attributes such as name name format e.g. WINS DNS or IP revision number and the like. Further merge phase may use an attribute value selection algorithm other than that described in Table 2. For example a reconciled object s attribute value could be the algebraic average weighted average or median of the values from all detected resource objects. Also database could include more than a single reconciled dataset. In addition acts in accordance with A B and may be performed by a programmable control device executing instructions organized into one or more program modules. A programmable control device may be a single computer processor a special purpose processor a plurality of processors coupled by a communications link or a custom designed state machine. Storage devices suitable for tangibly embodying program instructions include but are not limited to magnetic disks fixed floppy and removable and tape optical media such as CD ROMs and digital video disks DVDs and semiconductor memory devices such as Electrically Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM Programmable Gate Arrays and flash devices.

The preceding description has been presented to enable any person skilled in the art to make and use the invention as claimed and is provided in the context of the particular examples discussed below variations of which will be readily apparent to those skilled in the art. Accordingly the claims appended hereto are not intended to be limited by the disclosed embodiments but are to be accorded their widest scope consistent with the principles and features disclosed herein.

