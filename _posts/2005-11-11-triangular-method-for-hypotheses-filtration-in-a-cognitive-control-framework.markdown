---

title: Triangular method for hypotheses filtration in a cognitive control framework
abstract: Reducing the number of hypotheses for locations of an active object in a saved image generated by a graphical user interface (GUI) of an application program may be accomplished by determining possible triangles for the saved image, wherein vertices of the triangles are points where the active object and any two additional objects of the saved image are located, determining possible pairs of hypotheses corresponding to the two additional objects from a current playback image corresponding to the saved image, determining triangles corresponding to the possible pairs of hypotheses and filtering the detected triangles, determining vertices with weights for similar triangles of the current playback image, and calculating a weight for every hypothesis of the active object and filtering hypotheses of the active object on the current playback image based on a weight bound.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07787651&OS=07787651&RS=07787651
owner: Intel Corporation
number: 07787651
owner_city: Santa Clara
owner_country: US
publication_date: 20051111
---
This application is a National Phase application of and claims priority to International Application No. PCT RU2005 000558 filed Nov. 11 2005 entitled A TRIANGULAR METHOD FOR HYPOTHESES FILTRATION IN A COGNITIVE CONTROL FRAMEWORK

The present invention relates generally to automatic control of software application programs and image analysis and more specifically to analyzing graphical user interface GUI images displayed by an application program for automatic control of subsequent execution of the application program.

Typical application program analysis systems capture keyboard input data and mouse input data entered by a user. The captured input data may then be used to replay the application program. These systems rely on playback of the application program on the same computer system used to capture the input data and thus are not portable.

Some existing application program analysis systems use image recognition techniques that are dependent on screen resolution and or drawing schemes or have strong dependencies to the underlying operating system OS being used. Such systems typically rely on dependencies such as Windows32 or X Windows application programming interfaces APIs . This limits their portability and usefulness.

Embodiments of the present invention comprise a cognitive control framework CCF for automatic control of software application programs that have a graphical user interface GUI . Examples of such applications programs may be executed on current operating systems such as Microsoft Windows and Linux for example as well as other operating systems. An embodiment of the present invention creates a system simulating a human user interacting with the GUI of the application program and using the GUI for automatic control of the application program without relying on dependencies such as specific graphical libraries windowing systems or visual controls interfaces or implementations. The CCF comprises an easy to use cross platform tool useful for GUI testing based on pattern recognition. By being independent of any OS specific controls and graphical libraries the CCF may be used for interaction with non standard graphical interfaces as well as with well known ones. The system provides for recording any kind of keyboard and mouse actions the user performs while working with the GUI of the application program and then providing playback of the recorded scenario. In the present invention image analysis of captured display data such as screen shots for example is performed to identify actions of the application program corresponding to user input data. These actions and input data may be stored for use in future playback of the same user scenario for automatically interacting with the application program.

Embodiments of the present invention comprise operating on two phases a recording phase and a playback phase. During the recording phase the system is learning how to control the application program. The system registers and captures input actions supplied by the user such as a mouse click or entering of text via a keyboard for example and display data e.g. screen shots of images displayed by the application program in response to those actions. The user actions the time interval between actions resulting display data of the GUI of the application program and possibly other data and or commands form an execution scenario. By following the execution scenario during the playback phase the system provides the same but fully automatic execution of the application program simulating the user control but without the real presence of the user . Automatic execution is made possible due to a plurality of image analysis and structural techniques applied correspondingly to images during the recording and playback phases.

At a later point in time during the playback phase the playback component may be initiated. At block simulated user activity may be generated based on the execution scenario. That is saved inputs and commands from the execution scenario may be input to the application program for purposes of automatic control using the CCF system. While the application program processes this data display data may be changed on the display as a result. At block the CCF system performs image analysis on the playback display data currently being shown as a result of application program processing and the display data captured during the recording phase. At block recorded time conditions may be checked to take into account possible variations in playback. For example the time when an object appears may be within a time interval based on a recorded time. For example in one embodiment a lower bound time time to start the search may be extracted from the saved data in the execution scenario and an upper bound time may be the lower bound time plus 10 or some other appropriate value. Processing of blocks and each result in data being stored in report . At block the CCF system controls execution of the application program based on the results of the image analysis. Blocks and may be repeated for each in a sequence of user input data items from the execution scenario.

The time interval between sequential actions is a part of the captured execution scenario. However while following the execution scenario in the playback phase one should not expect that the time interval between any two actions at playback will be equal to the time interval between the same two actions during the recording phase. There are a number of objective reasons why this interval could be different or playback than during recording. For example the application program during recording and playback may be executed on different computer systems having different processor speeds or an application program could require different times for the same actions during playback due to accesses of external data or resources. This indicates a requirement in the CCF system to handle flexible time conditions e.g. handle some tolerance for the time interval between actions during the playback phase. During that time interval at playback the system checks the recorded display data to the playback display data several times to determine if the playback display data is substantially similar to the recorded display data. A finding that the two are substantially similar indicates that a previous user action has completed and the system can progress to the next action in the execution scenario. This activity may be similar to the situation where the user is interacting with the application program and pauses periodically to view the display to determine if the expected visible changes to the display have beer made by the application program based on previous actions. If so then a new action may be performed. If at the end of a higher bound of the time interval the application program has not produced an image on the display that the CCF system expected according to the execution scenario then the CCF system may interrupt the playback of the execution scenario and generate an error report describing how the execution scenario has not been followed. In one embodiment the scenario may be corrected and the CCF system may be required to use other branches to continue.

The cognitive control framework CCF system of embodiments of the present invention performs image analysis and object detection processing on display data from the GUI of the application program. The CCF system includes comparing an image captured during a recording phase called IR to the corresponding image captured during the playback phase called IP . One task of the system is to detect an object in the IR to which the user applied an action find the corresponding object in the IP and continue progress on the execution path of the execution scenario by applying the action to the detected object. These steps may be repeated for multiple objects within an image and may be repeated across multiple pairs of IRs and IPs over time. An object that the user has applied an action to may be called an object of action. Absence in the IP of the object of action corresponding to the one found at IR means that one should capture the IP again at a later time and try to find the object of action again. Finally either an object of action may be found in the IP or execution of the scenario may be halted and a report generated describing how the wrong state was achieved and the scenario may not be continued. In embodiments of the present invention this detection of objects of action may be done in real time during the playback phase progressing from one action to another. Thus the image analysis process employed must have good performance so as to introduce only a minimal disturbance to the time conditions at playback.

The CCF system of embodiments of the present invention comprises an image analysis and detecting process. Such a process has at least two requirements. First the process should be able to overcome some variations in the captured images such as different color scheme fonts and the layout and state of the visual elements. In one embodiment comparison constraints for checking these items color scheme fonts etc. may be set to specified parameters in accordance with specific needs. Overcoming these variations is desirable because recording and playback might be executed in different operating environments such as different screen resolutions different visual schemes different window layouts and so on. Additionally there could be insignificant differences in corresponding IR usually captured after an action was applied to an object of interest and IP pairs captured after a previous action was completed . Second the implementation of the image analysis and object detection process should be fast enough to introduce only minimal disturbances and delay of application execution during playback.

By processing captured images the system builds descriptions of the images in terms of the objects presented on them. Each display object may be represented by its contour and a plurality of properties. Table I enumerates some possible contour properties for use in the present invention. In other embodiments other properties may also be used.

Next during the playback phase handled by playback component at block the CCF system determines the contours of objects in the IP. At block the CCF system filters contours by size to determine contours that may become hypotheses for active objects and contours that connect them. At block the CCF system filters the objects by basic space layout in the IP to determine subsets of hypotheses for active and additional objects. For example filtering criteria for space layout may include tables wizards and menus. In one embodiment the user or CCF schema with a cascade search could set both strict e.g. as is and fuzzy e.g. object could be near each other conditions. At block the CCF system filters the objects by content to produce further subsets of hypotheses for active and additional objects. For example the filtering criteria by content may include images and text. Moreover in one embodiment the user or CCF schema with cascade search could set both strict e.g. image should have difference in a few points and text should have minimal differences on a base of Levenstein distance and fuzzy e.g. image could be stable to highlighting and have insignificant structural changes and text could have noticeable differences on a base of Levenstein distance without consideration of digits conditions. At block the CCF system performs structural filtering of the objects to produce a best hypothesis for active objects.

Finally at block the CCF system recalculates old actions for a new object by applying the action according to the execution scenario. For example suppose the user selected via the mouse the screen location at X 70 Y 200 and that a button is displayed at the rectangle denoted X1 50 Y1 150 X2 100 Y2 100 . In the IP the button may be represented as a rectangle denoted X1 250 Y1 300 X2 200 Y2 100 . For a general view coordinates of the top left corner and the size of the rectangle may be changed. The mouse click user selection may be recalculated based on the position of the button and the scaled size for X and Y coordinates . The calculation gives the new mouse click coordinates e.g. X 290 Y 350 .

During filtering at each step there is an evaluation of specific contour properties as required for a specific filter . This filtering pipeline is designed in such a way that the most time consuming evaluation steps are shifted to later in the processing pipeline when the number of contours hypotheses is smaller. By using this approach the overall computational cost may be decreased thereby helping to ensure good performance of the system.

It is useful to maintain a compromise in order to make sure that the system does not filter out some contours in the early steps that may be later determined to be either a hypothesis of an object of activity or objects connected with an object of activity. In this regard predefined input parameters may be set to broad limits that requires spending a little more time on processing of additional contours hypotheses but ensure that the system has not dropped important contours.

Embodiments of the present invention including image analysis and object of activity detection on two images may be illustrated by the following examples using a performance analyzer application program. These figures show applying the process blocks of to a first image from the recording phase IR and a corresponding image from the playback phase IP . is an example display of the GUI of an application program captured and saved during a recording phase. This IR screen shot shows that the item Tuning Activity was selected by the user using a mouse. is an example display of the GUI of an application program captured during a playback phase. Note there are some insignificant changes in the displayed windows in comparison to . is an example image illustrating objects identified during contouring operations of the recording phase according to an embodiment of the present invention as performed on the image of . shows the sample output from block of . is an example image illustrating objects of activity of the recording phase according to an embodiment of the present invention as performed on the image of . These contours were identified after performing blocks and of on the image from . The contour with the text labeled Tuning has been determined in this example to be the current object of activity. is an example image illustrating objects identified during contouring operations of the playback phase according to an embodiment of the present invention. This image is output from performing block of on the sample image of . Finally is an example image illustrating a hypothesis during the playback phase according to an embodiment of the present invention. shows hypotheses from for the Tuning Activity object of activity from . Size space content and structural filtration of blocks has been performed. The ellipse represents the contour which was selected as the best hypothesis from performing block of . A new point for the mouse click is recalculated relative to the given object i.e. the tuning display object .

In some scenarios filtration according to blocks through still result in many hypotheses to consider. When the number of hypotheses is large more computational resources are needed. In one embodiment of the present invention a triangular method for hypotheses filtration may be used to reduce the number of GUI hypotheses for objects in space two dimensional 2D for screen shots and multidimensional in the general case .

The triangular approach to hypotheses filtration may be understood with reference to an actual example but a relatively simple example for purposes of explanation to avoid complex visual representations . Referring back to a saved screen shot for one step during execution of an application program is shown.

GUI changes for this application program may become apparent during playback. For example it could be GUI noise as a result of product evolution of the application program visual interface. In one example it may result from using another OS with a different visual scheme. presents the appearance of the application program for the other OS.

In this case soft or fuzzy conditions may be used during the search of the GUI objects of . When using the CCF system this results in generation of many hypotheses for GUI objects after applying fuzzy filters for sizes shapes text images and distances. In this example the user selected the Tuning word in the Tuning Activity item of and the search system uses a set of active and additional objects as shown on . is an example image illustrating active and additional objects according to an embodiment of the present invention. All objects are enumerated and an active object has a bold border.

After pre filtration according to size text etc. as in block through of many hypotheses may remain for the objects of . The term hypothesis as used herein means a contour of an object on the playback image which corresponds to a contour of an object on the saved image at a point in time. This means the previously applied filters didn t reject this correspondence of objects. is an example image illustrating active hypotheses from for objects of according to an embodiment of the present invention. The numbers shown in each contour of mean that the objects of correspond to hypotheses for all objects with the given numbers from . Note that there are several hypotheses for the active object 0 .

Application of the triangular method of hypotheses filtration of an embodiment of the present invention within block of and block of decreases the number of active hypotheses. Note the triangular approach could filter all hypotheses if the current screen shot during playback has significant differences with the image saved during the recording phase. This fact allows the triangular approach to be employed for the identification of incorrect behavior of an application program under analysis.

Let s consider three points on the saved image A B and C. Point C corresponds to a selected active object e.g. a center point of a contour or another point using any other rules to detect a contour . Points A and B correspond to any two additional objects. Connecting these points form a triangle. It is well known that any triangle can be described by two angles and one edge. For the present triangular filtration method the ABC angle 0 the BAC 0 angle and the AB edge d0 calculated as the Euclidean distance are used.

Additionally the triangular method of hypotheses filtration uses at least four rules D d0 . . . F d . . . F . . . and F . . . returning Boolean values for distances and angles correspondingly using variables d and . In some embodiments complex rules may be used but for this example very simple ones may be used. 0 0

To decrease the number of triangles and get better results an upper bound for the d0 distance is used. In other words let s use triangles which have an edge AB see above that is less than D. This rule is used for triangles from the saved the recorded image. function 0 0 1 

This function filters distances corresponding edges in triangles which are outside of an interval based on the d0 and Q coefficient values d0 Qdispersion with central point d0. In other words let s use triangles where a corresponding edge is inside a detected interval. This rule is used for triangles from the current screen shot the playback image. function 0 0 

This function filters angles corresponding ones in triangles which are outside of an interval based on the 0 and T coefficient values Tdispersion with central point 0. In other words let s use triangles where a corresponding angle is inside a detected interval. This rule is used for triangles from the current screen shot the playback image. function 0 0 

This function filters angles corresponding ones in triangles which are outside of an interval based on the 0 and T coefficient values Tdispersion with central point 0. In other words we use triangles where corresponding angle is inside detected interval. This rule is used for triangles from the current screen shot the playback image.

In the above defined rules Dis the upper bound between additional objects this decreases the number of hypotheses pairs and reduces negative effects for the triangular filtration algorithm Qis a coefficient denoting an interval distance and Tis a tolerance for angles for further analysis of hypotheses. Note one Tcoefficient may be considered for both angles because a symmetrical approach is used.

Let s consider all hypotheses for objects 1 and 2 and possible hypotheses pairs one hypothesis for object 1 and one hypothesis for 2 . is an example image illustrating all pairs of hypotheses for additional objects according to an embodiment of the present invention. represents all of these pairs by connected lines. The figure doesn t show the contours of objects represented by the hypotheses in order to make the given representation simple only the central points art indicated .

Triangles may then be filtered from according to the third and fourth rules i.e. with the F and F rules applied to corresponding angles. The result is shown on . is an example image illustrating all possible triangles from after filtration according to an embodiment of the present invention.

Some triangles on are dissimilar to a triangle from . Let s change triangles on into similar ones the direction may be found by drawing a perpendicular on line between a pair of hypotheses for additional objects and the angles are 0 0 . The new triangle should have the same base edge between a pair of hypotheses. This edge detects a half plane where a third vertex both for old and new triangles should take place. Corresponding angles for the new triangle should be equal to 0 and 0. Corresponding changes are represented on . is an example image illustrating similar triangles after changes have been made according to an embodiment of the present invention.

Now let s consider vertices of the triangles which correspond with hypotheses for active objects. Some vertices could coincide with other vertices i.e. multiple vertices may occupy the same point in the coordinate system and their weight fox purposes of the present invention equals 1.0 multiplied by the number of vertices coincident there.

In this simple example only additional objects 1 and 2 were considered. It s necessary to do the same steps for all triangles shown in . is an example image illustrating all vertices for triangles represented as crosses and hypotheses for the active object represented as dots according to an embodiment of the present invention. represents all vertices in accordance with this approach. Note that some objects could have no hypotheses. It doesn t affect the present method.

Every vertex point on has an associated weight as indicated above. Let s consider distances between these vertices and points for hypotheses of the active object 0 . In different embodiments of the present invention different functions may be used. In one embodiment the Euclidean distance coefficient Qand simple bound Qmay be used to filter long distances to produce a double precision floating point value 

Eis the Euclidian distance between points. Special distance E sets better values for points which have smaller Edistances nearer taking into account weight and additional coefficient Q. E sets zero values for far points also based on upper bound Q .

The weight W for each hypothesis of the active object 0 may be recalculated using the following formula although in other embodiments other formulas may be used to produce a double precision floating point value 

For point C W C Q Q means the accumulated sum of E distances between this point and all corresponding vertices.

The last parameter for the filter of embodiments of the present invention is a simple weight bound Qfor every hypothesis of active object 0 to produce a Boolean indicator I according to a fifth rule Rule 5.

For this example one hypothesis remains after the filtration operations e.g. for very soft parameters Q 200.0 Q 0.05 and Q 0.005 . This is the correct hypothesis. Sometimes some incorrect hypotheses may be generated but their weights are less than the weight of the correct hypothesis. This demonstrates the effectiveness of the triangular method of embodiments of the present invention both for reducing the number of hypotheses and indicating the best the right one. Note that the present method works very well without fine tuning of parameters. It was proved using the Cognitive Control Framework for analyzing different GUI applications under several different operating systems. The power of the present method is especially noticeable for screen shots with many similar GUI objects.

The present triangular approach may be used for multidimensional space without any changes. The Euclidean distance may be used for the corresponding space only. Some simple experiments demonstrated good effectiveness of the method for three dimensional 3D space so the method could be recommended for corresponding control systems.

Note that an additional filter is not used for this example although it may be useful to apply filtration based on tolerances for lengths of perpendiculars in triangles drawn from a point of the active object for a recorded image and from corresponding hypotheses for the current screen shot .

The triangular approach to hypotheses filtration has at least several advantages. A first advantage of this approach is that it is applicable to any application program exposing a visual interface on any platform and operating system and is not dependent on a specific API or architecture of visual system implementation like Win32 or X Windows API or specific operating system. It correlates with an advantage of the overall Cognitive Control Framework approach which works across platforms. All other known systems are dependent to a small or big extent on system APIs while working with visual elements. A second advantage of this approach is that it is an easy way to significantly decrease the number of hypotheses for active objects. A third advantage is that it is an easy way to help with automatic portability of old scenarios to new versions of products. It decreases the time needed to support a base of scenarios for application program testing. A fourth advantage is that the triangular method does not require significant computing resources compared to other methods. It introduces only minimal disturbance and delay in application execution during playback.

Reference in the specification to one embodiment or an embodiment of the present invention means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of the phrase in one embodiment appearing in various places throughout the specification are not necessarily all referring to the same embodiment.

Although the operations detailed herein may be described as a sequential process some of the operations may in fact be performed in parallel or concurrently. In addition in some embodiments the order of the operations may be rearranged without departing from the scope of the invention.

The techniques described herein are not limited to any particular hardware or software configuration they may find applicability in any computing or processing environment. The techniques may be implemented in hardware software or a combination of the two. The techniques may be implemented in programs executing on programmable machines such as mobile or stationary computers personal digital assistants set top boxes cellular telephones and pagers and other electronic devices that each include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and one or more output devices. Program code is applied to the data entered using the input device to perform the functions described and to generate output information. The output information may be applied to one or more output devices. One of ordinary skill in the art may appreciate that the invention can be practiced with various computer system configurations including multiprocessor systems minicomputers mainframe computers and the like. The invention can also be practiced in distributed computing environments where tasks may be performed by remote processing devices that are linked through a communications network.

Each program may be implemented in a high level procedural or object oriented programming language to communicate with a processing system. However programs may be implemented in assembly or machine language if desired. In any case the language may be compiled or interpreted.

Program instructions may be used to cause a general purpose or special purpose processing system that is programmed with the instructions to perform the operations described herein. Alternatively the operations may be performed by specific hardware components that contain hardwired logic for performing the operations or by any combination of programmed computer components and custom hardware components. The methods described herein may be provided as a computer program product that may include a machine accessible medium having stored thereon instructions that may be used to program a processing system or other electronic device to perform the methods. The term machine accessible medium used herein shall include any medium that is capable of storing or encoding a sequence of instructions for execution by a machine and that cause the machine to perform any one of the methods described herein. The term machine accessible medium shall accordingly include but not be limited to solid state memories and optical and magnetic disks. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application module logic and so on as taking an action or causing a result. Such expressions are merely a shorthand way of stating the execution of the software by a processing system cause the processor to perform an action of produce a result.

