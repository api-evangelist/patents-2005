---

title: First computer process and second computer process proxy-executing code on behalf of first process
abstract: Upon a first process encountering a triggering device, a second process chooses whether to proxy-execute code corresponding to the triggering device of the first process on behalf of such first process based at least in part on whether a license evaluator of the second process has determined that the first process is to be operated in accordance with the terms and conditions of a corresponding digital license. The license evaluator at least in part performs such determination by running a script corresponding to the triggering device in the code of the first process. Thus, the first process is dependent upon the second process and the license for operation thereof.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08103592&OS=08103592&RS=08103592
owner: Microsoft Corporation
number: 08103592
owner_city: Redmond
owner_country: US
publication_date: 20051114
---
The present application is a continuation in part of prior application Ser. No. 10 681 017 filed Oct. 8 2003 and hereby incorporated by reference in its entirety.

This invention relates to a first process on a computing device and a second process on the computing device that executes code on behalf of and as a proxy for such first process. More particularly the invention relates to a security process on the computing device that proxy executes the code on behalf of an application process only if the security process is satisfied based on a license or the like that the application process is entitled to be operating on the computing device. Even more particularly the invention relates to such a security process that proxy executes code on behalf of the application process to execute a function limited by the license to a defined count but only if the security process is satisfied based on maintained state regarding the count that the application process is entitled to execute the function.

A computer application distributor wishes to distribute such computer application to each of many users or recipients in exchange for a license fee or some other consideration. However such distributor typically also wishes to restrict what each user or recipient can do with such distributed computer application. For example the distributor would like to restrict the user from copying and re distributing such application to a second user at least in a manner that denies the distributor a license fee from such second user. Similarly the distributor may wish to prevent the user from employing the application to perform more than a set number of a certain task.

In addition the distributor may wish to provide the user with the flexibility to purchase different types of use licenses at different license fees while at the same time holding the user to the terms of whatever type of license is in fact purchased. For example the distributor may wish to allow the application to be executed only a limited number of times only for a certain total time only on a certain type of machine only on a certain type of rendering platform only by a certain type of user etc. Likewise the distributor may wish to allow one user to pay a smaller license fee and access a smaller set of application functions and also to allow another user to pay a larger license fee and access a larger set of application functions and the like.

However after distribution has occurred such distributor has very little if any control over the distributed application. This is especially problematic in view of the fact that the application may be copied and re distributed to most any personal computer presuming that the application is not otherwise protected in some manner from such copying and re distribution. As should be appreciated most any such personal computer includes the software and hardware necessary to make an exact digital copy of such application and to download such exact digital copy to a write able magnetic or optical disk or to send such exact digital copy over a network such as the Internet to any destination.

Of course as part of a transaction wherein the application is distributed the distributor may require the user recipient of the application to promise not to re distribute such application in an unwelcome manner and to not perform other prohibited acts. However such a promise is easily made and easily broken. A distributor may therefore attempt to prevent such prohibited acts through any of several known security measures.

One security measure that is employed to prevent improper re distribution of an application is product activation. In such product activation a customer acquiring a software application is provided with a product activation key corresponding thereto which is a unique serial number and product identifier that acts as a proof of purchase or the like. The provided product key is then entered during installation of the application on a particular computer device to act as a proffer that the application was acquired legally and or otherwise properly. The product activation key need not be and typically is not cryptographic in nature although a digital signature which is cryptographic in nature may be included to act as a guarantee that the product key is genuine.

The entered product key and an ID representative of the computer device are then sent to a product activation service as part of the installation process. As may be appreciated the product activation service determines whether the entered product key is valid whether the product key has been employed before and if so in connection with what computer device. Typically each product key enables an installation or re installation of the application on a single computing device as is set forth in a corresponding license agreement although a product key may also enable a set number of installations re installations on multiple computer devices also.

Accordingly if the product activation service determines that the entered product key has already been employed to install the application on another computer device or has been employed a maximum number of times for example such activation service will not allow the installation of the application on the computer device to proceed will not allow a complete installation of the application on the computer device will not allow the installed application to be used on the computer device or the like as the case maybe. Thus activation as used herein may entail permission to install the application permission to perform some level of installation of the application permission to completely install the application some level of permission to use the application complete permission to use the application or the like.

If the activation service declines to activate the application for the customer based on an entered product key already being used in connection with another computing device or based on the entered product key not supporting the level of activation desired the customer must acquire another appropriate product key to install completely install use the application on the computing device in the manner desired. Thus the product key and the product activation service act to ensure that the application is not nefariously or wantonly installed activated used on multiple computing devices such as may be in violation of any software license agreement associated with the software product.

Note that as part of the activation process the activation service may return a digital version of the license to the computing device on which the application is associated. Such license may be tied to the computing device such that the license is not usable with any other computing device and may express a level of activation as well as license terms such as application functions that are to be made available functions that are to be made non available a period of activation or a number of times the application may be executed on the computing device a maximum number of uses of a particular function of the application a maximum number of simultaneous uses of a particular function of the application and the like. In general such license may express any limitations and or rights and also may express any policies that should be honored in connection with the execution of the application on the computing device all as set forth by the distributor of the application or another entity.

With such license then a rights client controller with a license evaluator or the like may be employed on the computer along with the distributed application to control operation and use of the application based on an evaluation of whether the license so permits. However a need exists for an actual method and mechanism by which such rights client with such license evaluator may in fact control operation and use of the application based on the license. In particular a need exists for such a rights client with such a license evaluator that executes certain portions of code on behalf of and as a proxy for the application but only if the license evaluator determines that the license allows such execution.

While in one case the portions of code within the application are at least partially randomly chosen it is to be appreciated that in another case each of at least some of the portions of code represents a function that is to be executed only if the corresponding license so allows. More specifically the function is to be executed only if the corresponding license so allows based on a logical or mathematical determination. For instance it may be that the function allows the instantiation of a resource and the license allows a maximum of X instantiations of the resource. In such an instance then a need exists for a method and mechanism by which a secure process can securely maintain a count of the number of instantiations of the resource as state information. More generally a need exists for a method and mechanism by which the secure process can securely maintain state information regarding data necessary to determine whether a license for an application allows code of the application to be executed.

The aforementioned needs are satisfied at least in part by the present invention in which a computer has a first process with code to be executed in connection therewith where the code includes a triggering device. A digital license corresponds to the first process and sets forth terms and conditions for operating the first process. A second process operates on the computer for proxy executing code corresponding to the triggering device of the first process on behalf of such first process the second process including a license evaluator for evaluating the license upon the first process encountering the triggering device to determine whether the first process is to be operated in accordance with the terms and conditions set forth in such license.

The second process upon the first process encountering the triggering device chooses whether to in fact proxy execute code corresponding to the triggering device of the first process on behalf of such first process based at least in part on whether the license evaluator has determined that the first process is to be operated in accordance with the terms and conditions of the license. The license evaluator at least in part performs such determination by running a script corresponding to the triggering device in the code of the first process. Thus the first process is dependent upon the second process and the license for operation thereof.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of co processing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline s .

It can also be appreciated that an object such as may be hosted on another computing device or . Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wireline or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides the infrastructure for widely distributed computing and encompasses many different networks.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11b or wired e.g. Home PNA Cat 5 even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently moving forward computing devices will require ways of protecting content at all portions of the data processing pipeline.

The Internet commonly refers to the collection of networks and gateways that utilize the TCP IP suite of protocols which are well known in the art of computer networking. TCP IP is an acronym for Transport Control Protocol Interface Program. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the example of computers etc. can be thought of as clients and computer etc. can be thought of as the server where server etc. maintains the data that is then replicated in the client computers etc.

A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server.

Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example Hypertext Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW . Typically a computer network address such as a Universal Resource Locator URL or an Internet Protocol IP address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example communication can be provided over a communications medium. In particular the client and server may be coupled to one another via TCP IP connections for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with a server in communication with client computers via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process store or render secure content from a trusted source.

In a network environment in which the communications network bus is the Internet for example the servers can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers may also serve as clients as may be characteristic of a distributed computing environment. Communications may be wired or wireless where appropriate. Client devices may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer and server computer may be equipped with various application program modules or objects and with connections or access to various types of storage elements or objects across which files may be stored or to which portion s of files may be downloaded or migrated. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other devices and databases .

In the present invention a rights client with a license evaluator and in connection with a product activation service controls operation and use of an application based on a corresponding license by executing code on behalf of and as a proxy for an application but only if the license evaluator determines that the license allows such execution. Thus the rights client with the license evaluator enforces the license as against a user of the application.

As may be appreciated although the present invention is disclosed primarily in terms of the rights client with the license evaluator the application the license and the product activation service such present invention may also be employed in connection with alternate elements without departing from the spirit and scope of the present invention. For example the application may instead be any application or type of process running on a computer including a program an operating system and the like or even a piece of digital content such as an audio recording or multimedia presentation. Similarly the license may instead be any sort of permission token with or without specific permission parameters and the license evaluator may instead be any kind of device for evaluating such a permission token. Likewise the product activation service may instead be any variety of permission granting authority and the rights client may instead be any variety of controlling authority that can also proxy execute code. Accordingly and more generally in the present invention a second process on a computer controls the operation and use of a first process on a computer by executing code on behalf of and as a proxy for the first process.

Turning now to it is seen that in one embodiment of the present invention a first process such as an application is dependent upon a second secure process such as a rights client to proxy execute at least some portion of code for the application where the rights client includes a license evaluator or the like. Accordingly the rights client may choose whether to in fact proxy execute the code for the application based among other things on whether the license evaluator has access to a license corresponding to the application and on whether the license has permissions or rights that allow or at least do not prohibit the action corresponding to the code to be executed. Note that such a license and the license evaluation of the rights client are known or should be apparent to the relevant public and therefore need not be disclosed herein in any detail.

In one embodiment of the present invention and referring now to the application rights client and license evaluator are constructed to operate on a computer or the like as follows. Typically either a user or another process on the computer instantiates the application on such computer as the aforementioned first process step and as part of an initializing process such application ensures that the rights client with the license evaluator hereinafter rights client is instantiated on the computer as the aforementioned second process step . Thereafter the application establishes a connection with the rights client step . Note that it may be the case that the rights client is already instantiated or it may be the case the rights client must be newly instantiated either by the application another process the user or the like.

Once step is performed and presuming that a license corresponding to the application is available to the rights client and the license evaluator thereof the application can query the rights client to have the license evaluator thereof determine based on the license the rights the application has based on such license and the application can then operate based on such rights. However it is to be appreciated that a nefarious entity wishing to subvert the license might choose to attack the application by re directing the query to a stub rights client that would in effect grant all rights to the application without regard to any license present or otherwise. Alternatively such a nefarious entity might choose to spoof communications between the application and the rights client or may wish to attack the rights client itself if the application cannot be attacked. Note though that the latter case is less likely inasmuch as the rights client should be highly secure and protected from such an attack.

Accordingly and in one embodiment of the present invention the rights client is required to proxy execute at least some portions of code on behalf of the application so that the application is dependent on the rights client . Put another way by requiring the rights client to proxy execute at least some portion of code on behalf of the application the aforementioned nefarious entity cannot subvert the license by somehow removing the rights client from participating in the method of . Instead the rights client must participate to proxy execute code on behalf of the application and while doing so the license evaluator of the rights client can also perform evaluation functions with regard to the license . Thus the rights client does not merely provide the application with a true or false type of response that could be spoofed.

In one embodiment of the present invention the license includes encoded information regarding the code that the rights client is to proxy execute. Thus the license must be available to the rights client for same to proxy execute on behalf of the application . For example the encoded information may include the code a reference to a location of the code a decryption key for decrypting an encrypted version of the code or the like.

As should now be appreciated in order to effectuate proxy execution the application must be pre processed to define the code that is to be proxy executed to remove same from such application and to appropriately store such removed code in a form proxy executable by the rights client . In one embodiment of the present invention then and turning now to a method of pre processing the application to effectuate proxy execution is shown.

Preliminarily and as may be appreciated a developer develops source code for the application in an appropriate programming language such as for example a C type programming language step . In doing so and significantly the developer identifies within such source code for the application each of one or more code sections that is to be proxy executed step . As may be appreciated each such proxy executed code section identification may comprise any appropriate mark tag command or the like without departing from the spirit and scope of the present invention. Thereafter the developer compiles the source code with a compiler into machine code step .

Note that the developer may identify each code section within the source code based on any particular criteria without departing from the spirit and scope of the present invention. For example if the developer merely wishes to trigger proxy execution from time to time so as to ensure the rights client is present and is allowing the application to operate based on a corresponding license each such identified code section may be decided upon in a fairly random manner. However if the developer wishes to trigger proxy execution at specific times and or with regard to specific sections of code each such identified code section must be decided upon in a more targeted manner. Note with regard to the latter that it may be the case that an identified code section specifies a particular license right. In such a situation it may also be the case that the rights client will proxy execute such identified code section only if the specified license right in the license is met.

As may be appreciated the compiler may be any appropriate compiler without departing from the spirit and scope of the present invention. Significantly the compiler is constructed to maintain each code section identification in the machine code so that post compile processing may be performed on the code section identified thereby. Such maintaining may be performed in any appropriate manner without departing from the spirit and scope of the present invention. For example the compiler may pass the identification from the source code to the machine code in a recognizable form or may create a scratch table not shown with such information therein.

Thus and in one embodiment of the present invention after such compiling the developer post compiles the machine code with each recognizable code section identification therein with a post compiler into the final code representative of the application where the post compiler converts each identified code section into a form accessible only by the rights client and not by the application such as for example by removing each identified code section in the machine code from such application or otherwise makes such identified code section inaccessible step . As may be appreciated such post compiler is constructed to retrieve each code section identification either from the machine code the aforementioned scratch table or elsewhere and operate based thereon.

In one embodiment of the present invention for each identified code section in the machine code the post compiler removes the identified code section from the machine code step replaces the removed code section with a triggering device step notes an address of the triggering device within the application step and stores the removed code section and the noted address in a table or the like step . If necessary or advisable each removed code section may be stored in the table in an encrypted form decryptable by the rights client step . As was set forth above such table may be made available to the rights client by being set forth in the license or by being set forth in another location. Note that the table may be signed or otherwise protected from alteration by a verifying device such as a hash.

As may be appreciated by replacing the removed code section with the triggering device and presuming that the triggering device is shorter than the removed code section the post compiler shortens the machine code . Note that the triggering device may be any appropriate triggering device without departing from the spirit and scope of the present invention as long as the triggering device is recognizable as a signal that the rights client is needed to proxy execute the corresponding removed code section. For example the triggering device may be a particular exception that would get the attention of the rights client .

After the post compiler is finished and as should now be appreciated such post compiler outputs final code representative of the application hereinafter the application and the table step . As was set forth above such table may be made available to the rights client by being set forth in the license or by being set forth in another location separate from the application . It may for example be the case that the table with encrypted removed code sections therein is placed in the license along with a decryption key for decrypting each encrypted code section where the decryption key is itself encrypted in a manner decryptable by the rights client .

Note that by separating the table from the application the application has no innate access to the table or the removed code sections therein. Nevertheless in one embodiment of the present invention the table may indeed be set forth within the application as a portion thereof. Note too that as an alternative to the code sections being removed from the application and set forth in the table such code sections may instead be placed elsewhere. For example such code sections may be placed within the application either in a specifically dedicated portion thereof or even at the respective locations where such code sections were originally found. Of course in the latter case such removed code sections are not in fact removed and accordingly should at least be encrypted or otherwise made unavailable without the license and the rights client .

Thus and returning now to during runtime and after the application and rights client have been instantiated the rights client attaches itself to the application in the manner of a debugger or the like so that the rights client can monitor the application for when each triggering device exception therein is executed step . As may be appreciated the rights client monitors the application for the particular triggering device exception hereinafter exception that signals that the rights client is to proxy execute on behalf of the application . Thus on every breakpoint exception the rights client determines whether the exception source is a code section to be proxy executed and if so the rights client proxy executes such code section presuming the license so allows.

In an alternate embodiment of the present invention the rights client does not attach itself to the application to monitor for an exception but instead receives the exception from an operating system operating the computer . However such an arrangement is indirect and therefore slower. Another alternative would be to have each triggering device be a call to the rights client although such a strategy is slightly more complex as compared to an exception and is more prone to attack by a nefarious entity.

At some point the application may explicitly request permission to operate from the rights client based on the license . In response the rights client searches for the license the license evaluator evaluates such license and the rights client returns such requested permission if the evaluation of the license evaluator is positive. Note though that such explicit request for permission and response are ancillary to the present invention. Rather in the present invention the rights client is actuated based on an exception or the like from the application and not based on an explicit request from the application . Thus in the present invention the rights client can withhold performance of a function on behalf of the application even when the application never requested permission to perform such function.

At any rate in the course of operating the application at some point executes an exception in the code thereof where such exception was placed in the application by the post compiler in place of a removed code portion hereinafter removed code portion step . As should be understood upon executing the exception the application pauses or otherwise halts until receiving notice that the exception has been dealt with step . Inasmuch as the rights client is attached to the operating application and is listening for such exception from such application such rights client notes the exception step and responds thereto step .

In particular to respond to the exception the rights client first determines the address of the exception within the application step locates the corresponding code section in or by way of the table based on such address step proxy executes such corresponding code section on behalf of the application step and then signals to the application that the exception has been dealt with step . As may be appreciated the application may then proceed step . Note that if the corresponding code section is encrypted the rights client must decrypt the located corresponding code section before proxy executing same step . Note too that a particular code section may require that the license evaluator of the rights client first verify that the license grants the rights necessary to proxy execute such code section on behalf of the application step . As may be appreciated the rights client proxy executes such code section only if the license grants the right to do so. Otherwise the rights client declines to do so. In the latter case it may be that the rights client returns an appropriate message to the application .

It is to be appreciated that a rights client should not be proxy executing any arbitrary code section especially inasmuch as the rights client should be especially secure and therefore could have a relatively large amount of operating rights with respect to the computer . Put another way the rights client should not be performing actions that the application would not have operating rights to perform such as altering certain system registers accessing memory areas of other applications and the operating system and the like. Accordingly in one embodiment of the present invention the post compiler during operation thereof ensures that each code section removed and stored thereby is not of a sensitive nature. For example it may be the case that the post compiler during operation thereof ensures that each such code section does not affect system memory. Of course other bases for filtering code sections may be employed without departing from the spirit and scope of the present invention. Note that if a code section includes sensitive code it may be that the post compiler isolates such sensitive code and removes only sub portions of code on either side of the sensitive code.

In one embodiment of the present invention the rights client proxy executes on behalf of the application only if a valid license corresponding to such application is available to the rights client . In such a case it may be that the purpose of each exception and proxy execution based thereon is merely to occasionally check that the license is still present and still valid. In an alternate embodiment the rights client proxy executes on behalf of the application without regard to any corresponding valid license . In such a case it may be that the purpose of each exception and proxy execution based thereon is merely to tie the application to the rights client which presumably is tied to the computer thus tying the application to the computer .

In one embodiment of the present invention the application as produced by the post compiler may include multiple types of exceptions each triggering the rights client . However each different type of exception is handled differently. For one example one type of exception may require the rights client to check the license while another type may not. For another example different types of exceptions could require access to different tables or could require different decryption keys and or methods.

As disclosed herein the application the rights client and the license are separate constructs. Nevertheless it should be appreciated that such items may be combined in any manner without departing from the spirit and scope of the present invention. For example the application could include the rights client or the rights client could include the license . Note though that in at least some instances combined items may be more susceptible to an attack from a nefarious entity.

As also disclosed herein the rights client proxy executes code on behalf of the application . Alternatively the rights client may operate to modify the application to include the to be executed code allow such application to execute such code and then again modify the application to remove such code. Note though that such an arrangement may be more susceptible to attack by a nefarious entity especially in the moments when the application is modified to include the to be executed code.

As may be appreciated one especially useful aspect of the present invention is that the rights client may now perform especially secure functions on behalf of the application such that a nefarious entity is thwarted from affecting such functions. For example it may be the case that a term in a license affects how many times the application can perform a specific action. Although the application could obtain such term from such license having the application do so could allow a nefarious entity to intervene in the process to subvert same. Instead in one embodiment of the present invention the rights client is employed to proxy execute code for the application relating to such term in such license including obtaining the term and employing same.

As was noted immediately above it may be the case that a term in a license affects how many times the application can perform a specific action. For example the license may allow a particular action to take place 5 times 5 times each instance that the application is instantiated or the like. Similarly the license may allow the application to have no more than 5 copies of a resource such as a process instantiated at any one time or may allow the application to have no more than 5 network connections at any one time among other things. In any of the aforementioned examples then a count must be maintained in a secure manner and as state information. As was noted above although the application could obtain the license terms relating to such a count from the license and could in fact maintain the count having the application do so could allow a nefarious entity to intervene to subvert such license terms. Instead and again in one embodiment of the present invention the rights client is employed to proxy execute code for the application relating to license terms in such license based on state information such as a count including obtaining the license terms and the count and employing same. Notably in doing so the license is referred to by the rights client not just to verify the existence thereof but also to provide information such as for example a maximum count value.

If indeed the rights client maintains state information relating to a count the basis of the count may be any basis without departing from the spirit and scope of the present invention. For example the count can be with regard to a number of copies of a resource instantiated by the application where the corresponding license specifies a maximum value of such count per session of the application . Likewise the count can be with regard to a number of times an incorrect password is entered in connection with the application where the corresponding license specifies a maximum value of such count over all sessions of the application .

Notably such state information as maintained by the rights client with regard to a license and a corresponding application may also be any other state information without departing from the spirit and scope of the present invention. For example such state information could be a time value relating to a last time the application performed an action a date value relating to a number of days until the application can perform an action a monetary value that can be consumed by the application and the like.

In one embodiment of the present invention the rights client upon referring to a license corresponding to the application with regard to an interrupt or the like encountered at a particular location within the application determines from the license a particular script or the like with instructions for how to process the interrupt including instructions for creating state information relating to the interrupt if necessary and or instructions for manipulating the state information. Thus based on such instructions and related state information the rights client may determine from the license both the actions that are to be taken to process the interrupt and also whether as a result of such actions the processed interrupt should result in a corresponding code section of the application being decrypted and proxy executed by the rights client on behalf of the application . Note that for the rights client to perform such actions it may be necessary to include in the table of for each interrupt an identification of or pointer or reference to a corresponding portion of the license where the corresponding portion includes the aforementioned script that services the interrupt.

For example and referring now to it is seen that a particular interrupt in an application corresponds to a particular script in a corresponding license where the script is to be run in response to encountering the interrupt in the application . Supposing that the interrupt relates to a code section that instantiates a resource for the application where the code section is encrypted and stored in some predetermined location it may be that the table with regard to such interrupt points to an instantiate script in the license that at least in part determines that a maximum number of instantiations of such a resource has not occurred for a current session of the application .

As may be appreciated then in such an example state information must be maintained by the rights client in connection with the license regarding an instantiate count of how many instantiations of such resource currently exist for the current session of the application . In particular such state information may be maintained by the rights client in an appropriate state store and in an appropriate form. Such store and form may of course be any appropriate store and form without departing from the spirit and scope of the present invention presuming of course that the store is secure against attacks by nefarious entities and can maintain such state information for extended periods of time if necessary.

As may be appreciated and referring now to the state information in the state store regarding the instantiate count should be initialized to zero either when the application is first instantiated or when the corresponding instantiate interrupt is first encountered during a particular session of the application step . In the former case it may be that the license includes an initializing script that is triggered by a corresponding interrupt in the application when such application is itself initialized. In the latter case it may be that the instantiate script of the license includes an initializing portion that initializes the instantiate count if necessary.

In either case and presuming now that the state store of the rights client includes the instantiate count set to a particular value the initialize script can be presumed to compare the value of the instantiate count to a predetermined maximum value step . As should be appreciated if the value of the instantiate count is less than the predetermined maximum value the instantiate script would continue by incrementing the value of the instantiate count step and by allowing the rights client to in fact instantiate the process step presumably by decrypting and proxy executing the corresponding code section of the application . However if the value of the instantiate count is equal to or greater than the predetermined maximum value the instantiate script would not increment the value of the instantiate count step and would not allow the rights client to in fact instantiate the process step .

As may also be appreciated and still referring to the state information in the state store regarding the instantiate count should be decremented whenever an instantiated copy of the resource at issue is to be released. In particular a release interrupt in the application presumably corresponds to a release script in the corresponding license where the release script and the release interrupt presumably relate to a code section that releases an instantiated copy of the resource for the application .

Here the release script presumably decrements the value of the instantiate count as maintained in the state store of the rights client step and allows the rights client to in fact release the process step presumably by decrypting and proxy executing the corresponding code section of the application . As may be appreciated such release script need not do much if anything else and indeed need not consider whether the value of the instantiate count is greater than a predetermined maximum value and also need not initialize the value of the instantiate count.

Of course the particular steps performed by any script in a license are determined according to whatever goal is to be achieved by the corresponding interrupt in the corresponding application and likewise the particular state information maintained by the rights client in the state store also is determined according to whatever goal is to be achieved. Notably by placing each script in a license different versions of the application can be achieved by way of different corresponding licenses . With regard to the aforementioned instantiate script as an example different licenses may allow different numbers of the aforementioned resource to be instantiated by way of corresponding different predetermined maximum values in such instantiate script .

As thus far disclosed a particular interrupt in an application corresponds to a particular script in a corresponding license where the script is to be run in response to encountering the interrupt in the application . However it is to be appreciated that the script or at least a portion thereof may instead be located within the rights client . For example it may be that the aforementioned instantiate script is in the rights client except for the predetermined maximum value which would be set forth in a corresponding license . In such an example the license is greatly simplified inasmuch as such license need not contain the bulk of the instantiate script or any other script for that matter. However the rights client in such an example must instead hold the instantiate script and all other necessary scripts . As a result new scripts are added by updating the rights client .

Note that although the present invention is disclosed herein primarily in terms of a first computer process application and a second computer process rights client proxy executing code on behalf of the first process application the term process should be broadly construed. Thus the processes may be any appropriate processes without departing from the spirit and scope of the present invention and the term process itself should be interpreted to include not only computer processes but any other form of action taking object such as for example a driver an executable a binary a batch file or the like running within a process or elsewhere.

The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight forward and should be apparent to the relevant programming public. Accordingly such programming is not attached hereto. Any particular programming then may be employed to effectuate the present invention without departing from the spirit and scope thereof.

In the present invention a method and mechanism are provided by which a rights client with a license evaluator controls operation and use of an consumer based on a license corresponding thereto. The rights client with the license evaluator executes certain portions of code from a provider on behalf of and as a proxy for the consumer where the license evaluator can determine if the license allows such execution. Thus the consumer cannot be run outside of the presence of the provider . The rights client can be employed to proxy execute a function of the consumer only if the corresponding license so allows based on a script that performs a logical or mathematical determination. The rights client can securely maintain state information in a state store such as a count relating to the function as well as other data necessary to determine whether a license for an application allows code of the application to be proxy executed.

It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. It should be understood therefore that this invention is not limited to the particular embodiments disclosed but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims.

