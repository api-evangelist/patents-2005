---

title: System and method for communicating data between wireless mobile hand-held computer and a back-end computer system
abstract: An asynchronous, middleware system positioned between a larger computer system and a wireless mobile hand-held computer anticipates the needs of a wireless mobile hand-held computer that is served by the middleware system. The middleware system can anticipate and process needs for a mobile hand-held computer when the hand-held computer is not “synchronized” with a larger computer network. The middleware system can be designed to prepare information for downloading from a larger computer system to a wireless mobile hand-held computer well in advance of a communication link while the hand-held computer is not “synchronized” with the larger computer network. The middleware system can provide a network architecture that is very durable, scaleable, and flexible to serve hundreds and thousands of wireless mobile hand-held computers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08028039&OS=08028039&RS=08028039
owner: Reflexis Systems, Inc.
number: 08028039
owner_city: Needham
owner_country: US
publication_date: 20051223
---
This application is related to co pending U.S. patent application Ser. No. 10 421 639 entitled Systems and Methods for Providing Field Force Automation in Big Box Retail Environments filed on Apr. 22 2003. The complete disclosure of the above identified related application is hereby fully incorporated herein by reference.

The invention relates to middleware that provides connectivity between wireless mobile hand held computers and back end computer systems. More particularly the invention relates to a system and method for establishing communications over a computer network between multiple wireless mobile hand held computers and one or more back end computer systems.

In the past mobile hand held computers typically had very low memory resources and a short battery life. These restrictions caused mobile hand held computers to be very one dimensional meaning that they could only run or execute single function computer applications. For example many mobile hand held computers could only run a small suite of specific applications such as wireless e mail and electronic calendars.

But advances have been made in the art so that mobile hand held computers are now more robust. For example many mobile hand held computers are capable of running or executing multiple computer software applications that can be found on most non mobile fixed desk top computer systems. For example many mobile hand held computers can run complex graphical user interfaces and computer operating systems such as Microsoft Windows and Linux.

While significant advances have been made in mobile hand held computers the technology that allows these mobile hand held computers to wirelessly connect or couple to larger computer networks such as wide area networks WANs local area networks LANs and the Internet has not progressed at the same rate. Wireless technology that allows mobile hand held computers to connect to larger computer networks is critical for the mobile hand held computers because of the need for the exchange of data between a mobile hand held computer and a larger computer network.

Data usually must be exchanged between a mobile hand held computer and a larger computer network because of the context or application of the mobile hand held computer environment. For example a corporate entity may have hundreds of employees who do not work in a typical office setting and who use mobile hand held computers on a daily basis to generate revenue for the corporate entity. One such environment includes a sales business in which sales employees are constantly away from their home office setting because they are meeting potential customers at respective customers places of business.

Another environment that requires a mobile hand held computer to exchange information with a larger computer network includes the construction business. The construction business usually includes employees who are working at a new site in which conventional wired connections with a larger computer network are usually unavailable or are inconvenient or both . In such an environment only a wireless link between an employee s mobile hand held computer and the larger corporate computer network is practical.

In all of the mobile computing environments described above the data exchange between the mobile hand held computer and the larger computer network can benefit both the employee with the mobile hand held computer and the company who manages the large computer network. The employee can benefit from the data exchange by receiving the most current information regarding tasks or work that have been assigned to the employee. The employee can have access to more information than can be stored on his mobile hand held computer by being able to connect to the larger computer network that has significantly more data records because of the size of its memory relative to the mobile hand held computer.

Similarly the larger computer network can benefit from the data exchange by receiving the most current information that is collected by the employee with his mobile hand held computer. The larger computer network allows a company to track the progress made by its employees in field who are outside of the conventional office setting. In this way the larger computer network allows a company to view the larger picture by accessing all of the data collected by its employees in the mobile environment.

The data exchanged between the larger computer network and the mobile hand held computer can be any type of binary content. Such binary content can include but is not limited to photographs signatures voice text files word processing files spreadsheet files programs for the mobile hand held computer and other like binary content.

To exchange data between the mobile hand held computer and a larger computer network over a wireless link conventional technology often requires a rather complex conversation between the mobile hand held computer and the larger computer network. For example many conventional wireless solutions treat mobile hand held computer should like an Internet browser that is trying to access an Internet web service which can be managed by the larger computer network. Such an Internet like browser model requires a significant number of complex messages to be exchanged between the mobile hand held computer and the larger computer network.

While some mobile hand held computers and larger computer systems could be designed to support the Internet model the design would likely only function if the wireless link was perfect. In other words many conventional wireless solutions for the mobile hand held computer environment assume that the wireless link can always be established when it is requested by either the mobile hand held computer or the larger computer network. This is not the case because of the nature of wireless links. Typical wireless links include a radio frequency type in which the mobile hand held computer communicates with the larger computer network using radio frequency electromagnetic waves. Other wireless links can include but are not limited to magnetic optical acoustic and other similar wireless technologies.

Wireless links are usually never perfect and usually cannot be established when they are requested or desired. This means that a wireless link between a mobile hand held computer and a larger computer network is usually short lived and may occur only intermittently. Many conventional wireless solutions for the mobile hand held computer environment do not take this inconsistent and periodic nature of wireless links into account and therefore most conventional solutions fail to establish a meaningful data exchange between the mobile hand held computer and the larger computer network. Many conventional wireless solutions consume too much time during a wireless communication link performing the same tasks that occur during a wired communication link.

Another problem with conventional wireless solutions for the mobile hand held computer environment is directly related to the assumption that a wireless link will always be available and that it not be subject to disruptions. Specifically the conventional solutions try to determine what is required of the mobile hand held computer and the larger computer network while the wireless link exists. In other words because conventional solutions assume that the wireless link will be perfect and available on demand the solutions determine what is needed by the mobile hand held computer while the hand held computer is linked to the larger computer network.

Similarly the conventional solutions also determine what is needed by the larger computer network from the mobile hand held computer only during the existence of the wireless link. Such extended processing during the existence of the wireless link consumes valuable time without any meaningful data being exchanged between the mobile hand held computer and the larger computer network.

One conventional mobile hand held computer solution that can be used with wireless links at the time of this writing is Merger Replication. This technology is made and marketed by Microsoft . This conventional solution encounters many of the problems discussed above. In addition to the problems discussed above this solution also encounters problems when several hundred mobile hand held computers are trying to establish a wireless link at the same time.

The processing load on the receiving systems with this conventional solution is usually very high when the receiving systems are servicing several hundred mobile hand held computers. The size or volume of this load can causes this conventional solution to require a significant amount of maintenance to keep it running. For example the databases and the logic that handles the communication between the mobile hand held computer and the larger computer network are very tightly connected such that any change to one element in the middleware system directly affects another element in the middleware system. This wireless solution can be characterized as a very brittle environment that operates in real time or in a synchronous manner. Because of the tight relationships between the real time or synchronous elements the conventional solution can be very susceptible to failure in large mobile computing environments.

Conventional wireless solutions for the mobile computing environments typically break down when a threshold number of users are being serviced. It has been found that this threshold is usually about three hunched 300 mobile hand held computers. Any number above this threshold can cause the conventional systems to rapidly break down or simply fail. The conventional solutions are simply not scalable for servicing hundreds and thousands of wireless mobile hand held computers.

Accordingly there is a need in the mobile computing art that is scaleable and flexible so that hundreds or thousands or similar orders of magnitude of wireless mobile hand held computers can be serviced by a single unified system. There is a further need in the art for a mobile computing solution that allows information to be exchanged efficiently over a wireless link between mobile hand held computers and a larger computer system. There is a need in the art for a system that is designed to handle the inconsistent and periodic nature of wireless links with mobile hand held computers.

The invention can be characterized as an asynchronous middleware system positioned between a larger computer system and a wireless mobile hand held computer that anticipates the needs of the wireless mobile hand held computer that is served by the middleware system. The term asynchronous is used to describe the middleware system because the middleware system can pre process information that is destined for and received from a wireless mobile hand held computer when the hand held computer is not coupled or off line relative to the larger computer system.

In other words the inventive middleware system can anticipate and process needs for a mobile hand held computer when the hand held computer is not synchronized with a larger computer network. The invention can be designed to prepare information for downloading from a larger computer system to a wireless mobile hand held computer well in advance of a communication link while the hand held computer is not synchronized not coupled to the larger computer network. A communication link can comprise a wireless mobile hand held computer that may be coupled to or on line with or synchronizing with a larger computer system such that the larger computer system can send data to and receive data from the wireless mobile hand held computer.

The middleware system can also simply receive information uploaded from the wireless mobile hand held computer during a communication link without adding time to the communication link. The middleware system can reduce or eliminate extra communications that are associated with processing information when information is uploaded to the middleware system from the wireless hand held computer. In other words the middleware system can keep communications between the middleware system and a wireless mobile hand held computer simple in order to promote efficient and rapid transfer of information between the middleware system and a wireless mobile hand held computer during a communication link and in order to reduce the duration of a communication link.

As one example of the simple communications between the inventive system and a wireless mobile hand held computer during a communication link the middleware system does not typically perform any rigorous authentication of the wireless hand held computer. Instead the middleware system can usually authenticate a wireless hand held computer by comparing a wireless hand held computer identifier that is unique to the wireless hand held computer and stored by the middleware system with the identifier that is transmitted by the wireless hand held computer. If these two identifiers match the wireless mobile hand held computer can be authenticated by the middleware system.

According to a further exemplary aspect the middleware system can be designed so that the wireless mobile hand held computers are not always trying to establishing a communications link with the back end computer system. It is recognized that only a small number of applications need a constant communication link with a larger computer network. Therefore the inventive middleware system can be designed to take advantage of the fact that most applications do not need a constant or frequent communications link with the back end computer system.

According to one exemplary aspect the wireless mobile hand held computer can be programmed to initiate a communication link at set times during a day or at predetermined intervals. The wireless mobile hand held computer can also initiate a communication link if it determines that the back end computer system needs access to any data that is stored on the wireless mobile hand held computer. Similarly a communication link can be initiated in response to the back end computer system desiring to send the hand held computer some data that it deems as essential or important for the hand held computer to have.

To reduce the duration of an upload from a wireless mobile hand held computer during a communication link the middleware system can check a registry of files sent from the wireless hand held computer against a registry of files maintained by the middleware system. The middleware system can request the wireless hand held computer to upload only those files that the middleware system has not already received. Similarly the middleware system can check the wireless hand held computer registry for files that the hand held computer has not received from the middleware system so that the middleware system only downloads files to the hand held computer that have not been received by the hand held computer. This can reduce the duration of a download from the middleware system to the wireless hand held computer during a communication link.

To further reduce the duration of a download from the middleware system to the wireless hand held computer during a communication link the middleware system can also request the wireless mobile hand held computer to send a statement of health indicator. The statement of health indicator can comprise a file that indicates that a wireless mobile hand held computer is healthy. Healthy can mean that the wireless mobile hand held computer is functional and does not have any problems with the application software that may be running on the wireless hand held computer.

If this statement of health indicator is not detected by the middleware system this can trigger the middleware system to download larger application software files to the wireless hand held computer so that the wireless hand held computer can be rebuilt or re booted. If the statement of health indicator is detected by the middleware system then the middleware system will not download any large application software to the wireless hand held computer unless the large application software is an update that the wireless hand held computer may have not already received. The statement of health indicator can usually be detected by the middleware system and deleted during an upload from the wireless hand held computer and then a new one can be created and sent to the wireless hand held computer after a download of files from the middleware system.

Prior to receiving a statement of health indicator during a download of files from the middleware system during a communication link a wireless hand held computer can receive a command file from the middleware system. The command file can comprise one or more commands and relative paths for files that are downloaded to the wireless hand held computer from the middleware system. The command file can executed by the wireless mobile hand held computer after all the files from the middleware system have been downloaded.

The middleware system can also receive upload files from a wireless mobile hand held computer even if a statement of health indicator is not detected by the middleware system. This insures that any perishable data that may be generated by a wireless hand held computer that may not be running correctly can be preserved by the middleware system.

To increase the speed and efficiency of uploads and downloads the inventive system can also adjust the size of the upload files and download files that are transferred between a wireless mobile hand held computer and the middleware system using the socket layer. Specifically the middleware system can break a file into segments and feed it into the socket layer so that the socket layer can process files of a uniform and small size.

To preserve the integrity of each wireless mobile hand held computer a wireless hand held computer can store a back up or a copy of its application software files and data in case of any errors that could occur during a communication link. These back up files can be deleted if a communication link is deemed successful.

While the invention may not appear to provide significant advantages on its face when compared to other conventional systems when low volumes of wireless hand held computers are being served such as a hundred wireless hand held computers or less the invention does offer tremendous advantages in processing power and efficiency when high volumes such as an order of magnitude of several hundreds of wireless hand held computers that can be served by the middleware system. The invention can comprise several elements that contribute to the processing power and efficiency of the middleware system.

For pre processing of information that is destined for a wireless hand held computer from a back end server such as a legacy system the middleware system can comprise a distribution engine that can retrieve and receive information from the back end server. The distribution engine can comprise software running on a computer that communicates with client specific software applications that run on the back end servers. One example of a client specific software application can include PACE software that is owned by the assignee of the invention and described in co pending U.S. patent application Ser. No. 10 421 639 entitled Systems and Methods for Providing Field Force Automation in Big Box Retail Environments filed on Apr. 22 2003 the entire contents of which are hereby incorporated by reference.

The distribution engine can further comprise hand held computer logic code that manages the files destined for downloading on a specific or uniquely identified wireless hand held computer. The distribution engine can further comprise an anticipate application program interface API that allows the distribution engine to communicate with the back end server to retrieve information that is specific to each uniquely identified wireless hand held computer. The distribution engine can track the files that are specific or tailored for a single wireless hand held computer by associating files with a unique wireless identifier ID assigned to each wireless hand held computer.

For managing information that is uploaded from a wireless hand held computer the middleware system can comprise a triage module that organizes files received from a wireless hand held computer according to file extensions associated with a particular file. That is the triage module can assign files to specific queues of a server that contain files of a single type as determined by the file name extension of a file. For example for image files formatted according to the j peg standard .jpg one or more queues can be assigned to handle files of this type of information. Further at least two services that manage only one type of file type can be assigned to each individual queue.

This redundancy of services for each individual queue increases the speed in which files are processed and sent back to the back end server. The redundancy of services can also prevent failures of service for a particular queue since it is unlikely that two or more services out of four services will fail for a particular queue.

The triage module and distribution engine can run on the same physical computer server. These two computer applications can form part of a larger application that can be referred to as the expression engine.

The expression engine comprising the triage and distribution modules can be coupled to an articulation engine through a computer network connection such as through the Internet. The articulation engine can comprise software running on a server that communicates directly with each wireless hand held computer over the Internet. The articulation engine can comprise the communication submodules for establishing the communication link with each mobile hand held computer.

According to one aspect of the inventive system the architecture is designed such that it is flexible yet durable. For example according to one exemplary aspect a wireless hand held computer can access at least one of two articulation engines that may be assigned to a particular wireless hand held computer. The wireless hand held computer can access at least one of the articulation engines over a computer network such as the Internet by using computer network address associated with a particular articulation engine such as an IP address assigned to an articulation engine.

If a particular articulation engine cannot be accessed by a wireless hand held computer the wireless hand held computer can then identify the next articulation engine and its associated computer network address that may be stored in a table on the wireless hand held computer. In this way a wireless hand held computer can be guaranteed a connection with at least one articulation engine that is present in a list of two or more articulation engines.

To add further flexibility of the design and to balance communication loads between articulation engines according to another exemplary aspect the wireless hand held computer can randomly select its articulation engine from the list of articulation engines stored in the wireless hand held computer to initiate a communication link. And according to a further exemplary aspect if a first communication link is not successful the wireless hand held computer may select the next articulation engine that is adjacent to the randomly selected one. This means that any second or subsequent selection of an articulation engine by the wireless hand held computer is not random but sequential in nature.

Similar to the wireless mobile hand held computer having a list of network addresses for two or more articulation engines that may be assigned to a particular wireless mobile hand held computer an articulation engine can also have a list of network addresses for two or more expression engines that may be assigned to a particular articulation engine. According to these exemplary aspects of multiple computer address assignments the inventive system can balance communications loads across its several articulation engines and expression engines.

The inventive system can handle any type of digital payload that may be exchanged between a wireless mobile hand held computer and a back end system. The inventive system can dynamically adjust for receiving new types of upload files produced by the wireless mobile hand held computer by assigning the new types of upload files to respective new upload queues. The middleware system can also initiate new services that are assigned to and process the respective new upload queues for any new types of digital payload.

The invention may be embodied in hardware or software or a combination thereof. The invention can be characterized as an asynchronous middleware system positioned between a larger computer system and a wireless mobile hand held computer that anticipates the needs of the wireless mobile hand held computer that is served by the middleware system. The inventive middleware system can anticipate and process needs for a mobile hand held computer when the hand held computer is not synchronized with a larger computer network.

According to a further exemplary aspect the middleware system can be designed so that the wireless mobile hand held computers are not always trying to establishing a communications link with the back end computer system. The inventive middleware system can be designed to take advantage of the fact that most applications on a hand held computer do not need a constant or frequent communications link with the back end computer system.

The inventive system can handle any type of digital payload that may be exchanged between a wireless mobile hand held computer and a back end system. The inventive system can dynamically adjust for receiving new types of upload files produced by the wireless mobile hand held computer by assigning the new types of upload files to respective new upload queues. The middleware system can also initiate new services that are assigned to and process the respective new upload queues for any new types of digital payload.

Referring now to the drawings in which like numerals represent like elements throughout the several Figures aspects of the invention and the illustrative operating environment will be described.

The middleware system may operate in a networked environment using logical connections to one or more other remote computers. The remote computers may be another personal computer such as hand held computers a server a client such as web browser a router a network PC a peer device or a common network node. The logical connections depicted in can include additional local area networks LANs and a wide area networks WANs not shown. Such networking environments are commonplace in offices large industrial facilities enterprise wide computer networks intranets and the Internet.

Computers illustrated in may be coupled to a LAN through a network interface or adaptor. When used in a WAN network environment the computers may typically include a modem or other means for establishing direct communication lines over the WAN.

In a networked environment program modules may be stored in remote memory storage devices. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between computers other than depicted may be used.

Moreover those skilled in the art will appreciate that the present invention may be implemented in other computer system configurations including other hand held devices besides hand held computers multiprocessor systems microprocessor based or programmable consumer electronics networked personal computers minicomputers mainframe computers and the like.

The invention may be practiced in a distributed computing environment as illustrated in where tasks may be performed by remote processing devices that are linked through a communications network such as the distributed computer network . In a distributed computing environment program modules may be located in both local and remote storage devices.

The mobile hand held computer can comprise any general purpose computer capable of running software applications and that is portable for mobile applications. The mobile hand held computer can communicate with the computer network through a link . Further details of the client process engine running on the mobile hand held computer will be described below with respect to .

The communications link can be wire or wireless depending upon the application of the mobile hand held computer . In a preferred yet exemplary embodiment the link can comprise a wireless link. Typical wireless links include a radio frequency type in which the mobile hand held computer can communicate with other devices using radio frequency RF electromagnetic waves. Other wireless links that are not beyond the scope of the invention can include but are not limited to magnetic optical acoustic and other similar wireless types of links.

The communications link allows the mobile hand held computer to communicate with the computer network . According to one exemplary aspect the client process engine can be programmed to initiate the communications link at predetermined times during the day or at set predetermined time intervals. The client process engine can also initiate the communications link if it determines that it has data that the back end computer system should have prior to a scheduled communications link . Similarly the back end computer system can initiate the communications link if it determines that it has data that the back end computer system should have prior to a scheduled communications link . By only initiating a communications link only when data is ready to be transmitted the inventive middleware system can take advantage of processing information during any down time or time in which the hand held computer is off line or not linked to the back end computer system . Scheduling only periodic links can also conserve costs that are associated with wireless networks and air time. 

The computer network can comprise any type of computer network such as a local area network LAN wide area network WAN or the Internet. The computer network can be coupled to the listener tier of the exemplary computer architecture. The listener tier is designed to transmit data to and receive data from the mobile hand held computer across the computer network . The listener tier can comprise one or more articulation engines and expression engines .

Each articulation engine is designed to communicate data between each mobile hand held computer and a respective expression engine . Further details of the articulation engine will be described below with respect to . The expression engine that is coupled to one or more articulation engines communicates data between a respective articulation engine and the back end computer system .

Each articulation engine can comprise a computer server that executes various software applications for communicating with the mobile hand held computer and the expression engine . Further details of the expression engine will be described below with respect to . The expression engine can comprise a computer server such as a sequential query language SQL server that maintains upload and download files for each respective mobile hand held computer that may be assigned to a particular expression engine . The expression engine is designed to communicate between the articulation engine and the back end computer system .

While the articulation engine and expression engine are illustrated as communicating with one another through dashed arrows the arrows denote virtual connections between the articulation engines and expression engines and not direct physical connections. That is each expression engine is connected to one or more articulation engines through the computer network as indicated by solid direct link lines . Further while each listener tier comprises a group of articulation engines and expression engines contained within a rectangular box one of ordinary skill in the art recognizes that this grouping of elements is a logical association rather than an actual physical one. For example the first articulation engine A could physically exist in a first geographic location such as the State of Georgia while the second articulation engine B could exist in a second geographic location such as the State of Maryland. The physical locations of the expression engines can also be different from one another as well as different from the articulation engines .

The expression engines connect the articulation engines to back end computer systems . The back end computer systems can further comprise various application specific software that may run on larger computers such as servers . For example a back end server can execute application software that is specific to an industry such as construction large scale contracting and or a sales environment. In a construction application the back end servers could be designed to track the progress of a construction project through the mobile hand held computers that are in the hands of the employees of a particular company. Similarly the back end servers could execute software applications that track the sales or marketing activities of employees who use the mobile hand held computers while they are making sales calls with customers in a non office on site setting.

With the inventive middleware system a balanced communication load and relative ease in maintaining the middleware system can be achieved. Specifically according to one exemplary aspect each mobile hand held computer has a unique identifier A that is assigned to a particular group of articulation engines . Prior to establishing a link with the computer communications network the mobile hand held computer through the client process engine can select one of several computer addresses from a list A of computer network addresses. The list A of computer addresses can comprise computer addresses of the articulation engines that are assigned to a particular mobile hand held computer .

The computer addresses can comprise addresses such as Internet Protocol IP addresses. For example the client process engine could select the first computer network address A that is the computer network address for the first articulation engine A as illustrated in . Similarly the client process engine could also select the second computer network address B that corresponds to the computer network address for the second articulation engine B. The invention could include any number of computer network addresses that are contained in the list A.

To assist with balancing the communication between respective articulation engines such as the first articulation engine A and the second articulation engine B the client process engine of the hand held computer can use a randomizer function that allows the mobile hand held computer to select its first articulation engine prior to establishing a link with the computer communications network .

According to one exemplary embodiment the client process engine can use the randomizer function A in order to select a first computer network address out of the list A of computer network addresses available to a particular mobile hand held computer . This means that if a particular computer network address is first selected by a mobile hand held computer and it fails the client process engine can then select the next computer network address from the list A in sequence instead of using the randomizer function A.

However it is not beyond the scope of the invention for the client process engine to use the randomizer function A for selecting each computer network address from the list A of network addresses. The inventors have discovered that selecting a first computer network address randomly and then selecting a next computer address in sequence from the list A can help balance the communication load between respective articulation engines of a particular listener tier that may be assigned to a group of mobile hand held computers .

Allowing each mobile hand held computer to select a respective articulation engine from the list A of computer network addresses also increases the stability of the middleware system . For example if a particular articulation engine requires servicing then that particular articulation engine can be taken offline without service disruption for a particular mobile hand held computer . In other words if a mobile hand held computer selects a first computer network address A that may be assigned to a first articulation engine A and if the first articulation engine A is offline then the mobile hand held computer can select the next computer network address from the list A of the computer network addresses. In this way the next articulation engine that is selected could be the second articulation engine B.

Similar to the computer network addresses A maintained within the mobile hand held computer each articulation engine A may also maintain a list B of computer network addresses for respective expression engines that are assigned to a particular articulation engine . Like the mobile hand held computer the articulation engine A can also use a randomizer function B to randomly select its first computer network address from the list B of computer network addresses for its respective expression engines .

In this way communication load balancing can be achieved between numerous expression engines that may service one or more articulation engines . And as noted above it is not beyond the scope of the invention to utilize the randomizer function B for each selection that is made from the list B of computer network addresses. And similar to what is described above if service or maintenance is required for a particular expression engine a particular unit may be taken offline without affecting communications because of the articulation engine s ability to select another expression engine from the list B of computer network addresses maintained by a respective articulation engine .

In summary the first and second lists A B that are maintained in respective mobile hand held computers and respective articulation engines in the listener tier increase performance of the middleware system by providing automatic fail over in addition to communication load balancing. The ease at which a mobile hand held computer can identify an available articulation engine as well as the ability of the articulation engine being able to find an available expression engine offers a very scalable and durable middleware system .

The middleware system as illustrated in also provides simple communications between a respective articulation engine and a mobile hand held computer . Specifically the articulation engine does not typically perform any significant or rigorous authentication of respective mobile hand held computers that may be serviced by a particular articulation engine . Instead of checking through several layers of security to determine if a particular mobile hand held computer is permitted to access the back end computer system according to one exemplary embodiment the articulation engine can usually authenticate a wireless mobile hand held computer by comparing the hand held computer identifier A that is sent by the mobile hand held computer with the stored unique identifier B that is maintained in the articulation engine .

If the two unique identifiers A and B match then the articulation engine has authenticated the wireless mobile hand held computer and therefore the articulation engine can proceed with communicating with the respective mobile hand held computer . However one of ordinary skill in the art recognizes that one or more additional layers of security could be implemented by the articulation engine without significantly affecting the simple communications that are established between the mobile hand held computer and a respective articulation engine .

Referring now to this figure is a functional block diagram illustrating additional scalability of some core architectural components for the middleware system that communicates data between wireless mobile hand held computers and a back end computer system according to one exemplary embodiment of the invention. In this figure the first mobile hand held computer can be assigned to a first listener tier A. Similarly a second mobile hand held computer B can be assigned to a second listener tier B.

Additional listener tiers such as third listener tier C can be added to the middleware system in order to provide redundancy for other existing listener tiers . According to another exemplary embodiment a mobile hand held computer can be assigned to one or more listener tiers . For example the first mobile hand held computer A can be assigned to two listener tiers such as the first listener tier A and the second listener tier B. In this way the mobile hand held computer will always likely be able to establish a link with one or more listener tiers . Each of the articulation engines and expression engines in respective listener tiers usually are assigned a single computer network address such as an interne protocol IP network address.

Referring now to this figure is a functional block diagram illustrating some software architecture for a wireless mobile hand held computer and an articulation engine according to one exemplary embodiment of the invention. The mobile hand held computer can support one or more computer modules such as the client process engine and a client application . In fact the wireless mobile hand held computer can support multiple client applications . Some client applications can include but are not limited to calendaring software email software spreadsheet software word processing software digital photography software graphical drafting software and other like software applications. For example one client application can include PACE software that is owned by the assignee of the invention and described in co pending U.S. patent application Ser. No. 10 421 639 entitled Systems and Methods for Providing Field Force Automation in Big Box Retail Environments filed Apr. 22 2003 the entire contents of which are hereby incorporated by reference.

The client process engine can further comprise a main client process engine module an encryption submodule a compression submodule a data access layer submodule and a data package layer submodule . The encryption submodule can encrypt data that is to be sent to the back end computer system as well as decrypt data that may be received from the back end computer system . The compression submodule can compress data that is to be sent to the back end computer system as well as uncompressing data that may be received from the back end computer system . Conventional compression and encryption algorithms known to one of ordinary skilled in the arts can be employed for the respective encryption submodule and compression submodule .

The data access layer submodule can process files that may be received from the back end computer system . Similarly the data package layer can organize the files that are to be transmitted from the mobile hand held computer to the back end computer system .

The client process engine works similar to the expression engine module . The expression engine will be described in further detail below. As the client application running on the wireless hand held computer captures data the client process engine is designed to collect and package any of this data that needs to be uploaded in the uploads file directory . The client process engine submodule uses the encryption module to encrypt any of the data as needed. The client process submodule also uses the compression module to compress data as needed. The overall function performed by the entire client process engine for uploads is transforming and staging data in the correct context that is understood by an articulation engine . For downloads the overall function performed by the entire client process engine is pushing out the received files to the right locations within the wireless hand held computer for use by the client application .

The mobile hand held computer through the client process engine submodule can maintain and prepare files that will be sent to the back end computer system in a upload files directory . Typically when the mobile hand held computer establishes a communication fink with an articulation engine the files in the upload directory are usually sent to the articulation engine first. After all the files have been uploaded from the upload file directory to the articulation engine the mobile hand held computer then can receive files for downloading into the download files directory from the articulation engine of the middleware system .

The upload files directory can contain several different types of files that are to be sent to the articulation engine and ultimately the back end computer system . In the upload files directory the mobile hand held computer can maintain its unique identifier the file registry that lists all of the files contained in the uploads files directory a health indicator A and one or more data files . The health indicator can be used by the articulation engine in order to determine if the mobile hand held computer is in a satisfactory or healthy state.

The statement of health indicator can comprise any type of file such as a time stamped file. However other types of files are not beyond the invention. According to one exemplary embodiment the type or content of the health indicator is not important rather it s presence or lack thereof is how the articulation engine can determine if a particular mobile hand held computer is in a healthy state. A healthy state can mean that the wireless mobile hand held computer is functional and did not encounter any problems with the application software that may be running on the wireless mobile hand held computer .

As noted above the file registry can be created and updated to reflect every file that may be present in the upload directory . This file registry can be one of the first files that the articulation engine reviews and forwards on to the expression engine in order to determine what files in the upload directory may be needed or desired by the expression engine . After reviewing a particular file registry against a file registry B that is maintained by the expression engine the expression engine can request the articulation engine to initiate an upload for particular files that the expression engine has not received from a previous communication link with the mobile hand held computer .

The file registry A maintained by the mobile hand held computer can also indicate what files the mobile hand held computer has received from the articulation engine and ultimately the expression engine . The expression engine can also determine what files may be needed by the mobile hand held computer after comparing the file registry A sent by the mobile hand held computer with the file registry B that is maintained by the expression engine. By comparing the file registry A that is maintained by the mobile hand held computer with the file registry B maintained by the expression engine any unnecessary and duplicate uploads and downloads of files can be eliminated. This in turn can reduce the duration of downloads from the middleware system to the wireless hand held computer and the duration of uploads from the mobile hand held computer to the middleware system during a communication link .

The data files that can be uploaded to or downloaded from the articulation engine can comprise files that can be used by the client application software . In addition to data files that can be used by the client application software running on the mobile hand held computer the download files directory can also manage downloaded executable files that may comprise additional client application software or one or more updates to existing client application software running on the mobile hand held computer .

Each data file can comprise a service identifier A a file name A and a payload identifier A. The service identifier A can refer to one or more software services that handle specific file types as will be discussed in further detail below in . The file name A can identify a data file with a unique file name as well as with a unique file extension .

The inventive middleware system places an emphasis on file extensions as a tool for managing and processing files quickly and efficiently. The file extension typically comprises three alpha numeric characters that are readily known to one of ordinary skilled in the art. For example XML files can utilize the .xml file extension while a message or text based file can utilize the .msg . Other file extensions to indicate various types of files such as J PEG files bit map files video files and the like are known to one of ordinary skilled in the art.

The invention is not limited to any specific three character file extension and new extensions can be created and used as different client application will permit. Further it is contemplated that longer file extensions greater than three characters may be used in the future as permitted by client application software running on the mobile hand held computer . A further description of how the file extensions are used by the inventive middleware system to increase processing speed of filed both during and after a communication link is further described below with respect to .

As previously indicated one of the first files uploaded or transferred from the mobile hand held computer to the articulation engine is the statement of health indicator A. If the statement of health indicator A is not detected by the articulation engine this can trigger the articulation engine to download larger application software files such as executable client applications to the mobile hand held computer so that the mobile hand held computer can be rebuilt or re booted. If the statement of health indicator A is detected by the articulation engine then the articulation engine will not download any large application software to the mobile hand held computer unless the large application software is an update that the wireless hand held computer may not already have in its possession.

The statement of health indicator A can usually be detected by the articulation engine and the deleted just prior to an upload from the wireless mobile hand held computer . A new health indicator or second health indicator B can be issued and sent to the wireless mobile hand held computer after a completed download of files from the articulation engine .

According to one exemplary aspect the inventive middleware system can receive upload files from a wireless mobile hand held computer even if a statement of health indicator A is not detected by the articulation engine . This exemplary feature can insure that any perishable data that may be generated by a wireless hand held computer that is not running correctly can be preserved by the middleware system .

Prior to receiving a new statement of health indicator B during a download of files from the articulation engine the wireless mobile hand held computer can receive a command file from the articulation engine . The command file can comprise one or more commands and relative paths for previous data files that may be downloaded to the mobile wireless hand held computer from the articulation engine . The command file can be executed by the wireless mobile hand held computer after all the files from the articulation engine have been downloaded to the mobile hand held computer .

The mobile hand held computer can further comprise a backup directory that can be used to store backup files for specific programs. For example the backup directory can comprise critical client executable files to support client applications that may be running on the mobile hand held computer . This backup directory can be very important when download files containing executable files are being transferred from the articulation engine to the mobile hand held computer . If an executable file is incorrectly downloaded or encounters an error while it is attempted for execution the mobile hand held computer can retrieve any critical client application software from the backup directory so that the mobile hand held computer can maintain itself in a functional state as it existed prior to a particular download from the articulation engine .

The critical files in the backup directory can be deleted if a communication link and execution of critical executable files are deemed successful by the mobile hand held computer . While the use of a file registry and organizing and processing data files by extensions can increase the efficiency and speed in which data is communicated between the articulation engine and the mobile hand held computer during a communication link the inventive middleware system can further comprise a communication layer link that can assist in the processing of uploaded files to and downloaded files from the articulation engine . Further details of the communication layer link will be described below with respect to .

The mobile hand held computer as illustrated in can be linked with the articulation engine . While a virtual connection between the mobile hand held computer and articulation engine is indicated with dashed arrows one of ordinary skill in the art recognizes that this virtual connection is not the same as the direct connection provided by the wireless communication link as illustrated in .

As noted above when a communication link is established it allows for the virtual connection as indicated by dashed arrows . The articulation engine typically receives files from the uploads directory of the mobile hand held computer . To communicate with the mobile hand held computer the articulation engine can comprise several different communication modules and support various types of protocols. For example the communication modules can comprise a first submodule A for handling HTTPS protocol a second submodule B for handling TCP IP protocol a third submodule for handling Global Systems for Mobile communications GSM type communications a fourth submodule D for handling code division multiple access CDMA protocols and a submodule E for processing radio frequency based LAN protocols such as the 802.11 type protocol.

In addition to the various types of communication protocols the articulation engine can further comprise a main articulation module that manages other submodules in addition to the communications submodule . The main articulation engine module can monitor and engage an encryption submodule a compression submodule a validation submodule and an authentication submodule . The encryption submodule and the compression submodule can be similar to the encryption submodule and compression submodule that are contained within the mobile hand held computer .

The validation submodule and the authentication submodule can manage and maintain a listing of unique IDs of hand held computers that are permitted access to the articulation engine and associated expression engine . As noted above the middleware system does not typically perform any rigorous authentication of the wireless mobile hand held computer . Instead the articulation engine and specifically the validate submodule and authenticate submodule of the articulation engine can authenticate a wireless hand held computer by comparing the wireless hand held computer identifier A that is unique to the wireless hand held computer and stored by the middleware system with the identifier that is submitted by the wireless hand held computer . If these two identifiers match the wireless mobile hand held computer can be authenticated by the articulation engine .

Specifically the authenticate submodule firsts determines if the wireless hand held computer identifier A should be granted access to the network at the network level. If the authenticate submodule grants access based on the wireless hand held computer identifier A the validate submodule then checks at the applications layer whether the wireless hand held computer is a known device. The validate submodule identifies the application context within which the expression engine understands the wireless hand held computer .

Referring now to this figure is a functional block diagram illustrating a communication layer link that resides on both the mobile hand held computer and the articulation engine . The communication layer link can increase the speed and efficiency of uploads and downloads between the mobile hand held computer and the articulation engine during a communication link . The communication layer link can adjust the size of upload files and download files that are transferred to the socket layer for communications between the wireless mobile hand held computer and the articulation engine .

Specifically the communication layer link can break a file into segments and feed it into the socket layer so that the socket layer can process the files of both a uniform and a smaller size. The communication layer link A can comprise a file data packet optimizer that can retrieve files from the upload directory and break these files into uniform groups of packets AA BB. These optimally sized packets of data AA BB can be fed into the socket layer that can establish the communication link between the mobile hand held computer and the articulation engine .

The socket layer has a check sum function that can guarantee that the packet for a particular file have been received by a particular end of the socket layer as known to one of ordinary skill in the art. By using the file data packet optimizer it is possible to stop an uploaded file at any point during the upload and then to restart the upload at the point in which the previous process of uploading was stopped. This also holds true for any files that may be downloaded through the socket layer because the articulation engine also has a communication layer link that optimizes the size of packets of the download files sent to the mobile hand held computer .

The file data packet optimizer can automatically adjust to the type of communication link established between the mobile hand held computer and the articulation engine . That is the file data packet optimizer can automatically identify the optimal size of packets for a wireless communication link as well as for a wired communication link in which there is a direct electrical connection between the mobile hand held computer and the articulation engine . It is recognized that on an occasion the user of a mobile hand held computer could have access to a wired link for communicating with the articulation engine instead of using a wireless connection.

In this wired context the file data packet optimizer can identify the appropriate size of packet data that can be sent through the socket layer in order to increase communication efficiency and speed between the mobile hand held computer and the articulation engine . Basically to one of ordinary skill in the art the file data packet optimizer of the communication layer link functions as a cashe for the socket layer .

In other words the file data packet optimizer can tune the size of file packets that are sent to the socket layer for optimal throughput and also to resume state for any file that is incompletely transmitted. Regarding the function of resuming state in instances where a file is not completely transmitted such as if the link is broken between the wireless hand held computer and the network it would be unnecessary to start at the beginning of that file after a first transmission of the file that may not comprise a complete transmission. Stated differently the file data packet optimizer allows check sum restart within file.

The file data packet optimizer according to one exemplary aspect can comprise a data management module that maintains a history of file state for upload and download files so that on subsequent connections in which a link is re established the file data packet optimizer can pick up transmission where it stopped previously. According to another exemplary aspect files sizes are kept at a minimum so that the file data packet optimizer can readily re start a second transmission of a file after a short break in a first transmission.

Referring now to this figure is a functional block diagram illustrating an articulation engine and further details of an expression engine according to one exemplary embodiment of the invention. The articulation engine can be coupled to a respective expression engine through a virtual connection as indicated by dashed arrows in . As noted previously the virtual connection as indicated by dashed arrows can be a connection that is established by a communication link between the articulation engine and the expression engine over the computer communications network as illustrated in . The expression engine can comprise several different computer modules such as a main expression engine module that can manage a hand held device configuration module a triage module and a distribution engine .

The triage module is responsible for managing any upload files received from a wireless mobile hand held computer that is associated with any respective articulation engine . Further details on how the triage upload module manages and processes the upload files received from the mobile hand held computer will be discussed in further detail below with respect to .

Another computer module managed by the main expression engine module is a distribution engine . A distribution engine is responsible for tracking the download files in a download directory that contains the files that are intended for a particular wireless mobile hand held computer . The distribution engine can further manage a list of registries that contain individual file histories for respective wireless hand held computers . Further details of the distribution engine will be described below with respect to .

The expression engine can further comprise the hand held device configuration module that can assist in managing and organizing the download files in download directory that may be assigned to a particular mobile hand held computer .

The distribution engine can comprise an API that has logic that understands the needs of the back end applications running on the back end server and expresses the needs to the download files module destined for each wireless hand held computer . Further details of the distribution engine will be described below in . The expression engine submodule can comprise logic to understand what data is destined for a particular wireless hand held computer . The expression engine submodule can also comprise logic that formats the data for the download files destined for a particular wireless hand held computer .

The expression engine submodule can also alert a particular wireless hand held computer that it has files to download for that wireless hand held computer based on a date and time the data is expressed out in the downloads files for transmission to each wireless hand held computer . The overall function performed by the entire expression engine module is transforming and staging data in the correct context that is understood by the device intended to receive the data which is either a wireless hand held computer or a back end server running specific back end applications.

The device configuration module is responsible for validation. The device configuration module checks the unique wireless hand held computer identifier A and determines the back end applications that are associated with that device. The device configuration module can comprise logic that determines how data should be sent to the wireless hand held computer . The configuration module can also track the version of software running on each wireless hand held computer .

Both the distribution engine and the triage module communicate with the back end logic that may exist above or adjacent to the back end computer systems . The back end logic residing in or adjacent to a back end computer system can identify download files that should be received by a particular mobile hand held computer .

The back end logic can determine how to package information as a download file that may acceptable to a mobile hand held computer and the module may also determine what types of users of mobile hand held computers may need specific information. The back end logic repackages information received from the back end computer system and distributes it to the distribution engine . Both the expression engine and the back end computer system can comprise large computer systems such as sequential query language servers SQL servers that can comprise one or more SQL files. The device configuration module through the expression engine can organize the mobile hand held computers by role by group by territory and any other fashion depending upon the needs or specific applications being executed on the back end computer system .

Referring now to this figure is a functional block diagram illustrating further details of an exemplary triage upload module . The triage upload module can comprise a main upload module that can manage a plurality of dual extension queues that are coupled with a double redundant services architecture . Further details of the dual extension queues and the double redundant services architecture will be discussed in further detail below with respect to .

The triage upload module can further comprise a list of file registries that it maintains for each respective mobile hand held computer . As noted above each file registry that is stored in the list of registry can be compared by the triage upload module with the file registry that may be uploaded from a respective mobile hand held computer . In this way the triage upload module can insure that duplicate files will not be uploaded from the mobile hand held computer . The triage upload main module can be coupled to a file upload directory . For each file in the upload directory the triage upload module can track the service identifier A the file name A the payload identifier A a connection date A and a status field A.

The triage upload module can be virtually connected to back end logic as indicated by the virtual connection indicated with dashed arrows in . The triage upload module can be written in the C computer language however one of ordinary skill in the art recognizes that other computer languages are not beyond the scope of the invention. The triage upload module through its services described below can send data to the back end logic over the computer communications network .

The overall function of the triage module is to allow the wireless hand held computer to end the wireless communication link as soon as practically possible. The triage module allows data from the wireless hand held computer to be driven down to the expression engine as quickly as possible during a communications link . The triage module is based on the concepts of CPU recruitment and parallelism through the use of file extensions in a very scaleable and durable manner.

Referring now to this figure is a functional block diagram illustrating further details of the dual extension queues and the double redundant services architecture according to an exemplary embodiment of the invention. illustrates one emphasis of the inventive middleware system in which the file extensions for data files are one of several key parameters that allow the inventive middleware system to increase processing speed and efficiency during a communication link in which a wireless mobile hand held computer can exchange data with the articulation engine and ultimately the expression engine .

For each file type that has a unique extension the triage upload module assigns each file extension at least or a minimum of two queues to store data as it is received by the triage upload module . Each of these queues A B can be serviced and processed by a redundant services architecture . The redundant services architecture basically comprises assigning two software services to a particular set of queues.

For example a first software service A can be designed to service a first queue A and the second queue B. Similarly a second software service B can be designed to service the first extension queue A and the second extension queue B. This means that the third software service C can also service the first extension queue A and the second extension queue B.

And lastly the fourth software service D can be coupled to the first extension queue A and the second extension queue B. In this way the redundant services architecture can have that at least four software services that will be processing a respective file extension queue . With this architecture the upload triage module is very flexible yet durable to handle a significant amount of data. Further the main triage upload module can run according to a set of rules in which if the main upload triage module does not understand a particular file type with a particular extension then it can instantiate or create a new extension queue and start placing files with the newly identified file extensions into their appropriate new queues .

The main triage upload module may be characterized as self configuring because it can determine if a particular file type with a particular extension is unknown. If a file type is unknown the triage upload module may then establish new queues and respective dual software services for processing the unknown file type.

Referring now to this figure is a functional block diagram illustrating further details of an exemplary distribution download module according to an exemplary embodiment of the invention. The distribution engine can comprise a main distribution module device logic a shell module a create queue a write queue an update queue a run load DLLs module and a customer application DLL service module and an anticipate application programming interface API .

The distribution engine can maintain a file registry B similar to the file registry A that may be maintained in a particular mobile hand held computer as discussed above. The file registry B can indicate what files are associated with a particular mobile hand held computer based on the unique identifier assigned to a particular mobile hand hand computer . The file registry B maintained by the distribution engine further provides the date and time A in which the files were created by the hand held device logic .

The handheld device logic determines how to route information that is being received by a reformatting module that is coupled to an anticipate application program interface API . The reformatting module provides logic that determines how to package and assemble download information as packages that can be handled by respective mobile hand held computers . The back end logic is coupled to the anticipate API through the virtual connection indicated by dashed arrows. The back end logic is instructed on how to take information from the back end computer system and feed it on a schedule to the anticipatory API . The anticipate API allows the reformat module to receive the information from the back end logic .

The hand held device logic routes the packages it receives from the reformat module to a download package file directory . The hand held device logic is used to anticipate what a particular hand held computer may need during a next communication link . The hand held device logic can identify which device may need a particular data package that is now maintained in the download directory and the hand held device logic can also identify which mobile computer has already received that package by reviewing the file registry . The hand held device logic can evaluate the dates and times of the files in order to determine when a particular mobile hand held computer received a file. In this way the hand held device logic can anticipate the needs of the mobile hand held computer .

The back end logic monitors the back end computer system for events or alternatively or concurrently at scheduled times once a minute once a day once a month it will retrieve data that is destined for one or more wireless hand held computers . The back end logic works through the anticipate API to access the shell . The shell manages the create queue module write module update queue run load DLLs module and custom app DLL service module . The create queue module is used to create a new queue for any new type of download file. The custom app DLL services module is dynamically linked library that is created to service one type of queue that is created by the create queue module. The shell uses the update queue to add new information to an existing queue if any new information becomes available from the back end logic . When shell is activated by the anticipate API the shell uses run load DLL module to activate a custom app DLL service to process a particular queue. The custom app DLL services are designed to process queues in order to express or format the data in the queues for downloads to specific wireless hand held computers .

By using the file registry monitoring the queues created by the shell and monitoring the dates and times of all files the distribution engine anticipates the needs of respective mobile hand held computers and only those files that have changed since the last time a particular mobile hand held computer was connected or flagged for delivery will be sent to the corresponding mobile hand held computer . As noted above increasing the efficiency of a communications link by determining which files need to be sent to a hand held computer prior to a communications link being established and while one is established can reduce the amount of time taken for a particular download to a hand held computer .

Referring now to this figure is logic flow diagram illustrating an exemplary method for uploading data from a mobile hand held computer to a back end computer system according to one exemplary embodiment of the invention. As noted above the upload process can be initiated by a hand held computer at set scheduled times during the day or by using predetermined intervals of a certain length. Further the upload process can also be initiated by the back end computer system if the back end computer system determines that a particular hand held computer needs a particular file or if the hand held computer has a file that is needed by the back end computer system . In this way by scheduling a communications link the middleware system can take advantage of a down time or off line time away from the hand held computer so that the system in an asynchronous manner can anticipate information that may need to be exchanged during a communications link.

The processes and operations of the middleware system described below with respect to all of the logic flow diagrams may include the manipulation of signals by a processor and the maintenance of these signals within data structures resident in one or more memory storage devices. For the purposes of this discussion a process can be generally conceived to be a sequence of computer executed steps leading to a desired result.

These steps usually require physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared or otherwise manipulated. It is convention for those skilled in the art to refer to representations of these signals as bits bytes words information elements symbols characters numbers points data entries objects images files or the like. It should be kept in mind however that these and similar terms are associated with appropriate physical quantities for computer operations and that these terms are merely conventional labels applied to physical quantities that exist within and during operation of the computer.

It should also be understood that manipulations within the computer are often referred to in terms such as listing creating adding calculating comparing moving receiving determining configuring identifying populating loading performing executing storing etc. that are often associated with manual operations performed by a human operator. The operations described herein can be machine operations performed in conjunction with various input provided by a human operator or user that interacts with the computer.

In addition it should be understood that the programs processes methods etc. described herein are not related or limited to any particular computer or apparatus. Rather various types of general purpose machines may be used with the following process in accordance with the teachings described herein.

The present invention may comprise a computer program or hardware or a combination thereof which embodies the functions described herein and illustrated in the appended flow charts. However it should be apparent that there could be many different ways of implementing the invention in computer programming or hardware design and the invention should not be construed as limited to any one set of computer program instructions.

Further a skilled programmer would be able to write such a computer program or identify the appropriate hardware circuits to implement the disclosed invention without difficulty based on the flow charts and associated description in the application text for example. Therefore disclosure of a particular set of program code instructions or detailed hardware devices is not considered necessary for an adequate understanding of how to make and use the invention. The inventive functionality of the claimed computer implemented processes will be explained in more detail in the following description in conjunction with the remaining Figures illustrating other process flows.

Further certain steps in the processes or process flow described in all of the logic flow diagrams below must naturally precede others for the present invention to function as described. However the present invention is not limited to the order of the steps described if such order or sequence does not alter the functionality of the present invention. That is it is recognized that some steps may be performed before after or in parallel other steps without departing from the scope and spirit of the present invention.

Referring again to step is the first step in the exemplary upload process . In step available articulation engines are identified by random selection. For example a mobile hand held computer can identify its corresponding articulation engine by randomly selecting a computer network address from a listing A of computer network addresses that are stored in the mobile hand held computer . This random selection can be used for the first selection meanwhile subsequent selections can be made in sequence or in an order that follows the initial or first random selection. However randomizing for every selection from the list of computer network addresses is not beyond the scope of the invention.

Next in decision step it is determined whether the selected articulation engine is available. If the inquiry to decision step is negative then the no branch is followed to step in which the next articulation engine can be selected from the list of available articulation engines that correspond to a particular mobile hand held computer . If the inquiry to decision step is positive then the yes branch is followed down to decision step .

In decision step an inquiry is made to determine if an expression engine is available for the selected articulation engine . If the inquiry to decision step is negative then the no branch is followed to step in which a next expression engine is selected in the list B that is stored in a respective articulation engine . If the inquiry to decision step is positive then the yes branch can be followed to step in which a connection message is sent to the mobile hand held computer .

In step the socket layer between the mobile hand held computer and the articulation engine may be initiated or become opened. Subsequently decision step reflects a periodic loop in which a selected articulation engine verifies that its connection with the expression engine is present. Decision step can be characterized as a heartbeat inquiry which means that this decision step is repeated over a very frequent time schedule in parallel with the execution of the subsequent or previous steps.

If the inquiry to decision step is no then the no branch is followed back to decision step . If the inquiry to decision step is yes then the yes branch is followed to step in which a request is made for the unique identifier A that is associated with a mobile hand held computer . In step the articulation engine can receive the registry of upload files that were formed by the mobile hand held computer just prior to a wireless link being established between the mobile hand held computer and the articulation engine . Next in step the articulation engine can receive a statement of health status indicator from a respective mobile hand held computer . Next in step the articulation engine can issue a command to the mobile hand held computer to delete its current statement of health indicator .

Next in step the expression engine can check its file registry B against the file registry A that is received from the mobile hand held computer . In step after the expression engine has determined what files it needs from the mobile hand held computer in step the expression engine requests the articulation engine to issue a request of the files that have not been received by the back end computer system .

Subsequently in step the articulation engine can receive files from the mobile hand held computer through a socket layer . Theses files are then processed with the double redundant queue service as described above with respect to . Next in step the files that are received by the articulation engine can be separately interrogated over the socket layer. In other words in step and referring briefly to the file data packet optimizer can identify the appropriate packet sizes in order to optimize the communications made over a communication link .

In step after each received file the articulation engine can issue a command to the mobile hand held computer to delete the file that was just uploaded to the articulation engine . In step the upload process ends and the download process of can be initiated.

Referring now to this figure is a logic flow diagram illustrating an exemplary method for communicating or downloading data from a back end computer system to a wireless hand held computer according to one exemplary embodiment of the invention. The first step in the method for downloading is decision step . In decision step the expression engine determines if the statement of help indicator is present on the mobile hand held computer . If the inquiry to decision step is negative then the no branch is followed to routine . During the client rebuild process the expression engine will start sending larger software application files such as client executable application files to the mobile hand held computer in order to make the mobile hand held computer operational or be placed in a state of operability.

If the inquiry to decision step is positive then the yes branch is followed to step in which the statement of help indicator is deleted from the mobile hand held computer . Subsequently in step the expression engine forwards files associated with the unique identifier of the mobile hand held computer . The articulation engine relays these files to the mobile hand held computer . Next in step the mobile hand held computer can receive the download files in a download directory .

Next in step the articulation engine sends a command file to the mobile hand held computer . As noted previously the command file can comprise one or more commands and relative paths toward the files that are downloaded to the wireless hand held computer from the articulation engine .

Later in step the mobile hand held computer can execute the command file. The execution of the command file can place the downloaded data files in their correction locations within the mobile hand held computer . Next in decision step it is determined whether a successful execution of the command file has occurred. If the inquiry to decision step is positive then the yes branch is followed to step in which a statement of health indicator is created and sent to the mobile hand held computer .

If the inquiry to decision step is negative then the no branch is followed in which the download process ends without a statement of health indicator being created and sent to the mobile hand held computer . In this way during the next communication link the expression engine will discover that the mobile hand held computer does not have a statement of health indicator and for the subsequent download it will initiate a reboot of the middleware system on the mobile hand held computer .

It should be understood that the foregoing relates only to illustrate the embodiments of the invention and that numerous changes may be made therein without departing from the scope and spirit of the invention as defined by the following claims.

