---

title: Preserving socket connections over a wireless network
abstract: A system, apparatus, and method for maintaining a socket connection over a wireless network. For example, one embodiment of the invention is a wireless data processing device for emulating a socket connection comprising: a wireless radio for establishing a wireless communication channel with a wireless service provider over a wireless network; a network protocol stack including at least one layer configured to establish a socket connection with a remote server over the wireless network, the network protocol stack further including an application layer for executing applications capable of transmitting and receiving data over the socket connection; and a resumable socket module configured to emulate an open socket connection transparently to applications within the application layer, even when the wireless communication channel is temporarily lost, the resumable socket module counting a number of bytes transmitted or to be transmitted to the remote server and maintaining a buffer containing the bytes transmitted or to be transmitted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07664067&OS=07664067&RS=07664067
owner: Microsoft Corporation
number: 07664067
owner_city: Redmond
owner_country: US
publication_date: 20051215
---
This application relates generally to the field of data processing systems and more particularly to maintaining a socket connection between a wireless device and a remote computer over a wireless network.

The set of network protocols which enable communication over the Internet is sometimes referred to as the TCP IP protocol suite after its two most well known protocols the Transmission Control Protocol TCP and the Internet Protocol IP . The TCP protocol which resides at the transport layer of the Internet protocol stack is a reliable connection oriented protocol which ensures that data arrives at its destination undamaged and in order. In addition the TCP layer continuously measures network load and throttles its sending rate in order to avoid overloading the network. The IP protocol performs the basic task of moving packets of data from source to destination using IP addresses. IP can carry data for a number of different higher level protocols each of which are identified by a unique IP Protocol Number.

In order to establish communication with a remote host on a TCP IP network a socket connection to the remote host must be established. A socket is defined by the combination of the IP address of the remote host and a port number identifying a remote application type. For example port is the standard port number for Hypertext Transport Protocol HTTP traffic and port packets are typically processed by a Web server.

A variety of wireless messaging and personal information management PIM devices have been introduced over the past few years including for example the T Mobile Sidekick II designed by the assignee of the present application. The TCP IP protocol is used by many of these devices to communicate over wireless networks e.g. the General Packet Radio Service GPRS used on GSM networks . Consequently in order to communicate with a remote host these devices must open and maintain a socket connection to the remote host in the same manner as wired computer systems e.g. PC desktops and notebooks .

One problem with this scenario is that due to the inherent unreliability of wireless networks wireless socket connections may not be suitable for certain types of applications. For example stream based applications such as Secure Shell SSH connections require a significant amount of initialization overhead in order to establish e.g. negotiating encryption variables user authentication data etc and must be maintained over a relatively long period of time i.e. in comparison to transaction based applications such as Web browsing . For these types of connections when a socket is closed e.g. due to an unreliable wireless network it is typically quite burdensome on the end user who loses all state information associated with the connection and must then take the time to reestablish the connection with the remote server.

Techniques are described for maintaining a socket connection over a wireless network. In one embodiment a wireless data processing device for emulating a socket connection may include a wireless radio for establishing a wireless communication channel with a wireless service provider over a wireless network a network protocol stack including at least one layer configured to establish a socket connection with a remote server over the wireless network the network protocol stack further including an application layer for executing applications capable of transmitting and receiving data over the socket connection and a resumable socket module configured to emulate an open socket connection transparently to applications within the application layer even when the wireless communication channel is temporarily lost the resumable socket module counting a number of bytes transmitted or to be transmitted to the remote server and maintaining a buffer containing the bytes transmitted or to be transmitted.

Throughout the description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances well known structures and devices are shown in block diagram form to avoid obscuring the underlying principles of the present invention.

Embodiments of the invention may be implemented on a wireless device which communicates with a data processing service as illustrated generally in . Embodiments of a service and data processing device are described in U.S. Pat. No. 6 721 804 entitled NPS AM Ser. No. 09 714 897 filed Nov. 15 2000 which is assigned to the assignee of the present application and which is incorporated herein by reference. Certain features of the service and an exemplary data processing device will now be described followed by a detailed description of a system and method for preserving socket connections over a wireless network. As an initial matter however it should be noted that the specific data processing device and system architecture described in U.S. Pat. No. 6 721 804 are not required for implementing the underlying principles of the invention. Rather the embodiments of the invention described below may be implemented on virtually any type of data processing device including standard personal computers personal digital assistants and wireless telephones.

In one embodiment the service converts standard applications and data into a format which each data processing device can properly interpret. Thus as illustrated in one embodiment of the service includes content conversion logic for processing requests for Internet content . More particularly the service acts as a proxy for the data processing device forwarding Internet requests to the appropriate Internet site on behalf of the data processing device receiving responses from the Internet site in a standard Internet format e.g. Web pages with embedded audio video and graphical content e mail messages with attachments . . . etc and converting the standard Internet responses into a format which the data processing device can process e.g. bytecodes as described in the co pending applications .

For example the conversion logic may include a hypertext markup language HTML rendering module not shown for interpreting HTML code and downloading any embedded content in the HTML code e.g. graphics video sound . . . etc to the service . The conversion logic may then combine the HTML code and embedded content and generate a set of bytecodes for accurately reproducing the requested content on the data processing device . As described above in one embodiment the bytecodes may be Java bytecodes applets. However the conversion logic may generate various other types of interpreted and or non interpreted code depending on the particular type of data processing device being used e.g. one with an interpreter module or one without .

Because one embodiment of the service maintains an intimate knowledge of the capabilities configuration of each data processing device e.g. screen size graphics audio capabilities available memory processing power user preferences . . . etc. it can reconstruct the requested Internet content accurately while at the same time minimizing the bandwidth required to transmit the content to the device . For example the conversion logic may perform pre scaling and color depth adjustments to the requested content so that it will be rendered properly within the data processing device s s display. In making these calculations the conversion may factor in the memory and processing power available on the data processing device . In addition the conversion logic may compress the requested content using a variety of compression techniques and thereby preserve network bandwidth.

Techniques for emulating an open socket connection when wireless connectivity is temporarily lost are described. As illustrated in in one embodiment a resumable socket module is configured above the TCP IP layer of the network protocol stack on the wireless device . In this embodiment the resumable socket module acts as an interface between the TCP IP layer and applications which employ network communication e.g. SSH clients Web browsers email clients etc . The client side protocol stack also includes a set of wireless network layers that support wireless communication at the data link physical tier of the OSI protocol stack e.g. GPRS GSM wireless network layers .

In one embodiment the resumable socket module coordinates with a corresponding service side resumable socket module at the data service to emulate an open socket connection even when wireless connectivity is temporarily lost illustrated in as a virtual socket connection . Specifically in one embodiment the resumable socket modules and on the wireless device and service respectively monitor the number of bytes transmitted and received between the application and remote server . Even when the wireless device loses network connectivity e.g. due to the user moving out of range the service maintains an open socket connection with the remote server on behalf of the user. In one embodiment the service maintains the open socket connection for a specified time period e.g. 5 minutes . If the wireless device reconnects to the wireless network within this specified time period the resumable socket module on the client and the resumable socket module on the service communicate with one another to synchronize the data transmitted received. Thus because the user s session with the remote server is preserved the user will not lose any session state information and will not be burdened with re connecting and re authenticating with the remote server.

In one embodiment the TCP IP layer is implemented using the Java Application Programming Interface API for TCP sockets. The resumable socket module then communicates with the TCP IP module by invoking methods via the Java sockets API. See e.g. Calvert TCP IP Sockets in Java Practical Guide for Programmers Morgan Kaufmann 2002 for additional detail related to Java TCP socket implementations. It should be noted however that the particular type of program code used within the network stack is not pertinent to the underlying principles of the invention.

In addition in one embodiment retransmission buffers and are maintained by each of the resumable socket modules and respectively. The retransmission buffers and may be implemented as predefined regions in memory which store a specified number of bytes transmitted from resumable socket module and resumable socket module respectively e.g. 32 kBytes 16 kBytes etc . This allows the resumable socket modules and to transmit the bytes stored therein in the event that the wireless connectivity of the wireless device is temporarily lost.

At the resumable socket modules on the wireless device and the service begin counting the number of bytes transmitted and received over the new socket connection and temporarily buffering the bytes transmitted. As mentioned above this may be accomplished via counter modules and and retransmission buffers and . At the wireless device loses it s connection to the wireless network. Nonetheless at this stage the resumable socket module on the wireless device emulates an open socket connection with the network application on the wireless device and the resumable socket module on the service maintains the open socket connection with the remote server on behalf of the wireless device . Thus the socket connection is preserved notwithstanding the fact that the wireless network is temporarily unavailable.

As mentioned above in one embodiment the service maintains the open socket connection for a specified period of time e.g. 5 minutes . If wireless connectivity is not reestablished with the wireless device during that period of time determined at then at the socket connection with the remote server is closed and the counter values and the raw data stored within the buffers within the resumable socket modules is cleared.

If however the device s wireless connectivity is reestablished with the specified period of time then at the resumable socket modules and communicate to identify the data that needs to be re transmitted from each of the retransmission buffers and respectively and synchronize this data at . For example in one embodiment the resumable socket module on the wireless device sends a message to the resumable socket module on the service indicating the number of the last incoming byte that it received. The resumable socket module on the service then transmits those bytes yet to be received by the resumable socket module on the wireless device. For example if the resumable socket module on the wireless device indicates that the last byte that it received is byte and the outgoing byte number stored within the outgoing counter on the service is as illustrated in then the resumable socket module transmits bytes to from the retransmission buffer . Alternatively in one embodiment the resumable socket module on the service may first transmit an indication that the outgoing byte number stored in its outgoing counter is . In response the resumable socket module on the wireless device may request byte s through from the resumable socket module on the service which resumable socket module will then transmit. Various alternate additional synchronization mechanisms may be employed while still complying with the underlying principles of the invention.

The resumable socket module on the service may be brought up to date in the same manner as described above. For example if the resumable socket module on the service indicates that the last byte that it received is byte and the outgoing byte number stored within the outgoing counter on the wireless device is then the resumable socket module transmits bytes through from its retransmission buffer .

In one embodiment of the invention described above the resumable socket module appears as a normal TCP connection to the application i.e. providing the same API as a standard TCP connection. As a result these embodiments are implemented transparently to existing applications i.e. without the need to modify the existing application and or the socket API . When the underlying i.e. real TCP connection is broken the application simply sees that no data has arrived for a period of time and outgoing data is stored temporarily within the retransmission buffer. After the device reconnects to the wireless network the application will see incoming data arriving again. If the device is not able to reconnect the application simply sees the socket disconnected i.e. a few minutes after it actually happened .

Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine executable instructions which cause a general purpose or special purpose processor to perform certain steps. Alternatively these steps may be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Elements of the present invention may also be provided as a machine readable medium for storing the machine executable instructions. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnetic or optical cards or other type of media machine readable medium suitable for storing electronic instructions. The present invention may be downloaded as a computer program which may be transferred from a remote computer e.g. a server to a requesting computer e.g. a client via a communication link e.g. a modem or network connection .

Throughout the foregoing description for the purposes of explanation numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without some of these specific details. For example although the embodiments described above are limited to a wireless implementation the underlying principles of the invention may be employed in a variety of different types of networks. Similarly while the protocol stack described above is implemented using Java the underlying principles of the invention are not limited to any particular programming language.

