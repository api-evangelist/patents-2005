---

title: Source switching of virtual machines
abstract: Stitching a proxied connection between a first core virtual machine (VM) and a second core VM is disclosed. Stitching includes determining that a stitched connection should be generated between the first core VM and the second core VM and generating the stitched connection between the first core VM and the second core VM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08572605&OS=08572605&RS=08572605
owner: Azul Systems, Inc.
number: 08572605
owner_city: Sunnyvale
owner_country: US
publication_date: 20050428
---
In many computing environments information may be passed from one device to another typically more powerful device to perform certain computing tasks such as processing storage or communication. Such information may include processes data functions or any other information that consumes computing resources. Information may be sent in packet form or in some other type of data stream in various applications. For example a virtual machine VM may be segmented into two segments a shell VM and a core VM. Function calls to the shell VM may be passed to the core VM for processing. Segmented virtual machines are further described in U.S. patent application Ser. No. 10 378 061 entitled SEGMENTED VIRTUAL MACHINE which is incorporated herein by reference for all purposes.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer readable medium such as a computer readable storage medium or a computer network wherein program instructions are sent over optical or electronic communication links In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Shell VM and core VM communicate over path . Shell VM and shell VM communicate over path . Shell VM and core VM communicate over path . Communication over paths could be via TCP IP UDP or any other communication protocol. Each of paths could include one or more channels. Multiple channels could be multiplexed onto one path. For example a channel could carry a network socket connection external file descriptor communication or a TCP IP connection. In some embodiments there is more than one path between core VM and shell VM shell VM and shell VM and or shell VM and core VM . In some embodiments each core VM includes a backend core VM and a conduit for terminating a TCP IP connection. The conduit can perform any of the processes associated with source switching.

Core VM and core VM interact with other members of matching scope . In some embodiments a conduit on core VM and a conduit on core VM interact with devices in matching scope . Matching scope is a set of applications core VMs and or core devices e.g. hosts that are allowed to be source switched to each other. Source switching refers to the fact that the source in this case the core VM can identify and determine when a connection can be switched to a stitched connection . In this example matching scope includes core VM and core VM . The members of matching scope may be designated by a policy. Multiple matching scopes may exist where each matching scope is controlled by a policy. Multiple matching scopes can exist in one device.

Shell VM core VM shell VM and core VM may reside on any number of physical devices i.e. hardware . For example core VM and core VM could reside on the same core device while shell VM and shell VM could reside on the same or separate shell device s . Shell VM core VM shell VM and core VM could all reside on the same device.

In some embodiments system is part of an application server cluster in which multiple instances of the same application run on multiple hosts e.g. segmented VMs . The hosts communicate which each other frequently to synchronize state. In some embodiments system is part of a messaging bus in which multiple applications communicate with each other through a hub such as a Java Messaging Service JMS hub. The applications could run on multiple segmented VMs with high messaging traffic between the segmented VMs.

A centralized or peer to peer method can be used to identify when a stitch can be made. In the centralized case a matching server not shown interacts with the core VMs in matching scope . The matching server can identify when a stitched connection between two core VMs in matching scope can be made and coordinate the stitching process as more fully described below. In the peer to peer case a core VM or conduit on the core VM can identify when a stitched connection between two core VMs in matching scope can be made as more fully described below.

A connection description could be published which includes a connection identifier such as a TCP 4 tuple or 5 tuple. For example the connection description could include a source address source port destination address and destination port. The addresses could be IP addresses or any addresses associated with any other communication protocol. The connection description could include the age of the connection. For example in system core VM and core VM could each publish its connection descriptions to matching scope .

A match is detected . A match is detected when one connection description is symmetric to another connection description. In other words the source of one connection description is the destination of the other connection description and vice versa. For example core VM publishes a connection description with source address A source port B destination address C and destination port D A B C D . Core VM publishes a connection description with source address C source port D destination address A and destination port B C D A B . A match would be detected between these two connection descriptions since they are symmetric.

The detection can be centralized or peer to peer detection. In the peer to peer case a core VM within matching scope detects the match. In the centralized case a matching server monitors the published messages e.g. connection descriptions sent from members of matching scope . When the matching server detects a match between two connection descriptions it notifies one of the core VMs. The core VM detects a match based on the notification.

It is determined that a stitched connection corresponding to the match does not already exist . If it is determined there is not already a stitched connection to the other core VM a stitched connection is generated as more fully described below. All new data is sent over the stitched connection .

In some embodiments stitched connections are multiplexed within paths between cores similar to how connections can be multiplexed within paths between the shell and the core.

In some embodiments is performed by one core VM and is performed by the other core VM. For example in the case of system either core VM or core VM can initiate the stitch. In some embodiments is performed by one core VM and that core VM is selected based on a policy. For example the policy could be such that the core VM whose message contains a lower global identifier number is the one that initiates the stitch.

In some embodiments stitching is directed by applications through an application programming interface API that allows applications to control when to stitch and which connections to stitch. Such an API can also perform match detection. The applications could communicate between themselves decide to stitch a connection and instruct the VMs to stitch using an API without having to perform a publishing and matching mechanism. A predetermined configuration or agreement could be used so that no additional communication is necessary. For example fixed pre configured ports could be stitched.

In this example local core VM refers to the core VM performing this process. For example core VM could perform this process to drain data in transit from core VM to core VM . In this case core VM is the local core VM and core VM is the other core VM . Likewise core VM could perform this process to drain data in transit from core VM to core VM in which case core VM is the local core VM and core VM is the other core VM . In this example messages between the two VMs contain sequence numbers. A sequence number can be a message count byte number byte count or any other number that can be used to determine whether a connection is drained.

Process includes two parallel processes process and process . In process a last received sequence number is sent to the other core VM. The message could be sent over the stitched connection or over the original connection. For example in system the message could be sent over path or over stitched connection . The message could be acknowledgement ACK message containing the sequence number. In process a last received sequence number is received from the other core VM. i.e. the local core VM receives the message sent from the other core VM in . It is determined whether the last received sequence number is the last sent sequence number . For example the local core VM could maintain a record of the messages it has sent and make the determination based on the record. In some embodiments each core VM maintains the sequence number last sent and the sequence number last received. In some embodiments each core VM maintains a record of the messages that have been sent or received since the channel started.

If it is determined that the last received sequence number is the last sent sequence number the data in transit from the local core VM to the other core VM has been drained. A notification that the drain process is complete in the direction from the local core VM to the other core VM is sent to the other core VM. If the last received sequence number is not equal to the last sent sequence number more data is still in transit in the direction from the local core VM to the other core VM. The process returns to in which another received sequence number is received.

Returning to the process it is determined whether a notification that the drain process is complete is received from the other core VM. i.e. it is determined whether the local core VM receives a notification sent from the other core VM in . If such a message is received then the drain process is complete in the direction from the local core VM to the other core VM. Otherwise more data is still in transit in this direction. Data is received from the current connection from the other core VM. The process returns to in which the last received sequence number from the received message is sent to the other core VM. In some embodiments if data is not received in and or after a certain time interval the process ends and it is assumed that the drain process is complete.

In the case of an unreliable connection such as UDP there are other approaches that can be taken to drain the connection. There can be a stand off period during which no data is sent over the connection. After the stand off period expires it is assumed that the connection has been drained. For example the stand off period can be selected such that it is highly likely that any data sent before the stand off began is received by the time the stand off period expires. Alternatively all received messages containing a sequence number less than a certain sequence number can be dropped.

In some embodiments once the stitched connection is in use the original connection e.g. path is terminated. In some embodiments the original connection is maintained. For example periodically a heartbeat message can be sent over the original connection and an acknowledgement sent in response. In the event that the original connection is terminated the stitched connection is also terminated. For example one of the proxies shell VMs could terminate or a firewall could be inserted in path . To the application running on the VM the stitched connection behaves more like the original connection in this way thereby improving the transparency of the stitched connection.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

