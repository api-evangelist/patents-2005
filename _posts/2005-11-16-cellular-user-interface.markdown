---

title: Cellular user interface
abstract: Configurations for a cellular user interface are provided. In one embodiment, a client configuration includes a viewer and a content development kit. A content server distributes cellularized content among several client viewers. Connectors in a scheduled configuration regularly acquire updated content from data sources. An integration server interfaces between the connectors and the content server for distributing content. A monitoring agent assists with content updating upon detecting source changes. A registration server enables cell content update in client viewers through the content server. Cells in the cellularized environment include a visual proxy component and a metadata component. The visual proxy component can be configured for displaying different content at various levels of detail. The metadata component enables intelligent organization and display of content through queries, channels, and data updates. In addition, procedural geometry in the cellularized environment automates the content presentation and provides a flexible arrangement of the cells.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08001476&OS=08001476&RS=08001476
owner: Open Text Inc.
number: 08001476
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20051116
---
This application claims priority to U.S. Provisional Patent Application Ser. No. 60 628 939 titled Interactive Content Development Management and Presentation and filed on Nov. 16 2004 which is incorporated herein by reference. This application is related to co pending U.S. patent application Ser. No. 11 281 924 titled Spatially Driven Content Presentation in a Cellular Environment by Anthony Gallo and Jimmy Talbot which is incorporated herein by reference.

The present invention relates generally to graphical user interfaces for computing devices and more particularly to a cellularized graphical user interface.

Conventional graphical user interfaces GUIs of computer software applications are typically a result of interaction between the software application and the underlying operating system OS of the machine in which the application is run. The OS provides mechanisms for applications to display information to the user through a hardware display. For example in Microsoft Windows based computer systems applications interact with the Windows application programming interface API to display application output to a screen using OS window display elements e.g. windows buttons menus and the like.

Using this conventional approach the microprocessor s in the computer system executes application code to produce application related results and additionally executes OS operations to generate display elements in which to place the application output. The microprocessor executes software instructions to generate the output graphics and sends them to the graphics hardware for display on the computer monitor or screen. Accordingly conventional graphical user interfaces require significant computing resources to generate and display the output graphics associated with applications. In addition the microprocessor is also tasked with executing the application functional code to produce the results that are then displayed.

These conventional GUI processes greatly reduce the processing speed for both the display of output graphics and the execution of the application functional code. This slowdown is most noticeable when multiple applications are executing simultaneously in a multi tasking computer system. The OS generated output windows for each of the active applications are being generated and refreshed through processes executing in the same microprocessor s that are executing all the functional code of the active applications. As the limits in the computing resources of the system are reached the graphical display in the computer monitor shows the performance degradation by failing to properly refresh window content creating ghost windows failing to respond to user commands and the like.

This type of performance degradation is most noticeable when multiple applications are executed that generate multi media graphics rich output data. For example digital photo or video software applications e.g. video feeds movies or the like consume much of the microprocessor computing resources and typically cause window operations such as minimizing resizing and the like to lag from the time the user input is received by the OS. Accordingly it is desirable to provide a mechanism for the display of multiple output graphics offloading the output generation from the main processor.

In addition conventional GUIs do not provide functional interactions with the display windows based on content relationships between the windows of different applications. Each application through the OS API generally controls the display of its user interface independently from other applications. The user may interact with the OS to physically move or resize windows within the display area of the monitor s but there is no mechanism provided in the OS or otherwise to exploit relationships between content being displayed in different windows from independent applications. It would be desirable to enable users to intuitively interact with displayed content by exploiting content relationships regardless of the source application responsible for generating the content.

The problems resulting from the current inability of conventional user interfaces to support management of the user interface environment in response to content relationships between different applications become particularly acute in enterprises that utilize many different sources of data and applications to make business analytical financial emergency health or other types of complex decisions. For example it is not unusual for a business to have multiple different databases managing its inventory accounting sales manufacturing and technical support systems as well as completely unrelated applications for accessing such data. A user in such an enterprise will typically have open on his or her computer numerous different ones of these applications while attempting to make business decisions. Conventional operating systems such as Windows leave it entirely to the user s own capabilities and decisions to manage where to place the windows for these applications on the screen which ones to attend to and how reorganize or reconfigure the application windows in response to changing information. For example if the user is responsible to update a sales report in response to increases in sales data the user must monitors sales database in one window and when the sales data reaches a certain threshold manually select a reporting application window to update a report.

Accordingly what is needed is a user centric graphical user interface that leverages processing capabilities of the graphics hardware and off system image pre preprocessing to offload some of the graphics display processing from the microprocessor in the user s device and provides application and hardware independent functionality for content driven organization and presentation of content to the user.

A cellularized user interface is a user centric and content driven graphical user interface that organizes and presents content for a user. The content presentation is independent from the underlying content producing applications and from the operating system and hardware providing the display. The cellularized user interface renders visual representations of content in an environment made up of cells. Each cell includes an associated visual proxy component and a content information component. The content information component enables intelligent cell interaction to provide a highly flexible and dynamic content presentation adaptable to user needs and preferences. The cellular user interface is user centric because it responds to user actions by passively deriving user preferences and needs. The cellularized user interface is also content driven because any cell or groups of cells can programmatically respond to content events and relationships within and between other cells in the user interface environment.

A graphical user interface is provided for interfacing between applications and data sources on the on hand and the operating system on the other to display graphical representations of data content from multiple data sources. The graphical user interface includes display cells arranged in a predetermined pattern or patterns. Each cell includes a visual proxy component configured to display a graphical representation of content associated with a data source and a metadata component for providing descriptive information associated with the content.

A method is provided for displaying data content from data sources on a graphical user interface. The graphical user interface acts as an intermediary between the data sources and applications and an operating system. The method includes associating an output of a data source with a cell generating connector. A visual proxy for a content output from the data source is rendered for associating with a cell. Metadata associated with the cell is generated including information descriptive of the content. The cell is then provided to a viewer application and displayed in a cellularized environment of a user.

The features and advantages described in the specification are not all inclusive and in particular many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter.

The Figures and the following description describe various embodiments of the present invention by way of illustration only. It should be noted that from the following discussion alternative embodiments of the structures and methods disclosed herein will be readily recognized as viable alternatives that may be employed without departing from the principles of the claimed invention.

In order to best explain the features and benefits of the cellularized user interface an example application will now be described. It will be appreciated that this example is merely illustrative of different implementations of the cellularized user interface and not therefore limiting of the scope of the invention.

The cellular environment organizes and displays content in a set of cells for a user. In the example shown in the content is situational awareness information derived from multiple sources intended for the management of a city s command and control center. Thus for example cell displays a visual representation of a Doppler radar image with weather information for the city with the radar image data being obtained in near real time from a weather data source such as the National Weather Service. Cell displays a visual representation of a video of a traffic and security camera in an intersection taken as a live data feed from remotely located traffic and security cameras. Cell displays a visual representation of the status of a sewer reconstruction project in the city with the data being taken from a legacy database system that manages municipal construction information. Other cells display visual representations of additional situational awareness content such as traffic fire and police reports.

Each of these cells receives its data from the particular legacy data repository and application used by the respective agency e.g. fire department police department . The content being displayed through the visual representations of the cells is generated by a plurality of applications. Thus the weather map of cell may be generated by a satellite imaging application the traffic video of cell may be generated by a video feed application and the textual content of cell may be generated by a database interface application. The cellularized environment integrates the data content from multiple sources and multiple different applications and displays it in a unified GUI.

Of particular note is that none of the underlying data sources or applications needs to be specifically modified to cooperate with the cellularized user interface. In conventional operating system based user interfaces each application is responsible for and manages the contents and location of its windows and other user interface representations. By contrast in the cellularized user interface as illustrated each application and data source operates in its own native manner and need not have any particular application interface or programmatic awareness of the other data sources or applications or even of the cellularized user interface itself. Instead the cellularized user interface environment including the cells themselves manages the visual representations of content in the cells.

More particularly underlying metadata associated with the cells is used in the cellular environment to organize the location of cells and inter relate their content. For example upon a user s selection of a cell showing the weather forecast for a particular day a selection of the other cells automatically modify their displayed content to show the calendar of events for that day images from cameras in locations where those events will take place recent reports of traffic fire and criminal activity in those areas and the like. Similarly cells can automatically respond to changes in the content of other cells even without any user input at all. Thus if a cell reporting police events outputs a report of a new police report of a robbery at a particular address then the security and traffic camera cells can automatically respond by switching to a video feed of the respective cameras closest to such address. The particular arrangement size orientation of the cells or any of them can also dynamically respond to user inputs or changes in cell content.

The cellular environment also called world or user experience may be configured in any number of geometrical shapes. As shown in cells are displayed in a dashboard like display with a semi circular arrangement along the bottom of the environment along with a wall of cells of various sizes thereby creating the appearance of a virtual control room. A navigational menu provides interaction for users to modify the view point into the environment. Other geometrical arrangements can be provided for different environments.

A cellularized environment architecture is shown in . The cellularized environment includes a cellularized environment definition and cell architecture definition with configuration information for a viewer application to properly display and allow user interaction with the environment and cells .

The definitions of the environment may be implemented in multiple forms. For example the definition for each the components may include sets of keyword value pairs. For example environment definitions can be expressed as a set of extensible markup language XML tags that may be interpreted by a viewer application . The keywords are XML tags with the values enclosed within the tag marks e.g. value . As is conventional in markup languages tags may include associated parameters. One example embodiment using XML to describe the cellular environment is further described below.

The cellularized environment definition includes a geometry definition with a set of geometric properties that define the display locations of the cells . These geometric properties include information about the display locations in which a cell may be displayed within the environment . For example a cellularized environment definition may include a number of columns number of cells per column and the relationship of each cell with respect to the center of the geometry. Accordingly each cell to be displayed within the cellularized environment may be assigned a relationship to the geometry s origin or center that may be maintained during display.

The geometry definition provides the general mathematical relationships between cell locations to define a geometric configuration or shape. The mathematical relationships are used to maintain the defined shape as the views into the environment change. For example geometry definitions may define circular shapes spherical shapes cubical shapes flat dashboard shapes cylindrical shapes toroidal shapes or the like. The geometric definitions allow each cell to be associated with a set of vertices of a polygon representing the cell location with respect to the origin of the geometry.

The cellularized environment definition may also include pre defined layouts in its geometry definitions . In one embodiment a user input e.g. hitting the Enter key clicking on layout button cell selecting layout hyperlink or the like is interpreted by the viewer application as a request to modify the current layout. In response the view being displayed is changed to one of a set of pre determined layouts associated with the cellularized environment. Layouts may be defined in the cellularized environment definition or otherwise programmed in association with a cellularized environment or world. The layouts may specify a view into the world e.g. a different face of a cube a section of a sphere a region of a dashboard or the like. Layouts may also specify a zoom level for the cells being displayed cell locations default values for cells and the like.

In addition layouts may include parameters to specify translation rotation and scaling of a cell sets of cells or world and environment display motion e.g. pan camera view and the like. In one embodiment a set of layouts are provided as quick views to a cellularized environment in an html viewer. A set of links in a section of the display e.g. toolbar describe the quick views and upon user selection cause the associated layout e.g. associated by the layout s key parameter to be implemented and displayed by the viewer application. Further the ability to dynamically transition between geometries and algorithmically vary the cell display location shape size orientation and the like with respect to each individual cell or groups of cells alike enables the dynamic generation of motion within the cellularized environment. Moreover leveraging the metadata component of the cells further described below the cell display and motion can be responsive to cell interactions between cells user actions and or content events.

With respect to the cell definition the visual proxy component includes one or more visual representations associated with each zoom state for a particular type of information. The visual representations at each zoom state provide simultaneous access to content from various underlying information sources via a uniform user interface. The visual representations are the visually displayed content of the cells in a cellularized user interface. The visual representation at a zoom state may be displayed via one or more cells.

The number of zoom states for any given cell may vary based on the type of information associated with the cell. For example a particular type of information such as information about current news stories is displayed via one or more visual representations at a single zoom state while additional visual representations . . . are provided for other types of information such as information about a company s stock. Generally the visual representations of a cell at its various levels of detail are related to each other based on the information content they represent. For example the information associated with different visual representations may include a common underlying topic or a common output mode such as video or audio.

The visual representations at various zoom states may be grouped together by a content designer using a Content Development Kit CDK by a user based on user defined criteria or by content events algorithmically related to the logical relationships of the information associated with the cell. The visual representations for a given cell may be grouped by providing a cell definition with associations to the various visual representations . These visual representations can be expressed for example with an XML tag such as with a set of associated parameters. The values for the associated parameters would identify resources or visual representations that can be set by the CDK or dynamically modified based on user or content events.

In addition to the visual proxy component the cell includes a metadata component . The metadata component includes a plurality of cell feature definitions . In one embodiment the cell feature definitions can be created or modified dynamically. A sample set of cell feature definitions is shown by way of example in . Fewer or additional cell feature definitions may be included in the metadata component depending on the cellularized environment design. The metadata component may be generated by a content designer through a CDK. Alternatively a template of the metadata component may be provided in a cell generation stencil. The stencil includes templates for multiple cells. In generating cells copies of the templates are populated with data from associated data sources as indicated in configuration files. Visual proxy components are similarly generated from templates or otherwise directly from the data as indicated in the configuration and stencil files.

The metadata component includes a query feature definition a zoom state feature definition a geometric properties feature definition an actionable feature definition a linking feature definition a communication interface feature definition and a content information feature definition among other feature definitions .

The query feature definition specifies one or more queries associated with the cell . Different queries can be provided for different levels of detail representations of the cell . The query definitions can be used as a source query for requesting additional information in response to a user action. The query definitions can also be used to establish relationships with other cells or to interact with display features of the cellular environment . For example in one embodiment of a financial data cellularized environment a cell query definition in a first cell may respond to a user selection of the cell by selecting via the query a set of cells or subcells with information related a business entity represented by the cell . The selected set of subcells includes a current stock price subcell a current news subcell a latest corporate filing subcell and the like each of these would take their data from respective data sources and applications.

The zoom state feature definition provides instructions to a viewer application for associating user indications of display proximity with cell behavior. The instructions specify which visual representation in the visual proxy component to display based on the zoom state at which the cell is being displayed. In addition the instructions may also provide associations between zoom states and cell behavior such as functional relationships hyperlinks recursive presentations of additional cells i.e. subcells worlds or the like. A viewer application is capable of resolving these instructions to display associated visual representations and to implement the indicated behavior. Further description of these features is included in co pending U.S. patent application Ser. No. 11 281 924 titled Spatially Driven Content Presentation in a Cellular Environment referenced above.

The geometric properties feature definition includes information about the cell s shape size display location and the like. The cell s shape includes information describing characteristics particular to the cell as compared to other cells . For example the cell s shape may vary to adopt the shape of the content it displays. The cell s size includes the cell s relationship to the space allocated for display within the environment geometry. For example one cell may only occupy half the size of the space allocated for it. The display location of the cell includes its location within the cellularized environment . For example as shown above an XML description of a cell may include row and col parameters to specify the cell s location in a dashboard.

The actionable feature definition of the cell includes information about the response the viewer application provides with respect to user actions associated with the cell . User actions include activations of cells by the user for example clicking on cell. For example in one embodiment a cell is designated as a layout modifying cell and its actionable feature definition provides a layout change of the cellularized environment upon user activation. This may be accomplished by providing to the viewer the information shown above for a sphere to map a dashboard having the same number of rows and columns. Each cell definition indicates its row and column location and can easily be mapped to the new geometry.

For the actionable feature definition there is a very wide range of responses the viewer application may provide including generating additional cells i.e. subcells or additional worlds modifying environment display properties generating groups of related cells activating an underlying application hyperlinking to a web page or other remote cells and the like. For example the actionable feature definition may be indicated in XML as the tag which as shown above may include a hyperlink type and a url parameter to indicate the URL of an html page to display upon activation.

The cell actionable feature definition may be associated with functionality available from applications from which content is being displayed in the cellularized environment . For example a cell may be associated with multimedia display applications e.g. a media player to activate an application control function e.g. play upon activation of the cell by a user. In this fashion a set of cells may be configured to behave as control display elements for an underlying application. Alternatively a set of cells may be used as browse command buttons for an underlying web browser application text formatting buttons for a word processing application or the like.

Through this actionable feature definition the cellular user interface enables the integration of different types of applications and different types of data into a unified user interface. The cellularized display is application agnostic and can provide simultaneously in single user interface outputs from various applications and data sources. The cells display visual information from all these sources acting as an intermediary between the applications generating the output and the corresponding visual representations displayed to a user. This unified display of data from disparate and unrelated data sources enabled by the cellular user interface provides a powerful information management mechanism as for example shown in the emergency response cellular environment of .

The actionable feature definition can also include instructions associating a user action to the execution of a query. For example upon user activation of a cell a query is executed over the metadata of the cells in the cellular environment and matching cells are displayed in response. Accordingly there is some overlap between the actionable feature definition and the query feature definition . The query in the actionable feature definition may include metadata of the activated cell as the basis for the query or as the query itself . For example a user activation of a cell generates a layout change of the view into the cellular environment wherein the currently displayed cells are reorganized into a group of cells with related content. Groups of cells displayed in close proximity to each other with some relationship between the cells are called channels. A subset of the cells can be arranged into a channel based upon their metadata matching a query term extracted from the metadata of the activated cell

The communication interface feature definition includes information to enable the management of relationships between cells by communicating cell state information in distributed cellularized environments . For example the communication interface feature definition includes a unique cell locator or cell unique identifier UID similar to a universal resource locator URL for a web page which uniquely identifies a cell in a network. A communication server may manage a cell s state by propagating any changes made to states of the cell e.g. activation display location content edits and the like in one instance of the cell to all other instances of the same cell or to other cells in the distributed cellularized environment . In addition the communication interface feature definition may also include access right management information to provide different access rights to different users e.g. content designers end users and the like.

The metadata component may also include a content information feature definition . The metadata component may simply include the content information feature definition as the sole feature definition . The content information feature definition includes information about the content associated with the cell for example keywords descriptive of the content keyword value pairs of information and the like. The information about a cell s content can be used for organizing the cell display for querying the cell database and the like in order to provide application independent functionality for the display and delivery of content in the cells.

As a general matter the metadata component and visual proxy component of a cell can be made to depend on external inputs. The values for any of the parameters may be variables capable of changing and or linked to external inputs. Cells that include these external dependencies are proactive cells. Proactive cells react to user actions and or content events to update or modify their content. Proactive cells can periodically regenerate their content based on instructions in a cellular framework. For example one or more cells in an environment are associated with a data feed e.g. Real Simple Syndication RSS data feed Atom Syndication Format Atom data feed or the like. Responsive to changes in the data feed the cells dynamically regenerate their content and information to provide an updated result. The cell regeneration takes place as indicated in the assembly model or frameworks and may be modified based on user credentials to customize the resulting cellularized environment .

Now referring to a high level diagram of a cellular environment object model of an XML implementation is shown. The Object Model OM is an API for XML documents that describe the cellular environments or worlds. The OM shows all objects in the cellular environment worlds layouts cells frames and resources as structured groups of program objects that can be scripted to. It should be noted that any subset or different set of objects can be similarly defined within the scope of the present invention. The structure and content of the worlds can be expressed in XML and the interaction model or behavior of a world can be expressed in Java JavaScript C or any other computer language or functional scripting tool.

With respect to the OM shown in the World object is the root object of the cellularized environment definition . The World object is composed of layout objects frame objects and cells . An example of a scriptable property of the World object includes an active Layout selection function e.g. activeLayout function. Examples of methods for this object may include methods for switching active layouts from one layout to another e.g. switchLayout function and for retrieving cells associated with the World object e.g. getCellbyID function.

Layout objects represent the positions of the frames of cells in the world and the geometry environments e.g. a sphere a room or a dashboard that they are mapped to. Some scriptable properties for layout objects include a layout ID the world it is associated with whether it is two dimensional e.g. 2D True and the geometry of environment the it is associated with. One example of a method for the layout object includes the execution or implementation of the layout e.g. a doLayout function.

In a simplified version of the cellular environment frame objects can be used to define the position of a cell in the world . The frame objects are part of the information descriptive of the cell i.e. geometric properties of the cell . Frame objects have position properties but do not represent actual content of the cell . As further described below multiple other objects can be included to describe the properties of a cell . The position information of a frame object can be scripted to allow for dynamic variations. Some examples of scriptable properties of frame objects include a frame ID and its associated cell ID. Some examples of methods associated with frame objects include whether its position is locked e.g. lock whether the can be dragged by a user e.g. canDrag whether it can be selected by a user e.g. canSelect whether a user can zoom into it e.g. canZoom and actual position changing functions such as move resize and the like.

In this OM a cell object is a unit of content in the cellular environment . Cells are comprised of multiple resources e.g. feature definitions and or visual proxy components like for example HTML images video and the like . For example a single cell can contain multiple images for different zoom state levels. Some scriptable properties of cells include cell IDs current zoom state level visual proxy component queries and the like. Some methods associated with cell objects include getting particular resources e.g. getResource setting particular resources for display e.g. setResource and the like.

In one embodiment the cellularized environment architecture may be implemented in XML. One example of an XML implementation includes a world description file with a .viz file extension the vizible file. The vizible file includes XML tags for the cellularized environment world definition . These tags provide a set of variables that define properties of the cellularized environment or world . In general there may be two general types of tags world data tags and cell data tags. World data tags define the environment world definitions that is the geometrical definitions the geometry mappings and procedural geometry describing their interaction. The world definition may also include additional world properties such as present views channels additional functionality and the like. In one embodiment the vizible XML file .viz includes the XML tags for the world .

In an XML implementation the world and cell data may be provided in separate data files or in a single data file. For example in a single .viz file world and cell tags may be nested as follows 

Moreover multiple sets of definitional sections can be nested within each other such that one or more world data definitions or cell data definitions can be included within a cell data section.

 world data includes variables and values defining the environment word definition . The environment world definition in addition to the geometric related properties includes instructions for a viewer to implement world related variables. These include an initial view position and zoom color scheme animations global cell values layouts and the like. Layouts are defined as part of the geometry definition of the environment. Implementation of layout definitions is further discussed below.

The cell data includes variables and values for the viewer to implement cell related display variables e.g. visual proxy cell size and the like. Each cell is associated with cell data that provides to the viewer values for the variables defining properties of the cell. As further explained below these variables and their values can be dynamically modified or updated based on user interactions and or content events.

The following is an example of tags and associated parameters with data types for a world data section in a .viz XML world definition 

The world data section is demarked by the tags. The tag itself includes various parameters to identify the world and to define the initial display of the world to the client application at start up e.g. initial zoom state whether the world is a flat or 3 D geometry what initial layout to show and the like.

The section demarked by the tags defines activation selection background and highlighting colors to be used as default for all the cells in the world. These values may be modified with local assignments at the cell definition level.

The section demarked by the tags defines general geometry properties such as the type e.g. spherical number of rows and columns default cell sizes depth aspect ratios spacing background and the like. This is one implementation of a geometry definition .

The section demarked by the tags defines the navigation available to the user through the client viewer . For example it defines a response to a single click of a mouse to show a channel or a group. It defines several layouts available to display in response to mouse movement as defined by the tags. Each layout may include a definition for what cells it includes as shown by the tags.

The tag includes various parameters to set responses to zoom state variations e.g. activation selection surfing swap in and swap out.

For example in one embodiment XML for world data making up an environment definition includes the following 

The XML implementation of a world definition may also include pre defined layouts as part of its geometry definitions . For example a layout for a spherical environment can be specified in XML as follows 

Layouts may include fixed layouts and algorithmic layouts. For example an XML implementation of a world definition with fixed and algorithmic layouts includes the following tags 

The tag defines a static layout with the position of each frame in the world as given by the geometry definition located at http env geometry. The first frame at coordinates x 434 y 768 at a camera view or height of 800. This layout is implemented upon detecting a change of level of detail or zoom state change. The change in layout is accomplished through the functions changeResource specified as handler.

By contrast the tag defines an algorithmic layout that positions frames automatically over a spherical geometry located at http env sphere. Each frame is specified by the tags and associated parameters.

For illustration purposes a simplified cell definition is shown below. The XML example shows a cell definition section of a vizible with tags and parameters indicating type of the parameter values. For additional cells in the world or environment additional similar sections would be used.

In this example the cell metadata component includes a geometric property definition that defines the cell s depth and location in the world s geometry by row and column. The cell s zoom state definitions and associated visual proxies are defined in the section with two potential zoom states. Each zoom state includes a visual filename parameter with a corresponding string str value to specify the path and file name for the visual proxies . The actionable feature definition is specified by the activation type tag and the associated universal resource locator url tag. The content information in this embodiment is a simplified version in which a content type is specified with the type and media id tags and associated defined values of several possible defined values e.g. movie image textual and the like. In the example XML above the set of tags used are simply for illustration purposes. Additional or different tags may be used to define any combination of feature definitions for a cell metadata component and associated visual proxy component .

An example of a cell definition component with actual values for the various parameters is shown below 

In this example the cell is part of a dashboard type environment and is located at row 41 column 10 of the dashboard environment. The cell type type is standard and it is locked locked true in its position so that the user cannot alter the cell location during display. As further discussed below the live feature is not active for this cell indicated by the false value. Multiple cell versions can be combined within an environment. Therefore a cell version parameter version is provided and it indicates that this cell is version 0. An activation response could also be provided through the tag. For this tag there are two parameters a type of activation type to indicate what occurs when a user activates the cell e.g. clicks on the cell and if the activation type was hyperlink then another parameter is provided to indicate the URL of an html page to display url . For this cell there is no activation specified. The visual representation for this cell is passive and includes a file viz.gif that will be displayed within the cell. A file media id of 001 indicates that this file is an image. An alternative file name could be provided as a value to the parameter alt filemname with corresponding media id but in this case no alternative is provided.

The complexity of the cell definition can vary greatly depending on the purpose of the environment and of each cell within the environment. A slightly more complex and content rich cell definition section includes tags and parameters for its various feature definitions in its metadata component and for its visual proxy component it includes tags for identification of resources for its various zoom state level proxy components . A sample XML tag set of a cell definition sections is shown below 

As shown above the content information feature definition of a cell may include information upon which queries can be performed e.g. title media type names of relevant persons e.g. actors authors directors employees employers corporate officers and the like outline of the content represented by the cell and the like. In addition query specific fields e.g. can provide a reference for fast query execution based on predefined parameters e.g. media type content type or the like. For example a channel organization function may execute a query over a query specific field e.g. to organize cells based on the type of information they display using this feature of the cell metadata component .

Similarly additional purpose specific keywords or tags may be included to enable content display enhancement and features such as dynamic filtering e.g. query based filtering and presentation contextual presentation e.g. provide media player menus when displaying a cell type movie or audio file 360 degree views of particular content of interest to the user e.g. presenting related more in depth content upon user interest indication and the like. Thus the metadata content information feature definition advantageously enables intelligent content presentation to users.

The complexity of the visual proxy component is also variable. The following example illustrates the visual proxy component and zoom state definitions for an example cell architecture with three zoom states 

The relationships between cell locations in the geometric configuration and the display properties of each cell are algorithmically related based on the mathematical model associated with the geometry of the configuration. These algorithmic relationships enable dynamic display modifications and motion of the cells . In any given display geometry configuration the display and motion of every cell can be algorithmically or procedurally defined as a procedural geometry . A procedural geometry includes instructions to modify cell display locations according to the geometry definitions and the corresponding geometry configuration mappings in the environment definition . The procedural geometry is based on the associated mathematical models of the geometric configurations specified for the environment. Display parameters in the procedural geometry definition enable the dynamic modification of the display based on real time input from outside sources e.g. user actions content events and the like.

For example in one embodiment a spherical environment includes several parameters that are provided as input to a viewer in order to algorithmically generate the sphere and its motion. Some of the parameters specify information applicable to all cells. The generalized sphere geometry parameters may include the following 

According to the above parameters the sphere is algorithmically generated on the viewer. The sphere includes outer and inner cells caps on its top and bottom frames and a frame box between the outer and inner spheres. Some rows of cells whose size are proportional are generated according to parameter proporRowNum. The size of cells on the other rows is constant and the same for all cells. The cell size can be modified by changing values for the parameter cellSizeRatio. Using different values for frameWidthRatio the frame border width can also be controlled.

For example with reference to the geometry definition of a spherical cellularized environment provides geometric descriptions of its surface cells based on their aspect ratio and size. The shape and location of every cell is controlled through as a set of input variables and mathematical equations that operate on them. By procedurally changing values used in the algorithm the cells can be rearranged or moved while maintaining their general relationship to each other and therefore maintaining the environment s geometrical shape.

In addition a single cellularized environment may include multiple geometry definitions and geometry relationships or mappings between the multiple geometry definitions . The geometry relationships between the geometry definitions provide a mapping of cell locations between one geometric configuration and another. The geometry relationships enable the dynamic transition of the environment display from one geometric configuration to another. For example shows the cellular environment of dynamically transformed from a spherical shape to a circular shape simulating the shape of a compact disc . The cellularized environment definition includes a mapping of the cell locations from a row and column around the surface of the spherical geometry to a radial position on the radial rows and columns on the disc s geometry. The transition between the two geometries may be associated with a predetermined event such as a user action or a content event. For example a user may provide a selection of geometry and the corresponding geometric configuration is applied to the existing cells. Alternatively a content designer may program transitions from one geometric configuration to another for example as part of a slide show or other dynamic presentation of the cellularized environment.

External events such as user actions content events or the like may be linked to the procedural geometry of an environment definition . The external events can be used as triggering signals to dynamically generate changes in the cellularized environment geometric configurations. For example show a cellularized environment for multi media based content in different display modes. shows the cellular environment in a user selection or browse mode. Cells in this embodiment are arranged into a spherical geometry with channels of music albums of related genre as indicated by the genre label cells e.g. Dance. 

At the cell level any deviation from the generalized parameters of the procedural geometry may be specified in the cell s geometric properties feature definition . The geometric properties feature definition enables procedural geometry operations to vary the cell locations dynamically e.g. in a choreographed pre defined manner in response to user queries in response to user commands in response to the contents of other cells or the environment itself. The information in the geometric properties feature definition provides each cell with information of its display location within the cellularized environment and with respect to other cells . This data is used by the viewer application to display the cells. For example a location vector with respect to an origin in the cellularized environment is maintained in the geometric feature definition for the cell. As the cell is moved e.g. by user command animated slide show presentation or the like the vector components are changed to track and indicate the proper display location of each cell.

The geometric configurations can be enhanced by establishing relationships between groups of cells into what is called channels. A channel of related cells can be provided to cluster cells based on their relationship. Cells may be grouped into a channel based on the content they are associated with based on user preferences based on content events based on designed relationships based on queries based on commercial agreements to associate content or based on any other relationship established between groups of cells . Each cell includes a channel membership feature definition assigning the cell to a particular channel if any for example based on content e.g. all financial information cells are assigned to the financial channel all entertainment information cells are assigned to the entertainment channel and the like. Channels in the cellularized environment are used to display the related cells in close proximity to each other. Thus if for example a user selects to sort the cells in the cellularized environment by channel the cells are physically clustered together in the display based on their channel assignment information. Other association techniques include media type source or the like.

Channel associations can be dynamically generated based on queries. A user may generate custom channels in the cellularized environment by providing query definitions for each channel. The channel queries are executed over the cell metadata and matching cells are assigned to the channels based on the query. The queries may be explicitly input by the user inferred from user actions provided as part of cell interactions derived from content events through interaction with other system elements or the like.

For example referring to a dashboard cellular environment is shown. The cellular environment includes 16 cells . The user places cells which includes a landscape content descriptor which includes a presidential content descriptor which includes a Vizible content descriptor and which includes an artist content descriptor each in a corner of the four quadrants of the dashboard illustrated as the raised cells in the corner of then environment . The user then requests to the viewer application to organize the remaining cells into four quadrants of the display each quadrant associated with a channel matching one of the four corner cells . The viewer application may include a clustering algorithm based on any conventional clustering technique. For example using the cells content descriptor metadata values e.g. landscapes presidential Vizible artist label movie as dimensions and their presence or absence in the cell s metadata as their values e.g. 0 or 1 clustering techniques such as Singular Value Decomposition SVD or Principal Component Analysis PCA can be used to group cells with a number of content dimensions in common into clusters. Any other metadata elements could be used as dimensions for example display media type data source or the like. Using such an algorithm the remaining cells are clustered into four channels based on the cells content descriptors. The viewer application then physically re arranges the cellularized dashboard display into four quadrants of cells closer together representing the four channels with landscape content with presidential content with Vizible content and with artist and other content not matching the other three channels.

Additional channel formation is accomplished using a server in the system e.g. integration server to manage the interaction between cell content in a cellularized environment and live content in external data e.g. World Wide Web data RSS data feeds Atom data feeds or the like. The integration server using conventional filtering algorithms associates content in a cell selected by a user with a group of corresponding channel cells . . . . The corresponding cells are dynamically generated upon the user s selection of the cell based on external data. The content for the channel cells is derived from data sources through filtering algorithms. A channel with the combination of the user selected cell and the system generated channel cells is displayed.

This dynamic channel generation feature enables the combination of user selected data with the delivery of added value content from third parties in a seamless transaction. For example shows an illustration of a channel in a cellularized environment . The cellularized environment is customized for the display of music related content. In this embodiment a dynamic channel is generated based on a previous user selection of a cell with a particular music album artist or the like for example by clicking on a cell of the environment shown in . In response to the user selection the cell s zoom state is changed and displayed as cell . Additional cells are presented in the channel . Associated with the channel one cell provides additional information about the music selection e.g. album or artist information news associated with the album or artist or the like. Another cell in the channel provides access to an e commerce web page e.g. for purchasing the selection merchandising associated with the selection or the like. An additional cell is provided with advertising associated with the selection.

The association between cells in the channel may be based on the cell s content. For example the advertising cell may contain images of other albums by the same artist advertising with words in common with the selected cell or other similar content derived for example from a content based search of the data feed. Alternatively the content of the advertising cell may be associated with the selected cell based on forced associations. For example advertising may be provided in association with a particular content e.g. artist album song or the like such that when that content is selected by a user the advertising is displayed. This association can be provided through proactive cells. For example the visual proxy definition of the advertising cell may include dependencies on input from the metadata of the selected cell and input from en external source that provides a mapping between advertisements and the selected cell metadata. Using such a mechanism an advertiser may choose to associate a particular product with a highly popular artist. The forced association may be dynamically changed to vary the advertisements displayed e.g. based on an RSS feed providing different advertisements mapped to different artists changing over time. Additional channel cells . . . may be provided with additional channel related content.

This sample embodiment is not limited to music based content. For example a news based cellularized user interface may also be provided according to these features and functions. In this embodiment a cell enables a user to subscribe to a news feed e.g. RSS feed or the like. The cell dynamically renders visual proxies associated with the content of the feed appropriate for each available zoom state. As the content in the feed changes the visual proxies for the cell are updated. In addition upon user selection of the cell e.g. click double click or the like the cell is displayed at a magnified zoom state as cell . In addition associated channel cells are concurrently generated and displayed as a channel .

The channel cells may include a cell displaying results from an online search engine to a query made up of relevant keywords of the feed at the time the user made the selection. Another cell may display a product available for purchase associated with the content of the selected cell e.g. a book magazine electronic article or the like associated with the topic of the feed. An advertising cell may display advertisements associated with the cell either related in content through a forced relationship or otherwise. For example an advertiser may request to have his advertisements displayed in association with a highly publicized news event.

Additional channel cells with different associations to the selected cell may also be displayed in the channel . In addition in one embodiment the content displayed in the cells while in this channel display mode or view varies according to changes in the news data feed i.e. as the main news story changes in the feed the selected cell dynamically changes its content and all the associated channel cells are updated accordingly.

Referring back to the cellularized environment architecture may include templates in its environment definitions . These templates are used for dynamically generating various aspects of the environment even up to entire environments themselves. These template environment definitions are called assembly models or framework. The assembly models and frameworks include instructions for the subsequent generation of the actual cellularized environment . Frameworks provide content specific assembly models for particular applications of cellularized user interfaces e.g. Emergency Operations Center EOC frameworks such as for the generation of the environment of multimedia data frameworks and the like. Assembly models are generalized for any type of content. In the following description the term assembly model is used to refer to both assembly models and frameworks.

The assembly models may include a set of defined variables for input to a geometry definition template to enable the dynamic generation of the cellularized environments . A template geometry definition specifies the mathematical relationships to be established between the variables conditioned on the different potential values those variables may take on. Once the variables receive those values the mathematical relationships between the actual values are established for the generation of the environment geometry. Upon generation of an instance of the assembly model a number of columns number of cells per column number of rows overall size and the like is specified as input to the template by a content designer user a system API a data feed or the like.

Alternatively the values for the template s input variables may be dynamically computed to dynamically generate a cellularized environment based on the assembly model in response to an external input such as user inputs content events or the like. For example a query generated cellularized environment executes a query that results in a number of cells matching the query. Based on the number of query matching cells values for number of rows columns and cells per column are calculated and input into a geometry template of an assembly model that may be populated to generate an environment displaying the resulting cells.

Other cell arrangements i.e. environments worlds templates and the like can be dynamically generated based on content events or user actions. For example shows a sample company information dashboard cellular environment . Environment A represents a first state of the cellular environment when its cells are displaying stock symbols that dynamically change as stock data from a data feed is received. In response to a user s selection of a cell while a stock symbol of a company of interest e.g. VIZ is displayed a company information dashboard cellular environment B is dynamically generated with information about the company of interest.

The dashboard B includes a representation of the selected cell at a new zoom state and a several channels associated with the selected cell . For example the dashboard includes a Key Performance Indicators channel a TV News channel a Financial Data channel a Company Inside channel an International News channel a Calendar Events channel an Investor Relations channel and an External News channel . The channels are dynamically configured based on proactive cells whose content is made dependent on queries using the stock symbol being displayed in the selected cell. Within each channel a set of channel cells include additional content associated with the selected cell and related with other cells in the channel . Thus a cellularized environment is nested within a cell and is dynamically generated upon user selection of the cell in another environment. The content of the proactive cells in the dynamically generated environment is derived from the selected cell by association either directly through content queries i.e. keywords topics or other content similarities forced associations i.e. established relationships between different content or otherwise associated as inputs to cell definitions in their metadata components.

Dynamic channel generation through queries can be implemented in an XML embodiment in a variety of ways. For example in one embodiment a dynamic channel definition is provided by the following 

In this example a channel definition is demarked by the tags. The channel includes a query set demarked by the tags. Although in this example a single query is shown any number of queries may be used within a query set. The queries in the XML are demarked by the tags. Within a query multiple expressions demarked by tags are included with an operator parameter and a filter. The operator parameter is a logic operator i.e. AND OR and the filters demarked by tags are a set of conditions combined through logic or arithmetic operators that the cells in the channel must meet. The filter tags specify parameters in the cell definition in the propertyName variable and their value in propertyValue . Note that both of these specifications in the filter tags may be linked or made dependent on an external source by making the value a global or external variable. For example in the XML below the propertyValue for the second is set to the variable ticker which may be a changing value given by a feed e.g. ticker feed RSS feed or the like. Thus depending on when the channel is dynamically formed the value of the ticker may be different.

These query algorithms are used to determine related groups of cells CellGroups . CellGroups are created by sorting or grouping based on an algorithm that first sort all the cells based on their metadata then creates a hierarchy of groups. These groups are passed on to a layout algorithm which would arrange the cells in a same group together into a channel.

There are multiple possible configurations of system architectures for a system to provide cellular user interfaces as described herein. For illustrative purposes four different sample configurations are described and should not be understood as limiting the scope of the invention as recited in the accompanying claims.

The client computing environment may include a local storage device to store the cell and user data database for a cellular user interface . Alternatively the storage device may be external to the client computing environment e.g. an external hard drive a flash memory device a network storage device or the like. The client computing environment is connected to the storage device through a peripheral interface connection e.g. USB network connection or the like.

The storage device includes databases for storing configuration data making up cellularized environments. In addition the storage device may include configuration data for the dynamic generation of additional environments such as cellular frameworks assembly models worlds or the like. The configuration data is provided as a result of a design by a content architect. In addition storage device includes databases for storing user credentials for example user preferences inferred from user interactions with the system. The storage device may also be accessible from a content architect machine operated by a content architect. A CDK module is implemented in the content architect machine to compose the cellularized environments for the user.

The CDK module establishes relationships between the cell based data objects and user data both of which may be stored in the cell data database in the storage device . The CDK module is included in an independent content architect system . However the CDK module may be included in the client computing environment . shows a sample user interface for a CDK module . It should be noted that other content development interfaces may be used in addition to or instead of the CDK module . For example a set of system application programming interfaces APIs enable content sources to generate cell content and structure or architect cellular environments in place of a content architect.

The content architect can deliver or otherwise make available a cellularized environment e.g. a dashboard world experience or the like to the end users. Alternatively the content architect can provide instructions for dynamic cellular environment generation in the form of assembly models stencils configuration files or the like. The cellularized environment or the instructions for its generation are stored in the storage device and made available to the users. Then the users can access the cellularized environment from the storage device using the client viewer application . For example in one embodiment a cellularized environment is stored in a local hard drive as an XML world definition file e.g. .viz file that is loaded to the client machine through the viewer application . The viewer application includes instructions to read cellularized environment configuration information from the world definition file and to render visual content of the cells to the graphics hardware of the client machine for display. The image rendering components of the viewer application may be implemented based on standard cross platform rendering libraries as for example used in computer gaming applications. The visual representations of each of the cells are when the cells are generated in the cellular UI system. The image generation is offloaded from the user s processor the user s processor executing the viewer application does not generate the visual representations of the cells it only needs to display them on the user s display device. This enables the user s system to display of many more graphics rich visual representations such of for example video feeds than if the processor was also tasked with generating the graphics themselves.

The viewer application also includes instructions to dynamically generate cellularized environments triggered by user action or content events. The dynamic generation is based on templates and instructions provided as a set of frameworks or an assembly model. In addition customization of the environment is possible through data stored in user credentials for a resulting user customized cellularized environment . For example responsive to a user query for a particular type of data the viewer application generates a world based on an assembly model dictating underlying geometries and cell relationships to display the resulting output in a cellularized user interface . Alternatively a content architect may provide a cellularized environment made up of proactive cells. As described above proactive cells are cells that react to user actions or content events to update or modify their content.

The client configuration of the system has several advantages. For example it is simple to use for rapid prototyping and creation of demonstration worlds and user experiences and it is simple to install and maintain without requiring administrative overhead associated with using external data sources.

In this embodiment data can be served from the centralized server data storage device through the relay content server to multiple client computing environments . For example cellularized environments e.g. world .viz files can be populated using data from an internal database in the server data storage device and the populated worlds can be made accessible to client computers through a network.

In this embodiment the CDK module is preferably installed and operated on a separate content architect machine and used by a content architect to create cellularized environments e.g. as worlds or experiences that are delivered to the client computers . In addition a relay content server console may be provided for a server administrator to operate and maintain the relay content server . The relay server console may be included in the content architect machine or in a separate server administrator machine .

One purpose of the relay server system configuration is to provide a relay content server to support multiple client computing environments with data that changes infrequently. The updates can generally be provided using the CDK module or an alternative content architecting approach e.g. external systems APIs templates or the like. For example one application using a relay server system configuration includes a kiosk based system. Kiosks embodying client viewer applications perform the function of the client computing environments . Kiosks can be located in multiple locations e.g. shopping malls chain stores airport terminals and the like. The user data displayed at the kiosks through the cellular user interface would generally only require weekly updates e.g. special of the week store product offering catalog or the like. The updates are performed through the CDK module in a content architect machine . A content server console allows a server administrator to update the cellular database with modified world definition files from the content architect and or updated user data. The data updates are delivered to the kiosks through a network. Alternatively an RSS feed published by the stores is linked to the kiosk system through a system API. The store related data is updated by updating the RSS feed which in turn is transformed into cell content updates through the API.

The relay server configuration includes several advantages. For example in addition to performing the centralized data repository function the relay server can also deliver functionality to the client computing environments . For example depending on the cellularized environment configurations the relay content server can download customized toolbars to the client computers for the user to interact with particular types of data e.g. audio video reproduction controls for multimedia data.

Now referring to a block diagram illustrating a sample scheduled data update system configuration is shown. In this embodiment the scheduled data update configuration includes similar components to those described with respect to the relay server configuration .

In addition the relay content server is connected to a transform integration server . The transform integration server connects to external information sources and transforms the data into cells for display through cellularized user interfaces . In one embodiment the transform integration server operates in a transform integration server machine . A transform integration server console may be provided for a server administrator to maintain the transform integration server machine and associated network connections.

The transform integration server is connected to a set of connectors in a connector machine . The connectors are interfaces to external data sources e.g. data bases data feeds broadcasts and the like to package the external user data into a cellularized format. Instructions on how to render the user data into a cellularized format for a cellular environment are provided through a set of stencils and configuration files in the connector machine . For example a set of connectors are provided to interface with multiple external data sources . Each connector establishes an interface to a single data source to retrieve content data used for cell generation.

The transform integration server also includes a scheduler unit . The scheduler unit provides a mechanism to deliver up to date content where the user data is updated at regular intervals. For example a cellularized environment requiring a daily update of the data content may be implemented according to this embodiment. The scheduler unit uses multiple data connectors to support large batches of data updates. In addition in this configuration content data can be drawn from the customer s enterprise data sources such as a large scale database or other data repositories.

The scheduled data update configuration includes several advantages. The scheduler unit gives content architects the flexibility to have data updated for end users on a schedule that accommodates their business requirements. User data can be drawn directly from enterprise data sources via the connectors Which can be customized to the data sources of any particular enterprise.

Now referring to a block diagram illustrating a sample live cell system configuration is shown. In this embodiment the live cell system configuration includes similar components to those described with respect to the scheduled data update configuration .

In many applications of the cellular user interface it is important for the content data associated with specific cells or views into the data to be updated as soon as the underlying source data changes in the data source . For this purpose a notification mechanism is provided for data driven updates of the content data. The notification mechanism includes a notification server and a notification agent module . The notification server is connected the transform integration server and to the client computing environment . The transform integration server is also connected to a notification agent module that interfaces with the data sources to detect source data updates or other pre determined content events and trigger corresponding updates in the cellularized environment .

The live cell configuration allows a monitored cell i.e. a live cell to be updated in the viewer application soon after the content associated with the cell changes in the data source . This is done by having the viewer application register these live cells also called high priority cells with a notification server . The notification server receives notifications from the notification agent module when monitored data is updated in the data source . This arrangement ensures that the information associated with a high priority or live cell is updated promptly after it changes in the source database .

The live cell configuration includes several advantages. For example immediate updating of mission critical information for end users is provided through the notification mechanism. This configuration also enables updated data to be drawn directly from enterprise data sources via connectors thus leveraging existing software architectures.

Data sources may include any digital information from which a graphical display may be derived including without limitation video data files or sources e.g. digital television broadcasts digital image databases digital movie files e.g. DVDs and the like Internet web pages vector graphics data files e.g. gaming graphics map data files satellite image files and the like any office application based file e.g. Microsoft Office Excel Word PowerPoint Adobe Portable Document Format pdf and the like or text broadcast source e.g. stock ticker teletex closed captioning or the like 

Now referring to a block diagram illustrating a distributed world provider architecture according to one embodiment is shown. In this embodiment any of the system architectures discussed above can be used by world providers . The world providers use hosted world development tools made available by the world service provider through a data network e.g. the Internet. For example CDKs stencil builders and the like may be hosted at a world service provider server and remotely accessed by world developers to create or modify cellular environments in any of multiple world provider sites. In addition support for development and maintenance of world provider sites can also be made available as a hosted tool from a world service provider .

In addition the world service provider may provide a world registration service through a world portal . The world providers can register a location such as a URL accessible through a data network to which client applications can be directed by the world portal . Users can access the world portal for example through a query in their viewer application and get redirected to a content relay server of a world provider .

Referring back to the visual proxy component is generated for association with a cell during the cell generation process. In the client configuration system a CDK module may be used to associate data sources with the visual proxy component of the cells in an environment . For example a CDK module application as shown in enables a content designer to select one of a plurality of geometric templates from a geometry configuration tab . The CDK may also enable the content designer to drag and drop image content into each cell of the environment for example through a file browser tab . The drag and drop feature provides access to multimedia content in data files stored in the content developer system or in the cell data database . The CDK module renders as visual representations images from the selected multimedia data files. The CDK module provides a preset number of zoom states for the visual proxy component of each cell . For each such zoom state a visual representation can be associated. As a default the CDK module may automatically produce images of the source image file at different resolutions as visual representations for each of the available levels of detail. However different source data files can be associated with the visual representations for each zoom state

Once the content developer generates the cellularized environment it may be uploaded to the cell data database from where the user may access it for display in the user s viewer client application . The cell data database may be stored on a computer readable medium such as a hard drive floppy disk optical disk memory memory card or the like. In this embodiment the content delivery to the user is predetermined by the content designer and limited to the data included in the world design although subsequent updates are possible.

Dynamic generation of the cellularized environment is also possible. The dynamic generation is enabled based on a set of content specific frameworks or based on assembly models. In addition user customization is possible through user credentials stored in the user data database . The content developer creates the frameworks and or assembly models and establishes dynamic relationships between cells and variable content through the CDK or system APIs. This dynamic cellularized environment template is stored for example as an assembly model in the cell data database . The cellularized environment may be made up of proactive cells which using the cellular frameworks or assembly models periodically regenerate the environment with updated content based on user interactions or content events. For example one or more cells in the environment are associated with one or more data feeds e.g. RSS data feeds Atom data feeds or the like. Responsive to changes in the data feeds the cells dynamically regenerate their content and information to provide an updated result. The cell regeneration takes place as indicated in the assembly model or frameworks and may be modified based on user credentials to customize the resulting cellularized environment.

As shown with respect to the live cell update configuration includes a content generation system for live data content update and delivery. Connectors are provided for establishing connections to a plurality of data sources . The data sources may include data bases files online data sources e.g. web pages graphics video feeds and the like and the like.

Referring now to a flowchart illustrating a sample cell generation and delivery process according to one embodiment is shown. In this embodiment the connectors acquire the raw data from the original data source and transform it by generating a model that represents a view into the data. The model may include a several image proxy components according to different levels of detail for a particular cell. The model may be derived from a model template provided in stencils and associated configuration files . For example a stencil may include a template cell description associated with a data source. One type of template is a static template which predefines a specific arrangement of cells. For example static templates can be created by positioning cells manually using a CDK . Another type of template is a dynamic template which is built dynamically through queries to a database at a client computer environment or to cellular database at content server . For example dynamic templates can be created at run time by using computer algorithms to sort group and position cells based on their metadata component .

The template cell description includes template feature descriptions and required visual proxy elements . The associated configuration file indicates to the connector how to populate the template with the raw data acquired from the data source . Based on the template and configuration file visual proxy elements are rendered from the raw data and associated with the cell. For example for a data source of financial information a first zoom state may describe a particular cell background color with a title in large font that includes text acquired from the data source e.g. a company stock ticker symbol. A second level may include a captured image from a company website a third level includes the ticker symbol and daily price information derived from a stock ticker feed the next level has a one year historical price chart derived from an Excel file and the like. In this embodiment the stencil provides a shell template for the cell that is populated with the acquired data from various data sources. The data is applied to the template as indicated in the configuration file.

In one embodiment the rendering is performed at the viewer client application hence raw data is provided in association with the cell for subsequent rendering at the client. In alternative embodiments rendering is performed by rendering engines in the connector system e.g. HTML rendered vector graphics rendering engine and the like. With respect to some data sources e.g. multimedia data feeds a link to the data source may be established for display of the actual data stream e.g. streaming video sound text or the like directly from the data source.

In addition the metadata component of the cell is generated by the connector. The metadata feature description elements are included in the cell template and are populated with acquired data from the data sources according to the instructions in the associated configuration file . For example a query associated with a cell may be specified in the template with a variable value that is derived from the acquired data. The zoom state definitions are provided associating the cell to the associated visual representations of the visual proxy component generated by the connector . Similarly information content feature definitions may include keywords as tags in the cell definition template for which values are derived from the acquired data. In one embodiment the metadata component includes information regarding the source from which the cell content is derived. This information is also available for query execution as described above. In addition in one embodiment the metadata feature description elements environment templates and configuration files are dynamically associated with outside data inputs. For example an RSS data feed may include inputs to one or more feature description elements templates or configuration files to dynamically vary cell generation. For example the RSS feed may remotely provide updates to environment geometries updated cell templates and the like without requiring coding for each particular system. illustrates this feature showing a record geometry remotely applied to the spherical geometry of the cellularized environment shown in .

Once the cells are generated they are transferred to the cell database in the content relay server system . Client computing environments with client viewer applications connect to the content relay server for access to the cell database to populate the cellularized environments e.g. worlds displayed to the user. In one embodiment the client viewer application connects to the content relay server through a simple object access protocol SOAP interface for the delivery of cells to the cellularized user interface.

A cellular user interface system includes cell content update functionality. The cell content update functionality may be available through several update processes. Through these update processes cell content including metadata and visual proxy components can be updated to provide a highly dynamic user interface .

The cells themselves may be proactive. Proactive cells can have their content dependent on or linked to dynamic data sources. Content events in those data sources trigger cell regeneration or update of the proactive cell content. For example one or more cells in a cellularized environment are associated with a data feed e.g. RSS data feed Atom data feed or the like. Responsive to changes in the data feed the cells dynamically regenerate their visual proxies and metadata components to provide updated content. The cell regeneration takes place as indicated in an assembly model or a set of frameworks and may be modified based on user credentials to customize the resulting cellularized environment . Parameters in the metadata components are conditioned on states of data supplied by the data feeds. When the state of the data in the data feeds changes the parameters activated by user actions e.g. zoom clicking or the like access the changed states and regenerate their metadata and or visual proxy components accordingly.

In addition a scheduled update process may be provided for updating cell content at regular scheduled periods. For example a system architecture as shown in is capable of supporting a scheduled content update. illustrates such a scheduled update process with a flowchart of a sample scheduled cell updating process according to one embodiment. In this embodiment the connectors include information about the frequency with which the data of their associated data sources may change. For example a stock ticker data source connector would include information regarding the cycle time for the data to stream through all the symbols of the associated market. Similarly a daily digital newspaper connector includes information indicating the daily update time for the digital news e.g. 2 A.M. Based on this information a scheduler sets up schedules for each connector to trigger the acquisition of updated data according to the known update schedule.

The scheduler notifies the integration server that an update from a connector is due. The integration server causes the connector to execute and acquire the updated content. For example the updated cell content may be acquired and a new replacement cell generated based on the stencils and configuration files . The integration server uploads the new cell content to the content server where it becomes available to the client computing environments . The client applications may periodically update or refresh the cells in their cellularized environment thereby displaying the updated content. Alternatively updatable cells are configured to cause the viewer application to update their content upon user input e.g. click. In addition selection menu option in the viewer application may include an update content option selectable by a user at any time causing the viewer application to download updated cells from the content server .

The cellularized user interface cell update feature may also include a live cell functionality. Live cell functionality allows the content of high priority cells to be updated on the user interface as soon as the underlying data changes in the data source . Live cell functionality is facilitated through a process as for example illustrated in . shows a flowchart illustrating a sample live cell updating process. For ease of explanation this process is described with respect to the elements shown in however other configurations of system elements to accomplish the same function will be evident from this description.

In this embodiment the process starts when a client or viewer application receives a live or high priority cell . A cell through its metadata component may indicate that it includes a live update feature. The client application registers with a notification server for example via a TCP IP protocol to receive updates for the specified cell . At the data source an agent tracks changes in the data being monitored directly from the source . Upon detecting a change in the monitored data the agent notifies an integration server for example via authenticated HTTP requests. The integration server upon receipt of the notification causes the corresponding connectors to execute to acquire the updated data from the data source .

The updated cell data is acquired and transferred to the integration server . For example the updated cell data may be acquired and a new replacement cell generated based on the stencils and configuration files as described above. The integration server uploads the new cell content to the content server and notifies the notification server of the updated cell content. The notification server notifies registered client applications that new content is available for the registered cell . The registration process is available for any number of cells thus the notification may related to multiple cells and may be broadcast to all or any subset of client applications whether registered or not. The registered client applications upon receipt of the update notification download the new cell content from the content server for example using Simple Object Access Protocol SOAP . The updated cell content is displayed in the cellularized user interface according to the displayed world descriptions thereby providing continuously updated cell content.

The live cell update process may be combined with the scheduled update process described above. Data known to periodically change at known time intervals is displayed in cells that are periodically updated according to the scheduled update process. Data that may vary at random time intervals is displayed in live cells updated based on monitored changes in the data. Moreover the content generation process for all the cells in the cellularized environment may be performed in one of the scheduled update process or the live update process. That is all the cells in the cellularized environment may be high priority cells. It should be noted that any combination of these update processes for any number of the cells in a given cellularized environment is possible and envisioned as part of the invention.

The updating feature is also capable of dynamically modifying environmental parameters of the cellularized user interface . The described update methodologies are also capable of modifying geometries for environment generation frameworks channel algorithms views display algorithms and the like. For example as described above with respect to B and a sound equalization algorithm may be provided to shuffle the cell arrangement location sizing and display orientation and to vary the cellularized environment view according to the output of a music data feed. For this purpose a conventional visual equalizer output is mapped to the cellularized environment parameters through the sound equalization algorithm by assigning parametric value changes for the different environment parameters to sound properties e.g. frequency and associated amplitude of the sound data. As another example environmental parameters can be associated with financial data e.g. stock market prices such that changes in share values within predetermined ranges trigger changes in the cellularized environment . For example in a stock portfolio cellular environment upon reaching a predetermined price point a cell representing a company s stock transforms into a new cellular environment with up to date data associated with the company for example including latest news stock charts information about executives industry and the like. The reaching price point is the content event that triggers the generation of a new environment or world with updated cellular content generated based on an assembly model and user credentials.

The implementation of these techniques as well as similar adaptations falls within the scope of this invention.

While particular embodiments and applications of the present invention have been illustrated and described herein it is to be understood that the invention is not limited to the precise construction and components disclosed herein and that various modifications changes and variations may be made in the arrangement operation and details of the methods and apparatuses of the present invention without departing from the spirit and scope of the invention as it is defined in the appended claims.

