---

title: Integrated software toolset for a web server
abstract: A software toolset includes a number of software modules that handle control and data communication within a web application server instance. An application programmatic interface (API) provides a common interface to communicate with the software modules in the toolset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07587399&OS=07587399&RS=07587399
owner: SAP AG
number: 07587399
owner_city: Walldorf
owner_country: DE
publication_date: 20051230
---
The field of invention relates generally to web application servers. In particular the invention relates to a common API for a toolset containing a software library that provides for management and control of an application server instance in a web application server cluster.

Web application server web AS platforms are commercially available from a number of vendors such as SAP Web Application Server available from SAP AG Walldorf Germany Apache HTTP Server version 2.2.0 available from Apache HTTP Server Project Apache Software Foundation and Internet Information Services IIS 6.0 available from Microsoft Corporation Redmond Wash.

A web AS platform generally is hardware platform independent and highly scalable using sophisticated session caching dispatching and messaging techniques in a distributed computing environment. Web AS may employ a number or cluster of web application server AS instances each of which may support a number of work processes for providing services. The cluster of web AS instances may be distributed over one or more computing platforms and typically communicate with each other via a messaging service.

A web application server instance comprises a business environment a relational database and an internet connection manager. The business environment is responsible for the business content and underlying logic of the enterprise published for example using the Business Server Pages Java Server Pages. SAP s web application server comprises an ABAP environment in which existing components such as business objects can be used for the business logic. SAP s web application server further comprises a J2EE environment that processes requests passed from the ICM and dynamically generates responses enabling web application developers to create web applications that include presentation and business logic using standard Java or J2EE technology. The relational database provides a repository for enterprise data. The internet connection manager ICM is an independent process responsible for communications between a Web AS instance and external client devices over intranets or the Internet using standard protocols like HTTP HTTPS and Simple Mail Transfer Protocol SMTP .

While standard protocols and architectures are provided for external communications with the front end of a web AS that is communications between a web client on the Internet and the web AS back end or internal services protocols and architectures used in communications between application server instances may not be standardized. These internal communications might include for example communications between worker processes in an application server instance as well as communications between application server instances and involve a proprietary communication architecture such as a shared memory based communication channel.

Use of proprietary internal services protocols and communication architectures makes difficult the reuse and or porting of such services and protocols implemented in one web AS platform to another web AS platform. Additionally internal services may use separate application programmatic interfaces to communicate with each other even though the functionality provided by the APIs may overlap or be very similar wasting memory and resources to develop operate and maintain.

A software toolset includes a number of software modules that handle control and data communication within a web application server instance. An application programmatic interface API provides a common interface to communicate with the software modules in the toolset.

An AS instance typically contains a number of worker processes also referred to herein and in the figures as worker nodes WN . For example AS instance includes worker nodes through . A worker node may also be referred to as an application process work process or server process . Each worker process is resident in a virtual machine VM . In one embodiment the VM may be a Java Virtual Machine JVM . In one embodiment of the invention the worker processes are Java 2 Platform Enterprise Edition J2EE worker processes that support Enterprise Java Bean EJB components and EJB containers at the business layer and Servlets and Java Server Pages JSP at the presentation layer . A J2EE platform complies with the J2EE Standard. Of course certain aspects of the embodiment of the invention described herein may be implemented in the context of other web application server infrastructure platforms including by way of example the .NET platform available from Microsoft the WebSphere platform available from IBM and the Advanced Business Application Programming ABAP platform available from SAP AG the assignee of this invention. In any case each of the worker processes within a particular AS instance may be configured with a redundant set of application logic and associated data.

Additionally an AS instance includes an internetwork communication manager ICM to receive service requests from clients such as client via a network and deliver responses e.g. the result of some action or processing on the part of one or more of the worker processes as may be appropriate from the worker processes to the clients. A web dispatcher receives client requests from the network and distributes them among the AS instances where they are received by a respective AS instance s ICM.

An AS instance further includes one or more dispatchers not shown in associated with the worker processes to which the dispatcher selectively distributes the client service requests received by the ICM. In one embodiment the dispatcher may be combined with the ICM or alternatively the dispatcher may stand alone as a separate program in the AS instance and communicate with the ICM to receive and dispatch the service requests to its associated worker processes. The AS instance s dispatcher distributes client requests among its worker processes based for example on the load on each of the worker processes. In one embodiment a dispatcher implements a round robin policy of distributing service requests although various alternate load balancing techniques may be employed .

In the example web application server architecture illustrated in the AS instances . . . share a central database system that includes a persistent data store e.g. data store . Worker processes executing in each AS instance may store and retrieve information from the database in servicing the requests from clients. Additionally the cluster may be centrally defined and configured in the central database.

AS instances receive requests from one or more clients for example via web client over a distributed internetwork such as the Internet. In one embodiment requests from the web client may be transmitted using hypertext transfer protocol HTTP secure HTTP HTTPS the simple mail transfer protocol SMTP or the simple object access protocol SOAP . The ICM provides support for the various relevant internetworking communication protocols and is configured to allow an independent software module that supports a particular protocol to be plugged in to the connection handler in the ICM.

In one embodiment message server provides a message service for communication between AS instances via a message passing protocol. For example if a worker process of AS instance has a message to send to AS instance i.e. an internal message from the perspective of web server the message is sent from the worker process own cluster manager see reference to the message server which receives and brokers the message from AS instance and then forwards it to AS instance providing for asynchronous communication between the AS instances.

In one embodiment all communication with the message server is via a cluster manager service or simply cluster manager a software service that handles communicating messages with and sending and receiving notifications of events in the cluster to from the message server. provides a block diagram of an application server instance that includes a cluster manager in the Internet Connection Manager ICM . The cluster manager exchanges internal cluster messages with message server for example to facilitate load balancing between various AS instances in the cluster to send and receive notification of events that arise within a cluster such as failure or shutdown of an AS instance or worker process in an AS instance a service being started or stopped or to update state information in the cluster. Cluster state may change upon occurrence of such events as adding a new worker process to the cluster shutting down an existing worker process changing a state of a worker process or changing the ability or availability of a worker process to communicate with other nodes in the cluster.

The cluster manager in an AS instance further provides for communications with an AS instance via the message server which also may broker such communications. A broker is defined herein as software entity which mediates between two objects typically between a client and a server such as an AS instance client and message server server . In one embodiment the message server may translate a message from a formal messaging protocol of the sender to the formal messaging protocol of the receiver. 

Cluster manager comprises three handlers an event handler notification handler and a message server communication handler. A handler is known in the art as a subprogram that is called in response to an event such as an AS instance being started or stopped or adding or stopping a worker process. The notification handler is called in response to a specific event in the cluster and performs a function or causes a function to be performed in the AS instance in response to detection and communication of that event from the message server. Likewise event handler provides notice of an event in the AS instance to the message server. Finally message server communication handler provides for communicating messages between the AS instance and the message server which in turn processes the message and either forwards the message on to appropriate elements in the cluster or generates a new message to do the same.

Cluster manager may be written in native application program code such as C C or assembly reside in a software library and be dynamically linked to the ICM at run time. In this way the cluster manager may be written in a language specific to a particular hardware and or operating system platform. A cluster manager written in a platform specific language is referred to herein a native cluster manager NCM .

To the extent the ICM is implemented in Java code running on a Java virtual machine VM NCM may utilize the Java Native Interface JNI which allows Java code running in the Java virtual machine VM to call the native cluster manager and allow the native cluster manager to call cluster elements implemented in Java code. The JNI is used to write native methods to handle situations if the cluster manager cannot be written completely in the Java programming language for example if the standard Java class library does not support any platform dependent features or program library. JNI may also used to modify the cluster manager if written in a programming language other than Java to be accessible to Java applications.

The web server infrastructure illustrated in separates communications relating to external client service requests and responses from internal communications relating to the interoperation of the application server instances in the cluster. Client service requests and responses herein referred to as session communications involve an exchange of messages between the ICM and a worker process in an AS instance to process the client request or any response thereto. An HTTP request from an external web client such as a web browser application is an example of a session communication. The back and forth communication typically involves a client sending a request that a worker process interprets into some action to be performed by the server. The worker process performs the action and if appropriate returns a response to the client e.g. a result of the action . Often a session will involve multiple perhaps many requests and responses. A session administration client SAC software module handles assigning and monitoring of sessions between ICM and worker nodes providing services such as load balancing i.e. determining with which worker node a session is to be established to handle a client request and transferring requests from an existing session to another session in the event the existing session terminates or becomes overloaded.

In addition a shared memory region is provided to store session objects having low level session state information i.e. information that pertains to a request s substantive response such as the identity of a specific servlet invoked through a particular web page and to store high level session state information i.e. information that pertains to the flow management of a request response pair within the application server e.g. the number of outstanding active requests for a session . In one embodiment the shared memory region may be treated as two separate memory regions one for the low level session information the other one for the high level session information.

ICM further includes a J2EE handler for communicating the requests and responses exchanged between worker processes and web clients. A shared memory architecture referred to herein as Fast Channel Architecture FCA provides a queue based memory pipe for exchanging data between worker processes and web clients. In particular the FCA includes a shared memory region that supports request response data transfers as well as another shared memory region that supports request notification queues one queue for each of the worker processes in the application server instance. The FCA shared memory structure and request notification queues along with the session administration client shared memory region help implement a fast session fail over protection mechanism in which a session that is assigned to a first worker node can be readily transferred to a second worker node upon the failure of the first worker node.

Shared memory is memory whose stored content can be reached by multiple worker nodes. Different types of shared memory technologies may be utilized within the application server instance and yet still be deemed as being a shared memory structure. For example shared memory may be implemented within a connection oriented shared memory technology or with a shared closure oriented shared memory technology.

A connection oriented request response shared memory region effectively implements a transport mechanism for request response data between the connection manager and the worker processes. That is because the connection manager is communicatively coupled to the shared memory and because the shared memory is accessible to each worker process the request response shared memory at perhaps its broadest level of abstraction is a mechanism for transporting request response data between the connection manager and the applicable worker processes for normal operation of sessions i.e. no worker process failure as well as those sessions affected by a worker node crash.

While the embodiment illustrated in contemplates the three software modules and it is appreciated that other software modules may also be supported by ICM. ICM may implement a handler into which a service may be plugged in to provide services for the application server instance.

In one embodiment of the invention it is contemplated that the functionality of the ICM may be provided according to different vendor specific implementations. For example the ICM functionality may be provided by a web application server implemented according to various commercially available web application server platforms such as SAP s Web Application Server the Apache Software Foundation s HTTP Server and Microsoft s Internet Information Services IIS .

With reference to to reuse the software modules and in other implementations of web server application instances the modules may be placed in one or more libraries and provided as a toolset that can be integrated into different web application server platforms. Moreover just as described above for the cluster manager any of the software modules may be written in a native application program code such as C C or assembly reside in a software library and be dynamically linked to the a Web AS platform s front end or ICM equivalent software component s at run time. In this way the software modules may be written in a language specific to a particular hardware and or operating system platform and plugged into to other application server instances available from any number of vendors.

Each of the software modules in the toolset may provide their own API. However there may be significant overlap between the functions provided by two or more of the software modules in the library. One embodiment of the invention then contemplates wrapping the toolset library in a single API that provides the functionality needed to communicate with each of the software modules libraries in the toolset. In so doing the interface may be simplified and reduced in size. Moreover a developer need only deal with one API when adding or interfacing the toolset to the web application server platform s ICM equivalent functions.

Elements of embodiments of the present invention may also be provided as a machine readable medium for storing the machine executable instructions. The machine readable medium may include but is not limited to flash memory optical disks CD ROMs DVD ROMs RAMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. The machine executable instructions may then be executed by a processor in a computer.

It should be appreciated that reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. These references are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined as suitable in one or more embodiments of the invention.

