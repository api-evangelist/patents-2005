---

title: Methods for describing processor features
abstract: A machine readable description of a new feature of a processor is provided by a processor vendor. Control code executing on a processor, such as a traditional operating system kernel, a partitioning kernel, or the like can be programmed to receive the description of the feature and to use information provided by the description to detect, enable and manage operation of the new feature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716638&OS=07716638&RS=07716638
owner: Microsoft Corporation
number: 07716638
owner_city: Redmond
owner_country: US
publication_date: 20050304
---
The present invention relates to processors used in computing systems and more particularly to a method for providing a machine readable description of a new feature implemented in a given model or family of processors to enable a computing system to detect enable and manage operation of the new feature without any a priori knowledge of it.

Microprocessor vendors typically develop a family of processors designed around a given processor architecture and then continuously evolve the architecture. For example Intel Corporation has developed several generations of processors around its x86 architecture the most recent being the PENTIUM family of microprocessors. Similarly Advanced Micro Devices Inc. has developed families of processors designed around its x64 architecture. Often a processor vendor will add a feature to an existing model or family of processors. Examples of new features that have been added to a processor family include the Physical Address Extension PAE MMX instructions and streaming SIMD extensions SSE features added to the PENTIUM family of processors.

Features that add additional bits to existing registers within a processor that add new registers to the processor or that require additional processor state to be saved and restored across processor context switches can be problematic for both processor vendors and developers of operating systems designed to execute on such a processor. In particular in order for an operating system to use such a feature or to make such a feature available to application programs the kernel of the operating system must be modified to support the new feature. This is true of both traditional operating system kernels such as the kernel of the WINDOWS operating system available from Microsoft Corporation and so called partitioning kernels that provide partitioned execution environments for multiple guest operating systems. Because these kinds of new features require support in the kernel the introduction of such a feature by a processor vendor is effectively gated on the release of an updated version of the kernel.

The existence of new features in a processor presents additional problems for partitioning kernels. A partitioning kernel provides a separate partitioned execution environment for each of multiple guest operating systems running on a single computing system. While each operating system runs in a separate partition it appears to each operating system that it has full control of the underlying processor and other system components. In reality the partitioning kernel presents one or more separate virtualized processors to each operating system. It is important in such a system to prevent secrets from leaking between partitions and to prevent one partition from corrupting the state of another partition. However if a new feature has been implemented in a processor on which the partitioning kernel is running and that feature adds new registers or additional bits to existing registers or adds to the processor state that must be saved during a context switch from one partition to another the potential to leak secrets between partitions or for one partition to corrupt the state of another exists. Thus it is particularly important for a partitioning kernel to be aware of any such new feature.

Thus there is a need for a mechanism by which a processor vendor can make information concerning a new feature of a processor available to a computing system so that the system can detect enable and manage operation of the new feature. The present invention satisfies this need.

The present invention is directed to a machine readable description of a new feature of a processor as embodied in a computer readable medium a method of generating same and a method of using the machine readable description to detect enable and manage operation of the feature in a computing system. Control code executing on a processor such as a traditional operating system kernel a partitioning kernel or the like can be programmed to receive the description of the feature and to use information provided by the description to detect enable and manage operation of the new feature. With the present invention a processor vendor can implement new features in successive releases of a processor model without requiring a kernel vendor to release a corresponding update to the kernel software with each new processor release. Instead a machine readable description of a new feature can provide the information necessary for the kernel to support the feature.

In one embodiment the machine readable description of the feature comprises a section that stores information that identifies a type of processor in which the feature is implemented and another section containing information that can be processed to detect presence of the feature within a processor of the identified type. The description may also comprise another section that stores information that can be processed to enable operation of the feature within a processor of the identified type. The description may further comprise another section that stores information that can be processed to disable operation of the feature within a processor of the identified type. The description may also comprise a section that stores information identifying state within a processor of the identified type that is associated with the feature. Such information may further identify whether the state must be saved prior to the processor switching context between two threads of execution or switching context between two virtual processors in a system employing a partitioning kernel. The description may further comprise a section that stores an identifier associated with the feature and a textual description of the feature as well as a section that stores a digital signature computed over at least a portion of the description. The signature can be processed to confirm the provenance of the description.

The present invention is directed to a machine readable description of a new feature of a processor a method of generating same and a method of using the machine readable description to detect enable and manage operation of the feature in a computing system. An operating system kernel a partitioning kernel or the like can be programmed to receive the description of the feature and to use information provided by the description to detect enable and manage operation of the new feature. With the present invention a processor vendor can implement new features in successive releases of a processor model without requiring a kernel vendor to release a corresponding update to the kernel software with each new processor release. Instead a machine readable description of a new feature can provide the information necessary for the kernel to support the feature.

Referring to the exemplary computing system comprises a central processing unit a graphics processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computing system may include a variety of computer readable media. Computer readable media can be any available media that can be accessed by computing system and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise both computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information or data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology memory cards memory sticks compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing system . Communication media typically a carrier wave or other transport mechanism or signal that is modulated to transmit information including program code and data from one location to another. The term modulated signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above are also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computing system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . The operating system may comprise a kernel . RAM may contain other data and or program code as well.

The computing system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM DVD or other optical media. The computing system may also incorporate various means for writing to and reading from any of the other forms of computer readable media described above. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of program code data structures program modules and other data for the computing system . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computing system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite receiver scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interfaces and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computing system may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or any other type of computing system and typically includes many or all of the elements described above relative to the computing system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computing system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computing system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computing system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Machine Readable Description of a Feature of a Processor and Methods for Generating and Processing Same

Referring to a section of the description referred to herein as the Processor section defines a header for the description that stores information that identifies a type of processor in which the feature is implemented. A kernel may use this information to determine if the feature description applies to the processor on which it is running.

Another section of the description referred to as the Detect section contains information that can be processed to detect presence of the feature within a processor of the identified type. This section may be used by a kernel to detect if the feature is supported by the particular processor on which the kernel is running. In the case of a partitioning kernel the information in this section may also be used to identify additional registers and or bits of registers that the partitioning kernel must make visible to a guest operating system in order to expose the feature to the guest.

Another section of the description referred to herein as the Enable section stores information that can be processed to enable operation of the feature within a processor of the identified type. Typically features within a processor are enabled by setting certain bits in certain registers of the processor. In one embodiment therefore the Enable section specifies the values to which such register bits must be set to enable operation of the specified feature. A kernel can then set the appropriate register bits in the processor to the specified values to enable operation of the feature. Conversely in one embodiment the feature can be disabled by setting these register bits in reverse order to the inverse of the bit values specified in the Enable section .

Another section of the description referred to herein as the Detect section may store information that can be processed to disable operation of the feature within a processor of the identified type. For example just as certain register bits may have to be set to certain values to enable a feature certain register bits may have to be set to other values to disable a feature. As mentioned above with respect to the Enable section however it may be possible for a kernel to disable the feature simply by setting the register bits identified in the Enable section in reverse order to the inverse of the bit values specified in that section. In such a case it may not be necessary to provide the Detect section. In one embodiment the omission of a Detect section from the description is interpreted as an indication that the feature can in fact be disabled by setting the register bits identified in the Enable section in reverse order to the inverse of the values specified in the Enable section .

As mentioned above a new feature of a processor may introduce new registers or add new previously reserved bits to existing registers. Another section of the description referred to herein as the Context section stores information identifying such new processor state. A kernel may use this information to determine what state must be saved prior to the processor on which it is running switching context for example between two threads of execution in the case of a traditional operating system kernel or between two virtual processors in the case of a partitioning kernel. In the case of a partitioning kernel this information may also be used to identify new registers or register bits that must be handled appropriately to maintain security between partitions.

In order for a kernel to be able to save the additional state identified in the Context section the code that implements the context switching in the kernel traditional or partitioning may need to be modified to support variable size thread context and to allow the context to be extended at runtime. Such modifications can be implemented in many ways including for example implementing a thread relative table driven save restore engine in the kernel or implementing thread specific context switch code that is just in time assembled for each thread. The address spaces chosen would allow for a simple assembler in the kernel to build such a code stream to be appended to a library of standard context switch code.

Another section of the description referred to herein as the Advertise section stores an identifier associated with the feature and a textual description of the feature. A kernel may return these values in response to a query from a client requesting information about features available on the processor. A client requesting such information may be an operating system an application program or some other program module. With this information a client could then request that a feature be enabled for its use.

A last section of the description referred to as the Signature section may store a digital signature computed over at least a portion of the data structure. This signature can be processed to confirm the provenance of the data structure. In one embodiment the signature may comprise a standard RSA digital signature computed over at least a portion of the description . In one embodiment the signature may be signed by a private key associated with the processor vendor. The public key needed to process the signature to verify the provenance of the description could be distributed in a variety of ways. For example the public key may be embedded within a given processor model. Alternatively the kernel or other control code executing on a processor may obtain the public key from a database based on the identified vendor of the processor e.g. the vendor identified by the value returned by CPUID 0 .EBX ECX EDX in the x86 architecture .

It is understood however that other means of delivering the description may provide sufficient security such that the Signature section is not required. For example a processor vendor could embed a feature description in the processor itself certain model specific registers MSRs could be used for this purpose. Additionally in a computing system of the type illustrated in the feature description could be provided as part of the secure loader code within the processor. The present invention is by no means limited to any one delivery mechanism.

In the present embodiment after the Processor section each subsequent section begins with a header that describes its type size and version. One embodiment of the format of this section header is illustrated in . As shown in this embodiment the header may specify the type of the section as 

Specifically describes a CPUID MATCH data structure that defines the format of the CpuidMatch field of the Detect section . The Leaf field of the structure specifies the value in register EAX when the CPUID is issued and the subsequent fields specify the mask and match values to be applied over the values returned by the processor in the EAX EBX ECX and EDX registers in response to the CPUID instruction.

Thus one or both of the CpuidMask field and Register array of the Detect section can be used by a kernel to check for the presence of the particular feature to which a description pertains. Once the presence of the feature is confirmed the Enable section provides information that a kernel can use to enable operation of the feature.

As shown in an entry of the Registers array may contain an indication of the address space e.g. control register model specific register local APIC register of the register being identified a RegisterNumber field that specifies the offset of the register within the identified address space and a RegisterBitsMask field that indicates the bits of the register that are relevant to the new feature. For use with traditional operating system kernels the present embodiment may further comprise a SwitchWithThread flag that is used to indicate whether the identified bits i.e. state of the register are to be saved during a context switch from one thread of execution to another. For use with partitioning kernels the present embodiment may further comprise a SwitchWithProcessor flag that can be used to indicate whether the identified bits are to be saved during a context switch from one virtual processor to another. A LazyProcessorSwitchOk flag may also be included to indicate whether it is only safe to do so lazily when a different virtual processor attempts to access the state associated with the new feature. Also to support the ability of a partitioning kernel to control access to the bits by a guest operating system the entry may further comprise UntrustedReadMask and UntrustedWriteMask fields that can be used to indicate bits that the partitioning kernel should prevent untrusted code from reading or writing respectively.

The present invention encompasses the method by which an entity such as a processor vendor generates a machine readable description of a processor feature and then distributes the machine readable description so that it can be received and processed by a computing system. It is submitted that a separate Figure illustrating the steps of such a method is not necessary as the steps of the method simply comprise writing the information contained in the various sections of the description described above in a machine readable form. Such method steps may be performed by the entity manually or such steps could be performed in an automated fashion by program code that when executed by a computing system causes the system to write the various machine readable sections of the description. Moreover the present invention also encompasses a computer readable medium having stored thereon a data structure comprising all or some of the various sections of information described above.

As shown in at step a machine readable description of a processor feature is accessed by program code such as a kernel or other control code executing on a processor of a computing system. In an embodiment in which the machine readable description includes a Signature section this step may further comprise processing a digital signature contained in the Signature section using a public key associated with the vendor of the processor on which the program code is executing to verify the provenance of the description. As mentioned above in the case of the x86 and x64 architectures the processor vendor may be identified in the string returned as a result of executing a CPUID 0 instruction on the processor. This identification could then be employed to look up a public key associated with the vendor. In other embodiments the public key of the vendor may be retrieved from an embedded storage location within the processor itself. The present invention is not limited to any one method of obtaining the public key associated with the processor vendor.

Assuming that the provenance of the description is confirmed at step the information provided in the Processor section of the description is used to verify that the processor of the computing system is of the type identified in that section. Specifically in the present embodiment the mask and match values in the VendorString field and Model array are compared against the values returned by CPUID 0 .EBX ECX EDX and CPUID 1 .EAX respectively to verify that the processor on which the program code is running is one to which the feature description applies.

Next at step the information provided in the Detect section is used to detect the presence of the feature within the processor of the computing system. Specifically in the present embodiment the mask and match values specified in CpuidMatch field and Registers array of the Detect section are applied against the actual bits of the processor to ensure that the feature is present in the processor. In a partitioning kernel this information is used to allow guest operating systems access to the register bits and or CPUID leaves required to allow the guest operating system to detect the feature if it desires.

Assuming that the feature is present at step the information provided in the Enable section of the description may be used to enable operation of the feature within the processor of the computing system. Specifically the mask and match values specified in the entries of the EnableRegisters array are used to set the appropriate bits in the specified registers in order to enable the feature within the processor. As discussed above the information may also be used to disable the feature. In a partitioning kernel this information is used to allow guest operating systems access to the register bits required so that the guest operating system can enable the feature if it desires.

Next at step the information provided in the Context section of the description may be used to identify state within the processor that is associated with the feature. The information in this section may also be used to determine whether the identified state is to be saved prior to the processor of the computing system switching context between two threads of execution or between two virtual processors in a partitioned computing system. In a partitioning kernel this information is used to allow guest operating systems access to the state bits.

Finally step may be performed to extract an identifier associated with the feature and a textual description of the feature from the description. In the present embodiment this involves extracting the GUID from the FeatureGUID field of the Advertise section of the description and the textual description from the FeatureFriendlyName field. As mentioned above this information may be returned in response to a query from a client for information about the new processor feature. The unique identifier associated with the feature may also be used by a client to request that a feature be enabled. Such a client could use one of the APIs illustrated in for this purpose.

One example of an existing processor feature for which a machine readable description of the present invention could have been employed is the PAE Physical Address Extension feature implemented in the x86 architecture. The PAE feature is detected using a CPUID feature bit CPUID 2 .EDX 13 1 and is enabled when a PGE bit bit in control register CR is set. This feature allows an operating system kernel to indicate address translations that are global across all page tables. A machine readable description of this feature could have contained a Detect section specifying mask and match values to determine whether the CPUID 2 .EDX 13 bit is set to 1 and an Enable section providing mask and match values that could be used to set the value of control register bit CR 7 to 1. As there is no additional processor state associated with the feature other than the control registers that are already defined to be saved across context switches no Context section would be required.

Another example of a processor feature for which a machine readable description of the present invention could have been employed is the addition of the SYSENTER and SYSEXIT system call instructions that were added to the x86 architecture. These instructions can be used by ring 3 applications to quickly call a ring 0 kernel. As part of the addition of these new instructions three new model specific registers were defined in the processor architecture to hold the entry point address code segment and stack for the kernel. In a computing system employing a partitioned kernel this new state would need to be saved across context switches between virtual processors in different partitions. The feature is present when the CPUID 2 .EDX 21 is set to a value of 1. A machine readable description of the new feature could have included a Detect section with mask and match values to determine whether the CPUID 2 .EDX 21 bit is set and a Context section that identifies the three MSRs associated with the feature i.e. MSR 0x174 MSR 0x175 and MSR 0x176 . In this case each of the MSRs would be marked with SwitchWithProcessor flag and would have the UntrustedReadMask and UntrustedWriteMask fields set to allow all bits to be read written by a guest operating system.

All or portions of the methods of the present invention described above may be embodied in hardware software or a combination of both. When embodied in software the methods of the present invention or certain aspects or portions thereof may be embodied in the form of program code that when executed by a computing system cause the computing system to perform the methods of the present invention. This program code may be stored on any computer readable medium as that term is defined above.

As the foregoing illustrates the present invention is directed to a machine readable description of a new feature of a processor a method of generating same and a method of using the machine readable description to detect enable and manage operation of the feature in a computing system. It is understood that changes may be made to the embodiments described above without departing from the broad inventive concepts thereof. Accordingly it is understood that the present invention is not limited to the particular embodiments disclosed but is intended to cover all modifications that are within the spirit and scope of the invention as defined by the appended claims.

