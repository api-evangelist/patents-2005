---

title: Handling incoming data
abstract: So-called push technology enables reception of new contents automatically, i.e. without user initiation. In order to enable a connecting party to send data when a receiving application is not even running, and thus cannot receive the data, middleware simulating the application to a connecting party, and an active connection to the application by utilizing buffers is provided. More precisely, the middleware is arranged to buffer incoming data on behalf of the application, if the application is not receiving the data, and to allow the application to receive the buffered data when the application is again willing to receive the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707291&OS=07707291&RS=07707291
owner: Nokia Corporation
number: 07707291
owner_city: Espoo
owner_country: FI
publication_date: 20050201
---
The present invention relates to handling incoming data and particularly to buffering incoming data when an application to which the data is targeted is not active or not receiving the data for other reasons.

The evolvement of communication technology and user terminals has enabled versatile communication possibilities. The number of procedures to be carried out by a wireless terminal device such as a mobile station or a personal digital assistant PDA has increased considerably as a result of advances in mobile communication technology. For example a mobile station is no longer used for calls exclusively but the mobile station enables information to be processed and presented in a more and more versatile manner.

Different software applications for versatile communications have also evolved alongside. The introduction of hardware and software independent wireless Java programming language and especially J2ME Java 2 Platform Micro Edition technology which is suitable for the range of extremely tiny commodities such as smart cards or a pager all the way up to the appliances as powerful as a computer has accelerated the usage of web services via different applications called MIDlets. The MIDlets are applications designed to run on wireless Java enabled devices and they can access objects across the Internet via URL Uniform Resource Locator addresses as easily as on a local file system. Usually the MIDlets conform to Mobile Information Device Profile MIDP specification that specifies the architecture and the associated application programming interfaces API required for enabling an open third party application development environment for mobile information devices. The MIDP combined with a connected limited device configuration CLDC is the Java runtime environment for today s compact mobile information devices.

The MIDP 1.0 specified only one way to start a MIDlet manual activation by the user. This lack of choices limited the range of services that a MIDlet could provide in particular there was no way to receive new contents automatically. To overcome this the MIDP 2.0 specification introduced two new mechanisms to launch a MIDlet in response to an incoming connection or at a scheduled time i.e. without user initiation. These mechanisms make whole new classes of services possible by enabling receiving and acting on data asynchronously. The new mechanisms utilize an application management system AMS in Java environment also called JAM which is responsible for each application s life cycle installation activation execution and removal and especially a component called Push Registry in the AMS. When a MIDlet is active running the MIDlet itself is responsible for all communication events such as setting up and monitoring inbound connections. When a MIDlet is not active it can request the AMS to monitor inbound connections on behalf of the MIDlet and when an inbound connection occurs the AMS activates the MIDlet to handle the inbound connection.

In MIDP inbound connections may be message based such as short messages stream based such as a TCP socket or packet based such as a datagram. The message based inbound connections may buffer a pushed message. However when an inbound connection is not message based the MIDlet must open the connection promptly because a connecting party may start sending data immediately after the connection has been set up. One of the problems associated with the above arrangement is that it may take some time before the MIDlet is actually auto launched and able to start to communicate with the connecting party only after which data can be received. The delay may be quite significant especially if a user approval is needed to auto launch the MIDlet. Situations may then exist in which the connecting party starts to send data although the receiving MIDlet is not yet running and thus cannot receive the data.

An object of the present invention is to provide a method and an apparatus for implementing the method so as to overcome the above problem. The object of the invention is achieved by a method an electronic device a system and a computer program product that are characterized by what is stated in the independent claims. Preferred embodiments of the invention are disclosed in the dependent claims.

The invention is based on the idea of realizing the above problem and providing a mechanism for allowing incoming data to be received and stored in corresponding buffer s when the targeted application is not running or not receiving for other reasons the data at the time the data begins to come in and to enable the application to read the received data from the buffer s even when the connection via which the data was received no longer exists. In other words the invention is based on middleware between the actual application and operating system the middleware simulating the actual software to the connecting party and an active connection to the actual software by utilizing buffers.

An advantage of the above aspect of the invention is that if the receiving application is not launched in time data is not lost but the application can recover the data even if the connection is lost. Another advantage is that the connecting party can start sending data immediately after the connection has been established regardless of whether or not the application is already running.

The following embodiments are exemplary. Although the specification may refer to an one or some embodiment s in several locations this does not necessarily mean that each such reference is made to the same embodiment s or that a particular feature only applies to a single embodiment.

The present invention is applicable virtually to any communications environment in which applications need to be started in response to incoming connections. The communications environment may be based on a fixed communications system and or a wireless communications system and it may be even within a communications device. Applications communications systems environments and devices such as terminals especially in wireless communications develop rapidly. Such development may require extra changes to the invention. Therefore all words and expressions should be interpreted broadly and they are intended to illustrate not to restrict the invention.

In the following the present invention is described using as an example of a system environment whereto the present invention may be applied an environment relying on J2ME interfacing a CLDC virtual machine environment wherein Bluetooth API is utilized without restricting the invention thereto the invention is programming language independent as well as environment and API independent. It should be appreciated that the environments and the transmission methods used are irrelevant to the actual invention. Therefore they need not to be discussed in more detail here. The present invention primarily relates to buffering incoming data on behalf of a target application that was either not active or not willing to receive the data at the moment when the data began to come in. In this respect the applications have a first mode in which the application is receiving data and a second mode in which the application is not receiving data.

A device may be a user terminal or another piece of equipment that supports push technology principles and allows an application to be launched in response to an inbound connection to the application. The push technology principles mean that information may be sent to a target application device without a separate request by the target application device user of the device. To support the push the device must support one or more inbound connection types such as socket datagram or wireless messaging API WMA an example of the latter one being SMS Short Message sage Service messages. Thus the device may be any node or a host providing data transmission and or data and reception preferably capable of communicating over a network and or with a network if necessary . The device may be a non mobile apparatus such as personal computer PC or a server connectable to the network wirelessly or via a fixed connection. The device may also be a wireless mobile apparatus such as a mobile terminal or a PDA. The device is preferably a multi service device capable of running multiple applications that are able to receive incoming data from several devices even simultaneously via a network interface for example. Such devices are illustrated in US patent application publication US 2004 0186918 A1 which is incorporated herein by reference. However the invention is also applicable to devices capable of running one application that supports the push technology and may receive data only from one connecting party at a time.

In the example of the data receiving device comprises one or more applications herein called MIDlets and an application management system AMS or JAM in a Java environment and a connecting party i.e. data sending device comprises an external agent . An agent here covers a remote application a connecting application and as well as the part of the system device that performs information preparation and exchange on behalf of a client or server application in the client server model. Thus the external agent is responsible for initiation of inbound connections among other things. However it bears no significance to the invention how the connecting party i.e. the external agent is implemented and what features the connecting party contains. In some other embodiment of the invention the sending external agent may locate in the same device as the receiving party. In other words a device may comprise the agent the MIDlet and the AMS in which case the agent is external to the MIDlet. Naturally one device may be a sending device to a party and a receiving device to another party.

The AMS is as described above middleware that knows how to load MIDlets where to store them and how the user can launch them and for a closed MIDlet whether or not there are any connecting parties waiting for a MIDlet launching. A component of the AMS called Push Registry not shown in is in the MIDP 2.0 the component that exposes the push API and keeps track on push registrations i.e. on connection endpoints registered by MIDlets below also referred to simply as endpoints . Since the division of functions between the Push Registry and the AMS is rather artificial and implementation dependent the AMS is herein used as also covering the Push Registry and no division of functions is performed for the sake of clarity. The AMS or the push registry of the AMS according to the invention comprises one or more buffers for inbound connections. Preferably a separate data buffer exists or is allocated from a memory in response to an inbound connection to an endpoint i.e. for each separate external agent remote device sending data to a certain endpoint the buffers being maintained endpoint specifically. The invention does not restrict the number of buffers for one end point. Furthermore the buffer size and actions to be taken when the buffer overflows depend on the implementation. However the buffering technique used bears no significance to the invention. For example incoming data may be stored in a common buffer as long as from point of view of the MIDlets the data received from an external agent is separate from data received from another external agent and that the data can be dispatched to a proper MIDlet.

It is apparent to a person skilled in the art that the device may also comprise other entities functions and structures that need not be described in detail herein. Examples of these include processor s memory input output bus different user interfaces different APIs network interfaces a dispatcher with registry to oversee incoming data as disclosed in the above mentioned US patent application publication US 2004 0186918 A1 etc.

In the example illustrated in the network providing the connection between the sending device and the receiving device is based on the Bluetooth Wireless Technology. However the network may be some other near field wireless communication network such as ultrawideband Zigbee IrDA Infrared Data Association based data transmission network a WLAN Wireless Local Area Network or any other network implemented using wired or wireless data transmission technology. Wireless data transmission technology herein refers to any system that enables wireless data transmission to mobile terminals within the service area of the system. The system may also be GSM Global System for Mobile Communications GPRS General Packet Radio Service UMTS Universal Mobile Telecommunications System or any other corresponding mobile system. The network may also be a fixed network. It should be appreciated that the network bears no significance to the invention and in some embodiments no network is needed because information exchange occurs within a device.

In the embodiments illustrated with it is assumed that the AMS maintains a list of inbound connections that the AMS accepted during the time the MIDlet was not running the list also indicating whether the inbound connection is still active or disconnected i.e. lost . However it bears no significance to the invention how the necessary information is maintained.

In the sequence diagram of the MIDlet registers itself for connections to the endpoint by sending operation Register Connection to the AMS whereafter the MIDlet closes in point . Because of the registration and the MIDlet closing the AMS starts to monitor in point connection attempts on behalf of the MIDlet. In other words the AMS listens to data connections to the registered endpoint

When an external agent EA such as the device sends operation connect to the MIDlet in order to send data for example the AMS accepts the connection not shown in Figure and sends operation activate MIDlet in order to auto launch the closed MIDlet and depending on the implementation may prompt the user about the auto launch and even request permission to auto launch. Furthermore the AMS updates the inbound connection as accepted in point in the list. Since the external agent EA assumes that the MIDlet is running it sends data in operation to the MIDlet although the MIDlet has not yet been launched. The AMS buffers in point the received data. In other words the AMS allocates a buffer from the memory specifically for this connection and stores the data in the allocated buffer. When the external agent EA has nothing more to send it disconnects operation or the connection is lost due to other reasons such as the device moving out of the Bluetooth range and the AMS updates the list about this accepted connection being closed but some data being stored in the buffer and continues to monitor in point communication events on behalf of the MIDlet.

Then another external agent EA such as the device sends operation connect to the same MIDlet. This may occur parallel or overlapping with the above described communication of the external agent EA provided that the receiving device supports parallel inbound connections. However in this example they are successive connections. In response to operation the AMS accepts the connection and sends operation activate MIDlet in order to auto launch the MIDlet and depending on the implementation may prompt the user about the auto launch and even request permission to auto launch. The AMS also updates in point the list about inbound connection now being an accepted connection. Since the external agent EA also assumes that the MIDlet is running it also sends data in operation to the MIDlet although the MIDlet has not been launched yet. The AMS according to the invention buffers in point the received data. For buffering this received data the AMS preferably allocates a second buffer in which the data is stored. When the external agent EA has nothing more to send it disconnects operation and the AMS updates the list about this accepted connection being closed and continues to monitor in point communication events on behalf of the MIDlet. Another reason for the disconnection may be that the device moved out of the Bluetooth range for example.

In some other embodiment of the invention no operation is sent i.e. no attempt to auto launch a MIDlet having a pending auto launch request is made twice. However if the user is prompted about the auto launch the prompt is still preferably modified to indicate that another inbound connection has been initiated.

Then the MIDlet is finally launched in point and the monitoring of incoming connection attempts reverses to the responsibility of the MIDlet. The MIDlet then attempts to open all its registered connection end points i.e. in this example the connection corresponding to the only registered endpoint and sends operation notifier Connector open to the AMS. The AMS recognizes that the MIDlet wishes to open the connection corresponding to a registered endpoint and returns the appropriate connection object. The MIDlet then tries to open the connection by sending operation connection notifier.acceptAndOpen . In response to receiving that the AMS checks in point the contents of the list. In other words the AMS checks if there are any accepted connections to this registered endpoint or if there is any data buffered for this endpoint. Now the list shows two accepted closed connections thereby indicating that there is data received from two external agents in the buffers and the AMS sends operation i.e. immediately returns the first accepted connection as if it were still active. The MIDlet then sends operation read to read the buffered data. The buffered data in the first buffer is read and the AMS removes in point the connection relating to the first buffer from the list. The MIDlet then wishes to answer or perform any other operation on the first connection and sends operation targeted to the external agent . Since the inbound connection does no longer exists the AMS returns an exception which tells the MIDlet that the connection is no longer active.

The MIDlet then closes the connection not shown in and performs the same open read and close operations on the second connection. In other words the MIDlet opens the second connection by sending operation connection notifier.acceptAndOpen . In response to receiving that the AMS checks in point the list as explained above. Now because the list indicates that data received from the external agent is in the buffer the AMS sends operation i.e. immediately returns the second accepted connection as if it were still active. The MIDlet then sends operation read to read the buffered data. The buffered data in the second buffer is read and the corresponding connection is removed from the list. Next the MIDlet closes this connection not shown in .

The MIDlet then tries to open another connection and sends operation connection notifier.acceptAndOpen . In response to receiving that the AMS checks in point the contents of the list as described above i.e. the AMS checks whether there are any accepted connections to this endpoint or whether any data is buffered for this endpoint. Now the list is empty indicating that there are no active connections and no buffered data and the operation acceptAndOpen blocks until a remote device connects. In this example an external agent EA connects and acceptAndOpen returns operation and MIDlet can start communicating directly with the EA.

If the connection with the EA would have been alive when the MIDlet sent operation connection notifier.acceptAndOpen the MIDlet could have started to communicate with the remote device. The same applies to the connection with the EA.

In another embodiment of the invention the AMS may in response to a buffer relating to a lost connection being read send the MIDlet an exception or any notification to indicate to the MIDlet to close i.e. send operation . In a further embodiment of the invention the AMS may send the exception or a corresponding notification only after all buffered data has been read.

As can be seen from the above the MIDlet is able to read the data from external agents for example two different remote devices or from two different connections from the same remote device even after the connections are lost although the MIDlet performs exactly the same functions as it would have performed in a situation in which the MIDlet would have been running when inbound connections occurred and data were sent. In other words all the MIDlet has to do is to open all its registered connection end points. Herein attempts to open the inbound connections that are still active or those that were lost but contained some data will succeed i.e. the MIDlet will open these connections other attempts will block i.e. the MIDlet will be blocked in waiting for new incoming connections . If the opened connection is in fact a lost one an exception is thrown once the MIDlet reads the buffered data. After getting this exception the MIDlet will immediately try to close the connection and to open the same connection again. If there is another lost inbound connection with data on the same endpoint the MIDlet will again read the data receive an exception close the connection and try to open the connection again etc. until the MIDlet will be blocked in waiting for a new connection.

As is apparent from the above the present invention also provides a solution to a problem as how to deliver data received from different connecting parties to a MIDlet when it is finally launched when a communication protocol used allows several connecting parties to connect and send some data to the same end point before a MIDlet is auto launched and able to receive data. Furthermore it is apparent from the above that although the invention is applicable to all types of inbound connections it is especially suitable for end to end orientated connections i.e. for non messaging based connections.

If the MIDlet has been launched step i.e. it has moved to an active state is running and has opened the registered endpoint the inbound connection X is returned to the MIDlet and the MIDlet is now responsible for the inbound connection X step .

If the application has not been launched step and data Xn is received over the connection step the AMS stores in step the received data Xn to a first empty buffer for endpoint A as long as the data comes in.

If the MIDlet is not launched i.e. has not opened the registered endpoint during the data reception step and the inbound connection X is not terminated step the AMS continues the monitoring and repeating the above steps or some of them as many times as necessary until the MIDlet is launched after which the MIDlet starts to monitor inbound connections possible retrieve data from the buffers as explained above in connection with and will be discussed in more detail in connection with .

If the inbound connection X is terminated step the AMS updates in step the list about the inbound connection X being a closed connection with data available as described above with . The AMS then continues the monitoring and repeating the steps as discussed above.

Although not shown in for the sake of clarity when the MIDlet is closed again or uninstalled or the MIDlet s ability to receive data sent without a request from the external agent is disabled by the MIDlet closing the connection or removing the endpoint from the registered ones or the MiDlet launch is disapproved of or the device containing the MiDlet is switched off the AMS preferably empties buffers containing data for this endpoint or for all endpoints registered by the uninstalled MIDlet. Thus if the MIDlet quits without reading the buffered data the data buffered for the MIDlet is preferably lost. The fact that the data is not read indicates that the MIDlet is not interested in the data and the data is thus not buffered in vain.

If the operation was read one step the AMS checks in step whether or not there is any buffered data for endpoint A. If all the buffered data has already been read step the AMS returns in step an exception. If there still is buffered data the AMS sends in step data Xn from the buffer to which the data send over inbound connection X was buffered. While the data is read send the corresponding buffer is emptied. This way it is ensured that the data is stored and read according to FIFO first in first out principles. After a closed inbound connection has been simulated to be active and the relating data is read the inbound connection is then removed in step from the list. There is no reason why the connection should be on the list of accepted connections any more. 

It is apparent from the above that the MIDlet is able to access data sent to it while the MIDlet was not active by looping and reading the data.

If there are accepted connections the first accepted connection is returned in step . In other words acceptAndOpen returns immediately. If the first accepted connection is no longer alive step the MIDlet may only read the buffered data in step . At some point the MIDlet ends the communication and closes the connection in step regardless of whether the data was read or not . In response to this the connection is removed in step from the list of accepted connections. After closing the connection the MIDlet returns to step to decide whether or not it is willing to communicate with someone.

If the first accepted connection is still alive step the MIDlet can in step start communicating with the corresponding device including reading any buffered data received from this device. At some point the MIDlet ends the communication and closes the connection i.e. the MIDlet proceeds to the above described step .

If there are no accepted connections step the AcceptAnsOpen blocks step until a remote device connects. When a remote device connects the corresponding connection is returned and the MIDlet can start communicating with the corresponding device i.e. it proceeds to the above described step .

If the MIDlet is not willing to accept any connections step the MIDlet closes in step the endpoint by invoking close on a notifier object associated with the given registered endpoint. In response to the close all data related to lost connections to this registered endpoint are preferably discarded.

The sequence diagram of starts in a situation in which the MIDlet is active i.e. running and receiving data operation from an external agent EA. In this example the external agent EA disconnects operation . The MIDlet then after some time or immediately sends operation to the AMS operation indicating to the AMS that the MIDlet although running does not wish to receive data. The reason bears no significance to the invention.

In response to operation the AMS starts to monitor in point connection attempts on behalf of the MIDlet. When an external agent EA sends operation connect to the MIDlet in order to send data for example the AMS accepts the connection not shown in . Since the external agent EA assumes that the MIDlet is willing to receive data it sends data in operation to the MIDlet. The AMS according to the invention buffers in point the received data and updates a list indicating inbound connections having sent data. In other words the AMS allocates a buffer from the memory specifically for this connection and stores the data in the allocated buffer. When the external agent EA has nothing more to send it disconnects operation or the connection is lost due to other reasons and the AMS continues to monitor communication events on behalf of the MIDlet.

The MIDlet then is again willing to receive data and sends operation to the AMS. In response to this operation the AMS stops monitoring in point and sends information on received data in operation . The MIDlet then wishes to read the data and sends operation to read the buffered data. The buffered data in the corresponding buffer is read and the AMS updates in point the list indicating inbound connections having sent data i.e. it removes the connection relating to the emptied buffer from the list.

If the connection with the EA would have been alive when the MIDlet sent operation the MIDlet could have started to communicate with the EA before or after reading the data in buffer.

In some other embodiment of the invention the AMS may in response to operation i.e. instead of operation send the received data without any request from the MIDlet.

The steps points and operations function calls and related functions described above in are in no absolute chronological order and some of the steps and or points and or carrying out operations may be performed simultaneously or in an order differing from the given one. Other functions can also be executed between the steps points or within the steps points. Some of the steps points or part of the steps points can also be omitted. Other operations can be transmitted and or other functions points can also be carried out between the illustrated operations. For example depending on how the functions are divided between the AMS and the Push Registry and whether the buffers locate in the AMS or in the Push Registry some operations such as clear buffers in response to a MIDlet closing may be sent between the AMS and the Push Registry. The operations are only examples and may also comprise other information. Furthermore the operations may be different from the above mentioned operations and instead of operations some other format may be used.

The above embodiments uses a FIFO principle i.e. data is read in the order in which corresponding connections occurred. However it is possible that data is read in some other order for example the user may give the order when accepting auto launch or the corresponding connections may have priorities or a LIFO Last In First Out principle is used. Depending on the implementation the AMS may buffer the data in a correct order or the application may indicate to the AMS also the buffer wherefrom the data is to be read for example.

Although in the above the invention is described using MIDlets as an example of an application and the AMS as an example of middleware it is obvious for one skilled in the art that the invention is applicable to any other type of user program and middleware.

The system and devices implementing the functionality of the present invention not only comprise prior art means but also means for buffering incoming data on behalf of an application and means for simulating to the application inbound connections relating to the buffered data so that the data can be read by the application. More precisely they comprise means for implementing an embodiment according to the present invention. All modifications and configurations required for implementing the invention may be performed as routines which may be implemented as added or updated software routines application circuits ASIC and or programmable circuits such as EPLD Electrically Programmable Logic Device and FPGA Field Programmable Gate Array . Generally program products include routines programs modules objects components segments schemas data structures etc. which perform particular tasks or implement particular abstract data types and which can be stored in any computer readable data storage medium and which may be downloaded into a device.

It will be obvious to a person skilled in the art that as technology advances the inventive concept can be implemented in various ways. The invention and its embodiments are not limited to the examples described above but may vary within the scope of the claims.

