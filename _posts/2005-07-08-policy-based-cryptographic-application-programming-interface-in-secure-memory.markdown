---

title: Policy based cryptographic application programming interface in secure memory
abstract: Systems, methods, and apparatus are provided for policy protected cryptographic Application Programming Interfaces (APIs) that are deployed in secure memory. One embodiment is a method of software execution. The method includes executing an application in a first secure memory partition; formatting a request to comply with a pre-defined secure communication protocol; transmitting the request from the application to a cryptographic application programming interface (API) of the application, the API being in a second secure memory partition that is separate and secure from the first secure memory partition; and verifying, in the second secure memory partition, that the request complies with a security policy before executing the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08713667&OS=08713667&RS=08713667
owner: Hewlett-Packard Development Company, L.P.
number: 08713667
owner_city: Houston
owner_country: US
publication_date: 20050708
---
Application programming interfaces APIs generally execute in the same processing space as the corresponding application. The application has unprotected access to the API and its functions. The API for example provides calling conventions for the application program to access the operating system and other services. The architecture between the application and API however has given rise to security concerns.

The development of cryptographic APIs allows programmers and software developers to use strong cryptography without having to understand the implementation of cryptographic algorithms. As a result security has increased for many applications. Security issues however still exist for some applications utilizing cryptographic APIs.

Development paradigms that use cryptographic APIs depend on an application developer to have sufficient security knowledge with respect to selecting cryptographic algorithms key sizes key types and other cryptographic parameters. If the application developer does not have sufficient knowledge about such cryptographic parameters then security issues can arise. For example companies may be unable to verify or insure whether an application when using cryptographic APIs is performing operations that are using policy controlled APIs is violating company security policies. Further most security conscious organizations desire to have control over such parameters.

Security issues in cryptographic APIs can arise in other instances. As another example the cryptographic APIs such as the cryptographic API implementation libraries run in the same process space as the application. Thus the API and application are vulnerable to attack compromise misuse or other security breaches since the application has unprotected access to the API. A hostile process for instance could subvert the cryptographic API and obtain services the application is not entitled to receive.

Exemplary embodiments in accordance with the present invention are directed to systems methods and apparatus for policy protected cryptographic Application Programming Interfaces APIs that are deployed in secure memory partitions. These embodiments are be utilized with various systems and apparatus.

For convenience of illustration only a few computing devices are illustrated. The computing devices include a processor memory and bus interconnecting various components. Embodiments in accordance with the present invention are not limited to any particular type of computing device since various portable and non portable computers and or electronic devices can be utilized. Exemplary computing devices include but are not limited to computers portable and non portable servers laptops notebooks personal digital assistants PDAs tablet PCs handheld and palm top electronic devices compact disc players portable digital video disk players radios cellular communication devices such as cellular telephones televisions and other electronic devices and systems whether such devices and systems are portable or non portable.

In one exemplary embodiment at least one computing device is coupled or connected to a peripheral device . A peripheral or peripheral device is a computing device that couples to a computer in order to expand capabilities of the computer. Peripheral devices include but are not limited to drives such as optical tape floppy disk zip etc. printers scanners mouse keyboard monitors and other electronic devices that connect directly or indirectly to a computer.

The network is not limited to any particular type of network or networks. The network for example includes a local area network LAN a wide area network WAN the internet an extranet an intranet digital telephony network digital television network digital cable network various wireless and or satellite networks to name a few examples.

The Host computer system comprises a processing unit such as one or more processors of central processing units CPU for controlling the overall operation of memory such as random access memory RAM for temporary data storage and read only memory ROM for permanent data storage for storing an operating system OS a policy checking system and a non volatile data base or data warehouse for storing control programs and other data associated with host computer system . The processing unit communicates with memory data base policy checking system and many other components via buses .

In some embodiments the host computer system is located a great geographic distance from the network and or computing devices . Further the host computer system includes for example computers including personal computers computer systems mainframe computers servers distributed computing devices and gateway computers to name a few examples.

Those skilled in the art will appreciate that the computing devices and host computer system connect to each other and or the network with various configurations. Examples of these configurations include but are not limited to wireline connections or wireless connections utilizing various media such as modems cable connections telephone lines digital subscriber lines DSL satellite LAN cards and cellular modems just to name a few examples. Further the connections can employ various protocol known to those skilled in the art such as the Transmission Control Protocol Internet Protocol TCP IP over a number of alternative connection media such as cellular phone radio frequency networks satellite networks etc. or UDP User Datagram Protocol over IP Frame Relay ISDN Integrated Services Digital Network PSTN Public Switched Telephone Network just to name a few examples. Many other types of digital communication networks are also applicable. Such networks include but are not limited to a digital telephony network a digital television network or a digital cable network to name a few examples. Further yet although shows one exemplary system and network embodiments in accordance with the present invention can utilize various computer network architectures. Various alternatives for connecting servers computers and networks will not be described as such alternatives are known in the art.

Reference is now made to wherein exemplary embodiments in accordance with the present invention are discussed in more detail. In order to facilitate a more detailed discussion of exemplary embodiments certain terms and nomenclature are explained.

As used herein application programming interface API is a set of routines section of program that performs a particular task synonymous with procedure function and subroutine protocol format for transmitting data between electronic devices and or tool for constructing software applications. An API for example includes building blocks for enabling a programmer to build a software application that is consistent with a particular application or operating environment. Further as used herein an application or software application is computer software that uses a computer or processor to perform a task example one or more programs for end users . Applications are used in various embodiments such as but not limited to desktop environments document preparation systems example word processors spreadsheets media players application suites example bundled programs and other user software. Further yet as used herein a call or request invokes a routine program or variable of a program into effect. Calls and requests can specify for example the routine name and parameters.

In one exemplary embodiment of the policy checking system the cryptographic API implementation runs or executes in a separate and secure processing space or memory partition from the application that utilizes the services or resources of the cryptographic API implementation . A secure operating system includes secure memory partitions or processing space that insures applications running in one partition A cannot gain access and corrupt applications running in another partition B. Secure message passing between the two secure memory partitions enables the application and cryptographic API implementation to communicate. Specifically cryptographic API parameters are communicated to a separate process that actually implements the API.

In one exemplary embodiment the application makes API requests or calls via a secure messaging paradigm. The policy checking algorithm defines a security policy or rules for use and limitations of the functionality of the APIs example allowable cryptographic algorithms to use key sizes allowable hash algorithms etc. . The security policy describing the use and limitations of the APIs is securely established and cryptographically bound to the implementation of the cryptographic APIs. When the application makes API requests the policy checking algorithm evaluates the request with respect to the established security policy. If the request is valid i.e. the request does not violate one or more rules of the security policy then the request is carried out executed or permitted. If on the other hand the request is not valid i.e. the request violates one or more security policies then the request is denied or refused. In one exemplary embodiment cryptographic keys created by a prior call to one of the APIs are strongly typed to aid in policy and data protection.

According to block the policy checking algorithm receives a request. The policy checking algorithm evaluates the request according to predefined security policies and a decision is then made according to block . If the request is not valid then the request is denied according to block . If the request is valid then according to block the request is sent or forwarded to the cryptographic API implementation . The cryptographic API implementation then processes the request and returns.

Initially the application makes a request of the cryptographic API implementation . The request is made from the first secure processing space or memory partition A and is transmitted to the second secure processing space or memory partition A. Before the request is transmitted the cryptographic API formats encodes or encrypts the request to comply with a pre established communication protocol for interacting with the policy checking algorithm in the other secure memory partition.

A wide variety of different security policies are within embodiments in accordance with the invention. Such policies vary according to the desired level of security. Examples are provided to illustrate the breadth of such security policies but the examples should not be construed as limiting embodiments in accordance with the invention.

In one exemplary embodiment messages transmitted between the first and second secure memory partitions A B create cryptographic keys of a particular size and type. Cryptographic keys include symmetric and or asymmetric keys. Symmetric keys are generally kept within a restricted group of users or applications because if a message is encrypted with a symmetric key K then anyone knowing K can decrypt that message. By contrast in asymmetric keys at least one pair of keys is associated with each owner. One key of each pair of keys is private known and kept only by its owner . The other key is public i.e. the key is freely distributed to the public . A message encrypted with one of the keys of the pair can be decrypted only with the other key in the pair. In addition a message can be cryptographically signed with one of the keys in the pair and the second key in the pair can then be used to verify the authenticity of the specific message.

Various cryptographic key exchanges are within embodiments in accordance with the present invention. Such key exchanges for example include RSA Rivest Shamir and Adleman algorithms the Certicom ECC elliptic curve cryptography algorithm Diffie Hellman algorithms and any other cryptographic key exchange algorithm. Embodiments of the invention though should not be limited to any particular key exchange protocol.

According one exemplary embodiment the policy checking algorithm establishes the use of hashes or hashing algorithms. A hash value for example is a number generated from a string of text or data. The hash is generally smaller than the text itself and is generated by a formula. A hash function H for example is a transformation that takes an input m and returns a fixed size string called a hash value h such that h H m . This value is also called the message digest. In one exemplary embodiment cryptographic hashes are used. In a cryptographic hash the hash value is computationally simple to calculate for an input but it is difficult to find two inputs that have the same value or to find an input that has a particular hash value. Further the hash function can be collision resistant. The bit length of the hash code is sufficiently long to avoid having accidental hash collisions among truly different requests.

The security policy can also specify particular attributes of the messages or requests. For example the security policy can specify that valid requests utilize a particular cryptographic key size or a particular cryptographic algorithm or hashing algorithm such as SHA 1 or MD 5 .

Before transmitting the request to the cryptographic API implementation the cryptographic API formats encodes or encrypts the request according to the pre established security policy. The request is then transmitted to the policy checking algorithm and the request is evaluated to see if it complies with the security policy. If the request is validated then API parameters are sent to appropriate hardware and the request is executed.

Embodiments in accordance with the present invention can be implemented in a secure environment such as a secure cryptographic module. As used herein a cryptographic module is a set of software hardware and or firmware that utilizes a security policy example cryptographic algorithms and or key generation and that is contained within physical bounds of a module.

A bus interface couples to both the host bus and FIFO first in first out buffers and routing control module . The module couples secured components to the bus interface and provides inbound and outbound direct memory access DMA operations. A driver directs data flow in conjunction with the host system device driver.

The security sensing device includes sensors and or circuitry for detecting intrusions such as tamper detection penetration or erosion attacks. In one example the module is housed in an enclosure that employs a circuit to detect attempts to open the enclosure. Additional sensors for example can detect temperature fluctuations power sequencing radiation etc. In the event of a breach of security the memory can be erased and the processor shutdown.

The processor provides processing function for the module and provides control of secure cryptographic algorithms and processes. The processor is coupled to the various electronic components via a bus . The clock for example provides a source for time and date of events.

A cryptographic engine enables a wide variety of cryptographic technologies. By way of example the cryptographic engine can enable encryption processing such as data encryption standard DES processing SHA 1 hashing random number generation RSA and Diffie Heilman type algorithms etc.

Various types of memory such as RAM ROM and various forms of non volatile memory are provided. By way of example such memory includes persistent storage such as flash memory to maintain data. In some embodiments at least some portions of the memory are battery enabled. In absence of power to the module batteries provide power to volatile memory. Further batteries can provide power to the security sensing device such as to tamper sensing electronics 

Further memory security such as hardware locks can be provided to render areas or memory inaccessible. The memory security for example ensures that only authorized firmware or applications can alter specified executable code such as code of the operating system.

In one exemplary embodiment the operating system is secured within the cryptographic module . As used herein an operating system OS includes system applications and or software that direct control and management of hardware and basic system operations. The OS for instance provides a foundation for executing applications such as applications and APIs discussed in connection with .

In one exemplary embodiment the OS is secured within a bottom layer of memory. The applications such as application are positioned on top of the OS with the API layer positioned between the OS and application layer. Applications access services of the OS through the OS s API. Thus applications communicate with each other through APIs.

In one exemplary embodiment in accordance with the present invention the memory shown in is provided within a cryptographic module or secure hardware environment. The policy checking algorithm can therefore be executed within a secured boundary of memory that itself is within both physically and logically secured environment.

Embodiments in accordance with the present invention can be utilized in a wide variety of different applications. The following examples provide an illustration of this diversified applicability and use. Embodiments for example can be used in environments that require high security such as data confidentiality or application certainty i.e. verification that applications are not altered or accessed . Further examples include but are not limited to public key infrastructure PKI applications smart cards finance industry applications dedicated security appliances such as auditing servers that digitally sign documents data archival applications such as applications providing proof of non tampering trusted printing applications and other applications requesting secure computing or storage environments.

In one exemplary embodiment the flow diagrams are automated. In other words apparatus systems and methods occur automatically. As used herein the terms automated or automatically and like variations thereof mean controlled operation of an apparatus system and or process using computers and or mechanical electrical devices without the necessity of human intervention observation effort and or decision.

Embodiments in accordance with the present invention have a wide variety of applicability and configurations. For example the first and second secure memory partitions A B can be located in separate cryptographic modules. Further messaging or communication between the first and second secure memory partitions A B can occur over a network such network of . Further yet the first and second secure memory partitions can be proximate each other such as located in the same cryptographic module or geographically located a great distance from each other such as being in separate cryptographic modules .

The flow diagrams in accordance with exemplary embodiments of the present invention are provided as examples and should not be construed to limit other embodiments within the scope of the invention. For instance the blocks should not be construed as steps that must proceed in a particular order. Additional blocks steps can be added some blocks steps removed or the order of the blocks steps altered and still be within the scope of the invention

In the various embodiments in accordance with the present invention embodiments are implemented as a method system and or apparatus. As one example exemplary embodiments are implemented as one or more computer software programs to implement the methods described herein. The software is implemented as one or more modules also referred to as code subroutines or objects in object oriented programming . The location of the software whether on the host computer system of a client computer or elsewhere will differ for the various alternative embodiments. The software programming code for example is accessed by a processor or processors of the computer or server from long term storage media of some type such as a CD ROM drive or hard drive. The software programming code is embodied or stored on any of a variety of known media for use with a data processing system or in any memory device such as semiconductor magnetic and optical devices including a disk hard drive CD ROM ROM etc. The code is distributed on such media or is distributed to users from the memory or storage of one computer system over a network of some type to other computer systems for use by users of such other systems. Alternatively the programming code is embodied in the memory and accessed by the processor using the bus. The techniques and methods for embodying software programming code in memory on physical media and or distributing software code via networks are well known and will not be further discussed herein. Further various calculations or determinations such as those discussed in connection with the figures are displayed for example on a display for viewing by a user.

The above discussion is meant to be illustrative of the principles and various embodiments of the present invention. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

