---

title: Schematization of establishing relationships between applications
abstract: Establishing relationships between one or more entities of a first application and one or more entities of a second application using metadata. At least one entity of the second application is identified for establishing a relationship with at least one entity of the first application. Metadata from the second application is received at the first application. The metadata includes information associated with the identified entity of the second application. An expression is generated, based on the metadata, specifying a relationship between the entity of the first application with the identified entity of the second application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07693861&OS=07693861&RS=07693861
owner: Microsoft Corporation
number: 07693861
owner_city: Redmond
owner_country: US
publication_date: 20050628
---
Business workflow or process oriented software applications are often used to manage how different entities with organizational roles e.g. persons or individual interact with various tasks such as in workflow processes. For example in a typical purchase order fulfillment workflow process an order fulfillment clerk may be responsible for receiving the order from a customer a manager of the customer s region may be in charge of approving the order an inventory manager may have the duty to identify the availability of the ordered product and a shipping department manager processes the shipment of orders. In many instances any individual in the same role such as a manager may perform the task. However business workflow software applications need to resolve situations where a specific individual of a specific role must perform a particular task. For example an expression such as this.customer.region.manager requires an identification of the individual who is entitled to play the role for this particular workflow instance.

While the workflow application may specify different entities or actors e.g. the order fulfillment clerk the sales manager or the like for performing a task information relating to each of these entities may be managed by another system such as a personnel directory managing system or a directory data source. Such personnel management system or data source includes personnel role information including personnel access restrictions task assignment rights and privileges task delegation rights and the like.

Currently the workflow application and the personnel management system do not interact with each other efficiently such that the workflow application has information relating to entities of the personnel management system or a data source. For example a workflow process definer or modeler who defines an order management process may wish to ensure that a particular task must be approved by a second level manager of the initiator of this process instance. Suppose a purchase order process is initiated by a fulfillment clerk and that there are four different departments in the organization each with a different organizational hierarchy maintained by the personnel management system. Within each department the second level manager of the fulfillment clerk may be a different person and may perform a task specific to the department. For example a second level manager in the sales department may approve an order initiated by a sales fulfillment clerk while a second level manager in the accounting department does not approve but rather supervises an accounting fulfillment clerk s tasks. Consequently the workflow process definer in this example is required to statically specify a separate role task logic to each department.

As illustrated in the example above in addition to requiring knowledge of relationships conventional workflow applications and other business systems need to resolve role definitions within the relationships of the personnel management system. For example role definitions include references to information such as relationships between personnel and business entities and entities in the workflow system itself. The example this task must be approved by the manager of the region in which this customer is situated which may be expressed as this.customer.region.manager illustrates that the role resolution requires both the entities known to the workflow i.e. this customer and the relationships that are known only to personnel and business systems i.e. what region does this customer reside it and who is the region manager .

Some workflow applications and personnel role management software applications interact with one another to establish relationships between the entities of the workflow applications and personnel role management software applications. However it is required that both sets of applications are manufactured or designed by the same manufacturer. In other words information relating to relationships among entities or personnel hierarchy structure is unavailable to a third party workflow software.

Other directory access software or protocols attempt to make role information available from the role management software application. In addition such directory access software may retrieve and access basic information e.g. first name last name or the like from online phone books across platforms. These attempts however are inefficient and fall short of providing information about how people are associated with non people entities like regions manager of region and products designer of this product . Without being able to access to this information it is difficult for developers to establish relationships between roles and entities in the workflow management application and roles and entities in other applications in the business.

In addition even when the information relating to entities is available e.g. via generic access such as open database connectivity ODBC integration adapter methods Web Service operations and custom APIs the burden of creating business role expressions falls heavily on the developer who implements the process per the developer s higher level model diagrams and instructions. Using the example above in order to design the task must be approved by a second level manager of the customer s region of an initiator of this process instance a workflow process definer is required to resolve relationships between second level manager initiator and the manager of the customer s region . Currently not only is such relationship information unavailable even if available the information does not expose methods to help the definer reduce the burden in creating business role expressions.

Also current systems and implementations are deficient and lack flexibility because the defined complex business role expressions are unique and specific to the particular business role expression. Thus different definers while defining a role expression for a similar or identical relationship as another definer may not use the same role expression as another definer because different definers in different domains write code for the same purpose task very differently. Moreover the readability of the current process model is low as there is no uniformity in designing and defining role expression. To a non technical user of a workflow process application attempting to understand proper relationships between entities from arbitrarily crafted rules or codes further complicate the matter.

Embodiments of the invention use extensible metadata including information relevant to establishing a relationship between entities of a workflow application and another application or a data source. By obtaining or receiving the metadata a business role expression may be generated such that relationship information of entities such as person to person person to non person entities role to role role to entity or the like is available to the workflow application and that workflow application may correctly operate knowing the proper relationships between entities and workflow processes. In another aspect of the invention using this metadata schematization makes integration of information of entities relationships available to distributed systems such as web services or standardized protocols so that it reduces the burden on process role builders or definers to multiple business role expressions unique for one entity or process.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring first to a block diagram illustrates a system for establishing relationships between one or more entities of a first application and one or more entities of a second application according to one embodiment of the invention. For example the system may be a computing system such as a computer in a computing device a computer server a plurality of computer servers or other computing device that is capable of executing computer executable instructions applications application software computer executable routines or codes. In another embodiment system includes computing devices in a distributed system in which the computing devices are connected by a common communication network such as an intranet an internet or the like.

The applications include the first application and the second application to Nth application N. As an example the first application may be a workflow application program including various workflow tasks and the second application may be a data store or application such as a customer relationship management CRM application personnel directory or the like. The second application may include data relating to entities. Such data may include a class of data that may be a source of many relationships or a target. Exemplary entities include customers employees products documents and individuals who perform a task.

As an illustration is a block diagram describing an exemplary first application and exemplary second applications according to one embodiment of the invention. For example the first application may be a workflow process application including an order management workflow process which includes entities such as task name assignee expression escalate to expression customer name order name and or product names in order to have the process performed.

Similarly the second applications include an organizational directory data store a CRM application and a product life cycle management application . However each of the second applications may define different relationships between entities within its hierarchical structure from others. For example in the organizational directory data store an employee has a manager and a manager may in turn have another manager. Therefore according to this example it is valid to think of relationships between entities as manager of manager of e.g. person P . Similarly the CRM application includes relationships between its entities but the relationships are not hierarchical. For example a manager may be in charge of overseeing a region but the relationship of an expression such as a Manager of a Region of a Region or a Manager of a Manager of a Region does not represent a logical relationship in this application . Likewise the product life cycle management application includes some hierarchical relationships but there is non relationship information associated with a relationship. For example an engineer may author a document and within such a relationship there is a time dimension or time limitation. Such time limitation may be treated as a qualifier to end the relationship i.e. the relationship between the engineer and the document may exist only within such time limitation. At the same time such time limitation may also start a relationship. For example document A may be authored by engineer A before engineer B.

Therefore in order to seamlessly interact with second applications the process of first application may wish to know the relationships between the entities within second applications so that a user of first application may properly design a logical workflow process to interact with entities of second applications. Embodiments of the invention establish relationships between one or more entities of first application and one or more entities of second applications by receiving at first application metadata from second applications the metadata including information associated with the identified entities of second application . For example metadata may include business role information such as role access permission role access privileges role type role limitations role to role relationships or the like. Additionally metadata may include business entity information including information pertaining to a business entity hierarchy e.g. entity hierarchical structure entity command structure or the like or information pertaining to a relationship graph e.g. non hierarchical relationship structure or the like .

After receiving the metadata from second applications embodiments of the invention generate based on the metadata an expression specifying a relationship between the entities of the first application with the entity of the second application. For example in composing or defining the process a user of first application may wish to express the process as This.Task IsAssignedTo or This.Task IsDelegatedTo . Through the generated expression the user of first application may properly and suitably create a workflow process that not only fits the entities hierarchical structure but also complies with necessary limitations in interacting with the entities. Such generated expression creates ease of understanding the relationships between entities among applications and promotes a uniform format of the expression. In this manner the generated expression may be flexible re usable and yet relatively easy to define and reuse the expression handling complex workflow processes among applications.

In an alternative embodiment first application and second applications expose information about relationships between entities as metadata to be discussed in Tables 1 and 2 and such that first application and second applications may access and obtain information relating to relationships between entities of first application and second applications .

Table 1 describes exemplary metadata entries exposed or to be collected from a second application such as CRM application 

For example in line 2 of Table 1 metadata includes information that indicates this entity is an Employee entity. Also the Employee entity is capable of being an Actor an type of entity that is capable of performing a task in a business process. In one embodiment this Employee entity has an entity reference of ER1 such that entities may be shared using this entity reference value. For example all orders handled by the same employee would have the same value for the entity reference. At the same time when referencing the entity reference by entering a query for ER1 system would return information about name of the employee who has the entity reference value ER1 .

In line 3 of Table 1 the metadata describes a region entity. According to Table 1 the region entity is not an actor i.e. IsActor false . Similar to entity reference value the region entity has an entity reference value of ER2 .

In addition to information relating to entity type the metadata also includes information associated with relationships between entities of the second application in lines 5 8 in Table 1. In this example a relationship called RegionManager describes a relationship between an employee entity and a region entity. As described this relationship is unidirectional see line 8. The metadata also provides that this relationship cannot be meaningfully composed with another relationship of the same type.

Still referring to Table 1 metadata in lines 9 13 describes an employee to employee relationship called manager . While this relationship is also unidirectional the metadata indicates that this relationship can be meaningfully composed with another relationship of the same type i.e. IsComposable true .

It is to be understood that the metadata format provided in Table 1 is for exemplary purposes and does not limit embodiments of the invention. For example a common or frequently used metadata format such as XML tags or the like may be used without departing from the scope of the invention. In addition while examples in Table 1 only illustrate one relationship between entities in the second application metadata of one or more relationships between one or more entities of the same type between one or more entities of different types or within the same entity type may be defined by the second application without departing from the scope of the invention.

In an alternative embodiment metadata in the second application may include information such as relationships between an entity in one business application and another entity in another business application.

In another alternative embodiment processes or tasks of the first application may also expose or cause to be collected metadata including information associated with entities of the first application. Table 2 describes exemplary metadata including information associated with a workflow process 

In the above example in lines 14 17 metadata from the process describes information about a product and a region. For example according to the metadata the product entity is not an actor entity that may perform a task. The metadata also indicates that the product has an entity reference value of PER1 . Similarly a region entity of this process is also not an actor and has an entity reference value of PER2 .

In one embodiment metadata in lines 18 21 describes any previously defined or generated expression associated with this process. In this example illustrated by Table 2 an actor assignee is associated with an instance TaskId 222 of the process. In line 20 this actor assignee is associated with an expression EID1 . In other words in task ID 222 the product with entity reference value PER1 has been assigned to an assignee in the region with entity reference value PER2 . Similarly metadata in lines 22 25 indicates that also in task ID 222 the same product has been escalated by an escalatee for the region with entity reference value PER2. 

As such in an alternative embodiment the generated expression is represented in metadata of a process to describe a given expression establishes a relationship between a process e.g. process of first application and an entity e.g. an employee or manager in the CRM application of second applications .

In a further embodiment metadata relating to entities of first application includes information relating to whether a particular relationship type can be composed with another relationship of the same type. For example the business entity hierarchy or relationship graph information of the metadata may include information to traverse through an organizational hierarchy or a business relationship graph e.g. sub contractor of sub contractor of x . In yet another alternative embodiment metadata may include information associated with whether a particular relationship type can be restricted or qualified along some generic dimension or continuum e.g. time dollar amount or other metrics values defined by the first application and the second application.

It is to be understood that applications software or programs other than a workflow process applications may be treated as first application in establishing relationships with second applications without departing from the scope of the invention. Also applications including data stores data warehouse or the like may be treated as second applications without departing from the scope of the invention.

Referring again to system includes a processor associated with an interface . The processor processes instructions or commands from a user via the interface and executes computer executable instructions routines applications application programs or the like. The interface receives instructions from the user to identify at least one entity of second applications for establishing a relationship with at least one entity of the first application such as the user defining the process . In one embodiment interface receives at the first application metadata from the second application said metadata including information associated with the identified entity of the second application In another embodiment the interface may be a display such as the display shown in and the user may use an input device such as a mouse or a keyboard to select or identify one or more entities of first application displayed on the display.

The system also includes a memory which may be a volatile non volatile a system memory or a non volatile memory interface of or other computer readable medium for storing data that may be transmitted across a common communication network such as an internet an intranet or other types of communication networks. The memory stores metadata received from second applications .

Still referring to processor generates the expression based on the metadata. The expression specifies a relationship between the entities of the first application with the entities of the second applications . For example processor identifies the business role information and the business entity hierarchy or relationship graph information of the identified entity of the second application and associates the identified information with the entity of the first application.

For example a generated expression may include information derived from arrow about a customer and a region including the customer as Use Customer from process data context to query CRM application for Region of customer . Similarly a generated expression may include information derived from metadata indicated by arrow which describes the relationship between the actor entity and other entities in addition to the information received from arrow as Use region of customer to retrieve regional manager from CRM application applying the filter for regions within state of Washington. As such embodiments of the present invention propose possible relationships between the entities of the first application and the entities of the second application through the received metadata from the second application.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage medium and communication media. Computer storage mediums include volatile and nonvolatile removable and non removable storage media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage mediums include RAM ROM EEPROM flash memory or other memory CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other storage medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connection shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a Web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in . For example computer is configured to execute a computerized method of establishing relationships between one or more entities of a first application and one or more entities of a second application. At least one entity of the second application is identified for establishing a relationship with at least one entity of the first application. Metadata from the second application is received at the first application is received. The metadata includes information associated with the identified entity of the second application. An expression is generated based on the metadata specifying a relationship between the entities of the first application with the identified entity of the second application.

The order of execution or performance of the methods illustrated and described herein is not essential unless otherwise specified. That is elements of the methods may be performed in any order unless otherwise specified and that the methods may include more or less elements than those disclosed herein. For example it is contemplated that executing or performing a particular element before contemporaneously with or after another element is within the scope of the invention.

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

In view of the above it will be seen that the several objects of the invention are achieved and other advantageous results attained.

As various changes could be made in the above system and method without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

