---

title: Accessing a USB host controller security extension using a HCD proxy
abstract: Systems and methods for enabling trusted software to monitor and control USB traffic associated with a security extension of a host controller and devices in a USB topology is disclosed. A host controller proxy receives USB-related data from a host controller driver, determines whether the data is of a security interest, and if so, sends the data to a driver for a security extension executing in the trusted execution environment. Likewise, after software executing in the trusted execution environment evaluates and appropriately addresses data sent by the HCD proxy or data retrieved from a hardware security extension, the HCD proxy receives data from the trusted execution environment for further dissemination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07886353&OS=07886353&RS=07886353
owner: Microsoft Corporation
number: 07886353
owner_city: Redmond
owner_country: US
publication_date: 20050325
---
This application is related to U.S. patent application Ser. No. 11 090 547 entitled Using a USB Host Controller Security Extension for Controlling Changes in and Auditing USB Topology filed herewith and incorporated by reference in its entirety.

The invention generally relates to the field of the universal serial bus USB and specifically to the security of data associated with the USB.

Attacks to the security of a computer system may take a form of attacking data associated with peripheral devices that are connected to the computer system through a universal serial bus USB . Such peripheral devices include digital telephone lines modems mice printers scanners game controllers keyboards and other peripheral devices. For example snooping attacks may be directed to intercepting data such as a credit card number inputted through a keyboard. Another attack may substitute a device of the attacker s choice with a computer system s keyboard and deceive the system into communicating with the device as if it was the keyboard.

Computer systems may include a trusted execution environment that includes trusted software. Trusted software is executed only in the trusted execution environment through use of processor support such that the software is not vulnerable to attacks. The trusted execution environment may be isolated or partitioned from the execution of other software on for example an operating system of a computer system. Such isolation may help ensure the security of certain operations performed on the computer. In a computer system with a trusted execution environment it may be desirable to secure certain USB peripheral devices to protect against attacks on or associated with the peripheral devices.

Peripheral USB devices are connected to and communicate with a computer system that is a host through a host controller. Peripheral USB devices send data to and receive data from the host through the host controller. Program code controlling the operation of the host controller that is the host controller driver HCD may reside on the host outside of the trusted execution environment. The host controller driver receives data from program code controlling or associated with each peripheral device. Such program code may be the device driver for each peripheral device. The host controller driver sends data to the appropriate device through the host controller. The host controller driver makes sure that data sent to the host controller from a peripheral is delivered to the appropriate device driver.

For certain peripheral devices called trusted devices data associated with the USB devices may be diverted to the trusted execution environment. Trusted that is secure USB devices send data to and receive data from the trusted execution environment. Data sent by a trusted device such as a trusted keyboard may be diverted by secure hardware located within the host controller for processing in the trusted execution environment. This secure hardware is referred to as a security extension SE . Likewise data sent to a trusted USB device may be sent from the trusted execution environment thus ensuring that the trusted device remains secure. Some of the peripheral devices may not be of a primary security concern and therefore data associated with such devices may not be sent via the trusted execution environment.

The hardware SE on the host controller may not be accessible for program code running outside the trusted execution environment on the host. For example the HCD may be executed outside the trusted execution environment and therefore may be unable to control security related activity that takes place when hardware is programmed to secure certain peripheral devices. Trusted software executing in the trusted execution environment may likewise be unable to use the host controller driver to monitor or control USB traffic associated with the SE and may otherwise be unable to control the host controller. Additionally USB device drivers executing outside the trusted execution environment may control USB devices that were originally not trusted but that became trusted. These device drivers however may be unable to access the security extension.

Therefore there is a need for methods and apparatus to enable trusted software to monitor and control USB traffic associated with the SE and the devices in the USB topology.

The invention provides systems and methods for enabling trusted software to monitor and control USB traffic associated with a host controller security extension SE and devices in a USB topology. The systems and methods include a host controller proxy for receiving USB related data from a host controller driver HCD determining whether the data is of a security interest and if so sending the data to a driver for a security extension executing in the trusted execution environment. Likewise after software executing in the trusted execution environment evaluates and appropriately addresses data sent by the HCD proxy or data retrieved from a security extension the HCD proxy receives data from the trusted execution environment for further dissemination.

The HCD proxy thus enables trusted software such as a driver of a SE to monitor and control untrusted software without degrading the security nature of a system s trusted execution environment. The HCD proxy for example intercepts any data sent by a USB device driver that may be of a security concern and diverts it to the trusted execution environment for evaluation. Trusted software then can configure the SE to allow or prevent the transmission of data consistent with a security policy. Thus the invention includes an interface in a manner such that the information passed between the HCD and the security extension software module does not increase the vulnerability of the security model. Additionally the HCD proxy allows the HCD to continue servicing the device drivers that are already loaded for the trusted USB devices even though data generated by these devices is no longer available for the corresponding device drivers.

The term universal serial bus or USB refers to a cable bus that supports data exchange between a host computer and a wide range of accessible peripheral devices or functions. USB device USB function USB peripheral or peripheral refers to devices that may be attached or that are attached to a USB. USB devices functions or peripherals share USB bandwidth through a host scheduled token based protocol. The USB allows peripherals to be attached configured used and detached while the host and other peripherals are in operation.

While a general purpose computer is described below this is merely one example. The present invention also may be operable on a thin client having network server interoperability and interaction. Thus an example embodiment of the invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as a browser or interface to the World Wide Web.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a central processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

The hardware includes a USB host controller chipset with a hardware security extension SE and a USB topology . The USB host controller chipset is a hardware component to which USB devices are or may be attached. The USB host controller chipset includes several ports that are referred to as root ports or root hub ports. USB related data sent from for example a USB device driver to an associated USB device in the USB topology is delivered by the USB host controller chipset . Likewise data sent from a USB device in the USB topology to its device driver is delivered by or via the USB host controller chipset .

The USB topology includes USB devices that are connected downstream from the USB host controller chipset . The USB topology may also be referred to as a bus topology. The USB topology contains two types of USB devices USB hubs and USB functions. USB hubs are devices that have ports to which either hubs or functions may be connected. A USB function is a device that provides certain functionality such as a web camera or a printer. The USB topology is rooted at ports on the USB host controller chipset . These ports are grouped together and are generally referred to as a root hub.

The SE is a hardware device located on the USB host controller chipset or between the USB host controller chipset and the USB topology . The SE monitors the communication traffic between devices in the USB topology and the USB host controller chipset . The host controller chipset is not aware of the existence of the SE and therefore the SE may block USB packets that the USB host controller chipset sends to USB devices in the USB topology as well as block or divert data that a USB device sends to the USB host controller chipset .

The SE may include an SE buffer which is a memory region to which data coming from a USB device in the USB topology can be diverted. Because the SE buffer may only accessible by trusted software executing in the trusted execution environment software running outside of the trusted execution environment may not be able to access USB data sent to the SE buffer . Also software running outside the trusted execution environment may not be able to insert USB data into the SE buffer to deceive the system into believing that data was actually generated by a trusted input device.

The SE additionally may include an SE programmable interface . Trusted software thus may be able to control the operation of the SE through the programmable interface . Trusted software may instruct the SE to dispose of data sent from or to the USB topology in a particular manner. For example trusted software may instruct the SE through the SE programmable interface to copy contents of a data phase of a command to the SE buffer when the command is sent to a particular device address. Thus the trusted software may be able to read a device s USB descriptor and be certain that data has not be been for example tampered with snooped or spoofed.

The area outside of the trusted execution environment may generally include software for controlling and communicating with the USB related hardware . The area outside of the trusted execution environment may include a host controller driver HCD USB device drivers and a host controller proxy . The HCD is a software module responsible for interfacing with the USB host controller chipset . The HCD communicates with the USB host controller chipset through a hardware interface exposed by the USB host controller chipset . The HCD also exposes an interface that drivers running on the system can utilize for communicating with their corresponding devices.

Each of the USB devices in the USB topology typically is controlled by program code executed on the system . The program code may be grouped into software modules and each software module may control a USB device. The software modules are the USB device drivers . Different USB devices are controlled by different USB device drivers. For example a hub driver is a software module controlling a USB hub. For the most part these drivers are loaded such that the driver hierarchy matches the USB topology . Therefore as USB devices are added to or removed the appropriate drivers are loaded onto the system or unloaded from the system .

The HCD proxy communicates with the HCD and executes in the area outside the trusted execution environment . The HCD proxy includes a software module that interacts with both an SE driver located in the trusted execution environment and the HCD and delivers information back and forth between the two software components. The SE is programmed through the SE programmable interface based in part on information managed by the HCD .

The HCD proxy provides an ability for trusted software executing in the trusted execution environment such as the SE driver to communicate with the software that is not trusted e.g. the HCD without detrimentally affecting the security of the trusted execution environment or program code executed therein. The SE driver in the trusted execution environment obtains information about the USB topology and USB traffic generated by the USB device drivers . The USB topology as well as related requests from the USB device drivers are managed by the HCD and therefore having the HCD proxy to interact with the HCD and with the SE driver makes it possible for the latter to set the hardware of the SE based on USB information e.g. device addresses endpoint numbers managed by the HCD .

Because the HCD has limited or no access to the SE and therefore does not control which input devices in the USB topology to secure the HCD is not aware that input data generated by certain devices in the USB topology are diverted to the SE buffer . This means that the USB device drivers that the HCD previously loaded to manage non secure devices that are subsequently secured are still using the HCD . In order to make sure that the USB device drivers of trusted input devices in the topology get an appropriate response from the secure devices the HCD proxy monitors requests coming from the USB device drivers . Certain requests are passed directly back to the HCD so that they can be sent to the device in the USB topology while other requests are passed to the SE driver for further examination. The SE driver can configure the SE before the request is sent to the device.

The trusted execution environment may be isolated from the area outside of the trusted execution environment for security related reasons. Security policies are implemented or applied to program code memory and any other entities within the trusted execution environment to ensure that it remains isolated and secure. The isolation of software running in the trusted execution environment is provided using processor support so that the software is protected from software attacks. Software running in the trusted execution environment is generally referred to as trusted software.

One piece of trusted software within the trusted execution environment is the SE driver . The SE Driver is a software module for controlling the SE . The SE driver runs in the trusted execution environment and therefore has access to the SE programmable interface . Additionally the SE driver interacts with the HCD proxy in order to decide how to program the hardware of the SE .

At step the HCD receives the data. Typically at this point the HCD appropriately deals with the data by either for example queuing a transfer or sending a control command to the host controller. According to the invention however the HCD proxy intercepts the data at step . The HCD proxy is therefore in a position to deal with the data by sending it back to the HCD if it is not in a security sense interesting. Alternatively the HCD proxy may send the data at step to the SE driver in the trusted execution environment for evaluation and appropriate processing. For example if the data is a transfer request then the HCD proxy may queue it and when the HCD proxy learns that data associated with the transfer request has been generated by the USB device the HCD proxy may send the transfer request or other data to the trusted execution environment. The HCD proxy may send the data to the SE driver telling the SE driver to pull data from the SE buffer of the SE. If also for example the data is a control command then the HCD proxy may send the control command to the SE driver for appropriate evaluation and disposition.

At step the SE driver facilitates the evaluation of the data and performs any tasks or functions as appropriate. At step the SE driver sends a response to the HCD proxy. The response may be for example data that the device driver requested by issuing a transfer request. The data may be a response to a command control communicating to the device driver that the device has been appropriately configured. At step the HCD proxy sends the data received from the SE driver to the HCD for appropriate disposition by the HCD.

An input report generally describes a device s state. A HID input report or HID report is an input report generated by a HID such as the keyboard . When a HID device driver parses an input report it can infer which input event should be reported to the operating system . For example when a keyboard HID input report indicates that none of the keys of the keyboard is pressed the keyboard device driver may communicate to the operating system that any key previously pressed has been released.

It will be recognized that in order to establish a trusted input path between a user of the system and the system it may be required to differentiate USB input devices e.g. a keyboard or mouse from other devices e.g. a printer in the USB topology . Once the input devices are tracked the SE may be programmed to divert input data generated by the input devices to the SE buffer of the SE so that an adversary may be prevented from obtaining the input data. When the SE is programmed to divert the data of an input device to the SE buffer that device may be referred to as being a trusted input device.

When a USB HID is a marked trusted by the SE driver the HID input reports generated by the device are diverted by the SE to the SE buffer . As noted only software running within the trusted execution environment has access to the SE buffer . The USB device driver managing the device that was marked trusted typically is not aware of the transition from untrusted to trusted and therefore the driver continues polling the HID device by issuing requests for USB transfers. In order to read data from a HID device its USB device driver initiates a USB transfer. The transfer type depends on the HID device endpoint s type e.g. bulk interrupt. . For example when the keyboard device driver wants to read a HID input report from the keyboard it uses the HCD to initiate an appropriate USB transfer request. USB input devices generally report input data using an interrupt endpoint.

A task of the HCD proxy is to manage these transfers in a way that keeps the USB device constantly polled. Also there are cases in which the HID input reports are sent back to the USB device driver. The HCD proxy may use previously issued transfers in order to satisfy the driver s request. shows a sequence of events when handling a HID Report generated by the trusted USB keyboard . Of course embodiments of the invention may be equally applicable for other types of data and other types of devices in a USB topology such as the USB topology .

At step the keyboard device driver polls the keyboard in order to read HID reports from the keyboard . The keyboard device driver polls the keyboard by sending a USB transfer request to the keyboard through the HCD . The USB transfer may be directed at a specific endpoint on the device. The HCD passes all USB transfers including the transfer from the keyboard device driver to the HCD proxy at step . The HCD proxy decides what should be done with each transfer. It will be understood that the HCD proxy receives all USB transfers including those that are not directed to a trusted input device in the USB topology .

When the HCD proxy receives the USB transfer it determines whether the USB device to which the transfer is queued is a trusted input device. If the input device is not a trusted input device then the HCD proxy sends the transfer back to the HCD for normal non secure processing. The keyboard however is in this example a trusted input device and has previously been marked as such in the security extension by the SE driver . The HCD proxy thus will be responsible for sending the USB transfer request to the keyboard . The HCD proxy later will notify the HCD when the transfer is completed. At step the HCD proxy will place the transfer in a keyboard transfers queue for the keyboard .

In order to make sure the keyboard is constantly polled the HCD proxy may at step queue two transfers to the keyboard and place these queues in a keyboard queued transfers . Note that these transfers are not the same transfers that are queued in the control transfers queue at step . Two transfers may be created at step to ensure that when one transfer is completed by the keyboard there is still a pending transfer. It will be understood that there may be more than two transfers queued by the keyboard device driver and passed on to the HCD proxy and therefore step may not necessarily follow step . Additionally the HCD proxy calls into the HCD to queue these transfers as the HCD may be the sole software module interfacing with the USB host controller chipset .

At step the keyboard generates data such as when a user presses a key on the keyboard causing the keyboard to generate a HID report. The SE diverts the HID report to the SE buffer . In addition the SE zero length packet to the USB host controller chipset . This may be necessary to trigger the previously queued transfer to complete. When that happens the HCD proxy immediately resubmits a transfer to the same endpoint to make sure the device continues to be polled. Because the SE buffer includes data that should be fetched and processed in the trusted execution environment at step the HCD proxy instructs the SE driver to access the SE buffer and read the HID input report.

At step after the SE driver receives the notification from the HCD proxy it accesses the SE buffer and fetches any HID input report that the SE diverted from any trusted input device including the keyboard . It will be understood that the SE buffer may be shared between all trusted input devices in the USB topology . Therefore when the SE driver is notified that there is data associated with one device it might find HID input reports from more than just the keyboard .

Each HID input report including one or more HID reports generated by the keyboard that the SE driver fetches from the SE buffer is sent at step to a trusted input manager located in the trusted execution environment . The trusted input manager is a software module responsible for parsing HID input reports and routing them to the appropriate entity. In some cases the trusted input manager may decide to return the HID input report to the operating system so that it can be processed by the appropriate device driver.

At step the trusted input manager decides what to do with the HID input report generated by the keyboard as well as other input reports . The trusted input manager instructs the SE driver to send the HID report generated by the keyboard to the operating system and the SE driver sends the report to the HCD proxy .

The HCD proxy prepares to send the HID input report generated by the keyboard to the HCD at step . The HCD proxy removes a USB transfer from the keyboard transfers queue and places the HID input report in the transfer s buffer. At step the HCD proxy completes the previously queued transfer and at step the HCD receives the USB transfer and completes the corresponding request that was previously sent by the keyboard device driver .

Once the request sent by the keyboard device driver completes the keyboard device driver may resubmit a similar request which will in turn restart the sequence of events of the method . It should be understood that the data flow of the method takes place after the SE driver marks a device in the security extension from the USB topology as trusted. If the device is marked trusted after the HCD received USB transfer requests from a device driver the HCD may abort these requests and pass them to the HCD proxy so that they can be appropriately processed using the method .

For example purposes a hub device driver sends a USB control command to its hub in the USB topology . A USB control command that is a setup command is used to configure a USB device such as the hub . The hub device driver uses the interface of the HCD to send the command. Each USB device in the USB topology may include a control endpoint endpoint which is the destination of the control commands sent to the device. This endpoint may also be referred to as the default pipe. For example when the hub device driver wants to reset one of its hub ports on the hub it sends a Port Reset command to the hub .

In order to configure its hub the hub device driver instructs the HCD to send a setup packet to the hub at step . The hub device driver completes step by requesting a USB control transfer from the HCD . At step instead of sending the USB control transfer immediately the HCD passes the request to the HCD proxy . The HCD proxy may receive all the USB control transfers including those that the SE driver does not need to examine. In the example method the USB control transfer is one that the SE driver examines. The HCD proxy may send the command on to be delivered to the hub after the SE driver processes it.

At step the HCD Proxy places the USB control transfer in a control transfers queue with all pending USB control transfers. It will be understood that the queue may be global and not device specific. A USB control transfer is fetched from the queue at step and sent to the SE driver so that SE driver can scrutinize the nature of the command that the hub device driver sent to its hub . Upon receiving the USB control transfer request from the HCD proxy the SE driver checks the contents of the setup packet and acts accordingly to update its internal state. If needed the SE driver also adjusts the SE hardware settings of the SE so that the command can be properly sent to the hub through the USB host controller chipset . This is performed at step .

At step the SE driver notifies the HCD proxy that the command may be sent to the hub . The HCD proxy sends the USB control command to the hub by calling into the HCD at step . The HCD queues the command to the USB host controller chipset . That is the HCD proxy does not communicate directly with the hardware but uses the HCD to do so. When the USB control transfer is completed the HCD sends an appropriate notification to the HCD proxy at step . At step the HCD proxy completes the previously queued USB control transfer. In addition it removes the transfer from the queue as it is no longer pending. When the HCD is notified about the USB control transfer completion it completes at step the corresponding request so that the hub device driver is notified about the completion.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. A processor that executes program code for performing the steps of the methods of the invention as described in and and as claimed constitute a computer system that embodies the present invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the specific examples in conjunction with the various figures it is to be understood that other embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. The examples are offered in explanation of the invention and are in no way intended to limit the scope of the invention as defined in the claims. In summary in no way is the present invention limited to the examples provided and described herein. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

