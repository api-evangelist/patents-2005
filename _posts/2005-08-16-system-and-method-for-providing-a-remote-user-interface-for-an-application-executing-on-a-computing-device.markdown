---

title: System and method for providing a remote user interface for an application executing on a computing device
abstract: A system that includes a computing device configured to execute a software application and at least one remote user interface (UI) communicatively coupled to the computing device via a data communication network. The remote UI includes at least one hardware device such as a video, audio or user input/output (I/O) device. The computing device is further configured to emulate the hardware device locally and to redirect function calls generated by the software application for the emulated local hardware device to the remote UI for processing by the hardware device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844442&OS=07844442&RS=07844442
owner: Exent Technologies, Ltd.
number: 07844442
owner_city: Petach-Tikva
owner_country: IL
publication_date: 20050816
---
The present invention generally relates to user interfaces for an application executing on a computing device. In particular the present invention relates to a system and method for providing a remote user interface for an application such as a video game executing on a computing device.

Currently the platforms available for playing video games or other real time software applications in the home include personal computers PC and various proprietary console based systems such as the XBOX manufactured and sold by Microsoft Corporation of Redmond Wash. and the PLAYSTATION manufactured and sold by Sony Computer Entertainment Inc. of Tokyo Japan . These platforms are limited in various respects. For example a given PC can run only a single video game at a time since the video game requires exclusive control over both the graphics and audio hardware of the PC as well as the PC s display and sound system. This is true regardless of whether the game is being played on line i.e. in connection with a server or other PC over a data communication network or off line. To enable multiple end users to play different video games at the same time an entirely new PC or other gaming platform must be purchased and located elsewhere in the home. Furthermore the end user is confined to playing the video game in the room in which the PC is located.

The present invention provides a system and method for providing a remote user interface for an application such as a video game executing on a computing device. The system includes a computing device such as a personal computer PC configured to execute a software application and a remote user interface UI communicatively coupled thereto via a data communication network. The remote UI includes a hardware device such as a video audio or user input output I O device. The computing device is also configured to emulate a local hardware device and to redirect function calls generated by the software application for the emulated local hardware device to the remote UI for processing therein. The computing device may also be further configured to receive control commands from the remote UI the control commands originating from a user I O device and to redirect the control commands to the software application.

In accordance with an implementation of the present invention multiple remote UIs may be coupled to the computing device via the data communication network and each of the multiple remote UIs may include one or more hardware devices such as one or more of a video audio or user I O device.

By off loading the processing of graphics and or audio commands to a remote UI an implementation of the present invention permits simultaneously execution of multiple software applications on the computing device. Consequently a user of a first remote UI can remotely access and interact with a first software application executing on computing device while a user of a second remote UI remotely accesses and utilizes a second software application executing on the computing device. In this way more than one user within a home can remotely use different interactive software applications executing on the computing device at the same time that would have otherwise exclusively occupied the resources of the computing device.

An implementation of the present invention provides a low cost solution to the problem of providing multiple remote user interfaces for using interactive software applications throughout the home.

An implementation of the present invention provides additional benefits in that it allows a software application to be executed on its native computing platform while being accessed via a remote UI without requiring that the software application be programmed to accommodate such remote access. This is achieved through the emulation of local resources by the computing device and the subsequent interception and redirection of commands generated by the software application for those local resources in a manner transparent to the software application. This is in contrast to for example conventional X Windows systems that enable programs running on one computer to be displayed on another computer. In order to make use of X Windows technology only software applications written specifically to work with the X Windows protocol can be used.

Furthermore because a remote UI in accordance with an implementation of the present invention need only implement the low level hardware necessary to process graphics and audio commands transmitted from the computing device it may be manufactured in a low cost fashion relative to the cost of manufacturing the computing device.

Indeed because the remote UI device need only implement such low level hardware the remote UI device can be implemented as a mobile device such as a personal digital assistant PDA thereby allowing an end user to roam from place to place within the home or as an extension to a set top box thereby integrating into cable TV and IPTV networks.

Additionally because an implementation of the present invention sends graphics and audio commands from the computing device to a remote UI device rather than a high bandwidth raw video and audio feed such an implementation provides a low latency low bandwidth alternative to the streaming of raw video and audio content over a data communication network. Thus an implementation of the present invention marks an improvement over conventional screen scraping technologies such as those implemented in Windows terminal servers in which graphics output is captured at a low level converted to a raw video feed and transmitted to a remote device in a fully textured and fully rendered form.

Further features and advantages of the present invention as well as the structure and operation of various embodiments thereof are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

Computing device is configured to execute a software application such as a video game that is programmed to generate graphics and audio commands for respective hardware devices capable of executing those commands. Software application is also programmed to receive and respond to control commands received from a user input output I O device and or associated user I O device interface. Computing device represents the native platform upon which software application was intended to be executed and displayed.

For the sake of convenience from this point forward computing device will be described as a personal computer PC and software application will be described as a software application programmed for execution on a PC. However the present invention is not so limited. For example computing device may comprise a server a console or any other processor based system capable of executing software applications.

In a conventional PC graphics and audio commands generated by a software application such as software application would be received by software interfaces also executing on the PC and then processed for execution by local hardware devices such as a video and audio card connected to the motherboard of the PC. Furthermore control commands for the software application would be received via one or more local user input output I O devices coupled to an I O bus of the PC such as a keyboard mouse game controller or the like and processed by a locally executing software interface prior to receipt by the software application.

In contrast in accordance with and as will be described in more detail herein software application is executed within a sandbox environment on computing device . Sandbox environment captures the graphics and audio commands generated by software application and selectively redirects them to one of remote UIs via data communication network . This allows software application to be displayed on the remote UI using the hardware of the remote UI even though software application may not have been programmed to utilize such remote resources. Furthermore sandbox environment receives control commands from the remote UI via data communication network and processes them for input to software application .

As shown in remote UI includes control logic a graphics device an audio device and a user I O device . Each of the other remote U s includes similar features although this is not shown in for the sake of brevity. Control logic comprises an interface between data communication network and each of graphics device audio device and user I O device . As will be described in more detail herein control logic is configured to at least perform functions relating to the publication of graphics audio and user I O device capability information over data communication network and to facilitate the transfer of graphics audio and user I O device commands from computing device to graphics device audio device and user I O device . As will be appreciated by persons skilled in the relevant art based on the teachings provided herein control logic can be implemented in hardware software or as a combination of hardware and software.

Graphics device comprises a graphics card or like hardware capable of executing graphics commands to generate image and video content. Audio device comprises an audio card or like hardware capable of executing audio commands to generate audio content. User I O device comprises a mouse keyboard game controller or like hardware capable of receiving user input and generating control commands therefrom. User I O device may be connected to remote UI using a direct cable connection or any type of wireless communication.

Each of remote UIs can be a device capable of independently displaying the video content playing the audio content and receiving control commands from a user. Each of remote UIs may operate in conjunction with one or more other devices to perform these functions. For example the remote UI may comprise a set top box that operates in conjunction with a television to which it is connected to display video content play audio content and in conjunction with a user I O device to which it is connected to receive control commands from a user. As a further example the remote UI may comprise a PC that operates in conjunction with a monitor to which it is connected to display video content with a sound system or speakers to which it is connected to play audio content and in conjunction with a user I O device to which it is connected to receive control commands from a user.

Although shows only one software application executing within sandbox environment it is to be appreciated that multiple software applications may be simultaneously executing within multiple corresponding sandbox environments . Consequently a user of a first remote UI can remotely access and interact with a first software application executing on computing device while a user of a second remote UI remotely accesses and utilizes a second software application executing on computing device each in accordance with the techniques described herein. In this way more than one user within a home can use different interactive software applications executing on computing device at the same time.

The operation and interaction of sandbox environment and remote UIs will now be described in more detail.

Sandbox environment comprises one or more software modules installed on computing device that operate to isolate software application from other processes executing on computing device and that optionally prevent a user from accessing processes or files associated with software application . At a minimum sandbox environment includes one or more software modules that capture graphics and audio commands generated by software application for selective transmission to one of remote UIs . The capturing of commands may occur for example at the device driver level or hardware abstraction layer HAL level of computing device .

In particular sandbox environment is configured to receive notifications from the control logic within each of remote UIs . The term notification is used in a general sense and may in fact include the transmission of multiple messages from a remote UI to computing device or the exchange of messages between a remote UI and computing device . The notifications provide a means by which each of remote U s can publish its capabilities. In one implementation a device discovery and control protocol such as UPnP is used to allow sandbox environment to automatically discover each of remote UIs and to learn about their capabilities.

Upon learning about the capabilities of a remote UI sandbox environment emulates the existence of a device including device drivers having similar capabilities. For example upon receiving information about the capabilities of remote UI sandbox environment would emulate devices having the respective capabilities of graphics device audio device and user I O device . This would include creating a software stack for each of those devices on computing device .

The published capabilities of a remote UI may be inherently different than the internal hardware and software capabilities of computing device . As such the software stacks created on computing device provide an emulated environment which allow software application to operate as if such capabilities existed within computing device .

Furthermore the published capabilities of a remote UI may be significantly different than the capabilities of remote U s . To address this an implementation of the present invention creates a separate software stack for each such remote UI within a corresponding separate sandbox environment on computing device . Each software stack may be significantly different from each other software stack. As a result a heterogeneous set of remote U s can be supported by system .

Once created an emulated device captures commands generated by software application relating to graphics audio or user I O devices depending on the type of device being emulated. The captured commands are transmitted over data communication network to a selected one of remote UIs . For example commands generated by software application directed to a DirectX or OpenGL stack may be captured and transmitted over data communication network to one of remote U s 

As will be appreciated by persons skilled in the art because sandbox environment captures graphics and audio commands in their meta form and transmits them from computing device to a remote UI an implementation of the present invention provides a low latency low bandwidth alternative to the streaming of raw video and audio content over a data communication network. An example of such meta commands includes but is not limited to OpenGL commands DirectX commands or Graphics Device Interface GDI commands.

In one implementation sandbox environment generates one or more Pre Rendering Code PRC streams or commands responsive to the receipt of DirectX or OpenGL inputs from software application . These PRC streams are then transmitted over data communication network to a selected one of remote UIs where they are received and processed by an output device to generate video and or audio content. The manner in which the PRC is generated may be related to parameters of the output device which were made known when the remote UI first published its capabilities.

Each of remote UIs includes hardware and software stacks for processing graphics commands and generating graphics content therefrom processing audio commands and generating audio content therefrom and for receiving user input and generating control commands therefrom. As noted above each remote UI publishes its particular set of capabilities to sandbox environment . This may be achieved for example by sending a notification to computing device via data communication network or alternatively through the use of a device discovery and control protocol such as UPnP.

The software stacks on each remote UI are capable of processing graphics and audio commands transmitted over data communication network by computing device . The processing is performed in adherence with both the original command functionality as well as in a low latency fashion. In an implementation where the commands comprise PRC streams described above the software stacks convert the PRC into video and audio output to feed a presentation device e.g. video display speakers that is integrated with or connected to the remote UI device.

As shown in the process begins at step in which an end user requests to run or start a graphics application that is located on the media server for display on the remote UI or on a device that is connected to the remote UI. For example the end user may request to run a video game located on the media server wherein the media server is situated in the basement of the end user s home in order to view it on a television which is connected to the remote UI in another part of the end user s home. The request may be input by the end user via a user interface located on the remote UI or on a device connected to the remote UI.

At step responsive to the end user s request a network connection is established between the remote UI and the media server via a data communication network. As will be readily appreciated by persons skilled in the art any of a variety of network protocols can be used in order to set up communication between the remote UI and the media server. For example in one implementation the media server is configured to listen and wait for an incoming Internet Protocol IP connection and the media server is configured to establish a Transmission Control Protocol Internet Protocol TCP IP connection to the remote UI when needed.

At step after a connection has been established between the remote UI and the media server the remote UI publishes or exposes its capabilities to the media server. These capabilities can be published via unidirectional or bidirectional communication between the remote UI and the media server. In one implementation the establishment of a network connection between the media server and the remote UI as set forth in step and the publication of the capabilities of the remote UI as set forth in step each may be facilitated by the use and extensions of a network discovery and control protocol such as UPnP.

At step based on the published capabilities of the remote UI the media server determines what functionality required for executing the requested graphic application can be executed on the media server and what functionality can be executed on the remote UI. The decision algorithm executed by the media server to make this determination may be based on the capabilities of both the remote UI and the media server as well as on the hardware and software resources currently available on each at the time the algorithm is executed. In one implementation the media server is configured to dynamically adjust its allocation of functionality during the execution of the requested graphic application if the capabilities and available resources change.

At step after the capabilities of the remote UI have been exposed and the decision algorithm executed by the media server defines what portions of the graphic rendering are to be executed on each of the media server and the remote UI software hooks are set in the relevant software and operating system OS stack on the media server in order to capture the relevant functionality in real time. For example the hooks can be set on interfaces such as DirectX or OpenGL interfaces or on any other interface. The software hooks capture graphics commands and redirect them to the remote UI.

In particular graphics commands generated by application are received by a Direct3D application programming interface API . Direct3D API processes the graphics commands for input to a device driver interface DDI either directly or via a hardware abstraction layer HAL device . DDI then processes the input and generates commands for graphics hardware . In contrast graphics commands generated by application are received by a Microsoft Windows Graphics Device Interface GDI . GDI processes the graphics commands for input to DDI which then processes the input and generates commands for graphics hardware .

In accordance with step the media server can set software hooks in between any of the depicted layers of the software stacks for applications and wherein the location of a hook is determined based on the allocation of functionality between the remote UI and the media server. Thus for example with respect to application a software hook could be set between application and Direct3D API if the remote UI fully supports Direct3D. Alternatively a software hook could be set between Direct3D API and HAL device or between Direct3D API and DDI if the remote UI is less powerful and it is determined that some Direct3D processing must be performed on the media server. With respect to application a software hook could be set between application and GDI or between GDI and DDI depending on the allocation of functionality between the media server and the remote UI.

The location of the software hooks is tied to which software layers must be emulated on the media server. In particular the media server emulates those layer just below the software hooks thereby providing the upper layers the necessary interfaces to believe that the lower levels are fully available on the media server. However instead of fully implementing the lower levels the emulated layer transmits relevant commands to the remote UI to ensure proper operation of graphics applications and .

Returning now to flowchart once the software hooks have been set at step the graphics application is executed on the media server as shown at step . During execution of the graphics application when a function that should be executed on the remote UI is called the function call or command is redirected by the software hooks to the remote UI as shown at step . In an implementation the function call is redirected using a Remote Procedure Call RPC like communication protocol. It should be noted that depending on the allocation of functionality between the media server and the remote UI some function calls may be handled entirely by the media server. In any case at step the remote UI processes the function calls received from the media server to generate and display graphics content.

Note that in an alternate implementation one or more of steps and involving the publication of the capabilities of the remote UI the allocation of functionality between the media server and the remote UI and the setting of software hooks may be performed prior to receipt of the end user s request to run a graphics application. For example one or more of these steps could be performed the first time the media server and the remote UI are both connected to the data communication network.

With minor modifications the foregoing method of flowchart is also applicable to the remote generation and playing of the audio content portion of a software application via the remote UI. In an audio context the media server compares the audio capabilities of the remote UI and the media server and then allocates functionality to each based on a decision algorithm. Software hooks are set in accordance with this allocation. The software hooks redirect audio related function calls to the remote UI where they are processed to generate audio content. Depending on the implementation the audio content is then either played by the remote UI itself or by a device connected to the remote UI.

Furthermore the same general approach can be used to handle the remote generation and processing of control commands by a user I O device attached to the remote UI. Again the media server compares the user I O device capabilities of the remote UI and the media server and allocates functionality to each based on a decision algorithm. Device drivers that emulate the I O capabilities of the remote UI are created on the media server in accordance with this allocation. Control commands associated with a user I O device are unique in that they may be transmitted in both directions from the remote UI to the media server and from the media server to the remote UI e.g. as in the case of a force feedback game controller . Thus the software hooks in this case operate both to receive control commands transmitted from the remote UI and to re direct function calls related to the user I O device to the remote UI. Once again an RPC like protocol can be used for communication between the two.

As shown in example computer system includes a processor for executing software routines. Although a single processor is shown for the sake of clarity computer system may also comprise a multi processor system. Processor is connected to a communication infrastructure for communication with other components of computer system . Communication infrastructure may comprise for example a communications bus cross bar or network.

Computer system further includes a main memory such as a random access memory RAM and a secondary memory . Secondary memory may include for example a hard disk drive and or a removable storage drive which may comprise a floppy disk drive a magnetic tape drive an optical disk drive or the like. Removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit may comprise a floppy disk magnetic tape optical disk or the like which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art s removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In an alternative implementation secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means can include for example a removable storage unit and an interface . Examples of a removable storage unit and interface include a program cartridge and cartridge interface such as that found in video game console devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system also includes at least one communication interface . Communication interface allows software and data to be transferred between computer system and external devices via a communication path . In particular communication interface permits data to be transferred between computer system and a data communication network such as a public data or private data communication network. Examples of communication interface can include a modem a network interface such as Ethernet card a communication port and the like. Software and data transferred via communication interface are in the form of signals which can be electronic electromagnetic optical or other signals capable of being received by communication interface . These signals are provided to the communication interface via communication path .

As shown in computer system further includes a graphics interface an audio interface and an I O device interface . In a conventional mode of operation a software application executed by processor generates graphics and audio commands. The graphics commands are received by graphics interface which processes them to generate video content for display on a local display . The audio commands are received by audio interface which processes them to generate audio content for playback by one or more local speaker s . I O device interface receives control commands from a local I O device such as a keyboard mouse game controller or the like and processes them for handling by the software application being executed by processor .

However as described in more detail elsewhere herein in accordance with an implementation of the present invention a software application is executed by processor within a sandbox environment. The sandbox environment captures graphics and audio commands generated by the software application and selectively redirects them to a remote UI not shown via communications interface . The graphics commands are processed by a graphics interface within the remote UI to generate video content for display on a remote display. The audio commands are processed by an audio interface within the remote UI to generate audio content for playback by one or more remote speaker s . Additionally the sandbox environment receives control commands from the remote UI via communications interface and processes them for input to the software application. Thus in this implementation the hardware associated with local graphics interface audio interface and I O device interface is not used to execute the software application. Rather hardware within or connected to the remote UI is used to carry out analogous functions.

As used herein the term computer program product may refer in part to removable storage unit removable storage unit a hard disk installed in hard disk drive or a carrier wave carrying software over communication path wireless link or cable to communication interface . A computer useable medium can include magnetic media optical media or other recordable media or media that transmits a carrier wave or other signal. These computer program products are means for providing software to computer system .

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs can also be received via communication interface . Such computer programs when executed enable the computer system to perform one or more features of the present invention as discussed herein. In particular the computer programs when executed enable the processor to perform features of the present invention. Accordingly such computer programs represent controllers of the computer system .

Software for implementing the present invention may be stored in a computer program product and loaded into computer system using removable storage drive hard disk drive or interface . Alternatively the computer program product may be downloaded to computer system over communications path . The software when executed by the processor causes the processor to perform functions of the invention as described herein.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Accordingly the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

