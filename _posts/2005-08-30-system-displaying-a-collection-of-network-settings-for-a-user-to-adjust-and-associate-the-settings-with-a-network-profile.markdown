---

title: System displaying a collection of network settings for a user to adjust and associate the settings with a network profile
abstract: Systems and methods for a readily discoverable, consolidated UI of frequently modified system settings are provided. In one aspect, systems and methods may be deployed to efficiently adjust mobile settings. In one embodiment, tiles configured to represent the an application and further having at least one icon, the status of the application, and a user-selectable display element, such as a button, for positioning within each tile are produced, wherein the user can adjust the aspect with a single input. In yet another embodiment, the user may select another user-selectable user display element to view and adjust further aspects of the application in a secondary menu. Another aspect of the invention relates to a method that may be instituted to determine which applications and/or elements of applications are to be displayed within the menus.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685264&OS=07685264&RS=07685264
owner: Microsoft Corporation
number: 07685264
owner_city: Redmond
owner_country: US
publication_date: 20050830
---
Increasingly mobile users move between physical locations with the same computing device. Ideally users of these devices would prefer the machines to adapt seamlessly to those locations but the current systems are for the most part not capable of doing this. This is especially true when the user attempts to log on to different networks at these locations. Computing devices require the adjustment of numerous settings and in many systems it relies on the user to manually adjust these settings upon moving to different locations such as for example to and from home work a client site coffee shop and or an airport.

To further complicate the situation in many computing environments the operating system and machine settings are scattered in various control panels CPLs throughout the system often in distinct and incompatible graphical user interfaces. In most instances these settings are not in obvious and discoverable locations. For example one software application may require the user to first execute the entire application select an options menu and manually adjust a setting while another may still then require the user to adjust another related setting in a central settings depot such as Control Panel in Microsoft Windows operating system. Indeed even once a user accesses Control Panel they must still navigate through numerous options to alter the desired setting.

Not only are the required settings tedious to adjust but a user s interests and expectations from the computing device may vary depending on the physical location of the machine. For example a user may desire to have different desktop backgrounds or internet favorites at home than when using the same device in an office environment.

Previous attempts to solve this problem have not adequately predicted the user s location or often are not precise enough to differentiate among locations.

Aspects of the invention related to systems and methods to enable users to roam between locations without requiring them to adjust their machine settings every time. In one embodiment different machine settings may be stored in a memory for different network locations under separate network profiles. In another embodiment these and other settings may be automatically adjusted upon entering a different location. In one such embodiment a logical network may be employed to determine which settings are adjusted.

Another aspect relates to a graphical user interface to implement the above and other methods of adapting a computing device to different network locations. In one embodiment a graphical user interface may allow the user to modify which application and which aspects of those applications are displayed on the menu. In yet another embodiment a user may determine what network profile is applied when entering a specific location. In still yet another embodiment a memory can update a network profile as the changes occur. In still yet further embodiments the user may derive or otherwise create new network profiles from existing network profiles. Another aspect relates to systems and methods that allow a user to configure various settings explicitly for different network locations by means of a consolidated UI.

A more complete understanding of the present invention and the advantages thereof may be acquired by referring to the following description in consideration of the accompanying drawings in which like reference numbers indicate like features and wherein 

A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during start up is stored in the ROM . The computer also includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer . It will be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may also be used in the example operating environment.

A number of program modules can be stored on the hard disk drive magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user can enter commands and information into the computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB . The illustrated computer includes an optional PCMCIA interface that may connect at least one embodiment of an input device according to the present invention to the computer . Further still these devices may be coupled directly to the system bus via an appropriate interface not shown . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The computer can operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer can be a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing a communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device.

It will be appreciated that the network connections shown are illustrative and other techniques for establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP Bluetooth IEEE 802.11x and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code.

Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these to are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of and I respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

In one embodiment available networks may be determined by the receiving an SSID at the computer . Networks are often identified by their SSID due to the format supporting plain text thereby allowing easy user identification of the alphanumeric label. For example an access point such as access point see may alert its presence by broadcasting beacon frames that transmit the SSID. Often individual stations may passively listen for SSID beacons however the stations may also transmit probing signals to actively search for access points. As one skilled in the art will appreciate the above description of SSIDs provides just one exemplary method of determining available networks. It is to be understood that wireless networks not having SSIDs are within the scope of the invention. Indeed there are numerous methods that may allow a computer device such as computer to receive data indicating available wired or wireless networks. Indeed in one embodiment detection from an available network may be initiated by the connection of a peripheral device or network cabling to the computer .

However returning to those networks utilizing an SSID the SSID is more than a name that refers to an access point or station. Under current conventions it is a series of 1 32 characters that is designed to uniquely identify one set of communicating wireless deices which may also be communicating with wired devices from other surrounding wireless devices. In this manner the name or SSID permits connection between a specific station and a desired network when multiple independent networks operate in the same physical area. For example a departmental WLAN may consist of several access points APs and dozens of stations all using the same SSID. Another organization in the same building may operate its own departmental WLAN composed of APs and stations using a different SSID. The purpose of SSID is to help stations in the first department find and connect to APs in that department ignoring APs belonging to the other department.

For this and other reasons select embodiments of the present invention do not use the SSID as the sole mechanism to associate settings to a network. illustrates a networking environment in which a first departmental WLAN may consist of several access points and a plurality of stations all using the same SSID Research to communicate. A brief description of the figure will readily demonstrate why utilizing the SSID alone to associate settings is inconvenient inaccurate and inefficient. Another department within the same organization may operate its own departmental WLAN composed of APs and stations using a different SSID Development . In the illustrated example WLAN consists of access point and stations and . Therefore the Research SSID allows stations and in the research department to find and connect to APs and within the department while ignoring AP belonging to the Development department. In joint projects the Research and Development departments would want to share resources and applications. As one skilled in the art can readily appreciate it would be inconvenient to associate computer settings according to the SSID.

In step it is determined if a network signature is stored within a memory. The memory may be any computer readable medium such as a local fixed drive such as drive or accessed remotely through a network such as network adapter .

As readily seen in logical network comprises networks and . Each of the networks has a network signature to allow unique identification of each of the individual networks. For example networks and each have a Network ID Link ID and a Hop ID that may be used to determine the network signature. The Network ID may be for example the domain of the network and utilize the DNS suffix. The Link ID may represent the subnet of the network to which the station s are connected. For example the MAC address of the default gateway NAT in other embodiments may be used as the Link ID. The Hop ID may represent the point of entry onto the network. As one skilled in the art will appreciate the point of entry may be a NAT access point ICS computer cell tower modem switch bridge hub among others known in the art. For example in the above WLAN of the SSID may serve as the Hop ID. Networks and are associated with logical network . As seen in the figure logical network has Network Profile which is distinct and separate from Network Profile which correlates to logical network . While the profiles are separate and distinct one skilled in the art will realize there may be one or more common features and or settings. For example the default printer in both profiles may be the same.

In optional step it can be determined if more than one network connection is available. In one embodiment upon the finding of more connections being available step may be repeated wherein it will be determined if the network signature is available. As shown in the illustrative embodiment in if no additional networks are available step may be implemented discussed below . As one skilled in the art will appreciate this step may occur at different times in the process and indeed be repeated throughout the process in accordance with one embodiment of the invention. If more than one network connection is available wherein at least two of them are associated with different profiles the computer may prioritize the profile to be applied based on prioritizing data. The prioritizing data may be based upon a myriad of factors known to those skilled in the art and in select embodiments it may be adjusted by the user through a graphical user interface.

In step it is determined whether at least one available network connection is part of a logical network in a memory. As discussed above the memory may be any computer readable medium configured to store data. If the network connection is part of a logical network that has associated settings stored in a memory network data configured to associate at least one setting with the available network connection is generated This data may be used by the computer to apply that particular logical setting the associated network profile see step . In one embodiment the settings may be automatically applied and require no further input from the user. Yet in other embodiments the user may be prompted to which associated settings should be applied. An additional step may be implemented that allows a user to apply different settings see e.g. step . In one embodiment a graphical user interface may be implemented that aids the user in selecting which logical network to associate a network connection with. In yet another embodiment the user may be permitted to create a new logical network with an associated network profile. Still in further embodiments the user may be permitted to split existing profiles into multiple profiles or combine multiple different profiles into a single profile. Indeed in at least one embodiment network profiles may be pre set by an OEM or third party and do not require selection by the end user. In one such an embodiment a GUI may not utilized but rather the settings will automatically be created and applied without user configuration. However in one such embodiment having automatic pre set profiles a GUI may be supplied to the user to combine or divide the profiles to fit his her needs but will not need to configure or otherwise select a profile setting to take advantage of the disclosed aspects of the invention.

In one embodiment if the network connection is not part of a logical network stored in a memory the network signature may be stored in a memory Step . Upon storing the network signature in a memory a graphical user interface may allow a user to select a logical network to associate the network connection with. Alternatively a graphical user interface may be implemented to allow a user to create a new logical network with an associated network profile step .

Network has the same Network ID and Link ID as network but has a different Hop ID value 2 . If the network profile was merely bases on the Hop ID for example the SSID a different profile may have to be loaded or otherwise programmed.

Therefore it is more efficient and accurate to utilize more parameters than detection of an SSID when adjusting settings.

Returning to network the connection may represent another location within the same office environment as connection such as for example a conference room where the access point of entry onto the network may differ but the user prefers to keep the same profile. For example the default printer background bookmarks and collection of recently opened documents to name a few settings may be desired to be identical to when the user is logged on network .

Network has the same Network ID as networks and but has an entirely different Link ID value 200 and Hop ID value 3 . Network may be a network available in another building or division within the company. For example it is not uncommon for corporations and other business entities to be arranged in a campus type layout having numerous buildings in close proximity. Although the access point and gateway are different the user may still want to have the same profile as used when accessing network services through networks and .

As readily seen in network connections and are associated with logical network and only differ in their Hop ID. For example one connection may use a 100 mbs wired connection to the network while the other may use a wireless access point to access the network services. In either case the user may wish to use the settings set forth in Network Profile Home . In one embodiment the profile settings set forth in profile will automatically be adjusted when the user utilizes connections and or . In one embodiment the profile may then be automatically adjusted to profile once the user no longer utilizes connections and or .

As any mobile computer user knows it is often sometimes desirable have the same network profile at the home as the office. This is especially true for telecommuters. For example network may be a home office connection wherein the user desires to keep network profile Network Profile Office . In systems that merely utilize the access point or SSID to identify the profile this would not be possible or at the very least inconvenient or impractical. As dotted line indicates the user may associate network with logical network . In one embodiment the user may elect to be prompted to determine which logical network to associate with. In still yet embodiment if the user elects to be associated with logical network which subsequently becomes unavailable the user computer may automatically switch to become associated with logical network . Yet in other embodiments the user may be alerted to the unavailability of services or components within the network profile and manually select and adjust settings as desired.

Another aspect relates to systems and methods that allow a user to configure various settings explicitly for different network locations by means of a consolidated UI. The user interface may display a collection of settings that may be adjusted by the user. By the use of the term setting it is to be understood that any aspect of an application that may be altered manipulated or otherwise processed by the computer system may be a setting. For example within an internet browser such as Microsoft Internet Explorer possible settings that could be adjusted in a network profile may include changing the bookmarks or home page or adjusting the proxy server. Indeed it is conceivable that the default browser itself may be different among profiles. System settings may also be adjusted based on the network profile. For example power settings display brightness the password required for logging on one ore more programs may be adjusted. In yet other embodiments the applications available on the start menu or task bar may be adjusted.

As one in the art will readily appreciate a plurality of settings and application states may be readily adjusted based upon the network connection s utilized by the user wherein a user may customize the user experience. For example one or more of the following examples may be automatically adjusted upon connecting to a network the most frequently utilized applications when the user is connected to that particular network the most recent files or documents accessed by the user when connected to the particular network different desktop features and settings for each connection and customizable and quick launch and start menu applications available to the user. Indeed these provide only a exemplary listing of possible settings that may be adjusted to provide a customizable user experience. Any settings that may be adjusted and applied upon connecting to a different network is within the scope of the invention.

In one embodiment of the invention the executing instructions for adjusting the setting s are associated with a user selectable display element such as for usage with a graphical user interface. In such an embodiment a menu comprising a collection of settings may be displayed to a user such as through monitor wherein at least one of the settings is associated with a first user selectable display element. The user selectable display element may be a button toggle check box or slidable scale or indeed any mechanism capable of being displayed to a user and adjusted to affect the state of the aspect or entire application.

The menu may be configured so that upon receiving a selection signal indicative of a user interface selection device such as a mouse input or keyboard stroke correlating to selection of a user selectable display element the state of at least one aspect of an application is adjusted for at least one network profile. One skilled in the art will understand that while the term mouse was used to exemplify a user interface selection device a mouse input may be received from any input device that controls movement of a cursor or other mechanism and allows selection of functions on a computer system device. As used herein the term mouse can encompass a wide variety of input devices that provide an input to a computing device including but not limited to track pads track balls scrollers joy sticks soft buttons mouse pens light pens and other positioning or pointing systems. Moreover while numerous embodiments may comprise a rotatable ball to provide movement the present invention is not limited thereto. It will be appreciated by those in the art that various mouse movement sensing system alternatives are well known and available such as mice with optical sensors for sensing mouse movements. Moreover as described above the present invention is not limited to a mouse type input device but rather is may be utilized with a vast array of input devices for a computer system.

In still yet further embodiments resources not available to the user at the current location will not be displayed. For example if the user only has access to a word processing application such as Microsoft Word when connected to a work related network such as network connection and cannot utilize the application when connected to other unrelated networks the computer will not display that application to the user. While the above example illustrates one embodiment with a software application one skilled in the art will realize any application including hardware applications such as showing available printers media servers or other network appliances may also be implemented. Indeed any resources whether hardware or software is within the scope of the invention. For example in one embodiment the available file shares available to the user may only displayed to the user when those resources are available from that network connection. Indeed in one embodiment the profile may be configured to have the ability to launch a set of programs automatically based on different network profiles. For example looking to upon logging in at network connection the settings for Network Profile Home are utilized. One of the settings may automatically launch a messenger service such as MSN Messenger . If the user s work does not allow such messenger systems to be utilized the user can set the office network profile to not load the messenger service load another messenger service or sign in under a different user name.

In other embodiments the computer may query available resources and automatically store settings as the user changes them or as they become unavailable. In yet other embodiments a UI may be provided to allow a user to derive or create new network profiles from existing network profiles. This may be useful when users want to blend settings from a home network and an office network. For example the user may want to use the home s default printer but retain other settings from the work networking environment. In such a case the user may derive the network settings from one or both of the logical networks and create a new logical network that is associated with a different profile.

The present invention has been described in terms of exemplary embodiments. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure.

