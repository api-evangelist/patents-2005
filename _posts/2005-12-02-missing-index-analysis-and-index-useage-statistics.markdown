---

title: Missing index analysis and index useage statistics
abstract: A method of accumulating and aggregating statistics concerning the use of database table indexes includes using a plurality of counters to register index use. The plurality of counters allow multiple instances of index usage to be recorded simultaneously. A missing index may be detected using an optimal index in a query plan. The optimal index is compared against the available indexes to determine if an index is missing. Statistics may be gathered against the used and missing indexes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07769744&OS=07769744&RS=07769744
owner: Microsoft Cororation
number: 07769744
owner_city: Redmond
owner_country: US
publication_date: 20051202
---
Relational Database Systems such as SQL Server available from Microsoft in Redmond Wash. allow users to index data in various ways. Indexes can speed up data access by orders of magnitude. A query against the database can force a scan of columns of one or more tables within the database. If the tables are large the scan can be very time consuming. The query can be shortened if the columns of the database tables are indexed. Using an index to find data in a given column can be an efficient method of searching. But an indexed column requires maintenance to be effective. For example indexes need to be updated whenever data changes occur to keep the indexes accurate. If the data changes the corresponding index which can refer to that changed data must be updated if the changed data is to be found in a query through the use of an index. If an entry in a row or column is deleted the index should be updated.

It is clear that some indexes may be used quite frequently while other indexes may not be used via a query very often. Given the mix of frequently used and infrequently used indexes on a database some concerns arise. The concerns include whether the maintained indexes are being used if so are they being used effectively and are the indexes being used with insight with respect to their storage. If all permutations of indexes were generated with a database table then the storage requirements for index storage would rise precipitously and maintenance operations would incur unacceptable overhead to data changes. Also over time the manner in which a database is used may change. This change may result in a use that neglects the use of some indexes and may indicate a need for greater use of other indexes.

In some instances queries against a database may present opportunities to generate indexes which do not currently exist in the table. To date the prior art has not well accommodated characterization of the use of indexes in databases.

An aspect of the invention includes a technique for generating statistics of index usage in a database management system. The technique includes the use of a plurality of counters. The counters are incremented upon an instance of index usage. The counters are configured such that multiple simultaneous usages of the index may be recorded. An index usage may occur from multiple executions of the same query or from an execution of a different query.

In another aspect of the invention a missing index may be detected. A query plan has an optimal set of groups of indexes. The optimal index groups are used as a point of comparison to identify indexes useful in the query. If no indexes correspond to the optimal index groups in any way then a missing index condition is detected. Statistics may be generated against the missing index groups.

In one aspect of the invention a cost is generated as a result of the missing index. The cost may be a dimensionless indication of how much the query plan execution could be improved if the missing index were created and made available to the database management system. In one aspect of the invention a query header may be used as a storage mechanism for statistics on the indexes used and statistics on missing indexes encountered while optimizing this query along with the query plan.

In one aspect of the invention statistics are generated associated with every query. Normally a client query is submitted as a program formulated in any of a plurality of query languages including SQL or XQuery. The query engine receives the query and the text is parsed bound and optimized. The query engine produces a query plan which is stored in cache. Each time the query is executed the plan is retrieved from the cache executed and again stored in the cache.

In one embodiment statistics may be gathered via the use of counters associated with the query plan. depicts a counter configuration . Using a counter scheme a counter for an index associated with the query plan is incremented every time the index is used. For example if a first query uses the index counter is incremented. A second query may also increment the index counter as may a third query . The problem with this type statistics gathering is the contention that counter experiences when any of queries or arrive simultaneously. Heightened contention on a counter can lead to an overall drop in performance of processing a query.

Index usage statistics may be obtained by adding up all of the counters for an index for example counters through . Index usage statistics may be recorded in the header of the query plan for the respective index used. Each time the query is executed or retrieved from the cache the list of indexes is processed and accumulated. In one embodiment an index statistics manager can accumulate the index usage statistics for a group of indexes and present the information for a user to evaluate.

In one embodiment an index statistics manager maintains a number of hash tables in which it records usage records for individual indexes. The hash tables may be used in conjunction with counters through . Here as before using more than one hash table and recording usages in different hash tables according to a round robin scheme reduces contention points in highly concurrent query workloads where a very large number of queries are executed concurrently.

In another embodiment the index statistics manager can have a Data Description Language DDL operation defined and connected to the manager. The DDL defines the index statistics data to mange the gathered statistics. For example index usage records may be dropped if the index itself is dropped the underlying table for the index is dropped or the database itself is dropped or detached. This allows only active indexes to have statistics which are maintained.

In one embodiment the examination of the index statistics may be exposed using a dynamic management view DMV . The view generally includes the generation of the index statistics data that is consolidated from different sets of counters as used in the contention avoidance scheme described above. In one aspect of the invention the generation of index statistics occurs automatically with each executed query. But the generation of a dynamic management view may be significantly more expensive in computing time than the recording of index usage records. In one embodiment the statistics collection mechanism including the counters is write optimized to collect data efficiently during the execution of a query.

During execution of the query plan counter mechanisms corresponding to the indexes used in the plan are incremented step to collect data on index use during the query. In one aspect of the invention multiple concurrent index usage increments may be encountered during the execution of the query plan for the index being used. The index may be used in a different concurrent query or in the same but concurrent query plan execution. After execution of the query plan the usage indication is stored in the query plan header step . The query plan with the new information placed into the header may then be placed into cache for storage step .

System administrators may use diagnostic programs in a database management system to input the raw statistics from a statistics manager to produce useful results from the gathering of index use statistics. For example system administrators may use diagnostic programs which input usage statistics to determine exactly how many times an index was used for different types of usages. The usage include read write and update accesses. This enables the acceleration of query processing if an optimized set of indexes is used. Usage statistics may indicate how many times maintenance operations on indexes are present so that a source of potential slowdown in a database can be more easily identified. A system administrator can rank and compare different indexes according to their value. Usage patterns and use frequency of an index may be determined.

A system administrator can use the statistics to identify useless indexes. In one aspect of the invention statistics on the use of indexes in a database is provided. Statistical information on index usage may not be useful unless it is compared against some standard for comparison purposes. Accordingly another aspect of the invention involves calculating a value for an index. The value of an index can be thought of as the balance between the number of read accesses that were accelerated by the index and the number of maintenance operations that need to be performed in reaction to data changes. An index which is not used at all or not used in read accesses but incurs substantial maintenance overhead is of very little value. An index which is used in a large number of read accesses and requires only very little maintenance is considered very valuable. The determination of value enables the identification of useless indexes. Useless indexes may be defined as indexes having a high maintenance overhead without significant utility in queries. Such useless indexes can pose significant performance bottlenecks. Being able to assess the value of an index is essential to trouble shooting and tuning of database servers deployed in production.

An administrator can inspect the dynamic management view which exposes index usage statistics to provide a proper assessment of indexes without reproducing the queries to observe the problem. This enables administrators to diagnose and resolve performance problems originating from useless indexes quickly.

In one embodiment a program that maintains statistics concerning index usage on a per query basis is implemented. This statistics management program accesses index counters for operations such as seeks scans lookups and updates of indexes as well as the last time of utilization of an index. Table 1 includes a description of index usage statistics for a typical embodiment of the invention.

The Table 1 information is not exhaustive and is only an example of typical index usage statistics by either a user or a system. The Table 1 information may be used to assess the usefulness of an index by computing the sum of all reads by selecting user seeks plus user scans plus user lookups. In general the present invention provides the raw data for the generation of computed statistics. A user program which aggregates the index statistics can be the analysis tool for making assessments on the effectiveness of an index in a database.

In another aspect of the invention a missing index statistic may be generated. In some relational database query processors the query optimizer analyzes predicates with respect to whether they can be evaluated using available indexes. Consider the following example 

In this example without any indexes on the table PART the execution of this query requires the scanning of the entire PART table. But the query can be answered more efficiently if there were an index on P CONTAINER which can be used to look up qualifying rows before gathering additional columns needed to return the entire SELECT list. Accordingly the index on P CONTAINER is considered missing and results in a performance burden for the database.

In general as part of a query plan generation an optimizer determines the specifications of optimal indexes. The optimal indexing may be one or more single indexes or it may be a composite index. In most present systems this optimal index information is discarded if the optimal indexes are not available during the execution of the query plan. The present invention uses optimal index specifications and keeps information concerning missing optimal indexes. Such counts are aggregated and may be presented as a missing index indication.

If an index useful for the execution of the query plan is not found step then the instance of a missing useable index is recorded step . A missing index may be identified by comparing an optimal index identified in the query plan to any other single or composite indexes on columns that exist related to the desired query. If no single or composite index exists that compares to the optimal index then a useable index for the query is considered missing. In one embodiment an update of missing index statistics is generated step . This update creates an indication of how often a missing index could have been accessed to accommodate the query plan. In one embodiment the cost of a new index can be optionally calculated step based on the expected number of I O and CPU accesses that the optimal index would require in order to satisfy the query. This number can be considered dimensionless. This number can then be compared against the actual cost of performing the query execution without an index. The comparison may indicate that a new index is appropriate for execution of the query in the database management system.

In another embodiment steps and are reversed in order such that the recording of an instance of a missing index is performed if the cost benefit is significant and if there are no other similar indexes already present. This embodiment allows only high value missing indexes to be recorded. Thus a user may conclude that all of the missing index recordings under this embodiment if performed often would be worthwhile to create to improve the efficiency of the query processor. In one embodiment this cost is scaled to be within a range of 0 to 100 to indicate a percentage of improvement if the missing index were created.

In another aspect of the invention for each missing index group the relational database management system can maintain counters which indicate how many times a query which could have benefited from creating a given missing index is executed. In addition to the pure count the total query cost as estimated by the optimizer may also be recorded. Since different queries could benefit from the same index this value is the average across different query executions. This may include both the same query executed repeatedly as well as different queries. In one embodiment the impact of an index may be indicated by a value between 0 and 100 arranged over all queries which could have used the index in question.

In one embodiment missing index statistics may be gathered and exposed through four system tables. The first table is a missing index group statistics table. In this table statistics of missing index groups may include the number of queries which could have used the index the number of unique compiles and the total query cost and impact of the index.

A second table is the missing index details table. This table may include a description of individual indexes which contains the database and object identifiers as well as columns and their usage including equality and inequality and the complete index DDL statement which include the indexes that are identified by an index handle.

A third table is the missing index groups table. This table may include a view which maps missing indexes to missing index groups by listing pairs of index group handles and individual index handles. A fourth table is the missing index columns table. This table may list the columns involved in a missing index description including the name the column identifier and the usage type.

In one embodiment a program that maintains statistics concerning missing index groups is implemented. This statistics management program accesses index counters for operations related to the index usage and missing index data. Table 2 includes a description of missing index statistics items for a typical embodiment of the invention. Table 2 is not exhaustive and serves to indicate examples of typical missing index statistics.

Although not required embodiments of the invention can also be implemented via an operating system for use by a developer of services for a device or object and or included within application software. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs appliances lights environmental control elements minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network bus or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.

With reference to an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer system typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disk Read Only Memory CDROM compact disc rewritable CDRW digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM CDRW DVD or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer system . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory not shown . In addition to monitor computer systems may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer system may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s .NET platform available from Microsoft Corporation includes servers building block services such as Web based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device one or more portions of an embodiment of the invention may also be implemented via an operating system application programming interface API or a middle man object between any of a coprocessor a display device and a requesting object such that operation may be performed by supported in or accessed via all of .NET s languages and services and in other distributed computing frameworks as well.

As mentioned above while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to implement a system to gather statistics on indexes in a database. Thus the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same similar or equivalent systems and methods achieved by embodiments of the invention.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention.

While aspects of the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the claimed invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

