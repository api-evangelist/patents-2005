---

title: Generating suitable data for statistical analysis
abstract: A method, system and article of manufacture for processing abstract queries and, more particularly, for generating input to statistical analysis routines. One embodiment comprises receiving an abstract query including a measurement field and a chronological reference condition. The abstract query is transformed into an executable query which is executed by a query engine, whereby result data is determined including an available measurement value for the measurement field. The available measurement value was taken at a point in time different from a point in time that satisfies the chronological reference condition. The method further comprises determining a variance value corresponding to a time variance between the point in time that satisfies the chronological reference condition and the other point in time at which the available measurement value was taken. As a result set for the abstract query, the available measurement value and the variance value are returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07624098&OS=07624098&RS=07624098
owner: International Business Machines Corporation
number: 07624098
owner_city: Armonk
owner_country: US
publication_date: 20051007
---
This application is related to the following commonly owned applications U.S. patent application No. 10 083 075 now U.S. Pat. No. 6 996 558 filed Feb. 26 2002 entitled APPLICATION PORTABILITY AND EXTENSIBILITY THROUGH DATABASE SCHEMA AND QUERY ABSTRACTION U.S. patent application No. 11 035 710 filed Jan. 14 2005 entitled TIMELINE CONDITION SUPPORT FOR AN ABSTRACT DATABASE and U.S. patent application No. 11 083 208 filed Mar. 17 2005 entitled SEQUENCE SUPPORT OPERATORS FOR AN ABSTRACT DATABASE which are hereby incorporated herein in their entirety.

The present invention generally relates to generation of suitable data for statistical analysis and more particularly to generating query output which is suitable as input to statistical analysis routines.

Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object oriented programming database is one that is congruent with the data defined in object classes and subclasses.

Regardless of the particular architecture a DBMS can be structured to support a variety of different types of operations for a requesting entity e.g. an application the operating system or an end user . Such operations can be configured to retrieve add modify and delete information being stored and managed by the DBMS. Standard database access methods support these operations using high level query languages such as the Structured Query Language SQL . The term query denominates a set of commands that cause execution of operations for processing data from a stored database. For instance SQL supports four types of query operations i.e. SELECT INSERT UPDATE and DELETE. A SELECT operation retrieves data from a database an INSERT operation adds new data to a database an UPDATE operation modifies data in a database and a DELETE operation removes data from a database.

Data that is collected and stored in a database can be used for various purposes including know how management decision making and statistical analysis. Statistical analysis on data in an underlying database is generally performed by executing suitable analysis routines on query results obtained in response to execution of corresponding queries against the underlying database. Such analysis routines normally require a set of variables as input which are often measurements that are carried out at specific points in time. However in some cases the required data may not be available. For example in retrospective studies which are performed once all data required as input to corresponding analysis routines was collected data with respect to a given field may not be chronologically standardized i.e. certain events for various instances of a given entity did not occur with same frequency. In other words the available data in the underlying database may not match from a chronological perspective the needed data that corresponding analysis routines require as input to perform a required statistical analysis.

For instance assume an analysis routine that is configured to analyze medical data in order to determine whether a given drug X produces satisfactory results in cancer treatment. More specifically assume that in the context of a medical test series the drug X was administered to 10 patients having a particular tumor which is presumed to be treatable using the drug X. At the time of administration of the drug X the tumor size is initially measured for each of the 10 patients. Then the tumor size of each of the 10 patients is measured in follow up examinations at various intervals in order to track the progress of the tumors. Corresponding tumor size measurements are collected and stored in a database. These tumor size measurements can be retrieved from the database for statistical analysis purposes by issuing a suitable query against the database.

Assume now that in the given example the analysis routine is configured to determine an average tumor reduction for all patients after one month two months and one year after administration of the drug X. However for various reasons tumor size measurements were not carried out for all patients exactly one month two months and or one year after administration of the drug X. Accordingly if the analysis routine is run on a query result which only returns a list of available tumor size measurements for each patient from the database the results produced by the analysis routine can be inaccurate and invalid.

Therefore there is a need for an effective technique for generating query output which is suitable as input to statistical analysis routines.

The present invention generally is directed to a method system and article of manufacture for processing abstract queries and more particularly to generating query output which is suitable as input to statistical analysis routines.

One embodiment provides a computer implemented method of generating input to statistical analysis routines after execution of a query against a database. The method comprises receiving an abstract query against a database the abstract query comprising a value request defined by a measurement field and a chronological reference condition and configured to return at least one measurement value taken for the measurement field at a point in time that satisfies the chronological reference condition. The abstract query is transformed into an executable query capable of being executed by a query engine. The executable query is executed whereby result data is determined including an available measurement value for the measurement field. The available measurement value was taken at another point in time different from the point in time that satisfies the chronological reference condition. The method further comprises determining a variance value corresponding to a time variance between the point in time that satisfies the chronological reference condition and the other point in time at which the available measurement value was taken. As a result set for the abstract query the available measurement value and the variance value are returned.

Another embodiment provides a computer readable medium containing a program which when executed by a processor performs operations for generating input to statistical analysis routines after execution of a query against a database. The operations comprise receiving an abstract query against a database the abstract query comprising a value request defined by a measurement field and a chronological reference condition and configured to return at least one measurement value taken for the measurement field at a point in time that satisfies the chronological reference condition. The abstract query is transformed into an executable query capable of being executed by a query engine. The executable query is executed whereby result data is determined including an available measurement value for the measurement field. The available measurement value was taken at another point in time different from the point in time that satisfies the chronological reference condition. The operations further comprise determining a variance value corresponding to a time variance between the point in time that satisfies the chronological reference condition and the other point in time at which the available measurement value was taken. As a result set for the abstract query the available measurement value and the variance value are returned.

The present invention is generally directed to a method system and article of manufacture for processing abstract queries and more particularly to generating query output which is suitable as input to statistical analysis routines. In general an abstract query against data in an underlying database is issued by a requesting entity such as a user and may include one or more measurement fields with associated chronological conditions. A measurement field is a result field for which various data values which are determined at different points in time can be collected. A chronological condition defines a data selection criterion which is satisfied by a requested point in time. By associating the measurement field with the chronological condition in the abstract query specific values of the measurement field which were determined at the requested point in time can be selected from the underlying database. Accordingly the query is executed against the database to obtain a result set having data for the measurement field s . The result set can subsequently be used as input to an underlying statistical analysis routine to perform a required statistical analysis.

Statistical analysis routines generally require data that is represented as a set of chronologically standardized variables. In other words certain events for various instances of a given measurement field need to occur with same frequency to make the various instances suitable for use with the underlying statistical analysis routine. However according to one aspect available data for the given measurement field in the underlying database does not match from a chronological perspective the needed data that the underlying statistical analysis routine requires as input to perform the required statistical analysis. Thus suitable processing with respect to the available data needs to be performed in order to make the result set usable as input to the underlying statistical analysis routine.

In one embodiment a variance value is calculated for each instance of the given measurement field and included with the result set. The variance value of a given instance identifies a time variance between a point in time when the instance actually occurred from a reference value such as a predefined point in time. In one embodiment the reference value is specified by the abstract query.

In the underlying statistical analysis routine the variance values can be used e g. in a suitable regression equation which allows the routine to determine an approximated value for the given instance with respect to the reference value. Thus the underlying statistical analysis routine can take into account how inaccurate each instance is with respect to the reference value when performing the required statistical analysis.

In the following embodiments of the invention may be described with respect to abstract queries. However it should be noted that the invention is not limited to abstract queries and that embodiments of the invention may use any suitable queries known or unknown in order to generate result data which is suitable as input to methods of the invention.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore in various embodiments the invention provides numerous advantages over the prior art. However although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and unless explicitly present are not considered elements or limitations of the appended claims.

One embodiment of the invention is implemented as a program product for use with a computer system such as for example computer system shown in and described below. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of computer readable media. Illustrative computer readable media include but are not limited to i information permanently stored on non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive ii alterable information stored on writable storage media e.g. floppy disks within a diskette drive or hard disk drive or iii information conveyed to a computer by a communications medium such as through a computer or telephone network including wireless communications. The latter embodiment specifically includes information to from the Internet and other networks. Such computer readable media when carrying computer readable instructions that direct the functions of the present invention represent embodiments of the present invention.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The software of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

In any case it is understood that is merely one configuration for a computer system. Embodiments of the invention can apply to any comparable configuration regardless of whether the computer is a complicated multi user apparatus a single user workstation or a network appliance that does not have non volatile storage of its own.

The computer could include a number of operators and peripheral systems as shown for example by a mass storage interface operably connected to a storage device by a video interface operably connected to a display and by a network interface operably connected to the plurality of networked devices which may be representative of the Internet via a suitable network. Although storage is shown as a single unit it could be any combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards or optical storage. The display may be any video output device for outputting viewable information.

Computer is shown comprising at least one processor which obtains instructions and data via a bus from a main memory . The processor could be any processor adapted to support the methods of the invention. In particular the computer processor is selected to support the features of the present invention. Illustratively the processor is a PowerPC processor available from International Business Machines Corporation of Armonk N.Y.

The main memory is any memory sufficiently large to hold the necessary programs and data structures. Main memory could be one or a combination of memory devices including Random Access Memory nonvolatile or backup memory e.g. programmable or Flash memories read only memories etc. . In addition memory may be considered to include memory physically located elsewhere in the computer system for example any storage capacity used as virtual memory or stored on a mass storage device e.g. direct access storage device or on another computer coupled to the computer via bus . Thus main memory and storage device could be part of one virtual address space spanning multiple primary and secondary storage devices.

Referring now to a relational view of software components in one embodiment is illustrated. The software components illustratively include a user interface a DBMS one or more applications only one application is illustrated for simplicity a variance calculator an output formatter an abstract model interface and one or more statistical analysis routines . The DBMS illustratively includes a database and a query execution unit having a query engine . The statistical analysis routines are configured to perform a statistical analysis on data that is represented as a set of chronologically standardized variables.

The database is shown as a single database having the data for simplicity. However the database can also be implemented by multiple databases which can be distributed relative to one another. Moreover one or more databases can be distributed to one or more networked devices e.g. networked devices of . The database is representative of any collection of data regardless of the particular physical representation of the data. A physical representation of data defines an organizational schema of the data. By way of illustration the database may be organized according to a relational schema accessible by SQL queries or according to an XML schema accessible by XML queries . However the invention is not limited to a particular schema and contemplates extension to schemas presently unknown. As used herein the term schema generically refers to a particular arrangement of the data .

According to one aspect the application and more generally any requesting entity including at the highest level users issues queries against the data in the database . In general the queries issued by the application are defined according to an application query specification and may be predefined i.e. hard coded as part of the application or generated in response to input e.g. user input . The application query specification s is further described below with reference to .

illustratively the queries issued by the application are created by users using the user interface which can be any suitable user interface configured to create submit queries. According to one aspect the user interface is a graphical user interface. However it should be noted that the user interface is only shown by way of example any suitable requesting entity may create and submit queries against the database e.g. the application an operating system or an end user . Accordingly all such implementations are broadly contemplated.

In one embodiment the requesting entity accesses a suitable database connectivity tool such as a Web application an Open DataBase Connectivity ODBC driver a Java DataBase Connectivity JDBC driver or a Java Application Programming Interface Java API for creation of a query. A Web application is an application that is accessible by a Web browser and that provides some function beyond static display of information for instance by allowing the requesting entity to query the database . An ODBC driver is a driver that provides a set of standard application programming interfaces to perform database functions such as connecting to the database performing dynamic SQL functions and committing or rolling back database transactions. A JDBC driver is a program included with a database management system e.g. DBMS to support JDBC standard access between the database and Java applications. A Java API is a Java based interface that allows an application program e.g. the requesting entity the ODBC or the JDBC that is written in a high level language to use specific data or functions of an operating system or another program e.g. the application .

Accordingly the queries issued by the application can be in physical form such as SQL and or XML queries which are consistent with the physical representation of the data for execution against the database . Alternatively the queries issued by the application are composed using the abstract model interface . Such queries are referred to herein as abstract queries . The abstract model interface is further described below with reference to . The abstract queries are transformed into a form consistent with the physical representation of the data for execution against the database . In the illustrated example an abstract query is created on the basis of logical fields defined by a data abstraction model . The abstract query illustratively includes a value request . The value request is defined by a measurement field and a chronological condition which specifies a requested point in time at which values for the measurement field should have been taken. In other words the abstract query is configured to retrieve at least one measurement value for the measurement field which was taken at a point in time that satisfies the chronological condition.

In one embodiment the abstract query is translated by a runtime component into a concrete i.e. executable query. The executable query is submitted to the query execution unit for execution. It should be noted that the query execution unit illustratively only includes the query engine for simplicity. However the query execution unit may include other components such as a query parser and a query optimizer. A query parser is generally configured to accept a received query input from a requesting entity such as the application s and then parse the received query. The query parser may then forward the parsed query to the query optimizer for optimization. A query optimizer is an application program which is configured to construct a near optimal search strategy for a given set of search parameters according to known characteristics of an underlying database e.g. the database an underlying system on which the search strategy will be executed e.g. computer system of and or optional user specified optimization goals. But not all strategies are equal and various factors may affect the choice of an optimum search strategy. However in general such search strategies merely determine an optimized use of available hardware software components to execute respective queries. The query optimizer may then forward the optimized query to the query engine for execution.

Illustratively the executable query is executed by the query engine against the data of the database to determine a result set for the abstract query . The result set includes result data for the measurement field defined by the value request . According to one aspect the result data is composed of measurement values for the measurement field which are not chronologically standardized. In other words certain events for different measurement values of the result data for the measurement field occurred at points in time which do not satisfy an underlying chronological condition defined by the value request .

In one embodiment the query engine calculates a variance value for each measurement value of the result data in order to allow use of the measurement values with the statistical analysis routines . It should be noted that in the illustrated example calculation of the variance values is not explicitly requested by the abstract query . Instead the calculation can be requested by the requesting entity e.g. by a user using the user interface . For instance the user interface can be a graphical user interface having a graphical selection element such as a checkbox which allows the user to request calculation of the variance values. Alternatively the user may use the user interface to specify that the abstract query is executed to retrieve data for a statistical analysis using the statistical analysis routines . In this case the query engine or some other component can determine whether the statistical analysis routines require the variance values and if so perform the calculation automatically. All such implementations are broadly contemplated.

The variance value for a given measurement value corresponds to a time variance between the requested point in time that satisfies an underlying chronological condition and the point in time at which the given measurement value was taken. The time variance can be used in a suitable regression equation of one of the statistical analysis routines in order to determine an approximated value for the given measurement value with respect to the requested point in time that satisfies the underlying chronological condition. Accordingly for each retrieved measurement value included with the result data a corresponding variance value is calculated and included with the result set before outputting the result set to the application s .

In another embodiment which is illustrated in by way of example the result set does not include any variance values. Instead the result set includes timestamps which define points in time when the retrieved measurement values for the measurement field were taken. In this case the result set can be a temporarily stored data object which is suitable to determine the variance values. Accordingly the temporarily stored result set is processed by the output formatter in order to create a formatted result set which is suitable as input to statistical analysis routines . The formatted result set includes the result set and associated variance values which are determined by the variance calculator . More specifically the variance calculator calculates a variance value for a given measurement value on the basis of the requested point in time that satisfies an underlying chronological condition and the timestamp of the given measurement value. The output formatter then includes all measurement values and calculated variance values into the formatted result set which is returned to the application s . As was noted above the formatted result set is suitable as input to the statistical analysis routines .

An exemplary method for managing execution of the abstract query to generate suitable input to the statistical analysis routines is described in more detail below with reference to . An exemplary method for calculating variance values using the variance calculator is described in more detail below with reference to . An exemplary timeline showing a plurality of illustrative events with respect to the value request is described in more detail below with reference to .

As was noted above the logical fields specified by the application query specification and used to compose the abstract query are defined by the data abstraction model . In general the data abstraction model exposes information as a set of logical fields that may be used within a query e.g. the abstract query issued by the application to specify criteria for data selection and specify the form of result data returned from a query operation. The logical fields are defined independently of the underlying data representation being used in a corresponding database e.g. database of thereby allowing queries to be formed that are loosely coupled to the underlying data representation.

In one embodiment illustrated in the data abstraction model comprises a plurality of field specifications and five shown by way of example collectively referred to as the field specifications also referred to hereinafter as field definitions . Specifically a field specification is provided for each logical field available for composition of an abstract query. Each field specification may contain one or more attributes. Illustratively the field specifications include a logical field name attribute collectively field name and an associated access method attribute collectively access methods . Each attribute may have a value. For example logical field name attribute has the value FirstName and access method attribute has the value Simple . Furthermore each attribute may include one or more associated abstract properties. Each abstract property describes a characteristic of a data structure and has an associated value. In the context of the invention a data structure refers to a part of the underlying physical representation that is defined by one or more physical entities of the data corresponding to the logical field. In particular an abstract property may represent data location metadata abstractly describing a location of a physical data entity corresponding to the data structure like a name of a database table or a name of a column in a database table. Illustratively the access method attribute includes data location metadata Table and Column . Furthermore data location metadata Table has the value contact and data location metadata Column has the value f name . Accordingly assuming an underlying relational database schema in the present example the values of data location metadata Table and Column point to a table contact having a column f name .

It should be noted that various other attributes are contemplated for the field specifications . Furthermore each field specification may include particular metadata such as timeline metadata. Providing field specifications with timeline data allows for creation of measurement fields in abstract queries such as the abstract query . A measurement field is a result field that corresponds to a logical field of an underlying data abstraction model and that can be associated in an abstract query with a chronological condition that specifies a requested point in time for which values for the result field should be retrieved from an underlying database. More generally timeline metadata can be used to order data elements for a logical field according to a chronological sequence. By way of example commonly owned U.S. patent application Ser. No. 11 083 208 filed Mar. 17 2005 entitled SEQUENCE SUPPORT OPERATORS FOR AN ABSTRACT DATABASE which is incorporated herein by reference in its entirety describes timeline metadata which includes type metadata and time ordering metadata. The timeline type metadata indicates that data retrieved for a given logical field may be ordered into a sequence of discrete events based on the order in which the events occurred or when the data came into being. The time ordering metadata specifies where to locate the data used to order data elements for the given logical field into a sequence. Other examples of timeline metadata are described in commonly owned U.S. patent application Ser. No. 11 035 710 filed Jan. 14 2005 entitled TIMELINE CONDITION SUPPORT FOR AN ABSTRACT DATABASE which is also incorporated herein by reference in its entirety.

In one embodiment groups i.e. two or more of logical fields may be part of categories. Accordingly the data abstraction model includes a plurality of category specifications and two shown by way of example collectively referred to as the category specifications. In one embodiment a category specification is provided for each logical grouping of two or more logical fields. For example logical fields and are part of the category specifications and respectively. A category specification is also referred to herein simply as a category . The categories are distinguished according to a category name e.g. category names and collectively category name s . In the present illustration the logical fields are part of the Name and Address category and logical fields are part of the Birth and Age category.

The access methods generally associate i.e. map the logical field names to data in the database e.g. database of . As illustrated in the access methods associate the logical field names to a particular physical data representation . . . in the database. By way of illustration two data representations are shown an XML data representation and a relational data representation . However the physical data representation indicates that any other data representation known or unknown is contemplated. In one embodiment a single data abstraction model contains field specifications with associated access methods for two or more physical data representations . In an alternative embodiment a different single data abstraction model is provided for each separate physical data representation .

Any number of access methods is contemplated depending upon the number of different types of logical fields to be supported. In one embodiment access methods for simple fields filtered fields and composed fields are provided. The field specifications and exemplify simple field access methods and respectively. Simple fields are mapped directly to a particular entity in the underlying physical representation e.g. a field mapped to a given database table and column . By way of illustration as described above the simple field access method shown in maps the logical field name FirstName to a column named f name in a table named contact . The field specification exemplifies a filtered field access method . Filtered fields identify an associated physical entity and provide filters used to define a particular subset of items within the physical representation. An example is provided in in which the filtered field access method maps the logical field name AnyTownLastName to a physical entity in a column named I name in a table named contact and defines a filter for individuals in the city of Anytown . Another example of a filtered field is a New York ZIP code field that maps to the physical representation of ZIP codes and restricts the data only to those ZIP codes defined for the state of New York. The field specification exemplifies a composed field access method . Composed access methods compute a logical field from one or more physical fields using an expression supplied as part of the access method definition. In this way information which does not exist in the underlying physical data representation may be computed. In the example illustrated in the composed field access method maps the logical field name AgeInDecades to AgeInYears 10 . Another example is a sales tax field that is composed by multiplying a sales price field by a sales tax rate.

It is contemplated that the formats for any given data type e.g. dates decimal numbers etc. of the underlying data may vary. Accordingly in one embodiment the field specifications include a type attribute which reflects the format of the underlying data. However in another embodiment the data format of the field specifications is different from the associated underlying physical data in which case a conversion of the underlying physical data into the format of the logical field is required.

By way of example the field specifications of the data abstraction model shown in are representative of logical fields mapped to data represented in the relational data representation shown in . However other instances of the data abstraction model map logical fields to other physical representations such as XML.

An illustrative abstract query corresponding to the abstract query shown in is shown in Table I below. By way of illustration the illustrative abstract query is defined using XML. However any other language may be used to advantage.

Illustratively the abstract query shown in Table I includes a selection specification lines 004 008 containing selection criteria and a results specification lines 009 013 . In one embodiment a selection criterion consists of a field name for a logical field a comparison operator 

An illustrative data abstraction model DAM corresponding to the data abstraction model shown in is shown in Table II below. By way of illustration the illustrative Data Abstraction Model is defined using XML. However any other language may be used to advantage.

By way of example note that lines 004 008 correspond to the first field specification of the DAM shown in and lines 009 013 correspond to the second field specification .

As was noted above the abstract query of Table I can be transformed into a concrete query for query execution. An exemplary method for transforming an abstract query into a concrete query is described below with reference to .

Referring now to an illustrative runtime method exemplifying one embodiment of the operation of the runtime component of is shown. The method is entered at step when the runtime component receives as input an abstract query such as the abstract query shown in Table I . At step the runtime component reads and parses the abstract query and locates individual selection criteria and desired result fields. At step the runtime component enters a loop defined by steps and for processing each query selection criteria statement present in the abstract query thereby building a data selection portion of a concrete query. In one embodiment a selection criterion consists of a field name for a logical field a comparison operator 

After building the data selection portion of the concrete query the runtime component identifies the information to be returned as a result of query execution. As described above in one embodiment the abstract query defines a list of result fields i.e. a list of logical fields that are to be returned as a result of query execution referred to herein as a result specification. A result specification in the abstract query may consist of a field name and sort criteria. Accordingly the method enters a loop at step defined by steps and to add result field definitions to the concrete query being generated. At step the runtime component looks up a result field name from the result specification of the abstract query in the data abstraction model and then retrieves a result field definition from the data abstraction model to identify the physical location of data to be returned for the current logical result field. The runtime component then builds at step a concrete query contribution of the concrete query that identifies physical location of data to be returned for the logical result field. At step the concrete query contribution is then added to the concrete query statement. Once each of the result specifications in the abstract query has been processed the concrete query is executed at step .

One embodiment of a method for building a concrete query contribution for a logical field according to steps and is described with reference to . At step the method queries whether the access method associated with the current logical field is a simple access method. If so the concrete query contribution is built step based on physical data location information and processing then continues according to method described above. Otherwise processing continues to step to query whether the access method associated with the current logical field is a filtered access method. If so the concrete query contribution is built step based on physical data location information for a given data structure s . At step the concrete query contribution is extended with additional logic filter selection used to subset data associated with the given data structure s . Processing then continues according to method described above.

If the access method is not a filtered access method processing proceeds from step to step where the method queries whether the access method is a composed access method. If the access method is a composed access method the physical data location for each sub field reference in the composed field expression is located and retrieved at step . At step the physical field location information of the composed field expression is substituted for the logical field references of the composed field expression whereby the concrete query contribution is generated. Processing then continues according to method described above.

If the access method is not a composed access method processing proceeds from step to step . Step is representative of any other access method types contemplated as embodiments of the present invention. However it should be understood that embodiments are contemplated in which less than all the available access methods are implemented. For example in a particular embodiment only simple access methods are used. In another embodiment only simple access methods and filtered access methods are used.

Referring now to one embodiment of a method for managing execution of an abstract query against an underlying database e.g. database of in order to generate suitable input to a statistical analysis routine e.g. statistical analysis routines of is illustrated. In one embodiment at least part of the steps of the method are performed by the query execution unit and or the output formatter of . Furthermore at least several steps of the method can be performed on the basis of user input received via the user interface of . Method starts at step .

At step an abstract query e.g. abstract query of having a value request e.g. value request of defined by one or more measurement fields and at least one chronological condition is received. The abstract query is configured for execution against an underlying database s in order to retrieve at least one measurement value for a given measurement field. The at least one measurement value should have been taken at a point in time that satisfies a chronological condition that is associated with the given measurement field. By way of example the following steps of the method are described with reference to an abstract query issued by a user using the user interface of .

For instance assume a researcher of a medical institution who performs a study on a drug X that is administered to patients having a particular type of a malignant brain tumor. The researcher performs the study in order to determine the efficiency of the administered drug X which is presumed to reduce the particular type of brain tumor. Accordingly the researcher requires measurement values of the tumor size of each patient which were taken at predefined points in time after administration of the drug X to the patients e.g. one month two months and one year after administration. To this end in one embodiment the researcher creates an abstract query having a value request defined by the tumor size as measurement field and a sequence of chronological conditions for the measurement field which are satisfied by the predefined points in time. An exemplary abstract query is shown in Table III below which for simplicity is described in natural language without reference to a particular query language. By way of example the following steps of the method are described with respect to the exemplary abstract query of Table III.

Illustratively the exemplary abstract query shown in Table III is designed to retrieve patient information lines 001 002 from an underlying database s for patients who are treated with drug X lines 003 004 . The requested patient information consists of a unique patient identifier ID in line 002 and a name Name in line 002 for each patient. The exemplary abstract query of Table III further includes the value request e.g. value request of in lines 005 009 which is designed to retrieve measurement values for tumor sizes of each patient. To this end the value request associates in lines 006 009 a single measurement field Tumor Size with four different chronological conditions beginning of treatment beginning of treatment 1 month beginning of treatment 2 months and beginning of treatment 1 year . Accordingly each chronological condition is satisfied by a point in time which relates to a specific event that depends on the beginning of the treatment with drug X.

It should be noted that in embodiments of the invention the specific event is not necessarily related to the measurement field. For instance assume a measurement field having weight values for female patients. Assume further a chronological condition which is satisfied by a point in time that is defined by birth of a first child of each female patient. Accordingly associating the measurement field with the chronological condition would result in a value request such as weight date of birth of first child . However the date of birth of the first child is not related to the weight of the patients. Furthermore the specific event can be a user provided value such as a particular date e.g. Jan. 15 2005 or a variable parameter as in the given example. If the specific event is a variable parameter a corresponding reference value can be determined during query execution for each retrieved data record. In other words in the given example a reference value defining the beginning of treatment is determined for each patient from the underlying database s during execution of the abstract query of Table III. As the treatment for different patients may begin at different points in time this allows to determine an individual reference value for each patient as described in more detail below. Moreover it should be noted that the exemplary abstract query of Table III illustratively associates the tumor size measurement field with four different chronological conditions. Alternatively different queries can be created each associating the measurement field with a single chronological condition. Accordingly all such different implementations are broadly contemplated.

At step the abstract query of Table III is transformed into an executable query. An exemplary method for transforming an abstract query into an executable query is described above with reference to . For simplicity the executable query in the given example is not described in more detail.

At step the executable query is executed against the underlying database s to determine result data. In the given example the executable query is executed against database tables Demographics Treatment Starts and Measurements . The database tables are identified using a corresponding data abstraction model e.g. data abstraction model of used for transforming the exemplary abstract query of Table III into the executable query. An exemplary database table Demographics is shown in Table IV below.

As can be seen from Table IV the Demographics table illustratively contains ID Name Age and State information about each patient. The ID information includes identifiers which uniquely identify each patient. Accordingly the ID information is used in the given example to link the Demographics table to the Treatment Starts and Measurements tables. An exemplary database table Treatment Starts is shown in Table V below.

As can be seen from Table V the Treatment Starts table illustratively includes three columns Patient ID Date and Injected Drug. The Patient ID column contains patient identifiers which correspond to identifiers of the ID column in the Demographics table to uniquely identify a treatment start for each patient. The Injected Drug column contains information about drugs which were administered to patients and the Date column includes timestamps which specify dates of administration of drugs. For instance according to line 002 of Table V the drug X was administered on Jan. 5 2004 1 5 04 to a patient having the unique identifier 1 . As can be seen from line 002 of Table IV the patient with the unique identifier 1 is the 24 year old Sandy from California.

For simplicity it is assumed that the dates of administration of each drug in the exemplary Treatment Starts table of Table V define the beginning of corresponding treatments. Accordingly on Jan. 5 2004 Sandy s treatment with drug X was started with administration of drug X. However other implementations are possible. For instance assume that a given drug is administered repeatedly. In this case the Treatment Starts table may only contain the date where the given drug is administered the first time i.e. the beginning of the treatment. Alternatively all administration dates can be stored in a single table but the beginning of the treatment is labeled e.g. by a corresponding flag. Or the first date of occurrence of the given drug in the single table is considered to be the beginning date. All such implementations are broadly contemplated.

As was noted above the exemplary abstract query of Table III is designed to retrieve tumor sizes of patients which were treated with drug X. As can be seen from the Treatment Starts table of Table V the patients having the identifiers 1 and 2 were administered drug X lines 002 and 004 . As was noted above the patient with the identifier 1 is Sandy from California. Furthermore as can be seen from line 003 of Table IV the patient with the unique identifier 2 is the 54 year old Jim from Texas. Illustratively Sandy and Jim were administered drug V lines 005 006 of Table V subsequent to the administration of drug X. However in the given example it is assumed that drug V has no influence on Sandy s and Jim s brain cancer treatment with drug X. In other words as the researcher s study focuses on drug X the beginning of the treatment with drug X is essential in the given example while administration and beginning of the treatment with drug V is not considered relevant. Furthermore it can be seen from Table V that a patient having the unique identifier 3 is not treated with drug X. Accordingly all information related to this patient is not relevant for the researcher s study i.e. the exemplary abstract query of Table III.

Assume now that measurements of tumor sizes which were performed on the patients at the date of and subsequent to administration of corresponding drugs to monitor progress of the brain cancers are stored in the Measurements table. An exemplary database table Measurements is shown in Table VI below.

As can be seen from Table VI the Measurements table illustratively includes three columns Patient ID Date and Tumor Size. The Patient ID column contains patient identifiers which correspond to identifiers of the ID column in the Demographics table. The Tumor Size column contains test results which were obtained by performing tests on the patients which are suitable to measure the size of their brain tumors. In other words the Tumor Size column contains measurement values for the tumor sizes of the patients. The Date column includes timestamps wich specify dates at which the test results were determined. For instance according to line 002 of Table VI the tumor size of Sandy was 20 on Jan. 5 2004 1 5 04 .

In response to execution of the executable query against the exemplary database tables of Tables IV VI result data for the result fields line 001 002 of Table III and the value request lines 005 009 of Table III of the exemplary abstract query of Table III is retrieved. The result data includes all data records in the Demographics table of Table IV and the Measurements table of Table VI which are related to the patient identifiers 1 and 2 i.e. to the patients Sandy and Jim. As was noted above the value request of the exemplary abstract query of Table III requests for measurement values which were taken at the beginning of the treatment one month later two months later and one year later. However as can be seen from lines 002 005 007 and 011 and lines 004 006 008 and 012 of the exemplary Measurements table of Table VI the tumor sizes of Sandy and Jim were not determined exactly at the requested points in time. In other words the tumor sizes of Sandy and Jim were measured at points in time which differ from the requested points in time which satisfy the chronological conditions of lines 006 009 of the exemplary abstract query of Table III. By way of example Sandy s initial measurement was performed at the beginning of Sandy s treatment on Jan. 5 2004 and the next measurement is from Feb. 1 2004 2 1 04 in line 005 of Table VI . Accordingly the next measurement was performed earlier than one month after the beginning of the treatment.

At step a variance value is calculated for each tumor size measurement value which is retrieved for Sandy and Jim from the exemplary Measurements table of Table VI. For a given measurement value which was taken at a given point in time the variance value defines a time variance between the given point in time and the requested point in time that satisfies a corresponding chronological condition of the exemplary abstract query of Table III. In the example described above the measurement of Sandy s tumor size from Feb. 1 2004 was taken four days before Feb. 5 2004. Accordingly the variance value 4 is calculated February 1 February 5 which indicates that the measurement value was taken four days before one month after the beginning of the treatment as requested by the chronological condition in line 007 of the exemplary abstract query of Table III. An exemplary method for determining the variance values is described in more detail below with reference to .

At step the result data and all calculated variance values for the measurement values that are included with the result data are returned as a result set e.g. result set of formatted result set of for the exemplary abstract query of Table III. An exemplary result set in tabular form which is obtained in the given example is shown in Table VII below.

As can be seen from Table VII the exemplary results table illustratively contains ID and Name information for each patient who was treated with drug X according to lines 002 and 004 of Table V above. The exemplary results table further includes four measurement values M M M and M of tumor sizes for each patient as requested in lines 006 009 of the exemplary abstract query of Table III. Moreover the exemplary results table includes a variance value TV TV TV and TV for each measurement value. By way of example as was noted above the variance value 4 TV in line 002 of Table VII indicates that the associated measurement value 18 M in line 002 of Table VII was taken four days earlier than the requested point in time that satisfies the chronological condition of line 007 of the exemplary abstract query of Table III.

The variance values can be used in a suitable regression equation of the underlying statistical analysis routine s in order to determine approximated values for the tumor sizes with respect to the requested points in time that satisfy the chronological conditions of the exemplary abstract query of Table III. Thus the underlying statistical analysis routine s can take into account how inaccurate each tumor size in the exemplary results table of Table VII is with respect to the requested points in time. For instance knowing that Sandy s tumor size 18 was measured four days earlier than a requested point in time it can be determined that one month after the beginning of the treatment the actual tumor size was approximately 17.7 instead of 18 . Alternatively in one embodiment the underlying statistical analysis routine s uses each variance value as a factor for determining a weight for the associated tumor size. For instance a given variance value can be used as weight for weighting the associated tumor size in order to give more or less weight to the associated tumor size thereby taking the inaccuracy of the associated tumor size into account. All such implementations are broadly contemplated. Method then exits at step .

Referring now to an exemplary method for determination of variance values for a given measurement field e.g. the Tumor Size measurement field of the exemplary abstract query of Table III is illustrated. According to one aspect method is entered from step of . At least a portion of the steps of method is performed using the variance calculator of or another suitable component e.g. query engine of . By way of example calculation of variance values is described in the following with reference to the exemplary abstract query of Table III and the exemplary database tables of Tables IV VI above.

In the given example method is separately performed for each data record which is to be included with a corresponding result set e.g. exemplary results table of Table VII for the exemplary abstract query of Table III. Accordingly in the given example method is separately performed for each patient. In other words the method is performed for all measurement values retrieved for a first patient then for all measurement values retrieved for a second patient and so on. By way of example assume that in the given example the method is first performed on all measurement values which are retrieved for the patient Sandy . Method starts at step .

At step a loop consisting of steps is entered for each chronological condition of the given measurement field. Assume now that in the given example the loop is initially entered at step for the chronological condition defined in line of the exemplary abstract query of Table III i.e. beginning of treatment .

At step a particular point in time is determined which satisfies the chronological condition. In the given example the particular point in time is defined by the date at which Sandy s treatment with drug X was started. This date is determined from the exemplary Treatment Starts table of Table V. As was noted above according to line 002 of Table V Sandy s treatment with drug X was started on Jan. 5 2004 1 5 04 . In the given example this particular point in time defines a reference value for all other chronological conditions of the given measurement field as explained in more detail below.

At step a point in time is determined for a given measurement value which was retrieved for the given measurement field with respect to the chronological condition. In the given example this point in time is Jan. 5 2004 where an initial tumor size of 20 was measured for Sandy according to line 002 of the exemplary Measurements table of Table VI.

At step a variance value defining the time variance between the determined point in time and the particular point in time is calculated. As in the given example both points in time are equal the calculated variance value is 0 .

At step the calculated variance value is included with a corresponding result set e.g. result set or formatted result set of . Processing then returns to step where the loop consisting of steps is entered for a next chronological condition of the given measurement field.

In the given example the loop is re entered at step for the chronological condition defined in line 007 of the exemplary abstract query of Table III i.e. beginning of treatment 1 month . In this case the particular point in time that satisfies the chronological condition corresponds to the reference value with a time offset of one month. Accordingly at step the particular point in time Feb. 5 2004 which corresponds to Jan. 5 2004 1 month is determined for the chronological condition defined in line 007 of the exemplary abstract query of Table III. Then according to line 005 of the exemplary Measurements table of Table VI the point in time Feb. 1 2004 is determined at step for the measurement value 18 which is identified with respect to this chronological condition. At step the time variance 4 is calculated as variance value for the measurement value 18 as described above and included with the result set at step .

Accordingly the loop consisting of steps is performed until all variance values associated with measurement values for Sandy s tumor size were calculated. Method then exits at step .

As was noted above the method is subsequently performed on all measurement values which are retrieved for the patient Jim . As in the given example only measurement values of Sandy and Jim are retrieved the method is only performed twice to calculate all variance values included with the exemplary result table of Table VII. However in general method is performed as often as necessary to determine all variance values which are required for a given result set.

It should be noted that the method merely represents one possible implementation of a method for calculating variance values for underlying measurement values. More specifically as was noted above with reference to in one embodiment the result set is created as a temporarily stored data object having a timestamp for each measurement value. In this case instead of performing method sequentially for each patient variance values for a given measurement field can be calculated with respect to a given chronological condition for all patients before calculating the variance values for all patients with respect to a next chronological condition. Such calculations can be performed in an underlying database i.e. exemplary database tables of Tables IV VI above using SQL for instance. All such different implementations are broadly contemplated.

Referring now to an exemplary timeline is illustrated. By way of example the timeline is defined by a plurality of particular points in time which satisfy underlying chronological conditions such as the chronological conditions in lines 006 009 of the exemplary abstract query of Table III.

Illustratively the timeline is defined by five particular points in time and each satisfying one of five underlying chronological conditions CC CC CC CC and CC . By way of example assume that the chronological condition CCO is satisfied by the point in time which is defined by a beginning of treatment . Assume further that i CC is satisfied by the point in time which is defined by beginning of treatment 1 month ii CC is satisfied by the point in time which is defined by beginning of treatment 2 months iii CC is satisfied by the point in time which is defined by beginning of treatment 3 months and iv CC is satisfied by the point in time which is defined by beginning of treatment 4 months .

As can further be seen from on the timeline five exemplary points in time and at which underlying measurement values M M M M and M were taken are shown. Assume that the measurement values M M were determined for an underlying measurement field such as the Tumor Size field in the exemplary abstract query of Table III. As can be seen from the timeline the measurement value M was taken at the point in time which corresponds to the beginning of treatment and thus satisfies the chronological condition . The measurement value M was taken at the point in time which lies between 1 and 2 months after the beginning of the treatment. The measurement value M was taken at the point in time which lies between 2 and 3 months after the beginning of the treatment. Finally the measurement values M and M were taken at the points in time and which lie between 3 and 4 months after the beginning of the treatment.

As was noted above for each measurement value a variance value is calculated. To this end it is assumed that the measurement value M was determined with respect to the chronological condition CC the measurement value M was determined with respect to the chronological condition CC the measurement value M was determined with respect to the chronological condition CC the measurement value M was determined with respect to the chronological condition CC and the measurement value M was determined with respect to the chronological condition CC. As the measurement value MO was taken at the beginning of the treatment which corresponds to the point in time that satisfies the chronological condition CC a variance value 0 can be calculated for the measurement value M. However for clarity this variance value is not shown in . Furthermore for the measurement value M a variance value is calculated as described above with reference to . Moreover a variance value is calculated for the measurement value M a variance value is calculated for the measurement value M and a variance value is calculated for the measurement value M.

It should be noted that the point in time at which the measurement value M was taken is equidistant to the points in time and that satisfy the chronological conditions CC and CC. It should further be noted that the point in time at which the measurement value M was taken is closer to the point in time that satisfies the chronological condition CC than the point in time that satisfies the chronological condition CC. Thus suitable rules are required in order to define which measurement value should be associated to which chronological condition. In the given example the measurement value M is associated with the chronological condition CC and a suitable rule may define that each subsequent measurement value is associated with a corresponding subsequent chronological condition. Accordingly the associations described above are obtained. Alternatively a given rule may specify that each measurement value should be associated with a chronological condition that is satisfied by a point in time which follows the point in time at which the measurement value was taken. In other words any possible rule which is suitable to determine associations between chronological conditions and available measurement values is broadly contemplated.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

