---

title: File system represented inside a database
abstract: The subject invention provides a system and/or a method that facilitates adapting at least two disparate file systems. A file system adapter can provide uniformity and/or seamless integration between a first file system and a second file system. The file system adapter can employ a file-backed item that is enriched by a file to provide at least one of a property to an item and a file stream associated with the item. The file-backed item can allow a manipulation by at least one of an API for the first file system and an API for the second file system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07392263&OS=07392263&RS=07392263
owner: Microsoft Corporation
number: 07392263
owner_city: Redmond
owner_country: US
publication_date: 20050617
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 657 533 filed on Feb. 28 2005 entitled FILE SYSTEM REPRESENTED INSIDE A DATABASE. The entirety of which application is incorporated herein by reference.

Advances in computer technology e.g. microprocessor speed memory capacity data transfer bandwidth software functionality and the like have generally contributed to increased computer application in various industries. Ever more powerful server systems which are often configured as an array of servers are commonly provided to service requests originating from external sources such as the World Wide Web for example.

As the amount of available electronic data grows it becomes more important to store such data in a manageable manner that facilitates user friendly and quick data searches and retrieval. Today a common approach is to store electronic data in one or more databases. In general a typical database can be referred to as an organized collection of information with data structured such that a computer program can quickly search and select desired pieces of data for example. Commonly data within a database is organized via one or more tables. Such tables are arranged as an array of rows and columns.

Also the tables can comprise a set of records and a record includes a set of fields. Records are commonly indexed as rows within a table and the record fields are typically indexed as columns such that a row column pair of indices can reference a particular datum within a table. For example a row may store a complete data record relating to a sales transaction a person or a project. Likewise columns of the table can define discrete portions of the rows that have the same general data format wherein the columns can define fields of the records.

Each individual piece of data standing alone is generally not very informative. Database applications make data more useful because they help users organize and process the data. The database application allows the user to compare sort order merge separate and interconnect the data so that useful information can be generated from the data. Yet the capacity and versatility of databases have grown to an incredible amount to allow a virtually endless storage capacity utilizing databases. Moreover typical database systems offer limited query ability based upon time file extension location and size. For example in order to search the vast amounts of data associated to a database a typical search is limited to a file name a file size a date of creation wherein such techniques are deficient and inept.

With a continuing and increasing creation of data from end users the problems and difficulties surrounding finding relating and storing such data is reaching its peak. End users write documents store photos rip music from compact discs receive email retain copies of sent email etc. For example in the simple process of creating a music compact disc the end user can create megabytes of data. Ripping the music from the compact disc converting the file to a suitable format creating a jewel case cover designing a compact disc label all require the creation of data.

Not only are the complications surrounding users developers have similar issues with data. Developers create and write a myriad of applications varying from personal applications to highly developed enterprise applications. While creating and or developing developers frequently if not always gather data. While obtaining such data the data needs to be stored. In other words the problems and difficulties surrounding finding relating and storing data jeopardizes both the developer and the end user.

Furthermore technological advances in databases have led to a multitude of formats and or configurations. Database formats and or configurations have increased due wherein such changes can pose integration difficulties. In other words disparate file databases typically do not adapt well with each other based on development differences. Therefore there is a need to overcome the aforementioned exemplary deficiencies associated with conventional systems and databases.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended to neither identify key or critical elements of the invention nor delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

The subject invention relates to systems and or methods that facilitate adapting disparate file systems. A file system adapter can provide uniformity between a first file system and a second file system. The uniformity can allow an application and or API for the first file system to be implemented in the second file system. The file system adapter can implement a file backed item which can be an item relating to the second file system that relies on a file and or a file stream to populate at least one property associated therewith. The file backed item can utilize the file and or associated file stream to populate the item with properties and or metadata in the second file system. By utilizing the file backed item the file system adapter allows manipulation by the API s associated to the second file system as well as existing API s related to current and previous versions of the first file system. The file system adapter can also provide synchronization between the first file system and the second file system. It is to be appreciated and understood that the file backed item can incorporate the characteristics of the first file system to the second file system such as but not limited to an attribute a security characteristic the file stream the file etc.

In accordance with one aspect of the subject invention the file system adapter can include an attribute component. The attribute component can provide attributes associated to the file and or file stream associated with the first file system to the second file system. A file can have at least one attribute such as but is not limited to read only compressed archived file etc. wherein a bit and or bits can represent such attributes. The attribute component can allow the file backed item that represents a file and or file stream in the first file system to incorporate such attributes to the second file system.

In accordance with another aspect of the subject invention the file system adapter can include a metadata handler component that allows at least one property to stay in sync between the item the file backed item and a backing file e.g. the file in the file system that is represented by the file backed item . A property can be modified in the backing file stream wherein the metadata handler component can promote the new value to the appropriate field in the item within the second file system. Furthermore a property can be changed through an API associated to the second file system the metadata handler component can demote the new value to the backing file stream within the first file system.

In accordance with still another aspect of the subject invention the file system adapter can include a ghost component that provides synchronization for a property of the file backed item. In addition an attribute tunnel component can be utilized to provide attribute tunneling to facilitate name changing and or conserving resources within the second file system. Moreover the file system adapter can include a DAG component that utilizes a directed acyclic graph in conjunction with the subject invention. In other aspects of the subject invention methods are provided that facilitate adapting disparate file systems.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. These aspects are indicative however of but a few of the various ways in which the principles of the invention may be employed and the subject invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

As utilized in this application terms component system interface and the like are intended to refer to a computer related entity either hardware software e.g. in execution and or firmware. For example a component can be a process running on a processor a processor an object an executable a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and or distributed between two or more computers.

The subject invention is described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the subject invention. It may be evident however that the subject invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the subject invention.

Now turning to the figures illustrates a system that facilitates adapting a file system with a disparate file system. A file system can be a file storage system wherein the structure is based on a file stream and or a directory. The file system can utilize the file stream such that an application and or application programming interface API can enrich the file stream to provide more structure. A file system can be a more complex model wherein an item a sub item a property and a relationship are defined to allow the representation of information within the file system as instances of complex types. An item can be defined as the smallest unit of consistency in the file system which can be independently secured serialized synchronized copied backup restored etc. The item is an instance of a type wherein all items in the file system can be stored in a single global extent of items. The file system can be based upon at least one item and or a container structure. The file system can be a storage platform that exposes rich metadata that is buried in files as items. It is to be appreciated that the file system can be a file storage system represented by a data model to support the discussed functionality.

A file system adapter can provide compatibility and or uniformity between the file system and the file system . The compatibility and or uniformity can allow an application and or an API for the file system to be implemented in the file system . The file system adapter can implement a file backed item which can be an item relating to the file system that relies on a file and or a file stream to populate at least one property associated therewith. The file backed item can act as a bridge between the file system and the richly schematized file system and or a data model related therewith. For example an image item in the file system can be a file backed item wherein the image item is backed by a file conforming to a standard image format e.g. JPEG TIF BMP etc. of the file system . In other words the file backed item can utilize the file and or associated file stream e.g. utilized by the file system to populate the item with properties and or metadata in the file system . By utilizing the file backed item the file system adapter allows manipulation by the API s associated to the file system as well as existing API s related to current and previous versions of the file system . The file system adapter can also provide synchronization between the file system and the file system . In particular the file backed item can provide the data in sync with the corresponding data in the backing file. It is to be appreciated and understood that the file backed item can provide the characteristics of the file system to the file system such as but not limited to an attribute a security characteristic the file stream the file etc.

The system further includes an interface component which provides various adapters connectors channels communication paths etc. to integrate the file system adapter into virtually any operating system s . In addition the interface component can provide various adapters connectors channels communication paths etc. that provide for interaction with data and the file system adapter . It is to be appreciated that although the interface component is incorporated into the file system adapter such implementation is not so limited. For instance the interface component can be a stand alone component to receive or transmit the data in relation to the system .

The file system adapter can include an analyzer component that analyzes the file system . The analyzer component can determine the directories and or files associated therewith to facilitate providing an adaptable and or compatible system with the file system . The analyzer component can determine at least one leaf node. It is to be appreciated that a leaf node can be represented as the file backed item whereas all directories and or files of file system can be represented as items in the file system . Thus the directories and or files that are not leaf nodes have a presence in the file system but there is no stream associated therewith.

The file system adapter can further include a generator component that creates and or generates a file backed item. The generator component can create the file backed item based at least in part upon the analysis of the file system . For example the generator component can create the file backed item for any leaf node associated to the file system wherein the file backed item is compatible with the file system since the file backed item is enriched by a file and or a file stream from the file system . The generator component can create the file backed item with at least one of the following the file backed item has an associated e.g. backing file stream the file backed item cannot contain other items e.g. they are leaf nodes in a namespace the file backed item can be ghosted discussed infra and a file attribute discussed infra is maintained for the file backed item.

The file backed item can act as a bridge between the file system and the file system . Any item of the file system can be designated as the file backed item if 1 at least part of the content is from the file and or file stream of the file system and or 2 a content of the underlying file is to be manipulated by at least one API and or application associated to the file system . The file backed item in the file system can store a metadata property associated with an item as well as the file stream associated to the item. It is to be appreciated that the file system folder directory file hierarchy mechanisms can be represented in the file system utilizing the container items that contain other items including file backed items. Thus an application utilizing the file system API s can work seamlessly with the storage mechanism of file system .

The file system adapter can include an attribute component that provides attributes associated to the file and or file stream associated with the file system to the file system . For instance the file system utilizes a file stream based storage system wherein a file can have at least one attribute such as but is not limited to read only compressed archived file etc. wherein a bit and or bits can represent such attributes. The attribute component can allow the file backed item that represents a file and or file stream in the file system to incorporate such attributes to the file system . It is to be appreciated that the attribute component can represent and or correspond such attributes as a property with the respective file backed item. In one example the attribute component can provide an update to a file attribute upon the closing of the file stream through a call from the file system . The properties can be updated through an API associated to the file system discussed infra .

The attribute component can further provide an item attribute that is a nested type that can contain attributes common to all items. The attributes can be settable by any application working through the file system and or an API associated with the file system . The following attributes can be provided as an example to be utilized by an application and or compatibility with the file system .

The file system adapter can include a metadata handler component that allows at least one property to stay in sync between the item the file backed item and a backing file e.g. the file in the file system that is represented by the file backed item . For example a property can be modified in the backing file stream wherein the metadata handler component can promote the new value to the appropriate field in the item within the file system . In another example a property can be changed through an API associated to the file system the metadata handler component can demote the new value to the backing file stream within the file system . It is to be appreciated and understood that a different type of file backed item can have a different metadata handler component associated therewith.

For instance promotion can be done asynchronously by the metadata handler component after a file has been closed by the application. On the other hand demotion can be asynchronously. A special item property can specify whether the promoted properties are in sync between an item and the backing file or not. A promotion status can specify an item promotion error status. The status can be set asynchronously with a file close on the default stream of a file backed item. The status can be NULL for a non file backed item. The table below depicts possible values for a promotion status.

It is to be appreciated that the file system can utilize an item table wherein at least one item and or file backed item stored. The item table can utilize a file stream table and or a file attribute table that associates a file stream and or a file attribute to a respective file backed item that can be stored in the item table. The file stream table and or the file attribute table can store the respective file stream and file attribute in relation to the item that is to be the file backed item e.g. containing the file stream and or file to enrich and or populate at least one property . It is to be appreciated that the file attributes can be stored in an item table. The file attribute semantics can be implemented by for example an update API.

The following is illustrated as an example of a file system that utilizes a file stream storage wherein a 32 bit system is implemented and is not to be seen as a limitation of the subject invention. The following is an example of attributes for a 32 bit file system that can be supported by the system and a file storage system FSS e.g. file system .

Continuing with the previous example the following attributes can be partially supported and or entirely supported.

The file system adapter can create a file backed item based at least upon the file structure of the file system to allow seamless integration into the file system . The file backed item can be populated and or enriched by a file and or a file stream to create and or attach properties utilized by the file system . The file backed item can allow an API for the file system to be utilized in the file system regardless of the API format requiring the file stream because the file backed item is a type that has the file and or file stream associated thereto. In other words the file backed item is a bridge between the file system and the file system .

The file system adapter can include a ghost component that provides synchronization for a property of the file backed item. The ghost component can create a ghosted item that is a replica of another file backed item but does not contain the file stream. Furthermore the ghost component can provide ghosting that is an operation for creating a ghosted item and or converting an existing item into a ghosted item. The ghost component can also provide unghosting which is an operation for converting a ghosted item into a regular item. Although the ghost component is incorporated into the file system adapter it is to be appreciated that the ghost component can be a separate component and or a stand alone unit.

The following table can provide a further description in relation to the capabilities of the ghost component .

In one example the ghost component can ghost an entity for the file system . If the item is not a file backed item an error can be returned. If the item is already ghosted the operation is a noop and returns a success. The ghost component can propagate that information to all sub entities in that ghosted item tree e.g. all embedded items relationships and or extensions and sets a bit true to inform that the entity state is ghosted. The file stream contents can be deleted for the ghosted item after the ghosting has occurred e.g. it sets the file stream to NULL .

In another example an entity can be unghosted by the ghost component . If the item is not a file backed item an error is returned. If the item is not ghosted the operation is a noop and returns a success. A bit can be set to false to inform the entity state that the entity is not ghosted. A file stream of zero length can be created and added to a file stream table. Unghosting does not restore the file stream contents a caller has to explicitely populate the file stream with appropriate contents e.g. preferably in the substantially similar transaction . In one instance the usage pattern for an unghost operation can be the following open transaction unghost item populate restore the file stream contents and commit transaction.

The file system adapter can include an attribute tunnel component ATC . The ATC provides attribute tunneling to facilitate name changing and or conserving resources within the file system . The file system utilizes a temporary file wherein such file is created upon an open access and or edit. When the file is saved in the file system the temporary file and the saved file names are swapped. For instance a file food.doc can be created and accessed in the file system . Upon access within the file system the file f1.tmp can be created. The food.doc can be moved to the f2.tmp wherein f1.tmp is moved to food.doc. The file f2.tmp can then be deleted in the file system . However based on the file system structure and utilization of an item to represent units of information an API call to update a name is an expensive resource. In general the ATC allows the associated file stream to be swapped between two file backed items. For example the file streams stored in a table file streams table can be utilized by the ATC wherein the item ID s of the two file stream can be swapped. Although depicted as incorporated into the file system adapter it is to be appreciated that the ATC can be a stand alone component incorporated into any suitable component and or a combination thereof.

The file backed item can provide a semantic layer that provides semantics e.g. implemented by an update API and or a metadata handler component depicted supra . The file backed item also includes a file stream . The file stream can be of the file system technology. The applications associated to the file system e.g. 32 bit application and or API s can operate directly on the file streams for files stored in the file system utilizing the file backed item . Many file system technologies such as but not limited to cache management streaming byte range locking and memory mapping need not be re implemented by the file system . The underlying streams are associated to the file backed item . Furthermore the file stream can be protected by at least one access control list ACL . The file stream can be represented in a file stream table such as the following table.

In addition the file backed item can also include a file attribute an entity state a change units and an item data . The file attribute can be stored in the item table wherein the file attribute semantics can be implemented by for example an update API. The entity state can have attributes stored in an entity state item user defined type UDT field. The semantics for the entity state attributes can be implemented by the update API and or the metadata handler component not shown . Moreover the file backed item can utilize the change units to change at least one unit and or the item data that represents data related to an item.

A directed acyclic graph DAG component can be utilized in conjunction with the subject invention. The DAG component can utilize a directed graph without any cycles wherein for any vertex there is no directed path starting and ending with such vertex. A source is a vertex with no incoming edges while a sink is a vertex with no outgoing edges. A finite DAG has at least one source and at least one sink. The length of a DAG is the length e.g. number of edges of a longest directed path . It is to be appreciated that the file system does not incorporate a DAG while the file system can utilize the DAG component via the file system adapter . Although depicted as a stand alone unit the DAG component can be incorporated into the file system adapter and or any other suitable component. By utilizing the DAG component a file can simultaneously describe two directories. For example when a file is deleted from a directory and is physically removed the file can still be parented to this.

It is to be understood that the intelligent component can provide for reasoning about or infer states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification explicitly and or implicitly trained schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the subject invention.

A classifier is a function that maps an input attribute vector x x x x x xn to a confidence that the input belongs to a class that is f x confidence class . Such classification can employ a probabilistic and or statistical based analysis e.g. factoring into the analysis utilities and costs to prognose or infer an action that a user desires to be automatically performed. A support vector machine SVM is an example of a classifier that can be employed. The SVM operates by finding a hypersurface in the space of possible inputs which hypersurface attempts to split the triggering criteria from the non triggering events. Intuitively this makes the classification correct for testing data that is near but not identical to training data. Other directed and undirected model classification approaches include e.g. na ve Bayes Bayesian networks decision trees neural networks fuzzy logic models and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.

A presentation component can provide various types of user interfaces to facilitate interaction between a user and any component coupled to the file system adapter . As depicted the presentation component is a separate entity that can be utilized with the file system adapter . However it is to be appreciated that the presentation component and or similar view components can be incorporated into the file system adapter and or a stand alone unit. The presentation component can provide one or more graphical user interfaces GUIs command line interfaces and the like. For example a GUI can be rendered that provides a user with a region or means to load import read etc. data and can include a region to present the results of such. These regions can comprise known text and or graphic regions comprising dialogue boxes static controls drop down menus list boxes pop up menus as edit controls combo boxes radio buttons check boxes push buttons and graphic boxes. In addition utilities to facilitate the presentation such vertical and or horizontal scroll bars for navigation and toolbar buttons to determine whether a region will be viewable can be employed. For example the user can interact with one or more of the components coupled to the file system adapter .

The user can also interact with the regions to select and provide information via various devices such as a mouse a roller ball a keypad a keyboard a pen and or voice activation for example. Typically a mechanism such as a push button or the enter key on the keyboard can be employed subsequent entering the information in order to initiate the search. However it is to be appreciated that the invention is not so limited. For example merely highlighting a check box can initiate information conveyance. In another example a command line interface can be employed. For example the command line interface can prompt e.g. via a text message on a display and an audio tone the user for information via providing a text message. The user can than provide suitable information such as alpha numeric input corresponding to an option provided in the interface prompt or an answer to a question posed in the prompt. It is to be appreciated that the command line interface can be employed in connection with a GUI and or API. In addition the command line interface can be employed in connection with hardware e.g. video cards and or displays e.g. black and white and EGA with limited graphic support and or low bandwidth communication channels.

At reference numeral the first file system based on the file stream can be analyzed. Such analysis can determine the file structure and content for which to be utilized to provide uniformity. At reference numeral a file backed item can be created based at least upon the analysis. For example the analysis can determine a 32 bit file storage system and the number of leaf nodes associated to such structure. Thus the file backed item can be created for each leaf node associated to the first file system while an item can be utilized to represent a file and or directory that is not a leaf node. The file backed item can be an item within the second file system that relies on a file and or file stream to populate some or all of its properties. The file backed item can act as a bridge between the first file system and the second file system. At reference numeral the file backed item can be utilized to provide uniformity between the two disparate file systems based at least in part upon the first file system utilizing a file stream and a file and the second file system incorporating the file backed item which contains the file and or file stream that can relate to the first file system.

At reference numeral ghosting can be provided to ensure attribute integrity and synchronization between the first file system and the second file system. For example a ghosted item can be created such that it is a replica of another file backed item but does not contain the file stream. Moreover ghosting can be provided that is an operation for creating a ghosted item and or converting an existing item into a ghosted item. Additionally unghosting can be utilized which is an operation for converting a ghosted item into a regular item. At reference numeral an attribute from the first file system can be incorporated and or utilized with the file backed item associated to the second file system. The first file system can contain the attribute which can be but is not limited to read only compressed archived file etc. wherein a bit and or bits can represent such attributes. It is to be appreciated that the attributes can be incorporated into the second file system via the file backed item.

At reference numeral attribute tunneling can be utilized and or a DAG. The attribute tunneling can provide the swapping of a file stream between at least two file backed items to allow the conservation of resources and or changing of names between temporary files in the second file system. The DAG can provide a graph of connected items that have no cycles. At reference numeral the API s from the first file system can be utilized with the second file system by employing the file backed item which provides seamless integration. In other words the file backed item contains metadata properties associated with an item as well as the file stream associated with the item. The file backed items can be manipulated by API s associated with the second file system as well as the API s part of the first file system.

In order to provide additional context for implementing various aspects of the subject invention and the following discussion is intended to provide a brief general description of a suitable computing environment in which the various aspects of the subject invention may be implemented. While the invention has been described above in the general context of computer executable instructions of a computer program that runs on a local computer and or remote computer those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multi processor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based and or programmable consumer electronics and the like each of which may operatively communicate with one or more associated devices. The illustrated aspects of the invention may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the invention may be practiced on stand alone computers. In a distributed computing environment program modules may be located in local and or remote memory storage devices.

One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operably connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operably connected to one or more server data store s that can be employed to store information local to the servers .

With reference to an exemplary environment for implementing various aspects of the invention includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Card Bus Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA Firewire IEEE 1394 and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable programmable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in the suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the subject invention can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices which require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses wire and or wireless communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet Token Ring and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the subject invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the subject invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject invention are possible. Accordingly the subject invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

In particular and in regard to the various functions performed by the above described components devices circuits systems and the like the terms including a reference to a means used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. a functional equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary aspects of the invention. In this regard it will also be recognized that the invention includes a system as well as a computer readable medium having computer executable instructions for performing the acts and or events of the various methods of the invention.

In addition while a particular feature of the invention may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes and including and variants thereof are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising. 

