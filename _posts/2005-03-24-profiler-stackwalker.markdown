---

title: Profiler stackwalker
abstract: A call stack includes at least one frame of managed code and at least one frame of unmanaged code. In a multithreaded environment, a request from a diagnostic tool to a tracing function for the call stack is made on a thread that is not associated with the call stack. The tracing function preserves a context for a thread associated with the call stack until the call stack tracing function ends. In a particular embodiment, a method grants access to a stackwalking function, such that when a point on the call stack is designated in a request for the stackwalking function, the stackwalking function commences at the point on the call stack. When no point on the call stack is designated in the request for the stackwalking function, a default position on the call stack is determined based on a last managed frame pushed onto the call stack and the stackwalking function commences at the default position on the call stack.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07712082&OS=07712082&RS=07712082
owner: Microsoft Corporation
number: 07712082
owner_city: Redmond
owner_country: US
publication_date: 20050324
---
Profiler stackwalking in a managed execution environment is described herein. More particularly the description pertains to example implementations for a managed execution environment to expose stackwalking functionality in response to a profiler request for a stackwalk on a call stack in the managed execution environment.

A stackwalk may refer to reporting or disclosing a sequence of frames on a call stack which may refer to a reserved amount of memory that tracks a sequence of methods called in an application or program. Each disclosed frame may refer to at least one of a method routine instruction pointer register value and a function name that have been pushed on the call stack.

Client device may be at least one of a variety of conventional computing devices including a desktop personal computer PC workstation mainframe computer Internet appliance set top box and gaming console. Further client device may be at least one of any device that is capable of being associated with network by a wired and or wireless link including a personal digital assistant PDA laptop computer cellular telephone etc. Further still client device may represent the client devices described above in various quantities and or combinations thereof. Other device may also be embodied by any of the above examples of client device .

Server device may provide any of a variety of data and or functionality to client device or other device . The data may be publicly available or alternatively restricted e.g. restricted to only certain users or only if an appropriate subscription or licensing fee is paid. Server device may be at least one of a network server an application server a web blade server or any combination thereof. Typically server device is any device that may be a content source and client device is any device that may receive such content either via network or in an off line manner. However according to the example implementations described herein client device and server device may interchangeably be a sending node or a receiving node in network environment . Other device may also be embodied by any of the above examples of server device .

 Other device may be any further device that is capable of implementing profiler stackwalking according to one or more of the examples described herein. That is other device may be any software enabled computing or processing device that is capable of implementing profiler stackwalking for an application program function or other assemblage of programmable and executable code across an interface between a managed execution environment and another execution environment with the other execution environment being either one of a managed and an unmanaged execution environment. Thus other device may be a computing or processing device having at least one of an operating system an interpreter converter compiler or runtime execution environment implemented thereon. These examples are not intended to be limiting in any way and therefore should not be construed in that manner.

Network may represent any of a variety of conventional network topologies which may include any wired and or wireless network. Network may further utilize any of a variety of conventional network protocols including public and or proprietary protocols. For example network may include the Internet an intranet or at least portions of one or more local area networks LANs .

The aforementioned another execution environment may be either another managed execution environment an unmanaged execution environment or even the same execution environment. For the purpose of describing example implementations of profiler stackwalking execution environment A may be regarded as a managed execution environment and execution environment B may be regarded as an unmanaged execution environment which may include an operating system. Significance may be given to this scenario of execution environment interaction because profiler stackwalking of a call stack in a managed execution environment has typically been hindered due to the proprietary nature of methods on a call stack in the managed execution environment.

Execution environment A and execution environment B may be contained within the same process. However in at least one alternative implementation execution environment A and execution environment B may be contained in different processes.

Execution environment A may be a managed execution environment alternatively referred to as a runtime execution environment examples of which may include Visual Basic runtime execution environment Java Virtual Machine runtime execution environment that is used to run e.g. Java routines or Common Language Runtime CLR to compile e.g. Microsoft .NET applications into machine language before executing a called routine.

Managed execution environments may provide routines for application programs to perform properly in an operating system because application programs require another software system in order to execute. Thus an application program may call one or more managed execution environment routines which may reside between the application program and the operating system and the runtime execution environment routines may call the appropriate operating system routines.

Managed execution environments have been developed to enhance the reliability of software execution on a growing range of processing devices including servers desktop computers laptop ie. notebook computers and a host of mobile processing devices PDAs and mobile smart phones . Managed execution environments may provide a layer of abstraction and services to an application program running on a processing device and further provide such an application program with capabilities including error handling and automatic memory management.

Interface may refer to an application programming interface alternatively referred to as an API that may expose stackwalking functionality to a profiler diagnostic tool. In the context of the example implementations described herein interface may be regarded as a language and message format provided by managed execution environment to enable profiler in execution environment B to communicate with stackwalking functionality in execution environment A . According to at least one example implementation of profiler stackwalking interface may be an API that is a subset of a full profiling API.

Stackwalking functionality may refer to an application or program module capable of performing a stackwalk by disclosing or reporting at least one frame of a call stack in execution environment A to requesting profiler in execution environment B . Each disclosed frame may refer to at least one of a method routine instruction pointer register value and a function name that have been pushed on call stack . However for the sake of the present description references to frames will pertain to methods although such references are provided as examples only and are not intended to limit the implementations described herein in any manner.

According to at least one example implementation of profiler stackwalking a function call i.e. request from profiler to stackwalking functionality may initiate a stackwalk on call stack . During the course of the stackwalk a callback function may be called once for each frame found on call stack .

Call stack may refer to a reserved amount of memory that tracks a sequence of methods called in an application or program. As each method on call stack is completed a processor may return control to a calling method all the way back to the first method that began the sequence. Such call stacks may be regarded as last in first out meaning that the most recent item pushed i.e. placed on a call stack may be the first item removed from the call stack.

Execution environment B may refer to an unmanaged execution environment which may typically include an operating system outside of managed execution environment A .

When profiler requests a stackwalk i.e. stack trace on call stack profiler may instantiate a request on interface e.g. DoStackSnapshot . Such instantiation may or may not include a seed which may refer to a starting point at which the requested stackwalk is specified to begin. Alternatively such instantiation may further include a range of frames on call stack on which the stackwalk is to be executed. Subsequently one or more frames from call stack may be disclosed or reported to profiler from interface as part of a callback method e.g. StackSnapshotCallback .

It is noted that the nomenclature associated with the APIs throughout the present description is provided as an example only and is not intended to be limiting in any manner. Such interfaces may have different references with the same or similar effect.

Block may refer to interface in execution environment A exposing stackwalking functionality to profiler in execution environment B .

Decision may refer to execution environment A determining whether safe conditions exist for stackwalking functionality to be implemented. If safe conditions do not exist processing flow terminates at block . In the alternative however execution environment A may typically perform one or more checks to ensure that stackwalking functionality as requested by profiler may be safely implemented. An example of such checks may include analyzing one or more of the threads involved in the requested stackwalking.

In the example implementations described herein reference to a source thread may be directed toward a thread on which profiler requests stackwalking functionality . Further since a call stack may be regarded as being associated with a thread that contains the call stack reference to a target thread may be directed toward a thread associated with the call stack for which profiler has requested stackwalking functionality be implemented.

Execution environment A determines whether stackwalking functionality initiates from a safe point on the target thread. Further checks for the existence of safe conditions for a stackwalk may be required depending on the relationship between the source thread and the target thread.

Accordingly decision may result in a determination that stackwalking functionality is not safe meaning that invocation thereof may be disruptive to execution of an application on which stackwalking functionality is operating. Further stackwalking functionality may be deemed to be disruptive to execution of the target thread meaning invocation of stackwalking functionality may potentially be catastrophic to the execution of the application.

Thus processing flow may terminate at block for example by execution environment A refusing to grant profiler with the requested access to stackwalking functionality .

Block may refer to execution environment A granting profiler with access to stackwalking functionality upon positive decision .

Decision may refer to execution environment A determining whether an instantiated request by profiler for stackwalking functionality includes a starting point at which the requested stackwalk is to begin relative to call stack . Such starting point is described above as a seed although such terminology is provided only as an example.

Block subsequent to positive decision may refer to stackwalking functionality being initiated at a frame of call stack designated in the seed.

Block subsequent to negative decision may refer to stackwalking functionality starting at a default position on call stack . The default position may be the last frame pushed on call stack or even the last managed frame pushed on call stack . Such default positions are provided as examples only and are not intended to limit the scope of the example implementations described herein.

One or more implementations of stackwalking functionality may include execution environment A utilizing a callback method e.g. StackSnapshotCallback to provide one or more frames on call stack to profiler in a last in first out ie. LIFO manner. That is each subsequent frame of call stack reported to profiler may refer to a method that called the previously reported method.

Decision may refer to a determination that the stackwalk on call stack has encountered a frame consisting of unmanaged code. More specifically when call stack is a mixed mode call stack having managed and unmanaged methods pushed thereon the stackwalk on call stack may encounter one or more unmanaged frames. Upon detecting a transition from a frame having a method consisting of managed code to a frame having a method consisting of unmanaged code on call stack stackwalking functionality may detect a marker at or near the point of transition indicating at least the context ie. attributes of the method consisting of unmanaged code.

Block subsequent to positive decision may refer to profiler handling unmanaged code on call stack . Such unmanaged handling may include executing known heuristics for performing a stackwalk for a method consisting of unmanaged code. Processing flow shows block performing one or more known heuristics for a stackwalk on a method consisting of unmanaged code on mixed mode call stack in a linear manner. However according to at least one alternative implementation of processing flow block may include caching the marker that indicates at least the context of the method consisting of unmanaged code and returning to perform one or more known heuristics for the stackwalk on the frame having a method consisting of unmanaged code after the stackwalk has been completed with regard to frames having methods consisting of managed code on call stack .

Decision may refer to a determination by profiler to terminate the stackwalk. Positive decision may result in processing flow terminating.

Decision resulting from negative decision may refer to execution environment A determining whether frames remain to be stackwalked on call stack . Negative decision may result in processing flow terminating. Positive decision may result in processing flow resuming at decision .

Call stack may refer to a reserved amount of memory having a sequence of frames having methods consisting of managed and unmanaged code. Thus call stack may be referred to as a mixed mode call stack although the examples described herein may also apply to call stack having a sequence of frames having methods consisting of only managed code.

Call stack includes main method main method calls method E method E calls method D method D calls unmanaged B which is a method consisting of unmanaged code unmanaged B calls method C method C calls method B method B calls method A and method A calls unmanaged A which is a method consisting of unmanaged code. Unless specified it may be assumed that the methods on call stack consist of managed code.

Call stack may be regarded as a LIFO call stack although the examples described herein are not limited to such embodiments. Accordingly a stackwalk on call stack implementing stackwalking functionality may be conducted downward from the most recently called method unmanaged A down towards main method . Therefore via interface stackwalking functionality may report frames including the methods to profiler . Typically frames may be reported to profiler on a frame by frame basis although alternative embodiments of stackwalking functionality may contemplate more than one frame being reported to profiler as requested thereby.

As profiler submits a request for stackwalking functionality the request may include a seed indicating that the requested stackwalk is to begin from a frame corresponding to a particular one of methods . Thus the stackwalk may begin at any frame corresponding to methods . Further the request may optionally indicate the range or number of frames on which the stackwalk is to be implemented.

However if the request does not include a seed the stackwalk on stack may begin at a default position such as e.g. the last frame pushed on call stack which is unmanaged A . It is unlikely though not necessarily prohibited that a stackwalk on call stack would begin with a frame having a method consisting of unmanaged code because the context is likely to be unknown and therefore an error code may be returned in response to the request for stackwalking functionality . Therefore it is more likely that a stackwalk on call stack may begin on the last managed frame that is pushed on call stack which is method A in the example of .

Further a stackwalk on call stack may detect markers and as the stackwalk proceeds from a frame having a method consisting of unmanaged code to a frame having a method consisting of managed code. Markers and may be left by execution environment A for internal purposes.

Profiler may know where to perform one or more known heuristics for performing a stackwalk on a frame having a method consisting of unmanaged code on call stack based on information provided by execution environment A as stackwalking functionality proceeds from a method consisting of managed code to a method consisting of unmanaged code.

By the examples described above profiler stackwalking in a managed execution environment may be implemented. More particularly a managed execution environment may expose stackwalking functionality in response to a profiler request for a stackwalk on a call stack in the managed execution environment.

Various modules and techniques may be described herein in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

 Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

 Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. As a non limiting example only communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

Reference has been made throughout this specification to an implementation implementations or an example implementation meaning that a particular described feature structure or characteristic is included in at least one example of the present invention. Thus usage of such phrases may refer to more than just one example or example implementation. Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One skilled in the relevant art may recognize however that the invention may be practiced without one or more of the specific details or with other methods resources materials etc. In other instances well known structures resources or operations have not been shown or described in detail merely to avoid obscuring aspects of the invention.

While example implementation and applications of the present invention have been illustrated and described it is to be understood that the invention is not limited to the precise configuration and resources described above. Various modifications changes and variations apparent to those skilled in the art may be made in the arrangement operation and details of the methods and systems of the present invention disclosed herein without departing from the scope of the claimed invention.

