---

title: Software security based on control flow integrity
abstract: Software control flow integrity is provided by embedding identifying bit patterns at computed control flow instruction sources and destinations. The sources and destinations of computed control flow instructions are determined with reference to a control flow graph. The identifying bit patterns are compared during software execution, and a match between a source and a respective destination ensures control flow consistent with the control flow graph. Security measures are implemented when the comparison results in a mismatch, indicating that control flow has deviated from the anticipated course.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577992&OS=07577992&RS=07577992
owner: Microsoft Corporation
number: 07577992
owner_city: Redmond
owner_country: US
publication_date: 20050114
---
This application is related to U.S. Pat. No. 7 337 291 entitled Software Memory Access Control filed herewith and incorporated by reference in its entirety.

The invention generally relates to computing systems and more specifically to protecting computers in such systems from attacks.

Computer software may be vulnerable to external attacks that aim to control its behavior. Typically such attacks arrive as data over a regular communication channel and exploit pre existing software flaws. By exploiting a flaw an attack in the form for example of a worm or virus may subvert software execution and gain control over software behavior. Worms or viruses may insert themselves into an execution flow of software and divert the flow from the software planned course to a course dictated by the worm or virus. The software flaw may be at the machine code level and the attack may divert execution of software machine code leading to the execution of an unanticipated sequence of machine code instructions.

A typical approach to protecting software against such worms or viruses is to reduce or attempt to eliminate flaws in software coding. A problem with this approach is that it may be very difficult to eliminate all flaws in a piece of software. Other mitigation approaches depend on computer systems independently picking arbitrary values from a large potential set of values and attempting to surround or convolve important metadata that an attacker may want to modify with those arbitrary values such that the attacker must for a successful attack make use of the actual values chosen. These approaches cannot guarantee that the attacker will not learn the chosen values and may be ineffective if an attacker learns or successfully guesses the chosen value. More broadly such approaches may not prevent many attacks that may in particular modify machine memory.

Therefore there is a need for a defense against viruses worms and other attacks on computers that is not dependent on the secrecy of arbitrarily chosen values and that can resist attacks that may modify memory.

The invention provides control flow integrity CFI that mitigates vulnerabilities of computer software without requiring the elimination of software flaws and can prevent an attacker from being successful even when the attacker changes data memory. CFI may restrict the flow of control between machine code instructions that are executing on a computer constraining the permissible run time software control flow to remain within a pattern that is identifiable before software execution. The pattern may be identified by a control flow graph CFG that maps the control flow of the software. Control flow instrumentation may insert arbitrarily chosen unique identifying bit patterns ID at computed control flow instruction locations identified by the CFG. At a computed jump for example an ID may be embedded at the source of the jump and the same ID may be embedded at the destination of the jump. When the software is running and the computed jump is executed the IDs at the source and at the destination may be compared and if they match the computed jump will complete and the software will continue executing. If the IDs at the source and destination do not match then remedial measures e.g. notifying the user stopping the software execution may commence.

In the event that multiple computed control flow instructions have overlapping destinations the overlapping destination instructions may be duplicated to prevent an attacker from diverting control flow in an unanticipated manner. Alternatively more than one ID may be embedded in such manner that for example if two sources of a computed jump land on the same destination one of the sources and the destination may have two IDs embedded with the other source having one of the two IDs embedded. In this way a match will occur if both of the IDs match for the source with two IDs and if one of the IDs matches for the other source.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation FIG. illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client devices can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Control flow integrity CFI in accordance with the invention may provide that during software program execution control flow machine code instructions target a valid destination. The validity of the destination may be determined by reference to a control flow graph CFG created ahead of time pursuant to a control flow analysis. The CFG may be produced for example by performing a static control flow analysis on a program. The CFG also may be produced for example by a compiler or by a combination of static analysis and a compiler. In addition the CFG may incorporate control flow restrictions implied by a security policy. The production of the CFG may also rely on dynamic analysis. In addition the CFG may incorporate control flow restrictions implied by a security policy.

Because most control flow instructions may target a constant destination encoded as an immediate operand a CFI requirement may be discharged statically. CFI also may be enforced using a dynamic check that can determine destination validity. This may be desired for example in the case of computed control flow instructions e.g. computed jumps where a destination may be determined only at runtime. Dynamic checks for enforcing CFI may be added to software by rewriting the software or by instrumentation. CFI instrumentation may modify according to a given CFG each computed control flow instruction or source and each possible destination of those sources. In particular a unique identifying bit pattern or ID may be inserted at the start of each equivalent destination. Two destinations may be equivalent if the CFG contains edges to both from a single source and two sources may be equivalent if in the CFG they both target the same destination. Finally CFI instrumentation may insert before all equivalent sources the code for an ID check. This ID check may be a dynamic check that helps ensure that a runtime destination starts with an ID of a proper equivalence class.

In the CFG the software control flow may proceed in to point A and out from point D. From point A the software flow may proceed to point D through either point B or point C. Either path ABD or ACD may be valid and one path may be chosen for a single execution. The path that may be chosen may only be known at runtime. In the path that is chosen is shown by arrows as being through ABD. An embodiment of the invention may place a unique identifying bit pattern or ID consistent with the CFG at points A B C and D such that the ID assists in constraining the control flow. That is the ID may act as a check to ensure that the control flow of the software proceeds in an anticipated manner. A bit pattern chosen as an ID may be otherwise absent from code memory except as used in the IDs and ID checks after CFI instrumentation. This absence may be achieved for software by making the space of the IDs large enough e.g. 32 bit and by choosing IDs that do not conflict with the code.

For example as the control flow proceeds from point A to either point B or D an arbitrarily chosen ID such as for example may be assigned at A. The ID may be chosen randomly or in any arbitrary manner. When the control flow reaches B or C the ID assigned at B or C should likewise be . When the control flow leaves either B or C an ID assigned upon leaving B or C e.g. should match the ID at point D.

If the control flow is attacked at either point Y or point X for example and the control flow proceeds via path or path to point E then the ID upon leaving point B e.g. or point A e.g. may not find a match at point E. If this occurs then the software program may halt show an error modify behavior provide a notification or implement other remedial measures.

Sort may return to two different places in sort . Therefore CFI instrumentation may add two IDs to the body of sort called nop . The ID constants may be chosen in a way that prevents a computed jump to chance upon a valid destination that is different from an intended destination. The IDs may be globally unique 32 bit values. An ID check may be performed when returning from sort using nop as an arbitrarily chosen ID bit pattern. Nop is an instruction that embeds the value and constrains the control flow of the software by prescribing that sort must return to a place in the machine code with a value embedded. Similarly because sort can call either lt or gt both comparison functions start with an ID nop and a function pointer call instruction which uses register R may perform an ID check for . Finally an ID may identify a block following the comparison call site in sort and thus both comparison functions may return with an ID check for . If an attacker has diverted the execution path resulting in a failed ID check then an attack on the control flow may be identified and addressed. In such a case the software program may halt show an error modify behavior provide notification or implement other remedial measures.

It should be noted that may expose a pattern that may exist when CFI is applied to software compiled from higher level programming languages. Direct function calls may not be affected by CFI instrumentation. Indirect calls however may use an ID check. Additionally functions called via a pointer e.g. virtual methods may use the addition of an ID. Function returns may account for many ID checks and an ID may be inserted after each function call site whether that function is called indirectly or not. Remaining computed control flow may be a result of switch statements or exceptions and for both an ID may be used at each possible destination and an ID check at a point of dispatch.

It should be noted that the degree of control flow integrity that is implemented in a system may be controlled. One manner of controlling the degree of control flow integrity is by assignment of the IDs at each computed control flow instruction source and destination. If at each source and destination throughout software the same ID is used then any destination containing an ID value may be an appropriate destination for any computed jump for example. Conversely if each source contains a different ID value from every other source and each destination has an ID value matched to only one source then a high degree of control may be maintained in the control flow integrity of the software. A second manner of controlling the degree of control flow is by inserting the ID values at more and more locations having computed control flow instructions. For more control flow integrity more locations may have such ID values assigned and for less control flow integrity less locations may have the ID values assigned.

Control flow may be constrained pursuant to a CFG in software by for example adding machine code instruction to assign IDs in accordance with a CFG. A tool for binary rewriting of code may be used to add the IDs and instructions in existing software code. It should be noted that the code may generally be non writable code as used on most current systems except during the loading of dynamic libraries or run time code generation.

Control flow may be constrained in hardware as well. depict alternative examples of CFI instrumentation ID checks along with CFI source instruction for use with an x86 processor. Of course the x86 processor is discussed for example purposes only and in no way limits the applications for the invention. CFI may be enforced by any mechanism that can mediate machine code control flow. In particular the example modified instruction set described with regard to may form the basis for a hardware CFI implementation that would incur zero performance overhead. This CFI support could be added to common processors. In the source is a computed jump instruction jmp ecx with a destination of a mov from a stack. Because the destination is in ecx the ID checks may not have to move it to a different register although in general ID checks may do this to avoid a time of check to time of use race condition. Also the code sequence for the ID checks may overwrite processor flags such overwriting may have an effect on program behavior and may therefore require compensation. The ID used in may be a 32 bit hexadecimal value 12345678 for example.

In the ID may be inserted as data before the destination mov instruction and the ID check may modify the computed destination using a lea instruction to skip over the four ID bytes. The ID check may directly compare the original destination with the ID value which may embed the ID bit pattern within the ID check cmp opcode bytes. As a result an attacker may be able to trigger an infinite loop of executing the ID check opcode bytes through E and may in certain contexts be able to circumvent CFI altogether.

The code shown in may avoid the potential problems of the code shown in regarding infinite loops by using ID 1 as an immediate constant and incrementing it to compute the ID at runtime. Also the code of may not modify the computed jump destination but instead may insert an effective nop ID at the start of the destination using a side effect free x86 prefetch instruction to synthesize a nop ID instruction that includes the given ID in the appropriate destination location in the code memory.

In an embodiment of the invention the data may be non executable. Non executable data may be supported in hardware for example on an x86 processor and operating systems may help enforce a separation between code and data. Non executable data may also be supported in software. In this way even if an attacker is able to add or change memory the code may not allow the additional or changed memory to be used in the code. In the event that data is executable CFI in accordance with an embodiment of the invention may continue to be used because the ID values may be randomly chosen in a manner opaque to potential attackers from a large range of potential values. It therefore may be unlikely that the changed or added memory such as that introduced by an attacker would be preceded by exactly the right values when used by the code.

There are solutions to this CFG zigzagging problem and two potential solutions are demonstrated in . A CFG is shown in in which as in an ID of is embedded at functions A B and C thus providing CFI for the call by function A. With regard to the function E two IDs may be embedded at the source and destination for example and . CFI consistent with the CFG may be ensured in this way by requiring the comparison to check for both an ID of and an ID of . In this way an attacker trying to divert control flow of function E from function C to function B may fail because an ID of may not be embedded in function B.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the specific examples in conjunction with the various figures it is to be understood that other embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. The examples are offered in explanation of the invention and are in no way intended to limit the scope of the invention as defined in the claims. In summary in no way is the present invention limited to the examples provided and described herein. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

