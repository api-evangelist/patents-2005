---

title: Architecture, programming model and API'S
abstract: The subject invention provides a system and/or a method that facilitates employing a model based at least upon a framework, wherein the model can be utilized to build an RFID application. A receiver component can receive data, wherein a model component can create a model based at least in part upon the received data that facilitates creating and/or executing the RFID application. The framework can be, but is not limited to, an entity, a framework class, a hierarchical framework of at least one class, an interface, an exception, a component architecture, a schema, an object model, and/or an API (Application Programming Interface). The model can be utilized to create, deploy, manage, and/or execute the RFID application to provide a generic operation and/or a business specific scenario.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07295116&OS=07295116&RS=07295116
owner: Microsoft Corporation
number: 07295116
owner_city: Redmond
owner_country: US
publication_date: 20050301
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 606 281 filed on Sep. 1 2004 entitled SYSTEM AND METHODS THAT FACILITATE RFID SERVER PROGRAMMING MODEL AND API S and U.S. Provisional Patent Application Ser. No. 60 606 577 filed on Sep. 2 2004 entitled FACILITATE RFID SERVER PROGRAMMING MODEL AND API s. This application is also related to co pending U.S. patent application Ser. Nos. 11 025 702 11 061 356 and 11 061 337 filed on Dec. 29 2004 Feb. 18 2005 and Feb. 18 2005 respectively. The entireties of these applications are incorporated herein by reference.

The subject invention generally relates to radio frequency identification RFID and more particularly to a system and or a method that generates a framework to create and or execute an RFID application.

Many retail manufacture and distribution establishments are applying different and innovative operating methods to increase efficiency. These establishments can monitor store inventory to facilitate optimizing supply and demand relating to consumers. One aspect of maximizing profit hinges on properly stocking inventory such that replenishment occurs in conjunction with exhaustion of goods and or products. For example a retailer selling a computer and or a VCR must stock the computer in relation to its consumer sales and the VCR in relation to its consumer sales. Thus if the computer is in higher demand e.g. more units sold than the VCR the retailer can stock the computer more frequently in order to optimize supply and demand and in turn profit. Monitoring inventory and associated sales can be a complex task wherein product activity is comparable to a black box since inner workings are unknown yet monitoring products is a crucial element in inventory product efficiency.

Automatic identification and data capture AIDC technology specifically Radio Frequency Identification RFID has been developed based at least upon the need to cure deficiencies of typical monitoring systems and or methodologies e.g. barcode readers barcodes and or UPCs . RFID is a technique of remotely storing and retrieving data utilizing RFID tags. Since RFID systems are based upon radio frequency and associated signals numerous benefits and or advantages precede traditional techniques in monitoring products. RFID technology does not require a line of sight in order to monitor products and or receive signals from RFID tags. Thus no manual scan is necessary wherein the scanner is required to be in close proximity of the target e.g. product . Yet range is limited in RFID based upon radio frequency RFID tag size and associated power source. Additionally RFID systems allow multiple reads within seconds providing quick scans and identification. In other words an RFID system allows a plurality of tags to be read and or identified when the tags are within a range of an RFID reader. The capability of multiple reads in an RFID system is complimented with the ability of providing informational tags that contain a unique identification code to each individual product.

Moreover RFID systems and or methodologies provide real time data associated to a tagged item. Real time data streams allow a retailer distributor and or manufacturer the ability to monitor inventory and or products with precision. Utilizing RFID can further facilitate supplying products on a front end distribution e.g. retailer to consumer and a back end distribution e.g. distributor manufacturer to retailer . Distributors and or manufacturers can monitor shipments of goods quality amount shipping time etc. In addition retailers can track the amount of inventory received location of such inventory quality shelf life etc. The described benefits demonstrate the flexibility of RFID technology to function across multiple domains such as front end supply back end supply distribution chains manufacturing retail automation etc.

An RFID system consists of at least an RFID tag and an RFID transceiver. The RFID tag can contain an antenna that provides reception and or transmission to radio frequency queries from the RFID transceiver. The RFID tag can be a small object such as for example an adhesive sticker a flexible label and integrated chip etc. There are typically four different frequencies the RFID tags utilize low frequency tags between about 125 to 134 kilohertz high frequency tags about 13.56 megahertz UHF tags about 868 to 956 megahertz and Microwave tags about 2.45 gigahertz .

In general an RFID system can include multiple components tags tag readers e.g. tag transceivers tag writers tag programming stations circulation readers sorting equipment tag inventory wands etc. Moreover various makes models types and or applications can be associated with respective components e.g. tag tag readers tag programming stations circulation readers sorting equipment tag inventory wands . . . which can complicate discovery configuration setup communication maintenance security and or compatibility within the RFID system and with other RFID systems. In view of the above there is a need to provide a uniform way to discover configure setup and communicate to RFID devices in respect to the maker and associated specifications.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended to neither identify key or critical elements of the invention nor delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

The subject invention relates to systems and or methods that facilitate implementing a model that can be utilized to create an RFID process at design time and execute the RFID process at run time. A receiver component can receive data wherein a model component can create a model based at least in part upon the received data that facilitates creating the RFID application at design time and executing the RFID application at run time. The receiver component can obtain data such as but is not limited to an external input e.g. end user input application developer input etc. device related data e.g. antennae data configuration data an identification an address a version etc. provider related data tag data a device collection a filter policy an alert policy a logical source e.g. wherein a logical source can comprise of a device collection s optional filter and or alert policies and or optional event handler an event handler an event etc. The model created by the model component can be utilized to facilitate creating deploying executing and or maintaining the RFID process. Furthermore the model component can utilize an event processing pipeline wherein a pipeline event can utilize a processing node. The pipeline event processing nodes can be at least one of a filter e.g. an invalid tag a duplicate tag a removed tag etc. an alert e.g. a theft detection a blank tag etc. and an event handler e.g. an internal movement a business context etc. . The event can get enriched and or populated with data as it progresses through the pipeline.

In accordance with one aspect of the subject invention the model component can utilize a framework which can be but is not limited to an entity e.g. a device a logical source a filter policy an alert policy an event handler a tracker a write handler an RFID process object a store etc. a framework class a hierarchical framework of at least one class an interface an exception a component architecture a schema an object model an application programming interface API . . . that facilitates creating and executing an RFID process. The logical source can represent a stream of reads from a physical device on a server that brings an entity together and can represent processing tag data within the RFID process. It is to be appreciated that the model component can encompass at least one of the following device management provider management store management health monitoring process design process deployment and runtime.

In accordance with another aspect of the subject invention the model component can create and or execute various RFID applications such as but are not limited to a manufacturing process e.g. writing to a tag on a product leaving manufacturing etc. an outbound process e.g. a selection of a specifically tagged product a packed selection of a specifically tagged product a shipment of a selection of specifically tagged product receiving a specifically tagged product etc. a business associated process a generic operation etc.

In accordance with yet another aspect of the subject invention the model component can include an object model component that creates an object model and or application programming interface API to facilitate utilizing a model that is based upon a framework. The model component can invoke the object model which can be but is not limited to an RFID process OM an RFID process execution OM a server manager OM a discovery OM a store OM and an authorization OM. It is to be appreciated and understood that the model component can encompass at least one of the following device management provider management store management health monitoring process design process deployment and runtime. The OM created can be utilized to facilitate the creation and or execution of the RFID process during design time and run time respectively.

In accordance with still another aspect of the subject invention a method provides an instantiation of a framework to allow a creation of an RFID process at design time and an execution of the RFID process at run time. Thus the instantiation the creation and execution of the RFID process can be implemented utilizing the model. Additionally a method is employed by the subject invention that facilitates creating deploying and managing a logical RFID process as well as a physical device in a uniform manner. Moreover a method and or system are provided by the subject application to encompass an RFID process lifecycle.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. These aspects are indicative however of but a few of the various ways in which the principles of the invention may be employed and the subject invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

As utilized in this application terms component system framework object model model and the like are intended to refer to a computer related entity either hardware software e.g. in execution and or firmware. For example a component can be a process running on a processor a processor an object an executable a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and or distributed between two or more computers.

The subject invention is described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the subject invention. It may be evident however that the subject invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the subject invention.

Now turning to the figures illustrates a system that facilitates employing a model based at least upon a framework which can be utilized to build an RFID application. A receiver component can receive data and convey the data to a model component which can create a model based at least in part upon the data. The model can be employed to facilitate creating the RFID application. The receiver component can obtain data such as but not limited to an external input e.g. end user input application developer input etc. device related data e.g. antennae data configuration data an identification an address a version etc. provider related data tag data a device collection a filter policy an alert policy a logical source e.g. wherein a logical source can comprise of a device collection s optional filter and or alert policies and or optional event handler an event handler an event etc. Although the receiver component depicted is shown as a separate component it is to be appreciated that the receiver component can be incorporated into the model component and such illustration e.g. albeit incorporated into another component or a stand alone component should not be seen as a limitation.

The model can be utilized to create the RFID application that provides generic operations and or business specific scenarios. For instance various RFID applications can be created based at least upon the model such as but not limited to a manufacturing process e.g. writing to a tag on a product leaving manufacturing etc. an outbound process e.g. a selection of a specifically tagged product a packed selection of a specifically tagged product a shipment of a selection of specifically tagged product receiving a specifically tagged product etc. a business associated process etc. It is to be appreciated that the model component can create a plurality of RFID applications having various characteristics and or specifications relating to the received data. Furthermore the model component can build the RFID applications atop the OM e.g. utilize the OM exposed by the framework to satisfy their functionality.

Furthermore the model component can create the model such that at least one framework which can be utilized to build at least one RFID application. It is to be appreciated that the framework can include but is not limited to an entity e.g. a device a logical source e.g. wherein a logical source can comprise of a device collection s optional filter and or alert policies and or optional event handler a filter policy an alert policy an event handler a tracker a write handler an RFID process object a store etc. a framework class a hierarchical framework of at least one class an interface an exception a component architecture a schema an object model an application programming interface API etc. For example the receiver component can receive data relating to at least one device. This device can be an RFID reader an RFID writer an RFID trigger an RFID receiver a sensor a real time event an RFID signal etc. In other words the device can be any suitable component capable of receiving a real time event wherein the device need not be an RFID related entity. The receiver component can provide the data to the model component . The model component can generate the model based at least in part upon the received data. It is to be appreciated that the model can be utilized to create at least one RFID process that can provide a generic operation and or a business specific scenario in conjunction with the at least one device. In other words the model component creates the model based at least in part upon the device information. In another example the RFID application can be a manufacturing process application. A device such as an RFID reader writer can write to a tag on a pallet of goods e.g. ready to ship to consumers . By utilizing the model the RFID application can write to the tag on the pallet upon for instance a detection of a tag read event an external event stimulus etc. It is to be appreciated and understood that the framework can provide a definition of a logical layout of processing that can represent a logical process wherein the logical process can bind to a physical device at runtime to provide a clean separation of a logical model and physical model. In other words a developer and or a user can write once and deploy anywhere.

Furthermore the model component can utilize an event processing pipeline wherein a pipeline event can utilize a processing node. The pipeline event processing nodes can be at least one of a filter e.g. an invalid tag a duplicate tag a removed tag etc. an alert e.g. a theft detection a blank tag etc. and an event handler e.g. an internal movement a business context etc. . The event can get enriched and or populated with data as it progresses through the pipeline. For example a source can be received by a rules engine RE not shown wherein the RE can execute a filter and or an alert policy. The RE can then hand the source to N number of components e.g. an EventHandler EventHandler . . . EventHandler N where N is an integer greater than 1. The last component in the event processing pipeline can provide the output that is populated and or enriched.

It is to be appreciated that the model component can be a model that utilizes an RFID process lifecycle. First a logical source with at least one of a device collection an event policy and an event handler is created. Next a custom component such as a policy and or event handler can be implemented. Then the logical source s can be connected together to create a process with a tracker and or security options. The device s can be configured reader collections can bind in the process to a physical device and then deployed. The information can be retrieved from the executing process processes managed device and or process. Moreover the processes can be re configured with dynamic policy morphing e.g. during the running of a process .

The model component can include a device component . The device component can be but is not limited to an RFID reader an RFID writer an RFID transmitter an RFID receiver an RFID printer a transponder a transceiver etc. It is to be appreciated that a plurality of device components can be incorporated into the model component but for sake of brevity only one is illustrated. The device component can communicate with a tag via radio waves and or pass information in digital form to a host. Furthermore the device component can write and or program at least one tag e.g. if the tag is compatible to such function . The device component can be discovered and or configured to perform functions in association with the RFID application process. Additionally the device component is configured by one of setting the device identification naming for reference reading triggers and or other execution specific parameters writing triggers and or other execution specific parameters etc.

In accordance with one aspect of the subject invention the device component can be an RFID printer that obtains a command from the host to execute on a tag. In contrast typical techniques obtain information from the tag and pass the information to the host. For example a printer can obtain a tag identification as well as a barcode and print it on the tag.

Moreover a selection of device components can be associated to each other based at least upon a physical location. A selection of device components associated to each other can form a logical device collection and or can be designated as logical writers. It is to be appreciated that a common operation e.g. a read trigger a writer trigger a transmit trigger etc. can be defined over one or more device components . For example device components can be RFID readers at dock door A dock door B and dock door C. The RFID readers e.g. device components can be associated together as a device collection which can be referenced by Shipping Device Collections. 

The model component can further include a logical source component that combines at least one of a device collection e.g. the device collection contains one or more device component a filter an alert an event handler discussed infra and an additional logical source s . The logical source component can represent tag data and or how the tag data is processed in the RFID process before being passed to a sink defined infra . It is to be appreciated the basic form of the logical source component is a device collection wherein all reads writes from the device collection are directly sent to the sink.

The logical source component can utilize a set of execution semantics utilizing at least one of the following the device collection and or the logical source to produce tag read events and or a platform event an optional filter that can consume a tag read write event and or filter out unwanted reads writes an optional alert that can consume a tag read write event and or an event to evaluate an alert and execute one or more actions an optional event handler that can consume a tag read write event and process the substantially similar tag read event. It is to be appreciated that the filter alert and event handler executes in an order specified by an input e.g. via a user an application developer etc. from the RFID process. For instance a user can specify the following order and or definition of components within a logical source component where signifies is defined by alertpolicy send a message e.g. a short message service SMS to an administrator if a tag is read between X and Y where X is associated to a date and or time and Y is associated to a subsequent date and or time than X filterpolicy remove duplicate tag reads utilizing a duplicate elimination technique eventhandler if the item satisfies a condition e.g. a coat that is grey then enrich the data via writing to the tag filterpolicy ignore coats that are priced less than 500 e.g. this filter is based upon data that was added by eventhandler alertpolicy check the new coat inventory and alert an administrator of an inventory level e.g. high or low inventory etc. Following the previous example the alert the filter and the event handler are executed in the order specified by the input and or user. It is to be appreciated that the output of the last component in the event handler is defined as the output of the logical source component .

Turning briefly to a logical source is illustrated that can be utilized to create a model that is used to build an RFID application. In particular a logical source is a stream of tag reads and or writes. The stream of reads can be processed and result in a different stream of reads. It is to be appreciated that the logical source can recursively embed at least one other logical source. A group of events and or tag reads can be sent to a rules engine where optional filters and or alerts can be executed. The group of events and or tag reads can be N logical sources where N is greater than or equal to one and or M device collections where M is greater than or equal to one. After the rules engine the group of events and or tag reads can be passed to a component . There can be N number of component where N is greater than or equal to one. Moreover the component can be an event handler.

Referring back to the model component can include a policy component that can provide an optional filter policy and or an optional alert policy. A filter generally is a logical construct that is executed on incoming raw data streams and can be specified on a logical source component via a set of logical rules e.g. on an incoming tag read event that can be grouped into a policy. A filter policy allows a list of valid tags to pass through wherein rules in the policy are constraints that are not violated. If violated the tag e.g. referred to as a rogue tag that violated the constraint is removed from the tag list. The result is a list of valid tags that have been allowed through the filter policy. For instance Pallet Case Item can be a filter that allows a certain type of tag to be read by a device and or to remove certain types of tag reads that are not required to be processed.

An alert is another mechanism to express rules that are utilized to evaluate data streams. The alerts can be expressed as a set of logical rules grouped into a policy which are evaluated against multiple events that can include the tag read write event. The actions associated to these rules can be one or more user defined alerts. For instance an alert can be established such that if a tag read is registered between 6 P.M. and 6 A.M. by the logical source component the alarm is activated and one of the following can be alerted a supervisor a security agency etc. Moreover the alert can be at least one of the following an audible signal a text message a lock on a building an email a light a video a motion etc. It is to be appreciated that the model created by the model component allows a user to implement the filter and or the alert into the system via a plug and play technique. For instance the system can utilize a rules engine RE that can evaluate rules conditions and or take action on an event based upon the evaluation.

An event handler component can additionally be included within the model component to manage an event from a logical source component . The event handler component can be utilized for at least one of the following apply logic in real time on tag read events and or enrich the event in a specific manner consume an event by a higher level application write back to a tag when a blank tag read event is detected etc. The event handler component can specify actions when exceptions occur such as but not limited to a read error and a write error. It is to be understood that the exceptions can be from the logical source component during execution e.g. managing a process specific event .

In accordance with one aspect of the subject invention the model created by the model component allows custom implementations of an event handler component to be defined and utilized. For example if a rules engine RE does not allow implementation of a filter and or alert the event handler component can provide such functionality. Moreover the event handler component can be implemented as a catch all component that can be utilized substantially similar to a filter and or alert. Still referring to the model component can include a write handler component that enables the RFID process to send commands to the device component based at least upon an external input and or events from the logical source component wherein the events are a tag read event a tag write event and a reader health event. The event handler can also be utilized to generate an event with business context e.g. an internal movement a shipping event based on custom logic evaluation of incoming event streams as well as external data sources .

The model component can include an RFID process component which is an uber and or high level object that provides a model with a meaningful unit of execution. For instance the RFID process component can be a shipping process that represents multiple devices at various dock doors working together to perform tag reads filtering read enrichment alert evaluation and data storage in a sink for a host application to retrieve process. In another example the RFID process component can execute a manufacturing process wherein devices are configured to read as well as write dependent upon a location. Moreover additional functions such as filtering enriching etc. can be implemented at the location. In yet another example the RFID process component can write to a tag process where the write handler component writes to a tag in real time based at least upon an input. The write process can also check if the write succeeded by reading and passing data back to the host.

The model component can include a data store that stores and retrieves a framework entity e.g. a device a device configuration an RFID process a mapping from the logical entity in the RFID process to a physical device . It is to be appreciated that the data store can be pluggable to the user. Furthermore the data store can be for example either volatile memory or nonvolatile memory or can include both volatile and nonvolatile memory. By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable programmable ROM EEPROM or flash memory. Volatile memory can include random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM . The data store of the subject systems and methods is intended to comprise without being limited to these and any other suitable types of memory. In addition it is to be appreciated that the data store can be a server and or database. In particular the data store can be a computer that provides client computers with highly efficient access to database files.

The model component can include a setup component that sets up and or configures the RFID process and or an RFID process definition are setup and or configured. The setup component initiates a device which can be but is not limited to an RFID device an RFID reader an RFID writer etc. The setup component sets up the device by discovering at least one device. It is to be appreciated that such discovery can be but is not limited to an automatic discovery a manual discovery e.g. utilizing a configuration file a combination thereof etc. Furthermore the discovery of devices utilizing the setup component can be independent of the RFID process development. In accordance with one aspect of the subject invention the setup component can configure custom properties to the device. In other words if default properties are associated of the device such properties are not applied until the device is mapped to a device collection.

The setup component can create a logical device collection and or a logical writer in the context of the RFID process. The device collection can be grouped into a logical source which can have optional constructs such as but not limited to a filter an alert an event handler etc. It is to be appreciated that the optional constructs can be specified and or configured to the logical source. The RFID process is then created by the setup component by associating devices and the top level logical source with such devices. Additionally a tracking level and or execution tracking option logging level for the process can be specified.

The model component can also include a deployment execution component that deploys and or maintains at least one RFID process. It is to be appreciated that deployment can include reading of tag data and or writing tag data. The deployment execution component deploys the RFID process by utilizing a user defined mapping of a logical entity in the process to a physical entity in a network. The logical entity can be but is not limited to a device collection a logical writer a writer collection a reader collection etc. The physical entity in the network can be but is not limited to a device a reader a writer an RFID device a printer etc.

In accordance with one aspect of the subject invention the mapping can be a logical device collection within the RFID process to the physical reader device. For example the mapping can be to one of the following a specific reader Internet protocols IP e.g. 168.192.38.21 168.192.38.22 168.192.38.23 a wild card collection e.g. 168.192.38. where is a wild card that designates any suitable matching character a combination of the specific IP and the wild card e.g. 168.192.38.21 168.38.22 168.192.39. . It is to be appreciated that the implementation of a wild card collection can be more versatile in expansion of physical devices. For instance utilizing the wild card a user can assign an IP address within a wild card collection range wherein the mapping address is compatible to the existing RFID process. If specific IP addresses are used such new assigned IP would need to be incorporated into the mapping.

In accordance with another aspect of the invention the mapping can be a logical writer within the RFID process to the physical writer device. It is to be understood that a single logical writer can map to a single physical writer. The devices that do not have custom properties are configured upon a match to a logical entity e.g. a device collection and or logical writer . For a device that has a custom property the default profile is applied followed by the custom profile.

The deployment execution component can further execute the RFID process. The RFID process can include readers configured to read e.g. data gathering and evaluation enrichment data storage and event handling and writers e.g. writing tag information and verification . The execution of the RFID process by the deployment execution component entails processing information from the device collection e.g. devices that belong to the device collections . The processing can be for instance passing an event e.g. actual RFID tags or a reader up down event . . . through various and or optional components e.g. a filter an alert an event handler . . . in a logical source. It is to be understood that an event handler can enrich and or transform incoming data with additional fields custom fields via a lookup to an external source and generate additional real time event s . The event handler can also be configured to write tag information when a tag is detected. Moreover the processed events are stored into a sink. It is to be appreciated that the execution of the RFID process can entail sending a writer component not shown a command to write some data to a tag independent of a tag read event. By separating the creation and deployment of an RFID process the model component can create a programming model that enables a user enterprise to build and deploy RFID processes in a modular and flexible manner.

Furthermore a maintenance component provides management of at least one RFID process. The RFID process management can focus on the processes defined in the RFID process execution discussed supra during a lifetime of such process. RFID processes can be started and stopped utilizing a process manager not shown . In one example the lifetime of an RFID process can be in relation to the starting and or stopping of an operating system service. If the RFID process is running it can be stopped changed and restarted while the server is running.

The model component can include an RFID process object model OM component that allows a user an end user and or a tool to create and or store the RFID process. The RFID process can include but is not limited to the following at least one logical source e.g. a logical source is a logical composition and or grouping of devices a tracker that can be utilized to track during execution a write handler to interact e.g. sending custom writing and or custom commands to a device to the device that has write capabilities etc.

The model component can include a discovery OM component that obtains meta data of a device regardless of device type. Moreover the discovery OM component can obtain providers in the form of property meta data. It is to be appreciated that the discovery OM component can allow a user to verify if the device is valid e.g. available for connectivity responsive to polling communicative etc. . In general the discovery OM component utilizes a device handler web service interface. The device handler can allow the user to receive properties supported by a particular device wherein the properties are valid properties that can be in the device property profile. It is also to be understood that the device handler can check if a given device is valid.

The RFID process execution component can allow the end user and or the tool to deploy the RFID process. The RFID process execution OM component can have a web service interface such as but is not limited to a process manager. The process manager can manage and or control a plurality of RFID processes wherein a process engine associated to each RFID process is managed. The management of the RFID processes can include but is not limited to a starting and or a stopping of the RFID process. Furthermore the order and or sequence of the execution of the RFID process can be determined by the RFID process execution OM component .

The model component can further include a store OM component that provides a user with a uniform set of API s to store retrieve and delete an RFID framework entity e.g. an RFID process a device etc. . The uniform set of API s can allow the end user tool to access store and or modify the RFID framework entity e.g. an RFID process a writer a reader a printer etc. from a persistent store in a uniform and or consistent manner. It is to be appreciated that the API s are exposed through the store web service interface. In accordance with one aspect of the subject invention a server can be implemented by the store OM component that can contain the RFID process and a device in an appropriate table s within an RFID database.

The model component can include a server manager OM component that can manipulate an RFID server. The server manager OM component can allow an external application to configure and or manipulate e.g. tweak the behavior of the RFID server. In other words the server manager OM component allows a property of the RFID server to be set. It is to be appreciated that the server manager component OM can manage at least one device service provider wherein the device service provider can be substantially similar to a driver for an RFID device. The device service provider can provide a uniform interface to devices such that the RFID server can interact with the device service provider instead of specific devices. The server manager OM component can include various web service interfaces such as but not limited to a server manager and a provider manager.

An authorization OM component can be utilized by the model component to authorize accessibility to at least one of the RFID process and or the device entity. The access to the RFID process and or the device entity can be based at least upon a list of an authorization group associated with the particular RFID process. The authorization group can include a user defined name of the authorization group a flag specifying read execute modify delete both access level and a list of users groups. In general the authorization group can be a named object that specifies a list of RFID store users and an access level to an artifact for the users when associated with the RFID process and the device artifact. Authorization groups typically can be configured based on user roles and or associated views on various artifacts in an organization such as but are not limited to a warehouse manager a warehouse employee a DC manager a store employee etc.

For example if authorization is enabled when an instance of the RFID process or the device is created in a store only the user that created it has both read execute and modify delete access to that artifact. The authorization OM component can provide an API to associate a list of authorization groups with the RFID process or device that can override default permission on the artifact. It is to be appreciated that independent of the authorization setting on the artifact an owner and or administrative users can have unrestricted access to the artifact. Furthermore the authorization group can get associated with the RFID process at a store level e.g. apart from the method to support saving the authorization group at the store level there can also be an associated API to associate such groups with the RFID process .

The model component can include an event write handler interface component that can handle events from a logical source and or send a command to devices based on the logical source. In particular the event write handler interface component can utilize at least one interface to handle events from the logical source and or send the command based on the logical source. For example an interface referenced by IEventHandler can be instantiated with a structure referenced ParameterMetaData and ParameterData by utilizing the following code 

In particular the above code utilizes a tagReadEvent as an input parameter. The number of tags in a taglist can be modified to ensure that fewer and or more tags are processed by the next component. Moreover the GenericEvent array e.g. an event that signifies an internal movement is processed by at least one subsequent component. Based on the derived type of the event it is passed to the appropriate function in the next component. For example if the GenericEvent is TagReadEvent then it can be passed to the HandleTagReadEvent function in the next component.

A class referenced by EventBase can be utilized in order to contain techniques to access event specific data. For instance the following code can be utilized in conjunction to define parameters and or references within the instantiation of the IEventHandler interface to access event specific data 

Furthermore the event write handler interface component can utilize the following code to implement the write handler interface 

The model component can include an exception component that provides at least one of an exception and or a timeout for an application component. For example the exceptions and or timeouts can be handled by calling a Dispose method within an IDisposable interface on that particular component. It is to be appreciated that the exceptions defined by components implementing the interfaces discussed supra should derive from RfidException. For instance the following code can be utilized in order to facilitate providing exceptions and or timeouts in association to an RFID process 

Furthermore the model component can include a security component that provides a security model. The security component can provide a user account that can execute in connection with an operating system service. The user account can utilize a privilege in order to access at least one resource wherein a resource can be but is not limited to a registry a file system a store a sink database etc. In one example the privilege associated to the security component does not allow an external component e.g. an event handler a write handler a rules engine RE . . . to inherit the privileges associated to the user account. In this example the external component can be given minimal privileges to execute code. For instance the following permissions will not be given permission to execute unmanaged code access to the file system and or registry direct access to a device etc. It is to be appreciated and understood that if the external component requires special privileges to access a resource the privileges can be obtained on an individual basis. For instance a username and or a password of a user can be associated to privileges allowing the access to such resources.

Still referring to the model component can provide a service API component to implement class definitions for at least one API in the RFID framework exposed as a web service. The service API component can employ but is not limited to a store e.g. storing a device object list of device objects device attributes binding information device names . . . a device handler e.g. checking the device information represents a valid device a process manager e.g. starting and or stopping of a process and or a concerned process a server manager e.g. managing an RFID server and or setting a reader property a provider manager e.g. identifying loaded providers providing one of a supported meta data a default property profile an override of default profile a property profile with the most current settings . . . a component manager e.g. returning at least one of a list of published and or deployed policy names a list of write handler assemblies registering at least one of an event handler assembly a write handler assembly . . . etc.

A model design time component can interact with the DSPI to create and or store the RFID process that is utilized in conjunction with the physical technical architecture . The model design time component can create a programming model and or a framework that can be utilized to build the RFID process application. It is to be appreciated that the design time component can create and or store at least one RFID process wherein the RFID process is stored in a store OM component . The store OM component can further be utilized to transmit such RFID process which is implemented by a model run time component . The model run time component can execute the RFID process created by the model design time component . Moreover a substantially similar programming model and or the framework can be utilized throughout the design time and or run time to create and execute a particular RFID process that is to be associated with the physical technical architecture . As depicted the model run time component can utilize the DSPI to communicate and or receive data allowing the execution of the RFID process on at least one physical device within the physical technical architecture .

At reference numeral a model framework is instantiated utilizing at least received data. The received data can be but is not limited to an external input e.g. end user input application developer input etc. a device related data e.g. antennae data configuration data an identification an address a version etc. a provider related data tag data a device collection a filter policy an alert policy a logical source an event handler an event . . . . Additionally it is to be appreciated that the framework can include but is not limited to an entity e.g. a device a logical source a filter policy an alert policy an event handler a tracker a write handler an RFID process object a store etc. a framework class a hierarchical framework of at least one class an interface an exception a component architecture a schema an object model an application programming interface API etc. In accordance with one aspect of the subject invention the model framework can include a component architecture providing at least one of the following a component that is implemented by the framework a component that is provided by the framework and a component that is plugged into the framework e.g. a component that is exposed as an interface and can be implemented as desired to suit application specific scenarios . It is to be appreciated and understood that the model framework is not limited to the component architecture described above.

At reference numeral an RFID process is generated. The RFID process development involves device setup and or configuration wherein devices can be discovered by a process that is automatic manual and or combination thereof. Additionally a logical device collection e.g. a logical reader collection a logical writer collection logical writers . . . is created in the context of the RFID process. For instance the logical device collection can be user defined during design time. Next within the development of the RFID process a device collection e.g. a reader collection a writer collection a printer collection . . . is grouped into a logical source which has additional optional constructs such as but not limited to a filter an alert an event handler. The RFID process is then created by associating devices and the top level logical source with the RFID process. In accordance with one aspect of the subject invention tracking levels can be specified and or tracking options logging levels can be executed for the RFID process.

The RFID process is deployed and maintained at reference numeral . The RFID process is deployed by utilizing a mapping of a logical entity in the RFID process to a physical entity. It is to be appreciated that the logical entities can be but are not limited to a device collection a reader collection a logical writer etc. Moreover it is to be appreciated that the physical entities can be but are not limited to a device a reader a writer a printer etc. The mapping of the logical entities to the physical entities can include one of the following the logical device collection within the RFID process mapping to the physical devices the logical reader collection within the RFID process mapping to the physical reader devices the logical writers within the RFID process mapping to the physical writer devices etc. Furthermore maintenance is provided to the RFID process by managing the processes throughout a lifetime. The RFID processes can be started and or stopped using a manager. It is to be appreciated that if the RFID process is running it can be stopped changed and restarted while the sewer is running.

At reference numeral the RFID process is executed by utilizing the model framework. Thus the model framework is utilized during the design time creation of the RFID process and the run time execution of the RFID process. The execution of the RFID process entails processing information coming from the physical devices within a device collection. The processing can be passing an event through a component in the logical source. It is to be appreciated that the event handler can enrich and or transform incoming data with additional fields custom fields to generate additional real time events. Moreover the event handler can write tag information when a tag is detected.

It is to be appreciated that the subject invention can provide an RFID process lifecycle. First a logical source with at least one of a device collection an event policy and an event handler is created. Next a custom component such as a policy and or event handler can be implemented. Then the logical source s can be connected together to create a process with a tracker and or security options. The device s can be configured reader collections can bind in the process to a physical device and then deployed. The information can be retrieved from the executing process processes managed device and or process. Moreover the processes can be re configured with dynamic policy morphing e.g. during the running of a process .

At reference numeral the RFID process is created and or stored. The RFID process can be created by bringing the logical source and devices together to represent a single entity. It is to be appreciated and understood that an available tracker can be utilized to specify the tracking option for the RFID process. Once created the RFID process can be stored and or saved to a store. Moreover it is to be appreciated that reference numerals can be achieved by utilizing the RFID process definition OM component discussed supra. Next reference numeral executes and or deploys the RFID process. The execution and or deployment can include one or more RFID processes created based upon a model framework. Furthermore the execution and or deployment entails setting the mapping from the logical entities in the RFID process to the physical devices. At the execution of the RFID process can be tested and or monitored. For example a test can provide simulated data input and observe an output execution stream. In another instance execution results can be monitored such as but not limited to an RFID process execution trail an error an exception a device health event etc.

In order to provide additional context for implementing various aspects of the subject invention and the following discussion is intended to provide a brief general description of a suitable computing environment in which the various aspects of the subject invention may be implemented. While the invention has been described above in the general context of computer executable instructions of a computer program that runs on a local computer and or remote computer those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multi processor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based and or programmable consumer electronics and the like each of which may operatively communicate with one or more associated devices. The illustrated aspects of the invention may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the invention may be practiced on stand alone computers. In a distributed computing environment program modules may be located in local and or remote memory storage devices.

One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operably connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operably connected to one or more server data store s that can be employed to store information local to the servers .

With reference to an exemplary environment for implementing various aspects of the invention includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Card Bus Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA Firewire IEEE 1394 and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable programmable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in the suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the subject invention can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices which require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses wire and or wireless communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet Token Ring and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the subject invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the subject invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject invention are possible. Accordingly the subject invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

In particular and in regard to the various functions performed by the above described components devices circuits systems and the like the terms including a reference to a means used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. a functional equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary aspects of the invention. In this regard it will also be recognized that the invention includes a system as well as a computer readable medium having computer executable instructions for performing the acts and or events of the various methods of the invention.

In addition while a particular feature of the invention may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes and including and variants thereof are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising. 

