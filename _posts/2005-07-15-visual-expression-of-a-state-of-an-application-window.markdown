---

title: Visual expression of a state of an application window
abstract: A method for changing a visual state of an application window representation is described. The method includes steps of displaying an application window representation with a default visual state, and changing the default visual state of the application window representation to one of at least two different visual states. The entirety of the application window representation or a portion of the application window representation may have a change to its visual state. The visual states may be a change in color, pattern, and/or texture. A group of visual states changes may correlate to an animation. Visual states may be defined by a default or user configurable. Visual states may change over time or in response to an event. Visual states may change back to a default state when the application window representation is accessed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577918&OS=07577918&RS=07577918
owner: Microsoft Corporation
number: 07577918
owner_city: Redmond
owner_country: US
publication_date: 20050715
---
As the use of computers in both the workforce and personal life has increased so has the desire to allow for easier use of them. Many operating systems today utilize a windows based configuration of application programs. Information is displayed on a display screen in what appears to be several sheets of paper. By interfacing with the windows a user can access any window as if grabbing a single sheet of paper. A windows based configuration allows a user to have two or more windows open on a display screen simultaneously.

Application windows are a user interface facility of all graphical user interface GUI systems. While application windows may vary in appearance across systems they share many common attributes such as a frame area with a title bar control containing window management controls the ability to be resized and repositioned and to exist among other application windows associated with different applications. Together multiple application windows can appear simultaneously on the screen layered on top of each other typically represented by the order each application window was last accessed by the user. When an application window is the window that a user is working with currently its frame appears in an active visual state. This is in contrast to an inactive visual state when the application window is not the window the user is currently working with. These two states typically have different appearances and primarily serve to communicate to the user which application window she is currently working with.

A user interaction scenario common to modem GUIs involves multiple simultaneous application windows that share a common screen real estate. Support for multiple simultaneous application windows is part of the appeal and power of a modem GUI but this frequently results in application windows overlapping and obscuring each other making it difficult for the user to locate or navigate to a specific application window. This type of scenario and associated solutions are commonly referred to as window management problems and solutions.

A common user interaction scenario involves an application window that requires the attention of a user to address an issue with the application process. The application window is not the application that the user is currently working with or the application window is not currently front most among multiple layered application windows. Resolving this scenario requires the user to access the problematic application window typically by selecting through a computer input device on the application window subsequently re layering the selected application window on top of all other application windows. Often simply activating the application window resolves the requirement for the application to get the attention of the user.

In Windows XP by Microsoft Corporation of Redmond Wash. the method for indicating that an application window requires the attention of the user is to flash the frame of the application window between the active and inactive visual states. Furthermore in Windows XP the Task Bar application window tile control that is indirectly associated with the application window simultaneously flashes between two visual states normal and a dedicated alert state. This implementation limits the ability of an application to express the degree or urgency to which the user s attention is required requested. In Mac OS X by Apple Computer Inc. of Cupertino Calif. there is no parallel mechanism that employs the application window. Alerting the user is indirectly achieved through an animation of the associated application icon on the application launch switch facility the Dock . There is no mechanism to represent a scale of urgency. Today only a single application state can be expressed effectively making all expressions of the same intrinsic value to the user.

Aspects of the present invention are directed generally to window arrangements in an operating system. More particularly aspects of the present invention are directed to a method and system for changing visual states of an application window representation in an operating system.

There exists a need for the ability to support a range of application window visual states thereby providing the ability for an application to more effectively communicate the urgency to which a user s attention is required requested. Application developers can decide if immediate user attention is required and then can present directly or indirectly generate visual feedback that complements the degree of urgency. Alternatively if the user requires less important informational feedback perhaps on the stalled status of a process then a visual state that denotes less importance can be presented.

Aspects of this invention provide a window management system to change a visual state of an application window representation. The method includes steps of displaying an application window representation with a default visual state and changing the default visual state of the application window representation to one of at least two different visual states. The entirety of the application window representation or a portion of the application window representation may have a change to its visual state. The visual states may be a change in color pattern and or texture. A group of visual states may correlate to an animation.

Another aspect of the invention employs a plurality of visual states of an application window representation to correlate to an animation. An implementation may illustrate a gradual introduction of color that permeates across the application window representation. The animation may be akin to a flush response in human skin in response to a change in a person s emotional state. The application window representation may recreate the visual effect of a blushing response as applied to a graphical user interface.

In the following description of various illustrative embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a digital camera a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a pen stylus and tablet microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LA through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WA such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects and which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and nonlimiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

As shown in the application window at the top of Z order is active and the underlying application windows are inactive. Desktop space is an area or region of a display that allows for the display of application windows corresponding to application programs. A taskbar at the bottom of the display serves as a control region that indicates the application windows that are currently in use including application windows that are displayed in the desktop space as well as any minimized application windows. The taskbar is a specific implementation of an on screen window remote control used to list and enable manipulation of application windows such as activating moving hiding and minimizing.

Window is represented by taskbar button and window is represented by taskbar button . As shown in this example the application windows are shown in the desktop space . The file name of the content of application window is shown along the title bar area of the application window . The file name of the content of application window is completely obscured by application window . Each file name may be generated by the application program operating the application window and or may be customizable by a user. The same file name for each application window is shown in the corresponding taskbar buttons . Application windows and taskbar buttons include an application icon identifier to allow a user to identify the type of application program running the respective application window. Application icon identifier is obscured for application window although shown for its corresponding taskbar button

Application windows are used by application programs to display content and respectively to a user. Application windows and each include a frame or border portion and and a content portion and respectively. The frame of the application window may be configured in a number of different types and styles. Further the frame may be configured to only be shown around the top of the application window and or one or more other sides of the application window

As shown in application window frame of application window is shown in a visual state by a vertical line pattern. It should be understood that the vertical line pattern is merely illustrative of the difference in the visual states between application window and . Frame of application window is shown in a visual state by a slanted line pattern running from an upper right to a lower left position. Again it should be understood by those skilled in the art that the slanted line pattern is merely illustrative of the difference in the visual states between application windows and . illustrates an example of when application window is in an active visual state and application window is in an inactive visual state. The difference in the visual states may be that both application windows and are blue in color but that application window frame is a brighter blue than that of application window frame . It should be understood that an active application window is one that is currently in use by a user while an inactive application window must be accessed in some manner in order to become active.

The application program associated with application window may be a different application program or the same application program corresponding to application window . Each of application windows is independent of and external to the other windows . As used herein a first application window is external to a second application window when the first application window is not contained within the second application window and the second application window is not contained within the first application window. It should be understood that a first window is not contained in a second application window if the two application windows merely overlap.

As shown in in accordance with aspects of the present invention a window management scenario is provided to illustrate changing visual states of an application window . With respect to within desktop space application windows and are shown in a Z order configuration in which application window is higher in the Z order than application window . In a predefined control region application window tiles and are shown corresponding to application windows and respectively. As shown in application window tiles and are shown as taskbar buttons. It should be understood by those skilled in the art that other application window representations may be used and that a taskbar button configuration is but one example. For example an application window and or group of application windows may be represented by an icon or thumbnail .

The file names and are shown along the title bar area of the frames and of the respective application windows and as well as in the application window tiles and . Application windows and application window tiles each include an application icon identifier to allow a user to identify the type of application program running the respective application window. Application windows are used by application programs to display content and respectively to a user. Application windows and each include a frame or border portion and and a content portion and respectively. Frame of application window may be configured in a number of different types and styles. Further frame may be configured to only be shown around the top of the application window and or one or more other sides of application window

As shown in application window frame of application window is shown in a visual state by a vertical line pattern. It should be understood that the vertical line pattern is merely illustrative of the difference in the visual states between application window and . Frame of application window is shown with a visual state . Visual state is shown by a slanted line pattern running from an upper right to a lower left position and by a crisscross pattern. It should be understood by those skilled in the art that the slanted line pattern and crisscross pattern are merely illustrative of the difference in the visual states between application windows and

In one example application window may represent a schedule notification window that informs a user of an upcoming schedule appointment. may be shown when the user is within 30 minutes of the scheduled appointment. The color of frame may turn from a blue color to a blue color with some red color as well. For example the slanted line pattern running from an upper right to a lower left position of visual state may be the blue color while the crisscross pattern of visual state may be the red color. If working on another project the visual state change allows a user to be notified of the state change of the application window . Within 15 minutes of the scheduled event the visual state of the application window frame may change again. as described below shows such an example. In such a case the color of the frame may change again to include more red color. Finally within 5 minutes of the scheduled event the visual state may change an additional time. Such an example is shown and described in . In such a case the entire frame may change to be a dark red color.

It should be understood by those skilled in the art that the example patterns shown are merely illustrative of the differences in appearances that may occur and that the present invention is not so limited to the examples shown herein. As described below with reference to other visual states may occur. It should be understood further by those skilled in the art that aspects of the present invention are not limited to the number of application windows shown in the Figures and that any number of different application windows may be created.

Returning to application window is shown in a visual state in which bubbles are shown. The bubbles of the visual state may be few in number at this point in an animation. Proceeding to example scenario illustrates how the number of bubbles may increase as shown in visual state . The bubbles animation may be a default animation or one configured by a user to alert a user to an event associated with application window . The animation of the bubbles may include a transition of the visual state of the application window to and from visual states and or additional visual states may be included. It should be understood that a number of different events may be correlated to an application window such as an alert to an error associated with the application window a new email notification a new message notification a completion of a download a progress of a saving operation and many others. The present invention is not so limited to any particular notifications.

Still further the animation of bubbles shown in are merely illustrative of one type of animation of visual states and that the present invention is not so limited. Any number of different effects may be used. Some examples of different effects includes an application window with a glass appearance in which the glass begins to crack and break over time an appearance in which the application window frame appears to melt an appearance in which the application window frame begins to rust get boils or blotches change colors changes textures and an appearance in which the application window frame is distorted e.g. warbles blurs fades. These are but some examples of the number of different visual states of an application window representation. An operating system or application program may allow a user to configure a desired effect for the visual state notifications and or provide a default scenario for notifications.

In application window is shown in a visual state in which application window has a certain size . Proceeding to example scenario illustrates how the size of the application window may change as shown in visual state . An animation to adjust the size of the application window may be used to alert a user to an event associated with application window . Again it should be understood by those skilled in the art that further adjustments to the size of the application window may be made as part of an overall animation process. In addition it should be understood that the visual state of an application window may include any one of these examples in combination. For example the visual state of an application window may change color and include the introduction of bubbles from the application window frame. The present invention may include one or more of these visual state appearances.

Proceeding to step the visual state associated with the command is determined. For example the associated visual state may correlate to a slight increase of the color red to a portion of the application window frame. At step a determination is made as to whether the associated visual state is a first visual state. For example a first visual state may only be used when the attention of the user is considered critical to the application program associated with the application window. If the associated visual state is a first visual state at step another determination is made as to whether a user configuration is associated with the first visual state. For example a user may have a theme for her application window notification such as the display of bubbles so that more bubbles are animated for one visual state compared to another visual state. If no user configuration exists the process moves to step where the visual state of at least a portion of the frame of the application window is changed to a first visual state in accordance with a default configured format. If a user configuration does exist at step the process proceeds to step where the visual state of at least a portion of the frame of the application window is changed to a first visual state in accordance with the user configured format.

If the associated visual state is not a first visual state in step the process proceeds to step where another determination is made as to whether a user configuration is associated with the second visual state. For example a user may have a theme for her application window notification such as the display of bubbles so that more bubbles are animated for one visual state compared to another visual state. If no user configuration exists the process moves to step where the visual state of at least a portion of the frame of the application window is changed to a second visual state in accordance with a default configured format. If a user configuration does exist at step the process proceeds to step where the visual state of at least a portion of the frame of the application window is changed to a second visual state in accordance with the user configured format. It should be understood by those skilled in the art although this example shows only a default and two additional visual states many more visual states may exist and that fact that a first and second visual state after a default visual state is merely illustrative of one example.

Moving to step a determination is made as to whether an input has been received to access the application window. Such a situation may occur when a user clicks on the application window to make it the active window or the user clicks on another application widow representation such as an application window tile corresponding to the application window to make the application window active. Proceeding to step when an input is received to access the application window the application window may be brought to the top of the Z order and displayed in accordance with the default visual state. The specific implementation may dismiss the first visual state immediately or remove it in an animation similar to how it was introduced. If an input has not been received at step the process proceeds to step where another determination is made as to whether time has reached a second threshold time. Such an example may occur when an application program determines that a scheduled appointment is due to occur within a few minutes. If not the process returns to step . If the second threshold time has been reached at step the application window is displayed in accordance with a second visual state. The second visual state also may be user configured. It should be understood that additional threshold times and visual states may be included in accordance with this illustrative example.

Moving to step a determination is made as to whether an input has been received to access the application window corresponding to the application window tile. Such a situation may occur when a user clicks on the application window to make it the active window or the user clicks on the application widow tile corresponding to the application window to make the application window active. Proceeding to step when an input is received to access the application window and or application window tile the application window may be brought to the top of the Z order and displayed in accordance with the default visual state. The specific implementation may dismiss the first visual state immediately or remove it in an animation similar to how it was introduced. If an input has not been received at step the process proceeds to step where another determination is made as to whether time has reached a second threshold time. If not the process returns to step . If the second threshold time has been reached at step the application window tile is displayed in accordance with a second visual state. The second visual state also may be user configured. It should be understood that additional threshold times and visual states may be included in accordance with this illustrative example. Further it should be understood that additional application window representation may be used in accordance with the present invention. For example an icon or thumbnail corresponding to an application window may change visual states at time intervals in accordance with one or more aspects of the present invention.

With respect to an application programming interface API various aspects of the present invention may be performed by an API. For example public APIs may interface with an operating system to allow the operating system to provide the various features of the present invention. In one embodiment a software architecture stored on one or more computer readable media for processing data representative of a change to a visual state of an application window representation may include a component configured to change a visual state of an application window representation and an application program interface to access the component. An API may receive a request to change the visual state of an application window representation access the necessary function s to perform the operation and then send the results back to an operating system. The operating system may use the data provided from the API to perform the various features of the present invention.

While illustrative systems and methods as described herein embodying various aspects of the present invention are shown it will be understood by those skilled in the art that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention.

