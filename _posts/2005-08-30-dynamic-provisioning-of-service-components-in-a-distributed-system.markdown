---

title: Dynamic provisioning of service components in a distributed system
abstract: Systems and methods simplify the provision of complex services over a distributed network by breaking a complex service into a collection of simpler services. Systems and methods provide the tools to deconstruct a complex, provision service elements that are needed to make up the complex service, and monitor the service elements to ensure that the complex service is supported. Quality of service is provided by matching service requirements to compute resource capabilities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08103760&OS=08103760&RS=08103760
owner: Oracle America, Inc.
number: 08103760
owner_city: Redwood City
owner_country: US
publication_date: 20050830
---
This application is a divisional of U.S. patent application Ser. No. 09 947 528 filed Sep. 7 2001 now abandoned which is incorporated by reference. This application is related to U.S. patent application Ser. No. 09 947 549 entitled Distributed Metric Discovery and Collection in a Distributed System filed Sep. 7 2001 which is relied upon and incorporated by reference.

This invention relates to providing services in a distributed system and more particularly to methods and systems for dynamically provisioning services according to software requirements and compute resource capabilities.

Distributed systems today enable a device connected to a communications network to take advantage of services available on other devices located throughout the network. Each device in a distributed system may have its own internal data types its own address alignment rules and its own operating system. To enable such heterogeneous devices to communicate and interact successfully developers of distributed systems can employ a remote procedure call RPC communication mechanism.

RPC mechanisms provide communication between processes e.g. programs applets etc. running on the same device or different devices. In a simple case one process i.e. a client sends a message to another process i.e. a server. The server processes the message and in some cases returns a response to the client. In many systems the client and server do not have to be synchronized. That is the client may transmit the message and then begin a new activity or the server may buffer the incoming message until the server is ready to process the message.

The Java programming language is an object oriented programming language that may be used to implement such a distributed system. The Java language is compiled into a platform independent format using a bytecode instruction set which can be executed on any platform supporting the Java virtual machine JVM . The JVM may be implemented on any type of platform greatly increasing the ease with which heterogeneous machines can be federated into a distributed system.

The Jini architecture has been developed using the Java programming language to enable devices in a distributed system to share services using remote method invocation RMI . Traditional Jini systems use RMI to enable a client device to request and receive a service provided by a server device on a remote machine. While conventional Jini systems provide a basic architecture for providing services in a distributed system they do not provide tools specifically directed to providing complex services. Current systems do not address provisioning a service such as application software to make it available to the distributed system in the first place. Furthermore conventional systems do not consider the requirements of a specific service before provisioning the service to make it available in the distributed system.

Methods and systems consistent with the present invention provide a service in a distributed system the service consisting of a collection of service elements. It is determined whether an instance of each service element in the collection is running in the distributed system. For each service element in the collection that does not have an instance running in the distributed system a new service element instance is created.

In accordance with an aspect of the invention a system facilitates providing a service in a distributed system. A list of service elements that together constitute the service is received. For each service element in the list it is discovered whether an application corresponding to the service element is running in the distributed system. The application corresponding to the service element is created if the application corresponding to the service element is not running in the distributed system. The application is monitored to detect whether the application fails.

According to the present invention a method handles events in a distributed system. A capability to notify members of the distributed system when an event of a predetermined type occurs is advertised. Registration requests are received from a plurality of event consumers the registration requests specifying the predetermined type. When an event of the predetermined type occurs an order is determined in which to notify each of the plurality of event consumers and an event notification is sent to each of the plurality of event consumers in the order determined.

Additional features of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention.

The following description of embodiments of this invention refers to the accompanying drawings. Where appropriate the same reference numbers in different drawings refer to the same or similar elements.

Systems consistent with the present invention simplify the provision of complex services over a distributed network by breaking a complex service into a collection of simpler services. For example automobiles today incorporate complex computer systems to provide in vehicle navigation entertainment and diagnostics. These systems are usually federated into a distributed system that may include wireless connections to a satellite the Internet etc. Any one of an automobile s systems can be viewed as a complex service that can in turn be viewed as a collection of simpler services.

A car s overall diagnostic system for example may be broken down into diagnostic monitoring of fluids such as oil pressure and brake fluid and diagnostic monitoring of the electrical system such as lights and fuses. The diagnostic monitoring of fluids could then be further divided into a process that monitors oil pressure another process that monitors brake fluid etc. Furthermore additional diagnostic areas such as drive train or engine may be added over the life of the car.

Systems consistent with the present invention provide the tools to deconstruct a complex service into service elements provision service elements that are needed to make up the complex service and monitor the service elements to ensure that the complex service is supported. One embodiment of the present invention can be implemented using the Rio architecture created by Sun Microsystems and described in greater detail below. Rio uses tools provided by the Jini architecture such as discovery and event handling to provision and monitor complex services in a distributed system.

The computers and devices of distributed system provide services to one another. A service is a resource data or functionality that can be accessed by a user program device or another service. Typical services include devices such as printers displays and disks software such as programs or utilities and information managers such as databases and file systems. These services may appear programmatically as objects of the Java programming environment and may include other objects software components written in different programming languages or hardware devices. As such a service typically has an interface defining the operations that can be requested of that service.

Memory can be for example a random access memory. Secondary storage device can be for example a CD ROM. CPU can support any platform compatible with JVM . Input device can be for example a keyboard or mouse. Output device can be for example a printer.

JVM acts like an abstract computing machine receiving instructions from programs in the form of bytecodes and interpreting these bytecodes by dynamically converting them into a form for execution such as object code and executing them. RMI facilitates remote method invocation by allowing objects executing on one computer or device to invoke methods of an object on another computer or device. Lookup Service and Discovery Server are described in great detail below. Java space is an object repository used by programs within distributed system to store objects. Programs use Java space to store objects persistently as well as to make them accessible to other devices within distributed system .

The Jini environment enables users to build and maintain a network of services running on computers and devices. Jini is an architectural framework provided by Sun Microsystems that provides an infrastructure for creating a flexible distributed system. In particular the Jini architecture enables users to build and maintain a network of services on computers and or devices. The Jini architecture includes Lookup Service and Discovery Server that enable services on the network to find other services and establish communications directly with those services.

Lookup Service defines the services that are available in distributed system . Lookup Service contains one object for each service within the system and each object contains various methods that facilitate access to the corresponding service. Discovery Server detects when a new device is added to distributed system during a process known as boot and join or discovery. When a new device is detected Discovery Server passes a reference to the new device to Lookup Service . The new device may then register its services with Lookup Service making the device s services available to others in distributed system . One skilled in the art will appreciate that exemplary distributed system may contain many Lookup Services and Discovery Servers.

As described above service provider discovers and joins lookup service making the services provided by service provider available to other computers and devices in the distributed system. When service consumer requires a service it discovers lookup service and sends a lookup request specifying the needed service to lookup service . In response lookup service returns a proxy that corresponds to service provider to service consumer . The proxy enables service consumer to establish contact directly with service provider . Service provider is then able to provide the service to service consumer as needed. An implementation of the lookup service is explained in The Jini Lookup Service Specification contained in Arnold et al. Addison Wesley 1999 pp. 217 231.

Distributed systems that use the Jini architecture often communicate via an event handling process that allows an object running on one Java virtual machine i.e. an event consumer or event listener to register interest in an event that occurs in an object running on another Java virtual machine i.e. an event generator or event producer . An event can be for example a change in the state of the event producer. When the event occurs the event consumer is notified. This notification can be provided by for example the event producer.

The Rio architecture enhances the basic Jini architecture to provision service elements. To provide the complex service the Rio architecture instantiates and monitors a service instance corresponding to each service element. A service element might correspond to for example an application service or an infrastructure service. In general an application service is developed to solve a specific application problem such as word processing or spreadsheet management. An infrastructure service such as the Jini lookup service provides the building blocks on which application services can be used. One implementation of the Jini lookup service is described in U.S. Pat. No. 6 185 611 for Dynamic Lookup Service in a Distributed System. 

Consistent with the present invention a complex service can be represented by an operational string. depicts a exemplary operational string that includes one or more service elements and another operational string . Operational string in turn includes additional service elements . For example operational string might represent the diagnostic monitoring of an automobile. Service element might be diagnostic monitoring of the car s electrical system and service element might be diagnostic monitoring of the car s fluids. Operational string B might be a process to coordinate alerts when one of the monitored systems has a problem. Service element might then be a user interface available to the driver service element might be a database storing thresholds at which alerts are issued etc. In an embodiment of the present invention an operation string can be expressed as an XML document. It will be clear to one of skill in the art that an operational string can contain any number of service elements and operational strings.

A Jini Service Bean JSB is a Java object that provides a service in a distributed system. As such a JSB implements one or more remote methods that together constitute the service provided by the JSB. A JSB is defined by an interface that declares each of the JSB s remote methods using Jini Remote Method Invocation RMI conventions. In addition to its remote methods a JSB may include a proxy and a user interface consistent with the Jini architecture.

A JSB is created and receives fundamental life cycle support from an infrastructure service called a cybernode. A cybernode runs on a compute resource such as a computer or device. In one embodiment of the present invention a cybernode runs as a Java virtual machine such as JVM on a computer such as computer . Consistent with the present invention a compute resource may run any number of cybernodes at a time and a cybernode may support any number of JSBs.

Service instantiator object is used by cybernode to register its availability to support JSBs and to receive requests to instantiate JSBs. For example using the Jini event handling process service instantiator object can register interest in receiving service provision events from a service provisioner discussed below. A service provision event is typically a request to create a JSB. The registration process might include declaring QoS capabilities to the service provisioner. These capabilities can be used by the service provisioner to determine what compute resource and therefore what cybernode should instantiate a particular JSB as described in greater detail below. In some instances when a compute resource is initiated its capabilities are declared to the cybernode running on the compute resource and stored as QoS capabilities .

Service bean instantiator object is used by cybernode to create JSBs when service bean instantiator object receives a service provision event. Using JSB attributes contained in the service provision event cybernode instantiates the JSB and ensures that the JSB and its corresponding service remain available over the network. Service bean instantiator object can be used by cybernode to download JSB class files from a code server as needed.

As described above JSBs and cybernodes comprise the basic tools to provide a service corresponding to a service element in an operational string consistent with the present invention. A service provisioner for managing the operational string itself will now be described.

A service provisioner is an infrastructure service that provides the capability to deploy and monitor operational strings. As described above an operational string is a collection of service elements that together constitute a complex service in a distributed system. To manage an operational string a service provisioner determines whether a service instance corresponding to each service element in the operational string is running on the network. The service provisioner dynamically provisions an instance of any service element not represented on the network. The service provisioner also monitors the service instance corresponding to each service element in the operational string to ensure that the complex service represented by the operational string is provided correctly.

If an instance of the next service is not running on the network step then service provisioner determines a target cybernode that matches the next service step . The process of matching a service instance to a cybernode is discussed below. Service provisioner fires a service provision event to the target cybernode requesting creation of a JSB to perform the next service step . In one embodiment the service provision event includes service bean attributes object from service element . Service provisioner then uses a lookup service to discover the newly instantiated JSB step and starts a monitor corresponding to that JSB step .

As described above once a service instance is running service provisioner monitors it and directs its recovery if the service instance fails for any reason. For example if a monitor detects that a service instance has failed service provisioner may issue a new service provision event to create a new JSB to provide the corresponding service. In one embodiment of the present invention service provisioner can monitor services that are provided by objects other than JSBs. The service provisioner therefore provides the ability to deal with damaged or failed resources while supporting a complex service.

Service provisioner also ensures quality of service by distributing a service provision request to the compute resource best matched to the requirements of the service element. A service such as a software component has requirements such as hardware requirements response time throughput etc. In one embodiment of the present invention a software component provides a specification of its requirements as part of its configuration. These requirements are embodied in service provision management object of the corresponding service element. A compute resource may be for example a computer or a device with capabilities such as CPU speed disk space connectivity capability bandwidth etc.

In one implementation consistent with the present invention the matching of software component to compute resource follows the semantics of the Class.isAssignable method a known method in the Java programming language. If the class or interface represented by QoS class object of the software component is either the same as or is a superclass or superinterface of the class or interface represented by the class parameter of the QoS class object of the compute resource then a cybernode resident on the compute resource is invoked to instantiate a JSB for the software component. Consistent with the present invention additional analysis of the compute resource may be performed before the match is complete. For example further analysis may be conducted to determine the compute resource s capability to process an increased load or adhere to service level agreements required by the software component.

Systems consistent with the present invention may expand upon traditional Jini event handling by employing flexible dispatch mechanisms selected by an event producer. When more than one event consumer has registered interest in an event the event producer can use any policy it chooses for determining the order in which it notifies the event consumers. The notification policy can be for example round robin notification in which the event consumers are notified in the order in which they registered interest in an event beginning with the first event consumer that registered interest. For the next event notification the round robin notification will begin with the second event consumer in the list and proceed in the same manner. Alternatively an event producer could select a random order for notification or it could reverse the order of notification with each event.

As described above in an embodiment of the present invention a service provisioner is an event producer and cybernodes register with it as event consumers. When the service provisioner needs to have a JSB instantiated to complete an operational string the service provisioner fires a service provision event to all of the cybernodes that have registered using an event notification scheme of its choosing.

The foregoing description of an implementation of the invention has been presented for purposes of illustration and description. It is not exhaustive and does not limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practicing of the invention. Additional modifications and variations of the invention may be for example the described implementation includes software but the present invention may be implemented as a combination of hardware and software or in hardware alone. The invention may be implemented with both object oriented and non object oriented programming systems.

Furthermore one skilled in the art would recognize the ability to implement the present invention in many different situations. For example the present invention can be applied to the telecommunications industry. A complex service such as a telecommunications customer support system may be represented as a collection of service elements such as customer service phone lines routers to route calls to the appropriate customer service entity and billing for customer services provided. The present invention could also be applied to the defense industry. A complex system such as a battleship s communications system when planning an attack may be represented as a collection of service elements including external communications weapons control and vessel control.

Additionally although aspects of the present invention are described as being stored in memory one skilled in the art will appreciate that these aspects can also be stored on other types of computer readable media such as secondary storage devices like hard disks floppy disks or CD ROM a carrier wave from the Internet or other propagation medium or other forms of RAM or ROM. The scope of the invention is defined by the claims and their equivalents.

