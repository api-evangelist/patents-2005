---

title: Creating an explicit flow control in an implicit flow programming environment
abstract: Creating explicit control flow in an implicit control flow development environment. A set of explicit functions is defined in a library associated with the implicit control flow development environment. Each of the explicit functions in the set is associated with a sequence of implicit functions, such that by calling the explicit function, the sequence of selected implicit functions are called to programmatically perform the task defined by the explicit function. Property types may be designated for the explicit functions, wherein the property types are used by the sequence of implicit functions in performing the task. The explicit functions are exposed to a developer using the implicit flow development environment. The developer selects the desired explicit functions and properties for creation and execution of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685585&OS=07685585&RS=07685585
owner: 
number: 07685585
owner_city: 
owner_country: 
publication_date: 20050408
---
The present invention relates in general to application development environments and more specifically to a framework for creating an explicit flow control in an implicit flow programming environment.

Computers possess the ability to perform many calculations very quickly. Most single processor computers are capable of performing only one calculation at a time. Thus early programming and programming languages defined sequential steps that control the procedure of a desired task. The types of computer languages that were developed to implement these sequential processes are called procedural languages such as C C FORTRAN and the like. In such procedural languages the control of the computer processing is explicitly controlled.

As Internet technology has grown a greater emphasis began to be placed on the visual aspects of the computer interface. Commensurate with this change in outlook programming languages were developed that were more concerned with defining the final appearance of the computer interface. In these languages such as Extensible Markup Language XML Hypertext Markup Language HTML and the like control of the computer processing is much more implicit. The appearance of a Web page being rendered in a large visual canvas may be created using a more asynchronous approach. A general order of execution is provided that executes the various steps in populating the Web page. Because of its visual emphasis this implicit flow control paradigm is more common in Web related programming.

The explicit flow control paradigm is also commonly used in the development of speech related applications such as those running on Interactive Voice Response IVR units and the like. Because the flow of a speech application is typically driven by caller responses explicit flow control has become the logical programming solution in historical IVR and speech related application development.

Over the last 10 years the reach and capabilities of the Internet has steadily advanced. As Internet technology begins to reach the capabilities to handle typical voice related applications a merging has begun to occur between the Internet World Wide Web and speech application technology formerly reserved for dedicated UVR units and servers. The beginnings of this merge however has resulted in application development environments ADEs from Web centered software companies that utilize implicit flow control to code voice or speech applications that have historically been programmed using explicit controls flow. While this implicit flow paradigm lends itself to the declarative language Web related world it can be problematic when used in the speech application world.

Using implicit flow control ADEs speech applications result in disjointed and programmatically complex logic that is used to create applications with somewhat rigid flow execution. One example of such an implicit flow control ADE is Microsoft Corporation s SPEECH.NET . SPEECH.NET is a development kit that may be added onto Microsoft Corporation s VISUALSTUDIO.NET ADE. By adding the SPEECH.NET library to VISUALSTUDIO.NET speech applications may be developed for Web based speech applications run by speech servers such as Microsoft Corporation s MICROSOFT SPEECH SERVER .

Speech applications that are developed using SPEECH.NET typically result in complex large programs that contain numerous seemingly unrelated functions that are spread out through the code. Additionally record of the speech prompts used in executing the speech application are also scattered through the code at various locations. This type of application may be suited for the implicit flow control of general Web development and Web design but creates difficulties for speech developers to efficiently develop and maintain speech applications.

These problems do not just arise in speech application technology. Other Web based programming technologies may result in such disjointed and programmatically complex application because an implicit flow control paradigm is used to create the underlying application code.

The present invention is related to a system and method for changing an implicit flow control ADE into an explicit flow control ADE while preserving the underlying implicit flow control design. An explicit flow framework is created by defining a set of explicit functions for a library that may be used by the implicit ADE. Each of the explicit functions programmatically abstracts one or more of the implicit functions native to the implicit ADE. The library developer assembles the selected implicit functions in order to carry out the task defined by the explicit function. When added to the implicit ADE the explicit library exposes the explicit functions to the ADE user through an explicit Application Programming Interface API that may be mapped to the native implicit functionality in the implicit API such that the ADE user may develop an application that utilizes explicit flow control instead of the native implicit flow functionality of the implicit ADE. Moreover should the native implicit API of the implicit ADE change the library developer only needs to change the mapping between the explicit API and the new implicit API functions. The ADE user does not have to learn the new functions of the implicit API but rather may keep using the explicit API as before.

The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized that such equivalent constructions do not depart from the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention both as to its organization and method of operation together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood however that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.

Before discussing the details of the various embodiments of the present invention it may be beneficial to discuss more detail of the existing implicit ADE systems. One example of such an implicit ADE is the SPEECH.NET ADE. SPEECH.NET generally uses a Web programming model for building voice applications. The basic programming elements in SPEECH.NET are referred to as Question Answers QAs . QAs have events associated with them which can be tied to various functions. Each of the QAs execute in an order determined by a speech index. The speech index is an ordering index that the system refers to when executing the QAs. The ADE users can control the flow of speech applications coded using SPEECH.NET by designing the order of the QAs in the speech index.

When executed a QA may entail playing a prompt to a caller. Therefore when a QA provides for the presentation of a prompt it executes a prompt function that determines which prompt the QA is to play. Because there may be several different possible prompts that could be played at various times and in response to various caller input the prompt functions as well as the prompt representation may be and typically are placed at any point in the application code.

Additionally QAs may be tied to other functions such that when the QA is activated another function may be called to perform some type of processing. The QA may call various different functions based on the input present. However this input may be received at different times along the execution of the speech application. Therefore the resulting code includes multiple functions that may be associated with a single QA but which are located at various points interspersed among the rest of the application code.

The resulting code therefore may have multiple functions located at various locations throughout the code in addition to various prompts and prompt functions interspersed throughout the code. The maintenance of such applications becomes very difficult for programmers because there is typically no central location or set of rules for determining where such functions and prompts may be placed. Typically in large software applications multiple developers are used to create and maintain the applications. Therefore a programmer who was not involved in the creation of the code would not be familiar with the organization of the code logic. It may thus greatly increase the time necessary to understand the structure and functions of the application.

It should be noted that the various embodiments of the present invention provide a system and method for creating an explicit flow control programming model on top of the implicit flow control programming model in implicit ADEs. The examples given with regard to speech application technology is given purely for example. Various other technologies that employ an implicit flow control methodology such as Web development rich Internet application development and the like may benefit from application of the various embodiments of the present invention.

Each of explicit functions is an programmatic abstraction of a collection of ones of implicit functions . For example explicit function is a programmatic abstraction of implicit functions and . When a user of ADE calls explicit function ADE executes implicit functions and in the order used for completing the desired task or tasks. Therefore by selectively grouping explicit functions the user of ADE can create program logic that explicitly controls the flow of the application without the onus of manually creating the programmatic complexity of assembling the selected ones of implicit functions directly.

For example explicit function may be a function that designates the next QA to execute. For purposes of this example explicit function is labeled forceNextControl. A user of ADE may include the function call to forceNextControl as explicit function when he or she desires to call a QA for playing a voice prompt for retrieving caller password information. The function may include properties for designating the specific QA to execute. Thus the developer may write forceNextControl pwdRequest in order to call the pwdRequest QA that plays the prompts to request the caller for password information and record such information. When the compiler for ADE reaches this line of code it executes implicit functions and using pwdRequest as the designated QA to execute. Again for purposes of this example the combination of implicit functions and may execute the steps detailed in . Thus while the user of ADE only wrote the line forceNextControl pwdRequest into his or her line of code ADE executed steps as needed to implement the call of the pwdRequest QA. The user of ADE did riot see any of this execution of implicit functions but only knows that the next QA called is pwdRequest.

A switch statement is a common procedural explicit programmatic control device in procedural programming languages. However in order to effectuate a switch statement in an implicit flow control environment each possible selection is programmatically controlled by a code block that calls each possible selection but only allows execution of the selection that is desired to execute. This programmatic block would be repeated for each possible selection for each execution criteria.

Within initialization case if else expression provides controlled execution of different prompts in prompt statements and . Prompt statements and illustrate a simple call to the exact prompt selection desired for presentation. In the embodiment of the present invention illustrated in all prompts are placed into a single prompt array file. When a prompt is desired for execution a prompt statement is made that refers to the index of the prompt in the prompt file that is desired for presentation. Thus prompt statement which is played if there were any errors in the QA for getting the zip code or if a zip count is greater than 1 will play the prompt at appendPhrase . 

In contrast implicit flow ADEs such as SPEECH.NET would again use a large amount of code just to perform the conditional statement logic. Moreover in SPEECH.NET prompt functions which may reside anywhere within the document are called to determine what prompt to play and to then call that prompt for playing. Thus the various embodiments of the present invention allow the developer to control the procedure of the processing responsive to the caller s directions without requiring the developer to programmatically define each contingent conditional statement or execution for each desired prompt.

If else statement within complete case contains conditional statements for directing the progress of the application. Depending on the execution conditions complete case may run QA to get the city and state QA to run the open today feature or QA which looks up a message. This simple code in an explicit flow control methodology would require a large amount of code when implemented in an implicit flow control environment. As discussed with regard to for each QA that is desired to be run the activation function for every QA would be called but programmatically instructed not to execute unless it is the desired QA. This process would be repeated for each of QA . Instead the explicit flow control methodology provides the same functionality in a logical simple familiar format.

The program or code segments making up the various embodiments of the present invention may be stored in a computer readable medium or transmitted by a computer data signal embodied in a carrier wave or a signal modulated by a carrier over a transmission medium. The computer readable medium may include any medium that can store information. Examples of the computer readable medium include an electronic circuit a semiconductor memory device a ROM a flash memory an erasable ROM EROM a floppy diskette a compact disk CD ROM an optical disk a hard disk a fiber optic medium and the like. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels optical fibers air electromagnetic RF links and the like. The code segments may be downloaded via computer networks such as the Internet Intranet and the like.

Bus is also coupled to input output I O controller card communications adapter card user interface card and display card . The I O adapter card connects storage devices such as one or more of a hard drive a CD drive a floppy disk drive a tape drive to computer system . The I O adapter is also connected to a printer not shown which would allow the system to print paper copies of information such as documents photographs articles and the like. Note that the printer may be a printer e.g. dot matrix laser and the like a fax machine scanner or a copier machine. Communications card is adapted to couple the computer system to a network which may be one or more of a telephone network a local LAN and or a wide area WAN network an Ethernet network and or the Internet network. User interface card couples user input devices such as keyboard pointing device and the like to the computer system . The display card is driven by CPU to control the display on display device .

Although the present invention and its advantages have been described in detail it should be understood that various changes substitutions and alterations can be made herein without departing from the invention as defined by the appended claims. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one will readily appreciate from the disclosure processes machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

