---

title: Systems and methods for software support
abstract: This invention relates to methods and a system for supporting software. In one embodiment, a method for providing an updated version of a software program includes receiving an indication of a fault in a software program, distributing the faulty software program to a distributed community of programmers, receiving updated versions of the faulty software program from a subset of the distributed community of programmers, and determining a preferred updated software program from the received updated versions of the software program. In another embodiment, a system for providing an updated version of a software program includes a communication server for communicating faulty software programs and updates of the programs to and from the distributed community of programmers, a component storage module for storing the faulty software program, and a software testing module for determining a preferred updated version of the faulty software program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08776042&OS=08776042&RS=08776042
owner: TopCoder, Inc.
number: 08776042
owner_city: Glastonbury
owner_country: US
publication_date: 20051219
---
This application is a continuation in part of U.S. patent application Ser. No. 10 408 402 filed Apr. 7 2003 which claims priority to U.S. provisional patent application Ser. No. 60 370 937 filed Apr. 8 2002 and a continuation in part of U.S. patent application Ser. No. 11 035 783 filed Jan. 14 2005 which claims priority to U.S. provisional patent application Ser. No. 60 536 760 filed Jan. 15 2004.

This invention relates to computer based methods and systems for developing and distributing software and more particularly to methods and systems for facilitating the distributed development of software.

In the United States and elsewhere computers have become part of people s everyday lives both in the workplace and in personal endeavors. This is because a general purpose computer can be programmed to run a variety of software programs each providing different processing and networking functions. Computer programmers develop computer code and in many cases are also responsible for supporting computer code once it is released into a production and or commercial environment. Some companies hire large numbers of computer programmers and support technicians to develop and support released code on the company s behalf.

One approach is to hire large numbers of programmers and develop and support software in house. While this affords significant control over the programming staff finding hiring and maintaining such a staff can be cost prohibitive. Furthermore as individual programmers leave the company much of the technical and industrial knowledge is also lost. Alternatively many companies outsource their software programming and support activities through consulting firms third parties or contract employees. This approach relieves the company of the burdens of managing individual employees however the quality and consistency of the work may be suspect and the challenges of integrating work from numerous outside vendors can be significant.

Organizations that develop and deploy software need to provide high quality support for production software while being assured that any changes to the code are implemented using appropriate quality measures. Techniques that have been suggested to improve software development and simplify ongoing support are code re use and component based design. But even if organizations adopt such techniques they still need to provide timely and quality support to users of the software in an affordable manner.

In general the invention relates to providing infrastructure process controls and manpower to support previously released software using a repeatable structured model in order to transform software support from an ad hoc low value add exercise into a streamlined predictable manufacturing operation. Generally speaking this goal can be achieved using a competition model whereby a number of distributed unrelated and motivated developers each submit code to fix malfunctioning software programs from which the eventual new functional software program is selected.

This approach can be applied in a variety of scenarios even in cases where third parties or other software development firms developed the software but a company wishes to obtain support for the program elsewhere. For example a consulting firm or an offshore programming shop may have been engaged to develop the software. In another example the software may have been developed in house but the company wants to assist its development staff with the task of providing ongoing support for the program. In some cases a multi step software development manufacturing process such as those described in currently pending commonly assigned U.S. patent application Ser. No. 10 408 402 entitled Method and System for Software Development and U.S. patent application Ser. No. 11 035 783 entitled Systems and Methods for Software Development may be used to develop the software or a change in environment or other software. Even using such methods however the possibility exists that a programming error will cause the developed program to fail under one or more conditions.

In one aspect an indication of a fault used here to refer to an error malfunction bug and the like as well as behavior that operates according to the specification or documentation but is not appropriate acceptable or optimal for actual end user activity in a software program is received and a description of the faulty behavior and the faulty program or directions for obtaining a copy of the faulty program is communicated to a distributed community of programmers. In response updated versions of the software program are received from each of a subset of the programmers. One of the received modified versions is determined to be the preferred updated software program.

Various embodiments can include one or more of the following features. The faulty software program can originate from a production environment into which the program was previously deployed. The software program can be the result of a coding competition such as an on line contest where for example the programmers skill ratings can be derived from their performances in the coding competition. As further examples the software program can be a software component a software application a combination of components or a software module. In some cases one or more test cases are received that cause the faulty software program to fail.

A copy of the faulty software program and or a description of the fault can be received prior to along with or after receiving the indication of a fault in the software program and the faulty program may be analyzed to determine the cause of the fault. In some embodiments the description of the fault is distributed with the faulty program. A severity level can accompany the indication of fault and or the distribution of the faulty program. In some cases a software specification and or design document that was used to develop the faulty software program is also distributed. In some cases one or more test cases are provided that the software program passes.

The distributed community of programmers can include or in some cases be limited to programmers who previously participated in an online programming competition and in some embodiments those programmers who have achieved a rating above a predetermined minimum rating. The distributed community of programmers can include a programmer who previously designed and or developed the faulty software program. A time limit may be imposed on the submission of updated versions of the software program. The determination of which submitted updated software program is identified as the preferred updated software program may be based on the extent to which the submitted programs address the indicated fault and or the order in which the submissions were received. A list of parties using the faulty software program may be compiled and in addition the preferred updated software program may be distributed to one or more of the identified parties.

The method can further include rewarding the programmer that found the fault and or submitted the preferred updated software program with for example monetary rewards prizes and or increased ratings. Submissions of updated versions of the faulty software program may be rejected after some predefined period of time upon receiving a predefined number of submissions or upon selecting a preferred updated software program.

In general another aspect of the invention relates to systems for implementing the methods just described. For example a system for providing updated versions of software programs includes a communications module for receiving an indication of a fault in a software program distributing the faulty software program to a distributed community of programmers and in response to the distribution receiving from each of a subset of the programmers an updated version of the faulty software program and one or more test cases for testing the received program. The system also includes a component storage module for storing previously distributed versions of the faulty software program and a testing module for determining a preferred updated version of the faulty software program using for example test cases submitted with the updated versions of the software program.

In one embodiment of this aspect of the invention the system further includes a rating engine for rating the skills of the members of the distributed community of programmers in response to the received updated versions of the faulty software program. The system can in some embodiments further include a reviewing module to allow members of the distributed community to review updated versions of the faulty software program submitted by other members of the community. A repository may be used to store the received updated versions and in some cases a version control module may be included to maintain multiple versions of the software program one of which may be the preferred version of the updated software program.

Other aspects and advantages of the invention will become apparent from the following drawings detailed description and claims all of which illustrate the principles of the invention by way of example only.

Referring to in one embodiment a distributed software development system includes at least one server and at least one client generally . As shown the distributed software development system includes three clients but this is only for exemplary purposes and it is intended that there can be any number of clients . The client is preferably implemented as software running on a personal computer e.g. a PC with an INTEL processor or an APPLE MACINTOSH capable of running such operating systems as the MICROSOFT WINDOWS family of operating systems from Microsoft Corporation of Redmond Wash. the MACINTOSH operating system from Apple Computer of Cupertino Calif. and various varieties of Unix such as SUN SOLARIS from SUN MICROSYSTEMS and GNU Linux from RED HAT INC. of Durham N.C. and others . The client could also be implemented on such hardware as a smart or dumb terminal network computer wireless device wireless telephone information appliance workstation minicomputer mainframe computer or other computing device that is operated as a general purpose computer or a special purpose hardware device used solely for serving as a client in the distributed software development system.

Generally in some embodiments clients can be operated and used by software developers to participate in various software development activities. Examples of software development activities include but are not limited to software development projects software design projects testing software programs creating and or editing documentation participating in programming contests as well as others. Clients can also be operated by entities who have requested that the software developers develop software e.g. customers . The customers may use the clients to review software developed by the software developers post specifications for the development of software programs test software modules view information about the developers as well as other activities described herein. The clients may also be operated by a facilitator acting as an intermediary between the customers and the software developers.

In various embodiments the client computer includes a web browser client software or both. The web browser allows the client to request a web page or other downloadable program applet or document e.g. from the server with a web page request. One example of a web page is a data file that includes computer executable or interpretable information graphics sound text and or video that can be displayed executed played processed streamed and or stored and that can contain links or pointers to other web pages. In one embodiment a user of the client manually requests a web page from the server . Alternatively the client automatically makes requests with the web browser . Examples of commercially available web browser software are INTERNET EXPLORER offered by Microsoft Corporation NETSCAPE NAVIGATOR offered by AOL Time Warner or FIREFOX offered the Mozilla Foundation.

In some embodiments the client also includes client software . The client software provides functionality to the client that allows a software developer to participate supervise facilitate or observe software development activities described above. The client software may be implemented in various forms for example it may be in the form of a Java applet that is downloaded to the client and runs in conjunction with the web browser or the client software may be in the form of a standalone application implemented in a multi platform language such as Java or in native processor executable code. In one embodiment if executing on the client the client software opens a network connection to the server over the communications network and communicates via that connection to the server . The client software and the web browser may be part of a single client server interface for example the client software can be implemented as a plug in to the web browser .

A communications network connects the client with the server . The communication may take place via any media such as standard telephone lines LAN or WAN links e.g. T1 T3 56 kb X.25 broadband connections ISDN Frame Relay ATM wireless links 802.11 bluetooth etc. and so on. Preferably the network can carry TCP IP protocol communications and HTTP HTTPS requests made by the web browser and the connection between the client software and the server can be communicated over such TCP IP networks. The type of network is not a limitation however and any suitable network may be used. Non limiting examples of networks that can serve as or be part of the communications network include a wireless or wired ethernet based intranet a local or wide area network LAN or WAN and or the global communications network known as the Internet which may accommodate many different communications media and protocols.

The servers interact with clients . The server is preferably implemented on one or more server class computers that have sufficient memory data storage and processing power and that run a server class operating system e.g. SUN Solaris GNU Linux and the MICROSOFT WINDOWS family of operating systems . Other types of system hardware and software than that described herein may also be used depending on the capacity of the device and the number of users and the size of the user base. For example the server may be or may be part of a logical group of one or more servers such as a server farm or server network. As another example there could be multiple servers that may be associated or connected with each other or multiple servers could operate independently but with shared data. In a further embodiment and as is typical in large scale systems application software could be implemented in components with different components running on different server computers on the same server or some combination.

In some embodiments the server also can include a contest server such as described in U.S. Pat. Nos. 6 569 012 and 6 761 631 entitled Systems and Methods for Coding Competitions and Apparatus and System for Facilitating Online Coding Competitions respectively both by Lydon et al and incorporated by reference in their entirety herein.

In one embodiment the server and clients enable the distributed software development of a software program by one or more developers which developers may or may not be associated with the entity requesting the development of the software program. The software program can be any sort of instructions for a machine including for example without limitation a component a class a library an application an applet a script a logic table a data block or any combination or collection of one or more of any one or more of these.

In one embodiment the software program is a software component. Generally a software component is a functional software module that may be a reusable building block of an application. A component can have any function or functionality. Just as a few examples software components may include but are not limited to such components as graphical user interface tools a small interest calculator an interface to a database manager calculations for actuarial tables a DNA search function an interface to a manufacturing numerical control machine for the purpose of machining manufactured parts a public private key encryption algorithm and functions for login and communication with a host application e.g. insurance adjustment and point of sale POS product tracking . In some embodiments components communicate with each other for needed services e.g. over the communications network . A specific example of a component is a JavaBean which is a component written in the Java programming language. A component can also be written in any other language including without limitation Visual Basic C Java and C.

In one embodiment the software program is an application. The application may be comprised of one or more software components. In one embodiment the software application is comprised of software components previously developed using the methods described herein. In some embodiments the application comprises entirely new software programs. In some embodiments the application comprises a combination of new software programs and previously developed software programs.

Referring to a software development domain can be used to provide an entity with high quality software. One or more developers can be identified and or selected by various methods from a distributed community of programmers and subsequently used to develop software components. For example the developers can be employees of consultants to or members of an organization enterprise or a community fostering collaborative computer programming and distributed software development and in some cases the developers may have no other formal or informal relationship to each other. In some embodiments one or more of the developers can act as a product manager who is responsible for organizing and coordinating the efforts of other developers. The product manager may also specify items such as without limitation the cost of the project the project schedule and the project risks. In one embodiment the product manager creates a project plan for the project which may include without limitation an estimated project cost and schedule and a requirements document describing for example the scope and risks of the project.

In some embodiments the developers may include architects designers programmers quality assurance engineers as well as other software development roles as described in co pending U.S. patent application Ser. No. 10 408 402 entitled Method and Systems for Software Development by Hughes and incorporated by reference in its entirety herein.

In one embodiment the software development domain includes a communication server one or more structured development methodologies software development software and a review board . The communication server provides a conduit through which the external entity the community of programmers and the review board can interact for example to provide documentation submit software elicit and offer feedback review submitted software and potentially rate submitted software either in design or functional form. In some embodiments the communication server is or operates as part of the server as described above whereas in other cases the communication server may be a separate server which may be operated by and or outsourced to an application service provider ASP internet service provider ISP or other third party.

The structured development methodology provides a framework for the development of software programs. The methodology specifies a common vocabulary a fixed set of deliverables development phases or steps inputs and outputs for one or more of the steps as well as other aspects of the development process. For example the methodology bifurcates the development process into an architecture and design phase and a development and testing phase. Furthermore in this particular non limiting example the outputs of the architecture and design phase such as class diagrams test cases technical specifications and other design documents are submitted reviewed and finalized prior to initiating any development work. Once a set of design documents are selected and approved the design documents are used as input into the development phase. During the development and testing phase the developer s create source code scripts documentation and other deliverables based on the design documents. By assuring the high quality of the design documents prior to beginning development the developers are afforded a complete and accurate representation of what it is they are being asked to develop. Furthermore by using a structured methodology the participants e.g. developers the entity can communicate effectively and the outputs of each process step are known and can be verified. By providing a common definition and a known set of inputs such as use cases and a known set of outputs such as expected results and facilitating community based development the developers can interact with each other effectively and efficiently thus reducing the cost and time necessary to produce quality software.

The software development software provides an operational mechanism for implementing the methodology and a software development environment in which the developers can do one or more of develop test submit and verify software designs and software programs. In some embodiments as shown components of the software may reside on the server whereas some components may be included in client software residing on a client e.g. as described above. The software development software optionally can include one or more modules such as a development library from which developers can access previously developed components and documentation templates a documentation feature that provides information about programming terms syntax and functions a compiler that also allows a developer to identify and correct programming errors and even version control and code management functions.

Initially the facilitator receives input from an entity not shown wishing to have a software program application component or other asset developed on their behalf. The entity can be a company looking to have one or more computer programs designed and or developed for internal use or as portions of larger applications that they intend to sell commercially. In some cases the entity provides a detailed specification and in other cases only a list of functional requirements may be provided. The facilitator receives either the requirements STEP the specification STEP or in some cases both from the external entity. If however no specification is provided or if the specification needs revisions to conform to the methodology the facilitator can develop a specification in accordance with the requirements STEP . In some cases one or more members of the development community e.g. development community in may be asked to develop the specification and in some cases multiple specifications may be submitted with one of the submissions selected as the final specification to be used for guiding the design and development efforts.

In one embodiment the specification defines the business plan and a stable hardware and or software platform or other architectural constraints. For example the specification can define the network devices servers and general infrastructure to support the development and production of the project and product. The specification can also identify a language or tools that the component must be programmed in or with a functional overview of the software component boundary conditions efficiency requirements computer platform environment requirements interface requirements performance criteria test case requirements and or documentation requirements of the component. In some embodiments the specification can include an amount of money that will be paid to the designer who submits the best design and or program that complies with the specification.

In some cases the specification is assigned a difficulty level or some similar indication of how difficult the facilitator entity or other evaluator of the specification believes it will be to produce a comprehensive design according to the specification. The difficulty level may in some cases also be based on the effort believed to be necessary to complete the task and the time allotted to complete the task. The difficulty level may be expressed in any suitable manner for example as a numerical measure e.g. a scale of 1 to 10 a letter grade or a descriptive such as easy medium or hard. For example a specification for the design of a complex gene sequencing algorithm may have a difficulty level of 9 on a scale of 1 to 10 whereas a simple component that performs a search for specific text in a file may be assigned a difficulty level of 2. If there are additional practical constraints for example if the search component is needed in two days the difficulty level optionally may be increased due to the tight time constraints. In some embodiments an award to the designer e.g. money skill rating etc. that submits the selected design may be produced or adjusted based in part on the difficulty level associated with the specification.

Once the specification is received or developed the facilitator or in some cases a project manager review board member or some combination thereof reviews the specification to determine if it meets the requirements for a complete specification according to the development methodology . The methodology can include best practice activities templates guidelines and standards that assist software architects programmers and developers in producing quality code in a consistent and efficient manner. The use of such a methodology reduces the need to rethink and recreate programming documentation and constructs thus reducing project duration cost and increasing quality and component reusability.

Once complete the specification is distributed via the communications server to one or more developers generally who may be members for example of a distributed community of programmers such as the community shown in . In one non limiting example the developers are unrelated to each other. For example the developers may have no common employer may be geographically dispersed throughout the world and in some cases have not previously interacted with each other. However as members of the community the developers may have participated in one or more competitions and or have had previously submitted software artifacts subject to reviews. This approach allows an entity to gain access to a large pool of qualified software developers.

The communication can occur over a communications network such as the network such as via an email instant message text message a posting on a web page accessible by the web browser through a news group facsimile or any other suitable communication. In some embodiments the communication of the specification can be accompanied by an indication of a prize payment or other recognition that is available to the designer s that submit selected software design s . In some cases the amount and or type of payment may change over time or as the number of participants increases or decreases or both. In some cases multiple designers may be rewarded with different amounts for example a larger reward for the best design and a smaller reward for second place. The number of designers receiving an award can be based on for example the number of designers participating in the design project or other similar attributes.

The recipients of the specification can be selected by various means. In some embodiments members of the community may have expressed interest in participating in a development project whereas in some cases the individuals are selected based on previous performances in coding competitions prior development projects or other methods of measuring the programming skill of a software developer. For example the members of the distributed community of programmers may be programmers who have previously participated in an on line programming competition. In such a case the programming skills of the participants may have been rated according to their performance either individually as a team or in relation to other programmers and the ratings may be used to determine which programmers are eligible to receive notification of a new specification or respond to a notification.

In one embodiment the facilitator moderates a collaborative forum among the various participants the external entity the developers etc. to determine discuss or collaborate on design features. The collaborative forum can consist of developers customers prospective customers or others interested in the development of certain software. In one embodiment the collaboration forum is an online forum where participants can post ideas questions suggestions or other information. In some embodiments only a subset of the forum members can post suggestions to the forum.

Upon receipt of the specification one or more developers each develop software designs STEPS and in accordance with the specification. The development of the software design can be done using any suitable development system for example the software development software provided via the communication server a development environment provided by the developer or some combination thereof. Once a developer is satisfied that her design meets the specified requirements and follows the structured development methodology she submits her design e.g. via the communications server facsimile email mail or other similar methods.

To determine which design will be used as the design for the software program a design review process STEP is used. This design review can take place in any number of ways. In some cases the facilitator can delegate the review process to one or more members of the distributed community of programmers or an appointee of the entity. The design review process in some embodiments includes one or more developers acting as a design review board to review design submissions from software designers. The design review board preferably has a small number of e.g. less than ten members for example three members but can be any number. Generally the review board is formed for only one or a small number of related projects for example three projects. Review boards in some embodiments could be formed for an extended time but changes in staffing also can help maintain quality.

Preferably one member of the design review board members is selected as the primary review board member by the facilitator and or the project manager the members of the review board and or the external entity requesting the software program. In some cases the facilitator or a representative of the facilitator acts as the primary review board member. The primary review board member is responsible for coordination and management of the activities of the board.

In one embodiment submissions for software designs are judged by the design review board. In some embodiments the primary review board member screens the design submissions before they are reviewed by the other members of the design review board to allow the rest of the review board to judge only the best of the submissions. In some embodiments the screening process includes scoring the submissions based on the degree to which they meet formal requirements outlined in the specification e.g. format and elements submitted . In some embodiments scores are documented using a scorecard which can be a document spreadsheet online form database or other electronic document. The design review board may also in some cases verify the anonymity of the developers such that their identities cannot be discerned from their submissions.

A screening review can determine whether the required elements of the design are included e.g. class use case and sequence diagrams component specification required algorithms class stubs and functional tests . The screening review can also determine that these elements appear complete. With regard to the class diagram for example and in particular the class definition the screening review can determine any or all of that 1 the class definition provides a descriptive overview of the class usage 2 sub packages have been created to separate functionality 3 class scope matches class usage 4 there is proper and effective use of programming techniques such as inheritance and abstraction 5 interfaces are used properly 6 suitable constructors are defined for the component and that 7 class modifiers such as final and static are appropriately used. The screening review can also determine for example with regard to variable definitions that 1 variable scope is correctly defined 2 type assignments are defined appropriately for balance between efficiency and flexibility and 3 that all variables are defined with an initial value. Further with regard to method definitions for example the screening review can determine that 1 scope is correctly defined 2 exceptions are handled and used appropriately 3 modifiers are properly used 4 return types are used 5 method arguments are properly defined and 6 that the application programming interface API as stated in the requirements specification is available.

The screening review can also for example verify that use case diagrams exist for all public methods in the design and that sequence diagrams exist for each use case. The screening review can also for example with regard to test cases verify that functional test cases are provided for each sequence diagram and that they appear to be appropriate for those diagrams. The designs can take a number of forms depending on the program specified. Typically the specifications will include the requirements for the design. In one embodiment the design requirements include class diagrams which can be developed in the Unified Modeling Language UML for example using the Poseideon Computer Aided Software Engineering CASE tool available from Gentleware AG of Hamburg Germany. The design requirements also include use case diagrams and sequence diagrams. The design requirements also include a written component design specification describing the design a list of required algorithms and class stubs for the classes in the design. The design requirements also include functional tests that can be used to test the program. In one such embodiment the functional tests are tests compatible with the JUnit testing infrastructure. JUnit is open source software for testing Java software which is available from www.sourceforge.net.

In one embodiment the primary review board member informs the design review board that one or more submissions have passed the initial screening process STEP and the design review board then evaluates the design submissions in greater detail. In some embodiments the design review board reviews the submissions based on requirements documented in the specification. In some embodiments the design review board scores the submissions STEP . In some embodiments the scores are documented using a scorecard which can be any form including a document spreadsheet online form database or other electronic document.

In some embodiments the scores and reviews from the primary review board member and the other members of the design review board are aggregated into a final review and score. In some embodiments the aggregation can comprise compiling information contained in one or more documents. Such aggregation can be performed by the primary review board member the other members of the design review board or in one exemplary embodiment the aggregation is performed using a computer based system which resides on the server . In some embodiments the facilitator or the primary review board member resolves discrepancies or disagreements among the members of the design review board.

In one embodiment the design with the highest combined score is selected as the winning design that will be used for implementation STEP . A prize payment and or recognition is given to the designer. In one embodiment a portion of the payment to the designer is withheld until the end of the development review. For example the designer may receive 75 of the payment at the end of the design review and 25 is paid after the code review. There can also be prizes payments and or recognition for the other submitted designs. For example the designers that submit the second and third best designs may also receive payment which in some cases may be less than that of the winning designer. Payments may also be made for creative use of technology submitting a unique test case or other such submissions. In some embodiments the software developers can contest the score assigned to their design program or other submissions.

In some cases the posted design is assigned a difficulty level or some similar indication of how difficult the external entity facilitator or some evaluator of the design believes it will be to produce a software program or component that meets the requirements of the selected design. Like the difficulty levels assigned to the specification the difficulty level assigned to a design may in some cases also factor in the effort believed to be necessary to complete the task and the time allotted to complete the task. In some embodiments the recognition awarded to the designer e.g. money skill rating etc. that submits the selected design may be adjusted based in part on the difficulty level associated with the specification.

In some embodiments in addition to reviewing the submissions the design review board can identify useful modifications to the design that should be included into the design prior to entering the development phase. The primary review board member documents the additional requirements and communicates this information to the designer who submitted the design. In one embodiment the primary review board member aggregates the comments from the review board. The developer can update the design and resubmit it for review by the design review board. This process can repeat until the primary review board member believes the design has met all the necessary requirements.

Once the design review board validates that a design has sufficiently addressed the requirements of the specification the primary review board member notifies the facilitator product manager or external entity that such a design has passed the design review process. The design can then be posted and or distributed STEP to the community of developers to solicit submissions for software programs that conform to the design. For example the facilitator can make the design available on a web site and or a mailing list for implementation and request components according to the design.

In one alternative embodiment and as an example of the flexibility of the system the entity develops the software design and provides the design to the facilitator as input directly into the development process. The facilitator receives the design STEP and optionally initiates a review process as described above to confirm that the design meets the standards of the structured development methodology . Using this approach an entity wishing to maintain control of the design phase of the software development process e.g. architecture platform coding standards etc. can utilize internal or other resources such as business and systems analysts to develop a design that complies with their standards and then utilize a distributed community of developers to develop the end product. Generally this alternative maintains the design aspects of the software development process in house and outsources the manufacturing aspects of the development process such that the development domain can use repeatable structured development methods and the community of developers to develop the software programs. Similarly the entity may only require the services of the development domain to develop a software design and subsequently use other resources such as in house programmers or off shore developers to develop the code.

The flexibility provided by maintaining multiple entry and exit points into and out of the development process allows external entities to decide on a case by case or phase by phase basis whether to utilize the development domain from start to finish i.e. specification through testing and support or only use the domain for specific phases of the process i.e. development of code development of a specification development of a software design testing support etc. .

Referring still to the selected and approved design is posted or provided to members of the distributed community of programmers . As above with the specification the design may be sent to the entire community or only selected members of the community. In versions where the design is sent to selected members the selection process can be based on any or a combination of suitable criteria for example without limitation past performances in programming competitions the quality of previously submitted software programs involvement in the development of the design or by specific request of the facilitator entity the designer that submitted the winning design other designers or other members of the community . In some embodiments the communication of the design can be accompanied by an indication of a prize payment or other recognition that is available to the developer that submits a selected software program and or runners up. In some cases the amount and or type of payment may change over time or as the number of participants increases or decreases.

Each developer develops software code STEPS and meeting the requirements of the selected design and when completed submits the code for example to the facilitator or the server. As described above the developers may use a variety of coding techniques languages and development environments to develop the software so long as the code meets for example the functional and architectural aspects dictated by the design and the quality and syntactical standards outlined by the structured development methodology . In some embodiments the developers may use the software development software provided via the communication server to assist with the development tasks. Because the development software and development methodology are both maintained within the development domain many of the coding and quality control requirements of the methodology can be built into the software further assisting the developers to develop quality code in an efficient manner.

To determine which software program will ultimately be selected as the program to be delivered to the entity a code review process STEP is used which can take place in any suitable manner. The code review process in some embodiments includes one or more developers acting as a code review board to review submitted software programs from software developers. The code review board preferably has a small number of members e.g. less than ten for example three members but can be any number. Generally the code review board is formed for only one or a small number of related projects for example three projects and then disbanded to allow the members to participate in additional design review boards code review boards or participate as designers and or developers themselves. Review boards in some embodiments could be formed for an extended time but changes in staffing also can help maintain quality.

Preferably one member of the code review board members is selected as the primary code reviewer by the facilitator and or the project manager the members of the review board and or the external entity requesting the software program. In some cases the facilitator or a representative of the facilitator acts as the primary code board member. The primary code review board member is responsible for coordination and management of the activities of the board.

In one embodiment submissions of software programs are judged by the code review board. In some embodiments the primary code review board member screens the code submissions before they are reviewed by the other members of the code review board to allow the rest of the code board to judge only the best of the submissions for example those that meet minimal requirements. In some embodiments the screening process includes scoring the submissions based on the degree to which they meet formal requirements outlined in the selected design e.g. format and elements submitted . In some embodiments scores are documented using a scorecard which can be a document spreadsheet online form database or other electronic document.

In one embodiment for example with regard to software code the code review board member or members score the code based on the extent to which 1 the submitted code addresses the functionality as detailed in component design documents 2 the submitted code correctly uses all required technologies e.g. language required components etc. and packages 3 the submitted code properly implements required algorithms and or 4 the submitted code has correctly implemented and not modified the public application programming interface API as defined in the design with no additional public classes methods or variables.

With regard to the source code for example the screening review can determine any or all of that 1 all public methods are clearly commented 2 required tags such as author param return throws and version are included 3 the copyright tag is populated 4 the source code follows standard coding conventions for the Java language such as those published by Sun Microsystems 5 a 4 space indentation is used in lieu of a tab indentation and 6 all class method and variable definitions found in the class diagram are accurately represented in the source code. The code review can also for example verify that unit test cases exist for all public methods in the design and each unit test is properly identified by a testing program.

With regard to class definitions for example the reviewer can evaluate the code based on the extent to which classes are implemented as defined in design documents including for example modifiers types and naming conventions and whether defined classes are implemented. With regard to variable definitions and method definitions for example the reviewer can determine the extent to which all variables and methods are implemented as defined in the design documents including for example modifiers types and naming conventions . With regard to relationships for example the reviewer can determine the extent to which the implementation properly maps class relationships.

The reviewer can further evaluate code based on a code inspection. For example the reviewer can determine the extent to which the object types defined in the code are the best choices for the intended usage for example whether a Vector type should have been used instead of an Array type. The reviewer can determine the extent to which there are any needless loops or careless object instantiation or variable assignment.

The reviewer can also inspect the test cases. With regard to test cases for example the reviewer can determine the extent to which 1 the unit test cases thoroughly test all methods and constructors 2 the unit test cases properly make use of setup and teardown methods to configure the test environment 3 files used in unit test cases exist in the designated directory and or 4 unit test cases do not leave temporary files on the file system after testing is complete.

The reviewer can run tests on the code using test cases for example test cases developed by the developer other developers the reviewers the facilitator the entity as well as others. The reviewer can even further score the code by conducting accuracy failure and stress tests. Accuracy tests test the accuracy of the resulting output when provided valid input. Accuracy tests can also validate configuration data. Failure tests test for correct failure behavior when the component is provided with invalid input such as bad data and incorrect usage. Stress tests test the component capacity for high volume operation buy testing such characteristics as performance and throughput. The tests that fail are included in the evaluation of the component for example as a score reduction. The reviewer can then assign an overall score to the component based on this evaluation.

In one embodiment the primary code review board member informs the code review board that one or more submissions have passed the initial screening step STEP and the code review board can then evaluate the program submissions in greater detail. In some embodiments the code review board can review the submissions based on design requirements documented in the selected design. The code review board can then score the submissions STEP based on the results of the evaluations. In some embodiments the scores are documented using a scorecard which can be any suitable means such as a document spreadsheet online form database or other electronic document.

In some embodiments the scores and reviews from the primary code board member and the other members of the code review board are aggregated into a final review and score. In some embodiments aggregation can comprise compiling information contained in one or more documents. Such aggregation can be performed by the facilitator the primary code board member the other members of the code review board or in one exemplary embodiment the aggregation is performed using a computer based system which resides on the server . In some embodiments the facilitator or the primary review board member resolves discrepancies or disagreements among the members of the code review board.

In one embodiment the software program with the highest combined score is selected as the winning program STEP that will be delivered to the external entity as a finished product STEP . In some embodiments a prize payment and or recognition is given to the software developer that submitted the winning program. There can also be prizes payments and or recognition for the other submitted programs. For example the programmers that submit the second and third best programs may also receive payment which in some cases may be less than that of the winning programmer. Payments may also be made for creative use of technology submitting a unique test case or other such submissions. In some embodiments the software developers can contest the score assigned to their programs test cases or other submissions.

In some embodiments in addition to reviewing the submissions the code review board can identify useful modifications to the program that should be included into a selected software program prior to distribution. The primary code review board member documents the additional requirements and communicates this information to the developer who submitted the code. In one embodiment the primary code review board member aggregates the comments from the review board. The developer can update the program and resubmit it for review by the code review board. This process can repeat until the primary code review board member believes the program has met all the necessary requirements and meets the standards specified in the structured development methodology .

In some embodiments the software may be updated with enhancements post delivery bug fixes additional functionality or modified to operate in additional computing environments or platforms after it has been delivered to one or more entity . In such cases the domain provides for the tracking and updating STEP of previously distributed software products as described in co pending U.S. patent application Ser. No. 10 408 402 entitled Method and Systems for Software Development by Hughes filed on Apr. 7 2003 and incorporated by reference in its entirety herein.

For example in one embodiment an entity commissions the development of a software component and upon completion of the component version 1 of the component is distributed to the entity . Subsequently a second entity requests the development of a similar component that performs the same functionality however to meet the specific request of the second entity some modifications are made to the component. A modification is for example an improvement e.g. efficiency increase smaller memory requirements deletion e.g. of an unneeded step or feature and or an addition e.g. of a complimentary feature or function to the component. Another example of a modification is the integration of the component into another component e.g. a larger component . In response to the request for the modified component a new version of the component version 1.1 for example is developed and distributed to the second entity . In one embodiment a message is sent to the first entity stating that an updated version of the component is available. In further embodiments the costs for developing the newer version of the component can be shared among the recipients of the original component version 1 who wish to receive the new version as well as the entity that initiated the development of the new version. Additionally in some embodiments the entity that requested the development of the new version is compensated for licenses sales of copies of the second version of the component.

Referring to in one embodiment the distributed community of developers are engaged to provide support for software programs. Support can be provided during implementation and deployment at an external entity during a testing phase at the entity as well as post deployment i.e. when the software program is in production. In some cases the software programs are developed using the systems and methods described herein and in some cases the software programs are developed using other methods and subsequently sent to the facilitator for inclusion in a software library component store or other such software artifact storage and distribution system.

The software program is deployed STEP by one or more external entities for example in a production environment a testing environment a development environment or other computing environment where the software program is expected to operate according to the design and development specifications previously described. Typically the software program has already passed tests and was believed to be fully functional.

At any time the external entity or in some cases multiple entities identify one or more faults STEP in the software program. For example the software program may operate without incident but fail to produce the expected output. As another example the software may exhibit faulty behavior infrequently for example if the software program lacks appropriate data input checks to assure that the data being used by the software program is of the correct format e.g. integer text etc. and does not contain invalid values. In other cases the software program may function as designed under typical operations but due to design choices such as field definition limits stack limits and transaction processing mechanisms the program may fail when encountering high volume operations. In other cases the software operation is not erroneous but is not optimal for example if all useful information is not displayed additional functionality would be helpful or if the operation of the software in its intended environment is slower than anticipated or desired. In still further cases the external entity may not be aware of any faults of the program but wishes to have the program vetted by the community of software developers to find any previously unnoticed faults as well as determining the most appropriate fix for any faults they find.

In each case the entity compiles as much fault data as possible STEP which in some cases may be none if they are requesting the program be further tested by the community of software developers . The fault data may include by way of example error messages input data values output data values memory dumps and or code segments. In some embodiments the external entity supplies fully functional software programs that interact with the faulty software program to allow system testing at an application level in addition to the unit testing at the program or component level described above. In some cases no fault data may be available and the entity merely notes a failure or faulty behavior occurred. The entity then provides the fault data STEP to the facilitator who will oversee the resolution of the fault.

Once the facilitator receives an indication STEP that a software program is not operating as expected and available fault data associated with that failure a confirmation step may be used to determine if the program is in fact faulty. One method of testing the program is to use the fault data supplied by the entity to attempt to recreate the fault. In embodiments where additional functional software programs are supplied the facilitator may attempt to operate an entire software application comprising numerous software programs the faulty software program being only a subset of the application to observe how the faulty program interacts with other programs. In cases where multiple test cases were submitted during the development of the program as described below the test cases may be re run with the fault data supplied by the entity . In situations where the software program was developed based on design and development specifications that were compiled under the supervision of the facilitator using for example the methods described above those documents are used to determine if the software program meets the original design and development requirements. If the facilitator determines that the software program is operating as designed the facilitator notifies the entity as such.

In some cases faults in other software programs may be found and those programs are then subject to the methods described herein. In other cases the software program may be operating as specified but the operational requirements of the program may have changed or in many cases not originally considered. Changes to the software program made to address new requirements enhancements may be incorporated into the software program using these same or similar methods. However in some cases the facilitator may decide to charge a fee for enhancing a software program. The fee may be a fixed fee or a fee determined by the complexity of the enhancement and or the time necessary to implement the enhancement. Such fees may be documented in for example a support services contract negotiated between the facilitator and the entity or in some cases determined on a one off basis as faults are found.

Having determined that a fault exists or as described above an enhancement is needed the facilitator posts the program STEP and in some embodiments also posts documentation regarding the program and the fault. The documentation may include for example fault data and in some cases documentation describing the fault the intended operation of the program the design document the development specification and the operational environment of the program. Other information such as the date or time that any updated versions of the program are needed and any rewards e.g. money for submitting the selected updated version can also be included in the posting. In some cases the posting may be available to the entire distributed community of programmers whereas in other cases the posting may be limited to a subset of the community having for example a minimum skill rating or a certain identified programming expertise. The posting may also be made available either exclusively or in addition to other members of the community to the individual s that originally designed and or developed the program using the methods described above. The posting may be achieved for purposes of example by placing a copy of the software program on a web site and FTP site distributing the program via email or any combination thereof.

Developers are notified of or inquire about a faulty software program and those that are identified as qualified recipients receive the program STEP using one or more of the methods described above. In addition to receiving the faulty software program and the related documentation test scripts data and other information that can be used to identify and resolve the fault the developers also in some cases receive a deadline by which modifications must be submitted and may also be informed of one or more prizes e.g. money a skill rating etc. that are available to the developer that submits the preferred fix. The developers using either their own programming development environments or in some cases using an online development and testing environment provided by the facilitator analyze and modify the faulty program STEP such that it is no longer faulty. When a developer is satisfied that their modifications address the identified faults as well as any they may have identified subsequent to their receiving the program they submit their modified program STEP to the facilitator for testing and analysis. The developer also may be required to submit test cases that test for the identified fault. In some embodiments test cases from multiple developers are used against a single submission using for example the methods described below.

Still referring to the facilitator receives each of the modified programs STEP and based on one or more decision parameters the primary review board member selects a preferred program STEP from among those submitted by the developers. The selection process can include testing the modified program to assure the previously identified fault has been addressed testing the overall functionality of the program and or the speed with which the program operates. In some embodiments a deadline is established by which the developers must submit their modifications in order to be considered for the selection process. In certain circumstances requiring exceptionally quick turnaround the first submission that successfully addresses the fault is selected as the preferred program. Once a preferred program is selected it is redistributed STEP to the entity where it is deployed STEP for further testing and or use in one or more production environment s . In some embodiments the preferred program is also distributed to other entities that have previously deployed the program but may or may not have identified the fault using for example the version control and distribution systems and methods described in more detail below.

In general developers are encouraged to develop test cases as they are coding so that they can consider the bounding and error conditions as they code. It can be beneficial to use the test cases developed by one or more or all of the other submitters to test each of the submitted programs to cover as many error conditions as possible.

As mentioned above in some embodiments the developers submit one or more test cases in addition to submitting the completed software program and or the updated software program. The purpose of the test cases is to provide sample data and expected outputs against which the program can run and the actual output of which can be compared to the expected outputs. By creating additional test cases that test for the identified fault the developer ensures that the fault will be noticed if accidentally reinserted into the code later. By submitting multiple test cases many different scenarios can be tested in isolation therefore specific processing errors or omissions can be identified. For example a program that calculates amortization tables for loans may require input data such as an interest rate a principal amount a payment horizon and a payment frequency. Each data element may need to be checked such that null sets zeros negative numbers decimals special characters etc. are all accounted for and the appropriate error checking and messages are invoked. In addition the mathematical calculations should be verified and extreme input values such as long payment periods daily payments very large or very small principal amounts and fractional interest rates should also be verified. In some versions one test case can be developed to check each of these cases however in other versions it may be beneficial to provide individual test cases for each type of error. In certain embodiments the multiple test cases can then be incorporated into a larger test program e.g. a script shell or other high level program and run concurrently or simultaneously. Where the program was identified as a faulty software program the suite of test cases tests the updated programs using for example the test data that caused the faulty program to fail an operating environment in which the software program did not operate as expected or other processes identified as causing the program to fail.

It should be understood that the tasks described could be reallocated. Just as one example step described above as performed by a facilitator could likewise be performed by a developer. Similarly evaluation of the updated code could be performed by one or more review boards or teams.

Referring to in a demonstrative embodiment developers and each submit software programs and respectively to the development domain in response to the communicated software design and or specification referred to above. In addition to submitting the programs the developers also submit one or more test cases and . For example when DEVELOPER submits PROGRAM she also submits TEST CASE A and TEST CASE B collectively . DEVELOPER and DEVELOPER do the same such that after all three developers have completed their submission the development domain includes a submission pool comprising three submitted programs and six test cases. Even though it is likely that DEVELOPER ran TEST CASE A and B that she submitted against her PROGRAM it is also possible that the test cases and submitted by DEVELOPER and DEVELOPER respectively address cases or data not contemplated by DEVELOPER . Therefore it can be advantageous to run each test case submitted by all of the developers against each of the submitted programs in an attempt to identify all potential faults of each submitted program. In some versions a subset of the submitted test cases may be eliminated from the submission pool or not used for example because they are duplicative do not test necessary features or are incorrect. If so a subset of the test cases in the submission pool can be used to test the submitted programs. Because the programs are tested more rigorously i.e. using a suite of test cases submitted by numerous developers the quality of the resulting programs is likely to be greater than that of programs tested only by those that developed the selected program.

Referring to the test cases in the submission pool are applied to the submitted programs . In some cases all of the test cases in the pool are applied to every submitted program whereas in some versions only a subset of the submitted test cases are used. In some embodiments certain programs may be eliminated from contention by running a first test case against it such that subsequent test cases are not necessary. In some versions each application of test case to a program results in a score . The scores for each application of test case to submitted program can then be tabulated and aggregated into a combined or overall score for that particular program. Some test cases have a higher or lower weight than others such that the scores for a particular test case may be more indicative of the overall quality of the program or the results are more meaningful. In other cases the scores may be binary i.e. a passed test receives a score of 1 and a failed test receives a score of 0. In some embodiments the tabulation and aggregation can be automated on the server .

In some embodiments developers that submit designs and or developed code are rated based on the scores of their submissions. The ratings are calculated based on the ratings of each developer prior to the submission the assigned difficulty level of the design or program being submitted and the number of other developers making submissions. It should be understood that a submission could be one design program or other computer software asset or in some cases a number of different assets. A skill rating is calculated for each developer based on each developer s rating prior to the submission and a constant standard rating e.g. 1200 and a deviation is calculated for each developer based on their volatility and the standard rating.

The expected performance of each developer submitting a design or program is calculated by estimating the expected score of that developer s submission against the submissions of the other developers submissions and ranking the expected performances of each developer. The submission can be scored by a reviewer using any number of methods including without limitation those described above.

Based on the score of the submitted software and the scores of submissions from other developers e.g. whether for the same program or one or more other programs having a similar level of difficulty each developer is ranked and an actual performance metric is calculated based on their rank for the current submission and the rankings of the other developers. In some cases the submissions from other developers used for comparison are for the same program. In some cases the submissions from other developers are submissions that are of similar difficulty or scope.

A competition factor also can be calculated from the number of developers each developer s rating prior to the submission of the design or program the average rating of the developers prior the submissions and the volatility of each developer s rating prior to submission.

Each developer can then have their performance rated using their old rating the competition factor and the difference between their actual score and an expected score. This performance rating can be weighted based on the number of previous submissions received from the developer and can be used to calculate a developer s new rating and volatility. In some cases the impact of a developer s performance on one submission may be capped such that any one submission does not have an overly significant effect on a developer s rating. In some cases a developer s score may be capped at a maximum so that there is a maximum possible rating. The expected project performance of each developer is calculated by estimating the expected performance of that developer against other developers and ranking the expected performances of each participant. The submissions and participants can be scored by the facilitator the entity a review board member and or automatically using the software residing for example on the server using any number of methods.

One such example of scoring methodology is described in U.S. Pat. No. 6 569 012 entitled Systems and Methods for Coding Competitions by Lydon et al at for example column 15 line 39 through column 16 line 52 and column 18 line 65 through column 21 line 51 and incorporated by reference in their entirety herein. The methodology is described there with reference to programming competitions and so is applicable to rating the development of software or hardware designs data models applications components and other work products created as a result of using the methodology described above.

In one embodiment the external entity is interested in receiving the developed design or the code as well as obtaining developers ratings and in some cases only the ratings. For example the external entity may ask developers to participate in the development process just so that the developers are rated and their skills can be objectively evaluated for future projects of greater value or to determine which developers are more skilled. The requestor could in addition have some interest in the developed design or code and may have some interest in using the developed intellectual asset for its business or otherwise.

There can be a significant benefit to using personnel who are rated highly using the process described above as design reviewer s in the design review process and or code reviewer s in the code review process. One of the traditional problems with conducting code reviews has been that the abilities of the reviewers were not established. Review by a poorly skilled developer can result in an inadequate review. By using the process to select as reviewers only developers with sufficient skill as determined by the process the process itself insures its success.

In one embodiment this software development process is adopted by a software development group within an organization. The development performed by the group is conducted using this process. Each developer in the group has a rating and the developers work to improve and or maintain their ratings. Developers who have high ratings can participate in reviews e.g. the design review process or the code review process . In one implementation developers receive additional benefits and or compensation for achieving a high rating. Likewise developers can receive additional benefits and or compensation for such participation in a review process. The requesters in this example are product or program managers charged with directing the software development.

In another implementation an outside organization such as a consultant can use the system and methods described above to evaluate and rate the development competencies of a development group. In this way the consultant can rate the developers not only against themselves but against other developers affiliated with other organizations who have participated or are participating in the system. The evaluator provides the service of evaluation and reporting as described above. One benefit to this approach is that the scoring of the intellectual assets is more likely to be unbiased if the reviewers are not personally known to the developers and comparing the skills of any one developer against a large pool of developers provides a more accurate representation of that developers skill level with respect to his or her peers.

Referring to the server can include a number of modules and subsystems to facilitate the communication and development of software specifications designs and programs. The server includes a communication server . One example of a communication server is a web server that facilitates HTTP HTTPS and other similar network communications over the network as described above. The communication server includes tools that facilitate communication among the distributed community of programmers the external entity the facilitator and the members of the review board s commonly referred to as users . Examples of the communication tools include but are not limited to a module enabling the real time communication among the developers e.g. chat news groups on line meetings and document collaboration tools. The facilitator and or the external entity can also use the communication server to post design or specifications for distribution to the distributed community of programmers .

Furthermore the server also includes a software development environment to facilitate the software development domain and the design and development process for example and the subsystems and modules that support the domain . For example the server can include a development posting subsystem a management subsystem a review board subsystem a testing subsystem a scoring subsystem a methodology database and a distribution subsystem .

In one embodiment the development posting subsystem allows users of the system to post specifications submit designs post selected designs submit software programs and test cases and post selected software programs for distribution. The posting subsystem identifies the users based on their role or roles and determines which functions can be accessed based on individual security and access rights the development phase that a project is currently in etc. For example if a particular project is in the design phase the posting subsystem can determine that the external entity sponsoring the project has read write access to the specification and can re post an updated specification if necessary. The facilitator may have read access to the specification as well as access to other specifications attributed to other external entities they may support. In some embodiments the entire distributed community of programmers may be able to view all of the currently pending specifications however the posting subsystem may limit full read access to only those developers meeting one or more skill or rating criteria as described above. Once designs are submitted access to the submitted designs can be further limited to only review board members or in some cases other participants in the process.

The development posting subsystem also enables the server or other participants to communicate with potential developers to promote development projects and grow the community of programmers that participate in the development process. In one embodiment the development posting subsystem displays an advertisement to potential developers. In one embodiment the advertisement describes the project using text graphics video and or sounds. Examples of communication techniques include without limitation posting these ads on the server s web site displaying statistics about the project e.g. planned royalties paid to developers developers who are participating in this project development hours available per week . Moreover in one embodiment the development posting subsystem accepts inquiries associated with development projects. In further embodiments the development posting subsystem suggests development opportunities to particular developers. The development posting subsystem may analyze for example the rating of each member of the distributed community previous contributions to previous development projects the quality of contributions to previous component development projects e.g. based on a score given to each developer s submission s as discussed above and current availability of the developer to participate.

The server also includes a management subsystem . The management subsystem is a module that tracks the progress of design and development projects using the software development environment . The management subsystem also facilitates the enrollment of new users of the system and assigns the appropriate security and access rights to the users depending on the roles they have on the various projects. In some versions the management subsystem can also compile and track operational statistics of the software development environment and users of the system. For example to determine the appropriate compensation to be awarded to a developer submitting a wining design the management subsystem may review previously completed projects and assign a similar cash award. Similarly in cases where the difficulty level of a posted design or program is very high the management subsystem can review information about individual programmers to determine those developers who have historically performed well on like projects. In addition the management subsystem may be used to analyze overall throughput times necessary to develop operational programs from a specification provided by an external entity. This can assist users of the system in setting the appropriate deliverable dates and costs associated with new projects.

The server also includes a review board subsystem . The review board subsystem allows review board members external entities the facilitator and in some cases developers in the distributed community to review submissions from other developers as described above. In one embodiment the communication server the development posting subsystem the management subsystem the review board subsystem the testing subsystem the scoring subsystem and the methodology database reside on the server . Alternatively these components of the software development environment can reside on other servers or remote devices.

The server additionally includes a testing subsystem . The testing subsystem enables the testing of the submitted programs applications and or components. In one embodiment the testing server is used by the review boards the facilitator and or the external entity to review evaluate screen and test submitted designs and software programs. The testing subsystem can also execute test cases developed and submitted by the developer against some or all of the submitted programs as described above. Moreover the testing subsystem may execute an automated test on the component or application such as to verify and or measure memory usage thread usage machine statistics such as I O usage and processor load. Additionally the testing subsystem can score the component by performance design and or functionality. The testing subsystem can be a test harness for testing multiple programs simultaneously.

The server also includes a scoring subsystem . In one embodiment the scoring subsystem calculates scores for the submissions based on the results from the testing subsystem and in some embodiments ratings for each participant in one or more coding competitions previous development submissions or both. In other embodiments the scoring subsystem can calculate ratings for developers based on their contributions to the project.

The server also includes a methodology database . The methodology database stores data relating to the structured development methodology . In one embodiment the methodology may stipulate specific inputs and outputs that are necessary to transition from one phase of the development project to the next. For example the methodology may dictate that in order to complete the specification phase of the project and being the design phase a checklist of items must be completed. Furthermore the methodology database may store sample documents designs and code examples that can be used as templates for future projects and thus impose a standardized repeatable and predictable process framework on new projects. This standardization reduces the risks associated with embarking on new software development projects shortens the overall duration of new development projects and increases the quality and reliability of the end products.

The server also includes distribution subsystem . The distribution subsystem can track and store data relating to software products e.g. specifications designs developed programs that have been produced using the domain . In one embodiment the distribution subsystem includes descriptive information about the entity that requested the product the entry and exit points of the domain significant dates such as the request date and the delivery date and the names and or nicknames of the developers that participated in the development of the product. The distribution subsystem can also include detailed functional information about the product such as technology used to develop the product supported computing environments as well as others. In some embodiments previously distributed software products may be updated or patched as described above. In such cases the distribution subsystem facilitates the identification of the entity or entities that may have older versions of the product and subsequent communication and distribution of updated versions where applicable. In some cases the distribution subsystem can also function as a source code management system thereby allowing various versions of previously developed software products to branch into distinct software products having a common provenance.

Referring to in one embodiment a first company and a second company purchase license or sponsor the development of a version 1 of a software program component or application. After receiving the program the second company modifies the program shown with modification arrow . A modification is for example an improvement e.g. efficiency increase smaller memory requirements deletion e.g. of an unneeded step or feature and or an addition e.g. of a complimentary feature or function to the program . Another example of a modification is the integration of the program into another program component or application. In response to the modification version 1 of the component becomes for example version 1.1 of the program . In one embodiment the remote update tracking module transmits a message to the server stating that the second company has modified the component . In further embodiments the remote update tracking module then transmits or e.g. queries and transmits the modified version 1.1 to the server as shown with arrow . Upon receipt of version 1.1 of the program the server and or development team members determine whether the modified component can be added to the component storage module by for example performing the steps illustrated in and . In one embodiment when version 1.1 of the program is added to the component storage module version 1.1 replaces version 1 of the program . Alternatively version 1.1 of the component is added as another component in the component storage module . The replacement or addition of version 1.1 of the program may depend on the amount of changes relative to version 1 of the component. Furthermore the update tracking module may notify each customer who previously purchased version 1 of the program i.e. the first company that an updated version 1.1 has been added to the component storage module . Additionally in some embodiments the second company is compensated for licenses sales of copies of the second version of the program . For example compensation for creating a new program can take the form of monetary compensation prizes credits towards future software purchases and or rating points.

The programmers can be paid a fee for their work on the software program. In one embodiment programmers receive a royalty based on their contribution to the software program and the revenue earned from licenses or sales of copies of the program. The server tracks particular characteristics for determining the royalty amounts to be paid to the programmers. In one such embodiment the fee is an advance payment on royalties meaning that royalties are not paid until the advance is covered.

In one embodiment the server tracks a total revenue a programmer contribution a programmer royalty percentage a royalty pool percentage a royalty pool and a royalty for each software program and or for each program. The contribution is for example a predetermined amount based on the fault being fixed. In another embodiment the contribution of a programmer is determined by the amount of time level of skill determined by previous scores contest rating experience or a combination or degree of effort made by the programmer to fix the faulty software. In another embodiment the contribution is determined by the usefulness of the programmers contribution. The expected proportional contribution of programmer to the overall royalties for a particular software program can be a fixed amount e.g. 5 of the total royalties or a scaled amount based for example on the severity of the fault that was fixed. In some cases the entire royalty may be reallocated from the original developer of the software program to the programmer that fixed a fault in the program. In the event that the program is changed upgraded or otherwise modified an adjustment may be made to the development team member s royalty percentage for that modified version to reflect the new contribution division.

Although described above as independent subsystems and modules this is for exemplary purposes only and these subsystems and modules may alternatively be combined into one or more modules or subsystems. Moreover one or more of the subsystems described above may be remotely located from other modules e.g. executing on another server in a server farm .

Although described here with reference to software and useful when implemented with regard to software components the cooperatively developed product can be any sort of tangible or intangible object that embodies intellectual property. As non limiting examples the techniques could be used for computer hardware and electronics designs or other designs such as architecture construction or landscape design. Other non limiting examples for which the techniques could be used include the development of all kinds of written documents and content such as documentation and articles for papers or periodicals whether on line or on paper research papers scripts multimedia content legal documents and more.

