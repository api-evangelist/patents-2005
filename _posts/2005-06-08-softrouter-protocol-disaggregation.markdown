---

title: Softrouter protocol disaggregation
abstract: A SoftRouter architecture deconstructs routers by separating the control entities of a router from its forwarding components, enabling dynamic binding between them. In the SoftRouter architecture, control plane functions are aggregated and implemented on a few smart servers which control forwarding elements that are multiple network hops away. A dynamic binding protocol performs network-wide control plane failovers. Network stability is improved by aggregating and remotely hosting routing protocols, such as OSPF and BGP. This results in faster convergence, lower protocol messages processed, and fewer route changes following a failure. The SoftRouter architecture includes a few smart control entities that manage a large number of forwarding elements to provide greater support for network-wide control. In the SoftRouter architecture, routing protocols operate remotely at a control element and control one or more forwarding elements by downloading the forwarding tables, etc. into the forwarding elements. Intra-domain routing and inter-domain routing are also included.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08068408&OS=08068408&RS=08068408
owner: Alcatel Lucent
number: 08068408
owner_city: Paris
owner_country: FR
publication_date: 20050608
---
The present application claims the benefit of provisional application No. 60 623 885 entitled SoftRouter Router Disaggregation filed Nov. 1 2004. In addition the present application is related to copending applications Ser. No 11 147 642 entitled SoftRouter Ser. No. 11 147 665 entitled SoftRouter Protocol Failovers Ser. No. 11 147 937 entitled SoftRouter Separate Control Network Ser. No. 11 147 768 entitled SoftRouter Feature Server Ser. No. 11 147 491 entitled SoftRouter Dynamic Binding Protocol which were filed on the same date as the present application. Jun. 8 2005. The provisional and related applications are incorporated herein by reference in their entireties.

The present invention relates generally to the field of networking and in particular relates to routing protocols in a deconstructed router network.

The enormous success of the Internet has led to constant development and deployment of new features and services that have increasingly placed its technical foundations under stress. This has given credence to the notion that re architecting the current distribution of functions in an IP network would lead to significant benefits in network stability simplification of network operations and flexibility in introduction of new network protocols and services.

Traditional router architectures are becoming complex. Despite the end to end architecture design principle that aims at a simple core network traditional router architectures have gotten increasingly complex today. As new features are being defined in requests for comments RFCs more and more control plane complexity is being added at the routers. These features include routing e.g. BGP based MPLS VPNs traffic engineering e.g. OSPF TE security and the like. In fact the code complexity of an IP router now rivals that of a telephony switch. In contrast the forwarding path implementation has progressively become easier with rapid advances in large scale hardware integration e.g. ASIC and ready availability of off the shelf chips.

Traditional IP networks are constructed using routers that operate relatively autonomously. The potentially unmanageable complexity is present at many points all over the network. This has many undesirable consequences. First the multiple points of control significantly increase operational complexity e.g. misconfiguration . Second in certain circumstances uncoordinated actions of these autonomous routers can lead to sub optimal performance e.g. poor recovery time at best and network instability in the worst case. Finally the introduction of new features may require upgrades to a large number of routers which is both complex and error prone.

Many advanced network management tasks such as routing policy enforcement and traffic engineering would benefit significantly from the availability of a network wide view. For instance several common BGP induced network stability and operations problems would be solved by moving BGP from individual routers to a single entity with autonomous system AS wide scope. Similarly many management functions require a network wide view without which a network can exhibit oscillation and poor stability. However network wide control is difficult and cumbersome to achieve in today s network of autonomous and complex routers.

Traditional router architectures have integrated control and forwarding. The control processors implementing control plane functions are co located with the line cards that implement forwarding functions and often share the same router backplane. The control processors provide control functions only to the co located line cards and vice versa leading to a scenario where the line cards cannot be managed when there is a failure of the co located controller s .

In the traditional router architectures the underlying theme is the deep intertwining of control and forwarding functions in current routers. There is a need to deconstruct routers to keep most of the network entities as dumb as possible by reducing their function to support only a few canonical packet forwarding functions and migrate all control protocols and non forwarding related state and control processing to a few smart network based control entities with the primary function of network wide control.

Various deficiencies of the prior art are addressed by the present invention of SoftRouter protocol disaggregation which has many embodiments.

One embodiment is a network architecture including a first forwarding element FE set a first control element CE and a first network element NE . The first FE set is a number of FEs. The first CE controls the first FE set and runs one first protocol process on behalf of each FE in the first FE set. The first CE is physically remote from the FEs in the first FE set. The first CE is dynamically bound to each FE in the first FE set. The first NE includes the first CE and the first FE set.

Another embodiment is a network architecture including a number of FEs a number of CEs and a full internal border gateway protocol I BGP mesh among the CEs. Each CE controls a different set of the FEs than the other CEs. The CEs are physically remote from the FEs. Each CE communicates with its controlled FEs using a standard protocol.

Yet another embodiment is a network architecture including core routers a core network connected to the core routers forwarding elements FEs CEs and a point of presence POP Ethernet network. Each CE controls more than one of the FEs. Each CE is dynamically bound to its controlled FEs. Each CE is physically remote from its controlled FEs. Each CE communicates with its controlled FEs via a standard protocol. The POP Ethernet network is connected by the core routers to the core network connected to the CEs and connected to the FEs.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures.

The invention will be primarily described within the general context of an embodiment of an exemplary SoftRouter architecture however those skilled in the art and informed by the teachings herein will realize that the disaggregation concept may be used to generate various other embodiments of network architectures and that the invention is applicable to local area networks LANs metropolitan area networks MANs wide area networks WANs and other networks many open systems interconnection OSI layers gateway protocols serial line protocols protocol stack routing and bridging protocols many other protocols traffic management optical edge core routing wireless cable data centers auxiliary signal path ASP fault management configuration management accounting management performance management security management other network management enterprise government military applications and many other different kinds of networking characteristics and applications.

Disaggregation of router hardware from router software using open standards based protocols for internetworking has many benefits. The disaggregation concept decouples suppliers for each component which lowers barriers to entry for hardware vendors and encourages independent software vendors ISVs to invest in developing carrier class routing software to supply new hardware market entrants. This disaggregation concept allows each component to focus on its own innovation curve. Hardware manufacturers can focus on the highest speeds per density at the lowest costs decreasing capital expenditures and software manufacturers can focus on new applications and manageability increasing revenue while decreasing operating expenses.

An embodiment of an exemplary SoftRouter architecture deconstructs routers by separating the implementation of control plane functions from packet forwarding functions. Other embodiments of network architectures that achieve this deconstruction are also within the scope of this invention. The present invention encompasses the concept of this deconstruction and its implications for network architecture. In the exemplary SoftRouter architecture all control plane functions are implemented on separate control entities that are not required to be co located with the forwarding engines. By migrating all non forwarding related state and control processing to a few network based control entities simpler implementation of network wide objectives are possible because coordinated configuration changes are required at only a few smart network elements instead of all the network elements in an AS. In addition the association between controllers and the forwarding engines is dynamic allowing flexible control of a forwarding engine by any control entity that is capable of doing so.

The exemplary SoftRouter architecture includes a dynamic binding protocol for establishing and maintaining dynamic bindings between forwarding entities and the control entities in the network. Intra domain and inter domain routing is adapted in the exemplary SoftRouter architecture with improved performance including improved performance for the intra domain protocol OSPF.

Disaggregation of router hardware from router software using open standards based protocols for internetworking has many benefits. The disaggregation concept decouples suppliers for each component which lowers barriers to entry for hardware vendors and encourages independent software vendors ISVs to invest in developing carrier class routing software to supply new hardware market entrants. This disaggregation concept allows each component to focus on its own innovation curve. Hardware manufacturers can focus on the highest speeds per density at the lowest costs decreasing capital expenditures and software manufacturers can focus on new applications and manageability increasing revenue while decreasing operating expenses.

An exemplary embodiment of an exemplary SoftRouter architecture is an approach to disaggregating the complex IP functions demanded by emerging applications. SoftRouter centralizes and allows sharing of complexity. SoftRouter enables scalable introduction of new functions without unduly encumbering IP forwarding functions.

By contrast shows a high level abstraction of an exemplary SoftRouter architecture that disaggregates the control and transport planes in separate hardware that communicate using standard protocols. The SoftRouter architecture has a control element and features server component and a packet forwarding element component that communicate using a standards based protocol .

Deconstructing routers in the exemplary SoftRouter architecture separates the control and forwarding functions. This separation is more than logical e.g. the use of a well defined interface with a modular application programming interface API in fact the control is physically separated i.e. executed in a distinct network element by multiple hops from where the forwarding is performed.

A FE is a network element that performs the actual forwarding and switching of traffic. In construction a FE is similar to a traditional router in that it may have multiple line cards each in turn terminating multiple ports and a switch fabric for shuttling data traffic from one line card to another. However a FE is different from a traditional router because there is an absence of any sophisticated control logic e.g. a routing process like OSPF or BGP running locally. Instead the control logic is hosted remotely.

A CE is a general purpose computing element such as a server. It connects to the network like an end host except that it is typically multi homed to the network via multiple FEs so that it is not disconnected from the network when a single link fails. A CE runs the control logic on behalf of FEs and hence controls them. Any control logic typically found on a traditional router can be migrated to the CEs including routing protocols like OSPF and BGP as well as protocols such as resource reservation protocol RSVP label distribution protocol LDP Mobile IP and the like.

An FE functions to forward data traffic between its links. This function may take various forms such as packet forwarding label switching and optical switching among others. Packet forwarding includes both layer medium access control MAC based switching and layer longest prefix match forwarding. Label switching includes for example MPLS forwarding. The data path forwarding functions can include label swapping pushing and popping. In optical switching the traffic can be time switched wavelength switched or space switched among the links. In each of these cases the switching function is driven by a simple local table that is computed and installed by a CE in the network. Thus the ability of a FE to do its work based only on a local data structure means the FE is designed to be dumb and fast while the more complex logic is relegated to a remote yet smart CE .

Both FEs and CEs are understood as logical entities in addition to physical network elements. Specifically a FE is logically defined as a collection of ports where traffic can be switched among one another. For example a FE may include all ports on a single line card in which case the whole physical packet switch is made up of multiple logical FEs . An FE can also span more than one physical switch however a CE can control multiple FEs. Similarly a CE can be understood as a logical process instantiated for providing control on behalf of FEs and can be distinguished from the server machine that actually executes it. In particular a physical CE server machine PCE can host multiple CE processes each serving a different collection of FEs . Vice versa it is also possible for multiple CE processes each instantiated for a different control purpose such as interior gateway protocol IGP and exterior gateway protocol EGP serving the same FE to be hosted on distinct PCEs. The physical and logical definitions of FEs and CEs are used interchangeably.

Without additional restrictions the above definition of NE allows flexibility. For example this definition allows two FEs in disjoint parts of a network to belong to the same NE . It also allows for a traditional router model where the FE includes exactly all the ports in the physical element and the controlling CE s are collocated on the same element.

In clustered routing the FEs making up a NE are part of a contiguous cloud. In other words all ports of the NE are reachable from each other via links internal to the NE . Physically this represents the clustering of neighboring physical FEs into a single NE . A typical scenario is that of several routers being connected back to back in a central office. From a routing perspective this clustering based definition of the NE can provide significant simplification. The reduced number of NEs in the routing view reduces the inter NE routing complexity and a different possibly less complex routing protocol can be employed for intra NE routing.

The control relationship between an FE and a CE is formally called a binding. More precisely a binding between a FE and a CE means that the CE is performing particular control functions on behalf of the FE . Because multiple protocols e.g. IGP and EGP or even multiple instances of a protocol may be required for the operation of a FE a FE may have multiple CE bindings.

The exemplary SoftRouter architecture includes various protocols. A number of different protocols are used for the operation of a network designed according to the exemplary SoftRouter architecture including dynamic binding protocol and FE CE transport protocol. The binding between a FE and a CE is established via a protocol that discovers CEs and FEs and also maintains these bindings in the face of network disruptions. In the most general case of the dynamic binding protocol an FE can bind to any available CE and a CE can perform control functions for any FE thus yielding maximal resiliency and minimal configuration overhead. This dynamic binding ability is a feature of the concept of deconstructed routers that have separate control and forwarding functions. The FE CE transport protocol has two parts namely data and control. For the data part the FE CE transport protocol supports tunneling of routing protocol packets between FEs and CEs so that a routing protocol packet received by an FE can be sent to a CE for processing. For the control part once a binding is established the FEs and the CEs use the FE CE transport protocol to communicate state information and perform control. On the uplink FE to CE direction this control part provides link and forwarding state information e.g. link up down signal to the CE . On the downlink direction the FE CE transport protocol carries configuration and control information e.g. enable disable a link forwarding information base FIB . Known protocols such as forwarding and control element separation ForCES may be used for the FE CE transport protocol.

The exemplary SoftRouter architecture includes two features dynamic binding and varying degree of distributed control. In the exemplary SoftRouter architecture a FE can dynamically bind to any CE on the network at any time and vice versa. This provides an increased degree of freedom in the design and deployment of the control plane that in turn leads to improvement in resiliency operational complexity scalability management and security. In contrast the static bindings in the traditional model make it less reliable and less flexible with respect to redesigning the Internet control plane. Distributed control provides benefits such as resiliency but can also lead to certain network instabilities. For example the use of route reflectors in BGP can have oscillation problems and flooding based link state protocols such as OSPF can cause update storms due to multiple failures. The exemplary SoftRouter architecture allows a varying degree of distributed control. Specifically embodiments of the exemplary SoftRouter architecture implement different degrees of distributed control by varying how FEs are clustered and how control is aggregated on the CEs . Fewer control points mean higher vulnerability to failure conditions such as network partitioning but potentially better network stability. Both traditional fully distributed routing and completely centralized routing are merely two extreme implementations of many possible embodiments of the exemplary SoftRouter architecture.

The dynamic binding feature of the exemplary SoftRouter architecture allows for a FE to be separated by multiple hops from a CE . This flexibility comes at the expense of increased complexity in the initial configuration of the forwarding elements. In the SoftRouter model upon bootup the FE obtains its configuration information including the IP addresses of its interfaces from a remote CE that resides on a server. This poses a potential paradox in order to discover a CE and send packets to it the FE requires routing information however the routing information is supposed to come from the CE . This paradox is resolved using a discovery protocol that is part of the exemplary SoftRouter architecture. This discovery protocol lets FEs and CEs discover each other and maintain a routable path between these entities which is not based on IP routing. The dynamic binding process also supports enhanced features such as CE load balancing constrained clustering algorithms that improve CE FE binding resiliency and failover increasing the availability for the network. These features also enable better network planning and better network wide control.

Embodiments of the dynamic binding protocol provide binding service for FEs and routing services for FE CE messages. The dynamic binding protocol runs continuously on all the elements FEs and CEs for the lifetime of the network as a separate protocol independent of other protocols that operate in the network. At the minimum each FE and CE has a pre configured octet string FEID CEID that acts as a unique identifier. The dynamic binding protocol is transport independent and may operate on layer or layer networks. For example it may run in an Ethernet network or FEs and CE using layer bridging with the rapid spanning tree protocol for loop avoidance. In heterogeneous networks the discovery protocol may use layer addressing with source routing or bridging. The dynamic binding protocol has four components discovery association failure detection with failover and transport tunnels.

The discovery component of the dynamic binding protocol enables a FE to discover a CE that can manage it. This CE is called the managing CE for that FE . In order for the discovery component to provide rapid discovery for the configuration process CE reachability information is distributed to each FE . A newly booted FE just queries its neighbors to obtain the reachability information to all CEs in the network. To distribute CE reachability information FEs periodically broadcast solicitation messages to their neighbors. If a neighbor is a CE it responds by advertising its identity. If a neighbor is a FE it responds with the reachability information to all already learned CEs . For source routing the reachability information includes besides CE identities the source routes to reach the CEs and a time to live parameter indicating the freshness of the information.

For source routing FEs need to know their neighbors. On reception of a CE advertisement or a FE reachability message from a neighbor the FE adds the neighbor FEID or CEID to the received source routes. CEs derive source routes to FEs by reversing the source route in received packets. FEs always initiate the very first packet exchange with CEs . Neighbors advertise themselves by periodically sending hello messages on all discovery protocol enabled interfaces. Each node FE CE thus maintains a list of neighbors when hello messages are not any longer received.

For a discovery process using IP addressing at the time of bootup each FE uses a randomly chosen temporary IP addresses for its interfaces along with the FEID to perform pre configuration source routing. These IP addresses are chosen from a controlled address space for example a private subnet address pool like 10.x.x.x. The CEs are pre configured and hence have a valid IP addresses. All messages use IP limited broadcasts or multicasts to allow packet exchange between IP addresses of different subnets which is common in the transitional phase of peering unconfigured FEs and configured FEs or CEs . IP addressing is only used to exchange packets with direct neighbors. Therefore temporary IP addresses have only to be unique on a per link basis.

Each FE is assigned one primary CE and at least one backup CE by the network administrator during network planning. This information is configured in the CEs and optionally in the FEs . Typically this assignment is made a priori by taking into account factors such as the load on the CE the distance between the CE and the FE and the reliability of the links between them.

The association process strives to establish and maintain an active association between an FE and its primary CE and backup CEs. The managing CE is chosen by the FE from the list of associated CEs with the primary CE preferred at all times to other CEs . FEs dynamically associate with the best CE using bindings that are either pre configured by the network administrator or obtained using distributed clustering algorithms. A FE associates with a CE by sending an association message. The CE accepts the FE if it can manage it or rejects it. If known to the CE the rejection may optionally contain the IDs of primary CEs and backup CEs for the FE . If not accepted the FE either proceeds to contact its primary CE or backup CE or continues to search for them by contacting other CEs .

The dynamic binding protocol has mechanisms to detect and repair CE failures. Once an association is made between the FE and a CE the liveness of the association is probed periodically through heartbeat messages initiated by the FE . When heartbeat messages do not elicit any responses from the CE it implies that either the path to the CE is no longer valid or that the CE node is no longer alive. A FE then fails over to one of its backup CEs by sending an activate message. The backup CE acknowledges the activate message and is then the managing CE. A CE cannot dis associate from a CE without acknowledgement from the FE accepting the change. This is also true for a FE desiring to change its managing CE so long as the current managing CE is still alive.

The dynamic binding protocol sets up a rudimentary transport tunnel between a FE and its associated CEs called the slow path i.e. a source routed or bridged path that is not necessarily the shortest path and allows higher layer protocols e.g. OSPF CE FE communication when all other communication means fail. These tunnels are unreliable and do not guarantee in sequence delivery. These slow path tunnels are used only rarely when there are no valid routing tables installed on the FEs for example when the FE is being initialized or when the FE is switching to a different managing CE.

The combination of these four components helps the dynamic binding protocol to actively discover and maintain dynamic bindings between FEs and CEs in the network.

The dynamic binding protocol allows for dynamic binding between a CE and a FE that are separated by multiple hops. This gives the FE and the CE a wide array of choices in determining their managing CE and the managed FE set respectively. Various design choices may be made depending on whether there is any benefit in imposing a structure to these choices and if so the criteria that are to be used. Regulating these choices enables deterministic behavior in the network greater control in the hands of the network administrator and better planning of the network. Given these benefits the following criteria are used to allot an FE to be managed by a given CE the load on a given CE in terms of the number of FEs managed the average distance in hops between an FE and its managing CE and how failover can be performed quickly without adversely affecting the load on a CE . These criteria are addressed in the context of the network planning where the designer selects the locations where a given number of CEs are located.

To design an embodiment of the exemplary SoftRouter architecture it is desirable to place k CEs in a network of FEs such that 1 the load is balanced across the k CEs and 2 the mean distance between each FE and its associated CE is minimized. An initial assumption is that there are no restrictions on where to place the k CEs and that the FEs can be assigned to be managed by any CE. The load of FEs across the set of primary CEs is balanced while simultaneously minimizing the mean distance between an FE and its primary CE. Links may have different delay or failover characteristics and the locations of the CEs are chosen. It is desirable not to have any CE server overloaded as far as possible. It is also desirable to minimize the average distance between a FE and its primary CE in order to reduce the communication latency which allows routing protocols executing on the CE to be notified of failures quickly. In addition if the FE is closer to its primary CE the discovery process converges faster. Thus if all CEs are equally capable then a division of the FE network into clusters of nearly equal sizes will achieve these dual goals of load balancing and minimizing average distance between the managing CE and the FE .

In this k way equipartition problem the goal is to divide a graph into clusters of equal sizes while minimizing the weights of the edges within each cluster. This optimization problem is known to be NP complete. There are near optimal solutions to this problem based on realizations that complete in polynomial time but without strict bounds on the approximations. In recursive graph bisection a k way split is obtained by recursively partitioning the graph into two subgraphs where one of the subgraphs is set to be of size n k . Recursive graph bisection works reasonably well when the network is well connected.

CE failover occurs when the association between the FE and its managing CE times out. This can happen either because the managing CE is down or if an FE is unable to discover a valid path to the managing CE to exchange heartbeats. CE failover is then performed with the FE switching to another associated CE if any. The new CE then becomes the new managing CE.

Failover needs to occur with minimal delay. Hence it is determined which CEs are designated as backup CEs for a given FE . An FE can have more than one backup CE with an order of preference among them. In an embodiment of the exemplary SoftRouter architecture the criteria for selecting backup CEs include a minimal failover time.

The backup CEs are chosen such that each backup CE has the least mount of path overlap with the previous backup CE and the primary CE. The path from the primary CE to the FE preferably has minimal overlap with the path from the FE to the chosen backup CE. Similarly the second backup CE is chosen such that its path to the FE has the least overlap with the shortest paths from the FE to both the primary CE and the first backup CE. A goal is to ensure that connectivity is maintained even in the presence of multiple link or CE FE failures.

A FE that is using a backup CE always tries to re associate with its primary CE and switch to it when conditions permit. This ensures that the load on all CEs remains fairly equal as decided by the load balancing algorithm.

Primary CEs i.e. CE CE CE are hosted on PCE and control FE FE FE and FE respectively. The corresponding backup CEs i.e. CE CE CE are hosted on PCE . Primary CEs i.e. CE CE CE are hoisted on PCE and control FEs FE FE FE FE and FE respectively. The corresponding backup CEs i.e. CE CE CE are hosted on PCE .

The testbed topology accommodates three types of NEs 1 CE and FEs of a NE with at least one direct link i.e. NE NE NE 2 CE and FEs of an NE separated by more than one hop between the CE and the FE NE NE NE .

Three experiments were designed to evaluate the dynamic binding protocol behavior of the prototype. Experiment one determines for the case of a network wide boot the duration until all CE information is propagated throughout the network. Experiment two measures the source route convergence time for the case of a link and node failure. Experiment three measures the failover time to the backup CE when the managing CE fails. Network events are time stamped locally on the FEs and transmitted to the network monitor PC not shown . All FEs are time synchronized via network time protocol NTP to correlate network events. For each experiment three measurements were taken and averaged. All measured times are in seconds.

In experiment one the dynamic binding protocol was initiated on all CEs and FEs simultaneously. The CE propagation duration is the time taken for the last FE to learn about all CEs and is shown in Table 1.

The results show that the CE information seeded on PCE and PCE eventually reach all the FEs propagating in two overlapping waves. FE FE and FE are the first nodes where both waves intersect thus making these nodes the first nodes to be aware of all the CEs in the network.

Experiment two studies the impact of link and node failures on the convergence time of the dynamic binding protocol. The link FE FE was first disconnected and reconnected. Upon disconnection FE discovered the link failure and adjusted its source routes with information propagated by FE. This information was then passed on to FE . After reconnection FE received shorter route information to CEs on PCE from FE and propagated it to FE . Table 2 shows the source route convergence times.

For node failure the node FE is stopped. Upon node failure FE and FE discover first that FE is down. They remove all source routes involving FE and stop propagating such information. Their neighbors discover the invalid routes in the next propagation cycle and remove them from their source route tables. In parallel the longer alternative routes to primary CEs and backup CEs on PCE and PCE are selected. FE FE and FE are the last nodes converging because they learn about new routes to their backup CEs only through information seeded by FE . A similar pattern is observed when node FE is restarted with nodes FE FE and FE converging first followed by FE FE and FE that are two and three hops away from FE . The convergence times indicate the time taken to learn about all of the CEs in the network.

In experiment three for the failover scenario the CE process is terminated which causes a heartbeat timeout on FE FE and FE. Each FE detects the timeout independently and switches to CE. The average time between the timeout and backup CE activation is 0.8 s for FE 1 s for FE and 1.1 s for FE.

While the dynamic binding is taking place in the background upon link or CE FE failures forwarding still takes place in the network based on FIBs installed by the corresponding managing CEs. When fault detection by higher layer routing protocols such as OSPF is not instantaneous the convergence times achieved by the dynamic binding protocol are smaller than the convergence times of higher layer routing protocols. Thus the dynamic binding protocol does not have a detrimental effect on the rest of the network routing behavior in most cases.

Various embodiments of the present invention address the following technical challenges protocol aggregation high reliability and the bootstrapping paradox. There are methods for how protocols like OSPF BGP operate when a single protocol instantiation at the CE server manages multiple FEs how to decide where the CE servers should be placed and how to determine which CE servers manage which FEs. The bootstrapping paradox is also a kind of chicken and egg problem in that the FE needs updated forwarding tables in order to route packets to its CE server but only the CE server can update the forwarding tables.

Routing protocols operate in the deconstructed router network such as an embodiment of the exemplary SoftRouter architecture. Routing protocols operate remotely at the CE and control one or more FEs by downloading the forwarding tables and other information onto the FEs . The exemplary SoftRouter architecture includes both intra domain routing and inter domain routing protocol realization.

Intra domain routing protocols such as OSPF are migrated to the exemplary SoftRouter architecture. OSPF is a link state protocol that enables each router executing it to maintain an identical link state database describing the topology of the entire network by reliably flooding link state advertisements LSAs to its neighbors. highlight the differences between OSPF protocol execution in the traditional router architecture and the exemplary SoftRouter architecture.

The OSPF instance manages multiple FEs and computes routes for the entire network. An issue arises in allowing one OSPF instance to manage multiple FEs and that is managing the internal links i.e. links connecting the FEs that are managed by a single OSPF instance . The internal links are shown in with double lines. Embodiments of the exemplary SoftRouter architecture include three approaches for managing internal links 1 advertising internal links and weights to other OSPF neighbors 2 configuring each NE as an OSPF area resulting in summary advertisements for internal links or 3 using a separate internal link routing protocol resulting in no advertisements for internal links.

The first approach is the closest approximation to the traditional distributed OSPF implementation one OSPF instance per FE in that routes computed are identical to the routes computed using the traditional distributed OSPF. In other words internal links are treated as identical to the external links. In this first approach there are still fewer OSPF protocol messages exchanged in the network because there are fewer OSPF processes as compared to the traditional architecture resulting in lower message processing overhead.

The second approach tries to match the natural hierarchy inherent in the configuration of OSPF areas to the hierarchy presenting the definition of an NE in the exemplary SoftRouter architecture. In this second approach each NE is defined as an OSPF area and there is a single OSPF process per area. This results in advertisements of internal links to other OSPF processes in the form of summary advertisements. This second approach results in fewer perturbations in the form of route changes in the entire network due to internal link failures oscillations. However this second approach sacrifices the optimal routing present in the current architecture because routing is not guaranteed to be optimal across OSPF areas. This assumes that there were no OSPF areas configured in the original deployment.

The third approach is the most aggressive optimization among the three approaches. In the third approach the traditional behavior of maintaining strict boundaries between internal link and external link definitions is retained and internal links are not advertised to OSPF neighbors for example internal links may be the backplane switch fabric in a chassis or very high speed links connecting the FEs . In a sense the third approach closely mimics the strategies employed in building NEs . Among the three approaches the third approach results in the fewest messages exchanged the fewest route changes due to failures and the fastest convergence times. However optimal routing is achieved only if the internal links truly have zero cost as is assumed for the backplane switch fabric in a traditional router.

Finally common to all three approaches is the issue of how OSPF protocol messages are exchanged between the different OSPF protocol instantiations in the exemplary SoftRouter architecture. There are at least two possibilities either OSPF protocol messages are tunneled from the CE to the FEs so that it appears to all neighbors as though the FE is originating the OSPF protocol messages or OSPF protocol messages are directly exchanged between the CEs themselves. The former option allows for inter operability of NEs with traditional routers while the latter option is more efficient as it eliminates duplicate message exchanges i.e. when two NEs are connected by multiple links between two CEs .

Of the three approaches discussed above the preferred approach is approach three which has the most aggressive optimization. Further in order to inter operate with traditional routers a strategy is employed for tunneling protocol messages from the CEs to the FEs and then sending them as normal OSPF messages to the FE neighbors. In other words all control protocol and management messages between the CE and FE are tunneled using a FE CE transport protocol.

The testbed setup for executing and conducting experiments on the OSPF protocol is the same as shown in . OSPF is started only after the dynamic binding protocol has converged and the initial CE FE bindings have taken place. As discussed above one OSPF instance is executed per CE which can control one or more FEs . For example CE in is responsible for controlling FE FE and FE and forming a single entity NE while CE and CE are responsible for controlling FE and FE respectively. From OSPF s perspective each CE is seen as a node in the network and OSPF adjacencies are established based on the underlying physical FE adjacencies.

Once the OSPF adjacencies have been established and all nodes in the network have converged their link state databases OSPF runs Dijkstra s shortest path first SPF algorithm to determine the routing table. The routing information is injected into the routing table manager RTM that aggregates route information from all other routing protocols e.g. BGP static and selects the best possible route for a given destination that needs to be downloaded to the FIB. Because the forwarding engines in the exemplary SoftRouter architecture are located on remote devices the route entry information is carried from CE to FE using the FE CE transport protocol on a route update message. The FE receives the message downloads the information to its forwarding engine and responds back to the CE about the success of the update. In the case of a failure to update the routes the CE retries sending this update message again to the FE .

Experiments were conducted on the testbed shown in . The performance of the OSPF routing protocol in the exemplary SoftRouter architecture is evaluated and the compared to that in the traditional architecture. All results were calculated by averaging the values from ten experimental runs. Three metrics were evaluated 1 network convergence time 2 protocol message count and 3 route change count. Network convergence times is defined as the tie taken since an event change is detected until all routers in the network have reached steady state with updated routing table entries. The event could be link or node failure or recovery. A lower convergence time indicates a robust network as the network quickly reaches stability after being subjected to change. Event detection is not included as part of this metric as detection time is common in both architectures and can be optimized by known methods. Protocol message count is defined as the number of OSPF protocol messages processed by the routers in the network following a failure event until the network reaches stability. This is a measure of the spike in processing load as a result of failure. A high message count in a short period of time can result in congestion leading to dropped packets timeouts in the protocol state machine and network instability. Route change count is defined as the number of routes changed in the routers in the network following a failure event until the network reaches stability. Again a large number of route changes in a short period of time can negatively impact network stability.

In order to compare the different performance metrics between the traditional router architecture and the exemplary SoftRouter architecture two cases are evaluated failure and subsequent recovery for 1 single link and 2 single node multiple links . In the experiments the link between FEand FEwas used for the single link failure scenario and node FEwas used for the single node failure scenario. The same core OSPF implementation and default configuration values were used for comparing the traditional architecture to the exemplary SoftRouter architecture. The SPF hold timer and SPF delay timers play a role in determining the OSPF convergence time which is time between failure recovery to steady state. In the exemplary SoftRouter architecture case the SPF hold time i.e. the time to wait between consecutive SPF runs is set to the default value of 10 seconds and the SPF delay time i.e. the time to wait before running SPF after receiving a database change even is set to 5 seconds. These timers guarded against routing instability by preventing too frequent SPF calculations.

The average OSPF convergence time after failure recovery to steady state for the experiments conducted is given in Table 3 below for the traditional architecture and the exemplary SoftRouter architecture. As shown in the table the results for the exemplary SoftRouter architecture are slightly better than the results for the traditional approach. While the exemplary SoftRouter architecture is generally expected to be better because the total number of OSPF adjacencies in the exemplary SoftRouter architecture are fewer than in the traditional architecture due to the ability of the exemplary SoftRouter architecture to aggregate multiple devices to behave as a single NE the difference is small because the convergence time is dominated by the various OSPF timers involved in link state database synchronization and also due to the fact that the total reduction in the number of elements is not very large i.e. only from 11 nodes to 8 nodes .

The results of the other two performance metrics were compared between the exemplary SoftRouter architecture and the traditional architecture. The total number of OSPF messages was compared to the total number of route updates changes. When a link or a node fails or recovers or comes up new OSPF triggers link update messages that are flooded throughout the network. Once the link state databases on all nodes synchronize and reach steady state Dijkstra s SPF algorithm is used to calculate the shortest path for each destination and routes are accordingly updated. Table 4 presents the results for the traditional architecture TR and the exemplary SoftRouter architecture SR . Table 4 shows that in both metrics the exemplary SoftRouter architecture comes out ahead. Again this is because of the lower number of total nodes and the corresponding adjacencies in the exemplary SoftRouter architecture. Thus not only did OSPF converge faster it also flooded fewer messages in the exemplary SoftRouter architecture and caused fewer route changes.

The impact of failures on these metrics for larger topologies was studied in simulations. A simulator was used to evaluate the optimizations possible in the exemplary SoftRouter architecture. The simulator executed copies of the real software program ospfd for each router in the simulated network thus allowing a high fidelity evaluation using an OSPF implementation that was optimized for the traditional architecture. This simulator was extended in order to evaluate OSPF performance in the exemplary SoftRouter architecture as follows. The forwarding and control planes were separated. The software program was remotely executed on the CE . The notion of multiple routers FEs was introduced in the software program. The notion of external and internal links was also introduced in the software program. A single link state database was maintained was in done in the software program but modified to allow for unique routing tables for each FE derived by running Dijkstra s SPF algorithm from the perspective of each FE . OSPF approaches one and three were simulated to illustrate the range of performance gains in the exemplary SoftRouter architecture as compared to the traditional architecture.

In the evaluation an N node ring and full mesh topologies were considered as well as a typical ISP pop level topology 20 node 44 link Tier 1 ISP topology see . Link propagation delay was set to 10 milliseconds for all links. The three performance metrics were evaluated when these topologies were subjected to changes such as link or node failure recovery.

Results for the convergence time metric after a single link failure were obtained. The SPF delay timer which determines how often SPF calculations are executed was set to one second. The performance of the traditional router architecture TR was compared with one OSPF process per node to the performance of OSPF optimization approach one in the exemplary SoftRouter architecture SR . In approach one both TR and SR resulted in the same number of routing changes and identical routing tables after convergence. A case of one CE and two CEs managing the entire network was considered. Every CE is at most N 10 hops away from all the FEs that it controls. Sensitivity analysis was also performed on this condition. The case of one CE managing the entire network implies that no OSPF protocol message exchanges take place. The CE when notified of the link failure event simply performed all pairs SPF calculations for all FEs and downloaded the updated FIB entries to the FEs . While having one CE for the entire network may not be scalable for large networks it can be very efficient for small to medium sized networks. Further even though there is one logical CE the CE can be implemented on a rugged multi blade rack server with hot failovers and high link connectivity resulting in high availability.

The worst case convergence time in the exemplary SoftRouter architecture corresponded to the case where the CE is N 2 hops away from its FE N 2 is the network diameter for rings . In this case convergence time in the exemplary SoftRouter architecture and the traditional router architecture were almost the same the lines are overlapping in . This is because the worst case propagation delay network diameter in the traditional router architecture is the same as the worst case propagation delay CE FE distance in the exemplary SoftRouter architecture.

Thus convergence time after link failure was dominated by propagation delay if the SPFdelay timer was made arbitrarily small. However because the SPFdelay timer guards against network instabilities a very small value for the SPFdelay timer is much more likely to cause network instabilities in the traditional router architecture with 100 OSPF processes then in the exemplary SoftRouter architecture with 1 3 OSPF processes.

A set of experiments were performed using the 20 node ring mesh and ISP topologies to determine the number of OSPF messages and route changes that occur following a change in the network. In the case of the exemplary SoftRouter architecture having one CE manage the entire network would be optimal in terms of messaging overhead as there would be zero protocol messages exchanged. If the network is geographically dispersed as discussed above two or three CEs managing the network would reduce the propagation latency between the FEs and the CEs resulting in faster convergence. Thus conservative results for the case of three CEs managing the exemplary SoftRouter architecture are presented.

The traditional distributed OSPF implementation TR was simulated and approaches one and three in the exemplary SoftRouter architecture are identified as SR and SR. SR advertises all internal links and thus does not reduce the number of route changes as compared to TR however SR does significantly reduce the number of OSPF messages exchanged as there are fewer OSPF instances in the network. SR further optimizes SR by not advertising internal links thus resulting in fewer route changes than SR.

Table 6 shows the results. First it was observed that as the network average node degree increased the number of OSPF messages and route change following a change event increased. Thus mesh topologies exhibited the highest number of message count and route changes followed by the ISP topology and finally the ring topology.

Second it was observed that SR provides a large reduction in total OSPF messages processed in the network as compared to TR and in the case of ring and ISP topologies a significant reduction in maximum OSPF messages processed by a single CE . The percentage gains in message reduction were highest for ring topologies and lowest for mesh topologies. This was because ring mesh topologies have the lowest highest number of external links and SR established adjacencies on every external link. SR could be further optimized by not establishing adjacencies on parallel external links between two NEs resulting in further reduction in messages exchanged.

Third it was observed that SR did not provide any reductions with regards to the route change metric as compared to TR because SR advertises all links in order to achieve identical routing performance as TR. SR was able to significantly reduce the number of route changes as compared to TR SR because it did not advertise internal links. If internal inks were high bandwidth links connecting FEs that were close to each other internal links could be considered as zero cost links and thus SR would be suitable for such a network. Again as before the percentage reduction in total route changes in the network reduced as the percentage of external links increased from ring to mesh topologies.

Finally the results for the ISP topology were considered. SR was able to reduce the total number of messages processed following a node failure from 553 to 22 and maximum number of messages processed by any node from 64 to 10 an 84 reduction . In traditional router architecture every node in the ISP topology must be able to process the maximum message count in a short amount of time following failures. In contrast CEs in the exemplary SoftRouter architecture are servers with the fastest processors and process fewer messages than traditional router architectures with slower control processors. Further with SR the number of route changes in the network was also reduced from 1095 to 409. Thus the exemplary SoftRouter architecture using approach SR SR is better equipped to handle overload scenarios as a result of network failures resulting in better network stability.

OSPF convergence following failures is quite efficient in current distributed network due to its reliable flooding mechanism. A dominant portion of convergence time in current networks is due to the SPFdelay timer. While default SPFdelay timer values of 5 seconds are necessary to reduce network instabilities in current networks with hundred of OSPF processes OSPF optimization in the exemplary SoftRouter architecture helps drive down convergence times to about 10 ms or less by being aggressive with SPFdelay timer setting because only two or three OSPF processes are necessary to manage the entire network. Finally the latency between CE and FE in the exemplary SoftRouter architecture plays a role in convergence time and thus careful planning as discussed above helps in placing CEs close to their FEs .

OSPF optimization in the exemplary SoftRouter architecture has a more dramatic impact in reduction of overload due to message processing and route changes as compared to current networks. By allowing fewer OSPF processes to manage all the routers in the network the message count can be reduced by up to about 80 even for the case of three CEs managing the network. Message count reduction would be 100 for the one CE case. Further if internal links of an NE are not advertised in OSPF messages the number of route changes can also be significantly reduced. Thus network stability as measured by convergence time message count and route changes can be significantly improved in embodiments of the exemplary SoftRouter architecture by having fewer CEs manage all the FEs in the network.

Inter domain routing protocols specifically BGP are deployed in the exemplary SoftRouter architecture resulting in many benefits.

Exemplary embodiments of the SoftRouter architecture overcome many technical challenges such as protocol aggregation network design and the bootstrapping paradox. It was determined how protocols like OSPF BGP operate when a single protocol instantiation at a CE manages multiple FEs . For OSPF preliminary results indicate about a 50 ms failure recovery time is feasible when an exemplary SoftRouter network is managed by one or two primary CE OSPF processes and the propagation delay from a CE to its FEs is small. For BGP a full BGP mesh can be maintained among a few CEs eliminating the network instability that is possible under the route reflector architecture. It was determined how to place CEs in a network design and which CEs should manage which FEs . An exemplary method based on recursive graph bisection identifies where to place CEs and which set of FEs each CE should manage. The bootstrapping paradox i.e. the FE needs updated forwarding tables in order to route packets to its CE but only the CE can update the forwarding tables was solved by an exemplary discovery protocol to break the circularity. This protocol allows each FE to bind to its CE and provides simple routing capability between them.

One exemplary application of the exemplary SoftRouter architecture is adding differentiating features to Ethernet. Metro Ethernet deployments are expanding rapidly. Virtual path links VPLs are a key feature in wide area deployment but it is a departure from pure Ethernet switching. There is a need for MPLS forwarding hardware and an IP control plane. New chips integrate forwarding support. The control plane needs for VPLs include Ethernet switches to run complex software. An embodiment of the exemplary SoftRouter architecture includes CEs that simplify networks by not requiring complex IP software on every Ethernet switch. Enabling customized path computation allows CEs with differentiating features.

Another exemplary application of the exemplary SoftRouter architecture is consolidating routing in a POP. The overall costs for a POP can be significantly reduced using the SoftRouter architecture because it uses commodity hardware rather than specialized hardware standards based FEs by multiple vendors and has pricing power similar to Ethernet versus router interfaces. Open source based routing software leverages development distributed among a large community of contributors. There are fewer controllers needed. A POP with 15 routers has 30 controllers 1 1 redundancy today while a SoftRouter network only requires about two to four CEs .

In summary router networks are becoming increasingly complex. Emerging applications and performance requirements are driving more functions to IP. Incorporating too many IP functions in routers results in duplication of complex functions in multiple routers of a network. Disaggregation of router hardware from software in an exemplary SoftRouter architecture addresses this problem and has the potential for major additional advantages. In an exemplary SoftRouter architecture router control and transport planes are disaggregated so that the transport plane includes packet forwarding elements and the control plane includes control element servers and feature servers. The control plane and transport plane communicate using standard protocols. Some benefits of this concept include the centralization of complex functions lower costs faster and less expensive introduction of new applications resulting from open APIs and incremental deployment and increased scalability reliability and security among other benefits.

The processor cooperates with conventional support circuitry such as power supplies clock circuits cache memory and the like as well as circuits that assist in executing the software routines stored in the memory . As such it is contemplated that some of the steps discussed herein as software methods may be implemented within hardware for example as circuitry that cooperates with the processor to perform various method steps. The computer also contains input output I O circuitry that forms an interface between the various functional elements communicating with the computer .

Although the computer is depicted as a general purpose computer that is programmed to perform various functions in accordance with the present invention the invention can be implemented in hardware as for example an application specific integrated circuit ASIC or field programmable gate array FPGA . As such the process steps described herein are intended to be broadly interpreted as being equivalently performed by software hardware or a combination thereof.

The present invention may be implemented as a computer program product wherein computer instructions when processed by a computer adapt the operation of the computer such that the methods and or techniques of the present invention are invoked or otherwise provided. Instructions for invoking the inventive methods may be stored in fixed or removable media transmitted via a data stream in a broadcast media or other signal bearing medium and or stored within a working memory within a computing device operating according to the instructions.

The present invention has many benefits for customers including lower costs new revenue opportunities better scalability added reliability and increased security. Lower costs come from commoditized standards based hardware with a lower capital expense and dedicated control plane servers implying fewer management points and a lower operational expense. There are new revenue opportunities because network based applications to support new services that are more easily added using open application programming interfaces APIs and incremental deployment is made simpler through centralized management. There is better scalability because centralized control plane servers are easier to scale using well established server scaling techniques. There is added reliability because forwarding elements are more robust due to reduced software and other reliability enhancing mechanisms e.g. failover and overload control that are easier to implement in the server based control plane. There is increased security because the centralized control plane servers are easier to secure using perimeter defense systems e.g. firewalls.

There are lower capital expenses and operating expenses. The exemplary SoftRouter architecture decouples the innovation curve of the control and forwarding elements. Hardware vendors can focus on higher speed and density. New software vendors can enter the market and focus on applications and easier manageability. More competing players should yield lower prices. The CEs are made up of lower cost generic computing blades rather than expensive router control boards. Control servers are shared by many routers resulting in better efficiency. Having CEs leverages the central processing unit CPU price performance curve of server platforms. FEs are mostly hardware based and require little management similar to layer devices. Fewer control plane servers means fewer management points. There is a reduced possibility of misconfiguration.

The exemplary SoftRouter architecture is designed to be more reliable than a traditional network. FE software is an order of magnitude simpler than CE software making FEs more robust. Strategic placement of CEs and failover between these elements allow a network to handle a pre specified number of failures except in severe network partitions where an island of forwarding elements are stranded without connectivity to a CE.

There are fewer points of control resulting in faster router convergence and better network stability. There are fewer OSPF link state databases to synchronize after a failure. Convergence is faster assuming failure detection times are unchanged. Full mesh I BGP between these servers is feasible. Some network instability problems with respect to the BGP route reflector architecture can be eliminated.

Security is improved in the exemplary SoftRouter architecture compared to the traditional model. Specialized router operating systems OS are not as widely tested as open source control software such as Linux. Attacks on router OS have been increasing recently. Multiple control blades are better than one or two control blades. An overload due to malicious traffic can be distributed across a large number of control blades in the server in the exemplary SoftRouter architecture. Sophisticated statistical analysis can also be performed in the multiple blade SoftRouter servers for intrusion detection. A separate firewall protecting control blades is better than none. Fewer control plane servers in embodiments of the exemplary SoftRouter architecture make it easier to secure using dedicated firewalls. A separate signaling network is better than a shared signaling network. Embodiments of the exemplary SoftRouter architecture allows for the possibility of a separate signaling network connecting the control servers.

Deconstructing routers into forwarding and control elements is the basis for embodiments of the exemplary SoftRouter architecture described above. Forwarding elements perform mostly repetitive hardware intensive packet handling tasks such as packet filtering longest prefix matches on the IP packet header traffic management and switching. These forwarding elements transport all the traffic and are distributed throughout the network. Control elements which are few and located at strategic locations in the network embody all the control logic of current routers. Consequently they are much more software intensive and complex than forwarding elements. A traditional router consists of a set of forwarding elements collocated with statically associated with at most two control elements. The present invention introduces a new paradigm where the control element can be multiple network hops away from a particular forwarding element and the binding between forwarding and control elements is dynamic. Embodiments of the exemplary SoftRouter architecture have many technical benefits including improved stability and increased reliability. Simulations and results from a testbed quantified these benefits. An architecture where a few control elements perform route computations for a large number of forwarding elements has the potential to not only simply routers but also provide easier access to a network wide view of the control plane state.

While the foregoing is directed to various embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof. As such the appropriate scope of the invention is to be determined according to the claims which follow.

