---

title: Caching and decaching distributed arrays across caches in a parallel processing environment
abstract: The present invention provides for automatically caching via extensions indices in a technical computing environment one or more portions of a distributed array assigned to other technical computing environments for processing. A set of executable instruction, such as a technical computing program or script, may be executed to run in parallel in multiple technical computing environments. As the technical computing program runs on each technical computing environment, the technical computing program performs operations on the portion of the distributed array assigned to the technical computing environment, which may be stored in a storage location local to the technical computing environment. For example, the technical computing program may perform an operation or calculation that requires data points adjacent or nearby to, but not included in the portion of the distributed array that the technical computing environment is processing or is assigned to process. The present invention automatically caches one or more portions of the distributed array obtained from another technical computing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533402&OS=08533402&RS=08533402
owner: The MathWorks, Inc.
number: 08533402
owner_city: Natick
owner_country: US
publication_date: 20050622
---
This present application is a continuation in part of and claims priority to U.S. patent application Ser. No. 10 940 152 entitled Methods and Systems For Executing A Program In Multiple Execution Environments filed Sep. 13 2004 which is incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention generally relates to technical computing and more particularly to automatically caching in a technical computing environment a portion of a distributed array assigned for processing to another technical computing environment.

In a parallel version of MATLAB or Simulink from The MathWorks Inc. of Natick Mass. a single computer program may be executed in multiple technical computing environments on one or more computers or processors. Each of the technical computing environments may perform processing of a portion of a set of data to distribute data processing. That is the same program may run on multiple technical computing environments but process different portions of a distributed data set or each process a data set from multiple data sets.

In the case of parallel processing of a distributed array one technical computing environment may process a portion of the array such as a first column and a second technical computing environment may process another portion of the array such as a second column. In some cases a distributed array may be too large and would take up to much memory space to be stored in one technical computing environment. In other cases the parallel program does not need access to the entire distributed array but only some portions and only some of the time or under certain conditions. That is having an entire copy of the distributed array may be unnecessary and inefficient with respect to the operations of the parallel program.

The single program running in parallel in each technical computing environment may perform an operation or calculation on the data of the distributed array that requires the program and or technical computing environment to obtain a portion of data from another technical computing environment to complete the operation or calculation. For example the single computer program may perform an operation which requires calculations involving nearby or adjacent data points such as finite difference methods convolutions and local image processing. In these types of operations a technical computing environment may not have the adjacent or nearby data points or otherwise have the current values of the nearby data points being processed by another technical computing environment. In order to complete the desired operation the technical computing environment needs to obtain these other data points included in a portion of the distributed array assigned to or stored in another technical computing environment. The technical computing environment may perform message passing to another technical computing environment to obtain a desired portion of the distributed array stored in the other technical computing environment. The message passing consumes computing and network resources.

Furthermore the technical computing program may perform the same or similar operations on the same data sets which are distributed among multiple technical computing environments. Each time the technical computing program references a portion of the distributed array stored in another technical computing environment the technical computing environment may need to exchange messages to obtain a copy of the data. This consumes additional computing and network resources to obtain data previously obtained.

The present invention provides for automatically caching locally in a technical computing environment one or more portions of a distributed array assigned to other technical computing environments for parallel processing. In a parallel programming paradigm a technical computing program may be executed in parallel in multiple technical computing environments and process a distributed array. Portions of the distributed array may be decomposed and distributed for processing among multiple technical computing environments. As such each technical computing environment stores locally at least the portion of the distributed array it was assigned for processing.

The technical computing program may perform operations accessing portions of the distributed array assigned to and or stored locally in another technical computing environment. For example the technical computing program may perform an operation that requires data points adjacent or nearby the portion of the distributed array that the technical computing environment is processing or is assigned to process. Upon referencing by the technical computing program an element of the distributed array not available locally the techniques of the present invention obtains the referenced data from the appropriate technical computing environment and stores it in a local cache. The local cache may include any type of storage associated with and accessible by the technical computing environment running the technical computing program and the cache is local at least from the perspective that the technical computing environment can access the data in the storage in a manner that has less performance loss or less resource consumption than communicating to another technical computing environment. If the same element of the distributed array is referenced a second or one or more additional times the technical computing environment can use the copy of the data from the local cache instead of obtaining the data from another technical computing environment. Using this caching technique the present invention may reduce any performance loss and resource consumption from obtaining the same portion of the distributed array from another technical computing environment multiple times during execution of the technical computing program.

Additionally the techniques of the present invention provides for de caching the copy of the portion of the distributed array stored in a storage associated with the technical computing environment. Once a technical computing program changes a portion of the distributed array that is cached then since each technical computing environment is executing the same program it is assumed the other technical computing programs also changed the same portion of the distributed array. Therefore the cached portion of the distributed array may be stale or no longer represents the current value s of the corresponding portions of the distributed array. When the technical computing program assigns a value to a subscript or subscript range of the distributed array cached locally the present invention will de cache the subscript or subscript range from the cache.

In one aspect the present invention is related to a method for caching in a first computing environment one or more portions of a distributed array assigned for processing to a plurality of computing environments such as technical computing environments. The method provides a first portion of a distributed array assigned for processing by a first computing environment. The first portion of the distributed array is stored locally to the first computing environment. The method includes processing by the first computing environment a reference to a second portion of the distributed array assigned for processing to at least a second computing environment. For example an instruction executed or a message processed by the computing environment may reference an element of the second portion of the distributed array. In response to the reference the first computing environment obtains the second portion of the distributed array from the second computing environment and stores the second portion of the distributed array in a storage associated with the first computing environment. The first and second computing environments may be distributed across processors with either of the first or second computing environments running on a first or a second processor.

In another aspect the method of the present invention includes the first computing environment processing a second reference to the second portion of the distributed array. In response to the second reference the method provides the second portion of the distributed array from the storage associated with the first computing environment.

In a further aspect of the present invention the first portion of the distributed array may include any column and or row of the distributed array and the second portion may include any of a second column a second row a third column or a third row of the distributed array which may be assigned for processing to a second and or a third computing environment. In another aspect the second portion of the distributed array includes a portion of the distributed array within a subscript range adjacent to or nearby the first portion.

In one embodiment the method of the present invention stores the second portion of the distributed array to the storage associated with the first computing environment only when the subscript range of the second portion comprises a predetermined subscript range of the distributed array. The predetermined subscript range may be configurable via the first or the second computing environment.

In one aspect the method of the present invention includes de caching the second portion of the distributed array stored in the storage local to the computing environment. The method includes the step of processing by the first computing environment an assignment of a value to an element of the second portion of the distributed array. In response to the assignment the method indicates the second portion of the distributed array is not available from the storage associated with the first computing environment. The method may remove or delete the second portion or any element thereof from the storage.

In another aspect the present invention relates to a device readable medium holding device readable instructions to execute the steps of the method as described above for caching in a first computing environment one or more portions of a distributed array assigned for processing to a plurality of computing environments.

In an additional aspect the present invention relates to a distribution system for transmitting device readable instructions to execute the steps of the method as described above for caching in a first computing environment one or more portions of a distributed array assigned for processing to a plurality of computing environments.

In one aspect the present invention relates to a system for caching in a first computing environment one or more portions of a distributed array assigned for processing to a plurality of computing environments such as technical computing environments. The system comprises a first computing environment having a first portion of a distributed array stored locally for processing by the first computing environment. The system also includes an array cache and array caching mechanism. The array cache provides storage for one or more portions of the distributed array for access by the first computing environment. The array caching mechanism stores the one or more portions of the distributed array to the array cache.

The array caching mechanism of the present invention obtains the second portion of the distributed array from the second computing environment and stores the second portion in the array cache in response to a reference to a second portion of the distributed array stored in a second computing environment. The system may be distributed to a plurality of computing environments executing on one or more processors For example the first computing environment or the second computing environment may execute on either a first processor or a second processor. Each computing environment may also include an array caching mechanism and local array cache.

In another aspect of the present invention the second portion of the distributed array is provided by the array cache in response to a second reference to the second portion of the distributed array. The first portion may include at least a first column and or a first row of the distributed array and the second portion may include at least a second column a second row a third column or a third row of the distributed array. In one embodiment the second portion further comprises a portion of the distributed array assigned for processing to a third computing environment.

In a further aspect the system of the present invention de caches the second portion from the storage associated with the first computing environment when a value is assigned to an element of the second portion. For example in response to assigning a value to an element of the second portion of the distributed array the array caching mechanism removes the second portion of the distributed array from the array cache. In some embodiments the second portion comprises a portion of the distributed array within a subscript range adjacent to or nearby the first portion.

In some embodiments the array caching mechanism of the present invention stores the second portion of the distributed array to the storage associated with the first computing environment only when the subscript range of the second portion includes a predetermined subscript range of the distributed array. The predetermined subscript range may be configured via either the first or the second computing environment.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

Certain embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not made express herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the present invention provides for caching locally to a technical computing environment one or more portions of a distributed array assigned to other technical computing environments for processing. A set of executable instruction such as a technical computing program or script may be executed to run in parallel in multiple technical computing environments. For example the technical computing program may be invoked once in a first technical computing environment and from the invocation the same computer program may be executed in parallel in multiple technical computing environments. Additionally the technical computing program may process a distributed array which is an array that is decomposed and distributed for processing among multiple technical computing environments. That is each technical computing environment is assigned a portion of the distributed array for processing. As the technical computing program runs on each technical computing environment the technical computing program performs operations on the portion of the distributed array assigned to the technical computing environment which may be stored in a storage location local to the technical computing environment. The distributed array may be distributed by any size and or shape of data such as by columns rows or any other desired portions.

In some embodiments the technical computing environment may desire to access portions of the distributed array assigned to and or stored locally in another technical computing environment. For example the technical computing program may perform an operation or calculation that requires data points adjacent or nearby to but not included in the portion of the distributed array that the technical computing environment is processing or is assigned to process. The illustrative embodiment of the present invention provides systems and methods for automatically caching one or more portions of the distributed array obtained from another technical computing environment. For example upon referencing by the technical computing program an element of the distributed array not available locally the technical computing environment obtains the referenced data from the appropriate technical computing environment and stores it in a local cache. If the same element of the distributed array is referenced a second or one or more additional times the technical computing environment can use the copy of the data from the local cache instead of obtaining the data from another technical computing environment. In this manner the present invention reduces the performance loss and resource consumption of obtaining a portion of the distributed array from another technical computing environment multiple times during execution of the technical computing program.

Additionally the illustrative embodiment of the present invention provides systems and methods to de cache or no longer use the copy of the portion of the distributed array stored in a local cache of a technical computing environment. In a parallel programming paradigm of a Single Program Multiple Data or Distributed Data SPMD or SPDD model each technical computing environment is assumed to be effectively running the same technical computing program. Once a technical computing program changes a portion of the distributed array that is cached then it is assumed the other technical computing environments also changed the same portion of the distributed array. Therefore the cached portion of the distributed array may be stale or no longer represent the current value s of elements of the distributed array. When the technical computing program assigns a value to an element of the distributed array cached locally the present invention will de cache the cached portion or no longer use the cached portion for further processing. For any subsequent references to this element of the distributed array the technical computing environment may obtain the current values of this portion of the distributed array from the appropriate technical computing environment and also process to apply again the caching techniques of the present invention

The illustrative embodiment will be described solely for illustrative purposes relative to a technical computing environment provided by the software products from The MathWorks Inc. of Natick Mass. Although the illustrative embodiment may be described relative to a MATLAB based technical computing environment such as a MATLAB parallel technical computing environment one of ordinary skill in the art will appreciate that the present invention may be applied to other environments such as any environments using software products of LabVIEW or MATRIXx from National Instruments Inc. MSC.Adams from MSC.Software Corporation of Santa Ana Calif. Virtuoso from Cadence of San Jose Calif. Dymola from Dynasim AB of Lund Sweden Mathematica from Wolfram Research Inc. of Champaign Ill. Mathcad from Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc.

The computing device may support any suitable installation medium a CD ROM DVD ROM floppy disks tape device USB device hard drive or any other device suitable for installing software programs such as the present invention of a parallel technical computing environment . The computing device may further comprise a storage device such as a hard drive or CD ROM for storing an operating system and other related software and for storing application software programs such as the parallel technical computing environment of the present invention. Additionally the operating system and the parallel technical computing environment of the present invention can be run from a bootable CD such as for example KNOPPIX a bootable CD for GNU Linux.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

The illustrative embodiment of the present invention provides a parallel technical computing environment for executing technical computing programs such as computer programs created in the technical computing programming language of MATLAB . The parallel technical computing environment can be an application module service software component or any other type of computer program which is designed to and capable of executing a program supported by the parallel technical computing environment for example such as a computer program written in the programming language of MATLAB executed in the command window of a MATLAB session. Furthermore the parallel technical computing environment of MATLAB may be configured to and capable of running any of the modules libraries or software components of the MATLAB product family. As such the parallel technical computing environment may have all or a portion of the software components of MATLAB installed on the computing device or alternatively accessible from another computing device on a network.

In one aspect the parallel technical computing environment provides an execution environment from which a computer program can be invoked and executed for example via a command window command line interface or shell environment. From the command line interface of the parallel technical computing environment commands can be typed in at the command line for execution by the parallel technical computing environment to run programs functions scripts enter data and any other command MATLAB may be configured to execute. Furthermore the execution environment provided by the parallel technical computing environment may provide for execution of programs by a variety of other means such as via a menu item on a graphical user interface a shortcut in the desktop environment of MATLAB or the operating system or via another computer program written to interface with the execution environment to invoke a program.

The topology of the network over which the workstations communicate may be a bus star or ring network topology. The network can be a local area network LAN a metropolitan area network MAN or a wide area network WAN such as the Internet. In one embodiment now shown the network is separated into networks and . The networks and can be the same type of network or different types of networks. In one embodiment the network and or the network is for example a local area network LAN such as a company Intranet or a wide area network WAN such as the Internet or the World Wide Web. The network and network topology may be of any such network or network topology capable of supporting the operations of the present invention described herein.

The workstation nodes can connect to the network through a variety of connections including standard telephone lines LAN or WAN links e.g. T1 T3 56 kb X.25 SNA DECNET broadband connections ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET cluster interconnections Myrinet peripheral component interconnections PCI PCI X and wireless connections or some combination of any or all of the above. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g and direct asynchronous connections .

Each of the workstations can be any type of computing device and as described above and respectively configured to be capable of computing and communicating the operations described herein. Each of the workstations may be configured to and capable of running an execution environment of the present invention of a parallel technical computing environment and to operate each execution environment on the operating system and processor architecture that may be running on the computing device e.g. and . In summary the execution environment and the parallel technical computing environment may be deployed across a wide range of different computing devices different operating systems and different processors in various network topologies and configurations.

The parallel technical computing environment may execute a program that processes distributed arrays. A distributed array may be decomposed into multiple portions with each portion assigned and distributed for processing to separate execution environments.

For example a 300 by 300 distributed array may be distributed across the execution environments of system illustrated in . A first portion of the distributed array for example the first 100 columns may be stored and processed on the first execution environment . A second portion of the distributed array for example the second 100 columns may be stored and processed on the second execution environment and a third portion of the distributed array for example the last 100 columns may be stored and processed on the third execution environment . A distributed array may be distributed among the execution environment by any type of distribution scheme and by any dimension of the array such as a row based column based or a multiple dimension based scheme.

The contents of a distributed array assigned to and stored on a particular execution environment is referred to as the local portion of the array with respect to the particular execution environment . Each execution environment may execute a program such as a SPDD or SPMD type program that has the execution environment perform operations on its local portion of the array. As such no communication between the execution environments may be necessary for the processing of the local portion of the array. In other cases the program may perform an operation that requires processing a portion of the array not contained in the local portion of an execution environment but in the local portion of another execution environment . This may require communications between execution environments in order for one execution environment to obtain one or more elements of the distributed array stored in one or more other execution environments i.e. the local portions of the array of other execution environments 

Each of the first executing environment and second execution environment is capable of executing a computer program or any executable instruction that can be invoked and executed within the execution environment such as a program processing one or more distributed arrays. In operation the computer program is invoked from the first execution environment so that it is executed on the first execution environment and also executed on the second execution environment . The program may be a SPDD or SPMD type program from which portions of a distributed array are provided to each execution environment . The program may execute on the first executing environment processing a first portion of the array and the program may execute on the second execution environment processing a second portion of the array. Executions environments may communicate with each other via the interface to obtain portions of the array that the other environment may have. For example the first execution environment may send a message to the second execution environment to obtain the value or values of a subscript or subscript range of the local portion of the second execution environment not available in the first execution environment . A subscript or subscript range refers to an index of or identifier to an element or set of elements of the distributed array. In response to the message the second execution environment may send a message such as a reply message to the first execution environment to provide a portion of the local array of the second execution environment having the desired subscript or subscript range.

Referring now to the present invention of a parallel technical computing environment can be distributed to multiple execution environments running in multiple nodes of a network . As shown in the present invention as shown in can be practiced in a two node networked computer system . In brief overview the system has a workstation and a workstation each a computing device as described above. The workstations and are connected to and communicating over a network and each have and can run an execution environment and . Each of the execution environments can interface to each other over the network to send and receive a message or messages for executing a program and in further embodiments for sharing data and other information related to executing the program . In operation of the system in a program is invoked in the execution environment which in response to and upon the execution request sends a message via the interface to the execution environment on workstation to execute the program . The execution environments and execute the program respectively on each workstation and

Referring now to the present invention of the parallel technical computing environment can be deployed in a variety of nodes and processors across the network . In overview of the multi node networked system of there are multiple workstations connected and communicating over a network . Each workstation can have multiple execution environments with each execution environment able to communicate with the other execution environments via an interface locally or over the network . In operation of the system a program is invoked on one of the execution environments for example . Through the interface all of the execution environments such as and are sent a message from the first execution environment to execute the program . All of the execution environments execute the program . With one invoking of a program in one execution environment the processing and computing capabilities of all the nodes and execution environments in the network are utilized. In the above examples each of the execution environments may process a local portion of a distributed array and obtain others portions of the array via an interface to other execution environments 

In one aspect any portion of the distributed array may be cached by an execution environment using the techniques of the present invention. For example execution environment may be assigned column 1 of a three column distributed array with execution environments and assigned columns 2 and 3 respectively. Execution environment may execute a program that performs an operation needing values from columns 2 and 3 of execution environment and respectively. In one embodiment upon distribution of the array to form local portions of the array in respective execution environments each execution environment may cache a portion of the distributed array not included in their local portion of the array. In another embodiment upon executing an instruction requiring a portion of the distributed array of another execution environment the execution environment obtains via an interface the desired portion of the array from another execution environment . The execution environment may store the obtained portion locally in a cache or with the local portion of the array for subsequent processing. For example upon executing another instruction requiring the same portion of the distributed array the execution environment can use the locally cached copy instead of using the interface to obtain the same portion of the array again. This avoids any delay and additional resource consumption from interfacing with another execution environment such as by exchanging messages over a network .

The array caching mechanism may comprise any suitable means and or mechanism for detecting or determining when an executable instruction of the program references uses or requires a portion of the distributed array that is not available locally in the execution environment and or is not included in the local portion of the array processed by the execution environment . The array caching mechanism may detect or determine when a subscript or subscript range of the distributed array that is not included in the local portion is referenced by an executable instruction of the program . The array caching mechanism may also detect or determine when an executable instruction assigns a value or values to a subscript or subscript range of the distributed array not included in the local portion . Additionally the array caching mechanism may be implemented in hardware software or any combination of hardware and software.

In one embodiment the array caching mechanism may be included in the virtual machine or interpreter that interprets and executes the program . In an exemplary embodiment of a MATLAB interpreter the array caching mechanism may be included in or comprise an implementation of the functions subsref and or subsasgn provided by the MATLAB interpreter or as overloaded methods of the subsref and or subsasgn functions provided by the MATLAB interpreter. In other embodiments the array caching mechanism may be incorporated in the underlying structure or implementation of any statements functions and other instructions of the language of the program . In additional embodiments the array caching mechanism may be implemented via any type and or form of code and incorporated via a compiler or linker when providing code or an executable for the program . One ordinarily skilled in the art will recognize and appreciate that various ways to implement the array caching mechanism of the present invention suitable for the type and or form of the execution environment and the program .

The local array cache may comprise any type and or form of storage suitable for holding any information or data such as a portion of the distributed array and or information related to the distributed array . In one embodiment the local array cache or array cache may comprise a data structure in any type and or form of memory provided by the computing device of the execution environment . The array cache may be in any suitable location accessible by the execution environment such that the execution environment can access information in the cache without communicating to another execution environment . In another aspect the array cache may be in any suitable location providing data or information access that has less of a performance loss or resource consumption than accessing information or data from another execution environment . In other embodiments the array cache may comprise a storage location in any type and or form of storage provided by or via the computing device of the execution environment including in some cases via a network. The array cache may be implemented in hardware software or any combination of hardware and software. One ordinarily skilled in the art will recognize and appreciate that the array cache may be implemented in various forms and permutations and may be accessible by any suitable means and or mechanism by an execution environment .

The program of also illustrates an example of an executable instruction referencing or using a portion of the distributed array referred to as a subscript reference or in the exemplary embodiment of MATLAB interpreter a subsref. The program illustrates an example of an executable instruction assigning a value to a portion of the distributed array referred to as a subscript assign or in the exemplary embodiment of a MATLAB interpreter a subsasgn. Subscript reference and subscript assign instructions of the program can be utilized by the array caching mechanism to detect or determine when a portion of the distributed array not stored in the local portion is needed or requested by the program .

In one aspect the present invention is directed towards automatically caching or shadowing one or more portions of the distributed array that are not stored in or provided by the local portion . Extension indices such as extension widths may be associated with the distributed array in order to identify the portions of the distributed array not included in the local portion to automatically cache or shadow. In the extension indices and are referred to as indices e and e. These extension indices extend the portions of the distributed array to be stored or available locally to the execution environment . The extension indices may be implemented by or included in the underlying data structure representing the distributed array such as the darray data structure in an exemplary embodiment of MATLAB . In the extension indices are illustrated as column based extensions to indicate the portion of the distributed array to be shadowed or cached.

The extension indices may be specified in any suitable manner and may be specified as relative values to the indices or array subscripts of the local portion e.g. j j. For example in one embodiment the extension index e may be specified with a value of 10 indicating the cache portion comprises 10 subscript range indices to the left of j of the local portion or subscript range 240 to 250 of distributed array . Likewise the extension index e may be specified with a value of 10 indicating the cache portion comprises 10 subscript range indices to the right of j of the local portion or subscript range 501 510 of distributed array . In other embodiments the extension indices may be specified as values relative to or absolute to the subscript range of the distributed array .

During any portion of executing program or processing the distributed array the range of indices of the distributed array that may be stored or available locally to the execution environment may be referred to or expressed as j1 e1 j2 e2 In some embodiments the extension indices may be initially set to 0. The extension indices may be set changed or otherwise provided statically or dynamically by any suitable means and or mechanisms. In one embodiment the extension indices may be dynamically changed to include the cached portion on an as needed basis by a program . For example the extension indices may be initially set to 0 and the execution environment executes an instruction loading an index that is one column away from the local portion . The extension indices e and or e may be increased or changed dynamically from 0 to 1 to account for caching or shadowing the column s adjacent to the local portion to form the cached portion . In other embodiments the extension indices and the cached portion may be fixed such as upon starting the execution environment or upon creating the distributed array .

In some embodiments the extension indices may comprise configurable properties of the distributed array which may be provided programmatically via any type and or form of application programming interface API . For example the distributed array may comprise an object based or object oriented representation in the execution environment or technical computing environment from which methods and or properties may be used to specify the extension indices 

In other embodiments the array caching mechanism specifies or changes the extension indices according to any logic business rules or other functionality by which the array caching mechanism determines to cache or shadow a portion of the distributed array . In an exemplary embodiment the array caching mechanism may be designed constructed or configured to automatically cache any subscript reference to load or store an index outside of the local portion but nearby or near the local portion . For example any index within twice the width of the local portion may be automatically cached upon the first reference to load or store an index within a subscript range. One ordinarily skilled in the art will recognize and appreciate that the array caching mechanism may cache any configured set or otherwise predetermined subscripts or subscript ranges of the distributed array .

In one embodiment the extension indices represent the index or subscript range of the cached portion as determined and cached by the array caching mechanism . The array caching mechanism may be configured to automatically cache any nearby portion of the distributed array not included in the local portion . The array cache mechanism may be configured by any suitable configuration mechanism and or means to specify what is nearby which may be relative to the size of the distributed array and the local portion assigned to the execution environment . The nearby portion may comprise any portion of the distributed array including all of the remaining portions outside the local portion . In these cases the extension indices may be dynamically adjusted to represent the nearby portion cached by the array caching mechanism .

In other cases the extension indices may specify to the array caching mechanism the portion of the distributed array to be cached. That is the extension indices associated with a distributed array indicate to the array caching mechanism what portions to cache. In these cases the extension indices represent the indices of the cached portion and also a configuration parameter for the array caching mechanism to use to determine the indices of the distributed array to cache. One ordinarily skilled in the art will recognize and appreciate that the extension indices may represent either or both the indices of the distributed array to cache or the indices of the distributed array that have been cached.

Furthermore the extension indices may be specified as any type and or form of numerical character or other data representation suitable for representing an index or identifying the cached portion of the distributed array . In an exemplary embodiment the extension indices are specified as integer values. In some embodiments the extension indices may be specified as a positive or negative number to indicate direction of the extension relative to the indices of the local portion . One ordinarily skilled in the art will recognize and appreciate that the extension indices of the present invention may comprise a wide range of different types of representations and formats.

Although shown as a pair of extension indices there may be only one extension index or and in other cases multiple extension indices. Additionally although extension indices e and e are generally described as having the same value to form a symmetrical extension of the cached portion with respect to the local portion the extension indices may be provided to form asymmetrical extensions. That is extension index e may be set to a different value than extension index e or any other extension index that may be used.

For the first execution environment on computing device the local portion comprises the first 250 columns of the distributed array as indicated by indices j j of 1 250. The cached portion is specified by extension indices e and e . Since the first index of the local portion is on a boundary of the distributed array the extension index may be set to 0. In other embodiments the extension index e may be set to a value greater than 0 such as the value of extension index e but may be effectively ignored for caching purposes. In other embodiments the extension index e may be set to effectively wrap the cached portion around to the end of the subscript range of the distributed array e.g. j j of 751 1000.

For the second execution environment on computing device the local portion comprises the second 250 columns of the distributed array as represented by indices j j of 251 500. The cached portion is specified by extension indices e and e . Likewise for the third execution environment on computing device the local portion comprises indices j j of 501 to 750 and the cached portion is specified by extension indices e and e . Also the local portion of the fourth execution environment on computing device comprises indices j j of 751 to 1000 and the cached portion is specified by extension indices e and e . Since the last index of the local portion is on a boundary of the distributed array the extension index may be set to 0. In other embodiments the extension index e may be set to a non zero value but may be effectively ignored for caching purposes. In other embodiments the extension index e may be specified with a non zero value that effectively wraps the cached portion around to the start of the subscript range of the distributed array e.g. j j of 1 250.

In some embodiments memory and or storage for all the elements of the distributed array is allocated on each of the execution environments . Each execution environment may allocate memory to store or hold all or most of the elements of the distributed array . In one embodiment each execution environment allocates memory for the entire distributed array and de allocates portions of the memory in accordance with the assigned distribution and indexing of the distributed array. In other embodiments memory and or storage is allocated only for the local portion of the distributed array assigned for processing to the respective execution environment . That is each execution environment may allocate memory to store or hold the elements of the distributed array forming the local portion . In a further embodiment each execution environment may allocate memory related to the distributed array to store or hold the elements of the distributed array forming the local portion and the desired cached portion .

In some cases the local array cache is allocated in the same memory and or storage associated with the local portion of the distributed array and or any data structure memory or storage otherwise used for allocating the distributed array in the respective execution environment . For example in one embodiment the local array cache may comprise elements of a data structure used to implement and or represent the distributed array in the execution environment . In this embodiment the array caching mechanism may track and manage caching and de caching via the data structure representation. Additionally an array cache may be dynamically created or allocated and provided for one execution or instance of a program execution environment or technical computing environment . In some embodiments the array cache may be established in a persistent manner across multiple executions or instances of a program execution environment or technical computing environment . One ordinarily skilled in the art will recognize and appreciate the various mechanisms and means for providing for memory and or storage allocation of the distributed array and the local and cached portions of the distributed array.

Although the array caching mechanism and local array cache are generally discussed in terms of handling a single distributed array the array caching mechanism and local array cache may be used to handle multiple distributed arrays being processed by an execution environment either concurrently subsequently or otherwise. For example a first distributed array and a second distributed array can share the same or a common array cache . Additionally each execution environment may have multiple array caching mechanisms and array caches each being the same or different from another. Each array caching mechanism and array cache may be associated with or used for one or more distributed arrays . In some embodiments a single array cache may be used by or shared with multiple array caching mechanisms . In other embodiments a single array caching mechanism may use multiple array caches . One ordinarily skilled in the art will recognize and appreciate the various forms and permutations of deploying the array caching mechanism and array cache in one or more execution environments.

Referring now to other embodiments of the extensions indices are illustrated for practicing the caching techniques of the present invention. For the distributed array a row based indexing distribution may be used. That is each execution environment may be assigned to process a portion of the distributed array comprising one or more rows of the array . For example the second execution environment of system in may process a local portion as identified by row or subscript indices I I of 251 500. In this example the extension indices e and e may represent row based extension widths to form the cached portion .

Although in exemplary embodiments the extension indices may represent column or row based extensions of the local portion to form a cached portion the extension indices may represent any one or more dimensions of a multi dimension array as illustrated by the distributed array of . The distributed array may be distributed and indexed to form a local portion and a cached portion representing each and or any of the dimensions of the array . For example the multi dimension array may be distributed and indexed for processing on each execution environment by any combination or arbitrary mapping of column 1dimension row 2dimension or page 3dimension indices. As such the techniques of the present invention may use multiple extension indices e e e . . . eN to represent and identify the cached portion in each respective execution environment .

Although the extension indices e eN are used to provide caching extensions for all the dimensions relative to the local portion not all dimensions e.g. column row and page of the distributed array may be represented by the extension indices . For example in some embodiments only row and column based extension indices such as e e may be used. In other embodiments only page extensions such as e eN may be used in practicing the technique of the present invention. One ordinarily skilled in the art will recognize and appreciate that any one or more dimensions of a distributed array may be used for indexing operations for providing the local portion cached portion and extensions indices in practicing the present invention as described herein.

Furthermore although the extension indices have been generally illustrated as providing a cached portion adjacent to and continuous from the respective local portion the extension indices may be provided such that the cached portion is not adjacent to and or continuous from the local portion . For example as illustrated by the distributed array of the cached portions identified by extension indices e e may be provided in a manner to form a cached portion that is not adjacent to and or continuous from the local portion . In this embodiment the caching techniques of the present invention may cache only the portions of the distributed array outside of the local portion that are loaded stored or otherwise referenced by an instruction of a program and not any portions that may be included in between the local portion and the cached portion but not used by the program .

In one aspect the present invention relates to methods for practicing the caching techniques as described herein. In the flow diagram of method depicts the caching operations of the one or more execution environments illustrated in . At step an execution environment is executing a program flow of a program invoked for execution. At some point during the program flow the array caching mechanism of an execution environment at step detects recognizes or interprets a reference to load a portion of the distributed array beyond the local portion . For example an interpreter of the execution environment may interpret an instruction such as the instruction comprising the subscript reference of the program of referencing a subscript or subscript range of the distributed array .

At step the execution environment and or the array caching mechanism evaluates the distributed array subscript reference to determine if the subscript reference is within the desired caching or shadowing index range. In one embodiment the array caching mechanism is configured with logic or business rules to determine if the subscript reference is for a nearby portion of the distributed array not included in the local portion . If the subscript reference is not within the desired caching or shadowing range the execution environment may need to obtain the portion of the distributed array referenced by the subscript reference from one or more other execution environments . At step the execution environment may communicate via messaging or any other interface to obtain a copy of the referenced portion of the distributed array to be used by the instruction having the subscript reference . For example in one embodiment the execution environment may perform send and receive message operations with another execution environment to obtain distributed array data not stored locally. Then at step the program flow and operations of the execution environment continues in accordance with the instructions of the program .

If the subscript reference is within the desired caching or shadowing range the execution environment and or the array caching mechanism at step may check whether this is the first time that the subscript or subscript range of the subscript reference has been referenced or whether the portion of the distributed array identified by the subscript reference has already been cached to the local array cache . If the portion of the distributed array has not been previously cached then at step the execution environment obtains a copy of the referenced portion via the interface from the other execution environment . The obtained portion of the distributed array is used by the referencing instruction and the array caching mechanism stores the obtained portion of the distributed array to the local array cache and in one embodiment updates the extension indices accordingly to reflect the cached portion . At step the execution environment continues with program or execution flow.

The next one or more times the subscript reference is encountered loading an index of the distributed array outside the local portion but stored in the cached portion the method at step then can obtain the cached portion at step for use by the instruction of the program . This will prevent step from being executed again reducing any performance loss and resource consumption due to obtaining the portion of the distributed array from another execution environment .

Although the caching operations of the techniques of the present invention are discussing during the execution of an instruction referencing an array subscript outside the local portion the caching operations illustrated by steps and of method may be performed at any desired times as those ordinarily skilled in the art would appreciate. For example in some embodiments upon startup of the execution environment invoking or loading of the program or creation of the distributed array an execution environment and or array caching mechanism may obtain array data from other execution environments and store the data locally in the cache to form the desired cached portion and corresponding extension indices 

In another aspect the caching techniques of the present invention are directed to methods for de caching removing or otherwise no longer providing the cached portion . In the flow diagram of method depicts the de caching operations of the one or more execution environments illustrated in . At step an execution environment is executing a program flow of a program invoked for execution. At some point during the program flow the array caching mechanism of an execution environment at step detects recognizes or interprets a reference to assign a value to an index or subscript of a portion of the distributed array cached in the local array cache . For example an interpreter of the execution environment may interpret an instruction such as the instruction comprising the subscript assign of the program of assigning a value to a subscript or subscript range of the distributed array .

At step the execution environment and or the array caching mechanism evaluates the distributed array subscript assign to determine if the subscript of the distributed array being assigned a value is within the desired caching or shadowing index range or stored in the local array cache . If the subscript assignment is not being performed on a subscript of the distributed array stored in the local array cache or otherwise included in the cached portion the execution environment executes the instruction as desired and continues with the program flow at step in accordance with the program .

If the subscript assignment is being performed on a subscript of the distributed array stored in the local array cache or otherwise included in the cached portion the execution environment and or array caching mechanism at step de caches deletes or removes from the local array cache at least the portion of the distributed array having a value assigned to it and updates the extension indices accordingly. In some embodiment the entire cached portion is de cached or removed and the extension indices are set or reset to 0. In other embodiments just the subscript or subscripts of the distributed array being assigned a value are de cached or removed and the extension indices are updated to account for the indices of the cached portion that are no longer cached.

In some embodiments of de caching operations the execution environment and or the array caching mechanism does not remove or delete the portion of the distributed array from the local array cache but indicates by any suitable means and or mechanism that the portion of the distributed array stored in the local array cache is no longer valid current or otherwise should not be used. For example any type and or form of data structured may be used to track which portions of the distributed array are currently stored in the local portion and cached portion and which elements of the cached portion are currently valid updated or current. One ordinarily skilled in the art will recognize and appreciate that for de caching operations the elements of the cached portion do not have to be permanently removed from the cache but can be indicated as no longer cached.

Although illustrative methods and are generally described with regards to operations of a single execution environment the same flow diagram may apply to multiple execution environments running the same program so that illustrative methods and are performed on each execution environment in accordance with the respective local portion cached portions and corresponding extension indices . This can reduce the overall performance loss and resource consumption from multiple executing environments communicating or interfacing over a network to share data of a distributed array.

In view of the structure function and operations of the present invention the illustrative caching and de caching techniques provide an improvement to the performance of a SPDD or SPMD in a parallel technical computing environment. Using the techniques of the present invention the frequency of interfacing such as by message passing required by operations using nearby or other portions of array data distributed to another environment may be reduced. For example operations like finite difference methods convolutions and image processing may frequently require access to adjacent or nearby distributed array data to perform the desired operations. By caching the frequently used portions of the distributed data the present invention reduces the consumption of resources such as network resources and any latency related to the interface such as network latency. Furthermore the de caching operations of the present invention provides a simpler approach for determining when cached data should no longer be used or needs to be updated. This avoids any further processing and complexities of coordinating and controlling the updating of cached portions across multiple execution environments.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

