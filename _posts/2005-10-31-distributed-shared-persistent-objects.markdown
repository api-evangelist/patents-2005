---

title: Distributed shared persistent objects
abstract: A system and method are described for managing a shared object in a distributed collaboration environment. The distributed collaboration environment is composed of at least one edge server in communication with a central server. When a client desires to modify the shared object, it issues an object modification request to the edge server it is connected to. The edge server compares the version identifier of the client shared object against the version identifier of the edge shared object. If the versions do not match, the edge server rejects the modification. Otherwise, it will forward the modification request to the central server for further consideration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945615&OS=07945615&RS=07945615
owner: Adobe Systems Incorporated
number: 07945615
owner_city: San Jose
owner_country: US
publication_date: 20051031
---
The present application is related to co pending and commonly assigned U.S. patent application Ser. No. 10 402 357 entitled SHARED PERSISTENT OBJECTS and concurrently filed co pending and commonly assigned U.S. patent application Ser. No. 11 263 652 entitled NETWORK CONFIGURATION WITH SMART EDGE SERVERS U.S. patent application Ser. No. 11 263 582 entitled SELECTIVELY PORTING MEETING OBJECTS and U.S. patent application Ser. No. 11 263 074 entitled VIRTUAL GROUP CONNECTIONS the disclosures of which are hereby incorporated herein by reference.

The present invention relates in general to distributed computing and more particularly to shared persistent objects managed over a multiple server network.

The client server relationship has opened vast areas of network operability. Whether implemented in a local area network LAN or the Internet the interaction between client entities and a centralized server forms the basis of the computing world today. Applications routinely incorporate remote use of data or logic to manage inventory employees sales and other such activities. Early client server applications involved remote access to databases to provide data for locally running applications. The management of such distributed functionality has advanced with several programming techniques and architectures. MICROSOFT CORPORATION S Distributed Component Object Model DCOM and Common Object Request Broker Architecture CORBA developed by Object Management Group are just two examples of architectures and specifications that allow programs at different locations and possibly developed by different vendors to communicate in a network through an interface broker.

With CORBA the essential concept is the Object Request Broker ORB . ORB support across a network of multiple computers with multiple clients and servers allows for a client program to request services from a server program or object without having to completely understand where that server program or object is or what the interface to that server program or object requires. ORB s communicate requests and return replies by using the General Inter ORB Protocol GIOP and when used across the Internet Internet Inter ORB Protocol IIOP . IIOP generally maps GIOP requests and replies into the Transmission Control Protocol TCP layer for each computer. Thus the interfacing of the different entities is transparent to the user. DCOM works in a similar manner using TCP Internet Protocol TCP IP and hypertext transfer protocol HTTP to communicate remote procedure calls RPCs to the compatible server objects.

Both DCOM and CORBA follow a similar step by step process. A local application or object requests services from another remote object. The remote object is located using the class ID CLSID for DCOM or client ORB for CORBA. This broker or agent arrangement operates in a similar manner to the stub and skeleton architecture used in Remote Procedure Call RPC communication. The stub which is a small piece of communication code on the client system operates as the proxy with the remote server performing all communications with the skeleton which is the corresponding communication code on the remote server. Therefore the client does not have to address the different interface possibilities with the remote server. Once the request for service has reached the server object at the remote server an instance of the object is downloaded to the client. The client may then run the instantiated object locally using the local user interface.

The common thread with DCOM and CORBA is that the distributed management performed by each architecture is directed to distributed computing. Code may be persistent between sessions and RPCs data is not. Therefore while logic may persist between sessions data is generally session specific.

Another tool of distributed or remote interactive computing is the cookie. A cookie is data created by a server side connection such as a common gateway interface CGI script that can be used to both store and retrieve information on the client side of the connection. This addition of a simple persistent client side state significantly extends capabilities of Web based client server applications. The standard specification for cookies began with NETSCAPE COMMUNICATION CORPORATION s Persistent Client State HTTP Cookies and continues with RFC 2109 HTTP State Management Mechanism issued by the Network Working Group of the Internet Engineering Task Force IETF . These specifications define a size limit of 4096 bytes per cookie. Moreover a limit of 20 cookies per Web server is also defined which means than any one Web server can store a maximum of 20 4096 byte cookies on every client computer.

Cookies provide a way for Web sites to keep track of user patterns and preferences and with the cooperation of the Web browser store the cookies on the client computer. Hypertext Transfer Protocol HTTP which is the transfer protocol of the Web is a stateless protocol such that each request for a Web page is independent of all other such requests. Therefore the Web page server has no memory of the current state i.e. what pages or information has previously been sent to or exchanged with the client computer . Cookies provide the ability for the user to experience a personalized session by providing the Web page and Web page server data that creates a remembered state of the user Web interaction.

In a typical example of operation when a user at a client computer runs its Web browser and types in a Universal Resource Locator URL such as www.macromedia.com the browser communicates with the Web server and requests the macromedia.com home page. On the client side once the request is made the browser searches its cookie file for cookies designated for macromedia.com. If none are found no cookies are sent. On the server side the macromedia.com Web server receives the request and attempts to read any cookies that may be transmitted from the requesting browser. If none are available the Web server determines that this is the first time the client browser has visited the macromedia.com Web site. The macromedia.com Web server may then direct that a cookie or cookies be saved onto the client computer marking the visit and identifying the client side computer. When the client computer next makes a request for the macromedia.com home page it will now typically send the cookies designated for the macromedia.com Web site. The macromedia.com Web site will read the cookies and be able to adjust the user experience at the client side using this state information.

Some cookies persist only until the end of a specific browser session. Meaning that when the browser program is closed the cookies are erased. However when some cookies are created they include an expiration date after which the cookie will expire and be erased from the designated cookie file. Thus those cookies persist from one browser session to another residing on the client computer until the expiration date has been reached. Cookies may also be erased if the maximum cookie limit which is a standard specification is exceeded. In this situation the most least accessed cookies will typically be deleted first. Therefore most cookies are set once and then go away either 1 at the close of the current browser session 2 until the cookie expiration date is reached or 2 when the maximum number of cookies has been exceeded.

Cookies provide an adequate tool for simple Web interactions such as remembering login information setting up a shopping cart in an e commerce Web site or tracking user history information. However for more complicated distributed Internet applications cookies are somewhat inadequate. Cookies are limited solely to text formatting. Therefore they can provide no distributed functionality or logic. Cookies are also single version data. Once the cookie information is set it does not change until the cookie expires. New information is generally saved as a new cookie. Furthermore cookies are accessible by URL paths so the capability exists for many different URLs may have an opportunity to use that information by including many different URLs in the path property of the cookie.

The present invention is directed to a system and method for managing a shared object in a distributed collaboration environment. The distributed collaboration environment is composed of at least one edge server in communication with the central server running the collaboration. When a client desires to modify the shared object it issues a modification request to the edge server it is connected to. Instead of forwarding the request on to the central server the edge server compares the version identifier of the client shared object against the version identifier of the edge server shared object. If the versions do not match the edge server rejects the modification. Otherwise it will forward the modification request to the central server for further consideration.

In additional and or alternative configurations there will be intervening edge servers between the edge server connected to the requesting client and the central server. In these configurations the client s edge server will forward the modification request to the next edge server on the route to the central server. At each edge server along the way a check will be performed to ensure that the client s shared object version is the latest. Anywhere along the edge server route to the central server it may be discovered that the client s version is outdated. Therefore the edge server can reject the modification request without requiring processing time or bandwidth from the central server.

The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention both as to its organization and method of operation together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood however that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.

Object Oriented Programming OOP is a well known programming technique that decomposes problems into a collection of intercommunicating self contained entities composed of data and operations on the data. These self contained entities are called objects. Objects typically have an internal state which are the current values of its data and methods which are typically the only means by which the object s state can be inspected modified or processed by another object. Objects may include methods and data portion comprising data slots. Data slots may contain items such as plain values or other objects. For example a data slot may contain the string December or the integer 15 or even another object. The methods may contain logic instructions that operate on the data contained in the data slots. For instance a method may contain logic for writing the value contained in a data slot to a certain memory location in the host computer.

Objects once created can be reused can intercommunicate and return values for any number of different desired tasks. An object has generally been shareable to the extent that the available data slots and corresponding methods are available to all host or client computers that have a copy of that object. However the data or state information contained in an object on one host is typically not persistent across multiple hosts or clients. Thus without more complexity added typical instances of objects transmitted in DCOM and or CORBA usually do not include any persistent data or state information.

Instead of providing distributed computing using the persistent code attributes of DCOM or CORBA that do not have the capability for handling persistent data or using cookies that have a limited ability for persistent data without the capability for providing persistent or distributed code a new solution has been suggested in commonly assigned co pending U.S. patent application Ser. No. 10 402 357 entitled SHARED PERSISTENT OBJECTS the disclosure of which is incorporated herein. This technology provides an object that may be shared in real time by any accessible client i.e. a shared object. A shared object is a container of data and logic used in processing a distributed application. Each shared object will generally have multiple slots in which various pieces of data or information may be stored. The complex functionality of the shared object is presented to a designer through a collection of abstract data types in an application programming interface API such that a designer with minimal programming skills and experience may effectively implement extremely complex features.

In this common technology a distributed interactive multimedia application DiMA run on an interactive multimedia communication server iMCS maintains a main or global instance of a shared object including all the active data slots in the object. The iMCS DiMA assigns an object version identifier for the entire shared object along with individual slot version identifier. The iMCS DiMA therefore maintains the current version of the shared object in addition to the current version of each data slot of the shared object.

The shared object provides data or information that is used in the operation of an interactive multimedia file iMF which is the client side application implementing the DiMA. A local computer receives the iMF and begins running it using an interactive multimedia runtime iMR such as MACROMEDIA INC. s FLASH player or other such similarly capable interactive media player. The iMF stores a local instance of the shared object onto the local computer executing the iMR iMF. In the distributed operation the iMF communicates with the iMCS DiMA which manages interactions concerning any of the iMF running on any connected local clients.

When the iMF stores the local instance of the shared object a version identifier is assigned locally that matches the version of the shared object obtained from the iMCS DiMA. The iMF monitors any changes attempted to the various slots within the local instance of the shared object. Each attempted or proposed change to the shared object or any of its slots is eventually approved by the iMCS DiMA. The iMCS DiMA uses the version numbers to determine most approvals of changes. For example if a client using a much earlier version attempts to modify the shared object the iMCS DiMA will reject the change because the slot has already moved beyond the point that the suggested change is coming from. If a change is in fact allowed the iMCS DiMA will notify each client participant of the change to the object slot. Furthermore with each modification the version number will be incremented at the iMCS DiMA and propagated down through the participating clients. As a part of almost every interaction between the iMF and the iMCS DiMA the version identifiers are exchanged and compared between the clients and the iMCS DiMA to assist in maintaining continuity of the shared application.

This technology described in commonly assigned co pending U.S. patent application Ser. No. 10 402 357 entitled SHARED PERSISTENT OBJECTS has been employed in one embodiment or another in electronic meeting and collaboration applications such as MACROMEDIA INC. s BREEZE or other such similarly capable electronic meeting applications. In such applications multiple meeting participants may view and manipulate various pieces of information. Thus changes to the information within the shared objects is closely monitored throughout the collaboration system and propagated to each of the accessing client machines.

In early versions of BREEZE a single collaboration server was used to manage the entire collaboration session as well as providing direct connections to each meeting participant. Considering the complexity of maintaining a real time interactive multimedia electronic collaboration session management by a single central server provides the most logical and efficient implementation. However by also providing all of the direct connections into the electronic meeting a single server implementation typically limits the number of possible meeting participants connected into the meeting at any given time. The levels of this limitation are purely the physical connection and processing limits of the collaboration server s processor.

Technology developed in commonly assigned co pending U.S. patent application Ser. No. 11 263 652 entitled NETWORK CONFIGURATION WITH SMART EDGE SERVERS and commonly assigned co pending U.S. patent application Ser. No. 11 263 074 entitled VIRTUAL GROUP CONNECTIONS the disclosures of which are incorporated herein by reference have expanded the scalability of electronic collaboration systems. While an electronic meeting is still managed by a single collaboration server connection management is moved down to smart edge servers that operate in conjunction with the collaboration server through virtual group connections such that each connection to the collaboration server from a smart edge server constitutes only a single connection into the collaboration server regardless of the number of users meeting participants connected at the smart edge server.

In extending the shared object concept to collaboration systems having a smart edge server architecture an inefficiency arises in the normal management of the shared object. In a single server environment when a user changes the information in a shared object the user s local environment checks with the central server for authorization to change the object. If authorization exists then the changed object is transmitted to the central server which takes the change updates the central data slot of the shared object that has been changed and then copies the change to each of the other meeting participants connected into the central server. In the smart edge server configuration however a user checking authorization of the collaboration will first transmit the request to the smart edge server which then would forward the check to the collaboration server. This means the user s request would be forwarded from the smart edge server to the collaboration server. If authorization is available the change is transmitted from the user to the smart edge server and then from the smart edge server to the collaboration server. The collaboration server will then have to send a copy of the change to each user meeting participant regardless of which smart edge server they were connected through which would greatly increase the load on the collaboration server and the smart edge servers.

Electronic collaboration system is implemented by operating a server side communication application on collaboration server and collaboration edge servers . The server side applications operate with collaboration server being the central server in control of the electronic meeting and collaboration edge servers communicating with collaboration server to provide assistance with some of the meeting processing and for providing the virtual group connections into collaboration server . The connectivity and communications between collaboration server and collaboration edge servers is performed according to an embodiment of the technology described in commonly assigned co pending U.S. patent application Ser. No. 11 263 074 entitled VIRTUAL GROUP CONNECTIONS. Thus even though at least seven participants participants are shown connected to the electronic meeting collaboration server only incurs a load of three connections one from each of collaboration edge servers .

A client side application operates on each of participants that facilitates communication with collaboration server through collaboration edge servers and facilitates the presentation of the visual elements of the electronic meeting. In operation of the electronic meeting application shared objects are used in providing shared information to all of the meeting participants. Shared object SO provides five data slots to the electronic collaboration application. Each data slot of SO is managed by collaboration server to reflect a current slot version identifier as well as a container version identifier for SO as the whole object. SO as stored and maintained on collaboration server is the main instance of SO that controls the container and slot versions visible to participants and controls the ability of participants to make edits to the data of SO . A shared object for example may provide data or information for a shared cursor a shared meeting pod or the like. As a party moves the shared cursor or types draws in the shared meeting pod the data slots in the shared object change with the changes propagated down to the meeting participant and the client side application managing the client side electronic meeting.

Participants operate within the electronic meeting as if they are each connected directly to collaboration server . Collaboration edge servers are therefore practically transparent to participants . However the connections to collaboration server are in fact made through collaboration edge servers . Collaboration edge servers communicate with collaboration server in execution of the electronic meeting. Moreover collaboration edge servers manage the connections of their connected participants within the electronic meeting. As a part of this management each of collaboration edge servers receives an instance of SO i.e. SO A C through communications with collaboration server . Each of these shared object instances resident on collaboration edge servers are proxy shared objects to the main instance. Because the main instance controls the manipulation of the overall shared object SO A C are slaved to the main instance SO . In most cases the version of SO on collaboration edge servers will match the main version on collaboration server . However due to some inconsistencies in connections and communications the version may not always match.

Because collaboration edge servers do not simply act as store and forward agents or remote caching servers they incorporate the ability to perform partial processing and management for collaboration server to assist in maintaining the electronic meeting. This ability allows collaboration edge servers to assist in managing the shared objects. For example participant attempts to make a change to one of data slots of SO E the copy of SO it has locally stored. When the request arrives at collaboration edge server a copy of the shared object version numbers accompany the communication. Participant would send the container version number for SO E in general i.e. ver. 9 and also the slot version of the slot or slots that are proposed for change. In this example the user desires to change the information for slot . Therefore participant would transmit container version 9 for SO E and version 3 for slot . Prior to forwarding the request to collaboration server collaboration edge server checks the shared object container version number ver. 9 received from participant against the shared object container version number of SO B maintained locally on edge server ver. 13. Because the shared object version from participant is clearly outdated collaboration edge server directly rejects the requested change. It does not have to send this determination up to collaboration server which would increase the load on collaboration server .

It should be noted that in additional and or alternative embodiments of the present invention the edge server may compare the slot version number instead of the container version number of the client shared object. For example if participant requests to change slot it sends its container version ver 9 and slot version ver 1 to edge server . Edge server compares its slot version number for slot ver. 2 against the client container version ver 9. Because the slot version of edge server is lower than the client container version ver 9 edge server sends the request on to collaboration server . Collaboration server would compare the client slot version against the client slot version and reject the request.

In other additional and or alternative embodiments of the present invention the edge server compares its slot version against the client slot version. Thus if participant requests to change slot it sends its slot version ver 1 to edge server . Edge server would compare the client slot version against its own slot version ver 2. Edge server would then reject the change request because its slot version is greater than the client slot version.

In addition to the change rejection that that collaboration edge server issues back to participant collaboration edge server will transmit a full copy of SO B to participant in order to update SO E to the most current version available to collaboration edge server . Thus in assisting with the administration of the editing functionality of the distributed shared objects system collaboration edge server also assists in maintaining the synchronization of the shared objects making electronic collaboration system both self correcting and self synchronizing.

Participant with SO D stored locally attempts to make a change to one or more of data slots . As the change request proceeds to collaboration edge server participant transmits the container version numbers of SO D along with it. Before acting on the request collaboration edge server compares the container version of SO D ver. 13 against the container version number of its own local instance of the shared object SO C ver. 13. Because the versions are the same collaboration edge server forwards the change request to collaboration server . Collaboration edge server also transmits the version number of SO C to collaboration server . Collaboration server compares the transmitted container version number ver. 13 against the container version of the main shared object instance SO ver. 13. As the transmitted distributed container version number is the same as the main instance version collaboration server allows the change.

In order to implement the allowed change collaboration server transmits an acknowledgement to collaboration edge server . Collaboration edge server which holds the proposed shared object change distributes the changes to each of participants and and verifies to participant that the change was accepted. Collaboration server transmits the changes to SO to collaboration edge servers and each of which continues to distribute the changes to SO to each of participants .

In another example of operation participant attempts to change one of data slots of SO F. Participant transmits the proposed change to collaboration edge server along with the container version numbers of SO F ver 11. Due to an abnormality in communication between collaboration edge server and collaboration server the container version of SO A has not been updated beyond version 11 even though the main instance of SO is version 13. However because SO F is version 11 and SO A of collaboration edge server is version 11 collaboration edge server forwards the change request including the container version number of SO A F to collaboration server . Collaboration server compares the container version of SO A F against the version of the main instance SO and determines that the proposed change is to be rejected. Collaboration server sends the rejection notification to collaboration edge server which notifies participant that the proposed change was rejected. During this rejection communication between collaboration server and participant collaboration server sends the updated data slots to collaboration edge server and participant to update the particular data slots of data slots of both SO A and SO F.

It should be noted that during the update and change request process selected embodiments of the present invention transmit only the data changed in the particular slot of the shared object. This selective transmission reduces the required bandwidth and data processing that occurs in any of the entities from collaboration server to collaboration edge servers to participants .

It should also be noted that in additional and or alternative embodiments of the present invention as the collaboration edge server rejects a proposed change it does not automatically update the shared object version on the requesting entity. Various embodiments of the present invention may provide for a signal back to the requesting entity that it should update its shared object version from the main collaboration server before requesting another change.

Participants each connect to the electronic meeting managed by central meeting server through collaboration edge server . Moreover participants and which connect using mobile phones connect to collaboration edge server through Telco . This connection between participants and Telco and collaboration edge server included technology described in commonly assigned co pending U.S. patent application Ser. No. 11 263 582 entitled SELECTIVELY PORTING MEETING OBJECTS the disclosure of which is incorporated herein. Embodiments of this described technology allow parts of the electronic meeting to be transmitted and presented to participants and on the more limited capability of the mobile phone.

Participants and connect into the electronic meeting run by central meeting server through collaboration edge server . Another connection into collaboration edge server is another edge server collaboration edge server . Participants and connect into the electronic meeting managed by central meeting server through collaboration edge server and collaboration edge server . A connection into collaboration edge server is an edge server cluster collaboration edge server cluster which is a farm of multiple collaboration edge servers that operate together in a server cluster. Therefore participants and each connect to the electronic meeting through one of the edge servers in collaboration edge server cluster .

When an electronic collaboration system includes multiple vertical layers such as electronic meeting system as opposed to mainly horizontal layers such as electronic collaboration system the described embodiment of the present invention may also operate to streamline the management of the shared objects by the intermediate collaboration edge servers. For example participant desires to change the data in slot of SO D. Participant transmits to collaboration edge server cluster the proposed change to slot the container version number of slot ver 1 and the container version number of SO D resident on participant ver. 4 . Collaboration edge server cluster checks the transmitted versions against the container version number of SO C ver. 4 . Because the version numbers of the shared object SO match collaboration edge server cluster forwards the change request up to collaboration edge server .

In the further transmission of the change request collaboration edge server cluster transmits the proposed change and the slot and container version numbers of the local shared object instance SO C D. Collaboration edge server checks the transmitted container version number against its own local shared object instance SO B. Again all versions of SO B and C D are version 4. With the match collaboration edge server transmits the change request up to collaboration edge server .

As before the transmission includes the proposed change to slot and the two version numbers. Collaboration edge server compares the received container version number against its own instance of the shared object SO A. However because the container version of SO A is 6 instead of 4 collaboration edge server rejects the requested change. This rejection in the shared object administration system is again performed by an edge server without increasing the load on central meeting server .

Moreover collaboration edge server does not merely reject the change and continue operation as normal. With the rejection collaboration server sends a complete copy of its version of the shared object SO A. Thus as the change rejection is propagated from collaboration edge server to edge server to edge server cluster and then participant the shared object version is updated on each of SO B C D to version 6. Here again an edge server collaboration edge server provides updating of the shared object SO without requiring any additional processing power from central meeting server . This distribution of selected portions of the meeting system management allows central meeting server to operate much more efficiently.

The program or code segments making up the various embodiments of the present invention may be stored in a computer readable medium or transmitted by a computer data signal embodied in a carrier wave or a signal modulated by a carrier over a transmission medium. The computer readable medium may include any medium that can store or transfer information. Examples of the computer readable medium include an electronic circuit a semiconductor memory device a ROM a flash memory an erasable ROM EROM a floppy diskette a compact disk CD ROM an optical disk a hard disk a fiber optic medium and the like. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels optical fibers air electromagnetic RF links and the like. The code segments may be downloaded via computer networks such as the Internet Intranet and the like.

Bus is also coupled to input output I O controller card communications adapter card user interface card and display card . The I O adapter card connects storage devices such as one or more of a hard drive a CD drive a floppy disk drive a tape drive to computer system . The I O adapter is also connected to a printer not shown which would allow the system to print paper copies of information such as documents photographs articles and the like. Note that the printer may be a printer e.g. dot matrix laser and the like a fax machine scanner or a copier machine. Communications card is adapted to couple the computer system to a network which may be one or more of a telephone network a local LAN and or a wide area WAN network an Ethernet network and or the Internet network. User interface card couples user input devices such as keyboard pointing device and the like to the computer system . The display card is driven by CPU to control the display on display device .

Although the present invention and its advantages have been described in detail it should be understood that various changes substitutions and alterations can be made herein without departing from the spirit and scope of the invention as defined by the appended claims. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the disclosure of the present invention processes machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present invention. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

