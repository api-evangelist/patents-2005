---

title: Reproducing apparatus, reproducing method, reproducing program, recording medium, and data structure
abstract: A state transition of a player operation is explicitly defined to facilitate the production of interactive contents. As a player model for reproducing a disk, a model including a player  for reproducing a stream, a platform  providing an interface between the player  and a hardware, and a script player  for realizing a scenario intended by a content producer is conceived. The states of the player  are defined by four states defined by combinations of two states as to whether the play list reproduction is performed or not and two states as to whether the command  is accepted or not. The state transition of the player  among the four states is generated by a method  from the script layer , but not by the player  itself or the command . The states of the player  are small in number, and the conditions for state transition are definite. Therefore, the interactive contents can be easily produced and mounted on devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08369683&OS=08369683&RS=08369683
owner: Sony Computer Entertainment Inc.
number: 08369683
owner_city: Tokyo
owner_country: JP
publication_date: 20051110
---
This invention relates to a reproducing apparatus a reproducing method a reproducing program a recording medium and a data structure in which the reproduction of a program recorded in a large capacity recording medium can be easily controlled.

It is a long time since the DVD digital versatile disc appeared as a random access and removable recording medium. In recent years a disk shaped recording medium larger in capacity and more convenient to carry than DVD has been under development.

A DVD Video has been laid down as a standard for recording video contents in DVD. According to DVD Video the DVD player in disk reproduction operation can assume various states. In DVD Video the state that can be assumed by the DVD player are classified into five types of what is called domains and a model in which transition is made between the domains according to various conditions is used in the DVD player. Specifically the DVD domains can be regarded as state variables having five possible values. The DVD player monitors the state variables to grasp the type of the contents being read from the disk.

The first play domain in 1 is defined as the first section of the disk and the preparatory state for reproduction in the DVD player. No reproduction command is considered valid. The video manager menu domain in 2 is defined as the main menu on the whole disk or the whole disk surface and indicative of the display of the title menu. The command related to the menu is considered valid. The video title set menu domain in 3 is defined as the menu or the submenu sub picture language audio or angle of the title or the title group and indicative of the root menu or submenu. The title domain in 4 is defined as the video contents in the title and the reproduction command is considered valid. The stop state in 5 is defined as the state in which the head has left the position for disk reproduction and returned to the original position and the reproduction command is considered valid.

The navigation command for controlling the operation of the DVD player is limited by the domain used for the current state. The SELECT BUTTON command for selecting a predetermined item from the menu for example is significant as long as the menu is displayed. Specifically the SELECT BUTTON command is significant in either state of the video manager menu domain of 2 or the video title set menu domain of 3 . The FAST FEED command designating the video reproduction higher in speed than the normal unity speed for example is not significant as long as the player is stationary or the menu screen configured with a still image is on display. In other words the FAST FEED command is significant in the title domain.

These domains of DVD Video are described in for example Jim Taylor New Book on DVD Anatomy 1st edition Nexus Intercom Ltd. Jun. 7 2003 p. 271 Non Patent Document 1 .

The conventional DVD Video described above has many domain types and detailed conditions for state transition between the domains thereby posing the problem that it cannot be easily mounted on the DVD player.

Another problem is that unless the transition between the domains is fully understood the disk production is impossible and it is difficult for the content producer to produce the disk. Specifically due to the many domain types and the detailed conditions for transition between the domains the transition between domains cannot be fully grasped. This imposes a heavy burden on the producer in producing the disk of a complicated configuration.

Further the domain name and the actual operating method are not always coincident with each other and therefore the necessity of the significance of existence of the domains is small. This poses the problem that the many domain types coupled with the detailed conditions for transition between the domains constitute a factor for increasing the burden of disk production on the part of the producer.

In the DVD Video for example as described above the title domain and two types of menu domains the video manager menu domain and the video title set menu domain are defined. Originally the main content such as the original story of the movie recorded in DVD should be reproduced in the title domain. Actually however the reproduction of the original story of the movie in the menu domain poses no problem. Although commands are different for transition between domains however the player operation is not different between the menu domain and the title domain after state transition to these domains. This is by reason of the fact that both the menu reproduction in the menu domain and the reproduction of the original story of the movie in the title domain are realized by a common logic structure called PGC program chain with the content data and the related reproduction control program combined.

This poses the problem that the otherwise free content production is restricted. Specifically the determination of a given content as a menu or a title somewhat depends on the subjective viewpoint of the disk producer. Assuming that in the case where the original story of the currently reproduced movie has branches for example the contents employing the interactiveness is conceived by displaying the select button to select any one of the branches. In this case the method using the conventional DVD Video is ambiguous as to which the menu domain or the title domain is to be used for reproducing the contents displayed by the select button. In the case where it is desired to prepare after the particular content a content having interactiveness for example the state transition is hard to predict and the operation is liable to be difficult to verify.

Accordingly it is an object of this invention to provide a reproducing apparatus a reproducing method a reproducing program a recording medium and a data structure in which the state transition of the player operation is positively defined and the production of the interactive contents facilitated.

To solve the above described problems the invention as recited in claim is a reproducing apparatus for reproducing content data recorded in a recording medium including read means for reading data from a recording medium having recorded therein content data including at least one of a video stream and an audio stream and a reproduction control program for controlling the reproduction of the content data player means for reproducing the content data in accordance with the reproduction control program and control command output means for giving a control command corresponding to a user operation to the player means characterized in that the player means controls the reproduction of the content data based on four states defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command from the control command output means is accepted or not.

The invention as recited in claim is a reproducing method for reproducing content data recorded in a recording medium characterized in that the reproduction of content data by player means in accordance with a reproduction control program read from the recording medium having recorded therein the content data including at least one of a video stream and an audio stream and the reproduction control program for controlling the reproduction of the control data is controlled based on four states of the player means defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command corresponding to a user operation is accepted or not.

One embodiment of the invention includes a reproducing program for causing a computer system to execute a reproducing method for reproducing content data recorded in a recording medium characterized in that the reproducing method is such that the reproduction of content data by player means in accordance with a reproduction control program read from a recording medium having recorded therein the content data including at least one of a video stream and an audio stream and the reproduction control program for controlling the reproduction of the content data is controlled based on four states of the player means defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command corresponding to a user operation is accepted or not.

The invention as recited in claim is a computer readable recording medium having recorded therein a reproducing program for causing a computer system to execute a reproducing method for reproducing content data recorded in a recording medium characterized in that the reproducing method is such that the reproduction of content data by player means in accordance with a reproduction control program read from a recording medium having recorded therein the content data including at least one of a video stream and an audio stream and the reproduction control program for controlling the reproduction of the content data is controlled based on four states of the player means defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command corresponding to a user operation is accepted or not.

One embodiment of the invention includes a computer readable recording medium having recorded therein content data including at least one of a video stream and an audio stream and a reproduction control program for causing player means to control the reproduction of the content data characterized in that the reproduction control program is executed in such a manner that the player means for controlling the reproduction of the content data is instructed to control the reproduction of the content based on four state defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command corresponding to a user operation is accepted or not.

The invention as recited in claim is a data structure comprising content data including at least one of a video stream and an audio stream and a reproduction control program for causing player means to control the reproduction of the content data characterized in that the reproduction control program is executed in such a manner that the reproduction of the content is controlled by giving a reproduction control instruction to the player means for controlling the reproduction of the content data based on four states defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command corresponding to a user operation is accepted or not.

One embodiment of the invention includes a reproducing apparatus for reproducing content data recorded in a recording medium including a read unit for reading data from a recording medium having recorded therein content data including at least one of a video stream and an audio stream and a reproduction control program for controlling the reproduction of the content data a player unit for playing the content data in accordance with the reproduction control program and a control command output unit for giving a control command corresponding to a user operation to the player unit characterized in that the player unit controls the reproduction of the content data based on four states defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command from the control command output unit is accepted or not.

As described above according to one embodiment of the invention the reproduction of the content data performed by the player means in accordance with the reproduction control program read from the recording medium having recorded therein the content data including at least one of the video stream and the audio stream and the reproduction control program for controlling the reproduction of the content data is controlled based on four states of the player means defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according whether the control command corresponding to the user operation is accepted or not. Therefore the number of the states of the player means is reduced and the understanding of the operation of state transition is facilitated thereby facilitating the mounting of the player while at the same time reducing the burden of content production.

According to the invention as recited in claim there is provided the computer readable recording medium having recorded therein the content data including at least one of the video stream and the audio stream and the reproduction control program for the player means to control the reproduction of the content data wherein the reproduction control program gives a reproduction control instruction to the player means for controlling the reproduction of the content data based on four states defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command corresponding to the user operation is accepted or not thereby to control the content reproduction. Therefore even the content requiring the complicated control operation can be easily produced.

According to the invention as recited in claim there is provided the data structure including the content data including at least one of the video stream and the audio stream and the reproduction control program for the player means to control the content data reproduction wherein a reproduction control instruction is given to the player means for controlling the content data reproduction based on four states defined by combinations of two states classified according to whether the content data is reproduced or not and two states classified according to whether the control command corresponding to the user operation is accepted or not thereby to control the content reproduction. Therefore even a content requiring a complicated control operation can be easily produced and provided as a data structure.

According to this invention the state of the movie player for reproducing the play list are defined including two states i.e. a stop state and a play state from the viewpoint of play list reproduction and two states i.e. a normal mode and a menu mode based on whether a control command corresponding to a user operation is accepted or not and the play list reproduction is controlled by state transition among these four states. As a result the invention has the advantage that the reproduction of the AV stream can be controlled from a script program.

Another advantage is that the number of states of the movie player is small and the state definition is clear. Thus the conditions for generating the state transition and the operation of generating the state transition are easily understood thereby facilitating the mounting of the player for reproducing the AV stream.

Further the number of states of the movie player is small and the state definition is clear. Therefore the conditions for generating the state transition and the operation for generating the state transition are easily understood thereby making it easier for the content producer to produce the contents having the interactiveness.

First to facilitate the understanding a system applicable as an embodiment of the invention is briefly explained. According to an embodiment of the invention a player model is described using a script language called an ECMA script. The ECMA script is a script language for a cross platform based on JavaScript registered trademark laid down by ECMA European Computer Manufacturers Association . The ECMA script is suitably used for the player model according to the invention for its high affinity with an HTML text and the possibility of its own object definition.

Specifically a conventional DVD Video uses a non general purpose command defined by the DVD Video standard to describe a control program for realizing an interactive function. The control program is embedded in a plurality of files at a plurality of points in a data file or distributively in an AV stream file. The conditions for and the order of execution of the control programs thus embedded are defined by the DVD standard.

In such a DVD Video system a general purpose content production system is difficult to construct and therefore the story is produced according to a predetermined script i.e. the contents are produced using a template. In producing a complicated content that cannot be dealt with a template on the other hand the first step is to prepare a content production system as a custom made system. According to the embodiment of the invention this problem is solved by using the ECMA script which is a general purpose script language high in extensibility to control AV contents.

In the description that follows a standard based on the embodiment of the invention using the script language based on the ECMA script is called a UMD Universal Media Disc registered trademark video standard. Also a portion of the UMD video standard relating to the script is specifically called a UMD video script standard.

The UMD video script will be explained briefly. shows a layer structure of the UMD video standard. In the UMD video standard a three layer structure including a script layer a play list layer and a clip layer is defined and the stream management is performed based on this structure.

In the UMD video standard digitally coded video and audio data and subtitles are handled as a multiplexed MPEG2 stream as a packetized elementary stream of MPEG2 Moving Pictures Experts Group 2 . The elementary stream of the video and audio data and subtitles multiplexed into the MPEG2 stream is called a clip AV stream. The clip AV stream is stored in a clip AV stream file. At the same time as recording a clip AV stream file the clip information file is prepared in one to one correspondence with the clip AV stream file. A set of the clip information file and the corresponding clip AV stream film is called a clip.

The clip is what is called a unit of disk recording and the order in which the clip is reproduced is managed by the play list layer higher than the clip. The play list layer is for designating a clip reproduction path and includes one or a plurality of play lists. The play list is a mass of play items. The play item includes a set of In points and Out points indicating a clip reproduction range. By connecting the play items the clip can be reproduced in an arbitrary order. The play item can be designated by doubling the clips. The In and Out points of the clip AV stream file are designated by a time stamp in clip time which is converted into a byte position on the clip AV stream by the information in the clip information file.

The play list has only a structure for sequentially reproducing the play items designating the whole or a part of the clips and the branching of the order of reproduction or the interactiveness with the user using only the play list cannot be realized. According to an embodiment of the invention a plurality of play lists are collected into a single file PLAYLIST.DAT .

The script layer is constructed by a UMD video script extended from the ECMA script of the language specification. In the UMD video script the extension for realizing a function unique to the UMD video is added based on the ECMA script.

The script layer is higher than the play list layer and configured with a play list reproduction instruction and a command string for setting the player. The play list reproduction with the condition branching such as to select any one of the streams prepared for a plurality of languages or to change the reproduction flow to a play list selected according to a certain condition can be realized by a command of the script layer. An example of the application using the play list reproduction with this condition branching is the multistory. This script layer introduces the interactive function with the user.

According to this embodiment of the invention the script layer is configured with a file called resource file. The resource file includes script data script program described based on an actual ECMA script sound data for outputting an effect sound at the time of button operation and a screen design having image data used for a background image of a menu screen and image data bitmap data for displaying GUI parts such as a button image.

A plurality of the resource files can exist. Also according to this embodiment of the invention the resource file is given a file name according to a predetermined naming rule. An extension RCO of the file name for example indicates that the file is a resource file.

Next a model of a reproducing apparatus player for reproducing data in accordance with the UMD video standard i.e. a player model will be explained. The player first reads a resource file a play list file and a clip information file from a disk and in accordance with the predetermined order of reproduction reads a clip AV stream file and reproduces video and audio data and subtitles.

According to the language specification of the script program a function block for reproducing a play list is mounted as an object in the script program. The object for the play list reproduction is called movie player object according to the UMD video standard. The play list reproduction instruction and the command for setting the player constitutes a method associated with the movie player object. The movie player object is controlled by the method from the script layer. In the process a function is required to notify a state change and a reproduction position from the movie player object to the script layer. This corresponds to the issue of an event by the movie player object to the script program and a process corresponding to this event is described as an event handler.

As described above a model is constructed in which the information is transmitted from the movie player object to the script program by an event and the movie player object is controlled according to the script program by a method so that the reproduction of the clip AV stream can be controlled by the script program.

Incidentally the movie player and the movie player object are considered to represent substantially the same object and therefore designated by the same reference numeral below.

In in the movie player a clip AV stream file is read and the clip AV stream thus read is decoded and displayed based on a play list and a database of clip information in accordance with a method from a lower layer a native implementation platform in the case of induced by a user input or a script layer constituting a higher layer.

The interior of the movie player object is dependent on the mounting of a UMD video player for playing a UMD video and API application programming interface such as a method and a property is provided as an object in the form of a black box from the script layer . The UMD video player indicates an actual device having mounted the movie player thereon. All the UMD video players have a movie player mounted thereon in accordance with the UMD video standard and have the compatibility for reproduction.

As shown in the movie player object has three input output paths including a path for receiving a control command from the native implementation platform a path for notifying an event to the script layer and a path for receiving a method from the script layer .

The control command controls the operation of the movie player object from the native implementation platform . The native implementation platform is for example an interface between the parts specific to a device and the movie player in the UMD video player as an actual device. The event is a script event for the script layer from the movie player . The method is designated by the movie player from the script program of the script layer .

The movie player object includes a database containing a play list of the UMD video standard and clip information therein. The movie player object invalidates masks the user input or executes a process for converting a time designated reproduction position into a byte position in the clip AV stream by using the database .

A playback module in the movie player object decodes the clip AV stream constituting the video and audio data and subtitles multiplexed as MPEG2 PS program stream . The playback module has two states of play and stop and transits between these two states in accordance with the control instruction and the method . Incidentally the clip AV stream is not limited to the MPEG2 PS. MPEG2 TS transport stream for example if used as a clip AV stream can also be handled in similar manner as a model.

The script player executes the script program based on the UMD video script standard to control and display the movie player object on the screen. The script player plays a role of realizing a scenario intended on the part of a content producer. The script layer issues the method to the movie player object and receives the event from the movie player object . The script layer exchanges with the native implementation platform a key event corresponding to the user input or a method instructing the native implementation platform to draw a screen.

The native implementation platform has various functions other than specified in the UMD video standard. According to this embodiment of the invention the method exists in which the script layer acts on the native implementation platform . Therefore the object with the function thereof abstracted is defined also for the native implementation platform and the method is regarded as associated with the particular object on the script program. This is because the method belongs to the object. Thus a controller object is defined in the native implementation platform and the method is defined as that for the controller object .

The buttons arranged on the menu screen for example are drawn by the native implementation platform based on the method delivered from the script program of the script layer to the native implementation platform . Whenever the user operates the buttons for selection or determination entry the key event corresponding to the user input is notified from the native implementation platform to the script layer and the script program in the script layer executes the process corresponding to the key input based on the key event .

As described above the functions are distributed in such a manner that the operation of decoding and controlling the display of the video audio and subtitles is taken charge of by the movie player and the process relating to the arrangement or display of the part image hereinafter referred to as the GUI parts constituting the GUI graphical user interface such as buttons and the operation of selecting or determining the GUI parts are executed by the script player .

The native implementation platform forms a basis for the operation of the movie player object and the script program. In the case where the actual UMD video player is hardware for example the native implementation platform is mounted in a way unique to the hardware to act as an intermediary between the hardware and the player model.

The native implementation platform for example receives a user input from the user and determines whether the user input thus received is an instruction to the movie player or an instruction issued to the button drawn or displayed in the script layer . The native implementation platform upon determination that the user input is an instruction to the movie player converts the user input into a control command constituting an internal control instruction to the movie player and issues a control instruction to the movie player .

The native implementation platform upon determination that the user input is an instruction to the GUI part drawn and displayed in the script layer on the other hand notifies the script layer of the key event corresponding to the user input . Then the button image can be displayed on the screen for example based on the method designated from the script layer in accordance with the particular key event . Specifically the native implementation platform and the script layer can receive and deliver the event and the method directly without the intermediary of the movie player .

Also the native implementation platform can access the property of the movie player as described later and view the status of the movie player .

Next the movie player will be explained in more detail. shows an exemplary internal configuration of the movie player . As described above the movie player is configured with a database and a playback module . The database is an area for storing information on a play list read from a disk and information on a clip i.e. clip information.

The playback module includes a decoder engine and a property representing a value indicating the state of the playback module . The property like the language code for example is of two types including a property A read only parameter with a value thereof determined by the initialization of the movie player and a property B player status changing in value with the state of the playback module .

The value of the property A which is determined by initialization is set by a native system such as an actual device and not changed by the play list the clip information or the script program. The value of the property A is considered capable of being read only from the script program. The value of the property B indicating the state of the playback module on the other hand can be read from the script program on the one hand and can be written from some script program on the other hand.

Incidentally this operation model assumes that the play list and the clip information are preloaded from the disk before reproduction of the clip AV stream. As an alternative however the operation determined by the movie player model can be realized for other mounting package .

The movie player object reproduces the play list in accordance with the designation from the script player or the native implementation platform . The movie player for example refers to the database and acquires a reproduction position of the clip AV stream corresponding to the designated play list as a byte position in the file. In the playback module the decoder engine controls the decoding of the clip AV stream based on the reproduction position information.

The movie player as shown in has two states of play and stop in accordance with the play list reproduction condition. The play state is a state in which the play list is designated and reproduced. In addition to the normal reproduction the play state includes various states i.e. the variable speed reproduction such as double speed half speed forward fast feed or reverse fast feed and pause. What is frame by frame advance in which the reproduction is advanced or returned by frame is a state in which pause and play states are alternated. The stop state is where the play list is not reproduced. In stop state the play list is not selected and the value of the player status indicating number of currently reproduced play list is not determined.

The state of the movie player for example accompanies the state transition of the play and stop states in the decoder engine in the movie player and the value of the property B is updated in accordance with the state transition of the decoder engine .

A resume information is stores a state immediately before the stop state. In the case where the movie player decodes a given play list in a play state for example the transition to the stop state causes the state immediately before the stop state to be stored. A plurality of items of the resume information can be stored in a way recognizable by each disk title in a nonvolatile memory of the player as hardware. The disk for example has unique identification information hereafter referred to as title ID for each disk title and stores the resume information in association with the title ID. By doing so based on the information of the resume information the disk reproduction can be started from a position immediately before the stop state from which the disk having a title corresponding to the title ID may have transferred to the play state.

The event model of the movie player will be explained. The movie player generates various events in the play state for playing the play list. These events induce the execution of the processing program called the event handler described in script. The event handler is a method accessed by the generation of an event. The program execution model for starting the execution of the processing program upon generation of an event is called event driven model. In the event driven model an irregular event is generated and a program prepared with event generation as a motive is executed. According to this embodiment of the invention the script program controls the operation of the movie player object with an event handler group.

The event handler accessed in accordance with the event generation is selected by the system and therefore the content producer is not required to describe in the script program the process of determining a particular event which may be generated.

As described above various events are assumed to occur during the operation of the player and by notifying the event generation to an upper program the upper program can grasp the player state. In the upper program the program event handler executed at the time of notifying of each event generation is prepared to provide for the generation of various events. The event and the event handler will be explained in more detail later.

In the case where the event handler is not described by the content producer the operation built in the player default event handler specified in the standard is executed or the event is ignored and nothing executed. In the case where nothing is required to be executed the event handler corresponding to the event is not described thereby to ignore the event positively.

Other possible event models include an event listener model in which a listener corresponding to a given event is registered by an object in a player object and in the case where the event generated in the player object is a registered event the event is transmitted from the player object to the object having registered therein the particular event and the corresponding method is executed by the object and a single method model in which a single method is accessed regardless of an event which may be generated.

The event model according to this embodiment is simpler than the event listener model requiring the process of event registration and cancellation of the event registration. The single method model on the other hand requires the description in the method the pre process of knowing a particular event generated and switching the prepared processing routine for each event. The method is mounted by the content producer and therefore though simple as a model imposes a heavy burden on the content producer. Further one large processing program method is accessed each time an event is generated and therefore a large memory area is occupied while the execution speed is decreased. The model in which the processing program event handler is prepared for each event according to this embodiment of the invention is considered advantageous from this point of view.

Next the external specification of the movie player object will be explained. Generally an object defined by a language according to the ECMA script language specification has a property and a method. The movie player object according to this embodiment of the invention as explained already with reference to similarly have a property and a method. The property can be read and written directly from an external object by designating an object name and a property name involved. Further by defining a method setXXX XXX is the property name involved for setting a property value and a method getXXX for reading a property value the property of other objects can be read and written by the method.

Once a disk is loaded a script file to be read from the disk is determined based on the language code indicated in the property languageCode set in the read only parameter A. In the case where the loaded disk lacks the script file corresponding to the language a default script file is read. For example of all the plurality of script files a file arranged at the head on the disk is read as a default script file.

The dual mono is a mode in which the left and right L R stereo audio channels are each used as an each independent monaural audio channel.

Information on each property associated with this player status B exists in the case where the movie player is in reproduction operation or in pause. Once the operation transfers to the stop state each property associated with the player status B at the particular time point is backed up as the resume information resume information . At the same time the contents of the player status B may be cleared.

According to the UMD video standard the video can be displayed in a part of the display screen. The following four methods relate to this video display. A method setPos sets a video display position. A method getPos acquires a video display position. A method setSize sets a video display size. A method getSize acquires a video display size.

Actually the movie player and the native implementation platform are configured integrally with each other. Specifically in accordance with the relation between the UMD player as hardware actually loaded with a disk for reproduction and the software for controlling the UMD player a particular part processed by hardware and a particular part processed by software are dependent on the configuration at the time of mounting. In the case where the UMD player is configured with a personal computer for example the parts other than the disk drive can be configured as software. In the case where the UMD player is configured as a simple unit on the other hand a video decoder and an audio decoder other than the disk drive can be configured as hardware. The methods commands and events processed between the movie player and the native implementation platform therefore are not limited to the explicit exchange as an example thereof is shown in .

With regard to the key input from the user on the other hand as already explained with reference to the user input is first received by the native implementation platform . Specifically the native implementation platform receives the key input from the user as the user input and determines whether the user input is a command to the movie player or an event for the script program of the script layer . In accordance with the result of determination the native implementation platform generates a control command or a key event and notifies the corresponding upper layer movie player or the script layer of them.

A key VK NEXT provides a function corresponding to a next designation key for inputting a value indicating next . A key VK PREVIOUS provides a function corresponding to a previous designation key for inputting a value indicating previous . By use of the key VK NEXT and the key VK PREVIOUS for example the transfer to the preceding or following chapter can be designated.

A key VK ANGLE provides a function corresponding to a video angle switching key designating the angle switching of a multi angle video. A key VK SUBTITLE provides a function corresponding to the subtitle switching key for switching the English subtitle Japanese subtitle or subtitle display non display. A key VK AUDIO provides a function corresponding to an audio switch for switching the audio setting such as surround or bilingual. A key VK VIDEO ASPECT provides a function corresponding to an aspect switching key designating the video aspect ratio switching.

A key VK MENU provides a function corresponding to a menu key for displaying the menu. A key VK ENTER provides a function corresponding to an ENTER key for designating determination . A key VK RETURN provides a function corresponding to a key designating the return of the process by one step.

Keys VK COLORED KEY  VK COLORED KEY  VK COLORED KEY  VK COLORED KEY  VK COLORED KEY  and VK COLORED KEY  provide functions corresponding to a colored function key a colored function key a colored function key a colored function key a colored function key and a colored function key respectively.

The key input shown in and the key input shown in are different in function and therefore the destination of notification is required to be specified by the native implementation platform . As described above the designation relating to the reproduction of the video audio and subtitles is issued by the key input shown in . The native implementation platform upon receipt of the key input shown in as a user input converts the received key input to commands shown in B and C and notifies the movie player of them.

The key input shown in on the other hand is the user input for the GUI and therefore this user input is required to be notified to and processed by the script layer constructing the screen and arranging the buttons. The native implementation platform upon receipt of the key input shown in as the user input converts it into the event shown in and notifies the script layer of it. shows an example of the event corresponding to this key input.

The commands shown in B and C are described in more detail. A command uo timeSearch playListTime designates the reproduction of a currently reproduced play list from a designated time. An argument playListTime indicates a time when the head of the play list is set to 0. This command cannot designate the play list number and therefore the time indicated by the argument playListTime is the designated time included in the range of the currently reproduced play list. A command uo play designates the reproduction start at unity normal speed. A starting position is determined based on the resume information . In the absence of the information corresponding to the resume information the user operation is regarded as invalid. This command corresponds to the execution of the method play without designation of the play list number. Also the play list number cannot be designated with this command by the user operation.

A command uo playChapter chapterNumber designates the reproduction start from a chapter designated by the argument chapterNumber of the currently reproduced play list. In the absence of chapter designation the reproduction start from the head of the currently reproduced chapter is designated. This corresponds to the method playChapter without designation of the chapter number. A command uo playPrevChapter designates the reproduction start from the chapter immediately preceding to a current chapter. A command uo playNextChapter on the other hand designates the reproduction start from a next chapter.

A command uo jumpToEnd designates a jump to the end of the play list. This command corresponds to the user operation to instruct the movie player to suspend the reproduction and generate the event playListEnd . In accordance with this command the script layer executes the event handler onPlayListEnd . A command uo forwardScan speed designates the forward reproduction at a reproduction speed designated by an argument speed . A command uo backwardScan speed on the other hand designates the reverse reproduction at the reproduction speed designated by the argument speed . The argument speed in the commands uo forwardScan speed and the command uo backwardScan speed depends on the mounting of the UMD video player.

A command uo playStep forward designates the forward frame by frame advance. A command uo playStep backward designates the reverse frame by frame advance . A command uo pauseOn designates the temporary stop of the reproduction based on the user operation. A command uo pauseOff cancels the temporary stop of the reproduction based on the user operation.

A command uo setAudioEnabled boolean designates the on off operation of an audio stream. At the time of execution of this command the value of the flag audioFlag is also changed to the corresponding contents. A command uo setSubtitleEnabled boolean designates the on off state of a subtitle stream. At the time of execution of this command the value of the flag subtitleFlag is also changed to the corresponding contents. A command uo angleChange designates the change in display angle. Upon transmission of the user operation based on this command to the movie player the movie player notifies the script layer of the event angleChange . A command uo audioChange andioStreamNumber designates the change in an audio stream to be reproduced. A command uo changeAudioChannel value designates the audio channel switching or the one channel switching at the time of dual mono reproduction. At the time of execution of this command a value of a flag audioFlag is also changed to the corresponding contents. A command uo subtitleChange subtitleStreamNumber designates the change in a subtitle stream to be reproduced.

The relation between the events shown in and the method of the movie player for the events will be explained in more detail. An event menu is to jump to the menu. This event is notified not to the movie player but to the script layer from the native implementation platform . The script layer upon receipt of this event menu executes an event handler onMenu . An event exit is issued from the native implementation platform when the UMD video application is ended by the native implementation platform . Once this event exit is received by the script layer the script player executes an event handler onExit .

An event resourceChanged is issued from the native implementation platform upon generation of the resource file switching. Upon receipt of this event resourceChanged by the script layer the script layer executes an event handler onResourceChanged .

An event up an event down an event left an event right an event focusIn an event focusOut an event push and an event cancel are generated in the case where a button image constituting a GUI part displayed on the screen is focused. These events are notified not to the movie player but to the script layer from the native implementation platform . Incidentally the wording the case where a button image is focused is indicative of the state in which a cursor for designating a position on the screen indicates the display coordinate of the button image and the particular button image is in a selectable state. The event up the event down the event left and the event right are generated when the focus of the bottom image moves up down leftward and rightward respectively. The event focusIn is generated in the case where a given button image is focused and the event focusOut generated in the case where the button image in focus is displaced out of focus. Also the event push is generated in the case where the button image in focus is depressed. The event cancel is generated in the case where the button image depression is canceled.

An event autoPlay and an event continuePlay designate the start of the script execution in the script layer . The event autoPlay designates automatic start of the script at the time of loading the disk. The event continuePlay designates the resumption of script execution from the time point of the previous suspension based on the resume information for example at the time of loading the disk.

For the event shown in the program executed upon generation of the event exists. The program corresponding to this event is called event handler. The correspondence between the event and the event handler can be established by attaching a name for example. As an example the event handler name is obtained by attaching on to the head of the event name. show exemplary event handlers. The content of the event handler is described by the content producer so that the various operations intended by the content producer can be executed by the UMD video player.

An event mark and an event handler onMark are executed upon detection of the event mark Event mark . The event mark is embedded for example in the play list and detected by the movie player during the reproduction of the play list. Upon detection of the event mark by the movie player the event mark is notified from the movie player to the script layer . The script layer executes the event handler onMark corresponding to this event mark . In a similar fashion an event playListEnd and an event onPlayListEnd are executed at the end of the play list. An event chapter and an event handler onChapter are executed upon detection of a chapter mark Chapter mark . The chapter mark is embedded for example in the play list and detected by the movie player during the reproduction of the play list.

An event angleChange and an event handler onAngleChange are executed upon designation of the angle change by the user operation. In the case where the key input VK ANGLE is input to the native implementation platform as a user input in accordance with the user operation for example the native implementation platform converts the particular user input into the command uo angleChange and delivers it to the movie player . The movie player generates the event angleChange in accordance with the command uo angleChange and delivers it to the script layer . The script layer executes the event handler onAngleChange corresponding to the event angleChange . In a similar manner the event audioChange and the event handler onAudioChange are executed upon designation of the audio change by the user operation. An event subtitleChange and an event handler onSubtitleChange are executed upon designation of the subtitle change by the user operation.

The event menu and the event handler onMenu are jumped to the menu. The event menu is notified from the native implementation platform to the script layer for example upon depression of the menu key by the user operation. The script layer upon receipt of this event executes the corresponding event handler onMenu and arranges and displays the GUI part constituting the menu screen in the event handler onMenu . The event exit and the event handler onExit are an event issued from the native implementation platform at the end of the UMD video application by the native implementation platform and the corresponding event handler respectively.

The event exit is notified from the native implementation platform to the script layer upon designation of the end of the UMD video player operation by the user operation etc. The script of the script layer upon receipt of the event exit thus notified can execute the ending process in the event handler onExit .

The event resourceChanged and the event handler onResourceChanged are an event issued from the native implementation platform after the native implementation platform switches the resource file and a corresponding event handler respectively.

The event autoPlay and the event handler on AutoPlay and the event continuePlay and the event handler onContinuePlay respectively start the execution of the script.

Incidentally there exists an event handler for the button other than the event handler of the controller object . The event handler for the button is not deeply associated with this invention and therefore not described.

With reference to the flowchart of an exemplary process for executing a prepared program with the user input event as a motive is briefly explained. shows an example in which in the case where the key designating the reproduction of the next chapter for example next key is depressed by the user during normal reproduction of the disk in the UMD video player the reproduction is started by jumping to the next chapter in accordance with this key input while at the same time displaying the prepared message on the screen.

In the case where the key next is depressed using the remote control commander of the UMD video player by the user during the normal reproduction of the disk by the UMD video player step S for example the key VK NEXT is delivered as the user input to the native implementation platform . The native implementation platform generates a user command uo playNextChapter corresponding to this user input step S . This user command uo playNextChapter is notified to the movie player .

The movie player that has received this command uo playNextChapter searches the database and acquires the position of the next chapter mark based on the position of the current reproduction from the play list information step S . Step S determines whether the next chapter mark exists or not and upon determination that no such a chapter mark exists the current reproduction is continued without chapter jump.

Upon determination in step S that the next chapter mark exists on the other hand the process proceeds to step S. In step S the movie player suspends the current reproduction and acquires the byte position in the clip AV stream file indicating the next chapter mark from the feature point information of the clip information file of the database . In step S the acquired byte position in the file is accessed and the reproduction is started by starting the reading of the stream from the particular position.

Step S and subsequent steps are a series of process for displaying the message notifying the chapter switching on the screen. Once the chapter is switched and the reproduction is started from the head of the chapter the chapter event is generated step S . For example the chapter mark arranged at the head of the chapter is detected by the movie player and the event chapter is generated. This chapter event is notified from the movie player to the script layer . At the time of notification of this event the movie player notifies the script layer also of the chapter number of the chapter to which to be jumped. The script layer starts the execution of the event handler corresponding to the notified event such as the event handler onChapter step S .

In the case under consideration assume that the operation indicating the message notifying the chapter switching if any on the screen is described in the event handler. The script of the script player executes this event handler acquires the chapter number of the jump destination notified from the movie player at the time of event generation step S and issues an instruction to the native implementation platform to display on the screen a predetermined message indicating for example the head of the chapter of the chapter number acquired. The native implementation platform in response to this instruction displays the message on the screen step S and the process by the event handler is ended step S .

By the user operation through the aforementioned process of the key next designating the start of reproduction of the next chapter the chapter is jumped and at the time of starting the reproduction of the next chapter to which the jump is made the message indicating the head of the chapter is displayed on the screen.

As described above the user input event constitutes a motive for changing the state of the movie player and generating a new event and various processes can be executed using the newly generated event.

The player model described above makes possible the reproduction of video audio and subtitles. By generating a certain event at a given time point during reproduction and executing an event handler prepared in advance as preset by the content producer the operation intended by the content producer can be realized. Also in the case of user operation of the player during the play list reproduction a control command is issued from the native implementation platform to the movie player in accordance with the user input by user operation and the player status can be changed as intended by the user. Further the native implementation platform that has received the user input by the user operation of the player notifies the event to the script of the script layer so that the operation prepared by the content producer can be executed in accordance with the user operation.

By constructing the player model in this way the reproduction of video audio and subtitles and the interactive operation can be provided to the user.

Next an exemplary script program of the script layer will be explained. First assume that the flow of the content reproduction as shown in is prepared by the content producer. The content shown in is configured with display elements including play lists a top menu and a message . The play list is to display an alarm text screen automatically when the disk is loaded. The Play list is the original story of the movie constituting the feature of this content. The top menu screen has the GUI part such as the button arranged thereon to designate the reproduction of the play list . Also the message is displayed at an arbitrary time during the reproduction of the play list .

Further the configuration shown in has several event handlers. As soon as the disk is loaded in the UMD player the event handler onAutoPlay automatically reproduces the play list and displays an alarm message. The event handler onPlayListEnd is accessed at the end of the reproduction of the play list and in the example shown in accessed at the end of the play list or . Specifically the event handler onPlayListEnd determines which play list is finished and upon complete reproduction of the play list designates the start of the reproduction of the play list . Also at the end of the reproduction of the play list the event handler onPlayListEnd accesses the top menu screen .

The event handler onMenu is accessed upon operation of the menu key by the user and accesses and displays the top menu on the screen. The event handler onMark is executed with the arrival of the time designated by the mark Mark during the reproduction. In the case shown in the mark Mark is set for the play list and with the arrival of the reproduction of the play list at the time point designated by the mark Mark the message is displayed on the screen.

Specifically in the case of once the disk is loaded in the UMD video player the event handler onAutoPlay is accessed and the play list is reproduced while at the same time displaying the alarm screen. With the arrival at the end of the play list upon lapse of the reproduction time thereof the event handler onPlayListEnd is accessed and the reproduction to the end of the play list is determined. Thus the next Play list is reproduced. Upon user operation of the menu key during the reproduction of the play list the event handler onMenu is accessed and the top menu screen displayed. Also in accordance with the predetermined operation on the top menu screen the event handler onMenu starts the reproduction from the head of the play list . Further with the arrival of the reproduction time of the play list at the time point designated by the mark Mark the event handler onMark is accessed and the message displayed on the screen. Upon reproduction to the end of the play list the event handler onPlayListEnd is accessed and the reproduction to the end of the play list is determined thereby displaying the top menu screen .

The method designating the play list reproduction to the movie player is movieplayer.play . In the parenthesis a number of the play list to be reproduced is described as an argument. Upon complete reproduction of the play list the event playListEnd is generated. Upon generation of the event playListEnd the event handler movieplayer.onPlayListEnd is retrieved from the script. In the process the object event info is delivered to the script together with the event playListEnd . The object event info has stored therein the play list number or the like indicating a particular play list finished. Depending on the content of the object event info the next operation can be changed in this script.

Next the file management structure used according to the UMD video standard will be explained with reference to . The file is managed hierarchically in the directory structure and recorded on the disk. The disk file system is applicable to the file system defined by ISO International Organization for Standardization 9660 or the UDF Universal Disk Format .

Under the root directory a file TITLEID.DAT and a directory VIDEO are placed. Under the directory VIDEO a directory RESOURCE a directory CLIP a directory STREAM and a file PLAYLIST.DAT are placed.

The file TITLEID.DAT is for storing a title identifier different for each title type of content . One file TITLEID.DAT is held for each disk.

Under the directory RESOURCE the resource file JA000000.RCO is placed. The resource file has stored therein as described above the script program constituting the script layer and the data used for constituting the menu screen such as the part data including the image data and the sound data. Under the directory RESOURCE one resource file is normally placed. Nevertheless a plurality of resource files may be placed under the directory RESOURCE . A plurality of the resource files are prepared for each language at the time of preparing a plurality of menus different in display language. Also in this case only one resource file is used at a time.

In the file name of the resource file the extension following the period constituting a delimiter is fixed to RCO thereby indicating that the particular file is the resource file. Also the character string before the period briefly indicates the content of the particular resource file. For example the whole file name of the resource file employs a format CCdannnn.RCO the two leading characters CC indicates the language code corresponding to the resource file the next one character d indicates a flag indicating whether the language code is the default language or not the next a indicates an aspect ratio of the display screen and the next four characters nnnn indicate the identification number. The identification number is determined in such a manner that the same file name is not included in a plurality of resource files.

By laying down the rule of naming the resource file in this way the language attribute of the source data and the aspect ratio of the display screen can be determined by the file name of the resource file. At the time of selecting the resource file an appropriate resource file is determined based on the file name.

Under the directory CLIP one or more clip information files is are placed. In the clip information file the file name is determined by a character string including five to several characters such as 00001 numerical characters in this case before the period constituting the delimiter and the extension CLP following the period. The extension CLP makes it possible to identify that the particular file is the clip information file.

Under the directory STREAM one or more clip AV stream files is are placed. The clip AV stream file has a file name configured with a character string numerical characters in this case of five to several characters such as 00001 before the period constituting the delimiter and the extension PS following the period. The extension PS makes it possible to determine that the particular file is the clip AV stream file. According to this embodiment the clip AV stream file is stored as a multiplex file including the video stream the audio stream and the subtitle stream and identified by the extension PS as a program stream of MPEG2 Moving Pictures Experts Group 2 .

As explained above the clip AV stream file is obtained by compression coding and time division multiplexing of the video data and audio data so that by reading this file and executing the decoding process the video data and the audio data can be obtained. Also the clip information file is for describing the properties of the clip AV stream file and corresponds to the clip AV stream file. According to this embodiment the character string including five to several characters before the extension in the file name are made to coincident in the clip information file and the corresponding clip AV stream file thereby making it possible to easily grasp the correspondence between the two.

The resource file contains the script file containing the description of the script program as explained above and has stored therein the program used to make the disk reproduction according to this embodiment interactive. The resource file is read before the other files stored in the disk.

The file PLAYLIST.DAT is the play list file containing the description of the play list designating the order of reproduction of the clip AV stream. With reference to the internal structure of the file PLAYLIST.DAT will be explained. shows an exemplary syntax showing the entire structure of the file PLAYLIST.DAT . In this case the syntax is shown based on the C language description method used as the program description language for the computer system etc. This is also the case with other syntaxes shown in the drawings.

A field name length has a data length of 8 bits and indicates the length of a name attached to the play list file. A field name string has a data length of 255 bytes and indicates a name attached to the play list file. In the field name string the part with the byte length indicated by the field name length from the head thereof is used as a valid name. In the case where the field name length has the value 10 for example the part of the field name string with 10 bytes from the head thereof is interpreted as a valid name.

A field number of PlayLists has a data length of 16 bits and indicates the number of successively described blocks PlayList . The number of the blocks PlayList equivalent to the number of times indicated in the field number of PlayLists by the for loop on the next line are described. The block PlayList is the play list itself.

An exemplary internal structure of the block PlayList will be explained. At the head of the block PlayList a field PlayList data length is arranged. The field PlayList data length has a data length of 32 bits and indicates the data length of the block PlayList including the field PlayList data length . Then a field reserved for word alignment having a data length of 15 bits and a field capture enable flag PlayList having a data length of 1 bit are arranged. The field reserved for word alignment combined with the flag capture enable flag PlayList having a data length of 1 bit is used to secure alignment at the position of 16 bits in the block PlayList .

The flag capture enable flag PlayList indicates whether the secondary use of the dynamic image associated with the block PlayList including capture enable flag PlayList is permitted or not. In the case where the value of the flag capture enable flag PlayList is 1 for example it indicates that the secondary use of the dynamic image associated with the play list in the reproducing apparatus is permitted.

The flag capture enable flag PlayList though regarded as a 1 bit flag in the aforementioned case is not limited so. For example the flag capture enable flag PlayList may be configured with a plurality of bits to describe the stepwise permission of the secondary use. As an example the flag capture enable flag PlayList is configured with two bits and in the case where the value is 0 the secondary use is totally prohibited while in the case where the value is 1 the secondary use is permitted on condition that the data is compression coded to a predetermined resolution or lower such as 64 pixels by 64 lines. Also in the case where the value 2 the secondary use may be permitted without any restriction. As other alternatives in the case where the bit of two bits is 1 the secondary use is permitted in the application of the content reproduction while in the case where the value of bit is 1 on the other hand the secondary use in other applications such as the wall paper image or the screen saver in the same housing is permitted. In such a case the values of bit and bit can be used in combination.

A field PlayList name length has a data length of 8 bits and indicates the length of a name attached to this block PlayList . A field PlayList name string has a data length of 255 bits and indicates a name attached to the block PlayList . The part of the field PlayList name string with the byte length indicated by the field PlayList name string from the head thereof is used as a valid name.

A field number of PlayItems has a data length of 16 bits and indicates the number of successively described blocks PlayItem . The number of blocks PlayItem equivalent to the number of times indicated in the field number of PlayItem2 by the for loop on the next line are described. The block PlayItem is the play item itself.

The identification information ID is attached to each block PlayItem in the block PlayList . For example number 0 is attached to the first block PlayItem described in the block PlayList followed by the serial numbers 1 2 . . . in the order of appearance of the blocks PlayItem . These serial numbers are used as the identification information of each block PlayItem . The argument i of the for loop repeated as many times as the number of the blocks PlayItem can be used as the identification information of the corresponding block PlayItem . The block PlayItem is followed by the block PlayListMark .

With reference to an exemplary internal structure of the block PlayItem will be explained. At the head of the block PlayItem a field length is arranged. The field length has a data length of 16 bits and indicates the length of the particular block PlayItem . Then a field Clip Information file name length is arranged. The field Clip Information file name length has a data length of 16 bits and indicates the length of a name of a clip information file corresponding to the block PlayItem . A field Clip Information file name has a data length variable by byte and indicates a name of a clip information file corresponding to the block PlayItem . The field Clip Information file name with the byte length indicated by the field Clip Information file name length including the head thereof is used as a valid name. Upon designation of the clip information file by the field Clip Information file name the clip AV stream file corresponding to the particular clip information file can be specified based on the correspondence of the file name described above.

A field IN time and a field OUT time each have a data length of 33 bits and represent time information designating the reproduction start and end positions of the clip AV stream file corresponding to the clip information file designated by the field Clip Information file name in the block PlayItem . By use of the information of the field IN time and the field OUT time the reproduction start can be designated from the part other than the head of the clip AV stream file. In a similar manner the reproduction end at other than the rear end of the clip AV stream file can be designated. The field reserved for word alignment is for adjusting the data length of the data structure to an integer multiple of 16 bits and has a data length of 15 bits.

With reference to an exemplary internal structure of the block PlayListMark will be explained. At the head of the block PlayListMark a field length is arranged. The field length has a data length of 32 bits and indicates the length of the block PlayListMark . Then a field number of PlayList marks is arranged. The field number of PlayList marks has a data length of 16 bits and indicates the number of succeeding blocks Mark . The blocks Mark equal to the number of times indicated in the field number of PlayList marks by the for loop on the next line are described.

An exemplary the internal structure of the block Mark will be explained. At the head of the block Mark a field mark type is arranged. The field mark type has a data length of 8 bits and indicates the type of the block Mark including the particular field mark type . According to this embodiment as an example thereof is shown in two types of marks including the chapter mark and the event mark are defined. The chapter is a search unit for dividing the play list block PlayList and the chapter mark indicates the chapter position in terms of time information. The event mark on the other hand generates the mark event.

A field mark name length has a data length of 8 bits and indicates the length of a name attached to the block Mark . A field mark name string arranged on the bottom line of the block Mark indicates a name attached to the block Mark . The part of the field mark name string with the byte length indicated by the field mark name length including the head thereof is used as a valid name.

The four elements including a field ref to PlayItem id a field mark time stamp a field entry ES stream and a field entry ES private stream id establish correspondence between the block Mark defined on the block PlayList and the clip AV stream file. Specifically the field ref to PlayItem id has a data length of 16 bits and indicates identification information of the block PlayItem . As a result the clip information file and the clip AV stream file are specified.

The field mark time stamp having a data length of 33 bits is used to designate the time of the mark in the clip AV stream file. With reference to this field will be explained briefly. In assume that the play list is configured with three play items PlayItem PlayItem and PlayItem designated as numbers 0 1 and 2 respectively and the time ton the play list is included in the play item PlayItem of number 1. Also assume that the play items of number 0 1 and 2 correspond to the program streams A B and C of the clip AV stream file through the corresponding clip information files respectively.

In such a case in the case where the mark is designated at time point ton the play list the value of the field ref to PlayItem id is set as 1 indicating the play item including the time t and further the time corresponding to the time ton the corresponding clip AV stream file B is described in the field mark time stamp .

Returning to the field mark time stamp is followed by the arrangement of the field entry ES stream and the field entry ES private stream id . The field entry ES stream id and the field entry ES private stream id have the data length of 8 bits respectively and in the case where the block Mark is associated with a specified elementary stream are used to specify the particular elementary stream. The field entry ES stream id and the field entry ES private stream id indicate a stream ID stream id of a packet packet multiplexed with the corresponding elementary stream and a private stream ID stream id of a private packet header private packet header respectively.

Incidentally the stream ID stream id of the packet packet and the private stream ID private stream id of the private packet header private packet header are based on the rule of the program stream of for example the MPEG2 system.

The field entry ES stream id and the field entry ES private stream id are used for example in the case where the clip AV stream and the clip AV stream have different chapter configurations. In the case where the corresponding block Mark is not associated with a specified elementary stream the values of these two fields are regarded as 0 .

Next the internal structure of the clip information file will be explained with reference to . The clip information file XXXXX.CLP describes the properties of the corresponding clip AV stream file XXXXX.PS placed under the directory STREAM as explained above.

Next the field reserved for word alignment having a data length of 7 bits and the flag capture enable flag Clip having a data length of 1 bit are arranged. The field reserved for word alignment combined with the flag capture enable flag Clip having a data length of 1 bit is used to align the arrangement in the file XXXXX.CLP to the position of 16 bits. The flag capture enable flag Clip indicates whether the secondary use of the dynamic image included in the clip AV stream file corresponding to the file XXXXX.CLP is permitted or not. In the case where the value of the flag capture enable flag Clip is 1 for example it indicates that the secondary use of the dynamic image of the clip AV stream file corresponding to the file XXXXX.CLP in the reproducing apparatus is permitted.

A field number of streams has a data length of 8 bits and indicates the number of succeeding blocks StreamInfo structures. Following the field number of streams the number of blocks StreamInfo equivalent to the number of times indicated in the field number of streams by the for loop are described. After the for loop the block EP map is arranged.

An exemplary internal structure of the block StreamInfo will be explained. At the head of the block StreamInfo a field length is arranged. The field length has a data length of 16 bits and indicates the length of the block StreamInfo . Then a field stream id and a field private stream id each having a data length of 8 bits are arranged. As an example is shown in the block StreamInfo is associated with the elementary stream. In the case shown in the block StreamInfo is associated with the video stream by the value 0xE0 to 0XEF of the field stream id and with the ATRAC Adaptive Transform Acoustic Coding audio stream LPCM Linear Pulse Code Modulation audio stream or the subtitle stream by the value 0xBD . Also the block StreamInfo is associated with the ATRAC audio stream the LPCM audio stream and the subtitle stream by the values 0x00 to 0x0F 0x10 to 0x1F and 0x80 to 0x9F respectively of the field private stream id .

In the expression of values in 0x indicates that the succeeding numerical values are expressed in hexadecimal notation. This is also the case with similar expression below.

The block StreamInfo is described roughly in two types including the information not changed in the stream and the information changed in the stream. The information not changed in the stream is described in the block StaticInfo . The information changed in the stream on the other hand is described in the block DynamicInfo with the change point designated by time information.

In the block StreamInfo the field reserved for word alignment having a data length of 8 bits is arranged to align the byte position to the back of the block StaticInfo followed by the field number of DynamicInfo . The field number of DynamicInfo has a data length of 8 bits and indicates the number of the blocks DynamicInfo described thereafter in the block StreamInfo . The field pts change point and the block DynamicInfo are described by the number of times indicated in the field number of DynamicInfo by the for loop.

The field pts change point has a data length of 33 bits and indicates the time by PTS when the information of the corresponding block DynamicInfo is validated. The time representing the head is also indicated for each stream by the field pts change point which is equal to the aforementioned field presentation start time defined in the file XXXXX.CLP .

With reference to an exemplary internal structure of the block StaticInfo will be explained. The content of the block StaticInfo varies with the type of the corresponding elementary stream. The type of the corresponding elementary stream can be determined based on the values of the field stream id and the field private stream id explained with reference to . In the block StaticInfo describes using the if syntax as to whether the type of the corresponding elementary stream is the video stream audio stream or the subtitle stream. Now the block StaticInfo will be explained for each elementary stream.

In the case where the elementary stream is the video stream the block StaticInfo is configured with a field picture size and a field frame rate each having a data length of 4 bits and a flag cc flag having a data length of 1 bit. The field picture size and the field frame rate indicate the image size and the frame frequency respectively of the video stream. The flag cc flag indicates whether the video stream includes the closed caption or not. In the case where the flag cc flag is 1 in value for example the particular video stream includes the closed caption. The field reserved for word alignment is used to align the data arrangement to 16 bits.

In the case where the elementary stream is an audio stream the block StaticInfo includes a field audio language code having a data length of 16 bits a field channel configuration having a data length of 8 bits a flag 1fe existence having a data length of 1 bit and a field sampling frequency having a data length of 4 bits. The field audio language code indicates the code of the language included in the particular audio stream. The field channel configuration indicates the channel attribute of the audio data such as monaural stereo or multichannel. The field 1fe existence indicates whether the low frequency emphasis channel is included or not it being included in the case where the value is say 1 . The field sampling frequency indicates the sampling frequency of the audio data. The field reserved for word alignment is used to align the data arrangement to 16 bits.

In the case where the elementary stream is a subtitle stream on the other hand the block StaticInfo includes a field subtitle language code having a data length of 16 bits and a flag configurable flag having a data length of 1 bit. The field subtitle language code indicates the code of the language included in the subtitle stream. The flag configurable flag indicates whether the change in character size or position is permitted for displaying the subtitle stream or for example that it is permitted with the value of 1 . The field reserved for word alignment is used to align the data arrangement to 16 bits.

With reference to an exemplary internal structure of the block DynamicInfo will be explained. The block DynamicInfo includes a field reserved for word alignment having a data length of 8 bits arranged at the head thereof. The succeeding contents are varied with the type of the corresponding elementary stream. The type of the corresponding elementary stream can be determined based on the value of the field stream id and the field private stream id explained with reference to . In the block DynamicInfo contains the description to determine using the if syntax as to whether the type of the corresponding elementary stream is the video stream audio stream or subtitle stream. Now the block DynamicInfo will be explained for each elementary stream.

In the case where the elementary stream is the video stream the block DynamicInfo includes a field display aspect ratio having a data length of 4 bits. The field display aspect ratio indicates whether the aspect ratio of the video display output is 16 9 or 4 3. The field reserved for word alignment is used to align the data arrangement to 16 bits.

In the case where the elementary stream is the audio stream the block DynamicInfo includes a field channel assignment having a data length of 4 bits. In the case where the audio stream is configured with two channels the field channel assignment indicates whether the output is stereo or monaural. The dual monaural state is used to make possible the audio reproduction of two languages for example. The field reserved for word alignment is used to align the data arrangement to 16 bits.

In the case where the elementary stream is the subtitle stream the block DynamicInfo is configured with the field reserved for word alignment used to align the data arrangement to 16 bits. In other words the dynamically changing attribute is not defined for the subtitle stream.

With reference to an exemplary internal structure of the block EP map will be explained. The block EP map indicates for each elementary stream the decode startable position also called the entry point or the random access point RAMP in the bit stream using the time information and the position information. The position information may use the minimum access unit in the recording medium for recording for example the elementary stream. Each elementary stream is assumed to be capable of being decoded from the position indicated by the block EP map .

In the stream of a fixed rate the decode startable position can be determined by calculations and therefore the information like the block EP map is not required. With regard to the stream of a variable rate or such a stream as the video compression coding scheme of MPEG system in which the data size is varied from one access unit to another however the information such as the block EP map is important for random access.

The block EP map includes at the head thereof a field reserved for word alignment having a data length of 8 bits to align the arrangement to 16 bits. Then a field number of stream id entries is arranged. The field number of stream id entities has a data length of 8 bits and indicates the number of the elementary streams described in the block EP map . The numbers of the field stream id the field private stream id and the field number of EP entries equivalent to the number of times indicated in the field number of stream id entries by the first for loop are described. Further for each one description of the first for loop a field PTS EP start and a field RPN EP start are arranged the number of times indicated in the field number of EP entries by the second for loop.

In the first for loop the first step is to arrange the field stream id and the field private stream id each having a data length of 8 bits in the first for loop and as an example is shown in the elementary stream is specified. The field number of EP entries arranged next has a data length of 32 bits and indicates the number of entry points described for the elementary stream. After that the field PTS EP start and the field RPN EP start are arranged in the same number as indicated in the field number of EP entries by the second for loop.

The field PTS EP start and the field RPN EP start each have a data length of 33 bits and indicate the entry point itself. The field PTS EP start indicates the time of the entry point in the clip AV stream file in terms of PTS. The field RPN EP start on the other hand indicates the position of the entry point in the clip AV stream file for example in units of 2048 bytes.

According to this embodiment one sector constituting a disk like access unit has 2048 bytes. The position of the entry point in the clip AV stream file therefore is indicated by sector in the field RPN EP start .

A packet private stream  is always arranged immediately before the reproduction startable position of the video stream. This packet private stream  has stored therein the information available to decode the video stream. The entry point of the video stream therefore is regarded as the position of the packet park for storing the packet private stream  .

The block EP map as described above establishes correspondence between the time on the clip AV stream and the position in the clip AV stream file. In the case where the time information time stamp for the access point to the clip AV stream is given therefore the data address for starting to read the data in the clip AV stream file can be easily retrieved thereby making possible smooth random access to the disk.

According to this embodiment both the set of the time information and the position information the set of the field PTS EP start and the field RPN EP start in the second for loop for each elementary stream and the set of the field PTS EP start and the field RPN EP start in the block EP map are arranged and registered in ascending or descending order in advance. In other words the time information and the position information are rearranged in a predetermined direction in advance. As a result the binary tree search can be executed for the data as they are.

According to this embodiment the video elementary stream though described above based on the MPEG2 Video standard is not limited to it. The video elementary stream for example may be based on MPEG4 Visual or MPEG4 AVC standard. Also the audio elementary stream though explained above as the ATRAC audio elementary stream above is not limited to it but the MPEG 1 2 4 audio for example is also applicable.

Next the disk reproducing apparatus according to an embodiment of this invention will be explained. briefly shows an example of the configuration of a disk reproducing apparatus according to this invention. A bus is connected with a CPU central processing unit a memory a drive interface an input interface a video decoder an audio decoder a video output interface and an audio output interface . The parts of the disk reproducing apparatus can exchange the video stream the audio stream and various commands and data with each other through the bus .

The drive interface is further connected with a disk drive . The disk drive exchanges the data and commands with the bus through the drive interface .

The CPU includes a ROM read only memory and a RAM random access memory not shown . In accordance with the program and data stored in the ROM in advance the CPU exchanges the data and commands with each part of the disk reproducing apparatus through the bus thereby to control the overall operation of the disk reproducing apparatus . The RAM is used as a work memory of the CPU .

Though not shown in the disk reproducing apparatus can include a nonvolatile memory such as a flash memory in which the data is rewritable and the stored data can be held even after the power supply of the disk reproducing apparatus is turned off. The nonvolatile memory is connected for example to the bus so that the CPU can write the data in and read the data from the nonvolatile memory.

The input interface is supplied with an input signal from the input unit through which the user actually performs the input operation. The input unit includes for example a remote control commander for operating the disk reproducing apparatus remotely with an infrared light signal or a key directly mounted on the disk reproducing apparatus . The input signals supplied from these input units are converted into a control signal for and output to the CPU by the input interface .

The disk has recorded therein the play list script program clip information file clip AV stream file etc. in the format described with reference to and subsequent drawings. Once the disk is loaded in the disk drive the disk is reproduced automatically or by the input operation of the user. The script file the play list file and the clip information file read from the disk are supplied to the CPU and stored for example in the RAM of the CPU . The CPU reads the clip AV stream file from the disk based on the script program and the data stored in the RAM.

The clip AV stream file read from the disk is temporarily stored in the memory . The video decoder based on the instruction of the CPU decodes the video stream and the subtitle stream of the clip AV stream file stored in the memory . The video data and the subtitle data thus decoded are enlarged reduced or otherwise subjected to the image processing for example by the CPU while at the same time synthesized or added to be a single video data. These image processing steps can also be executed by the video decoder or the video output interface . This video data is buffered in the memory and supplied to the video output interface . The video output interface converts the supplied video data into for example an analog video signal which is led to the video output terminal .

In similar fashion the audio decoder in response to the instruction from the CPU decodes the audio stream of the clip AV stream file stored in the memory . The audio data thus decoded is buffered in the memory and supplied to the audio output interface . The audio output interface converts the supplied audio data into for example an analog audio signal which is led to the audio output terminal .

The parts shown in though explained above as independent in hardware fashion are not necessarily so. The video decoder and or the audio decoder for example can alternatively be configured in software fashion to operate on the CPU .

Also the disk reproducing apparatus described above which includes the CPU and the memory and operates in accordance with a program can be regarded as a kind of computer system.

The operation system is first started in the CPU with the power supply of the disk reproducing apparatus and by executing the required processes such as initialization of each part the application program the video content reproducing unit in this case is retrieved from the ROM. During the operation of the video content reproducing unit the operation system provides the video content reproducing unit with the basic services such as the process of reading the file from the disk or interpreting the file system. In response to the file read request received from the video content reproducing unit for example the operating system controls the disk drive through the drive interface and reads the data recorded in the disk . The data thus read is delivered to the video content reproducing unit under the control of the operation system .

Also the operation system has the multitask processing function and can control a plurality of software modules apparently in parallel with each other by time division. Specifically as an example is shown in B the modules constituting the video content reproducing unit can be all operated in parallel by the multitask processing function of the operation system .

The operation of the video content reproducing unit will be explained more specifically below. The video content reproducing unit has several other modules therein and carries out the following functions 

 1 To determine whether the loaded disk hereinafter referred to as the UMD video disk conforms with the UMD video standard or not.

 2 Upon determination that the loaded disk is the UMD video disk to read the resource file from the disk and deliver it to the script control module .

 3 Upon determination that the loaded disk is the UMD video disk further to read the files constituting the database play list file clip information file etc. and deliver them to the player control module .

The script control module stores the received resource file in a predetermined area of the RAM not shown of the CPU . The CPU script control module reads interprets and executes the script program stored in the RAM. As an alternative the resource file may be stored in a predetermined area of the memory and read by the RAM not shown of the CPU as required.

As already described in connection with the player model the GUI operations such as the production and output of the menu screen the cursor movement and the change of the menu screen in accordance with the user input can be realized by controlling the graphics processing module on the script program. In the process the image data and the sound data stored in the resource file on the memory are used to produce the menu screen etc. Also the script control module can control the player control module by executing the script program.

The player control module by referring to the database information stored in the files such as the play list file PLAYLIST.DAT and the clip information file XXXXX.CLP read from the disk performs the control operation for reproduction of the video contents recorded in the disk .

 2 To control the content data supply module the decode control module and the buffer control module .

 3 To control the transition of the player statuses such as reproduction play reproduction stop stop temporary stop of reproduction pause and control the reproduction process such as stream switching in accordance with the instruction from the script control module or the input interface . 4 To acquire the time information about the currently reproduced video stream from the decode control module and displays the time or generates the mark event.

The content data supply module in response to the instruction of the player control module reads the content data including the clip AV stream file from the disk and delivers it to the buffer control module . The buffer control module accumulates the content data thus delivered thereto in the memory as a buffer entity A. The content data supply module controls the buffer control module in such a manner that in response to the requests from the video decoder control module the audio decoder control module and the subtitle decoder control module the content data accumulated in the memory are supplied to the modules and in a predetermined way. Also the content data supply module reads the control data from the disk in such a manner as to control the amount of the content data accumulated in a predetermined way by the buffer control module .

The decode control module in response to the instruction from the player control module controls the operation of the video decoder control module the audio decoder control module and the subtitle decoder control module . Also the decode control module having the clock function therein controls the operation of the decoder control modules and in such a manner as to output the video data and the audio data synchronously.

The buffer control module constituting the buffer entity A uses a part of the memory exclusively. Also the buffer control module stores the data head pointer and the data write pointer. The buffer control module further has the internal modules such as the video read function the audio read function and the subtitle read function. The video read function has the video read pointer therein. Also the video read function has therein a register for accumulating the information au information constituting the access unit information. The audio read function has therein the audio read pointer. The subtitle read function has therein the subtitle read pointer and the subtitle read function flag. The subtitle read function flag controls the validity invalidity of the subtitle read function in accordance with the value written. In the case where 1 is written in the subtitle read function flag for example the subtitle read function is regarded as valid while when 0 is written the subtitle read function is regarded as invalid.

The video read function the audio read function and the subtitle read function providing the internal modules of the buffer control module further have the demultiplex function to separate the video stream the audio stream and the subtitle stream from the clip AV stream in which the respective streams are multiplexed. According to an embodiment of the invention a clip AV stream is formed by time division multiplexing of a plurality of elementary streams in the form of the program stream of the MPEG2 system. The video read function the audio read function and the subtitle read function therefore have the function of demultiplexing the program stream of the MPEG2 system.

The video read function reads and holds the value of the field stream id arranged in a predetermined way in the stream. In similar fashion the audio read function and the subtitle read function read and hold the values of the field stream id and the field private stream id respectively. The values of the fields stream id and private stream id are used for analyzing the bit stream supplied.

The video decoder control module instructs the video read function in the buffer control module to read a single video access unit of the video stream from the memory and supply the video decoder . The video decoder control module controlling the video decoder decodes by access unit the video stream supplied to the video decoder . The video data prepared by decoding the video stream is supplied to the graphics processing module .

In similar fashion the audio decoder control module instructs the audio read function in the buffer control module to read a single audio access unit of the audio stream from the memory and supply the audio decoder . According to this embodiment the access unit constituting the audio stream audio frame is assumed to have a known fixed length. The audio decoder control module controlling the audio decoder decodes the audio stream supplied to the audio decoder by access unit. The audio data generated by decoding the audio stream is supplied to the audio output module .

Further the subtitle decoder control module instructs the subtitle read function in the buffer control module to read a single subtitle access unit of the subtitle stream from the memory and supply the subtitle decoder control module . According to this embodiment the subtitle access unit constituting the subtitle stream has the unit length information stored at the head of the unit. The subtitle decoder control module has the subtitle decode function and can decode the supplied subtitle stream. The subtitle image data decoded from the subtitle stream by the subtitle decode function of the subtitle decoder control module is supplied to the graphics processing module .

The graphics processing module as described above is supplied with the video data decoded in the video decoder under the control of the video decoder control module and the subtitle image data decoded by the subtitle decoder control module . The graphics processing module generates a video signal for outputting by adding the subtitle image data to the supplied video data as predetermined. Further in the graphics processing module the menu image and the message image are generated and synthesized overlaid on the output video signal in accordance with the instructions of the script control module and the player control module .

In the graphics processing module for example the subtitle image data supplied are enlarged or reduced in response to the instruction from the script control module and added to the video data as predetermined.

Also the graphics processing module changes the aspect ratio of the output signal based on the aspect ratio of a pre designated output video device and the output aspect ratio designated in the content reproduced from the disk . In the case where the aspect ratio of the output video device is 16 9 and the output aspect ratio is 16 9 for example the video data is output as it is. In the case where the output aspect ratio is 4 3 on the other hand the output video data is squeezed so that the image height is flush with the screen height of the output video device and the black image is inserted and output on the left and right sides of the image. In the case where the output video device has the aspect ratio of 4 3 and the output aspect ratio is 4 3 the video data is output as it is while in the case where the output aspect ratio 16 9 on the other hand the output video data is squeezed so that the image width coincides with the screen width of the output video device while the black image inserted and output above and under the image.

The graphics processing module in response to the request from the player control module further captures the video signal in process and returns it to the player control module .

The video output module occupies a part of the memory exclusively and uses it as a FIFO first in first out buffer. The video data processed by the graphics processing module is provisionally accumulated in this buffer thereby to control the read operation at a predetermined timing. The video data read from the buffer is output from the video output interface .

The audio output module occupies a part of the memory exclusively and uses it as a FIFO buffer. The audio data output from the audio decoder are accumulated in this buffer and read at a predetermined timing. The audio data read from the buffer is output from the audio output interface .

In the case where the audio mode of the content is dual monaural bilingual for example the audio output module outputs the audio data in accordance with a pre designated audio output mode. In the case where the audio output mode is designated as main audio the audio data of the left channel is copied to the right channel in the memory for example so that both the two channel outputs are output as audio data of the left channel. In the case where the audio output mode is second audio on the other hand the audio data of the right channel is copied to the left channel in the memory for example so that both the two channel outputs are output as the audio data of the right channel. In the case where the audio output mode is main second sound channel or the contents are stereo the audio data is output as it is.

In this way the audio output mode can be set by the user interactively through the menu screen generated by the video content reproducing unit .

The nonvolatile memory control module in response to the instruction from the player control module writes the data in the area not erased at the end of the operation of the video content reproducing unit and reads the data from the particular area. The nonvolatile memory control module has the function of storing a plurality of sets of the data Saved Player Status and the data Saved User Data in the same area with the title ID Title ID as a key. As the data Saved Player Status the data Backup Player Status held by the player control module is stored. This data Backup Player Status corresponds for example to the data immediately before the end of the play control module of the player status B described above and the data Saved Player Status corresponds to the resume information . Also the data User Data held in the player control module is stored as the data Saved User Data . The data User Data is a predetermined data set for the player control module by the user.

The nonvolatile memory control module stores the set of the data Saved Player Status and the data Saved User Data in association with the title ID of the disk in a predetermined area of the nonvolatile memory held in the disk reproducing apparatus . The storage medium of the nonvolatile memory control module for storing the data is not limited to the nonvolatile memory but may alternatively be a hard disk.

Next the state change model of the movie player according to an embodiment of the invention will be explained in more detail. According to this invention the state of the movie player is defined only as an internal state of the movie player . Specifically according to this invention the state of the movie player is defined based on the operation and the function of the movie player itself.

More specifically the operation of the movie player is defined into two states including the play state and the stop state from the viewpoint of play list reproduction. Also the function is defined into two states according to whether the movie player accepts the control command from the native implementation platform or not.

The play state is subdivided into several states and includes various reproduction states such as the normal reproduction in forward direction at unity speed the variable speed reproduction in forward and reverse directions at other than normal speed and pause. The frame by frame forward and frame by frame reverse reproduction can be realized by alternating between normal reproduction and pause. During the reproduction of the play list therefore the movie player is substantially in play state.

The state of the movie player from the viewpoint of the functions thereof will be explained. The movie player for the viewpoint of the functions thereof has two operation modes i.e. the mode called the normal mode for accepting the control command from the native implementation platform and the mode called the menu mode for ignoring the control command . These two operation modes of the movie player are each defined as a state of the movie player .

In normal mode the operation of the movie player can be controlled by the user input without the script program of the script layer .

In menu mode on the other hand the control command is not accepted by the movie player . The movie player accepts only the method from the script layer . As a result the operation of the movie player can be controlled in its entirety by the script program of the script layer . The user input for example is delivered to the script layer as an event from the native implementation platform . The script program of the script layer controls the operation of the movie player using the method corresponding to this event .

Specifically the operation of the movie player can be controlled on the part of the content producer by use of the menu mode. Also the use of the menu mode makes possible a great variety of control operations with a few types of keys.

As described above the movie player has two states including the play state and the stop state in terms of operation on the one hand and two operation modes of normal mode and menu mode in terms of functions at the same time. For the movie player therefore four states can be defined including combinations of the two operation state and two function modes. Specifically the movie player is associated with any one of the four states during the period from its generation to extinction. The generation and extinction of the movie player are explained later.

Incidentally in the case where the method is issued instructing the movie player to transfer to a state different from the current state the movie player transfers the state immediately in accordance with the issued method as a model. In an actual device however the time length from the time when a given method is issued to the movie player to the time when the movie player completes the state transition in accordance with the method is dependent on the mounting of the particular device.

Also even in the case where the method designating the state transition to the same state as a given state of the movie player is issued to the movie player the state of the movie player remains unchanged. Even in the case where the method to transfer the state of the movie player to normal mode and stop state is issued to the movie player already in normal mode and stop state for example the state of the movie player is not changed.

Further the temporary stop pause state is included as a kind of play state. For transition from stop state to pause the method play with the value pauseMode designating the temporary stop as an argument is used.

Next each of the four states including combinations of the two states and the two operation modes of the movie player and the state change among the four states are explained. In the description that follows assume that the normal mode included in the state of the movie player classified according to the function is called normal and the menu mode menu . Of the state of the movie player classified by operation on the other hand the play state is called play and the stop state stop . Also a combination of the modes and the state of the movie player is expressed as mode state for convenience sake. Further in the description that follows the state change and the mode switching in the movie player are both called the state or state change or transition.

As understood from 16 4 4 state changes exist for the movie player including the change to its own state. These state changes are caused by the method delivered from the script layer to the movie player . Specifically the state change in the movie player is caused by a factor external to the movie player and no automatic state change occurs in the movie player without instruction by the method from the script layer . Also the state change never occurs in the movie player even with the control command from the native implementation platform .

According to this embodiment the combination of arguments of the method is limited and therefore all the 16 possible state changes in the movie player cannot be generated.

The four states or states Menu Stop Normal Stop Menu Play and Normal Play that the movie player can assume are explained below one by one.

This is the stop state in which the play list is not reproduced by the movie player and in which the control command from the native implementation platform is not accepted. This state is used for example on the menu screen with no dynamic image reproduced in the background.

In order to positively secure the control operation from the script program immediately after generation of the movie player it is effective not to accept the control command from the native implementation platform at the particular time point. For this reason the state Menu Stop is set immediately after generation of the movie player .

This is the stop state in which the play list is not reproduced by the movie player and in which the control command from the native implementation platform is accepted. This state is used in the state for example in which the dynamic image is not reproduced. This state in which the control command is accepted is not preferably used immediately after generation of the movie player

This is the play state in which the play list is reproduced by the movie player and in which the control command from the native implementation platform is not accepted. This state is used for example on the menu screen with the dynamic image reproduced in the background.

This is the play state in which the play list is reproduced by the movie player and in which the control command from the native implementation platform is accepted. This state is used for example during the reproduction of the original story of the movie.

The models for generating the movie player are briefly explained. In the generation of the movie player as explained above for example the power is switched on for the disk reproducing apparatus and the operation system is activated in the CPU . Then the required process such as initialization is executed for each part while accessing the video content reproducing unit from the ROM. This video content reproducing unit is executed by the CPU . Once the power is turned off for the disk reproducing apparatus the movie player is extinguished.

In this case the movie player is regarded to generate an implicit object and the movie player is not required to be explicitly generated in the script program.

As explained above the state immediately after generation of the movie player is regarded as the stop state state Menu Stop of menu mode. Immediately after generation of the movie player the following properties for example held in the movie player assume indefinite values 

In the UMD video player having the continued reproduction function to start the reproduction from the position at which the previous reproduction is suspended the movie player can be initialized by setting the value of each property as held in the nonvolatile memory instead of a default value. For example the resume information can be used.

Next the method for generating the state change or transition in the movie player will be explained. shows combinations of the current state Mode Status and the state Mode Status after state change by the method for each of the four states of the movie player . As understood from the method stop the method play and the method resume are prepared as the methods to generate the state change of the movie player . Incidentally the operation of the method resume changes depending on whether the resume information exists or not.

The method stop will be explained. The method stop changes the movie player to the stop state regardless of the state thereof. The method stop can designate the mode for the argument and simultaneously with the transition to stop state the mode of the movie player can be changed. As described later upon execution of the method stop meeting a certain condition the player status B is backed up and held as the resume information .

The method play will be explained. The method play changes the movie player to play state. The method play can designate the mode for the argument and simultaneously with the change to play state can change the mode of the movie player . As described later upon execution of the method play meeting a certain condition the player status B is backed up while at the same time holding the resume information .

The method resume will be explained. The method resume is to restore the reproduction by restoring the resume information to the player status B. Specifically the method resume causes the movie player to start the reproduction from the position indicated by the resume information . Even in the case where the method resume is executed in the absence of the resume information the state of the movie player is not changed.

The conditions on which the resume information is restored by the method resume are as follows. Specifically in the case where the resume information exists at the time of execution of the method resume and the current state is not Normal Play then the movie player restores the resume information . In other words as long as the resume information exists at the time of execution of the method resume and the current state is one of Menu Stop Normal Stop and Menu Play then the movie player restores the resume information simultaneously with the transition to the state Normal Play .

The method play has a plurality of arguments. In the case under consideration by way of explanation the method play is assumed to have three arguments including pauseMode menuMode and playListNumber . Actually however more arguments are defined.

The argument pauseMode designates the condition of reproduction in play state and may assume the value x pause or 1 . The value x designates the forward reproduction at normal speed. The value pause designates the temporary stop. The value 1 designates the maintenance of the current reproduction speed. In this way the argument pauseMode sets the detail of the play state of the movie player after execution of the method play . Incidentally in the case where the pause is designated in the absence of the picture at the position designated by the argument or the designation by the argument then the picture at the position designated by the select rule laid down separately is displayed and the pause state is entered.

The argument menuMode may designate the mode normal mode or menu mode of the movie player and may assume any of the value Normal Menu and 1 . The value Normal designates the switch to the normal mode. The value Menu designates the switch to the menu mode. The value 1 designates the maintenance of the current mode.

The argument playListNumber designates the number of the play list to be reproduced. The argument playListNumber can be omitted which indicates that the currently selected play list remains unchanged.

With reference to B C D E an example of state change of the movie player at the time of execution of the method play will be explained. In each of B C D E the left side indicates the current state A of the movie player and the right side the state B changed by issuance of the method from the script program to the movie player in the current state A. Also under the state A and B the play list numbers PL PL designated for the particular state are shown.

As described above the movie player performs various operation by receiving the method play from the script program while at the same time generating the state transition depending on the conditions. The content producer can implement various operations in the movie player by describing the method play with a different argument in the script program.

The movie player starts the reproduction of the play list of a selected play list number only by executing the method play from the script program. The play list reproduction start indicates the start of reproduction of the play list from stop state or the selection of a new play list by suspending the play list reproduction and starting the reproduction of the selected play list.

In the case where the script program issues the method play with an argument to the movie player the value of the argument is set in the player status B. In the case where the argument is omitted the value of the particular argument is set as a default value or by automatic selection in accordance with the rule determined for each parameter.

The reproduction of the play list in the order not intended by the content producer would pose a problem. Therefore the start of the play list reproduction by designating the play list number with the control command attributable to the user operation is prohibited. This is one of the features of the operation model of the movie player according to an embodiment of the invention.

Further in the case where an invalid play list or the nonexistent time is designated as a value of the argument of the method play the execution of the particular method play would fail. This indicates that the script program is erroneous and the script program contains a violation of the standard. The error handling against this case is dependent on the mounting of the movie player .

Now the reproduction between play items will be explained. The movie player with the starting of the play list reproduction continues the reproduction of the particular play list to the end. The reproduction from the head to the end of a given play list requires neither the user operation nor the control operation from the script program. In the movie player as briefly shown in the play items constituting the play list are sequentially reproduced in the order designated by the play list file PLAYLIST.DAT . The play items constituting the play list are continuously reproduced without being controlled by the event handler.

The operation during the period from the end of the reproduction of a play item to the reproduction of the next play item is dependent on the mounting of the movie player and not specified as a format. For example the operation between play items as to whether the last picture of the play item continues to be displayed or immediately changed to the black screen is dependent on the mounting. By the appropriate authoring operation such as setting the IN point of the play item at a random access point entry point however the gap time between the play items can be shortened as far as possible.

Next the operation of the movie player during the reproduction of the play list will be explained. The variable speed reproduction instruction of the user such as the high speed reproduction including the double speed reproduction or the triple speed reproduction the low speed reproduction including the half speed reproduction or the reverse reproduction is input to the native implementation platform as a user input and in response to this user input a control command dependent on the mounting is transmitted to the movie player from the native implementation platform .

The variable reproduction speed is dependent on the mounting of the movie player . In an example of realizing a variable speed reproduction the instruction faster or slower is delivered as an argument to the movie player from the native implementation platform capable of speed designation which is converted by the movie player into a realizable speed. Which method should be employed depends on the mounting of the movie player . According to the script program the speed determined by the movie player can be known by the method getPlayerStatus .

With the method play to the movie player from the script program on the other hand the speed cannot be designated by the argument. In the method play only two including pause argument pause and normal speed reproduction argument x can be designated.

The movie player upon arrival at the end of the play item during the forward variable speed reproduction of the play list carries out the reproduction of the next play item. At the same time the movie player continues the variable speed reproduction of the next play item in the same direction and at the same speed as the previous play item.

Incidentally upon arrival at the end point of the play list during the high speed reproduction higher in speed than normal mode the last picture of the play list even if not corresponding to the jump point is displayed.

Upon arrival at the head of the play item during play list reproduction in reverse direction on the other hand the movie player reproduces the previous play item i.e. a play item which is reproduced temporally earlier in forward reproduction. Also in this reproduction of the previous play item the reverse reproduction from the end toward the head is continued. The reproduction speed is also maintained. Also upon arrival at the head of the play list during the reverse reproduction the variable speed reproduction is canceled and the movie player enters the pause at the head of the play list.

Further the state of the movie player is changed to pause also by the control command designating the pause. The direction and speed of play list reproduction upon cancellation of the pause by the control command is dependent on the mounting of the UMD video player.

Next the event generated during play list reproduction will be explained. The event generated during play list reproduction as explained with reference to includes the event angleChange corresponding to the user operation the event audioChange and the event subtitleChange and the event chapter and the event mark corresponding to the mark embedded in the play list. Also a detailed example of the operation at the time of event generation is already explained with reference to .

Now the last processing of the play list will be explained. As already explained the movie player reproduces the play list of the number designated by the method play . The play list reproduction once started is continued to the end of the play list without being controlled by the script program or the control command . Upon arrival at the end of the play list reproduction the movie player notifies the event playListEnd to the script program. Any method can be used before reaching the end of the play list. Specifically regardless of whether the reproduction of the play list is normal fast or due to the jump from other play list the movie player generates the event playListEnd at the time point when the end of the play list is reached.

In the case where the reproduction reaches the end of the play list and the event playListEnd is generated the state of the movie player enters the pause and the time of the play list reproduction internally held by the movie player coincides with the end time of the play list. Incidentally the end time of the play list is defined as the time of ending the reproduction of the last picture of the play list and coincides with the OUT point of the last play item along reproduction time axis.

The event playListEnd can be used for reproducing the play list serially or displaying the menu at the branching point of the multistories.

The script program executes the event handler onPlayListEnd if held as a program to be executed upon generation of the event playListEnd . In the case where the method play for starting the reproduction of other play list is described in this event handler onPlayListEnd the movie player starts the reproduction of the other play list. In this way the play list reproduction is continued.

A specific explanation is given with reference to . At the end of reproduction of the play list of the play list number PL the event playListEnd is generated. Upon generation of this event playListEnd the event handler onPlayListEnd held in the script program is executed. This event handler onPlayListEnd designates the reproduction of the play list of the play list number PL . The movie player in response to this event handler onPlayListEnd reproduces the play list of the designated play list number PL .

The reproduction path transfers provisionally to the event handler onPlayListEnd from the end of the play list of the play list number PL and further transfers to the head of the play list of the play list number PL .

In the case where the menu is to be displayed at the branching point of the multistories for example the instruction to reproduce the play list may be described to such an effect that the menu screen is displayed by the event handler onPlayListEnd corresponding to the event playListEnd with the end of the play list as a branching point.

After reproduction of a given play list to the end an explicit instruction for reproduction by the script program is required to reproduce the next play list. The order in which the play lists are reproduced is determined by the script program and therefore the play list to be reproduced next cannot be voluntarily determined on the part of the movie player .

Once the reproduction reaches the end of the play list step S the movie player notifies the event playListEnd to the script layer step S . The movie layer while continuing to display the last picture of the play list reproduced to the end in step S transfers to the state pause step S .

In the script layer upon receipt of the event playListEnd the event handler onPlayListEnd is executed step S . The next operation of the movie player is determined by the description of the script in this event handler onPlayListEnd .

Incidentally the movie player after step S ignores the method or the control command which may be received to cancel the pause or the start the forward reproduction during the pause at the end of the play list. The method to start the forward reproduction is the method play and the method playStep designating the forward reproduction with an argument. Also the control command to start the forward reproduction includes the command uo play the command uo playNextChapter the command uo forwardScan the command uo playStep the command uo pauseOn or the command uo pauseOff . These commands are ignored in the case where the operation is in pause at the end of the play list.

Even in the case the operation is in pause at the end of the play list the method stop and the method resume are valid. Also the mode switching is valid during the pause at the end of the play list.

Even after generation of the event playListEnd the movie player in normal mode accepts the control command other than for starting the forward reproduction. Also in that case upon execution of the method for the movie player from the script program the operation designated by the particular method is performed.

In the example shown in the method stop is designated by the event handler onPlayListEnd step S . The operation of the movie player caused by the control command is suspended upon execution of the method stop and transfers to stop state step S . In stop state for example the last picture of the play list thus far reproduced is erased and the black screen appears.

Further in the script layer the method for reproducing the next play list is designated by the event handler onPlayListEnd step S . In the method play for example the value x is designated as the argument pauseMode the value Menu as the argument menuMode and the play list number next to be reproduced as the argument playListNumber . Then the movie player is instructed to switch to the menu mode and to reproduce the play list of the number designated by the argument playListNumber at normal speed. In the script layer the event handler onPlayListEnd is ended step S . On the part of the movie player the mode is switched in accordance with the method play designated by step S while at the same time starting the reproduction at the speed designated by the designated play list step S .

Incidentally to improve the user operability the content producer after ending the reproduction of the play list should not leave without designating the next operation for the movie player . The next operation should be described in the event handler onPlayListEnd and the movie player should be transferred to stop state instructed to reproduce the play list by the method play or authored to return to the menu screen.

Next the state transition and the reproduction restoration function of the movie player are explained. First with reference to the three types of memory areas held in the UMD video player are explained. In the model of the UMD video player the essential three types of memory areas including the player status area the resume information area and the user data area are defined. These three types of memory areas and are formed for example on the memory . They may alternatively be formed on the RAM as a work memory of the CPU .

The player status area is the memory area for holding the information indicating the reproduction state of the movie player . Specifically the player status B shown in is held in the player status area . The contents of the player status area can be read by the method getPlayerStatus from the script program .

The resume information area is the memory area for provisionally saving backing up a part of the information held in the player status area . Specifically a part of the information in the player status area is held in the resume information area in the form of the resume information shown in . The part of the information in the player status area saved in the resume information area is restored to the player status area as required. The backup operation and the restore operation are performed by the native implementation platform . The information held in the resume information area is used by the resume reproduction function to start the reproduction from the previous reproduction stop point.

The contents of the resume information area can be read by the method getResumeInfo from the script program . In the resume information saved in the resume information area the parameters related to the stream can be changed in value by the method changeResumeInfo from the script program .

The information held in the resume information area is written saved in the nonvolatile memory as required by the native implementation platform . In similar fashion the information written into the nonvolatile memory from the resume information area is read loaded from the nonvolatile memory as required by the native implementation platform and stored in the resume information area .

Incidentally the backup operation into the resume information from the player status area and the restore operation from the resume information area into the player status area are the processes generated with a specified state transition of the movie player by method execution and automatically performed by the movie player .

The user data area is the one for holding the information dependent on the contents and can be arbitrarily used by the content producer. This area can be used in arbitrary way in accordance with the contents such as the route history of the play list reproduction by the move player or the correct or incorrect solution of a quiz.

The data can be written in the user data area by the method setUserData from the script program . The contents of the user data area can be read by the method getUserData from the script program . The information held in the user data area is written saved in the nonvolatile memory as required by the native implementation platform . In similar fashion the information written into the nonvolatile memory from the user data area is read loaded from the nonvolatile memory as required by the native implementation platform and stored in the user data area .

In order to realize the reproduce restoration function a model of the UMD video player constructed according to an embodiment of this invention will be explained.

First the resume operation will be explained briefly. The operation of restoring the reproduction state using the information backed up in the resume information area is called resume . The resume is executed by the method resume .

More specifically the player state B in the player status area is backed up in the resume information area into the resume information and in accordance with the method resume the reproduction state is restored using the resume information backed up in the resume information area . The player status B constitutes the state of the movie player i.e. the play list number the chapter number or the selected stream number currently reproduced by the movie player .

The operation of the movie player with the method resume issued thereto is varied depending on whether the resume information is existent in the resume information area or not. In the case where the resume information exists in the resume information area the particular resume information is restored as a player status B in the player status area . In the process the resume information in the resume information area is discarded.

In the case where the reproduction stream is changed in the menu accessed during the content reproduction the method changeResumeInfo is used. By performing the resume operation with the method resume after the resume information held in the resume information area is changed in a predetermined way by the method changeResumeInfo the reproduction can be started by changing the reproduction stream.

By executing the method resume the movie player is caused to perform the resume operation. As an alternative the resume operation can be realized by executing the method play with a designated argument after acquiring the resume information by the method getResumeInfo .

The backup of the player status B in the resume information area will be explained with reference to . shows among the four states defined by the movie player the state transition in which the player status B held in the player status area is backed up in the resume information area . shows the conditions on which the player status B is backed up in the resume information area .

In the case where the movie player playing in normal mode state Normal play for reproducing the play list changes to the stop state the player status B held in the player status area is backed up in the resume information area and held in the form of the resume information . Incidentally in stop state a part of the player status B comes to assume an indefinite value.

Also with the transition of the movie player from the state Normal play to the state Menu play the player status B held in the player status area is backed up in the resume information area .

Even in the case where the movie player reproducing the play list in menu mode changes the state however the player status B held in the player status area is not backed up in the resume information area .

Specifically the player status B is backed up in the resume information area in the form of the resume information in the following cases 

 1 The current state of the movie player is Normal Play and directly changed to state Menu Play by the execution of the method play .

 2 The state of the movie player is Normal Play and changed to the state Normal Stop or Menu Stop by the execution of the method stop . In this case the argument resumeInfoClearFlag of the method stop is false in value.

The player status B is held backed up in the resume information area with the intention of holding the return position in the original story. A series of operations including the jump to the dynamic image menu during the reproduction of the original story and returning again to the original story for reproduction are realized for example based on the assumption of the use of the resume information as the data of the player status B backed up in the resume information area .

During the reproduction of the original story i.e. in the case where the movie player is in the state Normal Play the resume information in the resume information area is discarded. With the transition of the movie player from the state Normal Play to other state the player status B is backed up in the resume information area into the resume information .

As described above in order to realize the resume reproduction the player status B is backed up in the resume information area or the resume information in the resume information area is discarded appropriately in accordance with the state transition of the movie player . Also upon designation of the method resume in the script layer the resume information if existent in the resume information area is restored in the player status area into the player status B.

The resume information in the resume information area can be read using the method getResumeInfo from the script layer . The parameters related to the stream in the resume information in the resume information area can be changed by the method changeResumeInfo . Further by designation with the argument of the method stop the resume information in the resume information area can be discarded.

The restoration of the resume information held in the resume information area to the player status area and the discard thereof are explained with reference to . The resume information held as a return position in the original story is discarded after the movie player returns to the reproduction of the original story i.e. to the state Normal Play . In the process the resume information may be discarded either after being restored as the player status B in the player status area or without being so restored.

Specifically in this model once the movie player returns to the state Normal Play the resume information in the resume information area is discarded. At the same time in the case where predetermined conditions are met by the movie player the resume information in the resume information area is discarded after being restored to the player status area . In the case where the resume information is restored to the player status area the reproduction is started from the point designated by the resume information . This corresponds to the resume reproduction.

In the case where the three conditions described in 1 to 3 below are met the resume information is discarded after being restored.

Incidentally upon execution of the method resume while the resume information is existent in the resume information area the state of the movie player is changed to the state Normal Play . Also in the absence of the resume information in the resume information area the method resume does not change the state of the movie player . At this time the state Mode State immediately before execution of the method resume prevails and the player status B is not changed either.

Once the three conditions described in 4 to 6 below are all met on the other hand the resume information is discarded without being restored.

In the absence of the resume information assume that the state of the movie player is changed to Normal Play by the execution of the method play . As a result the situation lacking the resume information is held.

The resume information in the resume information area can be discarded also by setting the argument of the method stop . Specifically according to an embodiment of the invention the argument resumeInfoClearFlag of the method stop is defined as an argument of the method stop to determine whether the resume information in the resume information area is to be discarded or not. As shown in the resume information is discarded in the case where the value True is designated for the argument resumeInfoClearFlag at the time of executing the method stop .

In the case where the original story of the movie is reproduced to the end and the movie player is stopped for example the last position of the original story of the movie is recorded as the resume information . Upon subsequent reproduction continued reproduction by the user the process jumps to the end of the original story of the movie and enters the pause inconveniently for the purpose of operation.

An improvement of this problem requires a means for discarding the resume information automatically recorded in model definition. The position of the end of the original story of a movie is not in the knowledge of other than the content producer. Therefore a means is employed in which the discard of the resume information can be designated by the argument resumeInfoClearFlag of the method stop for the movie player from the script program .

With the arrival of the reproduction at the end of the play list step S the movie player notifies the event playListEnd to the script layer step S . The movie player while continuing to display the last picture of the play list reproduced to the end in step S changes the state to pause step S .

The script player in response to the event playListEnd executes the event handler onPlayListEnd step S . The next step S determines whether the play list notified of the event playListEnd is the last one of the author scenario or not. Whether a given play list is the last one of the scenario or not can be determined for example based on the script program .

Upon determination that the play list is not the last one the process proceeds to step S in which the argument resumeInfoClearFlag of the method stop is made false in value and the method stop not to discard the resume information is issued to the movie player . The movie player upon receipt of this method stop changes the state to stop state while the player status B is backed up in the resume information area .

Upon determination in step S that the end of the scenario is reached in the script layer on the other hand the process proceeds to step S and the value of the argument resumeInfoClearFlag of the method stop is set True . Then the method stop to discard the resume information is notified to the movie player . The movie player upon receipt of the method step changes to the stop state while the resume information in the resume information area is discarded.

In the script layer the method end is executed after step S depending on the description of the script program .

Next the life cycle of the player status B the resume information and the user data will be explained.

A particular form in which the player status B is to be stored depends on the mounting of the movie player . As long as the information can be acquired by the method getPlayerStatus from the script the information can be held in any form.

When the state of the movie player transfers from Normal Play to other state the player status B is backed up in the resume information area .

The parameters videoNumber audioNumber audioFlag subtitleNumber and subtitleFlag related to the stream in the resume information can be changed by the method changeResumeInfo from the script layer .

In the movie player the contents of the resume information are discarded when the play list reproduction is started in normal mode. The resume information may or may not be restored into the player status B before discard. Also upon execution of the method stop with the argument resumeInfoClearFlag set to True in value the contents of the resume information are discarded.

Upon execution of the method resume in the presence of the resume information the resume information is restored into the player status B.

The value of the resume information can be read by the method getResumeInfo from the script layer . In reading the resume information in discarded state the value 0 is returned as a return value playStatus and therefore the presence or absence of the resume information can be determined.

At the end upon extinction of the movie player the resume information is also extinguished. The UMD video player with the nonvolatile memory mounted thereon saves the resume information in the nonvolatile memory at the end upon extinction of the movie player . In the process the user data is saved at the same time.

Upon execution of the method setUserData the user data is written into the user data area . The arrangement having the maximum data length of 64 bits is held in the user data area by the method setUserData . The data in the user data area can be read by the method getUserData from the script layer . In the case where the user data is not set the arrangement of length is returned.

No method is available for clearing the contents of the user data area from the script layer . The contents can be rewritten by overwriting the user data area .

At the end upon extinction of the movie player the user data area is also extinguished. The UMD video player having the nonvolatile memory mounted thereon saves the data held in the user data area into the nonvolatile memory at the end upon extinction of the movie player . In the process the resume information is saved at the same time.

The foregoing description concerns an application of the invention to the disk reproducing apparatus for processing the audio stream and the video stream at the same time. However the invention is not limited to this configuration. Only the audio stream or only the video stream may alternatively be reproduced according to this invention.

Also the foregoing description deals with the disk recording medium used as a recording medium for recording the content data and the invention is not limited to this configuration. A semiconductor memory for example can be used as a recording medium for recording the content data.

Further in spite of the foregoing description that the disk reproducing apparatus according to the invention has a dedicated hardware configuration the invention is not limited to such a configuration. Specifically the configuration of the disk reproducing apparatus other than the disk drive can be realized also by the software operated on the computer system. In such a case the software for realizing the disk reproducing apparatus can be supplied by being recorded in a recording medium such as CD ROM compact disk read only memory or DVD ROM digital versatile disc ROM . The recording medium having recorded therein the software for implementing the disk reproducing apparatus is loaded in the disk drive of the computer system and the particular software recorded in the recording medium is installed in the computer system. A configuration equivalent to the disk reproducing apparatus can be realized by connecting the disk drive unit corresponding to UMD to the computer system. The recording medium having recorded therein the UMD video contents may be provided together with the particular software recorded therein.

