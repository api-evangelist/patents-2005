---

title: Hardware verification scripting
abstract: Exemplary techniques for verifying a hardware design are described. In a described embodiment, a method comprises compiling an error verification object corresponding to an error verification command to verify a portion of a hardware design of a device under test. The error verification object is compiled in accordance with data provided by an error scripting module. The error scripting module has access to hardware-specific data corresponding to the hardware design of the device under test. The compiled object is sent to the device under test and a response to the compiled object is received from the device under test. The received response from the device under test is parsed in accordance with data provided by the error scripting module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07447966&OS=07447966&RS=07447966
owner: Hewlett-Packard Development Company
number: 07447966
owner_city: Houston
owner_country: US
publication_date: 20050105
---
The present description generally relates to hardware verification. More particularly an embodiment relates to verifying hardware designs through scripting.

As integrated circuit IC fabrication technology improves manufacturers are able to integrate additional functionality onto a single chip. The additional functionality in turn increases the complexity of the designs. Also the increase in the complexity lengthens the design process.

A typical design process for ICs includes a front end design phase and a back end development phase. During the front end phase hardware engineers design and develop a logical representation of an IC from a set of specifications in the form of a schematic. The schematic is then loaded into a computer from which a circuit netlist is generated. The netlist defines the entire IC design including all components and interconnections.

The IC information may be developed using a hardware description language HDL and synthesis. With the aid of circuit simulation tools available on computers a designer can then simulate the functionality of a given circuit. The circuit simulation process may involve several iterations of design modifications and improvements until the circuit design is finalized.

The back end development involves several steps during which a final circuit layout physical description is developed based on the schematic design of the front end phase. Various building blocks or cells as defined by the finalized circuit schematic are placed within a predefined floor plan. The cells are then interconnected during a routing stage. After routing the accuracy of the layout is verified against the schematic and if no errors or design rule violations are found the circuit layout information is used for the process of fabrication. The fabricated IC may be further verified to check for fabrication errors.

The use of computers substantially speeds up the verification process. However verification of complex designs can still add substantial delay to finalizing a design. For example a team of software designers who write compile and debug the software code for the verification tool has to closely cooperate with a team of hardware designers who design the actual hardware.

Coordinating these teams from both a technical perspective i.e. merging software expertise with hardware expertise and a timing perspective can be a challenging task when verifying a complex design. In particular for each change to the verification tool members from both teams would have to be consulted and coordinated. This problem is further amplified due to the existence of a multitude of tools that are utilized in design and verification of an IC.

In a described embodiment a method comprises compiling an error verification object corresponding to an error verification command to verify a portion of a hardware design of a device under test. The error verification object is compiled in accordance with data provided by an error scripting module. The error scripting module has access to hardware specific data corresponding to the hardware design of the device under test. The compiled object is sent to the device under test and a response to the compiled object is received from the device under test. The received response from the device under test is parsed in accordance with data provided by the error scripting module.

Exemplary techniques for verifying a hardware design are described. The techniques enable a user such as a hardware engineer to design and run hardware verification tests without intricate knowledge of the software aspects of the verification tool e.g. multiple test source files programming language intricacies debugging and the like . The user may perform the verification through customary software tools. The software tools may in turn utilize an error scripting language ESL to communicate with a device under test DUT e.g. through an ESL module. In one embodiment the ESL module limits the need for recompiling the entire verification toolset when changes are made to a test. The ESL may be portable to different design verification environments. Also there may be no reference to specific software tools within the ESL syntax.

The DUT is coupled to a device interface which enables communication e.g. via electrical signals with one or more software tools . The software tools enable a user to issue commands for verifying the design of the DUT . The software tools may interact with a user through a command line or a graphical user interface GUI . It is also envisioned that the software tools may interact with one or more automated tools instead of a user such as other computer programs or media to verify the design of the DUT .

The software tools have access to an ESL module to facilitate the verification of the DUT . As will be further discussed with reference to the ESL module assists in compiling and parsing error verification objects which are sent to and received from the DUT . The ESL module has access to one or more data storage facilities such as a register interface database a transaction database and a bus interface database . The databases may be stored on a same device or remotely. For example different teams may work each of these databases at different locations. In such an embodiment the ESL module may access these different databases to provide a central location for provision of error scripting solutions.

The register interface database includes a list of all registers corresponding to the DUT and their values. The ESL module may read write or monitor these register values. The transaction database includes data regarding transaction types which are utilized in each object communicated in the system . In one embodiment the objects are data packets. Accordingly data looked up from the transaction database may be utilized to build these packets objects. The bus interface database includes data regarding signal wires or paths present in the DUT . The bus interface database may map logical bus interface information to the actual hardware implementation and vice versa. Accordingly the ESL module may lookup register transaction and or bus information to build an object which is then communicated to the software tools . Alternatively it is envisioned that the software tools may directly communicate with the databases not shown .

The compiled object is sent to the device under test . After the device under test DUT responds the response from the DUT is parsed based on data obtained from an ESL module e.g. of . It is envisioned that the same or different ESL modules may be utilized in the stages and . Furthermore the hardware specific data may be stored in one or more storage units and these storage units may be remote from each other. Moreover each of the storage units may include at least one database e.g. databases of .

The parsed response of the stage may be directly provided to a user e.g. the same user who issues the verification command of the stage . Alternatively the interaction may be with one or more automated tools instead of a user such as other computer programs or computer readable media e.g. in an effort to verify the design of the DUT e.g. of . In an embodiment the parsed response is verified for correctness and or matched against an expected response if one is provided. Failure in either of these cases may result in an error which may be logged and or reported back to the user .

An error controller interfaces with the software tool interface to control the interaction of the various error components as will be further discussed herein. An error selector is coupled to the error controller to query data from an error table and use the query to determine e.g. based on the user software inputs which ESL scripts to run. The error selector selects an ESL script based on one or more items such as hardware block error category ESL name and or random selection. The error table may be implemented as a buffer which stores data regarding error objects .

The error object module may be implemented as a buffer which stores data regarding error to do lists. In an embodiment there is one unique error object for every ESL script. An error command module contains information about the individual ESL command. The information stored in this module may determine what the given ESL command will do to the hardware. An error checker is coupled to the error command module to observe the device under test for a specific action and provide an indication of success or failure with regards to that expected specific action.

An error injector module is also coupled to the error command module to inject the specific action on the device under test DUT e.g. via the software tool interface . The error injector module receives its input from the error command module . The error injector module may interact with the register interface transaction and or bus interface databases. Accordingly various modules illustrated in may be utilized to compile and or parse data objects or packets that are transferred to and from the device under test e.g. via the software tools of . This is envisioned to enable a user or an automated program to verify the design of the DUT through the error scripting language instead of through reprogramming and recompiling toolsets for every change made to verification tests.

A hardware and tool independent error scripting language ESL may be utilized to assist in verifying a portion of a hardware design such as discussed with reference to . The ESL is tool independent in part because no specific references are presented to any software tool or its component. As such the test writer does not need to worry about the details of the design verification tools such as the software tools discussed with reference to which are interfacing with the ESL script. The same ESL script may be executed transparently across multiple design verification tool environments.

Mapping commands to software tools and ESL components may be left to the modules that process the language such as those discussed with reference to not the language itself. Hence for different tools which are testing the same hardware the tests written in this language may be executed on the different tools without having to recompile the tools.

The ESL is capable of setting up injecting checking and recovering system level errors in an embodiment. The ESL may also support program constructs and mathematical logic operations such as AND OR Right Shifts and Left Shifts. More particularly the ESL language may support one or more of the following packet control status register CSR bus helper miscellaneous and conditional commands in various embodiments e.g. to access the data stored in databases of provided through the ESL module of 

For the conditional commands expressions may include Boolean operators comparison operators and or bitwise operators.

The computing device includes one or more processor s e.g. microprocessors controllers etc. input output interfaces for the input and or output of data and user input devices . The processor s process various instructions to control the operation of the computing device while the input output interfaces provide a mechanism for the computing device to communicate with other electronic and computing devices. The user input devices can include a keyboard mouse pointing device and or other mechanisms to interact with and to input information to the computing device .

The input output interfaces can include serial parallel and or network interfaces. As illustrated in the input output interfaces may be communicated with the DUT in one embodiment. A network interface allows devices coupled to a common data communication network to communicate information with the computing device . Similarly a communication interface such as a serial and or parallel interface a universal serial bus USB interface an Ethernet interface an Institute of Electrical Electronics Engineers IEEE 802.11 interface and or any combination of wireless or wired communication interfaces provides a data communication path directly between the computing device and another electronic or computing device.

The computing device also includes a memory such as read only memory ROM and or random access memory RAM a disk drive a floppy disk drive and a compact disk read only memory CD ROM and or digital video disk DVD drive all of which provide data storage mechanisms for the computing device . Any number and combination of memory and storage devices can be connected with or implemented within the computing device . Although not shown a system bus typically connects the various components within the computing device .

The computing device also includes one or more application program s and an operating system which can be stored in non volatile memory e.g. the memory and executed on the processor s to provide a runtime environment in which the application programs can run or execute. The computing device can also include an integrated display device such as for a PDA a portable computing device and any other mobile computing device.

Select embodiments discussed herein such as those discussed with reference to may include various operations. These operations may be performed by hardware components or may be embodied in machine executable instructions which may be in turn utilized to cause a general purpose or special purpose processor or logic circuits programmed with the instructions to perform the operations. Alternatively the operations may be performed by a combination of hardware and software.

Moreover some embodiments may be provided as computer program products which may include machine readable or computer readable medium having stored thereon instructions used to program a computer or other electronic devices to perform a process discussed herein. The machine readable medium may include but is not limited to floppy diskettes hard disk optical disks CD ROMs and magneto optical disks ROMs RAMs erasable programmable ROMs EPROMs electrically EPROMs EEPROMs magnetic or optical cards flash memory or other types of media or machine readable medium suitable for storing electronic instructions and or data. Moreover data discussed herein may be stored in a single database multiple databases or otherwise in select forms such as in a table .

Additionally some embodiments discussed herein may be downloaded as a computer program product wherein the program may be transferred from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a carrier wave or other propagation medium via a communication link e.g. a modem or network connection .

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least an implementation. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Thus although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed invention.

