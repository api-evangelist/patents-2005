---

title: Method and apparatus for pattern-based system design analysis using a meta model
abstract: A method for analyzing a target system that includes obtaining a characteristics model, loading the characteristics model into a meta model, obtaining a plurality of characteristics from the target system using a characteristics extractor, wherein each of the plurality of characteristics is associated with the characteristics model, storing each of the plurality of characteristics obtained from the target system in a characteristics store, and analyzing the target system by issuing at least one query to the characteristics store to obtain an analysis result, wherein the issuing the at least one query comprises verifying the at least one query using the meta model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634766&OS=07634766&RS=07634766
owner: Sun Microsystems, Inc.
number: 07634766
owner_city: Santa Clara
owner_country: US
publication_date: 20050520
---
The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on May 20 2005 and assigned to the assignee of the present application Method and Apparatus for Tracking Changes in a System Ser. No. 11 133 831 Method and Apparatus for Transparent Invocation of a Characteristics Extractor for Pattern Based System Design Analysis Ser. No. 11 134 154 Method and Apparatus for Generating Components for Pattern Based System Design Analysis Using a Characteristics Model Ser. No. 11 133 717 Method and Apparatus for Pattern Based System Design Analysis Ser. No. 11 134 062 Method and Apparatus for Cross Domain Querying in Pattern Based System Design Analysis Ser. No. 11 133 507 Pattern Query Language Ser. No. 11 133 660 and Method and Apparatus for Generating a Characteristics Model for Pattern Based System Design Analysis Using a Schema Ser. No. 11 133 714.

As software technology has evolved new programming languages and increased programming language functionality has been provided. The resulting software developed using this evolving software technology has become more complex. The ability to manage the quality of software applications including design quality and architecture quality is becoming increasingly more difficult as a direct result of the increasingly complex software. In an effort to manage the quality of software applications several software development tools and approaches are now available to aid software developers in managing software application quality. The following is a summary of some of the types of quality management tools currently available.

One common type of quality management tool is used to analyze the source code of the software application to identify errors or potential errors in the source code. This type of quality management tool typically includes functionality to parse the source code written in a specific programming language e.g. Java C etc. to determine whether the source code satisfies one or more coding rules i.e. rules that define how source code in the particular language should be written . Some quality management tools of the aforementioned type have been augmented to also identify various coding constructs that may result in security or reliability issues. While the aforementioned type of quality management tools corrects coding errors it does not provide the software developer with any functionality to verify the quality of the architecture of software application.

Other quality management tools of the aforementioned type have been augmented to verify that software patterns have been properly implemented. Specifically some quality management tools of the aforementioned type have been augmented to allow the software developer to indicate in the source code the type of software pattern the developer is using. Then the quality management tool verifies during compile time that the software pattern was used implemented correctly.

In another implementation of the aforementioned type of quality management tools the source code of the software is parsed and the components e.g. classes interfaces etc. extracted from the parsing are subsequently combined in a relational graph i.e. a graph linking all or sub sets of the components . In a subsequent step the software developer generates an architectural design and then compares the architectural design to the relational graph to determine whether the software application conforms to the architectural pattern. While the aforementioned type of quality management tool enables the software developer to view the relationships present in the software application it does not provide the software developer with any functionality to conduct independent analysis on the extracted components.

Another common type of quality management tool includes functionality to extract facts i.e. relationships between components classes interfaces etc. in the software and subsequently displays the extracted facts to the software developer. While the aforementioned type of quality management tool enables the software developer to view the relationships present in the software application it does not provide the developer with any functionality to independently query the facts or any functionality to extract information other than facts from the software application.

Another common type of quality management tool includes functionality to extract and display various statistics e.g. number of lines of code new artifacts added software packages present etc. of the software application to the software developer. While the aforementioned type of quality management tool enables the software developer to view the current state of the software application it does not provide the developer with any functionality to verify the quality of the architecture of the software application.

In general in one aspect the invention relates to a A method for analyzing a target system comprising obtaining a characteristics model loading the characteristics model into a meta model obtaining a plurality of characteristics from the target system using a characteristics extractor wherein each of the plurality of characteristics is associated with the characteristics model storing each of the plurality of characteristics obtained from the target system in a characteristics store and analyzing the target system by issuing at least one query to the characteristics store to obtain an analysis result wherein the issuing the at least one query comprises verifying the at least one query using the meta model.

In general in one aspect the invention relates to a system for analyzing a target system comprising a meta model configured to extract and store information about a characteristics model the target system comprising a plurality of characteristics at least one characteristics extractor configured to obtain at least one of the plurality of characteristics from the target system wherein the at least one of the plurality of characteristics is defined in the characteristics model a characteristics store configured to store the at least one of the plurality of characteristics obtained from the target system and a query engine configured to analyze the target system by issuing at least one query to the characteristics store and configured to obtain an analysis result in response to the at least one query wherein the issuing the at least one query comprises verifying the at least one query using the meta model.

In general in one aspect the invention relates to a computer readable medium comprising software instructions for analyzing a target system the software instructions executable on a computer to obtain a characteristics model load the characteristics model into a meta model obtain a plurality of characteristics from the target system using a characteristics extractor wherein each of the plurality of characteristics is associated with the characteristics model store each of the plurality of characteristics obtained from the target system in a characteristics store and analyze the target system by issuing at least one query to the characteristics store to obtain an analysis result wherein the issuing the at least one query comprises verifying the at least one query using the meta model.

Other aspects of the invention will be apparent from the following description and the appended claims.

Exemplary embodiments of the invention will be described with reference to the accompanying drawings. Like items in the drawings are shown with the same reference numbers.

In the exemplary embodiment of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid obscuring the invention.

In general embodiments of the invention relate to a method and apparatus for pattern based system design analysis. More specifically embodiments of the invention provide a method and apparatus for using one or more characteristics models one or more characteristics extractors a query engine configured to query the characteristics of a target system to analyze the system design and a meta model configured to load the one or more characteristics models and configured to verify queries used to analyze the characteristics of the target system. Embodiments of the invention provide the software developer with a fully configurable software quality management tool that enables the software developer to extract information about the characteristics of the various artifacts in the target system and then issue queries to determine specific details about the various artifacts including but not limited to information such as number of artifacts of the specific type present in the target system relationships between the various artifacts in the target system the interaction of the various artifacts within the target system the software patterns that are used within the target system etc.

As shown in the system includes the following components to aid in the analysis of the target system one or more characteristics extractors e.g. characteristics extractor A A characteristics extractor N N a characteristics store application programming interface API a characteristics store one or more characteristics models A N a meta model a query engine and visualization engine . Each of these components is described below.

In one embodiment of the system each of the characteristics models A N describes artifacts i.e. discrete components in a particular domain. In one embodiment of the invention the domain corresponds to any grouping of related artifacts i.e. there is a relationship between the artifacts . Examples of domains include but are not limited to a Java 2 Enterprise Edition J2EE domain that includes artifacts such as servlets filters welcome file error page etc. a networking domain that includes artifacts such as web server domain name server network interface cards etc a DTrace domain that includes artifacts such as network cpu process thread stack function call etc. and Java domain described below . In one embodiment of the invention each of the characteristics models A N includes one or more artifacts one or more relationships describing the interaction between the various artifacts and one or more characteristics that describe various features of the artifact. An example of a characteristics model A N is shown in .

In one embodiment of the invention the use of characteristics models A N enables a user to analyze the target system with respect to a specific domain. Further the use of multiple characteristics models A N allows the user to analyze the target system across multiple domains. In addition the use of multiple characteristics models A N allows the user to analyze the interaction between various domains on the target system .

In one embodiment of the invention other components in the system e.g. characteristics store characteristics store API query engine etc. do not directly interact with the characteristics models A N . Instead the other components in the system communicate with the characteristics models A N through the meta model . In one embodiment of the invention the meta model provides a layer of abstraction between the other components in the system and the characteristics models A N . Thus the meta model enables the other components in the system to operate without any knowledge of the actual characteristics models A N currently being used. Thus the meta model includes functionality to extract specific pieces of information from the characteristics models A N in the system and store this information in a form that may be used by other components within the system. Further the meta model enables characteristics models A N to be dynamically added and removed from the system i.e. characteristics models A N may be plugged in to the system . The structure and functionality of the meta model is described below in .

In one embodiment of the invention the characteristics extractors e.g. characteristics extractor A A characteristics extractor N N are used to obtain information about various artifacts i.e. characteristics defined in the characteristics models A N . In one embodiment of the invention the characteristics models A N are used to generate the characteristics extractor e.g. characteristics extractor A A characteristics extractor N N . In one embodiment of the invention the characteristics extractors characteristics extractor A A characteristics extractor N N are generated using the characteristics models A N .

In one embodiment of the invention the characteristics extractor e.g. characteristics extractor A A characteristics extractor N N corresponds to an agent loaded on the target system that is configured to monitor and obtain information about the artifacts in the target system . Alternatively the characteristics extractor e.g. characteristics extractor A A characteristics extractor N N may correspond to an interface that allows a user to manually input information about one or more artifacts. In another embodiment of the invention the characteristics extractor e.g. characteristics extractor A A characteristics extractor N N may correspond to a process or system configured to obtain information about one or more artifacts in the target system by monitoring network traffic received by and sent from the target system .

In another embodiment of the invention the characteristics extractor e.g. characteristics extractor A A characteristics extractor N N may correspond to a process or system configured to obtain information about one or more artifacts in the target system by sending requests e.g. pinging etc. for specific pieces of information about artifacts in the target system to the target system or alternatively sending requests to the target system and then extracting information about the artifacts from the responses received from target system .

In one embodiment of the invention if the target system corresponds to source code and the characteristics model A N corresponds to a formal specification of a programming language e.g. Java then the characteristics extractor e.g. characteristics extractor A A characteristics extractor N N may correspond to a process that is configured to parse the source code and temporarily store the artifacts and characteristics obtained from parsing the source code in an in memory object graph.

Those skilled in the art will appreciate that different types of characteristics extractors may be used to obtain information about artifacts in the target system . Further those skilled in the art will appreciate that each characteristics extractor or set of characteristics extractors is associated with a particular characteristics model A N . Thus each characteristics extractor typically only retrieves information about artifacts described in the characteristics model A N with which the characteristics extractor is associated. Furthermore if there are multiple characteristics models A N in the system then each characteristics model A N may be associated with one or more characteristics extractors.

The information about the various artifacts in the target system obtained by the aforementioned characteristics extractors characteristics extractor A A characteristics extractor N N is stored in the characteristics store via the characteristic store API . In one embodiment of the invention characteristics store API provides an interface between the various characteristics extractors characteristics extractor A A characteristics extractor N N and the characteristics store . Further the characteristics store API includes information about where in the characteristics store each characteristic obtained from the target system should be stored.

In one embodiment of the invention the characteristics store corresponds to any storage that includes functionality to store characteristics in a manner that allows the characteristics to be queried. In one embodiment of the invention the characteristics store may correspond to a persistent storage device e.g. hard disk etc . In one embodiment of the invention the characteristics store corresponds to a relational database that may be queried using a query language such as Structure Query Language SQL . Those skilled in the art will appreciate that any query language may be used. In one embodiment of the invention if the characteristics store is a relational database then the characteristics model A N may be used to generate a schema for storing the characteristics associated with the particular characteristics model A N . Those skilled in the art will appreciate that each characteristics model A N within the system may be associated with a separate schema.

In one embodiment of the invention if the characteristics store is a relational database that includes a schema generated from the characteristics model A N then the characteristics store API includes the necessary information to place characteristics obtained from target system in the appropriate tables in the characteristics store . Specifically the characteristics store API may include information about which table in the characteristics store to place specific pieces of information about artifacts in the target system . In one embodiment of the invention the characteristics store API is generated using the characteristics model A N .

In one embodiment of the invention if the characteristics extractors are configured to temporarily store artifacts and characteristics obtained from the target system in an in memory object graph then the characteristic store API is configured to populate the characteristics store using the populated in memory object graph. In one embodiment of the invention characteristics store API populates the characteristics store by traversing the in memory object graph and for each artifact or characteristic encountered determining where in the characteristics store to store the artifact or characteristics in accordance with the schema generated using the characteristics model with which the artifacts and characteristics are associated. In one embodiment of the invention if the characteristics store includes multiple schemas then the characteristics store API includes functionality to search the characteristics store for the schema associated with the particular artifacts and or characteristics.

In one embodiment of the invention if the characteristics store includes a schema then the mapping of individual components e.g. artifacts characteristics relationships in the characteristics models A N to the various tables within the schema is stored in the corresponding characteristics model A N .

Continuing with the discussion of in one embodiment of the invention the query engine is configured to issue queries to the characteristics store . In one embodiment of the invention the queries issued by the query engine enable a user e.g. a system developer etc. to analyze the target system . In particular in one embodiment of the invention the query engine is configured to enable the user to analyze the presence of specific software patterns in the target system as well as the interaction between various software patterns in the target system.

In one embodiment of the invention a software pattern corresponds to a framework that defines how specific components in the target system should be configured e.g. what types of information each component should manage what interfaces should each component expose and how the specific components should communicate with each other e.g. what data should be communicated to other components etc. . Software patterns are typically used to address a specific problem in a specific context i.e. the software system environment in which the problem arises . Said another way software patterns may correspond to a software architectural solution that incorporates best practices to solve a specific problem in a specific context.

Continuing with the discussion of the query engine may also be configured to issue queries about the interaction of specific software patterns with components that do not belong to a specific software pattern. Further the query engine may be configured to issue queries about the interaction of components that do not belong to any software patterns. In one embodiment of the invention the query engine includes functionality to verify the query using the meta model prior to issuing the query to the characteristics store . The verification of the query using the meta model is described below in .

In one embodiment of the invention the query engine may include pre specified queries and or enable to the user to specify custom queries. In one embodiment of the invention both the pre specified queries and the custom queries are used to identify the presence of one or more software patterns and or the presence of components that do not belong to a pattern in the target system . In one embodiment of the invention the pre specified queries and the custom queries are specified using a Pattern Query Language PQL . In one embodiment of the invention PQL enables the user to query the artifacts and characteristics of the artifacts stored in the characteristics store to determine the presence of a specific software pattern specific components of a specific software pattern and or other components that are not part of a software pattern within the target system .

In one embodiment of the invention the query engine may include information or have access to information about the characteristics model A N that includes the artifact and or characteristics being queried. Said another way if the query engine is issuing a query about a specific artifact then the query engine includes information or has access to information about the characteristics model to which the artifact belongs. Those skilled in the art will appreciate that the query engine only requires information about the particular characteristics model A N to the extent the information is required to issue the query to the characteristics store .

Those skilled in the art will appreciate that the query engine may include functionality to translate PQL queries i.e. queries written in PQL into queries written in a query language understood by the characteristics store e.g. SQL . Thus a query written in PQL may be translated into an SQL query prior to being issued to the characteristics store . In this manner the user only needs to understand the artifacts and or characteristics that the user wishes to search for and how to express the particular search using PQL. The user does not need to be concerned with how the PQL query is handled by the characteristics store .

Further in one or more embodiments of the invention PQL queries may be embedded in a programming language such as Java Groovy or any other programming language capable of embedding PQL queries. Thus a user may embed one or more PQL queries into a program written in one of the aforementioned programming languages. Upon execution the program issues one or more PQL queries embedded within the program and subsequently receives and processes the results prior to displaying them to the user. Those skilled in the art will appreciate that the processing of the results is performed using functionality of the programming language in which the PQL queries are embedded.

In one embodiment of the invention the results of the individual PQL queries may be displayed using the visualization engine . In one embodiment of the invention the visualization engine is configured to output the results of the queries on a display device i.e. monitor printer projector etc. .

As shown in the meta model schema includes four entities a meta model entity a meta attribute entity a meta characteristics entity and a meta relationship entity . The meta model entity represents a characteristics model . The meta model entity may include zero or more meta attribute entities where each meta attribute entity is configured to store a name of an attribute associated with a characteristics model A N . Each meta attribute entity is associated with zero or more meta characteristics where each meta characteristics is configured to store a name of a characteristic associated with the attribute stored in the associated meta attribute entity . In addition each meta attribute entity is also associated with zero or more meta relationships where each meta relationship is configured to store a name of relationship associated with the attribute store in the associated meta attribute entity . Exemplary information stored in each of the aforementioned entities is shown in .

In one embodiment of the invention the meta model includes exemplary information as described in the meta model schema shown in . However the additional information associated with the particular characteristics model is maintained in the characteristics models A N .

Those skilled in the art will appreciate that the meta model schema only describes the organization of the information within the meta model and that the actual implementation of the meta model schema may vary in different implementations. In one embodiment of the invention the meta model is implemented as a relational database configured using the meta model schema.

In addition to extracting and storing information about characteristics models A N within the system the meta model includes functionality to remove information that corresponds to characteristics models A N that have been removed from the system. Further the meta model may also include functionality to request information from the specific characteristics models A N e.g. information about how the specific attributes characteristics and relationships are represented in the characteristics store etc. . The meta model also includes functionality to traverse and or search the contents of the meta model to determine the presence of a specific artifact characteristic or relationship between artifacts in the system.

As discussed above each characteristics model defines one or more artifacts one or more relationships between the artifacts and one or more characteristics for each artifact. In one embodiment of the invention the characteristics model corresponds to a formal specification of a domain. The following is an example of a Java characteristics model that is formal specification of a Java language domain in accordance with one embodiment of the invention.

In the above Java characteristics model the JFactDatabase artifact is defined in lines 1 7 the JPackage artifact is defined in lines 9 16 the JClass artifact is defined in lines 18 35 the JMethod artifact is defined in lines 37 57 the JField artifact is defined in lines 59 70 and the JParameter artifact is defined in lines 72 80. A graphical representation of the Java characteristics model described above is shown in . Specifically shows each of the aforementioned Java characteristics model attributes i.e. JFactDatabase JPackage JClass JField JParameter and JMethod as well as the characteristics associated with each of the aforementioned artifacts and the relationships between the aforementioned artifacts. In particular box corresponds to the JFactDatabase artifact box corresponds to the JPackage artifact box corresponds to the JClass artifact box corresponds to the JField artifact box corresponds to the JParameter artifact and box corresponds to the JMethod artifact.

As discussed above the characteristics model is used to generate a schema. The following text describes a textual representation of a Java schema generated using the Java characteristics model shown in .

The following describes the various portions of the Java Schema i lines 1 11 define the table associated with the JFactDatabase artifact ii lines 13 24 define the table associated with the JPackage artifact iii lines 26 45 define the table associated with the JClass artifact iv lines 47 76 define various join tables used to represent various m n relationships defined in the Java characteristics model shown in for the JClass artifact v lines 128 147 define the table associated with the JMethod artifact vi lines 78 126 and 149 157 define various tables used to represent various relationships defined in the Java characteristics mode shown in for the JMethod artifact vii lines 158 174 define the table associated with the JField artifact viii lines 176 188 define the table associated with the JParameter artifact ix lines 190 247 define additional tables used to implement the Java schema x lines 248 315 define the various relationships e.g. 1 1 and 1 n between the various artifacts defined in the Java characteristics model.

Continuing with the discussion of a schema for the characteristics store is subsequently created and associated with characteristics model ST . One or more characteristics extractors associated with characteristics model are subsequently created ST . Finally a characteristics store API is created ST . In one embodiment of the invention creating the characteristics store API includes creating a mapping between characteristics obtained by the characteristics extractors and tables defined by the schema configured to store the characteristics in the characteristics store.

Those skilled in the art will appreciate that ST ST may be repeated for each characteristics model. In addition those skilled in the art will appreciate that once a characteristics store API is created the characteristics store API may only need to be modified to support additional schemas in the characteristics data store and additional characteristics extractors. Alternatively each characteristics model may be associated with a different characteristics store API.

At this stage the system is ready to analyze a target system. shows a flowchart in accordance with one embodiment of the invention. Initially characteristics are obtained from the target system using one or more characteristics extractors ST . In one embodiment of the invention the characteristics extractors associated with a given characteristics model only obtain information about characteristics associated with the artifacts defined in the characteristics model.

Continuing with the discussion of the characteristics obtained from the target system using the characteristics extractors are stored in the characteristics store using the characteristics store API ST . Once the characteristics are stored in the characteristics store the target system may be analyzed using the characteristics model or models the query engine the meta model and the characteristics stored in the characteristics store ST describe below in . In one embodiment of the invention the user uses the query engine to issue queries to characteristics store. As discussed above the query engine has access via the meta model to information about the characteristics models currently being used to analyze the target system. The results of the analysis are subsequently displayed using a visualization engine ST .

A determination of whether the verification of the PQL query was successful is subsequently made ST . The verification of the PQL query is successful if every component in the PQL query is present in the meta model.

The following is an example of PQL query and the process involved in verifying the various components of the PQL query.

When the above query is submitted to the meta model for verification the meta model first determines whether the JClass component is present in the meta model. Assuming that the Java characteristics model described above is loaded into the meta model then the meta model will discover that JClass is an artifact. Next the meta model will attempt to verify whether c.parentPackage.name is a valid component. Since c is selected from JClass as defined in the query the component c.parentPackage.name may be re written as JClass.parentPackage.name. As defined in the Java characteristics model discussed above JClass is related to JPackage through a parentPackage relationship. Further name is a characteristic of JPackage thus the component JClass.parentPackage.name is a valid component. As there are no other components in the query to verify the verification of the query is complete and successful.

Continuing with the discussion of if the verification is not successful then the query engine may request a new or modified PQL query ST . If a new or modified PQL query is submitted then the method proceeds to ST. Alternatively if a new or modified PQL query is not submitted then the method ends. Those skilled in the art will appreciate that the meta model may also issue an error message indicating that the verification was not successful.

If the PQL query is successfully verified then PQL query is translated into a query understood by the characteristics store using the schema s associated with the various components in the PQL query ST . As discussed above the characteristics store may not include functionality to query the characteristics using a PQL query. In such cases the PQL query is translated into a query understood by the characteristics store for example an SQL query. In one embodiment of the invention translating the PQL query into for example an SQL query includes obtaining information about how specific components i.e. artifacts characteristics and relationships are referred to in the characteristics store. Thus the meta model upon successful verification of the PQL query may query the individual characteristics models to determine how each of the components in the PQL query are represented in the characteristics store i.e. what table each component is in what name is used to refer to the component in the characteristics store etc. .

Continuing with the discussion of the query resulting from the translation is subsequently issued to the characteristics store ST and the results of the query are then returned to the query engine ST . Those skilled in the art will appreciate that while refers to PQL and SQL queries other query languages such as those discussed above may be used. Further those skilled in the art will appreciate that STI ST may be performed concurrently with ST ST. In addition steps in and may be performed concurrently.

An embodiment of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a networked computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The networked computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The networked computer system is connected to a local area network LAN or a wide area network via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms. Further those skilled in the art will appreciate that one or more elements of the aforementioned computer may be located at a remote location and connected to the other elements over a network. Further software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape or any other physical computer readable storage device.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

