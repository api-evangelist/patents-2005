---

title: Facilitating the operation of a client/server application while a client is offline or online
abstract: One embodiment of the present invention provides a system that facilitates the operation of a client/server application while a client is online or offline. The system operates by receiving a request from an application at a client to synchronize data with a server. In response to the request, the system places the data in a resource, wherein the resource can be a file. Next, the system sends an acknowledgement to the application. The system then determines a protocol for synchronizing the resource with the server. Finally, the system queues the resource for synchronization with the server, or optionally synchronizes the resource with the server immediately.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09497292&OS=09497292&RS=09497292
owner: Adobe Systems Incorporated
number: 09497292
owner_city: San Jose
owner_country: US
publication_date: 20051118
---
The present invention relates to client server applications. More specifically the present invention relates to a method and an apparatus for facilitating the operation of a client server application regardless of whether a client is online or offline.

The increased computing power of mobile computing devices and the recent boom in the handheld computing device market have led to a substantial increase in the number of client server applications. Fueled by the abundance of Wi Fi hotspots and high bandwidth wireless communication services users are routinely working on the road. However even with the increasing coverage of wireless communication services there are many locations where users are unable to connect to corporate networks or to the Internet. In addition there are many locations such as on most airplanes where Internet connectivity is not an option.

In order to maximize productivity users typically work offline when they are not able to connect to online resources. Unfortunately most client server applications do not handle offline work gracefully if at all. In addition when the users are finally able to go online it can be difficult to synchronize their offline work with the corresponding online resources.

Furthermore programmers are having an increasingly difficult time coding applications that cross the online offline boundary. For example due to the abundance of tools for programming web based applications along with their relative ease of use a large number of client server applications are web based applications that are accessed via a web browser. These browser applications typically do not have facilities for allowing a user to work offline. As a result in many instances programmers completely abandon offline support.

Hence what is needed is a method and an apparatus that enables a user to work seamlessly whether or not the user s computing device is online or offline.

One embodiment of the present invention provides a system that facilitates the operation of a client server application while a client is online or offline. The system operates by receiving a request from an application at a client to synchronize data with a server. In response to the request the system places the data in a resource wherein the resource can be a file. Next the system sends an acknowledgement to the application. The system then determines a protocol for synchronizing the resource with the server. Finally the system queues the resource for synchronization with the server or optionally synchronizes the resource with the server immediately.

If the client is online the system can synchronize the resource with the server according to various rules and conditions such as synchronization priority and network utilization. If the client is offline the system leaves the resources in the queue until the client subsequently goes online and has an active connection to the server at which point synchronization can take place.

One embodiment of the present invention enables the application to operate in exactly the same way if the client is online or offline. In this embodiment the application operates solely on a resource and does not have to be aware of whether the client is online or offline. The framework provided by embodiments of the present invention handles the synchronization of the resource for the application. This greatly simplifies programming of the application.

In a variation on this embodiment upon receiving the acknowledgement the application continues processing without having to worry about performing subsequent synchronization operations.

In a variation of this embodiment determining the synchronization protocol additionally involves determining a synchronization priority for the resource wherein the synchronization priority is used to prioritize the synchronization of resources in the queue.

In a variation of this embodiment the resource includes an identifier for an authority that controls the content of the resource a synchronization protocol for the resource a synchronization status of the resource and a last synchronization time of the resource.

In a further variation the synchronization protocol includes a schedule for synchronization. In this variation the resource will be synchronized only if it satisfies the schedule.

In a further variation the system notifies the user of the synchronization status of the resource when the synchronization status of the resource changes.

The following description is presented to enable any person skilled in the art to make and use the invention and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention. Thus the present invention is not intended to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. This includes but is not limited to magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs and DVDs digital versatile discs or digital video discs .

Client is coupled to network . Client can generally include any node on a network including computational capability and including a mechanism for communicating across the network .

Servers and are also coupled to network . Servers and can generally include any computational node including a mechanism for servicing requests from a client for computational and or data storage resources.

Client includes application . User interacts directly with client . Client in turn interacts with servers and via network .

The term online refers to a state in which client has an active connection to network or any other network that enables client to communicate with servers and . Conversely the term offline refers to a state where client does not have an active connection to network or any other network that enables client to communicate with servers and .

For example client may be a laptop which is presently located in a remote part of the world where client has no available network connection and thus cannot communicate with servers and . In that state client is offline. In contrast when client is moved to a home office where client has a Virtual Private Network VPN connection to network via a cable modem and can consequently communicate with servers and client is online. 

One embodiment of the present invention provides a framework that has two distinct elements 1 resources and 2 mechanisms for updating resources. During operation user notifies the framework about the resources that user cares about and the framework is responsible for keeping those resources up to date.

For example consider the case where user submits an expense report while user is working on an airplane where there is no connectivity between client and network . When user clicks on the SUBMIT button after filling out expense report the application causes the data from expense report to be placed in resource which in one embodiment of the present invention is a data.xml file. Note that XML or eXtensible Markup Language is a platform independent structured data format that includes data as well as descriptors for the data. 

After the data is placed in the resource RMF identifies resource as an updatable resource and identifies the protocol for submitting the data in resource to server e.g. via an HTTP POST operation. An HTTP POST operation is defined within the HyperText Transfer Protocol which is used to request that a server accept data enclosed in the request sent to the server. Next when client goes back online the data from resource will be submitted to server without further involvement of user .

Resource Management Facility acts as a monitor for all of the updateable resources. In addition RMF maintains a current copy of update rules for each resource. When client goes back online RMF scans the list of resources and determines which ones are not up to date and then updates them.

Continuing with the expense report example when client goes online RMF submits the data from expense report via HTTP POST to server . Server can optionally return data back to client e.g. server may send the expense report number to client which client uses to populate the expense report number field after the submission of expense report is completed. When user subsequently opens expense report the field with the expense number is populated with data from server .

In one embodiment of the present invention RMF can be thought of as a global outbox which runs in the background on client . RMF identifies the number of resources that are not up to date when client is offline and identifies the status of each resource being synchronized while client is online. Note that this can include displaying a status bar showing the synchronization progress for each resource or for a collection of resources. Updates may take place based on priority or some type of scheduling system so that all resources are not updated at the same time.

In another embodiment of the present invention RMF acts as a data synchronizer between client and server . In addition to queuing resources to submit to server while client is offline RMF also maintains a list of resources to be synchronized with server when client goes back online.

For example in one embodiment of the present invention the present invention may be used to update news stories without having to open a web browser to fetch the stories e.g. the New York Times Technology section where each story is a separate resource that is updated via HTTP GET from a web server. Note that an HTTP GET method retrieves via the HyperText Transfer Protocol a resource identified in a GET request. RMF also may be used to get the latest version of documents e.g. expense reports themselves could be an updateable resource . Virtually any data that is sent from client to server or vice versa can be maintained and kept up to date by RMF .

In another example embodiment of the present invention user subscribes to various news feeds via a Really Simple Syndication RSS news reader. Note that RSS is a family of XML file formats for Web syndication used by news websites and weblogs. In this embodiment user subscribes to multiple news sources. For instance user might subscribe to a political news feed from CNN.com and an Opinion Editorial news feed from the Wall Street Journal. In this embodiment requests are created by the RSS news reader application and sent to RMF . RMF places these requests into resources within RMF . According to the subscription rules for each of these resources RMF contacts a server designated in each resource to retrieve available news stories. As news stories are retrieved from their respective servers they are placed into resources and passed off to the RSS news reader application on client . For example RMF queries server for the latest political news from CNN.com. If new stories exist from a previous update RMF requests the RSS version of those stories. Upon receiving the RSS version of those stories RMF places those stories into resources and passes the stories back to the RSS news reader. In addition RMF queries server for the latest Opinion Editorial news stories from the Wall Street Journal. Server responds to RMF indicating that no new stories exist but a newer version of an existing story that RMF has previously received exists. RMF requests the newer version of the existing story from server and overwrites the existing resource in RMF . RMF also sends the newer version of the news story to the RSS news reader.

In one embodiment of the present invention developers can write applications where the model network activity is performed declaratively. This has to do with how RMF knows which resources need to be updated and how to update them. In contrast in a typical application a programmer needs to include code for various network related operations such as checking for an active network connection. This information is implicit in code which the application programmer needs to write. For example 

This statement is procedural not declarative. In one embodiment of the present invention this information is declared by the application author. For example 

In this embodiment because the model network activity is performed declaratively and not procedurally client can execute the same code when client is online as client executes when client is offline.

As stated previously the application will identify the resource as an updatable resource and will also identify the method of submitting the data in the resource to server . Note that the declaration does not need to be in a markup language as shown here it could be made in a number of different ways. The important thing is that the author is declaring this information in some form and that RMF executes it at the appropriate time as opposed to the author writing the code and explicitly executing the update.

One embodiment of the present invention proposes an RMF model including three features 1 every resource is a file which is kept up to date 2 a resource is kept up to date with respect to an authority and 3 resources are updated via an update protocol. Resources become known to RMF via a declaration Application Programming Interface API invocation or other mechanisms. To RMF each resource is an opaque blob of data with several pieces of associated metadata the authority the update protocol the resource s status and the resource s last update time.

In one embodiment of the present invention RMF runs continually. For example RMF might be implemented as an operating system service. In one embodiment of the present invention RMF is implemented as a Microsoft Windows service. This service maintains what is effectively a database each record of which enumerates a resource along with some associated metadata. When running RMF accesses this database to continually determine which resources need to be updated. There are two cases for updating 

In one embodiment of the present invention an RMF not illustrated in is implemented on server . This server side RMF queues resources from server to be synchronized with client .

In one embodiment of the present invention RMF synchronizes resources between client and servers and by updating local copies of resources on client with data retrieved from servers and such as in the case of retrieving news stories web pages documents etc. as well as sending modified resources to servers and such as in the case of submitting expense reports filing documents etc. While synchronization describes the overall process of ensuring that client and servers and have up to date versions of each resource update describes the modification of local copies of resources within RMF on client .

In one embodiment of the present invention RMF continually monitors network connectivity and the queue of pending updates. Whenever client is online RMF processes updates from the queue. A prioritization method may be used to determine which updates to execute first. The priority may be based on the protocol time of last update importance or other factors. RMF may also execute multiple updates at the same time if system resources and network bandwidth permit it. Typically RMF will generally not execute all updates at once because this would typically overwhelm the system.

In one embodiment of the present invention updating a resource involves running code associated with its update protocol. For example updating a resource could involve retrieving a new copy of a document or report or changing a subscription for an RSS news feed. This may cause the local copy of the resource to be updated. It also updates the status and last update time of the resource. If an update fails RMF reschedules the update for some future time.

In one embodiment of the present invention client makes use of RMF by registering resources with RMF and then continuing to use those resources. Client and RMF might share the resource in memory e.g. if the resource is an in memory XML Document Object Model DOM or they may be more loosely associated e.g. a resource is a file registered by the path of that file. Client can register for notifications about resources. When registered RMF invokes a client callback when the resource is modified.

In one embodiment of the present invention RMF monitors registered resources and doesn t require active client involvement. RMF either registers for appropriate notifications periodically queries for updates or the like. For example consider a web page that updates frequently such as the CNN.com home page. The resource is the page the authority is the web server at http cnn.com and the update protocol is HTTP. A browser which uses RMF would create a local resource called the CNN home page and register it with RMF . The resource is initially out of date so RMF would schedule an update. When the update runs it would perform an HTTP GET on http cnn.com and place the retrieved page in the registered resource. From this point on the browser can display this resource which is local regardless of whether client is online or offline.

Note that the authority for a resource can include any server that is responsible for controlling the content of the resource. For example the authority for a resource containing data from Fox News could be foxnews.com and the authority for a corporate expense account could be the accounting server of user s employer. Also note that the update protocol can include but is not limited to HTTP File Transfer Protocol FTP Simple Mail Transfer Protocol SMTP Simple Network Management Protocol SNMP Network News Transport Protocol NNTP Post Office Protocol POP Internet Message Access Protocol IMAP etc.

The HTTP protocol defines when a fetched resource expires. RMF records the value of this expiration for the CNN page in the resource database. When the resource expires RMF schedules a new update. This occurs even if the browser is not running. The next time the browser launches even if it is offline it has the latest possible copy of the web page available. However the browser itself does not need to know about online vs. offline behavior nor does it need to implement HTTP to fetch the resource.

Note that the present invention differs from existing messaging systems in that it provides a framework for client server applications to operate independent of network status. Resources can be synchronized in real time or placed in a queue for synchronization. In contrast messaging systems place all of the messages into the queue. When a messaging system goes online it typically tries to synchronize everything in the queue as quickly as possible. One embodiment of the present invention provides for a system that synchronizes items in the queue only if certain criteria are met. These criteria can include scheduling priority scheduling windows bandwidth utilization client utilization expiration values etc.

Also note that embodiments of the present invention differ from the prior art in regards to offline browsing. For example in a traditional offline browsing scenario user is presented with the last known copy of a web page from the last time user visited that web page when client was online. For example with traditional offline browsing if user has not visited a web page such as Newsweek.com in two weeks when user brings up cached versions of Newsweek.com while offline browsing user will be presented with information that is two weeks old. In contrast with an embodiment of the present invention if user has not visited Newsweek.com in two weeks but was online a few hours before bringing up an offline copy of Newsweek.com User would be presented with information that was current as of the last time client was online.

One embodiment of the present invention provides a facility for notifying user of the status of resources being monitored by RMF . Notification can include the playing of sounds displaying of pop up windows or modal dialogs or the presence of status indicator icons in an area visible to user . In this embodiment RMF could potentially notify user of network status synchronization status of various resources availability of new or updated resources and error conditions that may occur.

For example in one embodiment of the present invention if user is reading a news article from Forbes.com and RMF detects that a newer version of that article exists on server then RMF may retrieve the newer version of the Forbes.com news article and immediately display the Forbes.com news article in a viewer replacing the old version of the Forbes.com news article that user was viewing. In addition RMF may play a sound indicating that the Forbes.com news article has been updated as well as provide user with a modal dialog indicating that the Forbes.com news article has been updated.

In one embodiment of the present invention scheduling the resource for an update involves placing the resource in a queue. The system then determines if the client is online step . If the client is offline the resource remains in the queue while the client periodically checks connectivity to the server. When the client goes online the system synchronizes the resource with the server step and returns to step to record the authority the update protocol the resource s status and the last update time of the resource since they all have potentially changed with the update. Note that in one embodiment of the present invention the system runs continually to ensure that all updateable resources are kept as up to date as possible while the client is online and to queue updates for resources while the client is offline.

The foregoing descriptions of embodiments of the present invention have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims.

