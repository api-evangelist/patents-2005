---

title: System and method for error reporting
abstract: A system and method are provided for reporting errors in an object-oriented software architecture environment. The method comprises: an application calling an initial method; in response to the initial method call, at least one object encountering an error in response to a subsequent method call; accumulating error information; and, creating a user-defined accumulated error report. Generally, accumulating error information includes: calling an accumulated error reporting object; and, from the accumulated error report object, calling a method for adding received error information to accumulated error information. Then, creating the user-defined accumulated error report includes calling a method for creating an error report text message by: reviewing the accumulated error information; and, matching accumulated error information with user-selected error criteria. Further, creating an error report text message may include calling a method for: recovering a text message associated with each matching error; and, logically presenting the recovered text message errors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07571429&OS=07571429&RS=07571429
owner: Sharp Laboratories of America, Inc.
number: 07571429
owner_city: Camas
owner_country: US
publication_date: 20050118
---
This invention generally relates to networked device communications and more particularly to a system and method for efficient reporting errors in a network environment.

A local area network LAN of connected devices may span over the floor of a building a group of buildings or may even be connected worldwide. Various hardware interconnections and network protocols may be used. In a small LAN each user performs the management function of exchanging adding or removing devices installing software and troubleshooting. However in a large scale LAN a more complicated form of management is required. As in a small LAN devices still need to be installed or removed and software updated. A typical LAN may include an Ethernet interface connected personal computers PCs printers a file server to manage file access a print server to manage the connected printers and other peripheral devices. A wide area network WAN is an aggregate of LANs connected via a high speed digital line.

Applications built using the Microsoft component object model COM technology rely on the error information provided by the system to supply a user with information concerning any errors that has occurred during a COM interface method call. Unfortunately COM only permits a single error message to be generated. That is when a client makes a system call to set the error information any previous error information is overwritten. A typical COM method call may involve other objects which in turn make method calls to implement a particular function. If one of these components objects fails it typically sends error information. Each error message overwrites the previous error message. Thus only the error message associated with the last component in the chain of components survives. If there is more than one component failure the information associated with the initially recorded errors is lost. This last recorded error procedure may lead to insufficient error information being returned from a method call. As a result it may be difficult for a user to completely identify a problem and resolve it.

A network may connect hardware devices and software products made by a diverse group of manufacturers. For example an application built using a software development kit SDK developed by third party manufacturers may typically make a call to the SDK to accomplish a printer task such as processing a scanned document received from the scanner. The designers of the SDK would typically like to document all the possible errors that a typical call returns in case the method fails. A typical SDK method usually uses the available resources such as system API and any other third party developed SDKs to accomplish the task. Each of these resources has its own list of error codes returned when such error occurs. It is difficult for the SDK developers to document and manage all possible errors.

OLEDB an SDK from Microsoft for working with databases accumulates the error information during a method call without erasing any previously recorded errors. This permits a user or application developers to iterate through the errors. However the OLEDB SDK is limited to a very narrow range of functions and does not extend to architectures. That is OLEDB SDK does not provide a way for OLEDB to used or extended for use with other SDKs. For example when reporting an error it may be desirable for an exemplary SDK to add some custom fields and attributes to the error message. This is not possible with the OLEDB because the format it very rigid.

It would be advantageous if an SDK existed that permitted third party component developers to accumulated error augments when executing an object oriented application.

It would be advantageous if an architecture existed that permitted all occurring errors to be captured during an application programming interface API call in a convenient format to help application developers and end users quickly resolve the problems.

Accordingly a method is provided for reporting errors in an object oriented software architecture environment such as a SDK. The method comprises an application calling an initial method in response to the initial method call at least one object encountering an error in response to a subsequent method call accumulating error information and creating a user defined accumulated error report.

For example a COM application may call the initial method. Then the step of accumulating error information includes a COM ISupportErrorInfo object receiving a first error information and installing an accumulated error reporting object that calls a method for 

More generally accumulating error information includes calling an accumulated error reporting object and from the accumulated error report object calling a method for adding received error information to accumulated error information. Then creating the user defined accumulated error report includes calling a method for creating an error report text message by 

Further creating an error report text message may include calling a method for recovering a text message associated with each matching error and logically presenting the recovered text message errors.

Additional details of the above described method and a system for reporting errors in an object oriented software architecture environment are provided below.

Object oriented software is typically run on a container architecture that provides a runtime environment and interface services such as security transactions and database access. Examples of common container architectures include COM common object request broker architecture CORBA Jave 2 platform enterprise edition J2EE and .NET.

For example COM is an architecture that is designed to be run on Microsoft Windows operating systems OSs such as Windows 95 98 or NT 4.0. Thus many Window object and Window application objects are built as COM objects. The internal COM objects of an application such as a word processing application can be written in such a way as to automatically selected from other objects. In this manner information from a database can be accessed and inserted into a document for example.

In the system comprises an application calling an initial method . The application or client program includes at least one initial object and an initial method resides in the object . As shown the application is embedded as stored software in the memory of a client which may be a PC or network terminal for example. The initial method accesses a first object that calls a subsequent method in response to receiving the initial method call. The first object may reside as a series of software instructions that are loaded into the memory of a network connected device such as a printer of server. The first object encounters an error in executing the subsequent method call and transmits error information. An accumulated error reporting object AERO accumulates error information from the objects such as first object and creates a user defined accumulated error report . The AERO is shown embedded with the client . Alternately but not shown it may be embedded in any network connected device. AERO is a novel application programming interface API that can be used for more accurately calling error information.

Although only a client and one network connected device are discussed it should be understood that the system may comprise a network with a plurality of connected devices. For example the connected devices can be printer multifunctional peripherals MFPs network servers or print server. As described above the application calling the initial method may reside with any of the network connected devices. The AERO then calls method for creating an error report text message with errors such as network connection errors and device errors.

In one aspect see the application is a Microsoft COM application meaning that the initial object see is a COM architecture object. As is conventional with COM architecture a COM ISupportErrorInfo object receives transmitted error information such as from the first object . Then the AERO calls a method for adding received error information to accumulated error information and replacing error information in the COM runtime with the accumulated error information.

Returning the AERO is not limited to any particular object oriented environment. Generally the accumulated error reporting object calls method for adding received error information to accumulated error information and for creating an error report text message.

In one aspect the accumulated error reporting object calls a method for reviewing the accumulated error information and matching accumulated error information with user selected error criteria . Then the method for creating an error report text message uses the matching error information.

For example the accumulated error reporting object may call method for creating an error report text message that recovers a text message associated with each matching error and logically presents the recovered text message errors.

For example the second object is called from a first object method and the third object is called from the second object method . The accumulated error reporting object receives an accumulated error information from the third object . Upon request the accumulated error information is sent to the second object then the AERO receives accumulated error information updated with second object errors if any . The AERO sends the accumulated error information to the first object and receives accumulated error information updated with the first object errors if any .

Returning to the accumulated error reporting object calls method for matching the third plurality of error messages to user defined error criteria . For example not all the recorded errors may be of interest to the user. Further AERO calls method for logically presenting a third plurality of text message errors in the error report text message. For example method may chronologically organize the text message errors. Alternately the method may organize the errors by device serial number or device manufacturer. In one aspect the accumulated error reporting object calls method for generating the error report text message in eXtensible Markup Language XML format.

In Step an application calls an initial method. For example the application can be an SDK. In Step at least one object called by the initial method encounters an error in response to a subsequent method call. Step accumulates error information. Step creates a user defined accumulated error report.

In one aspect accumulating error information in Step includes substeps. Step calls an accumulated error reporting object AERO . From the accumulated error reporting object Step calls a method for adding received error information to accumulated error information. That is AERO is an API that retrieves error information appends this information to any previously existing error information and sets the updated information in the system. Then creating the user defined accumulated error report in Step includes calling a method for creating an error report text message.

For example if Step is a Microsoft Component Object Model COM application calling the initial method then accumulating error information in Step includes a COM ISupportErrorInfo object receiving a first error information. Step installs an accumulated error reporting object AERO and Step calls a method for adding the first error information to accumulated error information and replacing the first error information in the COM runtime with the accumulated error information.

In another aspect creating an error report text message Step includes calling a method for reviewing the accumulated error information and matching accumulated error information with user selected error criteria. In a different aspect creating an error report text message includes calling a method for recovering a text message associated with each matching error and logically presenting the recovered text message errors.

For example Step may logically present the recovered text messages by chronologically organizing the text message errors. The error report text message may be generated in eXtensible Markup Language XML format. However the method is not limited to any particular type of format.

In one aspect encountering an error in response to a subsequent method call in Step includes substeps. Step makes a first plurality of method calls from a second plurality of objects. Step encounters a third plurality of error responses to the calls. Step matches the third plurality of error responses to user defined error criteria and Step logically presents a third plurality of text message errors.

More specifically making the first plurality of method calls from the second plurality of objects in Step may include calling a second object from a first object method and calling a third object from a second object method. Then accumulating error information in Step includes the second object retrieving any error information associated with the third object adding its own error information and storing the accumulated error information. Then the first object retrieves any error information associated with the second object adds its own error information and stores the accumulated error information.

In another aspect Step may call the initial method from an application in a network of connected devices. Then calling a method for creating an error report text message Step includes reporting errors such as network connection errors and device errors.

A system and method have been provided for reporting errors in a network using an object oriented architecture. Examples of the inventions have been providing in the context of COM architecture to help illustrate the invention. However the invention is not limited to merely this architecture. Other variations and embodiments of the invention will occur to those skilled in the art.

