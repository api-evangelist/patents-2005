---

title: System and method for updating one or more programs and their environment
abstract: A system and method automatically updates one or more programs and some or all of an environment in which the one or more programs run, to latest versions of the programs and the environment, or portion thereof.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07934210&OS=07934210&RS=07934210
owner: Adobe Systems Incorporated
number: 07934210
owner_city: San Jose
owner_country: US
publication_date: 20050325
---
This application claims the benefit of U.S. provisional application Ser. No. 60 556 721 entitled Method and Apparatus for Communicating Information Over a Network filed on Mar. 26 2004 by Kevin Lynch David Calaprice Ethan Malasky and Tracy Stampfli U.S. provisional application Ser. No. 60 556 595 entitled Method and Apparatus for Installing One or More Programs and At Least a Portion of Their Environment filed on Mar. 26 2004 by Kevin Lynch Tracy Stampfli Peter Grandmaison and Rebekah Hash and U.S. provisional application Ser. No. 60 556 966 entitled Method and Apparatus for Updating One or More Programs and Their Environment filed on Mar. 26 2004 by Tracy Stampfli and Rebekah Hash each having the same assignee as this application and each is incorporated herein by reference in its entirety.

This application is related to U.S. application Ser. No. 11 090 402 entitled System and Method for Communicating Information Over a Network filed on Mar. 25 2005 by Kevin Lynch David Calaprice Ethan Malasky and Tracy Stampfli and application Ser. No. 11 089 699 entitled System and Method for Installing One or More Programs and At Least a Portion of Their Environment filed on Mar. 25 2005 by Kevin Lynch Tracy Stampfli Peter Grandmaison and Rebekah Hash each having the same assignee as this application and each is incorporated herein by reference in its entirety.

The present invention is related to computer software and more specifically to computer software for updating computer programs and at least a portion of the environment in which the computer programs run.

Computer programs operate in an environment. For example the environment of some conventional computer programs is a Pentium compatible computer system with a minimum memory and the Windows XP or XP pro operating system. Other programs such as those described in the related applications may require additional items as the environment in which the program can operate. For example the programs described in the related applications can make use of an agent manager application shell manager and console manager operating under the direction of a master controller all of which can be supplied as computer software such as the conventional Central product commercially available from Macromedia Inc. and both described and available from Macromedia.com. The Central product is therefore the environment for the programs that run under it. As used herein an environment is any required or desired hardware or software element used by an application program to run in its expected mode of operation. For example the Central product is at least part of the environment in which a Central application program runs.

Not only does a computer program operate in its environment it may be highly dependent on the environment. Some computer programs are written to take advantage of certain capabilities of the environment and won t operate properly or optimally without those capabilities.

Computer programs may be updated to allow improvements or bug fixes to be incorporated into the software. Additionally portions of or all of the environment may similarly be updated. If the environment is updated to offer new capabilities computer programs operating in the environment may need to be updated in order to take advantage of the new capabilities.

However when a new capability is made available in an environment many developers of computer programs are reluctant to immediately provide an update of the computer programs to take advantage of the new capabilities because they cannot be sure that many users will upgrade their environments. One reason for this reluctance is the fact that not all users will update the environment immediately requiring the developer of the program to support both the old and new environments. When a single computer program must accommodate both an older environment and a newer one the program can become larger and operate more slowly. As a result the developer may hold off developing for the upgraded environment diminishing the value to users of obtaining the upgraded environment. This causes users to hold off updating the environment thereby perpetuating the problem of developers being reluctant to upgrade in a vicious cycle.

In the meantime the new environment may need accommodate different versions of the same program one version that has the latest enhancements and others that do not making the environment potentially larger and slower than it would be if obsolete commands could be removed such removal being possible when all users of programs that used such commands only in their pre updated versions had updated the programs. This makes the developer of the environment reluctant to update it further perpetuating the problems.

Even if the developers were willing to update the programs and their environment the users might still be unwilling to do so. The update process takes time and can be cumbersome for users and so many users do not wish to perform such an update frequently. This further discourages developers from supplying them.

What is needed is a system and method that can update both a set of one or more computer programs and some or all of the environment of those programs without requiring significant input or effort from the user.

A system and method updates some or all of the environment in which one or more programs operates and updates the programs as well. The process is handled automatically freeing the user from having to implement it and thereby nearly ensuring its performance. Because the environment can be updated rapidly after updates are made available developers can develop for the updated environment assured that the users of the programs developed for that environment will have the latest version installed within a brief period of time. Because the programs can be updated rapidly as well the developer of the environment can be assured that all users of a program will rapidly have the same version of that program. Because the environment and the programs are updated by the same system and method the system and method can limit the installation of updates of programs to those systems that have an updated environment ensuring compatibility without requiring backwards compatibility of the program and ultimately the environment.

The present invention may be implemented as computer software on a conventional computer system. Referring now to a conventional computer system for practicing the present invention is shown. Processor retrieves and executes software instructions stored in storage such as memory which may be Random Access Memory RAM and may control other components to perform the present invention. Storage may be used to store program instructions or data or both. Storage such as a computer disk drive or other nonvolatile storage may provide storage of data or program instructions. In one embodiment storage provides longer term storage of instructions and data with storage providing storage for data or instructions that may only be required for a shorter time than that of storage . Input device such as a computer keyboard or mouse or both allows user input to the system . Output such as a display or printer allows the system to provide information such as instructions data or other information to the user of the system . Storage input device such as a conventional floppy disk drive or CD ROM drive accepts via input computer program products such as a conventional floppy disk or CD ROM or other nonvolatile storage media that may be used to transport computer instructions or data to the system . Computer program product has encoded thereon computer readable program code devices such as magnetic charges in the case of a floppy disk or optical encodings in the case of a CD ROM which are encoded as program instructions data or both to configure the computer system to operate as described below.

In one embodiment each computer system is a conventional SUN MICROSYSTEMS ULTRA 10 workstation running the SOLARIS operating system commercially available from SUN MICROSYSTEMS Inc. of Mountain View Calif. a PENTIUM compatible personal computer system such as are available from DELL COMPUTER CORPORATION of Round Rock Tex. running a version of the WINDOWS operating system such as 95 98 Me XP NT or 2000 commercially available from MICROSOFT Corporation of Redmond Wash. or a Macintosh computer system running the MACOS or OPENSTEP operating system commercially available from APPLE COMPUTER CORPORATION of Cupertino Calif. and the NETSCAPE browser commercially available from NETSCAPE COMMUNICATIONS CORPORATION of Mountain View Calif. or INTERNET EXPLORER browser commercially available from MICROSOFT above although other systems may be used.

Referring now to a system for updating one or more programs and at least a portion of the environment in which the one or more programs run is shown according to one embodiment of the present invention. System consists of client computer system such as is described above and containing elements described below network which may be any conventional network such as a conventional Ethernet network the Internet or both and servers which are conventional web servers or file servers.

In one embodiment all communication into or out of client computer system is made via input output of communication interface which is coupled to network . Communication interface is a conventional communication interface that supports Ethernet TCP IP and or other conventional communication protocols. Communication interface also contains input output coupled to conventional input output devices not shown such as a conventional keyboard monitor and mouse and communication interface contains a suitable interface thereto.

Master update controller initiates the update process for the environment and the programs as described herein. In one embodiment master update controller initiates the update process when the environment is started. The master controller of the environment described in the related applications is stored in environment storage and when started it signals master update controller via input which may also be an output which then initiates the update process described herein. The update process may be initiated at a time other than when the environment is started it may be initiated when a program is started after a program loads and starts to run after a program is terminated or just before the environment is terminated. In one embodiment the update process may be initiated upon receipt of a command to do so by the user provided via a user interface provided by the application shell manager movie file and that movie file signals the application shell manager which signals the master controller all described in the related application Ser. No. 11 090 402. In one embodiment master update controller as well as some or all of elements may be a part of the master controller described in the related applications that directs the operation of the environment.

When signaled update controller signals program update identifier to identify a program that runs in the environment and that is scheduled to be updated. In one embodiment the environment is the conventional Central product commercially available from Macromedia.com and a program is a set of any of an agent an application and one or more pods that work together as described in the related application. Central products and programs are described in the related applications and at the Web site of Macromedia.com which is hereby incorporated by reference in its entirety.

Program update identifier scans the manifests in manifest storage or program update identifier may scan other files or filenames in certain locations in program storage prestored by program update identifier or use other conventional program detection techniques such as reviewing one or more registries or databases to identify a program installed on client computer system . In one embodiment each program has its own manifest that is downloaded at or about the time the program or any update thereto is downloaded. The manifest describes information about the program as described herein and at macromedia.com devnet central on the World Wide Web. When it locates such a program program update identifier scans update storage for an entry that corresponds to the located program e.g. the entry may contain the some or all of the name of the subdirectory in which the program files reside or a name of such a program . In an entry does not exist for that program the program is new and so program update identifier builds an entry corresponding to the name or other identifier of the program and adds an update period described below to the current date and time or another date and time near the current date and time retrieved from an operating system not shown to produce a next update time for the program which program update identifier stores in the entry for that program in update storage . Program update identifier then again starts the process described herein to locate and process another program or determines that there are no more programs to be located.

In one embodiment an update period is received from the user by user interface manager which provides a user interface to the user and receives the update period from the user. A default update period of one week may be initially supplied to be changed by the user if desired. User interface manager stores the update period into update schedule storage for use as described herein.

In one embodiment an update period may be separately specified by the developer of each program in the manifest received for any program. In such embodiment when a next update date and time is being calculated for a program as described herein the entity calculating it looks into the manifest for that program to identify whether an update period has been specified for the program and if so that update period is used to calculate the next update date and time. If not the update period stored in update schedule storage is used to calculate the next update date and time for the program.

If an entry exists for the located program in update storage program update identifier compares the next update date and time in the entry for that program with the current date and time which program update identifier retrieves from operating system not shown . If the next update time for the program is later than the current date and time program update identifier then does not update that program. Instead it again begins the process described herein to locate and potentially update another program or determines that there are no more programs to be located. Otherwise program update identifier provides the name of the program to master update controller .

When it receives the name of a program to be updated from program update identifier master update controller provides the name of the program to program update retriever . Program update retriever uses the program name to retrieve the location of the update to the program from manifest storage. In one embodiment each program has a manifest that is retrieved from the server from which the program was obtained at the time the program was installed as described herein and also in the related applications. The manifest is stored into manifest storage and contains the name of the program and the one or more server addresses on program server or at which updates or at least the manifest for the update may be obtained. This allows a developer to change the location of the next update or to change at least the location of the manifest for the next update by specifying it in the manifest of the initial installation or any subsequent update.

Program servers and are each conventional file servers that store and provide updates for programs. In one embodiment a program may consist of one or more files and program server contains all such files for a program. The update for another program may be stored on a different program server such as program server or it may be stored on program server and there may be any number of programs and program servers . In one embodiment servers are operated by different commercial entities. For example server may be operated by or for the developer of the environment and servers may be operated by or for the different developers of different programs. There may be any number of servers not just those shown.

In one embodiment an update must be located in a single Internet domain and the domain must be the same domain from which the program was initially retrieved or at least be the domain indicated on the manifest for that program stored in manifest storage . Program update retriever enforces some or all of these restrictions when it retrieves the update.

In one embodiment the location of the update is or contains the URL of a manifest stored on program server and program update retriever retrieves that manifest from program server that describes the update in the same manner that the original manifest described the initial installation of the program it contains a list of files and one or more addresses corresponding to the location on program server of each of the files in the manifest. The manifest also contains the version number of the latest version of the program and may contain other information as well. The manifest may be in the form of an XML file or another type of one or more files. Program update retriever retrieves and stores the manifest into update scratch storage and compares the version number with the version number for that program that is already installed in program storage by checking the version number of the installed program in the manifest in manifest storage which has a form similar to that of the manifest retrieved. If the version numbers match or the version number in the manifest in update scratch storage has a version number below that specified by the manifest for the program in manifest storage program update retriever discards the manifest in update scratch storage and does not retrieve the update. Program update retriever signals master update controller with the name of the program. As noted below master update controller will then signal update schedule manager with the name or other identifier of the program. Update schedule manager adds the update period either the one for the program in the program s manifest in manifest storage or if none is specified the update period stored in update schedule storage to the current date and time or one near the current date and time or adds it to the next update date and time for the program stored in update schedule storage and stores the result as the next update time for the program in update schedule storage and signals master update controller . Master update controller signals program update identifier which attempts to find another program and performs the techniques described herein to determine whether to update the program and optionally to update it as set forth herein.

If the version numbers do not match exactly e.g. version 7.02 and version 7.03 do not match exactly and the version specified in the manifest in update scratch storage is higher than the version in the manifest in manifest storage for the corresponding program 7.03 is higher than 7.02 program update retriever continues as will now be described.

Program update retriever retrieves the update from program server and stores it into update scratch storage . When the one or more files in the update have been completely received program update retriever signals program update installer with the name of the program.

When signaled program update installer deletes some or all of the program having the name it receives from program storage and moves or copies the update for that program from update scratch storage into program storage . In one embodiment program update installer deletes the program using the manifest in manifest storage corresponding to the installed program to identify the files corresponding to the program and in another embodiment such files are stored in a known location such as a subdirectory in program storage having a name identical or similar to that of the program and program update installer may delete some or all of the files in that subdirectory or other location. Program update installer may then locate the manifest for that program in update scratch storage or such files may be stored in a subdirectory in update scratch storage corresponding to the name of the program and program update installer uses their location to identify them to move or copy the program files from update scratch storage into program storage and to move or copy the manifest into manifest storage and then to delete those files from update scratch storage . If the former manifest was not deleted program update installer may delete it before moving or copying the new manifest into manifest storage .

In one embodiment a separate storage area exists for program data program data storage . Program data storage provides persistent storage for each program such as by subdividing it into subdirectories for each program. In one embodiment program update installer does not delete the files stored in a program s assigned portion of program data storage when it installs the update although in another embodiment program update installer deletes the files stored in the portion of program data storage assigned to the program according to instructions in the manifest retrieved for the update. The instructions may instruct program update installer to delete some or all of such files to replace them with certain files retrieved as part of the update in which case program update installer does not place such files into program storage or to modify specified ones of them or all of them according to certain instruction files that describe how any such file is to be modified and program update installer complies with the instructions.

When program update installer has completed installing the program files program update installer signals program update retriever which notifies master update controller with the name of the program.

When notified master update controller signals update schedule manager with the name of the program that either has just been updated as described above or determined that no update was available as described above.

Update schedule manager retrieves either the current date and time from operating system or one near in time to the current date and time or the next update date and time for that program from update schedule storage retrieves the update period either the one for the program in the program s manifest in manifest storage or if none is specified the update period stored in update schedule storage adds it to the current or other date and time or the next update time and stores the result as a new next update time for that program in update schedule storage. Update schedule manager then signals master update controller which signals program update identifier to identify the next program for update or determine and indicate to master update controller that there are no more programs to be updated both as described above. Program update identifier then repeats the process described above.

When program update identifier indicates to master update controller that there are no more programs to be updated master update controller determines whether it is time to check for an update for the environment files in environment storage . The environment files are any one or more files that are used to provide the environment such as those files that may operate as the boot loader master controller agent manager application shell manager or console manager in the related application.

To determine if it is time to check for an update to the environment files master update controller retrieves the next update date and time for the environment from update schedule storage . If no such time is stored there master update controller retrieves the current date and time from the operating system adds the update period to it and stores the result as the next update date and time for the environment into update schedule storage . Otherwise master update controller compares the next update date and time it retrieved from update schedule storage with the current date and time master update controller retrieves from the operating system or with another date and time near the current date and time . If the current or other date and time is after the next update date and time for the environment master update controller signals environment instruction update identifier . Otherwise master update controller terminates its operation until it is next signaled as described above.

In one embodiment there may be two next update times a first one for the environment instruction files and a second one for the environment program files and they may each be different. Master update controller compares the first one with the current date and time and if the first one is earlier than the current date and time signals environment instruction update identifier . If not but if the second one is earlier than the current date and time master update controller signals environment program update identifier as described below. If neither one is earlier than the current date and time master update controller terminates its operation until it is signaled again.

As described in the related applications the environment may consist of one set of files referred to as instruction files containing instructions or other information describing the operation of the environment and another set of files referred to as program files that are part of a system to interpret those instructions. The environment instruction files are or include Flash movies in the .swf format in one embodiment and the environment program files are or include Flash movie players modified to work as a part of the Central operating system and descriptions of all of these are found at the Web site of macromedia.com and are hereby incorporated by reference in their entirety. In one embodiment the update of each set e.g. the set of program files and the set of instruction files of environment files is handled differently although in other embodiments the update of all environment files may be handled using the techniques described for either set of files. In one embodiment the program files may be any set of logically related files in which the update of such one or more of such files require installation in a manner other than just blind replacement and the instruction files are a logically related set of files in which all files may be blindly replaced at any time to update them as described in more detail below.

When signaled environment instruction update identifier determines whether an update is available for the environment instruction files. In one embodiment a manifest exists for the environment such manifest may be in one file or in two files one for the instruction files and another for the program files or the environment manifest may be contained in one or more of the files that make up the environment and environment instruction update identifier uses the manifest to determine whether an update exists for the environment instruction file in the same manner that the manifest is used to determine whether an update exists for a program as described above. In such embodiment the manifest may specify version numbers for each of the two sets of environment files or a single version may be used for all environment files.

Environment instruction update identifier compares the version number for the environment instruction files with the version number of the environment instruction files stored on a manifest for the latest version of the environment on environment server . In one embodiment the address of the manifest on environment server is stored in the manifest in environment storage which environment instruction update identifier uses to retrieve the manifest from environment server and stores it into update scratch storage . In another embodiment the address of the manifest on environment server is contained or coded into environment instruction update identifier .

If the version numbers are different or if the one retrieved has a later version environment instruction update identifier signals environment instruction update retriever to retrieve the updated environment instruction files from environment server . Environment instruction update retriever retrieves the updated environment instruction files from environment server either using a predefined location stored in environment instruction update retriever or using a location stored in the manifest retrieved as described above and stored into update scratch storage and stores the environment instruction files into update scratch storage for example using a subdirectory with a predefined name. When all such environment instruction files have been so retrieved environment instruction update retriever signals environment instruction update installer .

In another embodiment each environment instruction file may have a version specified in the manifest for the environment which environment instruction update identifier reads from environment storage . The manifest specifies the location of a manifest on environment server and that manifest describes the version of each of the most recent environment instruction files. Environment instruction update identifier compares the versions of the file on each manifest to identify whether an update exists for the file and signals environment instruction update retriever to retrieve files for which an update exists and environment instruction update retriever complies.

In still another embodiment the manifest for the environment specifies a location on manifest server in which all environment instruction files are stored and environment instruction update identifier identifies if an update is available for a file by comparing one or more characteristics of the file stored in environment storage with the same characteristics of the corresponding file stored in manifest server . The one or more characteristics may include a modification date file size or any other one or more characteristics. In one embodiment a manifest is not used and the locations of the environment files on manifest server are stored internally by environment instruction update identifier .

If environment instruction update identifier identifies a file for which an update is available it provides the file name to environment instruction update retriever which retrieves the file and stores it into update scratch storage and signals environment instruction update identifier . When all updates for the environment instruction files have been retrieved environment instruction update identifier signals environment instruction update installer to install the files.

Environment instruction update installer installs the environment instruction files from update scratch storage into environment storage in a manner that deletes some or all of the former environment instruction files e.g. by moving them copying them into environment storage and deleting them from update scratch storage etc. . In one embodiment environment instruction update installer performs other conventional file installation activities such as decompressing the files or registering them to an entity or a registry.

When environment instruction update installer has completed installing the environment instruction files environment instruction update installer signals master update controller .

When signaled master update controller signals environment program update identifier or signals it only if the next update date and time for environment program files is before the current date and time or other similar time as described above . Environment program update identifier identifies whether updates are available to the environment program files in a manner similar or identical to any of the manners described above with reference to environment instruction update identifier . If a manifest is used a different manifest or a different portion of the same manifest as was described above identifies information for the environment program files or versions as was described above for environment instruction files or versions or the same version may be used for each set of environment files. If necessary environment program update identifier retrieves any required manifest in the same or similar manner as environment update identifier described above.

If updates to the environment program files are not available environment program update identifier signals master update controller . If updates to the environment program files are available environment program update identifier signals environment program update retriever which retrieves into update scratch storage the environment program files from environment server in the any of the same manners described above that environment instruction update retriever could use to retrieve the environment instruction files and then signals environment program update retriever signals environment program update installer .

Environment program update installer installs the environment program files from the update that are stored in update scratch storage in place of the environment program that is currently there and may be running. In one embodiment to install the program can require that certain files are installed before other files and that ultimately the running environment get shut down before certain files are ultimately installed any or all of which may be specified by the manifest retrieved and environment program update installer performs the installation in accordance with such instructions. In this case environment program update installer may signal user interface manager to prompt the user to shut the environment program down before completing the installation of the environment program files. If the user indicates that the program may be shut down user interface manager signals environment program update installer which requests the operating system to shut down the environment completes the installation and then instructs the operating system to start the environment. Environment program update installer then signals master update controller .

Master update controller then signals update schedule manager to update the next update date and time for the environment by adding the update period to either the existing next schedule date and time or the current date and time or another nearby date and time and storing the result as the next update date and time or if different next update dates and times are used for the environment instruction files and the environment program files master update controller signals schedule update manager to update in a similar manner either or both of such next update date and times that were before the current date and time or other similar time .

An update period may be specified in the manifest for the environment or for the environment instruction files and the environment program files and if such a period or periods is or are specified schedule update manager uses it or them as the update period and if not uses the update period in update period storage when calculating a next update date and time. The description above employs a single update period for the environment but different update periods for the environment instruction files and environment program files may be specified by one or more environment manifests as described in .

In a manner similar to that described above for the programs the location to be used for retrieval of one or more manifests for the environment may be specified by the one or more manifests for the environment currently stored in environment storage . Because new one or more environment manifests are downloaded during the update process the new one or more manifests may be used to change the location from which any subsequent manifests may be retrieved.

The above description performed the update of the one or more programs and then performed the update of the environment in which the programs were run first using the environment instruction files and then using the environment program files. However in another embodiment this ordering could be switched using any permutation. Any ordering is sufficient or sufficient in one embodiment as long as the performance of one update or set of updates is performed substantially immediately after the performance of the other update or set of updates or within a few minutes thereof.

In still another embodiment the update of a program has an additional criteria that the environment have a particular version. In such embodiment program update identifier retrieves a minimum required environment version from the manifest it retrieves that corresponds to the latest available version of the program it has identified as described above and checks the version identifier against the version of the environment stored in the manifest for the environment in environment storage . If the version of the environment is not greater than or equal to the minimum required environment version of the program program update identifier does not provide the name of the program to program update retriever and attempts to find another program as described above.

In one embodiment the environment is not updated unless all of the programs installed contain a minimum program version that is known to be compatible with the latest version of the environment. In such embodiment the update to the manifest corresponding to the environment contains the name and minimum compatible versions of all programs with which programs having a lower version are known not to be compatible with the new version of the environment. Environment instruction update identifier environment program update identifier or both check the manifests of the installed programs such manifests being stored in manifest storage to ensure that all installed programs referred to in the manifest have at least the version specified in the environment manifest or each environment manifest if two such manifests are used . If not environment instruction update identifier environment program update identifier or both will not install either the environment instruction files environment program files or both.

In the case where a program or some or all of the environment is not updated for version incompatibility as described above program update identifier environment instruction update identifier or environment program update identifier may signal update schedule manager to reschedule its respective update either as described above in a manner similar to that used when the update occurs or by providing the name of the interfering program in the case of the environment update identifiers or signaling the existence of the incompatibility in the case of program update identifier and providing an identifier of the program having the incompatibility and update schedule manager reschedules the update of the environment or portion thereof to occur immediately after or some time after the next scheduled update for the latest scheduled program or programs causing the incompatibility with the environment update or reschedules the update of the program to be performed immediately after or some time after the next scheduled update of the environment. In one embodiment before such rescheduling of the update is performed the next scheduled update of the program or environment causing the rescheduling may be moved closer to the present time or an attempt to update it may be made immediately so as to reduce the time the incompatibility is present.

Referring now to consisting of a method of updating one or more programs and or at least a portion of an environment in which the one or more programs operate is shown according to one embodiment of the present invention. A signal to start the update process is received for example in response to the environment being started a program being started or either of these having run or either of these being terminated or a command received from the user as described above . A first one of the one or more programs installed to or otherwise capable of being run in the environment is selected and the next update date and time for the program is compared with the current date and time or another similar date and time such as a date and time close to the current time.

If the current date and time is before the next update date and time for the selected program the method continues at step . If none is specified the method may continue at step although a next update date and time may be specified for programs as part of the installation process for the first version of the program installed . Otherwise the latest available version of the program is identified such as by identifying the location of a manifest on a server over a network retrieving the manifest and parsing the version from it. The version of the currently installed program selected is identified such as by parsing a manifest corresponding to the currently installed program selected and the version identifiers are compared .

If the version identifiers indicate that a version later than the installed version is not available the method continues at step . If the version identifiers indicate that a version later than the installed version is available the location of the latest version is identified and the files are retrieved over a network and stored such as by using the manifest retrieved in step and the new version is installed for example by deleting some or all of the installed files corresponding to the selected program and installing the most recently received files for the selected program for example by any or all of copying them renaming them decompressing them or registering them and the method continues at step . As noted above program data files may be retained in step or deleted replaced or modified according to instructions in the manifest for the update and optionally additional instruction files. Step may include replacing the existing manifest for the program with the manifest retrieved in step there by allowing changes to the location of the next update and the update period calculated in step to be made.

At step the next update date and time for the selected program is identified and stored associated with the selected program as described above. If there are no more programs to be selected the method continues at step . Otherwise a program unselected since step was performed is selected and the next update date and time is compared with the current date and time or a time close to it and the method continues at step .

At step a next update date and time for the environment instruction files is compared with the current date and time or a date time near to it. If the current date and time or a date and time near the current date and time is before the next update date and time for the environment instruction files the method continues at step of although in another embodiment in which there is a single update date and time for the environment the method terminates at step shown on via the B connectors in the Figure . Otherwise the latest available version of the environment instruction files is identified such as by identifying the location of a manifest on a server over a network retrieving the manifest and parsing the version from it. The version of the currently installed environment instruction files is identified such as by parsing a manifest corresponding to the environment instruction files and the version identifiers are compared .

If the version identifiers indicate that a version later than the installed version of the environment instruction files is not available the method continues at step in one embodiment or step of in another embodiment shown by connector D in the Figure. If the version identifiers indicate that a version later than the installed version is available the location of the latest version is identified such as by using the manifest retrieved in step and the new version is installed for example by deleting the installed environment instruction files and installing the most recently received environment instruction files for example by any or all of copying them renaming them decompressing them or registering them . The next update time for the environment instruction files is calculated and stored as described above. The method continues at step illustrated in . Step may follow step if there is a single next update date and time for all environment files as shown by connectors D in the Figure.

At step a next update date and time for the environment program files is compared with the current date and time or a date time near to it. If the current date and time is before the next update date and time for the environment program files the method continues at step . Otherwise the latest available version of the environment program files is identified such as by identifying the location of a manifest on a server reachable via a network retrieving the manifest and parsing the version from it. Steps and may be omitted in the embodiment in which a single next update time is used for all environment files as shown by the dashed line in the Figure. 

The version of the currently installed environment program files is identified such as by parsing a manifest corresponding to the environment program files and the version identifiers are compared .

If the version identifiers indicate that a version later than the installed version is available the location of the latest version is identified such as by using the manifest retrieved in step and the environment program files corresponding to the new version are retrieved and stored as described above and the new version is installed as described above . The next update time for the environment program files or all environment files is calculated and stored as described above. The method then terminates to start again at step at some future time.

In one embodiment a single version identifier is used for both the environment instruction files and the environment program files. In such embodiment step follows the no branch of step as indicated by the C connector in the Figure and some or all of steps may be omitted in addition to steps and described above.

