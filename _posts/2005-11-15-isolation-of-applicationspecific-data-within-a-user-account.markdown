---

title: Isolation of application-specific data within a user account
abstract: A mechanism is provided for isolating application-specific data in an environment where multiple applications share a same user account. This mechanism enables data specific to an application to be accessed only by the application. When an application requests application-specific data, the data is loaded and a handle to the data is returned to the application. Access to the data is allowed only though the handle. Therefore, only the application possessing the handle can access the data. A counter may be associated with the loaded data. The counter's value is incremented whenever a handle is created for the data and decremented whenever a handle for the data is terminated. When the value of the counter reaches zero, the data is automatically unloaded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08074288&OS=08074288&RS=08074288
owner: Microsoft Corporation
number: 08074288
owner_city: Redmond
owner_country: US
publication_date: 20051115
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 699 963 filed on Jul. 15 2005 titled ISOLATION OF APPLICATION HAVING SPECIFIC DATA WITHIN A USER ACCOUNT the disclosure of which is hereby expressly incorporated by reference and the filing date of which is hereby claimed under 35 U.S.C. 119 e .

Conventionally an operating system isolates application specific data at the granularity of user accounts. That is applications running with different user accounts are isolated from each other. As a result an application running with a user account cannot access data for the same application running with another user account. However data for applications executing with the same user account are not isolated from each other. As a result an application executing with a user account can access and even modify data for another application executing with the same user account. This can cause potential stability security and management problems. Therefore it is desirable to provide a mechanism to separate application specific data among applications sharing a same user account.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The present invention enables data specific to an application to be isolated from other applications in an environment where multiple applications are associated with a same user account. For example the invention employs a handle based approach for accessing data. An application can access the data if the application possesses a handle to the data. If the data is application specific only one handle can be created for the data. The handle is passed to the application that the data is identified with. Only the application possessing the handle can access the data. Access requests from other applications sharing the same user account with the application are denied.

According to one aspect of the invention when an application needs to access data and the data has not been loaded the data is first loaded. Preferably a unique identifier is generated for the data. The unique identifier then is used to form an access path for the data. The access path indicates a location to which that the data can be loaded. The data is loaded at the location. A handle is created for the loaded data and passed to the application. The application can access the data through the handle. If only the application can access the data the data is regarded as application specific. No other applications sharing the same user account with the application are able to create handles to the loaded data or access the data through the handle. On the other hand if the data is not application specific other applications can create handles to the data and access the data through the handles.

In accordance with another aspect of the invention a counter is created for the data when the data are loaded. The value of the counter is incremented whenever a handle is created for the data and decremented whenever a handle for the data is terminated. The data is automatically unloaded when the value of the counter reaches zero.

In accordance with a further aspect of the invention an application programming interface is provided for applications specific data access. The application programming interface includes a function that in an environment where multiple applications share a same user account provides access to a data object upon receiving an access request from a computing process i.e. an application. The faction can be configured so that the data object can only be accessed by the computing process requesting the access. That is other computing processes cannot access the data object. Preferably the function includes a parameter that can be configured so only the computing process currently calling the function can access the data object. The parameter can also be configured so that any computing process calling the function to access the data object is able to access the data object.

More specifically upon being called by a computing process requesting access to a data object the function creates a unique identifier for the data object. The unique identifier can then be used to generate a path indicating a location to load the data object. The function then loads the data object accordingly. The function then returns to the computing process a handle to the loaded data object. Whenever the computing process completes the access request the corresponding handle is terminated. When there is no handle associated with the data object the function unloads the data object.

In summary the invention prevents data specific to an application being accessed by other applications that share a same user account with the application. The invention enables data specific to an application to be accessed only by the application. Thus other applications sharing the same user account with the application cannot interference with integrity of the application specific data.

Generally described embodiments of the invention separate application specific data between applications associated with a same user account. More specifically embodiments of the invention adopt a handle based approach for accessing data in an environment where multiple applications are associated with the same user account. When an application needs to access data that is specific to the application the data is loaded a handle is created for the data and passed to the application. The application accesses the data through the handle. Other applications can not create handles for the data and hence are denied access to the data. In embodiments of the invention the data may include any data that can be used by the applications sharing the same user account.

In embodiments of the invention after generating a UID and a corresponding access path for the application specific data object the computing system loads the data object at the location specified by the access path. The computing system then creates a handle to the loaded data object and passes the handle to the application requesting the data object. For example as shown in Application A A receives a Handle A A to the Application Data A A and Application B B receives a Handle B B to Application Data B B . In embodiments of the invention only the application possessing a handle to a data object can access the data object and only the application that a data object is specifically identified with can possess a handle to the data object. Therefore in the example illustrated in only Application A A can access Application Data A A and only Application B B can access Application Data B B .

Theoretically other applications can access a data object through its access path. In embodiments of the invention if an application attempts to access a data object through its access path such access will be denied. For example as noted above the access path for Application Data A A is root app UID A Application Data A. Theoretically Application B B can access Application Data A A through this access path. Embodiments of the invention deny such an access and only allow access to Application Data A A through the Handle A A . Thus only Application A A can access Application Data A A .

Embodiments of the invention also provide a counter for a loaded data object. Whenever a handle is created for the loaded data object the value of the counter is incremented. Whenever a handle to the loaded data object is terminated the value of the counter is decremented. In embodiments of the invention when the value of the counter reaches zero the corresponding data object is unloaded. For example as shown in the loaded Application Data A A is associated with a Counter A and the loaded Application Data B B is associated with a Counter B. In embodiments of the invention when a data object is loaded another application cannot replace the loaded data object with another data object.

In an exemplary embodiment of the invention the computing system uses a Microsoft Windows operating system. As known by those of ordinary skill in the art Microsoft Windows operating system uses a Windows registry as the central repository for system and user related data. On disk the Windows registry is organized as a set of discrete files data objects called hives. Each hive contains a hierarchy of data. When a hive is loaded into the file system of a computer system the access path to the hive is recorded under the HKEY LOCAL MACHINE SYSTEM CurrentControlSet Control hivelist. The access path is removed if the hive is unloaded.

Currently when a Microsoft Windows operating system starts the Windows registry loads certain hives by default. Conventionally a RegLoadKey API has been used that allows users to load specific hives on demand. When a hive is loaded using the RegLoadKey API the hive is visible system wide. As a result data in the hive can be accessed by anyone with sufficient access rights. However the RegLoadKey API does not enable normal users to load hives without requiring special privileges. The RegLoadKey API also does not prevent other applications running with the same user account from manipulating data in the hive.

To address the limitations posed by the RegLoadKey API an exemplary embodiment of the invention provides a new hive load API named for example RegLoadAppKey. The RegLoadAppKey API allows a user to load hives without requiring special privileges. The RegLoadAppKey API also allows for application level isolation of hives loaded using this API. Unlike the existing RegLoadKey API that loads hives with system wide visibility the RegLoadAppKey API loads hives with only process wide visibility. That is only a process calling the RegLoadAppKey API will get a handle to the hive. The RegLoadAppKey API exposes a hive to only the first process that successfully loads the hive. Thus using the RegLoadAppKey API an application can load a hive that contains settings relevant only to the application and be guaranteed that no other applications running under the same or a different user account can access this hive. On termination of the application or when the last reference to the handle associated with the hive is closed the hive is automatically unloaded.

In an exemplary implementation of the RegLoadAppKey API upon receiving the file name of the hive to be loaded the RegLoadAppKey API generates a UID . If the hive has already been loaded the UID is ignored. Otherwise the UID is used to form a path to place to load which indicates a location that the hive can be loaded to. For example the hive may be loaded to registry app UID.

In the exemplary embodiment of the invention the RegLoadAppKey then may call an NtLoadKeyEx API to load the hive. The NtLoadKeyEx API loads the hive to the location specified by path to place to load and returns a handle for the hive. Preferably whenever the application calls the RegLoadAppKey API to access the hive a handle for the hive is created. When the application relinquishes an access the corresponding handle is closed. When all handles for the hive are closed the hive is automatically unloaded.

Operationally the RegLoadAppKey API may include a parameter for specifying that access to the hive is limited to the calling application . When the parameter is specified subsequent attempts by other applications to load the same hive will fail thus making the hive accessible only to the application that loaded it. If the parameter is not specified multiple applications i.e. processes can load the same hive. Furthermore the RegLoadAppKey API denies an access request if such an access request attempts to access the hive through the path to place to load instead from the handle for the hive.

Specifically as shown in the process is initiated when an application A requests to access certain data. See decision block . In exemplary embodiments of the invention upon receiving such a request the process generates a unique identifier for the data. See block . The process then generates an access path for the data using the unique identifier. See block . For example as noted above the access path for Application Data A A that has the UID A A is Root App UIDA ApplicationDataA.

The process then proceeds to determine whether the data has already been loaded by another application. See decision block . If the answer to decision block is YES the process proceeds to determine whether the loaded data is application specific i.e. only the application that has loaded the data can access the data. See decision block . If the answer to the decision block is YES meaning that the data is application specific and has been loaded by another application the process terminates. The access request from application A is denied.

If the answer to decision block is NO meaning that the data can be accessed by multiple applications the process proceeds to create a handle to the loaded data. See block .

On the other hand if the answer to decision block is NO meaning the data has not been loaded by any application the process loads the data at the location identified by the generated access path. See block . The process then creates a counter associated with the loaded data. See block . The counter s initial value is set to be zero. The process then creates a handle to the data. See block . The process passes the handle to the application. See block . From block the process precedes to a continuation terminal A.

In embodiments of the invention if the data is application specific only one handle is created for the data and only the application possessing the handle can access the data. Other applications because they do not have a handle to the data cannot access the data. As noted above theoretically other applications can access the data through the generated access path. However embodiments of the invention deny access to the data through the access path. Therefore only an application possessing a handle to the data can access the data.

In embodiments of the invention the counter is used to keep track of how many handles are associated with the loaded data. The value of the counter is incremented whenever a handle is created for the loaded data and decremented whenever a handle to the data is terminated. The data is automatically unloaded when the value of the counter reaches zero. As a result as illustrated in from the continuation terminal A the counter is incremented when a handle is created for the data. See block . In addition the value of the counter is decremented when a handle to the data is terminated. See block . In embodiments of the invention the process periodically checks the value of the counter to determine if it has reached zero. See decision block . When the value of the counter reaches zero meaning no handle is associated with the data the process unloads the data. See block . If the answer to decision block is NO meaning that the value of the counter is not zero the process loops back to block to wait for any adjustment in the value of the counter. Once the data is unloaded the process terminates.

Consequently embodiments of the invention isolate application specific data running under the same user account. Embodiments of the invention also automatically unload a data object once the last reference to the data object is closed.

While illustrative embodiments of the invention have been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

