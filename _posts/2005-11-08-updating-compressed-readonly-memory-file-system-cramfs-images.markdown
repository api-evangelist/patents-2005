---

title: Updating compressed read-only memory file system (CRAMFS) images
abstract: Systems and methods for CRAMFS file system differencing and updating are provided that include portion-level differencing and block-level updating of blocks of an original image. The differencing and updating split CRAMFS images into portions using CRAMFS file system structure information and block information and perform dependency analysis using hint/list files from the CRAMFS split module. A delta file is generated for each portion (portion-level differencing) of the new CRAMFS image; the delta file includes information of differences between the portion of the new CRAMFS image and the portion of the original CRAMFS image to which the new CRAMFS image portion corresponds. The delta files are transferred to a device where the device target CRAMFS image is updated block-by-block using information of the delta files. The update reconstructs all portions of the new CRAMFS image in a block in host device RAM and writes the reconstructed block into host device ROM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865479&OS=07865479&RS=07865479
owner: Innopath Software, Inc.
number: 07865479
owner_city: Sunnyvale
owner_country: US
publication_date: 20051108
---
This application claims the benefit of U.S. patent application Ser. Nos. 60 626 252 60 626 292 and 60 626 293 all filed Nov. 8 2004. This application is related to U.S. patent application Ser. No. 11 269 274 and 11 269 277 both filed Nov. 8 2005.

The disclosed embodiments relate to updating static file system images using difference files and more particularly updating compressed read only memory file system CRAMFS format images.

Software running on a processor microprocessor and or processing unit to provide certain functionality often changes over time and also increases in complexity. The changes can result from the need to correct bugs or errors in the software files adapt to evolving technologies or add new features to name a few. In particular software hosted on mobile processing devices for example mobile wireless devices often includes numerous software bugs that require correction. Software includes one or more computer programs algorithms files and or code pertaining to operation of the host device. Software can be divided into smaller units that are referred to as modules or components.

Portable processor based devices like mobile processing devices typically include a real time operating system RTOS in which all software components of the device are linked as a single large executable image. Further file system support has become common recently due to the availability of compact storage and more demanding functionalities in these mobile wireless devices. In addition the single large image needs to be preloaded or embedded into the device using a slow communication link like a radio infrared or serial link.

Obstacles to updating the software of mobile processing devices include the time bandwidth and cost associated with delivering the updated file to the device as well as limited resources of the device available for use in updating new files once received. As one example static file system images are required to be updated in place e.g. in read only memory ROM because of resource limitations e.g. limitations relating to RAM ROM time for downloading the image power consumption etc of the host device. Consequently there is a need for generating difference files that are sized appropriately for efficient transfer to host devices and for use in updating software of resource limited devices.

Each publication patent and or patent application mentioned in this specification is herein incorporated by reference in its entirety to the same extent as if each individual publication and or patent application was specifically and individually indicated to be incorporated by reference.

In the drawings the same reference numbers identify identical or substantially similar elements or acts. To easily identify the discussion of any particular element or act the most significant digit or digits in a reference number refer to the Figure number in which that element is first introduced e.g. element is first introduced and discussed with respect to .

Systems and methods are provided for static file system SFS differencing and updating. The systems and methods for SFS differencing and updating include portion level differencing and block level updating of update units of an original image referred to as device blocks or blocks as described below. The differencing and updating of an embodiment splits SFS images into a series of portions based on block information and the SFS image structure. A delta file is generated for each portion portion level differencing of the new SFS image and the delta file includes information of differences between the portion of the new SFS image and the portion s of the original SFS image to which the new SFS image portion corresponds a new portion can depend on more than one original portion and in addition the original portion s might not be in the same location as the new portion . The delta files are transferred to a device for use in updating images of the device to the new SFS image. The target SFS image of the device is updated block by block using information of the delta files. The block by block update of an embodiment reconstructs all portions of the new SFS image in a device block in random access memory RAM of the host device and then writes the reconstructed block into ROM of the host device.

A SFS also referred to as a read only file system is a file system that can not be modified during run time. Examples of SFSs include but are not limited to the Symbian Z drive also referred to as the ROM drive the Linux compressed ROM file system CRAMFS the encrypted file systems and file systems that might store operating system executables built in applications essential multimedia information and default language files to name a few.

The SFS differencing and updating of embodiments described below receives images of a static file system. The images which include an original image and a new image each include a number of blocks for example super blocks data blocks etc. The SFS differencing splits the images by using information of the blocks to split the images into multiple portions. Differences are determined between content of the images by determining differences between the portions of the original image and the new image where the differences are generated for each portion of the new image. The differences include byte level differences between the portions but are not so limited. A delta file is generated that includes the differences for each portion of the new image.

The SFS differencing and updating of embodiments includes updating by which the SFS of an image hosted on a portable device is updated in place on the portable device. The updating receives the delta file at a portable device via at least one coupling. Dependent ones of the original portions hosted on the portable device are assembled and at least one of them is identified that corresponds to the delta file received where the new portion location in ROM is encoded in the SFS delta package associated with its corresponding delta file in an embodiment. The updating reconstructs at least one new portion on the portable device that corresponds to the delta file identified. The reconstructed new portions of the new image are written to the read only memory ROM of the portable device.

In the following description numerous specific details are introduced to provide a thorough understanding of and enabling description for embodiments of the SFS differencing and updating. One skilled in the relevant art however will recognize that the SFS differencing and updating can be practiced without one or more of the specific details or with other components systems etc. In other instances well known structures or operations are not shown or are not described in detail to avoid obscuring aspects of the SFS differencing and updating.

The SFS differencing system of an embodiment couples among components of a host computer system not shown where the components can include at least one of a processor a controller a memory device and or a bus but are not so limited. One or more of the components or modules of the SFS differencing system run under control of at least one algorithm program or routine. A host computer system processor couples among the components of the host computer system and the components of the SFS differencing system under program control. While the image processing module dependency generation module difference engine and packaging engine are shown as separate blocks some or all of these blocks can be monolithically integrated onto a single chip distributed among a number of chips or components of a host system and or provided by one or some combination of programs or algorithms. The programs or algorithms when present can be implemented in software algorithm s firmware hardware and any combination of software firmware and hardware.

The term module as generally used herein refers to a logically separable part of a program and is interchangeable with one or more terms including software algorithm program component and unit. The term component as generally used herein refers to one or more of the parts that make up a system a component may be software and or hardware and may be subdivided into other components. The terms module component and unit may be used interchangeably or defined to be sub elements of one another in different ways depending on the context. The term processor as generally used herein refers to any logic processing unit such as one or more central processing units CPUs digital signal processors DSPs application specific integrated circuits ASIC etc.

In operation the SFS differencing system receives at least one original SFS image and at least one new SFS image and performs portion level differencing. The new SFS image of an embodiment includes a CRAMFS image C but is not so limited. The CRAMFS image C includes a super header SupHdr section a directory header DirHdr section and a data section. The super header is a fixed 72 byte header that includes information like the image size the integrity check signatures configurations and the root node information to name a few. The directory header is a variable section which includes the names of the directories files symbols etc. The directory header section also includes the pointer location of each file in the data section. Additionally the directory header includes information like the hierarchy of the directories and their contents. The data section includes the data of the files symbols that are specified in the directory header but is not so limited.

The CRAMFS image C can include compressed and uncompressed files. As an example some sections or portions of the CRAMFS image C can be compressed using the zlib general purpose compression library. However other sections of the CRAMFS image C like the super header directory header and eXecute In Place XIP files may not be compressed.

The SFS differencing system upon receiving the original SFS image and new SFS image performs portion level differencing to generate one or more delta files as described below. The delta files are assembled into a delta package for transfer to a portable or mobile device also referred to as a client device. These differences include byte level differences between one or more portions of blocks of the compared images but are not so limited. The SFS differencing system generates the delta file in a processor based or computer system or running under a processor based or computer system. The computer system on which or under which the SFS differencing system runs includes any collection of computing components and devices operating together as is known in the art. The computer system can also be a component or subsystem within a larger computer system or network.

Contents of the delta file provide an efficient representation of the differences between the original image and the new image . The delta file can include meta data along with actual data of replacement and or insertion operations that represent the differences between the new or current version of the associated file and previous versions of the file as described in the U.S. Pat. No. 6 925 467 issued to InnoPath Software Inc. of Sunnyvale Calif. on Aug. 2 2005. The SFS differencing system provides any differences between the original image and the new image in delta files of the delta package using a minimum number of bytes and a pre defined format or protocol thereby providing a delta file optimized in space.

The SFS differencing system performs portion level differencing and is a flow diagram for SFS differencing under an embodiment. The SFS differencing is performed for example using the SFS differencing system described above and elsewhere herein. The SFS differencing receives images of a static file system. The images include an original image and a new image but are not so limited. Each image also includes a number of blocks for example the super header sections or blocks directory blocks or sections data blocks etc. The blocks are of a pre specified size e.g. 64 KB 128 KB etc. but are not so limited. The blocks of the received images are split into a number of portions using information of the blocks for example. The SFS differencing determines differences between content of the images by determining differences between the portions of each of the original image and the new image. A delta file is generated that includes information of the differences in content or data between each portion of the new image and one or more aligned portions of the original image.

As another example is a flow diagram for SFS differencing under an embodiment. The SFS differencing receives images of a static file system as described above with reference to . The received original image is divided into one or more original sections or portions and the received new image is divided into one or more new sections or portions. The SFS differencing identifies dependency alignments between the original sections and the new sections. A delta file is generated for at least one of the new sections. The delta file includes but is not limited to differences between a new section and one or more original section s where the new section depends on the original section s . The delta files of alternative embodiments may include differences between at least one new section and at least one original section on which the new sections depend.

The image processing module as described above with reference to receives each of an original SFS image and a new SFS image . The image processing module of an embodiment operates to begin the portion level differencing of the received images by parsing the specific image area and extracting information of the images. The information extracted about the images is used in differencing and updating operations. This parsing includes decoding the information of the static file system structure and internal format to get related information for use in performing SFS image differencing and updating. The information resulting from the parsing includes but is not limited to the locations and sizes of blocks of the image e.g. super blocks data blocks etc. the compression library used if compressed the type of encryption used to encrypt the image e.g. encryption algorithm encryption key etc. if encrypted to name a few.

Based on the target device block information the image processing module divides or splits the SFS image into a number or series of portions. is an example SFS image following splitting into portions by the image processing module under an embodiment. The portions include portions or parts of a block e.g. Block of the image but are not so limited. For example following splitting of an embodiment Block includes portions and and Block includes portions and . Following the splitting operation a block may contain any number of portions as appropriate to the data content of the block and or the specific structure of the SFS image. The portions include for example a super block header portion a control meta data portion a file portion etc. The SFS image processing module may perform decompression when the image is compressed decryption when the image is encrypted and or any other processing needed in order for the image processing module to extract data from the received image.

The image processing module of an embodiment also outputs a file which includes mapping information like the SFS image file name and one or more locations of the SFS image file name for example. This file is referred to herein as a hint file but is not so limited.

When the image being updated is a CRAMFS image as described above the image processing module of an embodiment decodes the CRAMFS image and converts the image from the CRAMFS format into split files. Split files are files that include the data of a particular portion or portions of the image along with additional information of the portion s . The additional information of the portions includes for example the ROM location of the portion the block and block size of the block that includes the portion information of the offset of the portion and or block size information of the portion and or block the uncompressed size of the portion if the portion is compressed and or the header and tail bytes to name a few. The name of the split file provides all of the information of the split file as described herein the naming convention is described below.

In converting and splitting the CRAMFS image the image processing module copies each of the super header and directory header to the split files. Furthermore names are assigned to these headers as defined below

The symbol data sections of the CRAMFS image are special file data sections that are compressed. Therefore the image processing module processes the symbol data section as compressed files.

The image processing module converts and splits compressed files of the CRAMFS image. The compressed file sections of the CRAMFS image include a header and a series of compressed data sections but are not so limited. Each compressed portion if uncompressed is less than or equal to one page cache size e.g. page cache size for CRAMFS image is 4096 bytes . The image processing module copies the header separately from the other portions of the image. The portions of the file that fall within the same block boundary are uncompressed and concatenated and output to the split file. This is referred to as a merging technique as long as the sum of the uncompressed portions including the start and end offset is not more than one physical block size e.g. RAM restriction . The portions of the image that cross block boundaries are not uncompressed but are instead cut at the boundary and output as the split files.

For one or more of the portions of the split file that were uncompressed a compressed copy of the split file is also generated by the image processing module of an embodiment. This additional split file can be provided to the difference engine for use in computing the difference file and or delta package.

The image processing module of an embodiment converts and splits the execute In Place XIP file sections at the block boundaries and treats the XIP file sections as binary images. The XIP files are not compressed. The padding in the XIP sections is treated as a part of the current file s content. This means that the split files corresponding to an XIP file section include the real data content and also the padding bytes but the embodiment is not so limited.

The image processing module of an embodiment does not generate a data section split for special nodes. This is because the special nodes only have entries in the directory section of the CRAMFS image and thus do not have sections in the data section of the image.

Contents of a CRAMFS image may not consume the entire region reserved for the image. Therefore the tail of a CRAMFS image can include padding bytes between the end of the data of the CRAMFS image and the end of a reserved area of the image. The image processing module of an embodiment copies any padding bytes of the CRAMFS image to the split files as described below.

Split files as described above are files that include the data of a particular portion or portions of the image along with additional information of the portion s . The additional information of the portions can include one or more of the ROM location of the portion the block and block size of the block that includes the portion information of the offset of the portion and or block size information of the portion and or block the uncompressed size of the portion if the portion is compressed and or the header and tail bytes to name a few. The split file filename format of an embodiment is

The components of this split file filename format represent information of split file portions as follows represents ROM number represents block number represents block size represents offset of the data portion on ROM represents size of the data portion on ROM represents size of the uncompressed data split portion on RAM optional represents offset in 4 byte units of the start of the compressed data from the offset optional range of this field is from 0 to 255 but is not limited to this range and represents offset in bytes of the compressed data from the end of the available data optional range of this field is from 1 to 3 but is not limited to this range .

Corresponding hint information is also generated for each split generated during converting and splitting operations of the image processing module . This hint information is a key value pair but is not so limited. In the key value pair of an embodiment the key is the name of the split file and the value is the name of the file in the CRAMFS image with the full path. An example of the hint information is 12065536235 root bin ls.bin. where 12065536235 is the name of the split file and root bin ls.bin is the corresponding Linux file name in the CRAMFS image. The sections like the super header the directory header and the tail data are given special values like SUPER HEADER DIR HEADER and TAIL HEADER respectively.

The dependency generation module also referred to herein as a dependency analysis module or dependency generator determines or generates a mapping or alignment between the original images and the new images. The alignment includes information as to portions of the new image that depend on portions of the original image. The alignment of an embodiment also can include information as to the sequence by which the portions of the new image are to be updated during the in place update of the original image hosted in the processor based portable device. The dependency generation module uses information of the specific structure of the SFS as domain knowledge e.g. information from the hint file in performing the alignment and the alignment is determined relative to the block boundaries of the images but is not so limited.

When a Linux file occupies more than one portion portion dependency computations or processes are used to determine portion dependencies among these portions e.g. using criterion such as longest common substring LCS analysis . If the portion is compressed and or encrypted then the portion is decompressed and or decrypted prior to or simultaneous with computing the dependency for better matching. is an example of portion dependency identified using dependency generation under an embodiment. In this example Portion of the new version New of a Linux file depends on Portion and Portion of the original version Original of the same file.

The dependency generation forms or generates at least one file portion dependency table. For each new portion which depends on only one original portion the contents are compared with that of its dependent original portion. If the comparison results indicate both the content and the portion name are the same which means the content has no change and no shift then both the new portion and the original portion are removed from the lists.

The dependency generation combines the file portion dependency table and the hint files for the original CRAMFS image and the new CRAMFS image and generates the block precedence graph. Using an appropriate algorithm such as color marking for example loops cycles in the block precedence graph are identified or found. Any loops cycles identified in the block precedence graph are then broken according to at least one criterion such as for example removing the block having the minimum delta. The resulting acyclic directed block precedence graph is topologically sorted and the file portion dependency table is re ordered according to the sorted block dependency precedence. The dependency generation then outputs the file portion dependency table also referred to herein as the dependency table. The table of an embodiment includes two columns. The first column is for New Portion Split File Name while the second column is for Old Portion Split File Name. An example is as follows 

The difference engine generally determines or computes the portion level differences between data of each new portion of the new image and data of the original portion of the original image. More specifically the difference engine uses information from the dependency generation module to read or gather one or more portions of the old image on which each portion of the new image depends. The difference engine of an embodiment computes the differences between content of the new portion and content of the original portion upon which the new portion depends. The identified differences in data between the original and new portions are encoded into a file that is referred to herein as a delta file. In addition to the encoded differences in data between original and new portions the delta file can include control information like dependency information of dependencies between new portions and original portions. Furthermore the delta file can include verification information e.g. checksum values cyclic redundancy codes CRCs etc. of the delta body the original portion of an image to be updated and the corresponding dependency information

While the difference engine described above determines differences between original and new images at the portion level the difference engine of alternative embodiments may determine differences using a different granularity e.g. multiple portions etc. . Furthermore while the difference engine described above generates a delta file for each portion of a new image that is different from the portion of the original image on which it depends alternative embodiments may generate more than one delta file for each portion or may include difference information of multiple portions in one delta file.

The packaging engine receives the delta files generated by the difference engine and assembles the delta files into a delta package or difference package. The packaging engine of an embodiment assembles the delta files into the delta package according to an update order or sequence but is not so limited. The packaging engine can also perform additional operations on the delta file and or delta package for example encrypting the delta package.

During SFS image updating it frequently occurs that a portion of an image is just moved or shifted from one location in the original version of the image to a different location in the new version of the image. Even for a one 1 byte shift components of the updating process are still required to rewrite the entire device block to update the SFS image. is an example in which the second portion of Block of a new SFS image is an exact copy of the third portion of Block of the original SFS image. In addition if the change s propagates to subsequent blocks of the image the subsequent blocks are also required to be rewritten. The image updating of an embodiment encodes information of shifted portions by encoding shift information on where to copy and how many bytes to copy for the shifted new portion. This encoding of shift information is referred to herein as WHOLE IS COPY but is not so limited. Use of the WHOLE IS COPY reduces the size of the delta files and or delta package and reduces the time required to perform the update.

Additionally if the portion file name has optional fields due to the compression of the portion the difference engine using WHOLE IS COPY will remove these optional fields to avoid compression decompression overhead during the CRAMFS image update. Removal of the optional fields can reduce the time to perform the update of an embodiment. For example if Portion of Block in the new version is a WHOLE IS COPY of Portion of Block in the original version the difference engine of an embodiment removes the optional fields in the portion file names of Portion of Block in the new version and Portion of Block in the original version when generating the delta package.

The differencing process merges portions of the images to reduce the overhead of the delta package and update time. In an embodiment merging portions of the images is done when the portions belong to the same Linux file reside in the same physical block of the image ROM restriction a sum of their sizes uncompressed including the start and end offset is not more than one physical block size RAM restriction and or the data header does not exceed a pre specified size e.g. number of bytes for example 255 4 bytes because only one byte is allocated for storing this value in an embodiment.

The dependency API which can be the dependency generation module as described with reference to differencing system uses the hint file from the CRAMFS split API to determine the dependency and updating precedence information generates a dependency table as described above. The diff engine API which can be the difference engine as described with reference to differencing system generates a difference file for each new portion of the image as described above. The NSCD packages the delta files to generate a delta package using for example the packaging engine described above with reference to .

While the SFS differencing system described above is described as including the image processing module dependency generation module difference engine and packaging engine as separate modules or components the embodiment is not so limited. Alternative embodiments for example can include functionality of the modules in one or more modules and or distribute the functionality of modules among any number of modules or system components.

The SFS differencing and updating of embodiments include updating by which SFS images hosted on a device like a portable electronic device are updated in place on the device as described above. The updating receives the delta file at a portable device via at least one coupling. Dependent ones of the original portions hosted on the portable device are assembled and at least one of the dependent original sections is identified that corresponds to the delta file received. The updating reconstructs at least one new portion on the portable device that corresponds to the delta file identified. The reconstructed new portions of the new image are written to the ROM of the portable device.

The SFS differencing system generates the delta file in a processor based or computer system or running under a processor based or computer system. The computer system on which or under which the SFS differencing system runs includes any collection of computing components and devices operating together as is known in the art. The computer system can also be a component or subsystem within a larger computer system or network.

The SFS updating system is hosted on a processor based device and receives the delta file and performs updates to original images hosed on the portable device. The processor based device or system on which or under which the SFS updating system runs includes any collection of computing components and devices operating together as is known in the art. The computer system can also be a component or subsystem within a larger computer system or network. The processor based device or system can include mobile devices for example cellular telephones personal computers portable computing devices portable telephones portable communication devices subscriber devices or units and personal digital assistants PDAs . The mobile devices also referred to as mobile communication devices portable communication devices and communication devices can include all such devices and equivalents and are not limited to communication devices that are wireless.

The SFS differencing system and SFS updating system communicate via a communication path . The communication path includes any medium by which files are communicated or transferred between processor based devices or systems. Therefore the communication path includes wireless couplings or connections wired couplings or connections and hybrid wireless wired couplings or connections. The communication path also includes couplings or connections to and or through networks or network components including local area networks LANs metropolitan area networks MANs wide area networks WANs proprietary networks interoffice or backend networks and the Internet. The communication path can include various network components not shown of a communication service provider or carrier but is not so limited. Furthermore the communication path includes removable fixed mediums like floppy disks hard disk drives and CD ROM disks as well as telephone lines buses and electronic mail messages.

The delta package is transferred or transmitted to the SFS updating system via the communication path . The SFS updating system includes an update module that uses information of the delta package to perform an in place update of the SFS image P hosted on the portable device. The update module generally reconstructs the new image P at the portable device by applying contents of the delta package to portions of the original SFS image P hosted on the portable device. The reconstructed portions of the new image P are written to the ROM of the portable device for example by writing the new image P over the hosted original image P. Upon completion of this SFS update process the SFS image now hosted on the portable device is substantially identical to the new SFS image received in the first SFS differencing system .

When it is determined that the data of the delta package is not corrupt the updating sets a pointer to the start of the delta package or diff package in order to begin the update. The portion update order and device block update order is implicitly encoded in the delta package of an embodiment. It is determined that a delta file is present at the start of the update and the update proceeds. The delta file could be encrypted for security purposes and in that case the delta file is decrypted using appropriate keys before or simultaneous with the start of the update process. The updating uses information of the delta file contents e.g. control information to decode dependency formation information read related portions of the original image if necessary unzip and or decrypt dependent portions of the original image if necessary and assemble dependent content of original portions of the original image hosted on the portable device.

The updating determines if a portion of a new image is an exact copy of a portion of an original image that is just moved or shifted from one location in the original version of the image to a different location in the new version of the image. When the updating determines that portions of the new image are exact copies of portions of an original image the updating of an embodiment encodes information of shifted portions by encoding shift information on where to copy and how many bytes to copy for the shifted new portion. This encoding of shift information is referred to herein as WHOLE IS COPY as described in detail above. The encoded information of the shifted portions is used to copy the portion of the new image to a pre specified or specific location in the block of the original image so as to replace the original portion to which it corresponds.

The updating generates or reconstructs the new portion of the image being updated by applying the contents of the delta file to the dependent content of the original portion of the original image. The new portion once reconstructed is written to an area of RAM in the host device and is zipped and or encrypted as appropriate to the SFS image. The new portion is placed into a specific location in the block of the original image so as to replace the original portion to which it corresponds. After each block of the new image is created or reconstructed that particular block is written to the ROM alternative embodiments may write the reconstructed blocks to the ROM at other points in the update process. The update process then proceeds with processing the delta file for the next block.

The updating and described above continues until the end of the delta package is reached and all delta files of the delta package have been processed. In so doing a determination is made as to whether the delta package includes further delta files for use in updating additional portions of the original image. When the delta package includes unprocessed delta files corresponding to additional portions of the original image to be updated operation returns to read and apply these unprocessed delta files. When it is determined that all delta files of the delta package have been processed and applied to the original image the updating writes the new SFS image to the ROM of the portable device. The updating of an embodiment overwrites the original SFS image with the new SFS image but alternative embodiments can write the new SFS image to one or more other areas of ROM or other device memory areas.

Referring to and the operations of the processes are under control of at least one processor but are not so limited. Those skilled in the relevant art can create source code microcode program logic arrays or otherwise implement the SFS differencing and or SFS updating of an embodiment based on these flow diagrams and the detailed description provided herein. The algorithm or routine operating according to these flow diagrams is stored as program code in machine readable or computer readable memory areas or devices of a computer system e.g. non volatile memory that forms part of the associated processors in the associated memory areas in removable media such as disks or hardwired or preprogrammed in chips such as electronically erasable programmable ROM EEPROM semiconductor chips or in any combination of these components but is not so limited.

The SFS differencing and updating of an embodiment includes a device for differencing static file system images. The device of an embodiment comprises a receiver that receives images of a static file system the images including an original image and a new image. The device of an embodiment also comprises a pre processor that divides the original image into numerous original sections and divides the new image into numerous new sections. The device of an embodiment comprises a dependency generator that identifies dependency alignments between the plurality of original sections and the plurality of new sections. The device of an embodiment comprises a difference engine that generates a delta file for at least one of the new sections wherein the delta file includes differences between the at least one new sections and at least one of the original sections on which the at least one new sections depends.

The device of an embodiment further comprises a packaging engine that assembles the delta file for the at least one of the new sections according to an update sequence.

The SFS differencing and updating of an embodiment includes a method comprising splitting blocks of SFS images into portions based on block information and image structure information wherein the SFS images include original images and new images. The method of an embodiment comprises performing portion level differencing by generating a delta file for a new portion of the new image wherein the delta file includes information of differences between the new portion and one of more corresponding original portions of the original image. The method of an embodiment comprises transferring the delta file to a client device. The method of an embodiment comprises updating a target SFS image of the client device using information of the delta file by reconstructing all portions of the new image in a device block in random access memory of the host device and writing the device block into read only memory of the host device.

The SFS differencing and updating of an embodiment includes a method comprising receiving images of a static file system the images including an original image and a new image. The method of an embodiment comprises dividing the original image into a plurality of original sections and divides the new image into a plurality of new sections. The method of an embodiment comprises identifying dependency alignments between the plurality of original sections and the plurality of new sections. The method of an embodiment comprises generating a delta file for at least one of the new sections wherein the delta file includes differences between the at least one new sections and at least one of the original sections on which the at least one new sections depends.

The SFS differencing and updating of an embodiment includes a system comprising a receiver that receives images of a static file system the images including an original image and a new image. The system of an embodiment comprises a pre processor coupled to the receiver that divides the original image into a plurality of original sections and divides the new image into a plurality of new sections. The system of an embodiment comprises a dependency generator coupled to the pre processor that identifies dependency alignments between the plurality of original sections and the plurality of new sections. The system of an embodiment comprises a difference engine coupled to the dependency generator that generates a delta file for at least one of the plurality of new sections that is different from at least one of the plurality of original sections on which the at least one new section depends the delta file including coded differences between a new section and one or more original sections. The system of an embodiment comprises a packaging engine coupled to the difference engine that assembles the delta files into a delta package.

The system of an embodiment comprises an update engine in a portable device wherein the portable device receives the delta package via at least one coupling wherein the update engine assembles dependent original sections of the plurality of original sections hosted on the portable device identifies at least one delta file of the delta package that corresponds to at least one of the dependent original sections and reconstructs at least one new section that corresponds to the at least one delta file identified.

The update engine of an embodiment receives the delta package and verifies integrity of contents of at least one delta file of the delta package.

The update engine of an embodiment reconstructs the at least one new section in a first memory area of the portable device.

The update engine of an embodiment continues identifying delta files of the delta package that correspond to at least one of the dependent original sections and reconstructing new sections that correspond to the delta files identified.

The update engine of an embodiment determines that all delta files of the delta package have been applied to the original sections hosted on the portable device and in response to the determination writes the reconstructed new sections to a second memory area of the portable device.

The update engine of an embodiment writes each block of the reconstructed new sections to a second memory area.

The SFS differencing and updating of an embodiment includes a method comprising receiving images of a static file system the images including an original image and a new image wherein the images include a plurality of blocks. The method of an embodiment comprises splitting the images by using information of the plurality of blocks to split the images into a plurality of portions. The method of an embodiment comprises determining differences between content of the images by determining differences between the plurality of portions of the original image and the new image. The method of an embodiment comprises generating a delta file that includes the differences for at least one portion.

The method of an embodiment comprises transferring the delta file to a portable wireless device that hosts the original image.

The method of an embodiment comprises receiving the delta file at a portable device via at least one coupling. The method of an embodiment comprises assembling dependent original portions of the plurality of original portions hosted on the portable device. The method of an embodiment comprises identifying at least one of the dependent original portions that corresponds to the delta file received. The method of an embodiment comprises reconstructing at least one new portion that corresponds to the at least one delta file identified.

The method of an embodiment comprises assembling a plurality of the delta files into a delta package.

The method of an embodiment comprises transferring the delta package to a portable wireless device that hosts the original image.

The method of an embodiment comprises receiving the delta package at the portable device via at least one coupling. The method of an embodiment comprises assembling dependent original portions of the plurality of original portions hosted on the portable device. The method of an embodiment comprises identifying at least one delta file of the delta package that corresponds to at least one of the dependent original portions. The method of an embodiment comprises reconstructing at least one new portion that corresponds to the at least one delta file identified.

The SFS differencing and updating of an embodiment includes computer readable media including executable instructions which when executed in a processing system determine differences between images by receiving images of a static file system the images including an original image and a new image wherein the images include a plurality of blocks. The media further determines differences between images by splitting the images by using information of the plurality of blocks to split the images into a plurality of portions. The media further determines differences between images by determining differences between content of the images by determining differences between the plurality of portions of the original image and the new image. The media further determines differences between images by generating a delta file that includes the differences for at least one portion.

The media further determines differences between images by transferring the delta file to a portable wireless device that hosts the original image.

The media further determines differences between images by receiving the delta file at a portable device via at least one coupling. The media further determines differences between images by assembling dependent original portions of the plurality of original portions hosted on the portable device. The media further determines differences between images by identifying at least one of the dependent original portions that corresponds to the delta file received. The media further determines differences between images by reconstructing at least one new portion that corresponds to the at least one delta file identified.

The media further determines differences between images by assembling a plurality of the delta files into a delta package.

The media of an embodiment may transfer the delta package to a portable wireless device that hosts the original image.

The media of an embodiment receives the delta package at the portable device via at least one coupling. The media of an embodiment assembles dependent original portions of the plurality of original portions hosted on the portable device. The media of an embodiment identifies at least one delta file of the delta package that corresponds to at least one of the dependent original portions. The media of an embodiment reconstructs at least one new portion that corresponds to the at least one delta file identified.

The SFS differencing and updating of an embodiment includes a device for differencing file system images. The device of an embodiment comprises a receiver that receives images of a static file system the images including an original image and a new image. The device of an embodiment comprises a pre processor coupled to the receiver that converts the images from a first format into a plurality of split files wherein a split file includes data of at least one portion of the original image and the new image and at least one location parameter of the portion. The device of an embodiment comprises a dependency generator coupled to the pre processor that generates a portion dependency table including information of a dependency between a portion of the new image and at least one portion of the original image. The device of an embodiment comprises a difference engine coupled to the dependency generator that generates a delta file for at least one portion of the new image wherein the delta file includes differences between the at least one portion of the new image and at least one portion of the original image.

The device of an embodiment comprises a packaging engine coupled to the difference engine that assembles delta files for all portions of the new image.

The SFS differencing and updating of an embodiment includes a method comprising receiving images of a static file system the images including an original image and a new image wherein the images include a plurality of blocks. The method of an embodiment comprises converting the images into a plurality of split files wherein the converting splits the images using information of the plurality of blocks to split the images into a plurality of portions wherein the converting generates hint information of the splits. The method of an embodiment comprises determining differences between content of the images by determining differences between the plurality of portions of the original image and the new image. The method of an embodiment comprises generating a delta file that includes the differences for at least one portion.

The method of an embodiment comprises writing data of the portions to the split files the data including at least one of memory location of the portions block information of a block that includes a portion offset information of at least one of the portion and the block and size information of at least one of the portion and the block.

The method of an embodiment comprises generating at least one hint file that includes the hint information.

The method of an embodiment comprises identifying any dependency between at least one portion of the new image and at least one portion of the original image. The method of an embodiment comprises generating a portion dependency table that includes dependency information of the identifying wherein the portion dependency table excludes a new portion and its corresponding dependent original portion when the identifying indicates content and portion name are identical between the new portion and the corresponding original portion on which the new portion depends.

The method of an embodiment comprises identifying any identical portion of the new image that has identical content as the original image and a different portion name. The method of an embodiment comprises generating information of the identical portion that includes a location and a size of the identical portion wherein the delta file includes the information of the identical portion.

The method of an embodiment comprises combining the portion dependency table and the hint information.

The method of an embodiment comprises generating a block precedence graph and forming an acyclic block precedence graph by breaking any cycle in the block precedence graph.

The method of an embodiment comprises generating a re ordered portion dependency table by re ordering the portion dependency table using information of the acyclic block precedence graph.

The method of an embodiment comprises transferring the delta file to a client device that hosts the original image. The method of an embodiment comprises updating a target image of the client device using information of the delta file by reconstructing all portions of the new image in a device block in random access memory of the host device and writing the device block into read only memory of the host device.

The updating of an embodiment comprises assembling dependent original portions of the plurality of original portions hosted on the client device. The updating of an embodiment comprises identifying at least one of the dependent original portions that corresponds to the delta file received. The updating of an embodiment comprises reconstructing at least one new portion that corresponds to the at least one delta file identified.

The method of an embodiment comprises transferring the delta package to a client device that hosts the original image.

The method of an embodiment comprises receiving the delta package at the client device via at least one wireless coupling. The method of an embodiment comprises assembling dependent original portions of the plurality of original portions hosted on the client device. The method of an embodiment comprises identifying at least one delta file of the delta package that corresponds to at least one of the dependent original portions. The method of an embodiment comprises reconstructing at least one new portion that corresponds to the at least one delta file identified.

The SFS differencing and updating of an embodiment includes a method comprising receiving images of a static file system the images including an original image and a new image. The method of an embodiment comprises converting the images from a first format into a plurality of split files wherein a split file includes data of at least one portion of the original image and the new image and at least one location parameter of the portion. The method of an embodiment comprises generating a portion dependency table including information of a dependency between a portion of the new image and at least one portion of the original image. The method of an embodiment comprises generating a delta file for at least one portion of the new image wherein the delta file includes differences between the at least one portion of the new image and at least one portion of the original image.

The converting of an embodiment comprises copying at least one of super headers and directory headers to the split files. The converting of an embodiment comprises assigning a name to the at least one super header and directory header.

The converting of an embodiment comprises splitting the images using information of a plurality of blocks of the images to split the images into a plurality of portions. The converting of an embodiment comprises determining at least one portion of the plurality of portions that is within a same boundary of a block. The converting of an embodiment comprises decompressing the at least one portion that is within the same boundary and outputting the decompressed portion to the split files.

The method of an embodiment comprises merging the split files when the split files belong to the same CRAMFS Linux file file restriction reside in the same device block ROM restriction and a total size of an uncompressed version of the split files is less than a threshold RAM restriction .

The method of an embodiment comprises writing data of the portions to the split files the data including at least one of memory location of the portions block information of a block that includes a portion offset information of at least one of the portion and the block and size information of at least one of the portion and the block.

The method of an embodiment comprises generating at least one hint file that includes hint information for each split of the split files.

Generating a portion dependency table of an embodiment comprises sorting file names of the hint file. Generating a portion dependency table of an embodiment comprises identifying common file names between the original image and the new image.

The sorting of an embodiment includes alphabetical sorting of at least one of file names of the original image and file names of the new image.

The method of an embodiment comprises determining any portion dependency among at least one portion of the original image and at least one portion of the new image.

The method of an embodiment comprises comparing content of each new portion with content of a corresponding original portion on which the new portion depends wherein the new portion depends only on one original portion.

The method of an embodiment comprises generating a modified portion dependency table by removing the new portion and the corresponding original portion from the portion dependency table when the comparing indicates content and portion name are identical. The method of an embodiment comprises setting a flag when the comparing indicates content is identical and portion name is different wherein the portion is an identical portion that is shifted in location in the new image wherein the flag is a WHOLE IS COPY flag. The method of an embodiment comprises generating information of the identical portion that includes a location and a size of the identical portion wherein the delta file includes the information of the identical portion.

The method of an embodiment comprises combining the modified portion dependency table and the hint file for the images. The method of an embodiment comprises generating a block precedence graph. The method of an embodiment comprises identifying any cycle in the block precedence graph. The method of an embodiment comprises breaking any cycle in the block precedence graph and forming an acyclic block precedence graph.

The method of an embodiment comprises generating a sorted acyclic block precedence graph by sorting information of the acyclic block precedence graph. The method of an embodiment comprises generating a re ordered portion dependency table by re ordering the modified portion dependency table using information of the sorted acyclic block precedence graph. The method of an embodiment comprises outputting the re ordered portion dependency table.

The SFS differencing and updating of an embodiment includes a system comprising a receiver that receives images of a static file system the images including an original image and a new image. The system of an embodiment includes a pre processor coupled to the receiver that converts the images from a first format into a plurality of split files wherein a split file includes data of at least one portion of the original image and the new image and at least one location parameter of the portion. The system of an embodiment includes a dependency generator coupled to the pre processor that generates a portion dependency table including information of a dependency between a portion of the new image and at least one portion of the original image. The system of an embodiment includes a difference engine coupled to the dependency generator that generates a delta file for at least one portion of the new image wherein the delta file includes differences between the at least one portion of the new image and at least one portion of the original image. The system of an embodiment includes a packaging engine coupled to the difference engine that assembles delta files for all portions of the new image.

The system of an embodiment includes an update engine in a portable device wherein the portable device receives the delta package via at least one coupling wherein the update engine assembles dependent original portions of the original image hosted on the portable device identifies at least one delta file of the delta package that corresponds to at least one of the dependent original portions and reconstructs at least one new portion that corresponds to the at least one delta file identified.

The update engine of an embodiment receives the delta package and verifies integrity of contents of at least one delta file of the delta package.

The update engine of an embodiment reconstructs the at least one new portion in a first memory area of the portable device.

The update engine of an embodiment continues identifying delta files of the delta package that correspond to at least one of the original portions and reconstructing new portions that correspond to the delta files identified.

The update engine of an embodiment determines that all delta files of the delta package have been applied to the original portions hosted on the portable device and in response to the determination writes the reconstructed new portions to a second memory area of the portable device.

The SFS differencing and updating of an embodiment includes computer readable media including executable instructions which when executed in a processing system determine differences between images by receiving images of a static file system the images including an original image and a new image wherein the images include a plurality of blocks. The media further determines differences between images by converting the images into a plurality of split files wherein the converting splits the images using information of the plurality of blocks to split the images into a plurality of portions wherein the converting generates hint information of the splits. The media further determines differences between images by determining differences between content of the images by determining differences between the plurality of portions of the original image and the new image. The media further determines differences between images by generating a delta file that includes the differences for at least one portion.

The media further determines differences between images by writing data of the portions to the split files the data including at least one of memory location of the portions block information of a block that includes a portion offset information of at least one of the portion and the block and size information of at least one of the portion and the block.

The media further determines differences between images by generating at least one hint file that includes the hint information.

The media further determines differences between images by identifying any dependency between at least one portion of the new image and at least one portion of the original image. The media further determines differences between images by generating a portion dependency table that includes dependency information of the identifying wherein the portion dependency table excludes a new portion and its corresponding dependent original portion when the identifying indicates content and portion name are identical between the new portion and the corresponding original portion on which the new portion depends.

The media further determines differences between images by identifying any identical portion of the new image that has identical content as the original image and a different portion name. The media further determines differences between images by generating information of the identical portion that includes a location and a size of the identical portion wherein the delta file includes the information of the identical portion.

The media further determines differences between images by transferring the delta file to a client device that hosts the original image. The media further determines differences between images by updating a target image of the client device using information of the delta file by reconstructing all portions of the new image in a device block in random access memory of the host device and writing the device block into read only memory of the host device.

Aspects of the SFS differencing and updating described above may be implemented as functionality programmed into any of a variety of circuitry including programmable logic devices PLDs such as field programmable gate arrays FPGAs programmable array logic PAL devices electrically programmable logic and memory devices and standard cell based devices as well as application specific integrated circuits ASICs . Some other possibilities for implementing aspects of the SFS differencing and updating include microcontrollers with memory such as electronically erasable programmable read only memory EEPROM embedded microprocessors firmware software etc. Furthermore aspects of the SFS differencing and updating may be embodied in microprocessors having software based circuit emulation discrete logic sequential and combinatorial custom devices fuzzy neural logic quantum devices and hybrids of any of the above device types. Of course the underlying device technologies may be provided in a variety of component types e.g. metal oxide semiconductor field effect transistor MOSFET technologies like complementary metal oxide semiconductor CMOS bipolar technologies like emitter coupled logic ECL polymer technologies e.g. silicon conjugated polymer and metal conjugated polymer metal structures mixed analog and digital etc.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in a sense of including but not limited to. Words using the singular or plural number also include the plural or singular number respectively. Additionally the words herein hereunder above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. When the word or is used in reference to a list of two or more items that word covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above description of illustrated embodiments of the SFS differencing and updating is not intended to be exhaustive or to limit the invention to the precise form disclosed. While specific embodiments of and examples for the SFS differencing and updating are described herein for illustrative purposes various equivalent modifications are possible within the scope of the SFS differencing and updating as those skilled in the relevant art will recognize. The teachings of the SFS differencing and updating provided herein can be applied to other processing systems and communication systems not only for the SFS differencing and updating systems described above.

The elements and acts of the various embodiments described above can be combined to provide further embodiments. These and other changes can be made to the SFS differencing and updating in light of the above detailed description. Furthermore aspects of the SFS differencing and updating can be modified if necessary to employ the systems functions and concepts of the various patents and applications described above to provide yet further embodiments of the SFS differencing and updating.

In general in the following claims the terms used should not be construed to limit the SFS differencing and updating to the specific embodiments disclosed in the specification and the claims but should be construed to include all processing systems that operate under the claims to provide file differencing and updating. Accordingly the SFS differencing and updating is not limited by the disclosure but instead the scope of the SFS differencing and updating is to be determined entirely by the claims.

While certain aspects of the SFS differencing and updating are presented below in certain claim forms the inventors contemplate the various aspects of the SFS differencing and updating in any number of claim forms. For example while only one aspect of the SFS differencing and updating is recited as embodied in computer readable medium other aspects may likewise be embodied in computer readable medium. Accordingly the inventors reserve the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the SFS differencing and updating.

