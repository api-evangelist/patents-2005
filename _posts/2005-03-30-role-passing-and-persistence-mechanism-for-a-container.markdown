---

title: Role passing and persistence mechanism for a container
abstract: A role passing and persistence mechanism that implements role-based access control at a container level is disclosed. In one implementation, the role passing and persistence mechanism provides one or more RBAC services. Functions provided by the role passing and persistence mechanism include role validating, role persisting and role administration. The role passing and persistence mechanism is used to persist role information for a session between a client and a container for any type of client. No matter which adaptor a client uses to connect to the container, the role passing and persistence mechanism provides a uniform method of passing role information to the container such that persisted role information can be used by any service hosted by the container after the session is established and the role information has been persisted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08161173&OS=08161173&RS=08161173
owner: Oracle America, Inc.
number: 08161173
owner_city: Redwood City
owner_country: US
publication_date: 20050330
---
A large scale computer program provides a large number of functionalities that can be invoked by users and other entities e.g. other programs . Some of these functionalities may have significant impact on the overall operation and performance of the program while other functionalities may have little or no impact. Because some of the functionalities may give rise to serious consequences it is desirable to limit access to those and perhaps other functionalities to ensure that only the proper users have access to them.

Many computer programs use a role based model for controlling access to particular functionalities or components. Role based access control RBAC models determine whether a user is allowed access to a particular component or functionality based on a role associated with a user. Typically a user s role includes one or more privileges and access is determined based on whether the privileges are sufficient to access the desired functionality.

In a computer program that has been implemented using containers clients provide user authentication and role information to a container in order to access services hosted by the container. User authentication information is validated and role information is passed to the requested service hosted by the container. If the requested service determines that a role associated with the user contains sufficient privileges to access the requested service then the client is allowed access to the service.

It is easy to pass role information to a service in a container that supports only one particular type of client. However in a system in which a container is used to provide common functionality to many different types of user interfaces and external programs role information cannot be passed to the hosted services in a uniform consistent manner.

A container that provides services to multiple types of clients has many different connection adaptors each adaptor intended for use by a different type of client to securely route client requests to services hosted by the container. Information received at the various adaptors may be formatted in a wide variety of ways as each adaptor may support a completely different protocol. Because each adaptor supports a different protocol the container must be implemented such that it includes programming logic that allows the container to obtain role information formatted in many different ways from the various adaptors and to pass the role information to the requested service in a format that is useable by the service to determine whether a user has sufficient privileges to access the service. This programming logic must include code specific to each adaptor in order to support all requests.

Because a container must include programming logic to handle requests from each adaptor adding a new adaptor to a container requires that new programming logic be added to the container to handle requests from the new adaptor Maintaining this programming logic in the container to interface with many different adaptors is expensive and can lead to large amounts of redundant code.

Furthermore once a session has been initiated between a client and the container the role of the user cannot change or be updated. In order to change a user s role the connection to the container must be closed and then re opened using new role information.

As the above discussion shows the current approaches to implementing role based access control in containers have significant drawbacks. Consequently an improved approach is needed.

In accordance with one embodiment of the present invention there is provided a role passing and persistence mechanism that is used to implement RBAC at a container level. In one embodiment the role passing and persistence mechanism is implemented as one of the services hosted by the container.

In one embodiment the role passing and persistence mechanism provides one or more RBAC services such as role validating role persisting and role management. These RBAC services are exposed to the other services in the container and those other services are able to invoke the RBAC services to have the role passing and persistence mechanism determine a role associated with a client session on their behalf. In one embodiment the role passing and persistence mechanism is used by external entities to pass role information validate passed role information and persist role information for each client session.

Embodiments are used to eliminate the need for a container to include customized programming logic to handle role passing and role persistence for each type of connection protocol supported by an adaptor of the container. Embodiments provide to clients a role passing and RBAC mechanism that is independent of the connection protocols supported by various adaptors. Embodiments provide a uniform role passing and persistence mechanism that can be used to provide consistent role passing and role persistence behavior across the different connection protocols supported by a container. In addition the role information passed by the role passing and persistence mechanism can be used for auditing purposes to track who initiated sessions and accessed services. As this discussion shows this embodiment of the present invention achieves the advantages of the prior approaches without suffering the accompanying drawbacks.

In one embodiment the role passing and persistence mechanism operates as follows. A client connects to an adaptor of a container to initiate a session. Significantly role information is not used in session establishment. Once the session is established the container exposes Application Programming Interface API calls that implement the role passing and persistence mechanism to the client. The client s role information is passed to the role passing and persistence mechanism for validation and persisting through remote API calls. Persisted role information can be later accessed through the role passing and persistence mechanism by services that are invoked during the established session. Role information is persisted for the established session and services obtain the persisted role information by providing a session identifier to the role passing and persistence mechanism.

Using embodiments of the present invention role information is passed from a client to the container without going through an adaptor but rather by using the connection established by an adaptor. Because role information is passed directly to the container new adaptors can be added to the container without requiring new programming logic to be added to the container to obtain role information from the new adaptor.

Furthermore role definitions can be changed at any time by invoking role management functions of the role passing and persistence mechanism. In addition a client session role association can also be changed at any time. These types of role management functions can be performed at any time on the fly and sessions do not have to be shut and re opened to change a role definition or change which role is associated with a session.

A role passing and persistence mechanism is described. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are depicted in block diagram form in order to avoid unnecessarily obscuring the present invention.

With reference to there is shown a functional block diagram of a system in which one embodiment of the present invention may be implemented. As shown the system comprises a container . Typically a container is implemented as a component specialized to host other components. As used herein the term container refers broadly to any program that contains hosts and or deploys one or more services. Examples of a container include but are certainly not limited to web servers and web application servers.

 Services refer to the pieces of functionality hosted by the container. In one embodiment a service hosted by a container is exposed to other services in the container as well as to entities e.g. users and programs external to the container . In the example embodiment shown in container hosts Service X Service Y and Service Z .

In one embodiment container is a common container that can be accessed by many different types of user interfaces and programs. A common container allows many different types of external entities to access common functionality. Examples of the types of external entities that may request a service provided by a common container may include but are certainly not limited to a Common Language Infrastructure CLI client application a Browser User Interface BUI a Simple Network Management Protocol SNMP client a Remote Method Invocation RMI client application etc. Such user interfaces and programs are herein collectively referred to as clients and can include any entity external to the container that requests a service hosted by the container. In the example embodiment shown in clients and make requests to container for any of the services . In the example shown in client is a Client Program such as a CLI client application while clients and are user interfaces such as BUIs. Any number and type of client can connect to container .

In order to allow many different types of clients to access hosted services container may include one or more adaptors through which a client may connect and request services and through which services are delivered. The services hosted by the container are exposed through the adaptors. Each adaptor may include different connection mechanisms that are used by various clients to establish communication channels with the container and access hosted services. Typically each adaptor supports a particular connection or network protocol such as Java Management Extensions JMX SNMP RMI or Simple Object Access Protocol SOAP for example. A client connects to the appropriate adaptor that supports a protocol used by the client to make requests for services from the container. In the example embodiment of Client Program A may be a CLI client application that connects through connection to Adaptor that supports the CLI protocol for example while Adaptor may support BUI clients and Adaptor may support another type of client. Any number and type of adaptors may be included in a container.

When a client connects to a container through an adaptor the adaptor uses the services of one or more authentication modules to authenticate the user associated with the client. For example a request from a client to an adaptor may include a user ID and password. The client communicates the request to an appropriate adaptor using the network protocol supported by the adaptor. The adaptor provides user identification information such as User ID and password to an authentication module so that authentication module can authenticate the user associated with the client. For example Adaptor may pass the User ID and password obtained from Client Program A in connection to authentication module as parameters in a call .

Authentication module may be a service hosted by the container as shown in the example embodiment of . In one embodiment container contains a plurality of authentication modules and adaptors may use different authentication modules to authenticate users. Alternatively authentication module may be an Operating System OS based service. No matter how authentication module is implemented the adaptor is just used to pass the user identification information on to the authentication module. Significantly only user identification information is passed to the authentication module and role based access control information is not passed. Authentication module only authenticates a user associated with a client and does not provide any role based access authorization functions.

Authentication module receives user identification information authenticates the user associated with the client and reports the results of the authentication to the adaptor. If the user is valid a client session i.e. communication channel is created between the client and the container. The session is given a session ID that uniquely identifies the session at the container level.

Once a session is established it will remain open until closed. Any requests received by the container through this session will be identified by the session ID which also identifies the user associated with the client that established the session. That is session management is provided at the container level so that once a session is established between client and container the container is responsible for determining the client associated with the session ID for each established session.

An adaptor is used only to call an authentication function and establish a session it is not used again after a session has been established. The session is used to provide services of the container including role passing and persistence services. Role information is not passed to the container until after a session has been established. Role based authorization is performed by the role passing and persistence mechanism which is discussed in detail below.

Some or all services may be access controlled such that a requesting client is required to have one or more access privileges. In one embodiment container stores access control information . In one embodiment access control information is maintained in terms of a hierarchy of users roles and privileges. Users are at the top of the hierarchy. A user can have one or more roles. A role may be for example employee manager etc. If a user is a low level employee then he may have just the employee role. If a user is a manager then he may have both the manager and employee roles. Each role may have one or more associated privileges. A privilege provides permission to access some information or to perform some function. Different roles may have different privileges. For example while a manager role may have a privilege X that allows financial information to be viewed an employee role may not have such a privilege.

In one embodiment information pertaining to the users roles and privileges are stored in data structures and . Specifically data structure stores all of the available privileges. Data structure stores the mapping between roles and privileges. Thus if the manager role has the privileges X and Y then that would be specified in this data structure . Data structure stores the mapping between users and roles. Hence if a user has the manager and employee roles then that would be specified in this data structure . For purposes of the present invention data structures and may be any type of data structure taking on any desired form. In one embodiment the data structures and take the form of extensible markup language XML documents. More specifically the information contained in data structures is specified using extensible access control markup language XACML which is a form of XML. XACML is a well known standard hence it need not be described in detail herein.

In one embodiment while services are responsible for knowing which if any privileges are required to invoke that service the service is not responsible for determining what privileges are associated with a client making a request. Rather as will be discussed further below a service communicates with role passing and persistence mechanism to find out what privileges are associated with a client session through which a request for its service is received.

As noted above container exposes the functionalities provided by services through adaptors so that they can be invoked by clients . When a client wants to invoke a functionality of a service hosted by the container the client connects to the adaptor of the container that supports a network protocol used by the client and establishes a client session with the container.

The adaptor authenticates the client by enlisting the services of an authentication module. After authentication but before invoking the requested service the role passing and persistence mechanism is invoked by the client to validate and persist any roles associated with the client. That is instead of passing role information to the adaptor when establishing the connection a client passes its role information through a remote API call to the container through the established session bypassing the adaptor.

In particular role validating module of role passing and persistence mechanism is called with role information being passed as one or more arguments in call to ensure that they are valid. The role validating module checks the validity of passed role information to ensure that any identified roles are valid i.e. the role exists and may also determine if the user role association is valid. The role passing mechanism has access to all access control information stored by container in order to make queries etc. The role passing mechanism may communicate the results of its role validity checks to client .

The example embodiment shown in illustrate this concept. As shown in Client Program A communicates with Adaptor to initiate a session. Adaptor invokes authentication module to authenticate the client and a session ID that uniquely identifies the client session is created and returned to client . Then as shown in after authentication client invokes role passing and persistence mechanism to validate any roles associated with it. The role validating module of role passing and persistence mechanism receives role information from client as parameters in the call to the API.

In addition to performing the role validating function role passing and persistence mechanism also includes a role persisting module . This module is used to persist any roles associated with a session such that any service hosted y the container can later communicate with the role passing and persistence mechanism to find out what roles are associated with a client session. The role passing and persistence mechanism receives role information from any type of client and persists the role information for the duration of the client session. In one embodiment to persist a role for a session identified by the session ID the role persisting module simply stores session IDs with one or more role names associated with each session M. Access control information can be used to determine privileges associated with the stored role name when needed.

This is shown in . After role validation client invokes role passing and persistence mechanism again to persist the roles. The role persisting module of role passing and persistence mechanism persists the role information for the session ID. In alternative embodiments role validating and persisting are both performed through a single API call that passes in the session ID and role information as arguments.

Once role information is persisted any service invoked by the client during that session can use the persisted information associated with the unique session ID to determine whether to allow the client to access its functionality. For example if a client attempts to invoke Service Y on an established session service Y calls the role passing and persistence mechanism to obtain role information for that session. In one embodiment Service Y will then call the role passing and persistence mechanism again to determine whether the determined role has the required privileges to access the service. In alternative embodiments a single call is made to perform both functions. If the determined role indicates that the client has sufficient privileges to access Service Y then Service Y returns the requested information to the client.

For example consider the example embodiment shown in . At this point client has been authenticated and its role has been validated and persisted . As shown in when client attempts to invoke Service Y Service Y communicates with role passing mechanism to see what roles are associated with client . Role passing and persistence mechanism makes the determination and reports back to the requesting service.

The role passing and persistence mechanism performs these functions for any authenticated client that establishes a session with the container . Thus the adaptors do not need to receive process or pass any role based access control information. Once a session is established the adaptor is no longer involved and role information is passed to the role passing and persistence mechanism independent of any protocol supported by any individual adaptor. In addition the role passing and persistence mechanism eliminates the need for the container to include programming logic to handle role passing information for each adaptor. Rather when a service hosted by the container needs to obtain role based access control information associated with a request it can call upon the role passing and persistence mechanism . Thus the role passing and persistence mechanism provides role based access control functionality for all of the hosted services at the container level.

Persisted role information can also be used to provide auditing functions. The persisted role information can associate particular operations with the users that initiated the operations and keep track of which users have accessed which services.

In addition role passing and persistence mechanism includes a role management module . This module is used to perform administrative functions relating to RBAC such as changing user role associations creating deleting a user creating deleting a role changing role privilege associations etc. For example after establishing a session with the container an application can create a role with certain privileges before attempting to invoke a service hosted by the container that requires those privileges. Role management module also enables clients and other external entities to modify access control information stored by the container. Because the role passing mechanism can perform these role management functions on the fly a user is not required to shut down a connection and re open a connection to the container when his role changes.

For example consider . Client can invoke role passing and persistence mechanism with a call to a SetSessionRole function. This function takes as parameters the session ID and a role name. The role passing and persistence mechanism sets the role for the session identified by the session ID to the named role for all future requests coming from that session. The role is changed without closing the session and re opening a new connection.

In one embodiment the role passing and persistence mechanism is implemented as a service within the container . Thus as with every other service hosted by the container the role passing and persistence mechanism exposes the functionalities that it provides through container and the other services in the container are able to invoke role passing and persistence mechanism functionalities. In addition the role passing and persistence mechanism functionalities may be invoked by external clients. To clearly distinguish the functionalities provided by the role passing and persistence mechanism from the functionalities provided by the other services the functionalities provided by the role passing and persistence mechanism will hereinafter be referred to as the RBAC services.

In one embodiment a common remote Application Programming Interface API approach is used to pass role information using the connection established by an adaptor. The role passing and persistence mechanism implements the API with functions that validate and persist roles for the session established by the connection as well as functions used by hosted services to enforce RBAC for requests received through the established session.

These functions typically take session identifiers role names user identifiers etc. as parameters to perform the named functions. The above example function titles incorporate the term activity instead of the term privilege however those skilled in the art will recognize that any terminology can be used.

It should be noted that this list of RBAC services is shown for illustrative purposes only. It is not meant to be definitive or exhaustive. Thus the role passing and persistence mechanism may provide fewer services more services and or different services.

With reference to the functional block diagrams of and the operational flow diagram of a sample operation of the system will now be described using the example of Client Program A making a request for Service Y from container .

In the process shown in a client initiates a session with container at step . This is illustrated in as connection request from Client Program A to Adaptor . This connection request contains a User ID and password. In one embodiment the User ID and password are provided by the adaptor to an authentication module in the container. This is illustrated in as authentication call from Adapter to authentication module . In alternative embodiments authentication functions provided by an operating system may be used instead.

At step the user associated with the client is authenticated by authentication module . Authentication module returns the result of the authentication process and if the user is authenticated a session ID is created and is assigned to the session. The Adaptor returns the session ID to the requesting client and in one embodiment also sends a list of services hosted by the container to the client. In another embodiment the client must make a separate request to the container to obtain a list of hosted services.

The client creates an instance of the RBAC services provided by the role passing and persistence mechanism and makes API calls to RBAC services functions to pass role information to the container. Role information is passed as a parameter in an API call at step . Significantly the client must invoke role passing and persistence mechanism functions to validate and persist role information before attempting to invoke other services hosted by the container.

The role passing and persistence mechanism checks the validity of passed role information at step through role validating module . If valid the role passing and persistence mechanism persists the passed role information for the session through role persisting module at step . In one embodiment these functions are performed through separate calls alternatively a single API call may be made to perform both functions.

After a session is established and role information is persisted for that session other services hosted by the container can call role passing and persistence mechanism to obtain role information for a session by passing a session ID in the API call.

In one embodiment the functional components e.g. container services authentication module role passing and persistence mechanism adaptors etc. shown in are implemented as one or more sets of instructions executed on one or more computer systems. is a block diagram of a sample computer system on which one or more of the functional components may be implemented. Computer system includes a bus for facilitating information exchange and one or more processors coupled with bus for processing information. Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions by processor . Computer system may further include a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

In computer system bus may be any mechanism and or medium that enables information signals data etc. to be exchanged between the various components. For example bus may be a set of conductors that carries electrical signals. Bus may also be a wireless medium e.g. air that carries wireless signals between one or more of the components. Bus may also be a medium e.g. air that enables signals to be capacitively exchanged between one or more of the components. Bus may further be a network connection that connects one or more of the components. Overall any mechanism and or medium that enables information signals data etc. to be exchanged between the various components may be used as bus .

Bus may also be a combination of these mechanisms media. For example processor may communicate with storage device wirelessly. In such a case the bus from the standpoint of processor and storage device would be a wireless medium such as air. Further processor may communicate with ROM capacitively. In this instance the bus would be the medium such as air that enables this capacitive communication to take place. Further processor may communicate with main memory via a network connection. In this case the bus would be the network connection. Further processor may communicate with display via a set of conductors. In this instance the bus would be the set of conductors. Thus depending upon how the various components communicate with each other bus may take on different forms. Bus as shown in functionally represents all of the mechanisms and or media that enable information signals data etc. to be exchanged between the various components.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM DVD or any other optical storage medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

At this point it should be noted that although the invention has been described with reference to a specific embodiment it should not be construed to be so limited. Various modifications may be made by those of ordinary skill in the art with the benefit of this disclosure without departing from the spirit of the invention. Thus the invention should not be limited by the specific embodiments used to illustrate it but only by the scope of the issued claims and the equivalents thereof.

