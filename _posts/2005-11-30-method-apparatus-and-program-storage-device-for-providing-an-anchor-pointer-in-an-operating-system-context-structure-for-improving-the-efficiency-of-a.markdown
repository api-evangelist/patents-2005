---

title: Method, apparatus and program storage device for providing an anchor pointer in an operating system context structure for improving the efficiency of accessing thread specific data
abstract: A method, apparatus and program storage device for providing an anchor pointer in an operating system context structure for improving the efficiency of accessing thread specific data is provided. A kernel thread context structure is maintained in memory. A thread accesses a pointer memory in the kernel thread context structure and sets a value within the pointer memory that addresses data specific to the thread.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08185895&OS=08185895&RS=08185895
owner: International Business Machines Corporation
number: 08185895
owner_city: Armonk
owner_country: US
publication_date: 20051130
---
This invention relates in general to computer operating systems and more particularly to a method apparatus and program storage device for providing an anchor pointer in an operating system context structure for improving the efficiency of accessing thread specific data.

In any operating system that supports protection and security protection boundaries separate user processes from each other and from the operating system OS kernel. Generally there are two protection domains in the operating system the user protection domain and the kernel mode protection domain. Application programs run in the user protection domain. The user protection domain provides read and write access to the data region of the process read access to the text and shared text regions of the process and access to shared data regions using the shared memory functions. When a program is running in the user protection domain the processor executes instructions in the problem state and the program does not have direct access to kernel data.

The code in the kernel and kernel extensions run in the kernel protection domain. This code includes interrupt handlers kernel processes device drivers system calls and file system code. The processor is in the kernel protection domain when it executes instructions in the privileged state. The privileged state provides read and write access to the global kernel address space and read and write access to the thread except when an interrupt handler is running.

Code running in the kernel protection domain can affect the execution environments of all processes. Code running in the kernel protection domain can access global system data can use all kernel services and is exempt from all security constraints. Thus programming errors in the code running in the kernel protection domain can cause the operating system to fail. In particular a process s user data cannot be accessed directly but must normally be accessed using the kernel services or their variants. These routines protect the kernel from improperly supplied user data addresses. Application programs can gain controlled access to kernel data by making system calls. The use of a system call by a user mode process allows a kernel function to be called from the user mode. Access to functions that directly or indirectly invoke system calls is typically provided by programming libraries providing access to operating system functions.

A user process includes a set of system resources for executing one or more threads . A thread is a simple execution path through application software and the operating system. Stated differently a thread is a separate sequential flow of control that takes place during the execution of a data processing program or application. A thread may also be described as the active execution of a designated data processing routine including any nested routine invocations. Kernels or kernel threads are control flows that enable concurrent processing of a procedure by a plurality of processors thereby dividing a task to be performed into parts and decreasing the task execution time. Multi threading can be used in single processor systems to perform several tasks at the same time such as input monitoring and computation execution. Multi threading can also be used in multi processor systems to perform several control flows or threads in parallel.

For a multithreaded application it is very common to have identical code running on multiple threads. Part of the process of multithreaded application design is to determine where data access conflicts between multiple threads can potentially lead to data corruption and how to avoid such conflicts. Most solutions to multithreading problems deal with synchronization concepts such as how to serialize threads that share common data. This focus on synchronization occurs because synchronization is an indispensable part of multithreaded programming. Moreover each thread might still need to access and maintain data that is specific to that particular thread. For example a thread s current state which is represented by a current program counter a call return stack the processor s registers and some thread specific data allows the processor to freeze a thread i.e. stop executing it and to continue execution at a later time from the point where the thread was stopped.

All threads within a process share system resources and operate in the same address space. Static variables declared within a computer program have a static storage location. Accordingly references to a static variable from any thread will refer to the memory location allocated to that variable. Multiple copies of static variables location are not created as they may be with other variables types. The value of a static variable will always be the last value written to its memory. One of the primary advantages of static variables is that their values persist between references and will exist for as long as the program operates. In a multi threaded program static variables allow a thread to resume execution of its instructions and access data it was using before it relinquished control of the CPU to another thread.

One of the primary difficulties that result from using static variables in multi threaded computer programs is that changes to a static variable made by one thread will be seen by all other threads operating within the same process. Multiple threads cannot use static variables separately because other threads within the process can overwrite the values stored at the variable memory location. Thus the development of multi threaded programs using static variables often requires explicit thread harmonization by the programmer. Another problem is that threads within the same process must use unique static variable IDs to avoid reading or writing to the location of another static variable. This also requires thread harmonization by the programmer. Since identical code is running on each thread of a multithreaded process remapping of some thread specific data e.g. thread ID etc. from the operating system to the address of a thread specific save area is typically required. However this is inefficient because system resources are tied up during the remapping process.

It can be seen then that there is a need for a method apparatus and program storage device for providing an anchor pointer in an operating system context structure for improving the efficiency of accessing thread specific data.

To overcome the limitations in the prior art described above and to overcome other limitations that will become apparent upon reading and understanding the present specification the present invention discloses method apparatus and program storage device for providing an anchor pointer in an operating system context structure for improving the efficiency of accessing thread specific data.

The present invention solves the above described problems by providing a kernel thread context structure in memory. A thread accesses a pointer memory in the kernel thread context structure and sets a value within the pointer memory that addresses data specific to the thread.

A memory in accordance with an embodiment of the present invention includes a kernel thread context structure and a pointer memory maintained by a thread in the kernel thread context structure wherein the pointer memory includes a value set by the thread for referencing an application thread specific structure associated with the thread. A processor may be provided that includes a processor having a user mode and a protected kernel mode. The memory may be coupled to the processor for providing a user mode stack and a kernel mode stack. Program code may be executed in the processor to provide the kernel thread context structure and maintain the pointer memory within the kernel thread context structure for referencing an application thread specific structure.

In other embodiments of the present invention a program storage device is provided. The program storage device includes program instructions executable by a processing device to perform operations for providing an anchor pointer in an operating system context structure for improving the efficiency of accessing thread specific data. The operations include executing at least one thread on a processor maintaining a kernel thread context structure in memory having a pointer memory enabling a thread to access the pointer memory in the kernel thread context structure and setting a value within the pointer memory for referencing an application thread specific structure associated with the thread. A method for providing an anchor pointer in an operating system context structure for improving the efficiency of accessing thread specific data is also provided in another embodiment of the present invention.

These and various other advantages and features of novelty which characterize the invention are pointed out with particularity in the claims annexed hereto and form a part hereof. However for a better understanding of the invention its advantages and the objects obtained by its use reference should be made to the drawings which form a further part hereof and to accompanying descriptive matter in which there are illustrated and described specific examples of an apparatus in accordance with the invention.

In the following description of the embodiments reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration the specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized because structural changes may be made without departing from the scope of the present invention.

The present invention provides method apparatus and program storage device for providing an anchor pointer in an operating system context structure for improving the efficiency of accessing thread specific data. A kernel thread context structure is provided in memory. A thread accesses a pointer memory in the kernel thread context structure and sets a value within the pointer memory that addresses data specific to the thread. Thus the thread may access data that is specific to the thread.

The computer system and the allocation of system resources to the computer system are controlled by operating system . For the purpose of the present discussion it is assumed that operating system is resident within primary memory although those skilled in the art will appreciate that certain infrequently utilized segments of operating system may be swapped out to secondary memory by memory manager . Operating system includes kernel which comprises the lowest layer of operating system that interacts most directly with the computer system . Kernel dispatches kernel threads to processors for execution provides services to device drivers interfacing with hardware within computer system and implements system services memory management network access and the file system utilized by computer system . In addition to kernel primary memory also stores frequently utilized segments of application software . As is well known to those skilled in the art application software communicates with operating system through an Application Programming Interface API .

Computer system also includes bus interface through which multiple nodes can interface to system resources available within computer system . As will be appreciated by those skilled in the art computer system may also include additional hardware coupled to system bus that is not necessary for an understanding of the present invention and is accordingly omitted for simplicity.

Processes that run in kernel mode can directly access system data and hardware and are not restricted like processing running in user mode . Performance sensitive drivers and services run in kernel mode to interact with hardware more efficiently. All components for processes running in kernel mode are fully protected from applications running in user mode . Processes that run in user mode are effectively isolated from processes running in kernel mode and other processes running in user mode .

In a thread for a process running in user mode is characterized as having its own context including registers and memory stack . A user stack is a data structure that includes a series of memory locations and a pointer to the initial location. All processors provide instructions for placing and retrieving values to and from the stack . The user memory is a block of memory that is dedicated to the use of a current process running in user mode . A complete user state of a thread is maintained in user registers .

The kernel operates in its own protected address space and includes its own registers and kernel stack . The kernel maintains the integrity of its own data structures and that of other processes. The kernel stack includes information used by the kernel. Kernel memory is generally shared by all processes but is only accessible in kernel mode . Context switches from one task to another happen on the kernel stack of the current process.

Memory is provided for maintaining registers stacks and other data storage space. Within memory a kernel thread context structure is provided. Windows 2000 Windows XP and Linux use kernel level threads. With kernel level threads the kernel maintains context information for the process and the threads. Scheduling is done on a thread basis. A thread may readily access the kernel thread context structure . A pointer memory is provided within kernel thread context structure .

According to an embodiment of the present invention pointer memory is reserved inside the kernel thread context structure . Kernel thread context structure contains the values of the hardware registers the stacks and the thread s private storage areas. In practice application code cannot have a reserved register. Thus pointer memory is reserved in kernel thread specific structure so that an application can have an efficient way to reference the application thread specific structure ATSS in kernel thread context structure . The pointer memory allows the thread to save and retrieve the value stored in the pointer memory . Saving and retrieving of the pointer by a thread will be very efficient because kernel thread context structure is readily accessible within the operating system work area.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus . The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly to the system or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the system to become coupled to other data processing systems remote printers or storage devices through intervening private or public networks . Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

Accordingly the computer program comprise instructions which when read and executed by the system of causes the system to perform the steps necessary to execute the steps or elements of the present invention

The foregoing description of the embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not with this detailed description but rather by the claims appended hereto.

