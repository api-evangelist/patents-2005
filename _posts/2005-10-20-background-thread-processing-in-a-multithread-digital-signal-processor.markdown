---

title: Background thread processing in a multithread digital signal processor
abstract: Techniques for the design and use of a digital signal processor, including processing transmissions in a communications (e.g., CDMA) system. The disclosed method and system provide background thread processing in a multithread digital signal processor for backgrounding and other background operations. The method and system form a background thread interrupt as one of a plurality of interrupt types, the background thread interrupt initiates a low-priority background process using one of a plurality of processing threads of a multithread digital signal processor. The process includes storing the background thread interrupt in an interrupt register and a background processing mask for associating with a processing thread of the multithread digital signal processor, which associates with at least a subset of said plurality of processing threads. Upon sensing a cache miss in one of the processing threads during multithread processing, the interrupt register issues the background thread interrupt and the digital signal processor initiates background processing using one of the processing threads having an associated background processing mask.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07913255&OS=07913255&RS=07913255
owner: QUALCOMM Incorporated
number: 07913255
owner_city: San Diego
owner_country: US
publication_date: 20051020
---
The disclosed subject matter relates to data communications. More particularly this disclosure relates to a novel and improved background thread processing method and system for a multithread digital signal processor.

Increasingly electronic equipment and supporting software applications involve signal processing. Home theatre computer graphics medical imaging and telecommunications all rely on signal processing technology. Signal processing requires fast math in complex but repetitive algorithms. Many applications require computations in real time i.e. the signal is a continuous function of time which must be sampled and converted to digital for numerical processing. The processor must thus execute algorithms performing discrete computations on the samples as they arrive. The architecture of a digital signal processor DSP is optimized to handle such algorithms. The characteristics of a good signal processing engine include fast flexible arithmetic computation units unconstrained data flow to and from the computation units extended precision and dynamic range in the computation units dual address generators efficient program sequencing and ease of programming.

One promising application of DSP technology includes communications systems such as a code division multiple access CDMA system that supports voice and data communication between users over a satellite or terrestrial link. The use of CDMA techniques in a multiple access communication system is disclosed in U.S. Pat. No. 4 901 307 entitled SPREAD SPECTRUM MULTIPLE ACCESS COMMUNICATION SYSTEM USING SATELLITE OR TERRESTRIAL REPEATERS and U.S. Pat. No. 5 103 459 entitled SYSTEM AND METHOD FOR GENERATING WAVEFORMS IN A CDMA CELLULAR TELEHANDSET SYSTEM both assigned to the assignee of the claimed subject matter.

A CDMA system is typically designed to conform to one or more telecommunications and now streaming video standards. One such first generation standard is the TIA EIA IS 95 Terminal Base Station Compatibility Standard for Dual Mode Wideband Spread Spectrum Cellular System hereinafter referred to as the IS 95 standard. The IS 95 CDMA systems are able to transmit voice data and packet data. A newer generation standard that can more efficiently transmit packet data is offered by a consortium named 3Generation Partnership Project 3GPP and embodied in a set of documents including Document Nos. 3G TS 25.211 3G TS 25.212 3G TS 25.213 and 3G TS 25.214 which are readily available to the public. The 3GPP standard is hereinafter referred to as the W CDMA standard. There are also video compression standards such as MPEG 1 MPEG 2 MPEG 4 H.263 and WMV Windows Media Video as well as many others that such wireless handsets will increasingly employ.

For many of these devices a fully software based solution is highly desirable. Given that compression standards are always evolving and new standards are always emerging developers are looking toward DSPs to quickly implement these standards. The DSP however exhibits certain limitations especially ones relating to the characteristics of available memory.

Compression standards are not generally known for including mathematically complex algorithms so the major problems facing developers attempting to port video compression standards onto a telecommunications or other DSP platform involve the restrictive data flow limited bandwidth and excessive latency of memory.

One type of DSP that may provide significant processing capability uses multithreading of a number of signal processing threads associated with a single processor core. As these processors gain speed and power and instruction sets ideal for video processing applications complement them real time encoding of video sequences becomes easier. With a fast processor and much data to process the DSP s memory architecture may severely limit real time encoding and related operations. With limited fast internal memory and limited bandwidth to external memory a bottleneck often appears between the processor and the data.

Accordingly there is a need for a method and system of overcome memory latency in a DSP or similar signal processing environment.

Moreover a need exists for a method and system for operating a multithreaded DSP with reduced load latency for telecommunications and other applications.

Techniques for providing a background thread processing method and system for a multithread digital signal processor are disclosed which techniques improve both the operation of a digital signal processor and the efficient use of digital signal processor instructions for processing increasingly robust software applications for personal computers personal digital assistants wireless handsets and similar electronic devices as well as increasing the associated digital processor speed and service quality.

According to one aspect of the disclosed subject matter there is provided Techniques for the design and use of a digital signal processor including processing transmissions in a communications e.g. CDMA system. The disclosed method and system provide background thread processing in a multithread digital signal processor for backgrounding and other background operations. The method and system form a background thread interrupt as one of a plurality of interrupt types the background thread interrupt initiates a low priority background process using one of a plurality of processing threads of a multithread digital signal processor. The process includes storing the background thread interrupt in an interrupt register and a background processing mask for associating with a processing thread of the multithread digital signal processor which associates with at least a subset of said plurality of processing threads. Upon sensing an event such as a cache miss in one of the processing threads during multithread processing the interrupt register issues the background thread interrupt and the digital signal processor initiates background processing using one of the processing threads having an associated background processing mask. A computer usable medium having computer readable program code means embodied therein to perform background processing in a multithreaded digital signal processor.

These and other advantages of the disclosed subject matter as well as additional novel features will be apparent from the description provided herein. The intent of this summary is not to be a comprehensive description of the claimed subject matter but rather to provide a short overview of some of the subject matter s functionality. Other systems methods features and advantages here provided will become apparent to one with skill in the art upon examination of the following FIGURES and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the accompanying claims.

The disclosed subject matter for a shared background thread processing method and system for a multithread digital signal processor has application in a very wide variety of digital signal processing applications involving multi thread processing. One such application appears in telecommunications and in particular in wireless handsets that employ one or more digital signal processing circuits.

For the purpose of explaining how such a wireless handset may be used provides a simplified block diagram of a communications system that can implement the presented embodiments of the disclosed interrupt processing method and system. At a transmitter unit data is sent typically in blocks from a data source to a transmit TX data processor that formats codes and processes the data to generate one or more analog signals. The analog signals are then provided to a transmitter TMTR that modulates filters amplifies and up converts the baseband signals to generate a modulated signal. The modulated signal is then transmitted via an antenna to one or more receiver units.

At a receiver unit the transmitted signal is received by an antenna and provided to a receiver RCVR . Within receiver the received signal is amplified filtered down converted demodulated and digitized to generate in phase I and Q samples. The samples are then decoded and processed by a receive RX data processor to recover the transmitted data. The decoding and processing at receiver unit are performed in a manner complementary to the coding and processing performed at transmitter unit . The recovered data is then provided to a data sink .

The signal processing described above supports transmissions of voice video packet data messaging and other types of communication in one direction. A bi directional communications system supports two way data transmission. However the signal processing for the other direction is not shown in for simplicity. Communications system can be a code division multiple access CDMA system a time division multiple access TDMA communications system e.g. a GSM system a frequency division multiple access FDMA communications system or other multiple access communications system that supports voice and data communication between users over a terrestrial link. In a specific embodiment communications system is a CDMA system that conforms to the W CDMA standard.

Output from execution data paths goes to register file write circuit also configured to accommodate individual threads T T for returning the results from the operations of DSP . Thus the data path from circuit and before to register file write circuit being portioned according to the various threads forms a processing pipeline .

The present embodiment may employ a hybrid of a heterogeneous element processor HEP system using a single microprocessor with up to six threads T T. Processor pipeline has six stages matching the minimum number of processor cycles necessary to fetch a data item from circuit to registers and . DSP concurrently executes instructions of different threads T T within a processor pipeline . That is DSP provides six independent program counters an internal tagging mechanism to distinguish instructions of threads T T within processor pipeline and a mechanism that triggers a thread switch. Thread switch overhead varies from zero to only a few cycles.

DSP therefore provides a general purpose digital signal processor designed for high performance and low power across a wide variety of signal image and video processing applications. provides a brief overview of the DSP architecture including some aspects of the associated instruction set architecture for one manifestation of the disclosed subject matter. Implementations of the DSP architecture support interleaved multithreading IMT . In this execution model the hardware supports concurrent execution of multiple hardware threads T T by interleaving instructions from different threads in the pipeline. This feature allows DSP to include an aggressive clock frequency while still maintaining high core and memory utilization. IMT provides high throughput without the need for expensive compensation mechanisms such as out of order execution extensive forwarding networks and so on. Moreover the DSP may include variations of IMT such as those variations and novel approaches disclosed in the commonly assigned U.S. Patent Applications by M. Ahmed et al and entitled Variable Interleaved Multithreaded Processor Method and System and Method and System for Variable Thread Allocation and Switching in a Multithreaded Processor. 

Event handling register includes interrupt mask IMASK register which provides masks data to process event register . Process event register also receives internal exception requests including TLB miss error and trap instruction requests. From global control registers communications occur with general instructions registers R R and supervisor control register .

Therefore interrupt processing with the disclosed subject matter includes three types of external interrupts which include the soft reset interrupt general maskable interrupts and and the non maskable interrupt . There are 16 maskable general interrupts that are shared between all the threads. When one of the 16 general interrupts is raised the corresponding bit in the global IPEND register is set indicating that this interrupt is pending. Threads determine if they are able to take an interrupt by logical ANDing the global IPEND register with the local IMASK register.

The process of the disclosed subject matter may be initiated by a trigger for background interrupts and determination of which interrupts should be raised. For this purpose a configuration register which sets up the feature may be established. The configuration register may be a single register for example in which the low 16 bits indicate which interrupts should be raised. Then the next 6 bits may be enable bits for the 6 hardware threads T T. Bit therefore may indicate whether thread T should raise background interrupts bit may indicate whether thread Ti should raise background interrupts and continuing bit may indicate whether thread T should raise background interrupts. Of course different initiation schemes may be used according to the needs of other design considerations. All such variations are well within the contemplation of the disclosed subject matter.

In operation if a thread T T a has interrupts enabled IE 1 and b is not in an exception handler EX 0 and c the result of IPEND IMASK is non zero then an interrupt can be taken by that thread. The thread is then to be qualified to take the interrupt. In the case that more than one interrupt is pending the priority is interrupt highest priority to interrupt lowest priority . When a global interrupt comes in and is marked in the IPEND register any of the six hardware threads may potentially service the interrupt. Of the set of hardware threads that are qualified for the interrupt only one in the set will take the interrupt.

An important aspect of the disclosed subject matter benefits from the randomness of the qualified threads and maskable interrupts. That is it cannot be determined which of the qualified threads will service the interrupt because the process and the arrival of any given type of interrupt is random. The hardware will choose a thread from the qualified set that thread will be interrupted and the interrupt will then be cleared from IPEND register so that no further threads will service that interrupt.

The software may direct particular interrupts to particular hardware threads with appropriate IMASK register programming. For example if only hardware thread T T has the IMASK bit for interrupt set then only hardware thread T T may receive that interrupt. When an interrupt is accepted by a thread the machine will first clear the appropriate bit in IPEND register . Interrupts will then be disabled for the chosen thread the exception bit will be set to indicate the thread is now in supervisor mode the cause field in SSR will be filled with the interrupt number and the machine will jump to the appropriate interrupt service routine.

One embodiment of shows a mask register format for use with the disclosed subject matter which includes IMASK bits through for containing the particular mask. Bits through may be reserved for the present embodiment while permitting the establishment. Mask register therefore contains 16 bit read write field for the mask allowing software to individually mask off each of the 16 external interrupts from interrupt controller . If a particular bit in the mask field is set then that corresponding interrupt of the 16 external interrupts is enabled and will be accepted by this thread. Alternatively if the bit is clear then that corresponding interrupt will not be accepted.

In one embodiment of the claimed subject matter a background processing interrupt e.g. a background prefetch processing interrupt may be retrieved and provided to interrupt controller as part of the memory management process. That is during the background processing prefetch instructions may be executed on behalf of the foreground process. Accordingly provides a flowchart for memory management process illustrating the various memory access steps in the use of a translation lookaside buffer TLB for making available a background processing interrupt and performing certain actions of the disclosed background processing method and system. Memory management process provides for address translation and protection using a flat virtual address space that is translated to physical addresses via a translation lookaside buffer TLB the TLB supports both instruction and data accesses. User mode memory accesses are checked for proper access permissions. The TLB is software managed and may support many different operating systems and multi threading models. Address spaces for the six threads T T in DSP share a common physical address space. Each thread contains a private 6 bit ID the Address Space Identifier or ASID that is pre pended to a 32 bit virtual address to form a 38 bit tag extended virtual address. Through MMU programming this virtual address can be mapped to any physical address.

In one embodiment the physical address space is a 4 Gbytes 32 bit space 16 Mbytes of which are reserved for use by DSP . The location of this memory region is programmable. This region contains memory mapped registers that allow for programming specific blocks which include the interrupt controller debugger and performance monitor and timers. When the MMU is enabled each address produced by a load or store instruction is referred to as a virtual address. This address is compared in parallel to all programmed entries in the TLB. A match happens when the virtual page number VPN of the load or store address matches an entry in the TLB and either the global bit is set for that entry or the ASID for that entry matches the ASID of the current thread.

In flowchart upon receiving an ASID virtual address at step step initiates a TLB search to determine the present of a TLB match. In the case a TLB match occurs the VPN from the load or store instruction is replaced by the physical page number from the matching entry in the TLB. The page offset portion does not pass through the TLB. If no match occurs then memory management process issues a TLB miss exception at step . That is if there is no match condition a precise TLB miss exception is taken. This enables the software to lookup the missing translation from a page table in memory and insert the missing entry in the TLB. When returning from the TLB miss exception the instruction or packet that caused the exception is then executed again this time with the correct translation available.

If a match does occur processing continues to G bit or ASID match step at which such test occurs. The TLB is a shared resource between all DSP threads. There are a set of global control registers for manipulating the TLB and a set of instructions that threads can use to query and modify the TLB. When the memory management process enables the MMU and the data cache is also enabled then the C bits in the TLB define how load store operations should behave. There are different types of memories that DSP can access such as cache tightly coupled memory TCM I O etc. Each type of memory has defined behavior and possibly programming rules associated with accessing it. The supported memory types and their behaviors are discussed in this section.

Thus if no G bit or ASID match occurs then at step a TLB miss exception issues. Otherwise processing continues to step which tests whether the user mode is 1 and there are no exceptions i.e. EX 0 . If not then at step a test of whether a cacheable instruction exits. If so then at step a cache access occurs. Otherwise processing continues to step at which a test of whether necessary fetch load and writer permissions exist. If so then processing returns to step to determine whether the instruction is cacheable. Otherwise processing continues to step whereupon memory management process issues a privilege violation exception.

DSP supports tightly coupled memory TCM for data accesses. To indicate that a load or store is intended for TCM the cache attribute bits in the MMU entry may be set to TCM. Program fetches and load store operations which are allowed to operate from cache memory are referred to as cached accesses. Cacheable instruction fetches are handled by an instruction cache Icache . There are six 4 Kbyte instruction caches in one embodiment of DSP that are private to each thread. Data loads and stores are held in a shared 32 Kbyte data cache. Thus at step memory management process determines that a cacheable instruction does not exist then processing goes to step which tests whether TCM access may occur. If so processing goes to step for accessing TCM. Otherwise process flow goes to step whereupon memory management process bypasses cache memory to access external memory.

If a cache miss or other predetermined event of similar type occurs the present embodiment provides for background processing using an idle thread. Such process may preferably accomplish a prefetch operation for example to reduce memory latency. Therefore provides background processing flow diagram for illustrating certain novel functions of the disclosed subject matter for background processing using one of threads T T in response to background processing interrupt type. Flow diagram begins as step at which point background processing senses for a cache miss or other predetermined event for which background processing would be advantageous. At query if a cache miss occurs processing continues to step at which a background interrupt is stored in IPEND register . Also a background processing mask may be stored in IMASK Register . Interrupt controller may provide a background processing interrupt as one of the 16 general interrupt types to IPEND register of general control register . At step IMASK register may store the background processing interrupt for associating with the various threads T T of DSP . Thus with IPEND containing the background processing register and IMASK register potentially storing a corresponding background processing mask flow diagram first determines whether an idle thread exists at query . If so then process determines whether thread interrupt processing is enabled for the particular idle thread at query . Then at query the process determines that the particular thread is not operating as an exception handler.

At query after taking the logical AND of IPEND register and IMASK register a test of whether the result is non zero occurs thereby determining a match between the background processing register of IPEND register and the background processing mask of IMASK register exists. If a non zero result occurs then flow continues to step at which the particular thread processes an interrupt corresponding to the particular mask. If the tests of any of queries or fails then processing goes to step at which process flow determines that the thread cannot process the interrupt s being examined. Otherwise as stated background thread processing may occur. This may continue until as query indicates until a higher priority interrupt for which a processing thread T T may be useful arises. If such an interrupt arises then process flow goes to step at which foreground processing using the particular thread may resume.

Background processing flow diagram therefore provides a method and system for operation in association with DSP for processing interrupts that includes a background thread interrupt for operation as one of a plurality of interrupt types. The background thread interrupt initiates a background process using one of a plurality of processing threads of a multithread DSP . The IPEND interrupt register may store the background thread interrupt. A background processing mask associates with one of processing threads T T of DSP . IMASK register associates the background processing mask with at least a subset of the plurality of processing threads. Event sensing instructions sense the presence of a predetermined event in one of the plurality of processing threads during multithread processing of DSP . Interrupt issuing instructions associate with IPEND register for issuing the background thread interrupt in response to the predetermined event.

Background processing circuitry initiates background processing using one of the subset of the plurality of processing threads having an associated background process mask. Thread interrupt forming instructions form the background thread interrupt as a data element of a translation lookaside buffer associated with DSP . The thread interrupt forming instructions change the data element of the translation lookaside buffer according to varying operations on the DSP . Thread selection circuitry and instructions select the idle processing threads as the processing threads for background processing.

The processing features and functions described herein can be implemented in various manners. For example not only may DSP perform the above described operations but also the present embodiments may be implemented in an application specific integrated circuit ASIC a microcontroller a microprocessor or other electronic circuits designed to perform the functions described herein. The foregoing description of the preferred embodiments therefore is provided to enable any person skilled in the art to make or use the claimed subject matter. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without the use of the innovative faculty. Thus the claimed subject matter is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

According to further embodiments a computer usable medium is provided. The computer usable medium comprises a non transitory storage medium having computer readable program code means embodied therein. The program code means is operable when executed by a computer to cause the computer to execute instructions or otherwise perform methods in accordance with the present disclosure such as background processing in a multithreaded digital signal processor.

