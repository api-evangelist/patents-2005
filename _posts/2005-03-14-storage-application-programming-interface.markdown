---

title: Storage application programming interface
abstract: Systems, methods, apparatus, data structures, and computer-readable media are described which provide techniques for managing data storage. In an implementation, a method includes examining a role map to determine which of a plurality of roles are applicable to a request to interact with at least one of a plurality of items. The request is received via an application programming interface (API) that is available over a network and one or more of the items reference a respective item of data. Access to the at least one item is permitted based on a role definition which describes differing access rights available for the item based on which of the roles is applicable to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546297&OS=07546297&RS=07546297
owner: Microsoft Corporation
number: 07546297
owner_city: Redmond
owner_country: US
publication_date: 20050314
---
The present invention generally relates to data storage and more particularly relates to storage systems.

Data storage has become an integral part of everyday life. For example a user may obtain a variety of data from over a network such as songs email web logs i.e. blogs movies web pages and so on. Additionally the user may share this variety of data with other users such as by providing a web page that is accessible by other users of the Internet communicating the data during an instant messaging session attaching the data to an email and so forth. Further the types of data which are available to the user are ever increasing from photos and textual descriptions to downloadable movies and songs.

To provide this data to a plurality of such users a service provider may provide online data storage. For example a user may purchase a portion of the available online data storage from the service provider to store emails and so on. Accordingly the service provider may provide a multitude of such portions to a multitude of users. Therefore the service provider may be faced with a daunting task of managing a significant amount of data storage for the multitude of users. Further the service provider may be faced with managing the different portions of the data storage for use by different respective clients.

Systems methods apparatus data structures and computer readable media are described which provide techniques for managing data storage. In an implementation a method includes examining a role map to determine which of a plurality of roles are applicable to a request to interact with at least one of a plurality of items. The request is received via an application programming interface that is available over a network. The one or more of the items reference a respective item of data. Access to the at least one item is permitted based on a role definition which describes differing access rights available for the item based on which of the roles is applicable to the request.

In another implementation a method includes receiving a plurality of requests at an application programming interface to access a respective one or more of a plurality of items. Each of the requests is sent over a network from a respective one of a plurality of clients one or more said items reference at least one of a plurality of data and at least one of the items has a defined relationship with another one of the items. One or more of the items have one or more role definitions which describe respective access rights that are defined for one or more roles. Access to the one or more items by the plurality of clients is managed based on which of the roles is applicable to a respective client.

In a further implementation a method includes forming a request by a client for communication over a network to a storage application programming interface. The request includes a unique client identifier and identifies one or more of a plurality of items. A response to the request is received that is formed to include data referenced by the identified items which is accessible to the client based on which of a plurality of roles defined for the identified items is applicable to the client and a role definition which defines differing access rights to the identified items based on respective roles.

The same reference numbers are utilized in instances in the discussion to reference like structures and components.

A storage application programming interface is described. In an implementation a globally accessible object storage service is described that allows applications to create and persist objects natively and provides the ability to re use these objects between various applications to enable different applications to share the objects. For example a digital photograph may be stored in a storage device and shared by a web page and a web log i.e. blog such that only a single instance of the digital photograph is stored thereby conserving memory resources of a provider of the web page and the web log as well as allowing the owner to re use the same photograph in multiple places without having to upload it for every place that it is needed.

In an implementation a fundamental object is created which is referred to as an item . The item may include basic properties which are used by the storage service to manage the item such as an identifier name type and role definition. Role definition may be used to specify particular attributes of the item that a particular role may access particular item associated methods a particular role may call and so on. For example one role may be defined for an administrator and another role may be defined for a guest . A role definition for the item may be configured to describe different access rights for the administrator and the guest. For instance the role definition may specify that the administrator may read and write a name attribute and may call a delete method of the item but the guest may only read the name attribute and is prevented from writing to the name attribute and from calling the delete method. Thus item access may be specified on an individual item basis and even for different methods and attributes for the item itself further discussion of which may be found in relation to . In the following discussion an exemplary environment is first described which is operable to employ the storage system. Exemplary procedures are then described which may be implemented in the exemplary environment as well as in other environments.

The clients are communicatively coupled to a plurality of web spaces where m can be any integer from one to M over a network . The network may assume a wide variety of configurations. For example the network may include an Internet a wide area network WAN a local area network LAN a wireless network a public telephone network an intranet and so on. Further although a single network is shown the network may be configured to include multiple networks.

The plurality of web spaces are representative of a plurality of web sites that the client may access from over the network . For example one or more of the web spaces may be a news web site which provides news web pages a photo viewing site a music download site an email provider an instant messaging service and so on. Data provided by the web space to the client is obtained from the storage service tier .

The storage service tier is illustrated as having a plurality of front ends where o can be any integer from one to O which are accessible to the web space via a network . The network may be the same as or different from the network which is used to communicatively couple the client tier with the web tier . The storage service tier may also be accessed directly by the client without interacting with the web tier which is illustrated in by a curved and dashed arrow from the client to the storage service tier . The front end includes a storage service module which is executable to manage a plurality of data where p can be any integer from one to P which is stored in a data store . The data may be configured in a variety of ways such as web pages photos songs email documents files and so on.

The storage service module is executable to manage the data through use of a plurality of items . . . . . . Q which are illustrated as stored in an object store . The items Q are representative of fundamental objects having properties which may be utilized to manage the data . For example items may each be configured as a container which both include a particular item of data. A container is an object that can include other objects such as folders lists and so on. Item Q is illustrated as a leaf which may be contained with the containers . Item Q in this instance references a particular item of data which is illustrated in through use of a dashed line from item Q to data .

The plurality of items Q in the illustrated implementation references the data such that a particular item of data can be shared by two or more items. This is illustrated in through dashed arrows which point from item to item Q and from item to item Q . Thus a single instance of the data referenced by item Q may be shared such as included in both a web page and a web log. The object store may also include data. For example the object store may include data pertaining to the referenced data such as list entry data which describes a plurality of the data may contain metadata describing referenced data and so on further discussion of which may be found in relation to .

The object store is also illustrated as including a plurality of relationships where r can be any integer from one to R . Relationships are data structures which are used to indicate relationships between the plurality of items Q . For example one of the relationships may indicate that leaf is to be included in container and another one of the relationships may indicate that leaf is also included in container . Thus the relationships may be defined between the items Q to produce hierarchies which may give applications an intuitive technique to store and retrieve data referenced by the items Q . The relationships may also include other properties which aid the storage service module in managing the data further discussion of which may be found in relation to .

The storage service module is illustrated as providing a storage API which exposes the plurality of items Q and relationships for programmatic access over the network . For example the web space may call methods supported by the items Q to interact with the data to supply the data to the client . In another example the client may interact directly with the storage API which is illustrated in through use of a double headed dashed arrow between the client and the storage API . For instance the client may be configured as a instant messaging module that when executed communicates directly with the storage API . A variety of other instances are also contemplated.

Generally any of the functions described herein can be implemented using software firmware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module functionality and logic as used herein generally represent software firmware or a combination of software and firmware. In the case of a software implementation the module functionality or logic represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices further description of which may be found in relation to . The features of the storage techniques described below are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

Processors are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions. Alternatively the mechanisms of or for processors and thus of or for a computing device may include but are not limited to quantum computing optical computing mechanical computing e.g. using nanotechnology and so forth. Additionally although a single memory is shown respectively for the clients web servers and front end servers a wide variety of types and combinations of memory may be employed such as random access memory RAM hard disk memory removable medium memory and so forth.

The client is illustrated as executing a client module on the processor which is also storable in memory . The client module is executable to interact with the web server over the network which is illustrated by a dashed line from the client module to the web server . The client module is also executable to interact directly with the storage API of the storage service module which is illustrated by a dashed line from the client module to the storage API .

The web server is illustrated as executing a web space module hereinafter web module on the processor which is also storable in memory . The web module is executable to receive requests from the client module for data and retrieve the data via the storage API . For example the client module may request a web page from the web module . The web module may then be executed to obtain the web page from the plurality of data via the storage API and communicate the obtained web page back to the client . Thus in this example the client is not aware that the web page was obtained via the storage API .

The plurality of items is illustrated as having a plurality of properties that may be utilized to manage the plurality of data by the storage service module . Item for example is illustrated as having a resource ID an alias an item type role definition and other properties.

The storage service module provides access to the items via two naming schemes a resource ID and an alias . The resource ID may be configured as an encrypted string that represents an internal storage ID for the item . The alias is a name created by a unique naming service of the storage service module for the item . In an implementation rather than creating two sets of APIs for manipulating items in the object store the storage API will accept an argument known as an object handle . An object handle is a data structure that can contain either the resource ID or the alias . In an implementation if both are present the storage service module will return an error.

The resource ID and or the alias may be utilized in a variety of ways. The storage API for instance will return the resource ID in response to a create call to the storage API . The object handle may also support an optional field referred to as relationship name . The relationship name contains a name of the relationship to an item that is a child of the object e.g. item or relationship referenced by the alias or the resource ID . Thus the relationship name field may be utilized to indicate how a particular item of data is being accessed. This may be utilized to determine different permissions that may be utilized to provide access further discussion of which may be found beginning in relation to .

The item type identifies the type of the item . For example as previously described the item may be configured as a container or a leaf. The item may also be configured in a variety of other ways which are configured to address a particular type of data being stored. For example the item type may be configured to address particular properties for a photo and therefore include attributes and methods configured to address the properties of a photo. Additional types may also be specified such as songs documents and so on.

Further the storage service module may provide a plurality of tools where t can be any integer from one to T for creation of different types of items by a user. For example the tools may be executed to provide a user interface UI for generating a new storage object schema and code used to access those objects based on an XML definition. Thus the plurality of tools may be utilized by a user to create a reusable type of item for particular types of data further discussion of which may be found in relation to .

The role definition specifies conditional access rights for particular roles in relation to the item . For example the item may provide access to a first set of methods and attributes to a first role which are different than access provided to another role such as administrator and guest . Thus the role definition may be utilized to restrict item access with different levels of granularity such as to the item itself as well as to different attributes and methods of the item . Further discussion of role definition may be found beginning in relation to . The item may also support a wide variety of other properties.

The relationship may also support a variety of properties. For example the relationship as previously described is a data structure which is used to indicate how the plurality of items are related one to another. Therefore a particular relationship may include a references which reference particular items to which the relationship pertains. For instance the relationship may indicate that a first one of the plurality of items is a child of another one of the plurality of items . Relationships may also serve a variety of other purposes such as defining a containment hierarchy specify lifetime control define permissions serve as a pointer to an item via a parent item relationship include relationship metadata such as a sequence number to enable ordering of photos within a folder using the sequence number and so on. Thus the plurality of relationships may provide a flexible technique to produce hierarchies that enable the items to reflect intuitive ways to store and retrieve data further discussion of which may be found in relation to the following figure.

There may be instances for example when the space item is referenced via an owner s unique identifier. This may be accomplished by referencing the space item in the following manner. An application e.g. client calling the storage API may specify the unique identifier of the owner of a namespace in the alias field e.g. alias of of the object handle class of the space item . In addition the alias namespace field may contain a string e.g. MyStuff and a relationship name of the object handle class may contain a literal string e.g. MySpace . The resource ID e.g. resource ID of for the object handle may be set to NULL. An example of such code which complies with these examples is shown as follows 

As shown in the hierarchy of the relationships may be defined between the items to produce the hierarchy . Additionally multiple relationships may be defined to share an item . For example a photo album and a private access folder may each have respective relationships which involve a photo . Therefore a single instance of the photo may be utilized in different implementations thereby conserving memory space utilized by the hierarchy . Additionally the different relationships may specify different properties for accessing the photo . For example relationship may specify a name e.g. California Vacation for the photo which is different than a name e.g. Spring Break utilized by the relationship . A variety of other instances are also contemplated.

The hierarchy may also support dynamic object manipulation such that changes may be made to an order and structure of the hierarchy through adding removing items and or relationships. For example a delete item operation may be performed in order to delete the photo album item. Therefore the storage service module deletes any child items e.g. photo that are referenced solely by the photo album as well as any relationships which involve the photo album a result of which is shown in the following figure.

Returning again to a delete relationship operation may also be performed to delete a relationship between items. For example a first delete relationship operation received via the storage API may specify that relationship is to be deleted between the blog item and a message . A second delete relationship operation received via the storage API may specify that relationship is to be deleted between the photo album and the photo . A result of these operations is shown in .

The second delete relationship operation specified that relationship is to be deleted from between the photo album and the photo . Therefore because of the deleted relationship the photo album no longer includes the photo . However the photo is not deleted because a relationship still exists between the photo and the private access folder. A variety of other instances are also contemplated. For instance similar techniques may be utilized to create new relationships between items create new items and so on. Thus the storage service module through the storage API may enforce manipulation of the items and relationships to form a hierarchy that may share and reuse data.

Role definitions may apply to a variety of distinct sets of operations such as item attribute access e.g. Read Write method access and sub item creation. For instance attributes can also be specified to have separate access rights than other attributes for the same item a role definition may be configured to restrict access to specific methods to specific roles a role definition may be configured to restrict sub item creation to certain roles and so on.

To locate a particular role that is to be utilized for a particular one of the plurality of clients a plurality of role maps may be utilized where x can be any integer from one to X . A role map for instance may be formed as a combination of an identity or group of identities e.g. unique client ID roles associated with that identity and the object to which the roles apply such as the item and or the relationship . The role definition specifies a particular role e.g. item role definition relationship role definition and access rights of that role. For example an administrator may have conditional access rights to perform certain operations on the item that are not granted to a guest.

Although the role maps are illustrated as stored in a permission record store e.g. such as an address book clearinghouse one or more role maps may be assigned by the storage service module . For example the storage service module may assign owner and creator roles for a particular item and or relationship . For instance the owner of a component may be one of the clients who is responsible for a particular portion of the data store such as the purchase of online storage for providing a web page. Thus the owner has ultimate lifetime control of an object in the space. A creator is a client who created the object such as the item or the relationship . Thus the creator is not necessarily the owner since a client may contribute to an item that is owned by another client. For example a first client may own a blog but another client may post a comment to the blog which would then be a creator of the comment but is not an owner of the blog.

The storage service module may also enforce multiple roles for a client . For example the client may be both an owner and a creator of the item . In such an instance the storage service module may utilize the role that will grant the most privileges i.e. access to additional methods and or attributes. In another implementation the storage service module may utilize the role that will grant the least amount of privileges. In a further implementation the storage service module ORs the privileges granted by the different roles. A variety of other implementations are also contemplated.

Roles may be assigned to clients in a variety of ways. For example the environment is illustrated as including an authentication system . The authentication system includes an authentication module which is executable to verify that the clients are who they say they are by utilizing a plurality of authentication data where y can be any integer from one to Y which is stored in a database . For instance the client may supply a client name and password. The authentication module may then verify the client using a stored client name and password from the authentication data . If valid a unique client ID is provided for identifying the client by the storage service module . For instance the unique client ID may be compared with the unique client ID of the role map to determine which role is applicable to the client for accessing a particular object . This role may therefore be utilized by the item role definition and or the relationship role definition to determine which methods and attributes may be accessed e.g. read or written by the client . Thus the authentication system may verify the clients identity the permission record store may be utilized to determine which role is applicable to the client and the role may be utilized in conjunction with role definitions e.g. item role definition and or relationship role definition to permit or deny access to methods and attributes by the storage service module .

In an implementation role definitions are assigned to leaf items by their parent containers when the leaf item is created. A reference to the role definition inherited from the parent item is stored in a record in the item s ACLRegion class along with the applicable namespace ID and service ID which are used to obtain an applicable one of the plurality of role maps . The following operations may affect the ACLRegion class contents 

The hierarchy of shows an exemplary affiliation of role definitions of a plurality of items . The hierarchy is configured such that items may inherit role definitions from each other. For example a photo two item has inherited role definitions from both the folder item and the message container item. The role definition for photo two is defined in the message container item role definition and not in the message item. The role definition name for photo one item and photo two item is null. For example leaf items may be configured such that a role definition name is assigned only if the leaf item had a particular role definition assigned. In another implementation multiple service IDs are associated with a single item for example if the message container is by another service in the permission record store of .

The following discussion describes storage techniques that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware firmware or software or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the shown for performing the operations by the respective blocks. In portions following discussion reference will also be made to .

The storage service module determines if the client is the owner of the item on block . For example the storage service module may compare a client ID of the client with an owner unique client ID of the item. If a is found the client is the owner of the item yes from decision block e client is granted appropriate access based on the role and a role definition of the item block . For example the role mapping may define which methods and or attributes may be called modified read written and so on by the owner of the item.

If a match is not found the client is not the owner of the item no from decision block . A determination is made as to whether the client is the creator of the item decision block . For example the storage service module may compare a unique client ID of the client with a creator unique client ID of the item. If a match is found the client is the creator of the item yes from decision block and the client is granted appropriate access based on the role and a role definition of the item block . Like before the role mapping may define which methods and or attributes may be called modified read written and so on by the creator of the item.

If a match is not found the client is not the creator of the item no from decision block . Therefore a role mapping is queried to determine which roles are applicable to the client block and the client is granted appropriate access based on the role and the role definition of the item block . In this exemplary implementation the storage service module first determines whether the client complies with one of the roles which are defined by the storage service module which is this instance are creator and owner . If the client does not comply with a role defined by the storage service module the storage service module queries a role map for the item from a permission record store which defines which role may be applicable to the client. A variety of other implementations are also contemplated. For example a role map may specify each of the roles a storage service module may specify each of the roles and so on.

The two tables shown below provide examples of different roles and abbreviations of the respective roles as used in the following implementations. The first table portrays roles assigned by the permission record store of . The second table portrays roles that may be assigned by the storage service module itself.

Access to items may be provided to use different behaviors based on a specific instance of an item. The definition of the behavior for these attributes is defined in an instance specific role definition . For example instance specific role definitions may be defined by specifying owner creator or user roles for an item. User in this instance a shorthand way of specifying any permission record store role that may have the specified permissions.

In an implementation items are not required to have instance specific role definitions. When an instance specific role definitions is defined for an item it may overlap with a component e.g. item or relationship defined role definition. In such a case the permissions granted to the client may be based on ANDing the rights granted to the calling client. For instance a name field of an item may have the following role definition and instance role definition 

As previously described however items may have multiple role mappings and multiple roles. For example in a scenario in which an item is referenced by two containers a possibility exists that the item may have two role maps and two role definitions associated with the item. In some instance in order for the proper access to be granted the correct role map applied should correspond with a particular role definition. Therefore a determination is made as to which role and role mapping are applicable to a client that provided a request via the storage API.

A request is received for instance from a client at a storage API which requests access to an item referenced by more than one container block . For instance photo two of may be referenced by folder and message container . Therefore a determination is made as to whether multiple role definitions and or roles apply to the client decision block .

If multiple role definitions and or role maps correspond to the item yes from decision block a determination is made as to which role definition and or role map is applicable to the client block which originated the request. The storage service module for instance may ensure this behavior by storing a role map role definition combination in an ACLRegion class of the item. Therefore to determine access for an item that has multiple references the storage service module may examine the ACLRegion information inherited from each parent item and apply logic to each combination independently and then or the results. Thus the storage service module may determine access rights for an item that has multiple references and grant the client appropriate access based on the role map and the role definition of the item block .

A role map for instance for the particular item may be changed block . In another instance a role definition for an item may be changed block . For example role map changes may be carried out via permission record store APIs. Role definitions are defined in the objects e.g. item and or logically as a part of the relationship themselves and may be modified via update methods. For example update methods may be utilized to update any non read only attribute and may utilize a similar mechanism. An example of each is provided below.

In the example above Fred and Sally are the only users who have permission to change the names of the item or call the respective update and delete methods. Each of the other clients is given permission to read the various attributes and call the respective get methods.

Access to Fred s Space may be modified in a variety of ways such as by adding an additional client to either the administrator role or the guest role using an AddRoleMembership method of the permission record store . A new client referred to as Ted may be added to the guest role giving that client guest privileges when interacting with the items in Fred s Space which may be represented as follows 

Access to the space may also be modified by making changes to the role definition block . For example a client may determine which of the available role definitions is desired for application to the item and change it by updating a RoleDefinitionName attribute on the item s role definition attribute. The client may then call the update method for that item.

Continuing with the previous example assume that Fred desires to restrict access to each of the items in Fred s Space such that Fred is the only client that can delete objects e.g. items and or relationships from this Space. In this case Fred may select a role definition for the particular methods which specifies that only the owner i.e. Fred may update and delete items in Fred s Space. For example Fred may select a preexisting role definition titled OwnerOnlyUpdater that specifies the following roles 

The storage service module then receives one or more communications via the storage API which specify one or more attributes of the created item block . For example attributes of an item may have a variety of access restrictions such as read only read write and create only . These restrictions may hold true for each client that has permission to modify an item. Read only attributes may be viewed but can not be directly manipulated via create or update methods. Read write attributes may be updated if the client has appropriate permissions i.e. has an appropriate role. Create only attributes may be viewed and may be directly manipulated via a create method. In an implementation after an item is created this attribute may not be modified. Although separate blocks e.g. blocks are described item creation and setting may be performed via one API call without departing from the spirit and scope thereof.

In some instances a client may not wish to initialize all fields of an item when creating the new item. Therefore the storage service module may provide a mechanism that allows the client to specify that only certain fields should be written when the create method is called via the storage API . For example the mechanism may be configured to allow the client to specify that only certain fields are written. This may be achieved by providing an additional Boolean field for each value type in an item. This field may share the same name as the value type to which it corresponds with the addition of the word specified . For example for a message item a MessageCountSpecified field may be supplied in addition to a MessageCount field. These Boolean fields may therefore be initialized to indicate whether a valid value for the corresponding field is to be sent or retrieved from the object store .

When an item is retrieved from the storage service module via the get methods of the storage aPI for example the caller i.e. the client specifies an ItemAttibute class corresponding to the item type. The ItemAttribute class contains a collection of Boolean values that correspond to each field in the item. The Booleans in this class may be used the same way as the specified Boolean fields as previously described. For instance a caller of the get API specifies which attributes are wanted from the method by setting the value for that attribute to true . Therefore the storage service module may return those fields that are specified in this manner.

In another implementation storage classes contain an attributes array as part of the class. This array may be used in the same way as an ItemAttributes array passed via the get method is used. Thus the caller may use fields that have a corresponding attribute item set to true . This is different from the previous described implementation discussed above in that instead of associating an attributes class with every item there may be a specified Boolean field created for every value type field in the item. Therefore instead of checking the specific field in the attributes class the caller may check the specified field to determine if the field is valid. A variety of other implementations are also contemplated.

As previously stated clients can add client role mappings via an AddRoleMembers method of the permission record store . The role map associates one or more identities e.g. unique client ID with roles e.g. Administrator . For example the permission record store may support a variety of default roles such as administrator member guest banned assistant administrator contributor and so on.

An item may be configured as a personal space such as Fred s Space as previously described and the space items of respectively. A personal space may be registered in the permission record store and shared via a ShareItem API. The ShareItem API accepts the resource ID for the item being shared and the handle to the permission record store where the role maps for the shared item are defined.

A space may be created and shared as follows. A client calls a storage CreateSpace API block . A resource ID is returned to the client upon successful creation block . The client also calls a permission record store API block which returns a handle for an address book of the client block .

The client then calls a ShareItem API with the address book handle and the resource ID for the space block . ShareItem calls AddService API with a handle type set equal to application handle type for the item being shared block . Additionally AddService automatically adds the client as an administrator for the created service block . ShareItem saves the Address book handle and service ID in ACLRegion structure for the space item block .

The storage service module may be configured such that no explicit call is required to share a subcomponent of a space. For example when a subcomponent e.g. a leaf item is created the default behavior may be set to have the same role map as the parent item. Additionally the storage service module may provide a user with the ability to set a role map for the object block . For instance a dialog box may be output which enables the client to select objects and specify a mapping. This dialog may also provide the ability to specify role definitions.

Once the client has selected the role mapping of the storage object and the role map the client may call ShareItem API with the address book handle set equal to a namespace handle for the parent space object e.g. the namespace hand may be determined from ACLRegion structure of space item and the resource ID block . ShareItem then calls AddService with a handle type set equal to the applicable handle type for the item being shared block . ShareItem then saves the address book handle and the service ID in ACLRegion structure for the space item block . The client may then call AddRoleMembers API of the permission object store to specify membership role and service ID of the item block .

The storage API for instance may receive one or more inputs which describe methods and attributes for inclusion in the new type of item block . For example a client may specify which of the particular attributes and methods previously described will be included in the new type of item. The storage API may also receive one or more inputs which describe default role definitions for inclusion in the new type of item block . The default role definitions for example may specify which of the methods and attributes may be accessed by which roles. The storage service module then stores data that describes the new type of item in the object store block . Therefore the client as well as other clients which have access to the storage API may later call this new type when it is described to create an item having that type as previously described in relation to .

Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed invention.

