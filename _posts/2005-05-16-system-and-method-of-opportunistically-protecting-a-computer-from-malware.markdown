---

title: System and method of opportunistically protecting a computer from malware
abstract: The present invention provides a system, method, and computer-readable medium that opportunistically install a software update on a computer that closes a vulnerability that existed on the computer. In accordance with one aspect of the present invention, when antivirus software on a computer identifies malware, a method causes a software update that closes the vulnerability exploited by the malware to be installed on the computer. The method includes identifying the vulnerability exploited by the malware, using a software update system to obtain a software update that is configured to close the vulnerability; and causing the software update to be installed on the computer where the vulnerability exists.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561190&OS=08561190&RS=08561190
owner: Microsoft Corporation
number: 08561190
owner_city: Redmond
owner_country: US
publication_date: 20050516
---
The present invention relates to computers and more particularly to opportunistically protecting a computer from malware.

As more and more computers and other computing devices are interconnected through various networks such as the Internet computer security has become increasingly more important particularly from invasions or attacks delivered over a network or over an information stream. As those skilled in the art will recognize these attacks come in many different forms including but certainly not limited to computer viruses computer worms system component replacements denial of service attacks even misuse abuse of legitimate computer system features all of which exploit one or more computer system vulnerabilities for illegitimate purposes. While those skilled in the art will realize that the various computer attacks are technically distinct from one another for purposes of the present invention and for simplicity in description all malicious computer programs will be generally referred to hereinafter as computer malware or more simply malware.

When a computer is attacked or infected by computer malware the adverse results are varied including disabling system devices erasing or corrupting firmware applications or data files transmitting potentially sensitive data to another location on the network shutting down the computer or causing the computer to crash. Yet another pernicious aspect of many though not all computer malware is that an infected computer is used to infect other systems.

When a new malware is identified as spreading on a communication network such as the Internet different software providers initiate a process for handling the malware. More specifically typically at least two software providers create software updates when new malware is identified. One software provider is an antivirus software provider that creates a software update designed to identify the new malware and remove the malware from a computer. Those skilled in the art and others will recognize that a traditional defense against computer malware and particularly computer viruses and worms is antivirus software which typically scans data that is transmitted to a computer searching for identifiable patterns referred to as signatures which are associated with known malware. If a malware signature is identified the antivirus software takes appropriate action such as deleting the malware infected file or removing the malware from an infected file. However existing antivirus software does not provide software updates that are designed to close the vulnerability exploited by the malware to infect one or more computers. As a result a computer may become reinfected with the malware in some instances even though antivirus software on a computer is up to date with the most recent software updates.

Another software provider that typically creates software updates when a new malware is identified is an operating system provider. While most malware released today are based on known vulnerabilities occasionally a computer malware is released that takes advantage of a previously unknown vulnerability. In this instance the operating system provider creates a software update commonly known as a patch that is designed to close the vulnerability exploited by the new malware. By installing a patch designed to close the vulnerability the computer is protected against being infected with the malware.

Providing adequate protection against malware includes installing updates to antivirus software and operating system patches designed to prevent the malware from infecting a computer. However users often leave computers exposed to malware even in instances when software updates would protect the computers. For example some users mistakenly believe that antivirus software will protect a computer from being infected with malware in all instances. However frequently computers with up to date antivirus software are infected with malware if a patch designed to close the vulnerability exploited by the malware is not installed.

The foregoing problems with the state of the prior art are overcome by the principles of the present invention which are directed toward a system method and computer readable medium for opportunistically installing a software update on a computer that closes a vulnerability that exists on the computer.

In accordance with one aspect of the present invention when antivirus software on a computer identifies malware a method causes a software update that closes the vulnerability exploited by the malware to be installed on the computer. More specifically the method comprises identifying the vulnerability exploited by the malware using a software update system to obtain a software update that is designed to close the vulnerability and causing the software update to be installed on the computer.

In accordance with another aspect of the present invention a method of identifying a vulnerability exploited by a malware is provided. In one embodiment the vulnerability exploited by the malware is identified entirely on a computer associated with a user. In this instance a lookup of a database that maps a vulnerability to one or more malware is performed in order to identify the vulnerability. In other embodiments a remote computer associated with a trusted entity is used to identify the vulnerability. For example in one embodiment when a malware is identified the vulnerability is identified by generating a crash dump that contains the current memory contents of the computer transmitting the crash dump to a remote computer associated with a trusted entity and causing the remote computer to match the memory contents of the computer with a malware and associated vulnerability. In yet another embodiment that uses a remote computer to identify the vulnerability exploited by the malware a trusted entity provides a Web service that is available to a local computer associated with a user. In this instance the method for identifying the vulnerability includes causing the local computer associated with the user to issue a call to the Web service and causing the remote computer to match data provided in the call to a vulnerability using a data store that maps a vulnerability to one or more malware.

In still another aspect of the present invention a computer readable medium is provided with contents i.e. a program that causes a computer to operate in accordance with the methods described herein.

The present invention provides a system method and computer readable medium that opportunistically installs a software update configured to close a known vulnerability that exists on a computer. Those skilled in the art and others will recognize that to protect a computer from malware at least two defensive mechanisms are necessary. The first defensive mechanism is up to date antivirus software that is designed to identify and remove malware from a computer. The second defensive mechanism involves regularly installing software updates or patches that close vulnerabilities on the computer. In general terms describing one aspect of the present invention antivirus software is used to determine when a computer is vulnerable to malware. For example when a malware infection is identified the present invention matches the malware identified to the vulnerability exploited by the malware. Once the vulnerability exploited by the malware is known a software update system is used to obtain the software update that is configured to close the vulnerability exploited by the malware. Finally the software update is installed on the computer where the malware infection was identified thereby protecting the computer from malware that exploits this vulnerability.

The following description first provides an overview of aspects of the present invention. Then a method for implementing the present invention is described. The illustrative examples provided herein are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Similarly any steps described herein may be interchangeable with other steps or combinations of steps in order to achieve the same result.

The following discussion is intended to provide a brief general description of a networking environment suitable to implement aspects of the present invention. As illustrated in the networking environment comprises a plurality of computers namely the vulnerability computer the client computer the server computer and the Personal Digital Assistant PDA . The vulnerability computer is shown associated with a trusted entity . Also the vulnerability computer is configured to communicate with the client computer server computer and the PDA via the network which may be implemented as a local area network LAN wide area network WAN or the global network commonly known as the Internet. As known to those skilled in the art and others the computers and illustrated in may be configured to exchange files commands and other types of data.

For the sake of convenience illustrates personal computers and a Personal Digital Assistant usable in the networking environment in which complementary tasks may be performed by remote computers linked together through a communication network . However those skilled in the art will appreciate that the invention may be practiced with many other computer system configurations. For example the invention may be practiced with a personal computer operating in a stand alone environment or with multiprocessor systems minicomputers mainframe computers and the like. In this regard the functions performed by the computers described herein may be implemented by a plurality of computers. In addition to the conventional computer systems illustrated in those skilled in the art will also recognize that the invention may be practiced on other kinds of computers including laptop computers tablet computers or any device upon which computer software or other digital content may be installed.

When software formed in accordance with the present invention is implemented in one or more computers the software provides a way to opportunistically close a vulnerability on a computer. More specifically in one embodiment of the present invention any of the computers and that are communicatively connected to the network may obtain a software update that was created by the trusted entity and made available from the vulnerability computer . Typically the software update is obtained when antivirus software on the computers and identifies a malware infection. Then software formed in accordance with the present invention identifies the vulnerability exploited by the malware. When the vulnerability exploited by the malware is known a software update is obtained from the vulnerability computer and installed on the computer where the malware was identified. The present invention takes advantage of the fact that when malware is identified on a computer the identification means that the computer was not updated with a patch designed to close the vulnerability exploited by the malware. As a result the present invention automatically and conveniently protects the computer where the malware was identified from future infections without requiring significant effort on the part of the user.

Referring now to the following is intended to provide an exemplary overview of the components that implement aspects of the present invention. As mentioned previously the client computer may be any one of a variety of devices including but not limited to personal computing devices server based computing devices and the like. For ease of illustration and because they are not important for an understanding of the present invention does not show the typical components of many computers such as a CPU keyboard mouse printer or other I O devices display etc. However as illustrated in the client computer contains antivirus software a malware database a software update client and a coordination module which collectively provide a way to opportunistically close a vulnerability on the client computer thereby protecting the computer from malware.

As illustrated in the client computer includes an antivirus software designed to identify data characteristic of malware. Many different software vendors provide antivirus software to identify and remove malware from a computer. One known technique employed by some existing antivirus software that is used to identify data characteristic of malware includes obtaining a copy of the malware in the wild. The program code that implements the malware is processed with a hash function that converts the program code or a characteristic subset of the program code into a signature that uniquely identifies the malware. The antivirus software illustrated in may employ this known technique of scanning data for a malware signature. Also increasingly heuristic techniques employed for identifying malware may be used by the antivirus software . However it should be well understood that the examples described herein should be construed as exemplary and not limiting as the antivirus software may employ any of a number of malware detection techniques.

As further illustrated in the client computer includes a coordination module and a malware database . Since functions and different embodiments of the coordination module are described below with reference to a detailed description of the module will not be provided here. However generally described the coordination module receives notice from the antivirus software when malware is identified on a computer . Then in one embodiment of the present invention the coordination module performs a lookup in the malware database . As described in further detail below the malware database maps a vulnerability to one or more malware that exploit the vulnerability to gain access to the computer . By performing a lookup in the malware database the coordination module is able to identify the vulnerability exploited by the malware. Then in accordance with one embodiment of the present invention the coordination module uses the software update client to install a software update on the computer that is configured to close the identified vulnerability.

The client computer illustrated in includes a software update client that is configured to obtain and install a software update on the computer . In this regard the software update client identifies the software state of the computer by performing an analysis of configuration databases stored on the computer . As known to those skilled in the art and others modern computers maintain databases from which configuration information may be obtained. For example the system registry is a database used to store settings options and preferences regarding the operation of a computer including settings for all the hardware software and user preferences. The system registry also stores references to libraries such as dynamically linked libraries which identify the code segments and data used by application programs installed on the client computer . The software update client analyzes the system registry and other configuration databases to identify the operating system application programs and software updates installed on the client computer . Then the software update client queries a data store for information about available software updates and rules that govern when a particular software update should be installed. As a result the software update client produces data that identifies any software updates that need to be installed on the client computer given the configuration of the computer and malware that was identified by the antivirus software . Also the software update client communicates with server based software on the vulnerability computer in order to obtain any necessary software updates.

Those skilled in the art and others will recognize that is a simplified example of one client computer that is capable of performing the functions implemented by the present invention. Actual embodiments of the client computer will have additional components not illustrated in or described in the accompanying text. Also shows an exemplary component architecture for opportunistically patching a computer but other component architectures are possible.

Now with reference to an alternative embodiment of the present invention in which the vulnerability computer maintains logic for identifying the software update that will be installed on the client computer is described. As illustrated in in this embodiment the client computer contains many of the same software components that were described above with reference to . However when the antivirus software identifies malware on the computer a dump file is generated and transmitted to the vulnerability computer . As known to those skilled in the art and others existing systems are able to generate dump files sometimes referred to as memory dumps or core dumps when a malware is identified on a computer. Generally described a dump file is a record of the memory state of a computer that provides developers with access to data and other information that captures the state of different system components. A detailed description of one system suitable to obtain a dump file from a computer may be found in commonly assigned U.S. Pat. No. 6 629 267 titled METHOD AND SYSTEM FOR REPORTING A PROGRAM FAILURE issued Sep. 30 2003 the content of which is expressly incorporated herein by reference.

As illustrated in when the antivirus software identifies a malware infection on the computer the software update client causes the dump file to be transmitted to the vulnerability computer . In this embodiment the vulnerability computer maintains identification logic that takes the dump file as input. In response to receiving the dump file the identification logic performs an analysis using techniques generally known in the art to identify the identified malware from data in the dump file . Once the malware is identified the identification logic performs a lookup of the malware database in order to identify the vulnerability exploited by the malware. When the vulnerability is known the vulnerability computer transmits a software update to the client computer that is designed to close the exploited vulnerability. When the software update is received the software update client causes the software update to be installed thereby protecting the computer from malware that exploits this vulnerability.

Now with reference to another alternative embodiment of the present invention in which the vulnerability computer is used to distribute a software update to the client computer will be described. One system that facilitates the communication of data between computers using protocols developed for the Internet is a Web service. Those skilled in the art and others will recognize that a Web service refers to a software system with a network accessible interface that performs actions on behalf of other software systems. A Web service is typically accessed using standard protocols such as the Simple Object Access Protocol SOAP . A software system located on a remote computer may interact with a Web service in a manner prescribed by definitions that are provided in a service description. Also interactions between software systems typically occur using Extensible Markup Language XML based messages exchanged via Internet based protocols such as the HyperText Transfer Protocol HTTP . In this way a Web service may expose processes to remote software systems for accessing data or executing operations on a computer or a cluster of computers that provides the Web service. Typically a Web service supports interactions with other software systems at a specified location on a network that may be identified using a Uniform Resource Indicator URI .

In one embodiment of the present invention when malware is identified the client computer makes a request to a Web service that is maintained by the vulnerability computer . The request is designed to provide sufficient information so that the Web service may identify a software update that is configured to close the vulnerability exploited by the malware. For example the identity of the malware and or configuration data that describes the software state of the client computer may be transmitted to the Web service. In response to the request the vulnerability computer may provide a Web page from which the necessary software update can be obtained.

Now with reference to an exemplary embodiment of the coordination module illustrated in that opportunistically protects a computer from malware will be described.

As illustrated in the coordination module begins at block where the module remains idle until antivirus software identifies malware on a computer that implements the present invention. As described previously many different software vendors provide antivirus software that identifies a malware infection. Moreover currently available antivirus software may use a variety of malware detection techniques alone or in combination to protect a computer from malware. The coordination module may be used in conjunction with any currently existing or yet to be developed antivirus software. Moreover the antivirus software used by the present invention may employ any one of a number of malware detection techniques. When malware is identified at block the coordination module is notified of the malware using techniques for communicating between software modules that are generally known in the art. However those skilled in the art and others will recognize that the coordination module may begin functioning in other contexts without departing from the scope of the present invention. For example the present invention may be integrated with other types of anti malware products such as firewalls anti spyware software and the like.

At block the malware infection identified at block is handled by the antivirus software. Those skilled in the art and others will recognize that when a malware infection is detected the infection may be handled in one of many different ways. Preferably the infected computer is capable of being cleaned so that the malware is no longer resident on the computer. However in some instances the malware may be configured to employ self preservation techniques to resist being cleaned. As a result removing the malware from the computer may not be feasible in all instances. As a result the malware may be quarantined so that data associated with the malware is incapable of being executed on the computer.

At block the coordination module determines whether the vulnerability exploited by the malware will be identified by a local computer where the malware was identified e.g. the client computer or a remote computer associated with a trusted entity e.g. the vulnerability computer . As described previously with reference to aspects of the present invention may be implemented either on a computer associated with a user or a remote computer associated with a trusted entity. For example aspects of the present invention may be implemented as a Web service that identifies vulnerabilities on behalf of other computers. In any event if the vulnerability exploited by the malware will be identified by a local computer associated with a user the coordination module proceeds to block described below. Conversely if the vulnerability exploited by the malware will be identified by a remote computer associated with a trusted entity the coordination module proceeds to block .

At block data is transmitted from a local computer associated with the user to a remote computer associated with a trusted entity. As mentioned above in one embodiment of the present invention a trusted entity provides a Web service that performs functions on behalf of a local computer. In this instance a Web service request is generated at block and transmitted from a local computer to a computer associated with a trusted entity. The request is designed to provide the Web service with sufficient information so that the Web service may identify a software update that is configured to close the vulnerability that exists on the requesting computer. Thus the identity of the malware and or configuration data that describes the software state of the requesting computer may be transmitted to the Web service in the request.

A computer associated with a trusted entity may identify a vulnerability on behalf of a local computer in other contexts than a Web service. For example at block a dump file may be transmitted to a computer associated with the trusted entity using existing software systems. In this embodiment a request to a Web service is not generated. Instead at block a dump file that contains the contents of computer memory is generated and transmitted to a computer associated with the trusted entity. As mentioned previously logic on a computer associated with the trusted entity performs an analysis of the dump file to identify the malware that is infecting the local computer.

As illustrated in at block the coordination module identifies the vulnerability exploited by the malware that is infecting the local computer associated with a user. Those skilled in the art and others will recognize that software providers continuously monitor communication networks for new computer malware. When a new computer malware is identified the developers analyze code that implements the malware to detect vulnerabilities exploited by the malware. Then a software update or patch is created to close the exploited vulnerability. Typically software updates are distributed through a Web site or an automatic software update system. However with these distribution mechanisms users may not obtain software updates that are needed to close vulnerabilities on their computers. For example a user may not obtain the software updates from a Web site or opt in to an automatic update system designed to distribute the software updates.

As part of the process of creating software patches developers also maintain a data store e.g. the malware database that maps a vulnerability to one or more malware that exploits the vulnerability. For example the malware database records a vulnerability e.g. TYPE 1 BUFFER OVERFLOW and identifies one or more malware e.g. SASSER that are known to exploit this vulnerability. In one embodiment of the present invention the vulnerability exploited by the malware is identified at block by performing a lookup in a data store that is maintained on a local computer associated with a user e.g. the client computer . In this instance the vulnerability is identified by generating a query to the data store using techniques that are generally known in the art.

In alternative embodiments of the present invention the vulnerability exploited by the malware is identified at block by a computer associated with a trusted entity. For example as described previously aspects of the present invention may be provided as a Web service. In this instance the local computer associated with the user e.g. the client computer generates a Web service request that is handled by a computer associated with the trusted entity e.g. the vulnerability computer . In response a database lookup is performed that extracts information in a data store. For example a data store that maps a vulnerability to one or more malware may be maintained on the computer associated with a trusted entity. When data such as a Web service request on a dump file is received from the local computer the data is analyzed and used to identify the vulnerabilities exploited from a data store.

As illustrated in at block the coordination module determines whether a software update exists that is configured to close the vulnerability identified at block . Those skilled in the art and others will recognize that creating a software update that closes a vulnerability may take a significant amount of time. As a result the necessary software update may not be available in all instances. If a software update that is designed to close the vulnerability is available the coordination module proceeds to block described below. Conversely if a software update that is designed to close the vulnerability is not available the coordination module proceeds to block .

At block the coordination module reports the non availability of a software update to the trusted entity. By reporting the non availability of the necessary software update the coordination module provides data to developers that may be used to identify critical software updates that need to be distributed to users in order to counter a new malware threat. Then the coordination module proceeds to block where it terminates.

As illustrated in at block the necessary software update or patch is transmitted from a computer associated with the trusted entity e.g. vulnerability computer to a local computer where the malware was discovered e.g. the client computer . As mentioned previously with reference to aspects of the present invention may use an existing software update client to communicate with a computer associated with the trusted entity and obtain one or more software updates. In accordance with one embodiment of the present invention the software update client maintains an application programming interface API that is called by the coordination module . In response the software update client satisfies the API call by communicating with the computer associated with the trusted entity using standard network protocols. Then the software update is installed on the local computer at block using a system and method that are generally known in the art. Finally the coordination module proceeds to block where it terminates. However those skilled in the art will recognize that other systems may be used to obtain and install the software update without departing from the scope of the present invention. For example as mentioned previously the necessary software update may be obtained manually from a Web page or other distribution mechanism without departing from the scope of the present invention.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

