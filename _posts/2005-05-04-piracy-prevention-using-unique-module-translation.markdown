---

title: Piracy prevention using unique module translation
abstract: A method for providing solidified software in a computing environment includes creating a new reference for a function in a function table; copying an address of the function and associating the address with the new reference; replacing the address associated with an old reference of the function with a dummy address; and substituting each old reference in normal code with the new reference, where injected code is not able to execute in the computing environment. The function table entries can be further randomized by reordering the entries, introducing intermediate mappings, or providing non-operative entries. Alternatively, all or part of the code of the function can be copied and moved to a different storage location and associated with the new reference. The copied code can be further randomized by the insertion of dummy code, utilizing reverse peephole techniques, varying the size of the copied portion, or interleaving non-operative code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07603552&OS=07603552&RS=07603552
owner: McAfee, Inc.
number: 07603552
owner_city: Santa Clara
owner_country: US
publication_date: 20050504
---
The present invention relates to computer systems and more particularly to the solidification of software to maintain the integrity of software and computer systems using unique module translation.

The set of software available for execution on a computer is generally dynamic and modifiable even when such modification is not desirable. Restricting the ability of users or administrators of a computer to install and remove software or to modify configuration of the existing software is enforced with passwords or verbal and written policies and guidelines. However when passwords are used possessors of administrative passwords generally have access beyond their immediate responsibilities.

Accordingly there is a need for a technique for providing solidified or frozen software for maintaining the integrity of software and computer systems. The present invention addresses such a need.

A method for providing solidified software in a computing environment includes creating a new reference for at least one function in a function table copying an address of the at least one function and associating the address with the new reference replacing the address associated with an old reference of the at least one function with a dummy address and substituting each old reference in normal code with the new reference where injected code is not able to execute in the computing environment. The function table entries can be further randomized. The randomization can include reordering the entries introducing intermediate mappings or providing non operative entries with the operative entries. Alternatively all or part of the code of the function can be copied and moved to a different storage location and associated with the new reference. To save storage space a portion of the code can be copied and moved with the copied portion referencing the remaining portion of the code at its original location. The copied code can be further randomized. The randomization can include the insertion of dummy code utilizing reverse peephole techniques varying the size of the copied portion or interleaving non operative code with the copied code. In the above manner the code for the function is solidified.

Computer Any computing system comprising an operating system providing a set of resources for use by one or more pieces of software for execution on the computing system.

Injected Code. A set of instructions attempting to access a computing environment that has not been determined to have authorization to be installed or be executed in the computing environment.

Interface A language protocol or other boundary for providing a service or making available a resource to a piece of software on a computer. An interface comprises a name space knowledge of which is needed for successful usage of the interface. For a given interface to a service or resource an implementation of the service or resource fulfills requests made through the interface. One example of an interface comprises an Application Programming Interface API such as a system call interface of an operating system wherein the name space comprises system call names or system call addresses and the implementation comprises the portion of the operating system implementing the actual system calls. Another example of an interface comprises a set of function calls to a library wherein the name space comprises function names or function addresses and the implementation comprises the actual library code implementing the functions. Other interface examples include language APIs such as a PERL API Java API PHP API shell script APIs etc. database APIs an interface to a file system of a computer wherein the name space comprises a set of file names and any interface to a container of data.

Normal Code A set of instructions for execution on a computer that has been determined to have authorization to install and execute in a computing environment.

Reference A thing that relates to an instruction for execution on a computer. The thing can be any mechanism such as a name a direct or indirect address for the location of the instruction a number a place in a data structure an index in a list an entry in a table or an object in a data structure of any kind.

Software Any set of instructions for execution on a computer. A piece of software may use one or more services or resources as provided by the computer through one or more interfaces.

Solidification Creation of a unique computing system by converting uniform systems into functionally equivalent but logically unique systems generally by breaking assumptions about a computer that software programs normally make in order to execute on that computer.

For example referring to assume that the references are names for three functions N N N at addresses A A A respectively stored in the function table. New names N N N are created for each function via step . The addresses of each function A A A are copied and associated with the new names N N N via step . The addresses of the functions associated with the old names N N N are replaced with dummy addresses Ax Ax Ax via step . Then the names of the functions N N N in the normal code are substituted with the new names N N N via step . In this manner if an injected code attempts to access function N it is directed to the dummy address Ax and thus does not call the actual function. The code for the function is thus solidified. Although in the example the reference is a name the reference can be a number instead.

The dummy address Ax can initiate any number of operations. The dummy address can point to an invalid address a function that performs nothing a function that performs an alternative function execution exception logging etc. or any other possible operation.

The randomization can be one of any number of techniques. One randomization technique is the reordering of the new function entries. For example referring to new names N N N are created for the functions with old names N N N via step the addresses A A A are copied and associating with the new names N N N via step along with each of their ordinal numbers 1 2 3. The addresses A A A for the functions with the old names N N N are replaced with dummy addresses Ax Ax Ax via step . Then the new names N N N are further randomized by recording them 2 1 3 via step . In this manner injected code cannot locate the actual function addresses by identifying the order patterns.

Another randomization technique is to introduce an intermediate mapping for the ordinal numbers. For example referring to after performing the creating copying and replacing steps an intermediate mapping is introduced for the ordinal numbers f 1 f 2 f 3 . The pattern of the ordinal numbers 1 2 3 is thus changed such that injected code cannot identify the pattern as that belonging to ordinal numbers. Other randomization techniques are also possible such as introducing dead space between the table entries. In each of the randomization techniques the pattern of the entries is randomized so that it is not recognizable by injected code.

For example referring to assume that the code for functions with names N N N in the function table are located at the addresses A A A. New names N N N for the functions are created via step . A first portion shaded of the code for each function are then copied and placed at the addresses A A A via step and associated with the new names N N N by making corresponding changes in the function table. The end of the copied portions references the addresses of the second portions of the code A A A for the functions at the first locations A A A. Thus once the code at the addresses A A A are executed the execution of the function continues with the code at the referenced addresses A A A . In this manner the amount of copied code is less than the entire code for a function saving storage space while also preventing injected code from calling the actual functions by accessing the original addresses for the functions.

Although the example of illustrates names as references one or ordinary skill in the art will understand that the same technique of copying and moving a portion of the code is also applicable when the addresses A A A themselves are the references without the use of names for the functions without departing from the spirit and scope of the present invention.

The randomization can be any number of techniques such as the insertion of dummy code a reverse peephole technique varying the size of the portion of code copied and interleaving dead space into the copied code. Other randomization techniques can be used. By randomizing normal code in this manner the normal code is able to continue executing in the computing environment while injected code that is not authorized to be installed or executed in the computing environment is not.

The various randomizations of the entries in the function table or of the function code described above can be used in any combination without departing from the spirit and scope of the present invention.

Foregoing described embodiments of the invention are provided as illustrations and descriptions. They are not intended to limit the invention to precise form described. In particular it is contemplated that functional implementation of invention described herein may be implemented equivalently in hardware software firmware and or other available functional components or building blocks and that networks may be wired wireless or a combination of wired and wireless. Other variations and embodiments are possible in light of above teachings and it is thus intended that the scope of invention not be limited by this Detailed Description but rather by Claims following.

