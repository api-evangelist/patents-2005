---

title: Data mart generation and use in association with an operations intelligence platform
abstract: Some embodiments include determination and storage of a plurality of relational database tables based on class model representing tag-based data and non-tag-based data and on a plurality of objects instantiated based on the class model. Also included are reception of a selection of one object of the objects as a dimension of a logical model, reception of a first indication of a first plurality of members of the selected object to be associated with dimension data of the logical model, reception of a second indication of a second plurality of members of the selected object to be associated with fact data of the logical model, to create a dimension table associated with the selected object and including columns corresponding to the first plurality of members, and creation of a fact table including a foreign key column corresponding to the dimension table and including a column corresponding to each of the second plurality of members.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07840607&OS=07840607&RS=07840607
owner: Siemens Aktiengesellschaft
number: 07840607
owner_city: Munich
owner_country: DE
publication_date: 20050802
---
This application claims priority to Provisional Application Ser. No. 60 599 478 filed Aug. 6 2004 and entitled Data Mart Generation for Real Time Operations Decision Support and Analysis .

The embodiments described below relate generally to systems for storing and providing historical operations data.

Conventional industrial systems often rely to some extent on computer based automation and monitoring. In some examples of automation and monitoring data arising from the operation of a manufacturing plant is acquired analyzed and responded to if necessary. The data may arise from independent sources with each source configured to provide substantially raw or native point data at pre defined intervals in real or near real time. The point data may be presented to an operator in real or near real time and may include such as numerical values produced by gauges and or monitors e.g. speed temperature or pressure .

Examples of systems that may acquire analyze and act on point data include industrial automation systems supervisory control and data acquisition SCADA systems and general data acquisition systems. In such systems point data may be associated with a tag to create a structural data element that is made accessible to other components systems applications and or users. In general point data obtained from selected sources is subject to dynamic change and is monitored and reported through various operations and functions associated with processing the point data. In industrial automation and control systems decision support and reporting capabilities may be provided based on tag associated point data that is monitored over very short timeframes ranging in the sub second to sub minute range.

Many conventional systems provide only limited capabilities to access interpret and or manipulate tag based point data collectively or in connection with non point data. Non point data relates to a broad category of context providing information that is associated with point data and may extend the functionality and meaning of the point data. Non point data may include descriptive and or attribute information characterizing the point data as well as other information such as limits ranges etc. In conventional systems integral and flexible manipulation of tag based point data and non point data is restricted due to the inherent differences between and properties of the two types of data.

Conventional systems also possess a limited ability to integrate and relate tag based point data and non tag based data. Non tag based data may originate from numerous sources and relate to disparate aspects of an enterprise environment. For example non tag based data may comprise data associated with conventional database applications environments and include transactional information production data business data etc. Conventionally attempts to integrate non tag based data with tag based point data may be hindered or prevented completely as a consequence of underlying differences in structure and content between these data types. As a result generating and implementing logical constructions or schema in which both tag based data and non tag based data are integrally used is problematic in conventional systems. Such limitations limit overall flexibility and increase the difficulty of scaling to complex enterprise level environments.

Another important consideration to the integral management of point data and non point data relates to the recognition of differences in desirable update or acquisition frequencies. The dynamic properties of point data give rise to time critical retrieval restrictions on systems designed to acquire and evaluate point data. Rapidly changing point data is generally acquired or refreshed at a high frequency to insure that the information is up to date. Other point data and non point data may be more static in nature and may not require high frequency acquisition.

Conventional systems are not well suited to provide integration of customizable data dependent acquisition strategies or associated acquisition rates. As a result these systems experience reduced performance especially in complex environments where data or values to be retrieved possess different optimal or desired refresh rates. Furthermore these conventional systems fail to provide the ability to efficiently customize or configure differential acquisition strategies for point data and non point data so as to improve overall system performance.

The foregoing difficulties in managing tag based point data non point data and non tag based data also hinder efficient analysis and reporting of such data. Conventional systems such as those described above may therefore not be suitable for historical analysis and evaluation of acquired data. Accordingly improved systems for analysis manipulation and or reporting of operations data are desired.

In order to address the foregoing some embodiments concern a system a method an apparatus a medium storing processor executable process steps and means to determine a plurality of relational database tables based on a class model representing tag based data and non tag based data and on a plurality of objects instantiated based on the class model to receive a selection of one object of the objects as a dimension of a logical model to receive a first indication of a first plurality of members of the selected object to be associated with dimension data of the logical model and to receive a second indication of a second plurality of members of the selected object to be associated with fact data of the logical model. Embodiments may further include creation of a dimension table associated with the selected object and including columns corresponding to the first plurality of members and creation of a fact table including a foreign key column corresponding to the dimension table and including a column corresponding to each of the second plurality of members. According to some embodiments the class model represents assets and geographies of a manufacturing organization and or the tag based data and non tag based data are generated by a continuous industrial process.

In further aspects a selection of a second object of the objects is received as a second dimension of a logical model a third indication is received of a first plurality of members of the second object to be associated with dimension data of the logical model a fourth indication is received of a second plurality of members of the second object to be associated with fact data of the logical model and a second dimension table is created associated with the second object and including columns corresponding to the first plurality of members of the second object. The fact table may include a second foreign key column corresponding to the second dimension table and a column corresponding to each of the second plurality of members of the second object.

According to additional or alternative aspects the dimension table includes a primary key column and a function is created to receive values of one or more columns of the dimension table and to output a value of the primary key column of the dimension table wherein the value identifies a row of the dimension table including the received values.

Some embodiments comprise an operations platform to provide a class based model representing tag based data and non tag based data and a plurality of objects instantiated based on the class model a database device to determine and store a plurality of relational database tables based on the class model and on the plurality of objects instantiated based on the class model and a schema generating device. The schema generating device is to receive a selection of one object of the objects as a dimension of a logical model to receive a first indication of a first plurality of members of the selected object to be associated with dimension data of the logical model to receive a second indication of a second plurality of members of the selected object to be associated with fact data of the logical model to create a dimension table associated with the selected object and including columns corresponding to the first plurality of members and to create a fact table including a foreign key column corresponding to the dimension table and including a column corresponding to each of the second plurality of members.

The appended claims are not limited to the disclosed embodiments however as those in the art can readily adapt the teachings herein to create other embodiments and applications.

In this regard the various embodiments described herein can be employed in a wide variety of industries and operational facilities. Any industrial process with differing types of operations data may supply data to systems utilizing the invention. For instance facilities involved with natural resource refinement and procurement oil and gas procurement oil and gas refinement chemical synthesis and refinement water treatment power generation power transmission food and beverage processing raw materials processing e.g. pulp lumber metals and minerals agricultural processing and materials processing e.g. steel mills and foundries may be suited to utilize platforms and software built upon concepts described herein. Additionally facilities involved in finished goods manufacturing and production such as product assembly lines may utilize one or more embodiments or systems with such features.

These facilities may have various assets equipment machinery flows etc. that produce operations data which may be continuous or discrete and may involve operations data that is presented in batches. Examples include pumps motors tanks pipelines mills lathes mixers assembly lines and so on. Operations data may include data from machinery assets process historians maintenance systems enterprise resource planning systems and the like. Examples of such data include pressure temperature capacities volumes rates of flow production totals inventories performance indicators and the like.

 Operations data as used herein includes tag based point data non point data and non tag based data. As used herein point data may be characterized as current real time or value data associated with one or more instruments components or portions of a manufacturing industrial commercial or other system. Any of these instruments components or portions may be configured to generate measure and or sample point data of interest. For example a data acquisition system for a particular instrument or machine may continuously or periodically acquire data reflecting a motor s operating speed and or operating temperature as point data from a point data source associated with the motor. In certain instances the point data may be a simple numerical or string value. Point data may further be associated with monitoring control and reporting functions of various instruments components and applications to provide information relating to the operation of a selected system. This information may also be made available for collection and review by various data acquisition and control systems.

Point data is often acquired in a raw or unstructured form wherein the point data reflects a numerical or string value without supporting details description and or attributes. As previously described certain types of point data may be associated with real time or near real time information e.g. current temperature pressure speed voltage current etc. that may be desirably sampled updated or refreshed relatively frequently. The exact frequency of these operations is typically dependent on the characteristics of the point data itself and may be different across the multiple point data sources incorporated into a particular system.

A tag may therefore represent a data structure comprising selected quanta of information associated with a particular point data informational source and may also comprise certain non point data. In conventional systems acquisition of each tag s current value e.g. point data associated information generally requires a unique configuration for each tag and possibly for each tag s attributes e.g. non point data . Considering that it is not uncommon for complex industrial automation applications to contain upwards of 100 000 tags it will be appreciated that the individualized configuration and management of tags in the aforementioned manner can be very time consuming inefficient and error prone. Furthermore conventional mechanisms for control monitoring or archiving of tag based information tend to become even less useful when attempting to aggregate such information across multiple systems such as in the context of other plant production systems and applications.

Non point data may take many forms including but not limited to attribute information parameters limits and other descriptive information. Certain non point data may be associated with the point data to provide context thereto. As used herein the terms point data and non point data encompass various categories of information that are not necessarily constrained to the examples described herein.

Other types of non point data may include information such as maintenance work orders relational data or API Application Programming Interface structure data from maintenance systems equipment documentation unstructured data usually contained within operating system files and documents and information such as URL Uniform Resource Locator links to supplier web sites. These types of non point data may be associated with non tag based information contained for example within Oracle or SAP databases environments. Non point data therefore represents a broad class of information that may be associated with point data providing a contextual and informational basis.

System includes operational data sources in communication with application environment . Also in communication with application environment are administration clients and browsing clients .

As used herein systems in communication with one another are directly or indirectly capable of communicating over any number of different systems for transferring data including but not limited to a local area network a wide area network a telephone network a cellular network a fiber optic network a satellite network an infrared network a radio frequency network and any other type of network that may be used to transmit information between devices. Moreover communication between systems may proceed over any one or more currently or hereafter known transmission protocols such as Asynchronous Transfer Mode ATM Internet Protocol IP Hypertext Transfer Protocol HTTP and Wireless Application Protocol WAP .

Operational data sources comprise various data sources including but not limited to plant floor production systems enterprise resource planning data systems and other data systems. When employed in an industrial context data arising from operational data sources may be associated with any aspect of industrial operations and may consist of point data and non point data used to characterize contextualize or identify the point data and or the source of the point data. Each data source of operational data sources may comprise one or more disparate hardware and software systems some of which are not interoperational with one another.

Application environment may issue queries for data to operational data sources . In response operational data sources acquire and transmit the data to application environment . Such a transaction may employ any system for querying and responding that is or becomes known. A system utilizing a connector framework is described below.

Application environment may comprise enterprise server Web server and solution server . Application environment may comprise a single server device or multiple devices. In various embodiments enterprise server and solution server comprise application programs developed in Java and or C and running under Windows XP NT 2000 2003.

Web server manages data communication between application environment administration clients and browsing clients . One or both of administration clients and browsing clients may execute one or more Java applets to interact with Java servlets of Web server according to some embodiments.

Solution server is used to access data from operational data sources . In some embodiments solution server includes connection groups and connection processes. A connection group includes one or more object instances each of which is associated with a particular data source of operational data sources . Different connection groups are associated with different data sources. A connection process comprises processor executable process steps to retrieve data from a particular type of data source e.g. an Oracle database . A connection process may comply with standard or proprietary protocols including but not limited to ODBC JDBC OPC DA OPC HDA OPC AE and Web Services.

Several different connection groups may use a same connection process to access their respective data sources. Moreover each object instance includes scripts e.g. Structured Query Language scripts to populate itself based on retrieved data. Solution server manages the objects connection groups and connection processes to access data that is acquired and stored by disparate systems of operational data sources .

Solution server may transmit the data acquired from operational data sources to data store for storage according to some embodiments. Data store may store any data used during the operation of application environment . Data may be stored in data store according to any currently or hereafter known protocol for storing data. Data store may also comprise a front end application that is usable to access and or manage the data stored therein. According to some embodiments data store may receive data directly from operational data sources .

Administration clients may provide user interfaces to perform administration activities with respect to system . For example administration clients may allow an administrator to create or modify an object of a connection group and its associated connection process. Information received by the user interfaces may be transmitted to data store via Web server . Examples of administration clients according to some embodiments include but are not limited to a desktop computer a laptop computer a computer terminal a personal digital assistant a telephone and a tablet computer.

Browsing clients may be used to present views of data contained in data store . Such views may include real or near real time data and may include data stored in data store in an object oriented format. Browsing clients may provide any client application such as a Web browser or a Java applet. As such a browsing client may be connected to application environment through the Internet or through an Intranet. Browsing clients may be executed by any suitable user device including but not limited to those mentioned above with respect to administration clients .

Model database receives component definitions from enterprise server . The component definitions may comprise all or a portion of a component model. Such a component model may represent tag based data including point data and non point data and non tag based data that are generated by a continuous industrial process. In some embodiments the tag based data may be generated by and received from SCADA HMI DCS plant historians etc. and the non tag based data may be generated by and received from business systems and applications e.g. SAP ERP Oracle Manufacturing Apps general database apps etc . Moreover the component model may represent assets and geographies of a plant or manufacturing organization.

Commonly assigned U.S. Pat. No. 6 700 590 describes a system to use a class based object and view model to collect and display data received from multiple heterogeneous sources. This system encapsulates received tag based data and non tag based data as objects which are instantiations of defined components. The use of components and objects may provide reusability consistency inheritance and other benefits known to those familiar with object oriented techniques. The component model may be established and utilized in any manner including but not limited to those specified in aforementioned U.S. Pat. No. 6 700 590 and or U.S. patent application Publication No. 2005 0144154 the contents of which are herein incorporated by reference for all purposes. The component model may follow any suitable modeling protocol or format including those mentioned in the foregoing references.

Database also receives definitions of objects and or object collections from solution server . Each object and or object collection is an instantiation of a component defined in the component model. For example as will be described in more detail below a component may represent a generic pump with members of the component representing data related to the pump such as name location speed temperature etc. An object or object collection that is instantiated based on this component may represent a specific physical pump or several specific physical pumps .

According to some embodiments a database management system associated with database determines a plurality of relational database tables based on the received component definitions and object definitions. Details of this determination according to some embodiments will be described below. The relational database tables may reflect some or all of the associations and relationships between data components and objects within the received definitions. Database may comprise one or more devices and is not limited to a device that exclusively or primarily provides database functionality.

Database transmits the tables or model definition to schema generation module . Schema generation module determines a logical model and a physical model based on the model definition and on information received from data mart wizard . In some embodiments module receives a selection of an object as a dimension of the logical model. The selection may be received from wizard from which module also receives a first indication of a first plurality of members of the selected object to be associated with dimension data or attributes of the logical model. Module also receives a second indication of a second plurality of members of the selected object to be associated with fact data or attributes of the logical model.

Schema generation module may create a dimension table associated with the selected object and including columns corresponding to the first plurality of members. Module may also create a fact table including a foreign key column corresponding to the dimension table and including a column corresponding to each of the second plurality of members. Details of the foregoing according to some embodiments will be described below.

Schema generation module may be embodied by any combination of hardware and or software. According to some embodiments schema generation module comprises processor executable process steps executed by a device including model database data store and application environment .

Data mart wizard comprises any suitable system for receiving user input. Wizard may comprise a Java applet executed by a device that also executes an administration client and or a browsing client . Wizard may present user interfaces to a user receive user selections and indications based on user manipulation of the presented interfaces and transmit the selections and indications to schema generation module .

Schema generation module creates data mart based on the fact and dimension tables. Schema generation module may also create functions sequence generators constraints and or scripts for populating the tables. These functions sequence generators constraints and or scripts may be executable by a database management system associated with data mart to populate the tables.

The database management system associated with data mart may also be compatible with analytic DSS tools . Tools may allow a user to review time series or historical data stored within data mart . Such data may include data received by solution server from operational data sources and stored in an object oriented format in data store . Reports may also be produced based on the data stored in data mart . Efficiency and customizability of such reporting are known benefits of data marts.

The elements of may be configured differently than as shown and each block shown may be implemented by one or more hardware and software elements. The hardware and software elements of one or more blocks may be located remotely from each other. Some embodiments may include less or more elements than those shown.

Process steps may be embodied in processor executable process steps read from one or more of a computer readable medium such as a floppy disk a CD ROM a DVD ROM a Zip disk a magnetic tape or a signal encoding the process steps and then stored in a compressed uncompiled and or encrypted format. In alternative embodiments hard wired circuitry may be used in place of or in combination with processor executable process steps for implementation of processes according to some embodiments. Thus embodiments are not limited to any specific combination of hardware and software.

Initially a plurality of relational database tables is determined at step S. The tables are determined based on a class component model and on a plurality of objects that are instantiated based on the class model. In one example of step S model database receives component definitions from enterprise server . Database also receives definitions of objects and or object collections from solution servers . The class model and objects may comply with an industrial operations intelligence platform or any suitable object oriented specification that is or becomes known.

A database management system associated with database then determines a plurality of relational database tables based on the received component definitions and object definitions. The relational database tables may reflect some or all of the associations and relationships between data components and objects that are reflected in the received definitions. The tables are then transmitted to schema generation module .

Schema generation module receives a selection of an object as a dimension of the logical model at step S. The selection may be a selection of a user interfacing with data mart wizard . For example data mart wizard may present a list of objects based on the received database tables. A user may select one of the objects as a logical model dimension and the selection may be forwarded to module . Variations of step S according to some embodiments are presented below with respect to step S of process steps .

Module then receives at step S a first indication of a first plurality of members of the selected object to be associated with dimension data of the logical model. Continuing with the current example data mart wizard may present an interface including a list of members of the selected object. The user may manipulate the interface to indicate that several of the members are to be considered attributes of the logical model dimension that is represented by the selected object. The user may also manipulate the interface to indicate that several other of the members are to be associated with fact data of the logical model. The second indication is received at step S.

At step S schema generation module creates a dimension table that is associated with the selected object and that includes columns corresponding to the first plurality of members. Module also creates a fact table at step S. The fact table includes a foreign key column corresponding to the dimension table and a column corresponding to each of the second plurality of members. The fact table and the dimension table are elements of a physical model that may be transmitted to a data mart for population. Accordingly some embodiments provide the benefits of data mart warehouse storage to data that was obtained according to a class based model of an operations intelligence platform.

To provide a more detailed example of operation according to some embodiments illustrate process steps . Process steps may be embodied in any manner including those described above with respect to process steps . Although they will be described linearly process steps may be performed recursively according to some embodiments. Process steps will be described below as if embodied in model database and schema generation module .

A component model is initially received at step S. The component model may consist of component definitions received from enterprise server . Objects corresponding to the component model are received at step S. The objects may be received from solution servers and may comprise object object collection definitions that are instantiated based on the received component model. As mentioned above the component model and object definitions may comply with any suitable object oriented specification that is or becomes known. In some embodiments the component model is associated with an industrial operations intelligence platform. Steps S and S may occur simultaneously or in any order according to some embodiments.

Component model of is shown in a tree or hierarchical format which facilitates visualization and understanding of the relationships and patterns of inheritance instantiations for the various component definitions of . Component model may therefore be displayed to an administrator or user according to some embodiments. In the illustrated embodiment only components whose members are not associated with tag attributes are displayed in component model .

A plurality of relational database tables is then determined at step S based on the component model and on the object definitions. The determination at step S is based on the relationships between components objects and object members that are specified by the component model and object definitions. illustrates relationship diagram of eight database tables that are determined based on a component model according to an example of step S. Each table includes a single or multi part primary key denoted by key icons and columns for data related to the subject of the table. The solid lines between tables indicate an identifying relationship while the dashed lines indicate a non identifying relationship.

A selection of an object is received at step S. The selection indicates that the object is to be a dimension of a logical model. According to some embodiments the selection is received by schema generation module from data mart wizard . More particularly data mart wizard may execute a client application to access a corresponding server application executed by schema generation module . The client application may comprise a Web browser Java applet or any other type of client application. Accordingly the server application executed by module may comprise a Web server or other suitable server application.

The client application may request access to a data mart configuration utility using any suitable protocol. Module may perform any required authentication and or security checks before transmitting a user interface e.g. a Web page to data mart wizard . illustrates such a user interface according to some embodiments. Embodiments are not limited to the function appearance or arrangement of the user interfaces described herein.

User interface of may be presented by a display element of a device that executes data mart wizard . Interface may comprise some elements provided by the aforementioned client application and other elements provided by schema generation module . As shown interface includes Subject field and Description field . A user may populate these fields using an input element of the device executing data mart wizard . Subject field indicates the subject of the data mart to be created and Description field provides an additional description of the data mart.

Area displays a list of objects that are represented in the relational tables that were determined at step S. Area includes checkboxes for selecting one of the objects. According to the illustrated embodiment the user selects a checkbox adjacent to an object and then selects Save icon . As a result schema generation module receives a selection of the object at step S.

Next at step S module identifies members of the selected object as fact attributes or dimension attributes. Dimension attributes will be associated with dimension data of the logical model and fact attributes are to be associated with fact data of the logical model. Continuing with the current example data mart wizard may present interface of at step S. Interface includes area which presents the primitive members of the object selected at step S. The primitive members may be determined based on the relational database table s that corresponds to the selected object.

Area includes two checkboxes adjacent to each displayed member. The user may use the checkboxes to indicate whether a member is to be a dimension attribute i.e. associated with dimension data or a fact attribute i.e. associated with fact data . Some embodiments also allow the user to change a data type of a member from the data type that is specified in the selected object. The indications are transmitted to module upon user selection of OK icon .

In some embodiments of step S no indication is received with respect to one or more displayed members. These one or more members are therefore not associated with dimension data or fact data in the logical model. A user may identify some members of the selected object as fact attributes and none of the members as dimension attributes and or some members of the selected object as dimension attributes and none of the members as fact attributes according to some embodiments.

Moreover some embodiments allow the user to select more than one object in step S. The selected objects are used to define a single dimension which may be named according to the first selected object or by another convention. Primitive members of both dimensions may be displayed in interface according to these embodiments.

According to some embodiments of step S the user may select a displayed object as a dimension and issue an instruction to present a list of objects based on the selected object. The objects of the list may be determined based on the selected object and on the relationships defined in the relational tables determined at step S. The user may then select one or more of the listed objects and identify members of the selected object s as fact attributes or dimension attributes as described above.

Schema generation module associates a surrogate key column with natural key columns of the dimension at step S. The natural key columns of the dimension are associated with a set of members that provide uniqueness to the data therein. In the case of a Work Order dimension the natural key columns may be associated with Work Order ID and Work Order Date members. If the selected object is a collection object the columns defined in the collection as keys may be suggested by module to be the natural key columns. If the dimension consists of more than one collection object the union of such columns may be suggested to be the natural key columns. The user may be prompted to verify the validity of any automatically suggested or manually input natural keys.

It is then determined at step S whether more objects are to be selected as dimensions of the logical model. If so flow returns to step S and continues as described above to define another dimension of the logical model including dimension attributes and or to define fact attributes of a fact table of the logical model.

Some embodiments allow a user to select objects at step S that are not represented in the objects received at step S. For example an interface such as interface may present a Shift object and a Date object that may be selected as dimensions of the logical model. Accordingly members of these objects may be identified as fact attributes dimension attributes or neither at step S. Members of the Shift object may include Shift Name Interval ID Start Time Seconds End Time Seconds etc. Some embodiments include the Date dimension in the logical model regardless of whether the user selects the Date object.

Dimension illustrates the members of the Work Order Task object that were identified as dimension attributes at step S. Fact data on the other hand illustrates the members of the Work Order Task object that were identified as fact attributes at step S. Dimension shows members of the Date object that were indicated to be associated with dimension data. In the illustrated example none of the members of the Date object were indicated to be associated with fact data.

Dimension and dimension include primary keys Work Order Task Key and Date Key respectively. Fact data includes a multipart primary key that is composed of Work Order Task Key and Date Key. Flow proceeds from step S to step S if no further objects are to be selected for the logical model.

Relationships between fact attributes and dimension attributes are determined at step S. More particularly relationships between objects supplying the fact data and collections supplying the dimension data are mapped in step S. These mappings may be determined by querying the relational database tables determined at step S.

In some embodiments of step S module determines an object that has a defined relationship to all other objects represented in the logical model. If no such object can be determined module determines an object having the most defined relationships with the other objects of the logical model. According to some embodiments module may attempt to determine the object by inferring relationships based on column names and associated data types that are common between two or more objects. The determined object may be suggested to the user as the primary data source for the fact data.

Pull down field allows the user to specify an object that includes members that have been identified as dimension attributes. Moreover pull down fields of area allow the user to select members of the object specified in field . After all mappings are complete the user may then select Create Tables icon to transmit the mappings to schema generation module .

Next at step S schema generation module creates a dimension table that is associated with each selected object. The dimension table includes a primary key column and columns corresponding to each dimension attribute of the dimension. is a representation of Work Order Task dimension table that corresponds to logical model according to some embodiments. As shown table includes a primary key column and columns corresponding to six of the dimension attributes shown in dimension of logical model . Although they are included in table according to some embodiments columns corresponding to the remaining five dimension attributes have been omitted due to space constraints.

A sequence generator is created for each primary key column of each created dimension table at S. The sequence generator is an executable function that allows data mart to populate the primary key columns of the created tables with keys. Some embodiments also create a constraint for the primary key column of each dimension table to ensure that a dimension table does not include any duplicate primary keys. Additionally or alternatively some embodiments create a constraint for the identified natural key columns of each dimension table to ensure that a dimension table does not include two or more records with identical natural keys.

Next at step S schema generation module creates an index for the primary key column of each dimension table. The index may sort the primary key values of the primary key column according to any particular order and may associate each thusly sorted primary key value with a pointer to the dimension table row that includes that primary key value. The index may therefore be used to quickly locate a row record of the dimension table.

A function is created for each dimension table at step S. The function takes a natural key value as input and outputs a primary key value that is associated with the natural key. Such a function may enable loading of a fact table with values of fact attributes that are associated with the natural key value.

The fact table is created at step S. The fact table includes columns corresponding to all fact attributes defined in the logical model. The fact table also includes a foreign key column corresponding to each dimension of the logical model. shows fact table that is created based on logical model according to some embodiments. Fact table includes foreign key columns corresponding to dimensions and and other columns corresponding to each fact attribute of fact data . The foreign key columns are to include values that map to primary key values of the corresponding dimension tables.

Schema generation module creates an index for each foreign key column of the fact table at step S. As described above the index may sort the foreign key values of a foreign key column according to any particular order and may associate each sorted foreign key value with a pointer to the fact table row that includes that foreign key value. The indexes may therefore be used to quickly locate a row record of the fact table based on any foreign key value.

Scripts to populate the columns of the fact table and the dimension tables are created at step S. The scripts may comprise Structured Query Language SQL scripts to extract data from data store . The scripts may be created based on the object members associated with each dimension attribute and fact attribute. Module may create data mart based on the fact and dimension tables and may provide the indexes constraints functions and sequence generators to a database management system associated with data mart .

Area of interface displays the columns of the selected table. Area displays the scripts generated at step S to update the columns of the selected table. Any suitable scripting language that is or becomes known may be used in conjunction with some embodiments.

At step S of process steps components and objects may be created based on the fact table and the dimension tables. According to some embodiments a data dictionary stores information describing the structure and interrelationships of the tables. The information is used to define the components and objects. The components and objects may comply with the operations intelligence platform described with respect to step S. As such the data of the fact table and dimension tables may be viewed and monitored as otherwise provided for by the operations intelligence platform.

The primary key columns of the dimension tables are populated at step S. A primary key column of a dimension table may be populated by executing the sequence created at step S for the dimension table. Foreign key columns of the fact table are populated at step S using the functions created at step S.

As an example of step S according to some embodiments a single object may include values corresponding to fact attributes and values corresponding to dimension attributes. When the object is updated by system a record of a dimension table corresponding to the object is populated with the dimension attribute values. The function created for the dimension at step S receives the natural key of the record and outputs the primary key of the record. The primary key is placed in a record of the fact table within a foreign key column that corresponds to the dimension table and the fact attribute values of the object are placed in corresponding columns of the record.

Those in the art will appreciate that various adaptations and modifications of the above described embodiments can be configured without departing from the scope and spirit of the claims. Therefore it is to be understood that the claims may be practiced other than as specifically described herein.

