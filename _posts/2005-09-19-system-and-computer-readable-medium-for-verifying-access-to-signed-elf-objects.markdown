---

title: System and computer readable medium for verifying access to signed ELF objects
abstract: A method for verifying an Executable and Linking File (ELF) object, that includes receiving a request for an ELF object from a client, obtaining the ELF object, determining whether a signature associated with the ELF object is valid, determining whether a usage restriction is associated with the ELF object, if the signature is valid, and restricting access to the ELF object, if the usage restriction is associated with the ELF object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08312431&OS=08312431&RS=08312431
owner: Oracle America, Inc.
number: 08312431
owner_city: Redwood City
owner_country: US
publication_date: 20050919
---
This application claims benefit of U.S. Provisional Application Ser. No. 60 610 851 filed on Sep. 17 2004 entitled Signed ELF Objects in the names of Darren J. Moffat Kais Belgaied and Paul J. Sangster.

When software programs are shipped overseas or installed at various customer sites the developers of software programs may implement some security measures to ensure that only the authorized parties access the software programs. This may be implemented for example by employing certain access restrictions that are attached to the software. The access restrictions indicate which clients end users are authorized to access specified portions of a program. When a particular client is identified the client s credentials may be compared to the access restrictions to determine whether the client is an authorized party capable of accessing the entire program or particular portions of the program.

In some cases creators and or distributors of executable software may wish to restrict access to particular portions of software for legal purposes. For example current United States of America export restrictions on cryptographic products do not allow an open and documented application programming interface API that has a pluggable implementation into an encryption framework i.e. the API cannot be plugged into and taken out of various frameworks . While API developers want to export all the software as one package for multiple types of cryptographic products and multiple cryptographic algorithms export restrictions require that software for cryptographic products is restricted such that particular consumers i.e. end users may access only specific approved cryptographic algorithms.

One approach to restrict users from using functionalities provided in executable files involves cryptography where data is scrambled or encrypted for secure transfer across the network. Cryptography can be employed for example using the IPsec Internet Protocol security protocol to securely transfer data between computers across the network. Cryptography is also commonly employed using the SSL Secure Sockets Layer protocol to encrypt Web based traffic such as data sent over e commerce sites portals or secure mail servers.

Conventionally a common option to restrict software involves closing one end of the framework interface i.e. either close the end from the end user or the end from the cryptographic providers and do not include the documentation for the closed interface. However this does not allow both consumers and providers to have access to the software. Another option is to restrict portions of code provided in the software. In some instances this option may not be suitable because third parties would not be able to modify the restricted portions or provide additional software algorithms.

In general in one aspect the invention relates to a method for verifying an Executable and Linking File ELF object comprising receiving a request for an ELF object from a client obtaining the ELF object determining whether a signature associated with the ELF object is valid determining whether a usage restriction is associated with the ELF object if the signature is valid and restricting access to the ELF object if the usage restriction is associated with the ELF object.

In general in one aspect the invention relates to a system comprising a client configured to access an Executable and Linking File ELF object the ELF object configured to store executable software wherein the ELF object is signed using a signature and a verification daemon configured to verify the signature associated with the ELF object using a certificate associated with the ELF object wherein the certificate comprises a usage restriction.

In general in one aspect the invention relates to a computer system for verifying an Executable and Linking File ELF object comprising a processor a memory a storage device and software instructions stored in the memory for enabling the computer system under control of the processor to receive a request for an ELF object from a client obtain the ELF object determine whether a signature associated with the ELF object is valid determine whether a usage restriction is associated with the ELF object if the signature is valid and restrict access to the ELF object if the usage restriction is associated with the ELF object.

In general in one aspect the invention relates to a computer readable medium for verifying an Executable and Linking File ELF object comprising software instructions to receive a request for an ELF object from a client obtain the ELF object determine whether a signature associated with the ELF object is valid determine whether a usage restriction is associated with the ELF object if the signature is valid and restrict access to the ELF object if the usage restriction is associated with the ELF object.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid obscuring the invention.

In general embodiments of the invention relate to using an Executable and Linking Format ELF file to restrict portions of executable software. More specifically embodiments of the invention relate to signing an ELF object to restrict portions of ELF object. Further embodiments of the invention relate to verifying the signature within the ELF object and providing usage restrictions to ensure only authorized clients access restricted portions of the ELF object.

In one embodiment of the invention the client may be any consumer capable of using the ELF object . Additionally in one embodiment of the invention the client may attempt to access the ELF object via a framework configured to load and execute the ELF object . Therefore the framework is responsible for servicing the client s request to access the ELF object . In one embodiment of the invention the framework may be an application or related process. Those skilled in the art will appreciate that a client may employ any framework capable of loading and providing access to ELF objects.

In one embodiment of the invention the executable software stored in the ELF object may be restricted for example due to export control restrictions. Therefore in one embodiment of the invention in order to export the entire executable software package including the framework used to load and provide access to the ELF object the ELF object is digitally signed and the signature is verified using the verification daemon . In one embodiment of the invention the ELF object is signed using a private key known only to signer of the ELF object .

The verification daemon is responsible for verifying a given ELF object signature. In one embodiment of the invention the framework that loads the ELF object when the client requests access to the ELF object calls the verification daemon using a remote procedure call e.g. Solaris door function Berkley Software Distribution BSD sockets UNIX pipes etc. . Those skilled in the art will appreciate that other methods of contacting the verification daemon may exist such as forwarding a request to the verification daemon.

Subsequently the verification daemon obtains the ELF object and verifies the signature stored in the ELF object using a digital certificate not shown associated with the ELF object . More specifically the certificate not shown is associated with the signature used to sign the ELF object . In one embodiment of the invention the certificate not shown is generated by an appropriate party using a public key associated with the signer of the ELF object . In one embodiment of the invention the certificate not shown includes usage restrictions indicating which clients are allowed to access the ELF object described in below .

As noted above each ELF object contains one or more segments e.g. Segment Segment N . Segments e.g. Segment Segment N enable related sections of the ELF object to be grouped together. For example Segment may be a text segment including groups of executable code Segment not shown may be a data segment including program data etc. In one embodiment of the invention the ELF object shown in includes Segment N which contains the signature certificate name and process name . The signature section includes the digital signature used to sign the ELF object . In one embodiment of the invention the signature is a raw signature in RSA Public Key Cryptography Standards PKCS 1 format. Those skilled in the art will appreciate that the signature may be stored in the ELF object using other formats.

In one embodiment of the invention the certificate name section includes the Distinguished Name DN of the certificate. As mentioned above the certificate corresponds to the signature used to sign the ELF object. Specifically the certificate includes the public key of the signer of the ELF object and the digital signature of the certificate authority CA that issued the certificate. The signature of the CA allows the verification daemon to ensure that the certificate was issued by an appropriate party. Further the process name section stores the object identifier OID of the process e.g. RSA PKCS 1 algorithm that is used to sign the ELF object . For example if the digital signature stored in the signature section of the ELF object is signed using the Message Digest MD 5 algorithm then the process name section of the ELF object includes the OID of RSA corresponding to MD5.

Those skilled in the art will appreciate that the signature certificate name and process name sections may appear in any segment within the ELF object. In one embodiment of the invention the ordering of segments is determined by an ELF object library libELF . Further those skilled in the art will appreciate that the ELF object may include fields that are not shown in such as a section header table with information regarding each section within the ELF object etc.

Initially a client i.e. consumer attempts to access an ELF object Step . Subsequently the framework obtains and loads the ELF object Step . At this point a determination is made whether the ELF object loaded by the framework is a valid ELF object Step . For example the framework may check to ensure that the file format of the loaded object is actually an ELF binary file etc. Further in one embodiment of the invention the validation of the ELF object may be implementation specific or caller specific i.e. specific to the application that attempted to access the ELF object . If the ELF object is not valid then the process ends. Alternatively if the ELF object is a valid ELF object then the framework contacts the verification daemon using any means to contact the verification daemon e.g. a remote procedure call Step . The framework then provides the path of the ELF object to the verification daemon so that the verification daemon may retrieve the ELF object Step .

At this stage a determination is made whether the ELF object is signed Step . In one embodiment of the invention the verification daemon determines whether a signature exists in one of the sections of the ELF object. Subsequently the verification daemon performs a verify operation using the signature stored in the ELF object Step described in below . If the result of the verify operation determines that the signature used to sign the ELF object is valid Step then the framework determines whether any usage restrictions associated with the ELF object exist Step described below in . Alternatively the verify operation performed by the verification daemon may fail indicating that the signature used to sign the ELF object has been tampered with or is otherwise invalid. In either case i.e. whether the signature is successfully or unsuccessfully verified the verification daemon communicates an appropriate message to the framework Step . Those skilled in the art will appreciate that if the ELF object is not signed then the framework is notified that the ELF object is usable by all clients.

In one embodiment of the invention in order to verify the signature using the certificate the verification daemon performs a hash function using the non signature binary sections e.g. the sections shown in except the signature section of the ELF object. In one embodiment of the invention the hash function used to generate a hash value is the SHA 1 hash function. Those skilled in the art will appreciate that any appropriate hash function may also be used to hash the binary bits of the ELF object. Subsequently the verification daemon performs an RSA verify operation using the public key from the certificate and the hash value obtained from the hash function. Those skilled in the art will appreciate that any public key algorithm determined from the signature method data stored in the certificate may be used to perform the verify operation. The result of the verify operation determines whether the signature used to sign the ELF object is a valid signature. The process shown in performed by the verification daemon prevents unauthorized parties from writing executable software in the ELF object that may be used by the framework.

Continuing with if the certificate does not contain any usage restrictions then the verification daemon reports that the ELF object is not usage restricted and that any client may access the executable software stored in the ELF object Step . In contrast if the certificate includes usage restrictions associated with the ELF object then another determination is made as to whether an activation file exists Step .

In one embodiment of the invention the activation file may be shipped i.e. exported to a client site separately from the framework and the ELF object. Specifically the activation is used to enable a particular ELF object to be used by all clients even if the ELF object is signed with a certificate containing usage restrictions. Therefore if the activation file is successfully verified the activation file allows the framework to override the usage restrictions associated with the ELF object. In one embodiment of the invention the activation file is cryptographically bound to the ELF object.

Returning to if the activation file does not exist then the verification daemon reports that the ELF object is usage restricted based on the usage restrictions contained in the certificate. Alternatively if the activation file exists then the verification daemon obtains the signed activation file Step . Subsequently an activation file certificate associated with the activation file is obtained using the signer s name of the activation file Step . At this point a determination is made whether the activation file certificate is valid Step . Specifically the verification daemon obtains the signer s name and the signature from the activation file. Subsequently the verification daemon obtains the activation file certificate and checks that the certificate associated with the activation file does not contain any usage restrictions. If the activation file certificate contains usage restrictions then the ELF object usage restrictions cannot be overridden and the verification daemon reports that the ELF object is usage restricted Step .

Alternatively if the activation file certificate does not contain usage restrictions then the activation file s signature is verified using the signer s certificate i.e. using a similar process as described above with reference to Figure . Once the activation file signature is verified the verification daemon reports that the ELF object is usable by all clients Step . In one embodiment of the invention the framework is subsequently responsible for enforcing the usage restrictions reported by the verification daemon. Typically when a client identifies itself to the framework the framework may use the report from the verification daemon to determine whether that particular client is subject to usage restrictions.

In one embodiment of the invention a client attempting to access an ELF object may be located in an isolated zone that contains its own operating system and is separate from any other client or system operating from another zone. More specifically there may be one global zone i.e. a default zone and several non global zones where each non global zone includes clients attempting to access an ELF object. A non global zone provides an isolated environment for running applications. Processes running in a given non global zone are prevented from monitoring or interfering with other activities in the system. In this case each zone may include an individual verification daemon to verify the signed ELF object. In other words when clients are operating in individual zones usage restrictions are verified and applied on a per zone basis. In this manner the usage restrictions verified and applied in one zone including the global zone do not apply to clients operating from other zones.

The following examples illustrate the use of signed ELF objects and usage restrictions in accordance with one embodiment of the invention. Consider the scenario in which the framework shown in is a cryptographic framework configured to load and execute cryptographic providers. A cryptographic provider is configured to store software cryptographic algorithms such as MD5 3DES etc. As noted above export control laws do not allow an open and documented application programming interface API that has a pluggable implementation into a cryptographic framework. In this case the creator developer of the framework may employ the use of a signed ELF object in order to export the entire cryptographic framework including cryptographic providers. Specifically the cryptographic provider would be an ELF object file format. Further a client may wish to modify or add cryptographic algorithms to the cryptographic provider. In this case the addition of new cryptographic algorithms by third parties to the ELF object may require export approval.

Therefore the creator of the cryptographic provider may sign the cryptographic provider i.e. the ELF object and restrict access to particular portions of the cryptographic provider so that the cryptographic provider may be exported to other countries. Subsequently the processes shown in are used to verify the signature used to sign the cryptographic provider and determine the usage restrictions associated with the cryptographic provider. For example consider the scenario where a company has a classification that allows the company to use the cryptographic provider without any usage restrictions. In this case the cryptographic provider i.e. in an ELF object format shipped to the company may be signed by the creator of the ELF object using a private key associated with a certificate marked as enabling use by all clients. Because there is no restriction the cryptographic provider is signed with no usage restrictions included in the certificate and no activation file is included.

In contrast consider the example where a creator of a cryptographic provider wishes to offer unrestricted use by Company X as well as restricted use for all other clients. In this case the creator may sign the ELF object with a key associated with a certificate containing a usage restriction and make the ELF object available to all clients in this manner. When shipping the cryptographic provider and the corresponding cryptographic framework to Company X which is allowed unrestricted use the activation file may be included with the cryptographic provider enabling Company X to employ the activation file to override the usage restrictions and gain unrestricted access to the cryptographic provider.

Embodiments of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a networked computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The networked computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The networked computer system is connected to a local area network LAN or a wide area network via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms. Further those skilled in the art will appreciate that one or more elements of the aforementioned computer may be located at a remote location and connected to the other elements over a network. Further software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape a file or any other computer readable storage device.

Embodiments of the invention provide a method to digitally sign an ELF object by adding new sections to the ELF object configured to hold the digital signature and associated verification information. The additional ELF object sections appear such that the sections appear to be like any other module or shared object to an administrator. Further embodiments of the invention provide a method to override usage restrictions associated with particular clients using an activation file enabling the entire framework package to be shipped with restrictions while still allowing particular clients to override the restrictions.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

