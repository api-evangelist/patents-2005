---

title: Implementing a tree data storage structure in a distributed environment
abstract: Tree data storage structures are implemented on respective computers in a distributed environment, such as on a network, so that information associated with nodes of one computer's tree data storage structure may be read or written to by another computer in the network. To promote efficiency, a cache may be employed on the computers in the network such that each computer caches information associated with nodes of tree data storage structures located on the computers in the network. A lock service may implement a caching protocol to provide efficient concurrency of caching operations while ensuring that current information associated with the nodes is available to all computers in the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730101&OS=07730101&RS=07730101
owner: Microsoft Corporation
number: 07730101
owner_city: Redmond
owner_country: US
publication_date: 20050610
---
This application is related to U.S. patent application Ser. No. 11 149 593 filed on Jun. 10 2005 entitled Performing A Deletion Of A Node In A Tree Data Storage Structure filed herewith and incorporated by reference in its entirety.

The invention generally relates to data storage and specifically to tree data storage structures in a distributed environment.

Tree data storage structures such as B trees and variations of B trees e.g. B trees B trees B link trees and others are used for storing large files of information on secondary storage and for supporting insertion lookup deletion and enumeration operations. Such tree data storage structures are typically implemented on individual computers with each computer satisfying operations involving its structure without regard to information indexed by tree data storage structures on other computers. That is each computer includes its own tree data storage structure and does not for example retrieve information contained in nodes of a tree data storage structure located on a second computer even if the computers are communicatively coupled.

For purposes of fault tolerance performance scalability and information sharing it is desirable to utilize tree data storage structures in a distributed environment such as a cluster of machines on a network. Implementation of tree data storage structures in a distributed environment should promote efficient information sharing through efficient and highly concurrent B Tree operations.

The invention includes implementing a tree data storage structure in a distributed environment such as a cluster of machines on a network. Two or more computers in such a network may be communicatively coupled and each may include nodes of a tree data storage structure. One computer may include nodes of the tree data storage that are not included on a second computer in the network. The second computer however may read or write to nodes stored on the first computer. Additionally or alternatively a node of the tree data storage structure may be stored on more than one computer within the network.

To promote efficiency a cache may be employed on the computers in the network. That is each computer may cache information associated with nodes of tree data storage structures located on the computers in the network. When a first computer desires information associated with a node on a second computer the information may be cached on the first computer. Once cached the information may be read or written to depending on a concurrency protocol instituted for such caching in the network. A lock service may be associated with each computer and may implement the caching protocol to ensure efficient concurrency of caching operations while ensuring that current information associated with the nodes is available to all computers in the network.

The term tree data storage structure refers to any storage system or structure such as binary trees B trees or variants of B trees or other similar structures that provide an indexing of stored information. The tree data storage structure includes nodes branching out from a root node where each node may include information consisting of one or more keys an operation such as less than or greater than and or information typically referred to as a pointer regarding a descendent node. Such structures may be used for storing large files of information and such information may be stored on a secondary storage device such as a disk. The term identifier refers to a form of or a substitute for a pointer of a node of a tree data storage structure that may be used to identify only one past or present node of a tree data storage structure and is used to map the node to a location in persistent storage. The term cache refers to a high speed storage mechanism that may be either a reserved section of main memory or an independent high speed storage device.

The term operation refers to functions performed using a tree data storage structure such as for example reading or writing to a node of the structure. The term lock refers to a function used in multi computer or network systems to maintain file or information integrity or consistency by preventing conflicting operations. That is if an operation is being performed then no conflicting operations will be allowed. A lock acquisition may be required before each operation to ensure that operations do not conflict.

While a general purpose computer is described below this is merely one example. The present invention also may be operable on a thin client having network server interoperability and interaction. Thus an example embodiment of the invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as a browser or interface to the World Wide Web.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a central processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

The computer A may include program code associated with a tree data storage structure . A node A and a node A may be stored in the storage module . The computer B may include program code associated with a tree data storage structure as well. A node B and a node B may be stored in the storage module . Thus computer B may include node information different than the computer A . Each node may include one or more keys and either a pointer or a unique identifier as that term is disclosed and used in U.S. patent application Ser. No. 11 149 593 filed on Jun. 10 2005. One or more of the nodes may additionally include data paired with each key. Alternatively only leaf nodes or the nodes on the outermost ends of branches of the structure may include data key pairs.

In the distributed system each computer may have access to data associated with nodes on other computers . For example the computer A may have access in this distributed environment system to nodes associated with node information stored on the computer B . Communication of such information may take place through the network system by any appropriate method. In this way for example the computer A may perform an operation associated with the node B on the tree data storage structure of the computer B . Such operations may include a read operation in which information associated with the node B is read at the computer A . An operation may be also include a write operation in which information is written to the node B . Appropriate mechanisms may be employed to coordinate concurrent access to the nodes . One such mechanism may use a service to provide coordinated locking of nodes during such accesses.

Additionally each computer may include a cache respectively and may be in communication with a lock service . In alternative embodiments the lock service may be located on respective computers on other client computers not shown or on other server computers not shown . The cache on the computer A may include node A information and node A information associated with respectively the nodes stored in the storage module . In this way the computer A may read information stored in or write information to one or more of the nodes on the storage module or to other nodes on the storage module . Likewise the cache on the computer B may include node B information and node B information associated with respectively the nodes stored on the storage module . Thus the computer B may read information stored in or write information to one or more of the nodes or to other node nodes on the storage module .

The cache may provide in conjunction with the lock service an efficient implementation of the tree data storage structure in a distributed environment such as the system . While the system described with regard to is capable of proper implementation of the tree data storage structures in a distributed environment such implementation may not be optimal because for example each time the computer A reads information located in or writes information to the node A for example it will be required to retrieve the information from the storage module . Such a requirement may slow operations performed by tree data storage structures in a distributed environment. Including as in the system the ability to cache information associated with any nodes on the computers or on other client or server computers in the network system may promote operation execution efficiencies.

Thus the cache may include information associated with nodes of tree data storage structures or more specifically keys pointers or unique identifiers and or data that are contained in nodes within the distributed system . Each cache may operate according to a protocol managed or executed by the lock service . The protocol may implement consistency semantics such that each computer and server computers if applicable is operating consistently to lock and release nodes that are or are to be cached in multiple locations. In general the cache acquires a lock from its lock service so that it can cache certain nodes on the respective computer .

For example if the computer A or the tree data storage structure is going to cache information associated with the node A so that the data therein contained i.e. a pointer or unique identifier key data may be read or written to then the lock service may be requested to place a lock on the node A . The lock service may determine the status of the node A e.g. whether the node A is being written to or read by another computer such as the computer B in the network system and apply a locking semantics protocol to determine if the computer A may acquire a lock on the node A to read or write to the information therein contained.

If at step a lock is determined to be currently acquired on the node then at step the lock service may check to determine whether an exclusive lock has been handed out. If an exclusive lock has been handed out then the lock server may send a revocation request to the holder of the lock which will wait until a write is completed and release the lock. If at step it is determined that a requested lock was for a write operation then the method may wait until the current writing is completed and the exclusive lock is released. If at step it is determined that the requested lock was for a read operation then the lock service may provide a lock to the requesting entity e.g. the client computer or the tree data storage structure at step so that information associated with the node as it existed prior to the commencement of the current writing may read. All shared locks may be revoked when a write completes. During a write operation however a lock may be acquired so that the requesting entity may read the last version of the information associated with the node as it existed prior to the current writing to the node.

At step the lock service may determine whether data is still being written to the node and if so the requester continues to retain a lock to read access the prior version of the information associated with the node. When the writing is complete or if the data was not being written to the node when the lock request was made at step then the lock service may determine at step whether the requested lock is to read or to write information to the node. If the requested lock is for reading the data then at step the lock may be granted for a read of the current version of the data. Such a lock may be a shared lock allowing other entities desiring to read the information to also obtain a lock. If the request lock was for writing information to the node then a lock may be acquired by the requesting entity to write data to the node. Such a lock may be an exclusive lock that prevents other entities from obtaining a lock on the data during the writing to the node. Other entities may acquire a lock to read that last version of the information associated with the node i.e. the information as it existed prior to commencement of the current writing to the node .

The method thus may promote efficiency by enabling data to be read concurrently with data being written to the pertinent node. While the read may not be of the latest version of the information the latest version of the data may be provided at the next read after the writing is completed. The semantics described with regard to the method may be appropriate for the tree data storage structure algorithm which may tolerate stale data.

If at step the requested node is locked then the lock service may at step determine if data is being written to the node at the time that the lock is requested. If data is not being written to the node at that time then the lock service may determine at step if the current lock on the node is a shared lock or an exclusive lock. A shared lock generally provides authority for the entity holding the lock to read but not to write to the node. An exclusive lock that is a lock that prevents any other entity from obtaining any type of lock provides authority for the entity holding the lock to write information to the node. If the lock service determines that the current lock is a shared lock then the entity requesting the lock may be provided a shared lock to read data at step . If the lock service determines that the current lock is an exclusive lock then the entity holding the exclusive lock will be provided a shared lock and lose the exclusivity of the lock if the write operation is complete and the requesting entity will be provided a shared lock at step . Thus both the requesting entity and the entity holding the lock originally will both be able to read information associated with the node but will not be able to write information to the node. Additionally if one or more other client computers desire to read the information associated with the node more shared locks may be provided.

If instead of a shared lock the requesting entity desires an exclusive lock e.g. the requesting entity will write data to the node then the lock service will remove the lock previously acquired by any other entity and provide the lock to the requesting entity.

Whether the lock service provides a shared or exclusive lock depends on whether data is being written at the time that the lock is requested. Thus if at step data is currently be written to the requested node then at step the lock service may wait until the writing is complete before providing any lock to the requesting entity. If at step the writing is complete then the lock will be provided to the requesting entity in the manner described above with regard to steps . If the writing is not complete at step then the lock service and the requesting entity continues to wait for the writing to be completed.

Thus the method differs from the method in that the method does not include providing a requesting entity a lock to read a previous version of data while a write operation currently is being performed. Thus whether implementing the method or the method the cache may include information regarding a node that is more up to date than as reflected in the rest of the system. Therefore in one embodiment of the invention the caches are of the write back cache known to those skilled in the art. Of course alternative embodiments of the invention may include other types of caches.

The methods of the present invention may be implemented in hardware software or where appropriate a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in computer readable medium. A processor that executes program code for performing the steps of the methods of the invention as described in and as claimed constitute a computer system that embodies the present invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the specific examples in conjunction with the various figures it is to be understood that other embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. The examples are offered in explanation of the invention and are in no way intended to limit the scope of the invention as defined in the claims. In summary in no way is the present invention limited to the examples provided and described herein. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

