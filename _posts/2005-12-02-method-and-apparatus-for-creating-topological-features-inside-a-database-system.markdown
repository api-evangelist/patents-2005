---

title: Method and apparatus for creating topological features inside a database system
abstract: A technique used in a relational database management system that provides a topology data model in which topological elements are stored in topology element tables. The technique allows topological elements to be added to the topology element tables while a feature specifier that represents a feature composed of the topological elements is being defined in the topology data model. The feature specifiers are inserted into fields of a feature column in a feature table. The features belonging to a given feature table define a feature layer. A feature layer may have a child feature layer, and in addition to representing a set of topological elements, a feature specifier may represent a set of features belonging to a child feature layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08438186&OS=08438186&RS=08438186
owner: Oracle International Corporation
number: 08438186
owner_city: Redwood Shores
owner_country: US
publication_date: 20051202
---
This application is closely related to U.S. Ser. No. 11 293 487 Frank Lee et al. Incorporating network constraints into a network data model for a relational database management system which has the same assignee as the present application and is being filed on even date with the present application.

The invention relates generally to database systems and more specifically to techniques for manipulating topological features in a database management system.

Spatial information is information that describes an object in terms of two or three dimensional space. One example of spatial information is a map of a city. Historically techniques for representing spatial information in computer systems have developed separately from techniques for representing non spatial information. Non spatial information such as information about employees or financial information has generally been represented by sets of tables in a relational database management system. The information has been stored in rows in the tables and relationships between items of information have been represented by the presence of the items in a row of a table or by relationships between rows of the tables. Spatial information has typically not been represented by sets of tables in relational database management systems. This difference between the way non spatial information and the way spatial information have been represented and stored in computer systems has caused problems for the users of the data. For example in a government entity that depends on property taxes for revenue it is desirable that the information used to collect property taxes be closely linked to the descriptions of the property on which the taxes are collected so that for example a map of the property being taxed was part of the property tax records and a change to the property map resulting from a real estate transaction would automatically result in a corresponding change in the tax records.

A first approach to storing spatial information such as property descriptions in relational database management systems was to describe each piece of property and entities such as streets lakes or rivers as polygons on a grid. This geometric representation of spatial data had a number of problems. One problem with this mode of storing information was that it did not take into account the fact that adjacent pieces of property shared one or more boundaries rather than having separate boundaries. Consequently when the boundary of one piece of property changed the effect of that change on adjacent pieces that shared the boundary had to be taken into account. If that was not done holes developed in the property database. To prevent holes one had to figure out what pieces of property were adjacent to the one whose boundaries had been changed. Doing this was computationally intensive. Another problem with the geometric approach was that it was difficult to make a geometric representation of spatial information which was equivalent to a typical map that provided a single representation of all of the relevant information. An example is a subdivision map that shows not only the boundaries of the property but the streets the sanitary and storm sewerage the water power and information distribution systems the street lights the traffic signals and so forth.

These and other problems of geometric representations of spatial data were solved by the adoption of topological representations of spatial data. Topology describes the characteristics of a geometric figure which are invariant under continuous deformation of the coordinate space. For example a CD is topologically identical to a funnel just deform the disc by pressing its center downwards. Calculating properties such as adjacency colinearity and containment from geometrical representations is computationally intensive. Topological representations allow these expensive geometric comparison algorithms to be recast as simple combinatorial search algorithms.

When a topology is used to represent spatial information information is added to the nodes edges and faces of the topology to specify features in the spatial information that are represented by the nodes edges and faces. A feature is a spatial representation of a real world object. The feature is stored in the topology as a set of topological elements here nodes edges and faces . For example some faces might represent parcels of real estate some edges might represent streets and some nodes might represent street lights. There are two kinds of such added information what kind of feature the elements belonging to the feature represent and the geometry of the feature that is its location in a system for specifying the locations of nodes and faces. shows topology which is identical to topology except that a system for specifying locations of elements has been applied to it. Here the system is a two dimension grid . Using the grid one can specify the location of each node in topology by means of a pair of coordinates the location of each edge by means of the coordinates of the nodes at which the edge starts and ends and the coordinates of each of its corners and the location of each face by means of the corner coordinates of a minimum bounding rectangle for the face thus node N is at edge E has vertices and face E is at the universal face however does not have a bounding rectangle.

In system object relational database system server is simply the system in which the topology data is stored and manipulated. The object relational database system provides a built in type for geometric data but the manner in which topology data is stored and manipulated is determined completely by non RDBMS supplied topology engine and the tables used to store the topology data and the code used to manipulate it are defined by the makers of topology engine . Server includes the following standard database system features an Oracle 9i object relational database system a set of language drivers which permits the use of various programming languages to specify operations in database SQL and PL SQL engine which manipulates the data in object relational database and object relational database itself. One of the drivers is Oracle Call Interface which permits applications to specify database system operations in C code as shown at arrow and which translates the specified operations into the SQL and PL SQL code that is executed by engine .

Within database system are stored tables containing topology data. The elements of the topology are contained in topology element tables . The form of these tables is defined by topology engine . For a given topology there is a node table which has a row for each node of the topology an edge table which has a row for each edge of the topology and a face table which has a row for each face of the topology. Contained in the row for each of the elements is information about the relationships of the elements to neighboring elements and the location of the element as specified in the system that is used to specify locations in the given topology.

The topology data is organized into features by topology engine feature table and topology engine feature table view . These tables too are set up and maintained by topology engine . By executing programs in topology programs a user of topology engine may create features consisting of nodes edges and or faces defined in the topology s topology tables and perform operations on the data in topology tables in terms of those features. For example if a feature consists of all of the street signs in the topology and a new street sign is to be added the user of engine need only specify that a street sign is to be added and its location engine will execute programs as required to add the street sign to the street sign feature and will create a node for the street sign in node table . Engine will perform its operations in response to programs executing in server or in response to input from clients of server which are connected to server by a network.

Topology engine is a program that executes on server . Feature table triggers are user defined database system triggers. A trigger is code that is executed in the database system in response to an event that occurs in the database system. The trigger specifies the kind of event which is to cause its execution and the trigger s code is executed when the event occurs. In the case of feature table triggers the trigger code executes a call back.

Operation of topology engine will be described using the example of adding a street sign described above. The street sign feature is defined in feature table consequently a change in the feature requires a change in table and the change in table will require changes in other tables in tables . An input from a client spatial application to topology engine specifies that the street sign be added to the topology topology engine responds to the input by executing C code specifying that feature table view be modified to add the new street sign to the street sign feature. OCI interface generates the SQL required to modify feature table view . The modification of feature table view causes a trigger to be executed. Trigger executes callback code that modifies topology engine feature table as required by the modification of feature table view . If the operation involves adding deleting or modifying a node edge or face the callback code will specify an operation on the relevant table in topology element tables . In this case the operation is adding a row to node table . The row is for the node that represents the new street sign.

Server with spatial processing environment does permit users of spatial applications to deal with topology data in terms of features and is consequently effective for its purpose however it does not provide a general mechanism available to all users of server for organizing topology data into features. Further the technique of using triggers on feature table to do callbacks to Java callback code is relatively inefficient particularly if the modifications involve a large number of features.

OTDMS system includes OTDMS defined spatial data . spatial data includes node table edge table and face table which respectively contain rows describing nodes edges and faces and which together make up topology element tables . Spatial data also includes topology and spatial metadata which is data about the spatial information in topology element tables . Included in the metadata are indexes which include spatial indexes and B tree indexes . Spatial data also includes relation table which relates nodes edges and faces in tables to features. Each feature has a feature specifier FS each row in relation table relates a FS to a node edge or face that is a component of the feature by relating the row for the node edge or face in any of tables and to the FS as shown by arrow . Relation table may further relate a given row in any of these tables to any number of features. Also included in spatial metadata is B tree index on relation table .

User defined feature tables may be defined with columns which represent layers of features. Each such column represents a layer and the column s values are FS s which specify features belonging to the layer a row in such a feature table thus relates other information about a particular feature of a layer to the elements belonging to the feature in any of tables and . To continue with the street sign example feature table would be a street sign data table that has an entry for every street sign in the topology with the FS for the entry specifying the street sign s place in the topology and the other information dealing with things like when the street sign was installed what kind of street sign it is what its current condition is and when it is scheduled for replacement.

The last item of spatial metadata is layer info view which contains a row for each layer that belongs to a feature table owned by a particular user of server . The row relates the layer to a column in a user defined feature table belonging to a particular topology. Included in row is an identification of the feature s layer. As shown by arrow this identification also appears in the rows of relation table that specify elements of features belonging to the layer. In summary view relates feature layers to columns in feature tables the feature specifiers in a column in a feature table specify features belonging to the column s layer rows in relation table finally relate each feature to the rows in topology element tables that contain the topological elements that make up the feature. An advantage of this arrangement is that a given topological element may belong to many different features.

Execution of operations on spatial data in editing mode is speeded up in OTDM system by the use of spatial data cache which is a copy in memory of the portion of topological element tables in a user defined minimum bounding rectangle of the topology which is currently being edited by OTDM system .

In management mode any application program can use OTDM system to perform operations including the following 

The operations provided by interface in topological editing mode include operations on the topo map which is the cached portion of the spatial data for a topology operations on elements of the topology and an operation which sets a FS field in a row of a feature table to specify a feature in spatial data . Doing the operations in cache increases the efficiency of reading and modifying the spatial data and also permits concurrent editing operations in non overlapping areas of the topology.

The topo map operations include creating a topo map loading it from spatial data updating it after a series of topological editing operations validating it rolling it back to a previous state dropping the topo map and committing the topo map that is writing the information currently in the topo map back to spatial data .

The operations on the topological elements include adding moving and removing nodes and edges and updating the coordinates of an edge as well as getting lists of nodes and edges and getting information about nodes and edges.

Continuing in more detail the topo map object is created in cache at at the spatial data for a topology or a portion of the spatial data for a topology is loaded into the topo map. The spatial data loaded into the cache includes data from topology element tables and data from topology and spatial metadata . Then editing begins. As the editing operations are performed the user can periodically validate the topo map at . The validation operation checks the consistency of the topo map as it stands at the time of the validation operation. The user can also periodically rebuild the indexes used to speed access to edge and face information . To save the current state of the topo map in spatial data the user performs the update topo map operation at and . All edits on the topo map since the last update are written to spatial data and editing then continues at that point as shown by arrow . When the editing operation is done the user may commit the updates to spatial data and the most recent changes to the topomap at and and that done may remove the topo map from the cache or simply clear the cache . Editing may then continue with a new topo map arrow . Flowchart applies equally to editing mode using JAVA API the only difference is the function and procedure names employed in the API.

The following discussion of features will first provide a functional overview of features will then provide details of how features are represented in OTDM system and will finally describe how feature tables are set up.

As previously set forth a feature is a spatial representation of a real world object. The feature is stored in a topology as a set of topological elements. Within a topology the features are organized into layers. A layer is simply a set of features that belong together from the point of view of the maker of the topology. For example in the linear features all represent streets and might be organized into a street layer while the point features might be organized into a traffic sign layer and the area features into a land parcel layer. Typically there would be a feature table corresponding to each layer with feature specifiers representing the topological elements making up the layer. In the above examples all of the features in a particular layer belonged to the same type however a layer may also contain features belonging to different types. Such a layer is termed a collection layer. An example of a collection layer in would be one which was made up of the features related to the parcel P that is the parcel the traffic sign S and the street R.

The feature layers of a topology may also be organized hierarchically. When the feature layers are organized hierarchically a layer of the hierarchy may be the parent of another layer of the hierarchy. The other layer is then the child of the parent layer. A given layer of the hierarchy may have more than one parent layer but a given parent layer may have only one child layer. The feature specifiers of the parent layer may represent features whose elements are not topological elements but rather are feature specifiers in the child level For example a land use topology might have feature layers for features representing parcels of land. The feature layers would be organized as follows 

The elements of a specified by a feature specifier are represented by one or more rows in the RELATION table for the topology. Each of the rows specifies an element of the feature and the layer the feature belongs to if the features are organized into hierarchical layers the element may be a feature represented by a feature specifier in the child layer of the layer otherwise it is a topological element of the feature. Shown at is an example RELATION table. The columns of Example RELATION table and therefore the fields of its rows that are relevant to the present discussion are the following 

As shown by arrows and each row for a feature in table has the layer ID for the layer the feature belongs to 0 if none is specified for the layer and the ID for the feature itself. Further as shown by arrow each row that represents an element of the feature has the ID for the feature s topological element. Here the features are street signs which are point features and consequently the single node which is the element making up the feature is specified by a row in NODE table .

Feature layers are related to feature tables by layer info view which in a preferred embodiment is a view called xxx SDO TOPO INFO where the xxx indicates the user to which the information in the view belongs. Shown in are the details of row in the view. There is a row for each feature layer that is defined for the user to whom the table belongs. Information in the fields of the row that are of interest in the present context fall into three categories information about the topology information about the feature table and information about a layer . In more detail the fields are the following 

As will be immediately apparent tables make it possible to get from feature specifier to the rows for the feature in RELATION table and from there to the rows for the elements making up the feature in tables and . Layer info view also makes it possible to get from a layer ID to the feature table the layer s features belong to and to the column in the feature table that contains the feature specifiers for the layer. RELATION table and layer info view also make it easy to determine which feature specifiers are affected by changes in RELATION table and which rows in table are affected by changes in the feature specifiers or changes in rows in tables and . This in turn makes it easier to maintain consistency between feature specifier rows in table rows in view and rows in tables and .

In a prior art version of system features are built from elements that already exist in topology element tables . Because the elements already exist the elements are referred to in the interface that is used to make features by their ID numbers in tables . Moreover because the elements already exist creation of the features does not modify information in element tables and consequently the features can be created in management mode.

Flowchart of gives the details of this prior art technique for creating features. As shown at the method of the flowchart can only begin after the topology to which the feature belongs has been created and its topology element tables have been loaded at least with the elements that belong to the features. The first step is to make an empty feature table for each feature. Included in each empty feature table is a column whose values are feature specifiers in a preferred embodiment these values have the type SDO TOPO GEOMETRY shown at in . If RELATION table does not already exist the next step is to make an empty RELATION table . Then a row is made for each layer in the feature table in layer information view . The row associates the name of the feature table the name of the column for the feature layer s feature specifiers the layer s layer ID and the type of the layer. . The layer id indicates the layer that features specified in the column for the feature specifiers belong to. If the layers are to be hierarchical the user can indicate a layer that the layer being specified is a parent of and that is indicated in the row as well.

When all of the feature tables have been thus processed the feature specifiers for the features may be added to each feature table in turn. The processing for this stage of the method has two loops an inner loop which adds each feature to a given feature table and an outer loop which processes each feature table in turn. At processing of the current feature table begins. In inner loop a row is created in relation table for each element of each feature in the current feature table s layer and a feature specifier is created for each feature in the current feature table for the feature and inserted into a row of the feature table . After all of the features have been processed for all of the tables the topology is ready to be queried or edited . Among the querying operations is one which returns all objects in the topology which interact with the elements of a feature that is specified by its layer ID and feature ID.

A problem with the technique of is that it separates the task of adding elements to topology element tables from the task of organizing the elements into features and feature layers. Because this is the case the elements that are being organized are already in topology element tables and must be referred to when they are organized into features by their IDs in those tables. What this means for a user of system is that he or she cannot make the elements into features as they are being added to table but must instead keep track of the IDs assigned to the elements that make up a feature so that he or she can use those IDs later to make the elements into a feature A further disadvantage of the technique of is that it cannot guarantee that the topological elements being added to tables are consistent. It is an object of the invention disclosed herein to overcome these limitations and thereby provide an improved system .

The foregoing object of the invention is achieved by a technique for making a feature specifier that represents a set of topology elements in a topology data model. In the technique the topology elements for the feature are inserted into the topology element table as the feature specifier is made. When viewed as a method the technique has the steps of receiving a specification of a set of topology elements for each topology element in the set making a row for the topology element in the topology element table if it does not yet have one making a row in a relations table which relates the topology element s row to the feature specifier and when rows have been made in the relations table for all of the topology elements in the set providing the feature specifier.

In another aspect of the invention the relational database system includes a feature table having a feature column whose values are feature specifiers and the method further includes the step of inserting the feature specifier into a field belonging to the feature specifier column in a row of the feature table. There may also be a number of feature tables and a specification of a feature table and a feature column in the feature table are received along with the specification of the set of topology elements.

In a further aspect of the invention the features belonging to a given feature column make up a feature layer and in the step of making a row in the relations table the feature specifier is further related to a specifier for the feature layer.

A feature layer may have a child feature layer and the topology data model includes a feature layer table which relates a parent feature layer to its child feature layer. The feature specifier may either represent a feature that is a set of topology elements or a feature that is a set of features from the child feature layer. In the latter case what is specified is the parent feature layer and a set of the features belonging to the child feature layer and the rows in the relations table for the feature specifier relate the feature specifier to the features in the set of features belonging to the child feature layer. A feature level may include feature specifiers for both sets of topology elements and sets of features belonging to the child feature layer. Other objects and advantages will be apparent to those skilled in the arts to which the invention pertains upon perusal of the following Detailed Description and drawing wherein 

The technique begins as did the prior art technique except that the elements of the feature have not yet been loaded into topology element tables . Thus as indicated by box a set of empty feature tables has been made. Each column for a feature layer is included in one of the tables. Then an empty relation table has been made when that is done a row is made in layer info view for the current feature table and the current feature layer in the table. The latter process is continues until all of the feature tables have been processed. All of this is done in system s management mode.

Technique then continues by loading the portion of the topology being modified to cache so that further processing of the features may be made in topological editing mode. Topological editing mode is required in a preferred embodiment because technique adds the topology elements belonging to a feature to the cached portion of topology element tables as it creates the feature. The advantage of doing this is that the topology can be periodically checked for consistency as shown in as the new topology elements are added. Then for each of the feature tables the technique performs loop including decision block and for each feature in the current feature table the technique performs loop including decision block . In loop the features are processed by the layer to which they belong. For each feature the technique first creates or reuses a row in the cached portion of topology element tables for each new element of the feature . If the topology element already exists in topology element tables the technique simply goes on to the next topology element of the feature. The elements are derived from a geometry object associated with the feature and the topological element data in cache . When the elements have been created or located a set of topological element IDs associated with the feature is returned.

Next the technique assigns a feature ID to the feature and creates a row in the cached copy of relation table for each of the feature s elements including those already present in topology element tables . The fields in the row contain the feature ID for the feature the ID for the associated element in tables the layer ID for the feature and the feature s type. The layer ID and the type for the row come from layer info view . Once the row has been created in relation table the feature specifier for the feature is inserted into the column of feature table that corresponds to the layer the feature belongs to. The contents of the feature specifier come from the feature ID layer ID and feature type specified in the rows for the feature in relation table and from the topology ID field for the layer in layer info view . . Once all of the features in all of the feature tables have been processed as just described the topology with the newly defined features is ready to be queried or edited .

In a preferred embodiment the steps labeled in technique are performed by one of the functions shown at in . There are two such functions function creates features whose elements are topology elements. In so doing function makes rows for the feature s new topology elements in topology element tables creates rows in relation table which relate the feature to its topology elements and returns a feature specifier for the feature to be inserted into the field that belongs to the column for the feature s layer in the feature table.

Function makes features whose elements are features represented by a set of feature specifiers in a child layer. For example if there were a county feature table which had a row for each county in the US and a county topology column whose values were FS s for the county features a state feature table which had a row for each state in the US and a state topology column whose values were FS s for the state features and the feature level of the county features was the child of the feature level of the state features function could be used to make an FS in the state topology column in the Massachusetts row which represented the features represented by the FS s from the rows for the Massachusetts counties in the county feature table.

Beginning with function the parameters for the function include at the name of the topology the feature table to which the feature specifiers are being added belongs at the name of the feature table itself and at the name of the column that specifies the layer to which the new feature specifiers belong.

geom parameter is a geometric description of for the feature. The geometric description is stored in a single row in a single column of object type SDO GEOMETRY in a user defined table. Tables of this sort are sometimes referred to as spatial tables or spatial geometry tables. The type definition looks like this 

Function works as described at in . The function uses the geom parameter to create the rows for the feature s elements in topology element tables . The function that creates the rows returns the IDs in topology element tables for the elements. Next function makes rows in relation table for the elements of the feature. In so doing the function uses the topology table name and column name parameters in layer infoview to find the row in the view for the layer that the feature belongs to and obtains the information for fields TG LAYER ID and TOPO TYPE of relation table rows for the feature elements from that row obtains an identifier for the new feature from system for field TG ID of the relations table rows and places the ID for an element of the feature in TOPO ID field . When all of the rows for the feature s elements have been made in relation table the function makes and returns the feature specifier for the feature.

Function has the same parameters as function except for the last parameter dml condition which specifies the condition which is the basis for selecting rows of the feature table whose features are to be represented by an FS for the of the parent layer. The child layer is specified at child layer id field of the parent layer s entry in layer info view . The value of field can be used to locate the child layer s row in layer info view .

Function works as follows to begin with since the elements of the feature already exist in topology element tables function does not perform step of technique . Instead it locates FS s for the feature in the rows of the child feature layer s feature table that satisfy the condition specified at dml condition . As each FS is retrieved from a row which satisfies the condition function makes a row for the element of the parent layer s feature represented by the returned FS in the parent layer s feature in relation table . In these rows the values TG ID and TG LAYER ID are those of the parent layer s feature rows and contain information specifying the rows in relation table for the elements of the child layer feature. When rows for all of the new parent feature s elements have been added to relation table the FS for the new parent feature is made from the parent feature s TG ID and TG LAYER ID in relation table and the information for the parent row s type and topology in layer info view and returned as described above with regard to function . Function thus performs an aggregation operation on the features in the child layer which results in a FS belonging to the parent layer which represents a selected set of the features belonging to the child level.

Beginning with example the example is a loop which inserts FS s into a feature table named traffic signs that belongs to the topology CITY DATA. traffic signs is a table of traffic signs. It has at least two columns a column for the traffic signs names and a column for their FSs . At is a record sign rec which has one field which is the name of the sign and another field of type SDO GEOMETRY which contains the geometric description of the sign s feature. At is specified a spatial geometry table traffic signs geometry. This table has a row for each traffic sign and at least two columns one for the name of the traffic sign and one for its geometry. Fields belonging to the latter row have the type SDO GEOMETRY. As shown in the FOR ..LOOP clause at on each iteration of the loop the next row in traffic signs geometry is read and the values of the row s name and geometry fields are read into sign rec. In the INSERT INTO clause at values derived from the current values of sign rec are inserted into the next row of traffic signs. The values are inserted in the order of the fields in the row of traffic signs. Here the first value is the name of the traffic sign from sign rec. name and the second value is the FS returned by function . The function is invoked with the topology name CITY DATA the feature table name TRAFFIC SIGNS the feature column name FEATURE and the current value of the geometry field in sign rec. As described above example creates rows for the feature s elements in topology element tables rows for the feature in relation table and returns the FS for the feature. When the loop is finished executing a feature for each of the traffic signs in traffic signs geom has been created and the traffic sign s name and the FS for its feature have been inserted into rows in traffic signs.

In example SC is the name of a hierarchical topology with a state parent feature layer at level and a county child feature layer at level . Assuming that a county feature table SC AREAS that has a feature column for the features belonging to the county child feature layer has been populated with some county geometry objects using function this example demonstrates how function may be used to create a feature column that is associated with the state parent feature layer in the state feature table sc p areas using feature specifiers from the county feature table SC AREAS . Function performs an aggregation operation on the rows for those counties in the county child feature table that are associated with a particular state. As a result of the aggregation operation a single FS in the particular state s entry in sc p areas represents the features for all of the counties in the particular state.

The state feature table sc p areas in example has columns f name for a state abbreviation p name for a country abbreviation and feature for FS s for the state feature layer. There is a row in the state feature table for each state. The county feature table SC AREAS has columns FEATURE is the name of the county feature column p name in is the name of the state abbreviation column and c name not shown in example is the name of the county name column.

 p name NH is a string specification of a dml condition which specifies that only the FSs from the county feature layer which are in rows in the county feature table in which the state abbreviation is NH are to be selected by function . Function is invoked at with parameter values SC for topology SC AREAS for a child feature table name FEATURE for a feature column name in SC AREAS and p name NH for a dml condition . When function is executed in example a query is run on SC AREAS to retrieve all of the rows for counties in New Hampshire. For each row information in the FS in FEATURE for the row is used to make a row in relation table for that element of the feature represented by the new feature specifier in New Hampshire s row in sc p areas. The row in relation table refers to the row in that table for the feature in SC The rows for the elements of the state feature in relation table thus specify other rows in table instead of TOPO IDs in topology element tables . After a successful execution the function returns a FS for the New Hampshire state feature in the state feature layer. The feature represented by the returned FS specifies rows in relation table for county features for all of the counties in New Hampshire. After function is executed at the SQL insert statement in example is executed. It inserts the FS returned from function in the row of the state feature table sc p areas with the field values NH and US .

The foregoing Detailed description has disclosed to those skilled in the relevant technologies how to implement and use the inventive techniques for making feature specifiers as the topology elements represented by the feature specifier are added to the topology element table and for combining feature specifiers for sets of topology elements with feature specifiers for sets of features in a child feature layer. The inventors have further set forth the best mode presently known to them of practicing their techniques. It will however be immediately apparent to those skilled in the relevant technologies that there are many possible implementations of the principles of the inventive techniques. In particular as disclosed herein the inventive techniques are implemented in a preexisting relational database management system that has a preexisting topology data model and necessarily reflect characteristics of the relational database management system and of the topology data model in which they are implemented. Moreover the forms of the APIs used to implement the inventive techniques fall into the realm of designer s choice. Further as would be expected the APIs too reflect the properties of the relational database system and the topology database model. The same can be said for the precise forms of the feature specifiers the relations table and the layer information view as well as for the precise forms of the topology elements. For all of the foregoing reasons the Detailed Description is to be regarded as being in all respects exemplary and not restrictive and the breadth of the invention disclosed herein is to be determined not from the Detailed Description but rather from the claims as interpreted with the full breadth permitted by the patent laws.

