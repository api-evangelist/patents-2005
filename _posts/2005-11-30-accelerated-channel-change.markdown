---

title: Accelerated channel change
abstract: Channel changing can be accelerated by multicasting a bouquet of multicast burst streams from a server. In an example implementation, each multicast burst stream is delayed sufficiently so that a past independent frame is available for delivery to and display by a client device without waiting for a future independent frame. A multicast burst segment of a multicast burst stream includes a portion in which the bandwidth exceeds the nominal data rate of the underlying resource being streamed. The temporal delay between adjacent multicast burst streams in a multicast bouquet is set responsive to a maximum client delay time for tuning to a new resource stream.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08135040&OS=08135040&RS=08135040
owner: Microsoft Corporation
number: 08135040
owner_city: Redmond
owner_country: US
publication_date: 20051130
---
Digital television enables network service providers to offer many new capabilities and services. For example modern video compression decompression algorithms codecs enable many digital channels to be squeezed into bandwidth that is otherwise consumed by only a few analog channels. Additionally using digital media streams facilitates the offering of video on demand VOD programs. Digital media streams also facilitate the inclusion of other related data along with the television signal transmission. The other related data may be used to offer additional interactive services.

However digital television suffers from one drawback that frustrates many customers and therefore concerns industry players. Changing channels is usually much slower with digital television as compared to traditional analog television. Analog channel changes which often take 300 500 milliseconds ms are generally interpreted by viewers to be essentially instantaneous. Digital channel changes on the other hand are usually not interpreted to be instantaneous.

Many current users of digital television are familiar with the black screen that greets them for a number of seconds as they switch to a new digital channel. In fact channel changes with digital television can take several seconds e.g. up to 3 5 seconds with current codecs. Although future codecs will likely consume significantly less bandwidth than current ones these future codecs may very well stretch this channel changing delay to a seemingly unacceptable period of over 10 seconds.

Channel changing can be accelerated by multicasting a bouquet of multicast burst streams from a server. In an example implementation each multicast burst stream is delayed sufficiently so that a past independent frame is available for delivery to and display by a client device without waiting for a future independent frame. A multicast burst segment of a multicast burst stream includes a portion in which the bandwidth exceeds the nominal data rate of the underlying resource being streamed. The temporal delay between adjacent multicast burst streams in a multicast bouquet is set responsive to a maximum client delay time for tuning to a new resource stream.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Moreover other method system scheme apparatus device media procedure API arrangement etc. implementations are described herein.

Media sources provide media content to acquisition infrastructure . Media content may be broadcast television movies premium channels or multimedia files generally. Media content usually comprises audio and or visual A V data along with related control information. Media sources may be broadcast or premium networks movie studios independent content producers internet sites servers some combination thereof and so forth.

Acquisition infrastructure receives media content from media sources . Frequently media content comprises a media content stream . Acquisition infrastructure forwards media stream to distribution apparatus and media server . In a described implementation distribution apparatus sends media stream to client live or what is termed herein broadcast time. Media server sends media stream to client delayed or at a post broadcast time.

Although they are illustrated separately one or more blocks may be co located and or implemented using the same or related device hardware. For example media servers and distribution apparatus may be co located at a single facility. Also they may share for instance a router or a switch or other transmission resources. As another example acquisition infrastructure and distribution apparatus may share processing resources.

Distribution apparatus and media server send media streams to client over or via one or more networks . Network may be a cable network a telephone network e.g. a digital subscriber line DSL network a satellite network an internet a local area network LAN a wide area network WAN some combination thereof and so forth. Client may be a set top box or other television type media device a computer a television a portable device some combination thereof and so forth. An example general electronic device that may be used to realize a media server and or a client device is described herein below with particular reference to .

As illustrated in example environment distribution apparatus and media server utilize multicasting to send or flow media stream to client . Specifically distribution apparatus flows a multicast broadcast to client for media stream that is to be delivered at broadcast time. Media server flows a multicast bouquet to client . In a described implementation multicast bouquet comprises a group of time delayed media streams that are coded into a segmented burst format and that are multicasted to client . As is described herein client may selectively join a multicast burst stream of multicast bouquet to accelerate a digital channel change.

The term multicast may encompass for example certain types of Internet Protocol IP multicasting technologies such as the Internet Group Management Protocol IGMP but it is not limited to any specific multicasting technologies. As broadly used herein the term multicasting embraces and includes broadcasting. Thus multicasting may be effectuated using any protocol or standard. Examples include User Datagram Protocol UDP multicast technologies IGMP multicast technologies and so forth. Example multicasting commands that are described herein below comport with the IGMP.

Also although much of the description herein specifically addresses or identifies media type data streams the principles described herein are applicable in general to data streams of any given resource type. Thus resource streams may be multicasted from servers and distribution apparatus to client .

Thus client receives media streams from distribution apparatus and or media server via communication channel which may be realized at least partly by network of . A return channel from client to network nodes also exists. Upstream return channel may be integrated with or separate from downstream communication channel . Return channel may be used by client to for example request new media streams change channels and so forth.

Client includes a client media data buffer . Media data buffer is described herein below with particular reference to . A given client may utilize multiple communication channels to for example simultaneously receive multiple media streams e.g. when multiple tuners decoders are present at client .

As illustrated communication channel comprises a total available bandwidth. This total available bandwidth includes a nominal multicast streaming bandwidth rate N and an excess bandwidth rate E . Hence the total available bandwidth includes the nominal multicast streaming bandwidth N and the excess bandwidth E . Media stream when multicast normally occupies up to the nominal multicast streaming bandwidth N . The actual instantaneous bandwidth utilization typically fluctuates over time but it is capped at the nominal rate N . The excess bandwidth E may be used for other purposes.

As described herein the excess data rate bandwidth E portion may be used to accelerate channel changing. With reference to media streams e.g. movies television channels etc. are flowed from distribution apparatus to client as multicast broadcast using the nominal multicast streaming bandwidth N . When a client requests a channel change excess bandwidth E is utilized to burst media data to client in order to accelerate the channel change. In a described implementation a multicast bouquet is utilized to flow multiple multicast burst streams that are offset in time with respect to each other.

As is known analog audio and visual information may be digitized. The digitization process entails some amount of encoding and then subsequent decoding. Many coding approaches have been developed. Examples include but are not limited to Moving Picture Expert Group MPEG coding VC 1 coding H.263 and H.264 coding and so forth. Regardless of the coding approach employed the encoding decoding process often compresses decompresses the information to some degree or level.

Coding approaches usually divide different frames of video into different frame types for coding purposes. An example is a division into three different frame types infra I frames predicted P frames and bi directional B frames. Infra frames may be more generally considered independent or key frames. Key frames are independent inasmuch as they may be decoded without reference to other frames. P frames and B frames reference one or more other frames and are therefore dependent frames inasmuch as they cannot be decoded independently.

As a consequence of these dependent frame types whose decoding is interdependent on the reception of other frames the decoding of a media stream is started at an independent frame. When a client requests receipt of a new media stream e.g. requests a channel change decoding does not start until an independent frame is received.

Modern coding techniques generally attempt to reduce the bandwidth size of a resulting bit stream as much as possible under the constrain of achieving a given desired level of presentation quality. One approach to increasing the compression level is to decrease the frequency of independent frames which occupy the most bandwidth. Thus the time duration between successive independent frames continues to increase as compression algorithms improve. Relatively recent coding techniques produce successive independent frames that are about 3 5 seconds apart. This is expected to be stretched to 10 12 seconds or longer between successive independent frames with newer codecs.

Waiting 10 seconds for a channel change or even 3 5 seconds is typically considered frustrating to television viewers if not genuinely unacceptable. An approach to counter this delay is to retrieve an independent frame from the past that may be decoded and displayed essentially immediately. Although the viewer is watching television approximately 5 15 seconds in the past depending on implementation and or coding scheme the channel change is accelerated to a degree that is often considered to be effectively instantaneous to many television viewers.

The minimum length or size of circular buffer is dependent on how far back in time an independent frame is going to be retrieved. Factors affecting this time period include the duration between independent frames anticipated network delays and so forth. Generally circular buffer is at least large enough to store a GOP s worth of media data for a media stream that is to have tunings to it accelerated. An example relating to an amount of media data that may be stored is described herein below with regard to a client media data buffer and with particular reference to . Alternatively a static buffer which is capable of providing VOD services may be used to enable the retrieval of a past independent frame.

Media server includes multicast bouquet functionality . Multicast bouquet functionality implements multicast bouquet including effecting related communications with client and channel changing procedures. Thus multicast bouquet functionality produces multicast bouquet which includes multiple multicast burst streams .

Specifically multicast bouquet includes n multicast burst streams with n being an integer. As illustrated multicast bouquet includes multicast burst stream multicast burst stream multicast burst stream . . . multicast burst stream . Each multicast burst stream is delayed with respect to other multicast burst streams by a given amount. Hence there are temporal offsets separating individual multicast burst streams . These temporal offsets are addressed further herein below with particular reference to in which an example of temporal offsets are referred to as the maximum client delay time T. An example algorithm for setting the value of n is also described herein below with particular reference to .

Thus multicast bouquet comprises multiple multicast burst streams that are flows staggered in time or temporally staggered flows. In a described implementation temporal offsets between consecutive multicast burst streams are equivalent in length or duration. Also temporally offset multicast burst streams within a given multicast bouquet are substantially identical. Substantially identical in this context indicates that humans would generally perceive the audio visual content to be essentially identical but ancillary data e.g. control rights management etc. data types may differ between two multicast burst streams . Examples of ancillary data include but are not limited to multicast addresses temporal information multicast bouquet indices watermarking information and so forth.

A target buffer size is illustrated as being determinable based on one or more factors. These factors include for example a decoding depth a retries safety zone and other buffering purposes . In a described implementation target buffer size includes decoding depth and retries safety zone . However target buffer size may alternatively be based on fewer than two factors or more than two factors as indicated by other buffering purposes .

Decoding depth relates to the amount of data that may be used to decode a media stream given the dependent e.g. predicted bi directional etc. nature of many coding algorithms. In other words decoding is usually not started until the start of an entire group of pictures GOP is received including the independent frame. A GOP typically refers to an independent frame and the succeeding non independent frames prior to the next independent frame.

Retries safety zone relates to the amount of data or time that is selected to ensure that any packets that are not properly received initially may be separately requested and received in time for decoding within the decoding depth . These data and packets are referred to herein as retry data and packets. The desired duration for the retry safety zone and the corresponding size of this logical part of media data buffer are dependent on for example expected network communication latencies.

Regardless of the nature or number of reasons for buffering the media data target buffer size represents the desired amount of media data that is to be present within media data buffer . Thus at least when client is receiving a media stream at a nominal bit rate N an amount of media data equal to target buffer size is to be received by a client prior to the presentation of a frame derived from such received media data.

Generally several media data portions occupy the channel at different times. Specifically bandwidth utilization graph includes multicast burst multicast stream and retry data . Multicast burst stream occupies substantially all of the total channel capacity which is the nominal data rate N plus the excess data rate E . Multicast stream occupies up to substantially all of the total amount of the nominal data rate N . Over time the bandwidth consumed by multicast stream fluctuates depending on the demands of the underlying data resource being streamed but it is limited to the nominal data rate N at any given moment. Retry data occupies up to the excess data rate E .

Bandwidth block corresponds to a portion of multicast burst that occupies the fraction of the channel that approximately equals the excess capacity E . The excess data rate portion of multicast burst enables additional data to be burst to client without risking an overload of the channel when multicast stream is expected soon. This excess data rate portion of multicast burst as represented by bandwidth block is optional.

Bandwidth block corresponds to an empty or unutilized portion of graph inasmuch as no data is being communicated within bandwidth block . Bandwidth block has a height that matches the nominal data rate N and indicates that the channel is being cleared or prepped to make room for the impending arrival of multicast stream . Bandwidth block has a width that matches a time delay for joining a multicast stream specifically multicast broadcast stream that is flowed from distribution apparatus .

At the client e.g. client requests a multicast address from a media server e.g. media server to join a multicast burst e.g. multicast burst stream . This request from the client may be made responsive to user input such as a channel change command to change channels a general tuning command to stream different media and so forth. After the correct multicast address is known the client issues a multicast burst join command.

At the receipt of the multicast burst stream begins. At the client begins producing motion video upon receipt of the first independent frame. In a described implementation each multicast burst begins with an independent frame to expedite the initial display of video at the client.

At the media server has completed sending the portion of the multicast burst that consumes the entire bandwidth channel. The client has been playing video and thus emptying media data buffer since . The media data buffer is emptied approximately at the nominal data rate N of the desired media stream. Consequently the client s buffer now holds an amount of data that is approximately equal to the excess data rate E multiplied by the length of the multicast burst between points and . This amount of data possibly after including the data of bandwidth block can be sufficient to maintain target buffer size even after occurrence of the unutilized bandwidth block .

At the client receives a join multicast broadcast instruction from the media server. This instruction indicates to the client that at least the full bandwidth portion of multicast burst is concluding. The full bandwidth portion of the multicast burst may conclude immediately or it may be continued for a duration calculated to equal the e.g. minimum multicast join time involved in the client s joining a multicast broadcast for the requested stream.

At in response to receipt of the join multicast broadcast instruction from the media server the client issues a multicast broadcast join command to distribution apparatus in order to join multicast broadcast . After a join delay time period represented by the width of bandwidth block at the first multicast broadcast packet for multicast stream arrives at the client.

At the client issues to the media server a multicast burst leave command to indicate an intention to leave multicast burst stream . At receipt of multicast burst stream ceases. At the client computes missing data which is especially likely to occur during the transition between multicast burst stream and multicast broadcast stream . The client issues e.g. rate limited retry request s based on the computed missing data.

At the media server responds to the rate limited retry requests with retry data that is unicast from media server to client . Upon receipt of the unicast retry data the client fills in holes of the media data within media data buffer prior to decoding.

At the client makes a request of the media server to join a multicast burst stream. The media server determines which of multiple multicast burst streams is next to start a new multicast burst segment with an initial independent frame. As is described herein above with particular reference to and further herein below with particular reference to the media server flows multiple multicast burst streams as a multicast bouquet . In this example implementation the media server is responsible for determining which multicast burst stream is associated with the next most temporally proximate independent frame.

At the media server flows the selected multicast burst stream to the client at a bandwidth equal to the nominal data rate N plus the excess capacity data rate E . At the client begins playing the video after a complete independent frame has been received and decoded. Because the multicast burst stream exceeds the nominal data rate N by the excess date rate E the client can safely begin decoding the media stream and playing the media before receiving data equaling target buffer size .

At the media server sends an instruction to the client to join the multicast broadcast for the selected channel. The media server also decreases the transmission rate and begins flowing the multicast burst at the excess data rate E . At in response to receiving the join instruction from the media server the client issues a join request to the distribution apparatus to receive the multicast broadcast stream at the nominal date rate N .

At the multicast broadcast stream is flowed from the distribution apparatus to the client at the nominal data rate N . At the client notifies the media server that it is departing the multicast burst stream. At the client employs a hole filling algorithm to determine what data of the media stream is missing. The hole filling algorithm is applied in particular to compute data holes in the region around the transmission overlap.

At the client issues one or more retry requests which are directed to the missing data to the media server based on the results of the hole filling algorithm. At the media server responds to the data requests by sending the retry data to the client in a unicast transmission.

As illustrated multicast bouquet includes sixteen 16 multicast burst streams to . However more or fewer multicast burst streams may alternatively comprise each repeating multicast bouquet . Each multicast burst stream is temporally offset with respect to adjacent multicast burst streams i.e. with respect to both a preceding and a succeeding multicast burst stream . This temporal offset is denoted in by Timeor T. Time increases from left to right.

The temporal offset is thus related to the maximum client delay time T that is considered permissible when a user requests a channel change. Although any time period may be selected depending on viewer and or customer preferences selecting a value on the order of several hundred milliseconds e.g. 300 500 milliseconds likely enables a channel change that viewers consider essentially instantaneous. Of course shorter time periods such as 50 milliseconds or less for the maximum client delay time Tcan produce faster channel changes if network and other hardware and software infrastructure are capable of implementing the shorter time period.

The length or size of each multicast burst segment is the burst time or T. The burst time Tis set based on a target buffer size of and the size of the excess bandwidth E . The product of the burst time Tand the excess data rate E T E is the amount of extra information deposited into client media data buffer of at the end of one multicast burst segment given that client media data buffer is being drained at approximately the nominal data rate N . Hence disregarding the effects of bandwidth blocks and of the length of the burst time Tis set equal to the target buffer size TBS divided by the excess data rate E . In short T TBS E.

The number of multicast burst streams in a multicast bouquet reflects the number of duplicated multicast burst streams that a media server produces for a given channel in order to accelerate channel changes to that given channel. Thus the number of multicast burst streams in a multicast bouquet represents the number of multicast burst segments that are started during each burst time T. The number of multicast burst streams per multicast bouquet is set responsive to the burst time Tand the maximum client delay time T.

Specifically in a described implementation the number of multicast burst streams is equal to the burst time Tdivided by the maximum client delay time T No of Mcast Burst Streams T T . The calculations are simplified when Tis at least smaller than if not an actual divisor of a GOP duration length T. By way of clarifying example only if the burst time T 7500 milliseconds and the maximum client delay time T 500 milliseconds media servers produce 15 multicast burst streams per channel. This can effectively enable a television system to provide accelerated channel change using e.g. dozens of multicast streams instead of thousands of unicast streams per channel while simultaneously providing television services to tens of thousands of viewers.

In a described implementation multiple devices or machines are capable of communicating across one or more networks such as network s of . As illustrated two devices and are capable of engaging in communication exchanges including those relating to both unicast and multicast communications via network .

Although two devices are specifically shown one or more than two devices may be employed depending on implementation. For example media servers may comprise a server farm with multiple devices with each server farm likely servicing many clients . The devices that are used to realize each media server may differ from the devices that are used to realize clients . For example media servers often possess more memory have a greater processing capability and or provide a larger communication bandwidth than clients .

Generally device may represent a server device a storage device a workstation or other general computer device a router switch or other transmission device a so called peer in a distributed peer to peer P2P network a set top box or other television device a personal digital assistant PDA or mobile appliance some combination thereof and so forth. In an example implementation however device comprises a commodity server on the service provider side and a set top box on the client side. As illustrated device includes one or more input output I O interfaces at least one processor and one or more media . Media includes processor executable instructions . Although not specifically illustrated device may also include other components.

In a described implementation of device I O interfaces may include i a network interface for communicating across network s ii a display device interface for displaying information on a display screen iii one or more man machine device interfaces and so forth. Examples of i network interfaces include a network card a modem one or more ports and so forth. Examples of ii display device interfaces include a graphics driver a graphics card a hardware or software driver for a screen television or printer and so forth. Examples of iii man machine device interfaces include those that communicate by wire or wirelessly to man machine interface devices e.g. a keyboard a mouse or other graphical pointing device a remote control etc. .

Generally processor is capable of executing performing and or otherwise effectuating processor executable instructions such as processor executable instructions . Media is comprised of one or more processor accessible media. In other words media may include processor executable instructions that are executable by processor to effectuate the performance of functions by device .

Thus realizations for accelerated channel changing may be described in the general context of processor executable instructions. Generally processor executable instructions include routines programs applications coding modules protocols objects interfaces components metadata and definitions thereof data structures application programming interfaces APIs etc. that perform and or enable particular tasks and or implement particular abstract data types. Processor executable instructions may be located in separate storage media executed by different processors and or propagated over or extant on various transmission media.

Processor s may be implemented using any applicable processing capable technology. Media may be any available media that is included as part of and or accessible by device . It includes volatile and non volatile media removable and non removable media and storage and transmission media e.g. wireless or wired communication channels . For example media may include an array of disks for longer term mass storage of processor executable instructions random access memory RAM for shorter term storage of instructions that are currently being executed flash memory for medium to longer term storage and or link s on network for transmitting communications and so forth.

As specifically illustrated media comprises at least processor executable instructions . Generally processor executable instructions when executed by processor enable device to perform the various functions described herein including those that are illustrated in flow diagrams and of and respectively and those logical components and operations illustrated in .

By way of example only processor executable instructions may include all or part of a server module S and or a client module C. Example actions for such processor executable modules are described herein below with particular reference to .

At block a media stream is received. For example a media server may receive a media stream from acquisition infrastructure . At block the received media stream is delayed. For example media server may use a circular buffer to delay media stream by an amount that is equal to at least the length of a GOP so that a past independent frame is always available for transmission to a client .

At block the media stream is coded into burst segments. For example media stream may be coded into multicast burst segments . Each multicast burst segment includes at least a portion of media data that is transmitted at a greater than nominal rate N e.g. N E . Each may also include other portions for instance each multicast burst segment may also include a portion that is transmitted at the excess data capacity rate E . The coding may involve for example a transformation of a media stream from a constant maximum nominal rate to segments having a higher transmission rate. The coding may also merely involve preparing to transmit the media stream at a higher than nominal rate without performing any transformation. The coding of block may be performed prior to the delaying of block .

At block the delayed media stream is replicated to produce multiple replicated media streams. For example media server may replicate a temporally delayed version of media stream to create a multicast bouquet having multiple multicast burst streams . Each replicated media stream may be substantially identical to every other media stream of a given multicast bouquet as described herein above. The number of multicast burst streams that are replicated for a given multicast bouquet may be set responsive to for instance the burst time for each burst segment and the maximum acceptable client delay time.

At block multiple replicated media streams are flowed or multicast with a temporal offset between temporally adjacent media streams. For example the multiple multicast burst streams of multicast bouquet may be flowed or multicast toward one or more clients with a temporal offset between temporally adjacent multicast burst streams . The temporal offset may be established based on the maximum acceptable client delay time for tuning to a channel.

At block a join multicast burst command is received from a client at the server. At block a multicast burst stream is flowed at a greater than nominal data rate e.g. a nominal plus excess N E data rate to the client. At block a join multicast broadcast instruction is sent to the client. At block the server starts reduces the data rate to flowing the multicast burst stream at a lower than nominal data rate e.g. at a data rate that consumes no more than the excess channel capacity E . The order of the actions of blocks and for example may be swapped.

At block the server receives a depart multicast burst command from the client. At block the server receives a retry request from the client for missing data. The retry data may be identified for example using packet numbers sequence numbers some combination thereof and so forth. At block the server supplies the client with the requested retry data in a unicast transmission. The actions of blocks and are repeated for any holes that are created during the transition by the client from the multicast burst stream of the server to the multicast broadcast stream of standard distribution apparatus.

In a described implementation when the server receives the join multicast burst command from the client at block the command includes a multicast address of the multicast burst stream to which the client is joining. The client determines this multicast address using known information or by requesting it from the server. The former approach is described further herein below with particular reference to . The latter is described below with reference to blocks .

At block the server receives a channel change request or more generally a request to tune to a new resource stream from a client. At block the server ascertains which multicast burst stream next flows an independent frame. At block the server sends the multicast address of the ascertained multicast burst stream back to the client where the client can use it when formulating a join multicast burst command.

At block the client issues a multicast burst join command to a server. At block the client receives a multicast burst stream at a higher than nominal data rate as compared to the underlying media stream. This higher than nominal data rate may be for example approximately equal to the nominal data rate N plus an excess data capacity rate E . At block the client begins playing the underlying media stream upon receipt of the first independent frame.

At block the client receives a join multicast broadcast instruction from the server. At block the client receives the multicast burst stream at the excess data rate E from the server. At block the client issues a join multicast broadcast command to distribution apparatus e.g. distribution apparatus .

An example alternative omits the excess data rate E portion of the multicast burst stream. Also the issuance of the join multicast broadcast command of block may precede the data rate reduction as represented by the receipt of the multicast burst stream at the excess data rate E at block .

At block the client receives the multicast broadcast stream from the distribution apparatus at the nominal data rate N . At block the client issues a depart multicast burst command to the server.

At block the client determines what data is missing in the overlap region between multicast transmissions using a hole filling algorithm. At block the client sends request s for retry data to the server responsive to the missing data determination i.e. when there is missing data . At block the client receives retry data at the excess data rate E from the server in one or more unicast transmissions. The requests and receptions of blocks and continue until the missing data is filled in. The client may also continue to request retry data for data that is missing during the ongoing reception of the multicast broadcast stream.

As described above the client determines a multicast address for a multicast burst stream that is to be joined with the multicast burst join command of block . The determination that is effected by asking the server for a multicast address is described herein above with reference to . The determination may also be made by the client using known information. This approach is described with reference to block .

At block the client determines the multicast address of the multicast burst stream that next starts a new multicast burst segment. In this example instead of determining the multicast address via a request to the server the client uses known information. More specifically but by way of example only the client is informed that there are Y multicast burst streams for a particular channel that is to be tuned to. Then the client itself with this knowledge can tune directly to the multicast burst stream without contacting the server. The multicast address can be determined for instance by calculating the offset in time against a mutual reference e.g. T midnight today modulo the number of multicast burst streams and then that number is used as the 4th byte in the multicast address. For instance the final multicast address for the multicast burst stream may be the address published in the already existing client to server map in which the 4th byte is replaced by the calculated offset value.

Utilizing a multicast bouquet having multiple multicast burst streams for a given channel can be implemented in different manners to accelerate channel changing. For example it may be implemented constantly for each channel. Alternatively it may be implemented selectively depending for instance on expected or actual viewer usage. There is a trade off between the number of media servers that are provisioned to provide the multicast accelerated channel change techniques described herein and the investment in network resources demanded by multicasting which often requires more and or more sophisticated routers and switches. Selectively engaging the multicast bouquets on a per channel basis and or at different times may facilitate the balancing of these two competing costs.

Several selective implementation examples are provided below. First channels that are known to be high volume may be statically provisioned to operate channel changes thereto using a multicast bouquet technique. Second certain events e.g. programs and or special media streams that are known or expected to have a high volume viewership may be marked as candidates for statically implementing multicast bouquets. During these times a multicast bouquet is implemented for the corresponding changes. Adjacent and surrounding channels may also be so marked because of the likelihood of up down channel surfing.

Third the implementation may be dynamic. For instance a media server may monitor the number of e.g. unicast effected channel changes in a given time period. If the number of channel change requests exceeds a preset number within a predetermined time period the program and channel is determined to be high volume and a multicast bouquet having multiple multicast burst streams is created to accelerate channel changes thereto. It may also be dynamically implemented for proximate channels.

The devices actions aspects features functions procedures modules data structures protocols architectures components etc. of are illustrated in diagrams that are divided into multiple blocks. However the order interconnection interrelationship layout etc. in which are described and or shown are not intended to be construed as a limitation and any number of the blocks can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses APIs arrangements etc. for accelerated channel change.

Although systems media devices methods procedures apparatuses techniques schemes approaches arrangements and other impementations have been described language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

