---

title: Client store synchronization through intermediary store change packets
abstract: The subject invention pertains to systems and methods of data item synchronization. More specifically, the invention concerns synchronization of data entities utilizing an intermediary or shared storage system and associated data store. Each client sync device can include or be associated with an interface that facilitates communication between client synchronization devices and the intermediary storage system. The interface can send change information to the shared store utilizing change data packets including a data change attribute, a prerequisite knowledge attribute and a learned knowledge attribute. The data change attribute can specify changes to be made to certain data, while the attribute can include a complete copy or reference to a complete copy or single instance of data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07778962&OS=07778962&RS=07778962
owner: Microsoft Corporation
number: 07778962
owner_city: Redmond
owner_country: US
publication_date: 20050420
---
This is a continuation in part of U.S. application Ser. No. 10 889 423 entitled SYSTEMS AND METHODS FOR SYNCHRONIZING COMPUTER SYSTEMS THROUGH AN INTERMEDIARY FILE SYSTEM SHARE OR DEVICE filed Jul. 12 2004 which claims the benefit of U.S. Provisional Application Ser. No. 60 567 141 entitled SYSTEMS AND METHODS FOR SYNCHRONIZING COMPUTER SYSTEMS THROUGH AN INTERMEDIARY FILE SYSTEM SHARE OR DEVICE filed Apr. 30 2004. The entireties of these applications are incorporated herein by reference.

The subject invention relates generally to computers and more particularly toward synchronization between computer data stores through an intermediary store.

Individuals these days utilize a myriad of computer devices or systems on a regular basis. For example individuals can have a desktop computer and or associated file server with which they interact at work. They can also have a laptop computer for working away from the office as well as one or more desktop computers at home. Furthermore they may have palm top computers such as a personal digital assistant PDA pocket PCs mobile phones and or other portable devices they utilize for organizational communication or entertainment purposes. It is desirous that some data be copied to multiple devices to enable convenient access thereto. For instance often a user copies files from a desktop computer or file server to a portable computer or device for use while the user is away from their office. The user then likely modifies or adds some new files while away from the office and subsequently needs to copy these files to their desktop computer or file server when they return to the office. Similarly users may wish to copy pictures or music from one device to another e.g. computer to MP3 player digital camera to computer . . . . Still further yet users may demand that personal preferences and contacts e.g. address book be maintained across all or a subset of their computers. Thus certain files need to be synchronized across multiple computers or devices.

In its simplest form synchronization is merely the task of making designated files from multiple devices systems the same or consistent across systems. Typically this means that the most up to data file versions are used to copy to a store. This process is automated by two way peer to peer synchronization software applications. In particular upon activation a synchronization application can detect file changes or additions on a first device and copy or replicate new and or altered files to a second device communicatively coupled to the first device for instance via a hardwired or wireless connection. This causes the files on the first device to be synchronized with files on the second device.

Synchronization can also be performed remotely by accessing a network having a first device such as desktop computer coupled thereto. A second device such as a second desktop computer or laptop computer can be synchronized with the first device utilizing synchronization software. However the synchronization software requires that both the first and second devices be powered up and communicatively coupled to each other by way of the network. In this way they communicate directly with each other similar to direct hardwired connection.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

Briefly described the subject invention concerns data synchronization amongst one or more client systems utilizing an intermediary storage system. More particularly the invention pertains to synchronization of items including file backed and non filed backed items as well as other data entities. Change packets can be generated for designated new altered or deleted entries. These packets can be generated by an interface component included or associated with a client system and transmitted for storage to an intermediary or shared storage system such as a file share server. These stored change packets can then be utilized to synchronize a plurality of client devices.

According to an aspect of the invention the change packet can include change data prerequisite knowledge learned knowledge and made with knowledge among other things. Change data can specify changes to be made to an item. According to an aspect of the subject invention change data can include a complete replica of particular types of data or data entities which can be saved or serialized to the shared store. Only a single replica or single data instance is stored on the share. Older versions will be replaced with the latest version. The change data for an item or other data entity can include just changes that need to be effectuated rather than a complete replica. Prerequisite knowledge is the knowledge or set of changes that synchronization client must know in order to apply the changes provided by the change packet. Learned knowledge specifies what the synchronization client will learn if it applies the changes. Made with knowledge carries the knowledge which client knew when item was created.

According to an aspect of the subject invention the synchronization interface can include a conflict detection component. The conflict detection component can detect a conflict by comparing client system knowledge and intermediary store knowledge for a particular data entity. If a conflict is detected a conflict event or knowledge exception can be raised and a client system user or client system application can resolve the conflict.

In accordance with another aspect of the invention the synchronization interface can include a conflict resolution component that can resolve detected conflicts automatically in accordance with a conflict resolution policy. This can enable conflicts to be resolved much quicker as well as facilitating convergence on the same resolution across different client systems.

In accordance with an aspect of the invention the interface can employ a data integrity component and associated methods to lock data during reads and writes to ensure data is not compromised.

Systems and methods are also provided in accordance with an aspect of the invention to enable interoperability between an intermediary change packet store and an item store. For instance systems and methods are provided to facilitate updating the intermediary change packet store with data packets and single instance data replicas upon detection of a designated entity change. Furthermore systems and methods are disclosed to facilitate synchronizing client system stores utilizing data provided by the change packet store.

According to another aspect of the invention the interface component can include a means and mechanism for retrieving and copying single instance data of any size to the shared store.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

The present invention is now described with reference to the annexed drawings wherein like numerals refer to like or corresponding elements throughout. It should be understood however that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention.

As used in this application the terms component and system and the like are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an instance an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

 File as used herein describes a conventional discrete unit of data including but not limited to a traditional file or file stream. Such a file can include but is not limited to a music file e.g. MP3 MP4 WMA . . . a picture file e.g. Jpeg Gif Mpeg . . . and a word processing document e.g. doc text PDF PostScript RTF . . . . Conventional file format can include rich metadata including not only their name and size but also properties and attributes embedded within the data unit. However such rich metadata is conventionally only accessible by particular programs. For example metadata identifying an artist and song title associated with a music file would require an audio player application to retrieve such metadata.

The term item as used herein is a discrete unit of data storable in a data store that can be manipulated by hardware software or a combination of hardware and software. Items are stand alone objects that can be stored retrieved copied deleted moved opened printed backed up and restored among other things. An item can be a regular non file backed item or a file backed item. A non file backed item or simply an item is a schematized object that can comprise one or more elements and relationships. An element is an instance of a type comprising one or more fields also referred to herein as a property . A relationship is a link between two or more items. A file backed item acts as a bridge between legacy file format and the richly schematized item. A file backed item can be any item that relies on a file to populate some or all of its properties. In particular the file backed item can include metadata associated with a file as well as the file stream itself.

The term entity data entity and the like as utilized herein is meant to include and refer to items e.g. file backed non file backed legacy files and any other discrete data unit or container.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

Artificial intelligence based systems e.g. explicitly and or implicitly trained classifiers can be employed in connection with performing inference and or probabilistic determinations and or statistical based determinations as in accordance with one or more aspects of the subject invention as described hereinafter. As used herein the term inference or infer refers generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the subject invention.

Furthermore the present invention may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed invention. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the subject invention.

Turning initially to a data synchronization system is depicted in accordance with an aspect of the subject invention. Synchronization system can include one or more sync client systems and an intermediary storage system . Sync client systems can be any computer as described infra. or computer device. For example client system include but are not limited to desktop and laptop computers personal digital assists PDAs phones cameras and portable jukeboxes. Client systems can include a data store that supports organization searching sharing synchronization and security among other things of data that resides in the store. The data stores may operate utilizing the same or different storage models platforms or systems. According to one aspect of the invention client data store can support items as the fundamental or atomic unit of storage information. An item can be a group of simple and complex types defined in a schema for representing data. Furthermore the data store can be implemented on a database engine. For instance the database can comprise a relational database engine that implements the SQL query language. Still further yet instead of a traditional tree to organize data information can be organized as a direct acyclic graph of items DAG . Such a storage system can offer search capacities never imagined with respect to conventional file systems. For instance it is possible to find items according to the value of their properties and even to the value of the properties of items related to them. Alternatively the client data store can be a conventional file system. In a conventional data storage system files are units of storable information which may include the hardware software interface system as well as application programs data sets and so forth. In such systems groups of files are generally organized in folders. A folder is a collection of files that can be retrieved moved and otherwise manipulated as single units of information. These folders in turn are organized in a tree based hierarchical arrangement called a directory.

The client system can include an interface component . Among other things interface component can facilitate communication between a sync client system and an intermediary storage system . Storage system stores data that facilitates synchronization of two or more client devices . Accordingly intermediary storage system can include a data store . The intermediary storage system can be any data storage facility that can be access by clients . According to one aspect of the invention the intermediary storage system can be a simple file share server among other things. For example the intermediary could also be but is not limited to a email or exchange server. The storage system need not operate on data. Rather the storage system can simply make the data stored therein accessible and available to client devices . Furthermore intermediary storage system need not be proximate to the clients . It can be accessed over a local area network LAN or a wide area network WAN such as the Internet. Client systems can interface with intermediary storage system through the interface component . These interface components can be specifically designed or tailored to interact with the client device data store and the associated data storage platform. Accordingly client devices of varying data storage platforms can be synchronized through the intermediary storage system .

In accordance with an aspect of the invention interface component can ensure that only the most recent version of data with all changes is stored on the intermediary storage system . An alternative system could store each data version on the intermediary storage system however this approach is inefficient and unnecessarily ties up storage space. For example if a gigabyte item was changed twenty times then the intermediary storage system would have to store twenty gigabyte data entities. The interface component replaces previous versions of with the most recent version. However synchronization conflicts can occur. For example the intermediate data store can receive a data item which although later in time than a store copy does not account for or is not aware of previous data alterations. Interface component can include a conflict detection component to detect those and other synchronization conflicts. Upon detection of a conflict conflict detection component can prevent the interface component from applying the data entity or the changes thereto to the intermediary storage system .

Turning to a conflict detection component is illustrated in further detail in accordance with an aspect of the subject invention. Conflict detection component can include a state receiver or input component and a comparison component . State receiver component can receive retrieve the synchronization state or knowledge of the current version of a data entity on the intermediary storage system . The state receiver component can also receive retrieve the synchronization state or knowledge associated with the new modified version of the data entry. State receiver component is communicatively coupled to comparison component . Hence the state receiver component can transmit received or retrieved state or knowledge to the comparison component . Comparison component compares the received values. Data versions can be said to conflict if the new modified version does not include least the changes or knowledge of the current entity on the intermediary storage system . Accordingly comparison component can compare the states of each data entity and determine whether the new modified version includes at least the state or knowledge of the version presently residing on the intermediary store. If so the interface component can update the intermediary store by replacing the data entity with the new modified data entity. If however the new modified data entity does not include at least the knowledge of the currently stored version then an exception can be generated and the new modified entity will not be applied or saved to the intermediary store . The detected conflict can then be resolved if at all by individual client system conflict policies user input or automated by use of artificial intelligence based systems.

It should further be appreciated that the data integrity component can be employed with respect to a group of data items. Changes to an intermediary store and synchronization do not often occur at a single data item level. Furthermore data items can be grouped or related in a particular manner. Accordingly conflict component and data integrity component can receive and operate on a collection of data items in a transactional batch process or multiple processes. For example data integrity component can apply locks and remove locks to a batch of items.

Turning to another exemplary interface component is illustrated in accordance with an aspect of the subject invention. Similar to the interface component of this interface can also include a conflict detection component and a data integrity component . Furthermore interface can optionally include a conflict resolution component . According to one aspect of the subject invention the interface component can simply include a conflict detection component . Conflict detection component can detect conflicts amongst data entity versions to be stored to an intermediary or shared storage system . For example a conflict can be raised when a local client system is unaware or lacks knowledge of a remote version on an intermediary storage system and the intermediary is unaware of or lacks knowledge of the client s local version. In addition to knowledge based conflicts there can be constraint based conflicts. For instance two replicas creating a file with the same name in the same directory could cause such a conflict to occur where constraints in the system such as enforcement of unique item names within a folder give rise to this type of conflict. Conflict detection component can detect such conditions and generate an exception which can be communicated to a client system . It is then up to the client system to resolve the conflict upon notification. Each client can then implement their own policies for handling conflicts including but not limited to remote wins over write local local wins over write intermediary last writer wins based on time of operation or write to log and let a user decide. However this can lead to inconsistencies as individual clients may have quite different conflict resolution policies. Accordingly conflict resolution component can be part of the interface component . Conflict resolution component can also support a plurality of conflict resolution policies or strategies including but not limited to those presented above. Furthermore it should be appreciated that conflict resolution component can infer resolutions as that term is defined herein utilizing artificial intelligence or knowledge based systems and or methods. Unlike allowing each client to specify individual conflict policies moving the conflict resolution functionality within the interface can provide a uniform policy. Furthermore synchronization can be propagated more expeditiously and converge on the same resolution.

Communications between the client devices and an intermediary store or storage system are enabled at least in part by the interface component . In accordance with an aspect of the subject invention change packets or data packets also referred to as a change unit can be transmitted to the intermediary storage system to facilitate transmission of alterations to synchronized data items or replicas. The intermediary storage unit can receive organize and store the change packets to facilitate synchronization amongst a plurality of client devices or systems.

Turning to an exemplary change packet is illustrated in accordance with an aspect of the subject invention. The change packet is a schematized data packet for transmission of changes and information associated therewith. The change packet can include a changed data attribute a prerequisite knowledge attribute and a learned knowledge attribute all of which can be components as that term is defined herein. These three attributes constitute a packet triplet. The change data attribute can include information pertaining to changes to be made to one or more data items. Furthermore the change data attribute can include metadata concerning items including for example change history and item size. Synchronization can operate on the principle of net changes. Accordingly the change data attribute can identify changes to be made to one or more entities. During a synchronization operation the changes can be applied and the data reconstructed on a synchronizing client system or device. Thus the intermediary store does not include replicas of data items in this instance. However in accordance with an aspect of the subject invention the change data attribute can include information for locating the changed data and or a copy of the data itself. The intermediary storage system can thus include a copy or replica of a data entity in this case. Furthermore the change data attribute can support both net changes as well as replication. For example the change attribute can specify changes to be made for non file backed items while it can include or identify a replica or single data instance to be transferred to the intermediary storage system for file backed items however it should be appreciated that the invention is not so limited. In this manner synchronization interoperability can be supported between data storage systems that employ items and those that utilize traditional files or file backed items.

The remaining two illustrated attributes and pertain to synchronization knowledge. Knowledge represents the state of a given sync item replica at any time. Such knowledge can encapsulate metadata about all the changes a given replica is aware of either local or from other replicas. Knowledge for synchronization replicas can be maintained and updated across synchronization operations e.g. send receive . . . . Furthermore it should be appreciated that the knowledge representation allows it to be interpreted with respect to the entire community and not just relative to the particular replica where the knowledge is stored. Prerequisite knowledge attribute specifies what knowledge a synchronization peer client system intermediary storage system . . . must already know to in order to apply an associated change. In particular knowledge is related to the set of changes of which the peer is aware. Such knowledge can be employed to determine if a change can be applied and in conjunction with conflict detection. Learned knowledge attribute specifies what a synchronization peer will learn if it applies the associated change. It should be appreciated that other information can be provided by the change packet which is not illustrated. For example the change packet can include a made with knowledge attribute that carries the knowledge which a client knew when item was created.

Turning to a change packet generation system is illustrated in accordance with an aspect of the subject invention. System can be a part of a sync client system . Packet generation system can include a data monitor component knowledge component and generation component . Monitor component can observe synch data items to detect changes. For example upon a save of a data entity it can analyze its state e.g. file size name . . . to determine whether an alteration has occurred. The monitor component can identify an entity or changes thereto and provide such information to the generation component . Monitor component can also provide entity metadata to the generation component . Furthermore all or part of the information obtained by monitor component can be transmitted to knowledge component . Knowledge component can then produce prerequisite and learned knowledge from data. Generation component can receive retrieve information concerning the identity and or changes to a data entity as well as prerequisite and learned knowledge from the monitor component and or the knowledge component . Generation component can then employ such data and a schema to produce a change packet ultimately for transfer to an intermediary storage system with a change packet store.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the present invention will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the present invention is not limited by the order of the blocks as some blocks may in accordance with the present invention occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodology in accordance with the present invention.

Additionally it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media.

Turning to a synchronization methodology is depicted in accordance with an aspect of the invention. At a change can be detected for example in a designated synch replica folder directory or other container. At a change packet is generated. The change packet can include change data prerequisite knowledge and learned knowledge among other metadata. The change data can identify the entity or single data instance that changed. Furthermore the change data can include a list of changes to be made to the item. These changes can later be applied to a replica to reconstruct and update an item. At the change packet can be transmitted to an intermediary data store to be accessed and shared by a plurality of synchronization devices. At a determination is made to ascertain whether the change concerns single instance data. If yes then the method can proceed to . If the entity does not concern single instance data the method can simply terminate. At a copy of the changed data is located and copied or transmitted to the intermediary storage system. This can be effectuated by serializing the data to a file on the store for example. If a copy already resides on the shared or intermediary storage system the current copy is replaced by the newest version of the entity if it is aware of all the changes of which the current version is aware.

Furthermore it should be appreciated that locks could be applied in conjunction with method to ensure transactional integrity. In particular the lock can be applied at the onset of this method to prevent writes to the data and subsequently release after the data is read or updated. The lock need only prevent writes as multiple reads can be executed concurrently supporting simultaneous synchronization without jeopardizing data integrity. By way of example consider the following exemplary psuedocode implementation of aspects of method 

It should also be appreciated that both the send and receive methodologies of methods and can be combined to produce a hybrid send and receive method.

In order to provide a context for the various aspects of the invention as well as the following discussion are intended to provide a brief general description of a suitable computing environment in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer executable instructions of a computer program that runs on a computer and or computers those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multiprocessor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like. The illustrated aspects of the invention may also be practiced in distributed computing environments where task are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the invention can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects of the invention includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to 10 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like displays e.g. flat panel and CRT speakers and printers among other output devices that require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 802.3 Token Ring IEEE 802.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems power modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the present invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly the present invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the terms includes has and having are used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

