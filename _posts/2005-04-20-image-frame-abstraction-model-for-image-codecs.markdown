---

title: Image frame abstraction model for image codecs
abstract: A method and architecture for obtaining a desired frame and identifying a selected frame in an image container. A request for a frame of an image is received. The request may include an identifier that identifies a type of frame. In response thereto, a frame is located corresponding to the identifier and a reference to the frame is provided. In another aspect, a request is received to identify a frame of an image. A determination is made as to what identifier identifies the frame. The identified frame is returned to the requesting component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07672542&OS=07672542&RS=07672542
owner: Microsoft Corporation
number: 07672542
owner_city: Redmond
owner_country: US
publication_date: 20050420
---
An image may have several frames logical and physical associated with it. A frame may comprise an alternate or specialized representation of the main image or may comprise a separate image in the same container that includes the main image. For example a typical image container may include a thumbnail frame and a full resolution image frame. As another example a Tiff file representing a fax may have several frames in it each representing a different page of the fax. The data associated with physical frames of an image is usually stored in a container associated with the image. The container may include one or more physical frames and metadata regarding the image.

A physical frame comprises data that is stored in the container that may be used to display a view of the image. For example a camera picture image container may include a frame that includes raw sensor data of the image.

The data of a logical frame on the other hand is not stored in the container of an image rather a logical frame may be created upon demand from image data. For example a preview frame may be created from image data and displayed upon demand. The preview frame may be cached in memory or disposed of after use but need not be stored in the container.

It may be desirable to associate other frames such as embedded preview fast preview full resolution image and the like with an image. What is needed is a method and system for obtaining a desired frame or identifying a selected frame.

Briefly the present invention provides a method and architecture for obtaining a desired frame. A request for a frame of an image is received. The request may include an identifier that identifies a type of frame. In response thereto a frame is located corresponding to the identifier and a reference e.g. pointer to the frame is provided.

In another aspect a selected frame is identified. A request is received to identify a frame of an image. A determination is made as to what identifier identifies the frame. The identifier is returned to the requesting component.

In another aspect an application programming interface is provided that receives a name parameter. The name parameter identifies a type of frame. In response to receiving the name parameter a function operates on the name parameter and frames of an image obtains a reference to a frame of a type corresponding to the parameter.

Other aspects will become apparent from the following detailed description when taken in conjunction with the drawings in which 

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen of a handheld PC or other writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation FIG. illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A programming interface or more simply interface may be viewed as any mechanism process or protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s and the like of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s and the like of other component s . The term segment of code is intended to include one or more instructions or lines of code and includes for example code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects and which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium . In the view of one may consider interface objects and as separate interfaces of the same system and one may also consider that objects and plus medium comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation for example depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. Below are some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 as 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface may be subdivided to convert the communications of the interface into multiple interfaces and so on while achieving the same result.

As illustrated in the function provided by interface may be subdivided into multiple interfaces and so forth while achieving the same result. Similarly interface of the second code segment which receives information from the first code segment may be factored into multiple interfaces and so forth. When factoring the number of interfaces included with the 1code segment need not match the number of interfaces included with the 2code segment. In either of the cases of the functional spirit of interfaces and remain the same as with respectively.

The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface of includes a function call Square input precision output that includes three parameters input precision and output and which is issued from the 1Code Segment to the 2Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. An additional parameter of no concern may also be added. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment.

Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface is replaced by interface redefined to ignore or add parameters to the interface. Interface may similarly be redefined as interface redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. As can be seen in some cases a programming interface may include aspects such as parameters that are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1and 2Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface may still be in effect. Similarly shown in part or all of interface from may be written inline into interface to form interface . As illustrated interface is divided into A and B and interface portion A has been coded in line with interface to form interface .

For a concrete example consider that the interface from may perform a function call square input output which is received by interface which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface to conform them to a different interface in this case interfaces and . This might be done for example where there is an installed base of applications designed to communicate with say an operating system in accordance with the first interface s protocol but then the operating system is changed to use a different interface in this case interfaces and . It can be seen that the original interface used by the 2Code Segment is changed such that it is no longer compatible with the interface used by the 1Code Segment and so an intermediary is used to make the old and new interfaces compatible.

Similarly as shown in a third code segment can be introduced with divorce interface to receive the communications from interface and with divorce interface to transmit the interface functionality to for example interfaces and redesigned to work with but to provide the same functional result. Similarly and may work together to translate the functionality of interfaces and of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1Code Segment to the 2Code Segment i.e. to conform them to a different interface as may be required by the 2Code Segment either the original or a different 2Code Segment . This is depicted in .

As can be seen in this approach is similar to the Divorce scenario described above. It might be done for example where an installed base of applications are designed to communicate with an operating system in accordance with a first interface protocol but then the operating system is changed to use a different interface. The JIT Compiler may be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

Each of the requesting component the codecs component and the decoder may comprise code that executes on or hardware associated with a computer such as the computer system of and may comprise a conventional application program an operating system component or utility a control an application programming interface API as described in conjunction with a hardware device a combination of the above and so forth.

In one embodiment the requesting component instantiates a decoder by communicating with the codecs component and passing a file name or stream object. After instantiating the decoder the requesting component may then request a frame from the decoder by passing a frame type e.g. preview to the decoder . If the frame comprises a logical frame the decoder may then construct the frame or retrieve it from cache if it was previously constructed and cached in memory. If the frame is a physical frame the decoder may retrieve the frame from the image container . The decoder may then pass a pointer to the frame or an object that includes the frame to the requesting component .

In accordance with an aspect of the present invention the requesting component may request a frame by frame type from the decoder . For example the requesting component may send a string e.g. preview to the decoder to request a particular type of frame e.g. the preview frame . As another example the requesting component may send a globally unique identifier GUID that identifies a particular type of frame. Upon receiving a request for a frame by frame type the decoder searches the image container or an index related thereto to obtain a frame corresponding to the name. If the frame exists or can be constructed by the decoder the decoder returns the appropriate frame to the requesting component . Otherwise an error code may be returned.

In the past decoders did not generally have the ability to return frames by frame name. It was up to the requesting component to determine based on size or some other characteristic of the frame what type of frame the decoder had provided.

In accordance with another aspect of the present invention the requesting component may enumerate through the frames provided by the decoder and may query the decoder as to the type of any particular frame. In response to such a query the decoder may return a string or GUID identifying the type of frame or a value in an enumeration.

In one embodiment the decoder recognizes a canonical set of frame names including thumbnail raw sensor data embedded preview fast screen resolution preview and full resolution image. If an exact match for a frame does not exist in an image container the decoder may return a closest match. For example the decoder may receive a request for a preview frame. A container may store a thumbnail frame and a full image frame. In response to the request the decoder may determine whether the thumbnail frame or the full image frame is closest in size to the size of the preview frame and return either the thumbnail frame or the full image frame accordingly.

In one embodiment the set of frames may be locked and not modifiable except through a codecs update. In another embodiment the set of frames may be modified by an application user or otherwise without departing from the spirit or scope of the present invention.

At block a decoder is instantiated. This may be done by calling a codecs component with a file name or stream object as previously indicated.

At block the requesting component requests a frame by asking for a frame of a frame type from the decoder. This may be done by calling a method of the decoder with a string or GUID identifying the requested frame type.

At block a determination is made as to whether an exact match exists for the requested frame. If so the actions continue at block otherwise the actions continue at block . In some embodiments only exact matches are accepted. If a requesting component attempts to request a frame with a frame name or GUID that is not valid an error is returned.

At block the frame is returned. The frame may be returned as reference e.g. pointer to an object having methods to access the data in the frame.

At block the frame that is the closest match to the requested frame is returned. For example a thumbnail may be returned for a request for a preview frame.

At block a decoder is instantiated. At block the first frame is obtained from the decoder. This may be accomplished by calling the decoder and providing an index of the first frame e.g. 0 .

At block the type of the frame is obtained. The frame object may include an interface that allows a component to ask what type of frame the frame object includes. In response to a query the frame object may return a string or GUID for example.

At block the requesting component determines whether the frame is of the type desired. If not processing branches to block otherwise processing branches to block .

At block a determination is made as to whether the current frame is the last frame of the container. If so processing branches to block otherwise processing branches to block . The decoder may provide an interface that allows a requesting component to query how many frames exist in a container. If the requesting component keeps track of the frames it has requested it can know when it has obtained all the available frames.

At block the next frame is obtained from the decoder. The actions associated with may be repeated until either all the frames in the container are exhausted or until a desired frame type is found.

At block the actions end in success having found the desired frame. At block the actions end in failure having not found the desired frame before running out of frames.

In some embodiments both the ability to retrieve a frame by name e.g. frame type and to query for a frame type may be provided.

As can be seen from the foregoing detailed description there is provided a method and architecture for obtaining a desired frame by name and to identify a selected frame. While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

