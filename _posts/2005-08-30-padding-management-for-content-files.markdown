---

title: Padding management for content files
abstract: Described is the adding of padding to a content file (e.g., image and/or audiovisual file) for anticipated subsequent use such that the content file need not be re-encoded to add metadata and other data to it. For example, padding may be added to an image file directly after an image file directory, whereby the directory can grow as needed into the padded space. Metadata can likewise be added to the padding, e.g., from the opposite direction that the directory extends into the padding. The padding may be added on the first re-encoding of the file, reducing or eliminating the need for subsequent re-encoding. The padding also may be used to track dead space in the file, with adjacent regions of dead space coalesced into a single region of dead space.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07421451&OS=07421451&RS=07421451
owner: Microsoft Corporation
number: 07421451
owner_city: Redmond
owner_country: US
publication_date: 20050830
---
Digital image files including still images contain metadata that are used to store useful information about an image. For example an image may contain metadata that identifies the author copyright information keywords to identify with the image a caption and so forth. An image file is logically organized into blocks which may contain the encoded image data or metadata i.e. metadata comprises information about the image data. A particular set of blocks may be organized in a directory which is referred to as image file directory.

U.S. patent application Ser. No. 11 062 267 assigned to the assignee of the present invention describes an extensible metadata architecture for digital images as well as multimedia content in general . The extensible metadata architecture provides an abstraction layer of the metadata content within an image by which application programs can read and write metadata items.

A problem occurs when an application program attempts to write a metadata item when there is insufficient space within the metadata structure to accommodate the metadata item. One solution is to re encode the image file to add the metadata item. However re encoding an image file is very costly in terms of time and or resource consumption.

Briefly various aspects of the present invention are directed towards adding padding to a content file e.g. image and or audiovisual file and then writing the padded content file to persistent storage. For example padding may be added to an image file logically organized into metadata blocks directly after an image file directory particular metadata blocks organized as a directory of metadata items whereby the image file directory can grow as needed into the padded space. Metadata can likewise be added to the padding e.g. from the opposite direction that the directory extends into the padding. The padding may be added on the first re encoding of the file reducing or eliminating the need for subsequent re encoding. The padding also may be used to track dead space in the file with adjacent regions of dead space coalesced into a single region of dead space.

Upon obtaining metadata to add to an image file the image file may be evaluated to determine whether a sufficient dead space region exists in the image file to hold the metadata and if so the metadata added to the dead space region such as to a selected region that wastes the least amount of space. If no sufficient dead space region exists the metadata may be added to the padding region if sufficient. Only when both the dead space and padding space is insufficient for holding the metadata is the file re encoded for the purpose of adding metadata.

A metadata handler component that processes an image file is coupled to e.g. includes or is otherwise associated with a padding management component that produces a padded image file from an original image file or a re encoded image file . When subsequently opened e.g. for editing the padding management component can add metadata to a location corresponding to the padding can add an image file directory entry to a location corresponding to the padding and or can track dead space in a location corresponding to the padding.

Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various aspects of the technology described herein are directed towards extending or padding the amount of space to which metadata associated with a digital image may be written. Typically this occurs the first time supplemental metadata is added when there is insufficient space for it requiring the digital image file to be re encoded whereby padding comprising unused space for anticipated future use may be added. However as will be understood the present invention is not limited to still digital images but will work with any type of content in general such as multimedia content including without limitation a digital image or digital video any type of audio content including without limitation digital music or a combination of video and audio content. As such any of the examples mentioned herein are non limiting and the present invention may be used various ways that provide benefits and advantages in computing in general.

Turning to of the drawings there is shown a block diagram generally representing an exemplary architecture of components for handling image related metadata where as used herein metadata may mean data describing attributes of content such as in an image file. Some examples of image related metadata include without limitation author creation date width height lens data shutter speed caption keywords textual descriptions and so forth.

Various metadata and types of metadata may be added to image files and new metadata readers and writers may be added as needed for decoding and encoding metadata. To this end one or more metadata block readers may be associated with a metadata block within an image file a metadata block reader may be associated with one or more metadata blocks. A metadata block may mean a collection of one or more metadata items that may or may not be related. For example some imaging formats may specify a collection of metadata items each represented by a keyword and value pair.

One or more metadata block writers may be associated with a metadata block to be written to an image file a metadata block writer may be associated with one or more metadata blocks. One way to add delete or modify metadata is via in place editing of the metadata without the need to use a separate image stream for writing modified metadata to an image file.

As represented in executable software may perform any number of operations with an image file including reading metadata from and writing metadata to the image file. The executable software may be operably coupled to a metadata query reader for requesting metadata to be read from an image file and may be operably coupled to a metadata query writer for requesting metadata to be written to an image file. In one implementation the metadata query reader and the metadata query writer may provide suitable application programming interfaces APIs that may be invoked by the executable software to request that metadata to be respectively read from and written to an image file e.g. based on a query language. A policy component may also be operably coupled to the metadata query reader and to the metadata query writer for resolving non fully qualified queries for a metadata item in a non specified location within the file. The executable software the metadata query reader the metadata query writer and the policy component may each be any executable software code including an application program or application component a component of a linked library an object and so forth.

A codec such as codec may be provided for each type of image file supported by the computer system. For example there may be a codec for GIF JPEG PNG TIFF and other image file formats. The metadata query reader may also be operably coupled to a decoder of a codec and the metadata query writer may also be operably coupled to an encoder of the codec . Each codec may include or otherwise be associated with the decoder for decoding an image and the encoder for encoding an image. The decoder may include a metadata block reader that may be operably coupled to one or more metadata readers .

The metadata block reader may identify recognizable metadata blocks within an image file . Each metadata reader may then provide functionality for parsing a type of metadata block recognized within an image file. Different types of metadata schema tags used to describe an image file include Exif IPTC and XMP. A decoder may thus read metadata in an image file by using the metadata block reader to identify recognizable metadata blocks within the image file and then may use the same or a different metadata reader to decipher the metadata items in each metadata block. In various embodiments the decoder may also use one or more metadata readers to parse a metadata block that may include nested metadata blocks . Either the same or a different metadata reader may be used to decipher the metadata items in each nested metadata block. In this way a decoder may provide metadata items requested by a metadata query reader for an executable.

An encoder may include a metadata block writer that may be operably coupled to one or more metadata writers . The metadata block writer may identify and add a metadata writer for each metadata block to be written within an image file which as described below may be a padded image file . Each metadata writer may then provide functionality for writing metadata items for a type of metadata block to be written within an image file. In one embodiment an encoder may thus write metadata in an image file by using the metadata block writer to identify and add metadata writers for each metadata block to be written in the image file. Thus an encoder may write metadata items requested by an executable using a metadata query writer.

The metadata reader and the metadata writer may be operably coupled to an image file that may include metadata blocks and image data blocks . A metadata block may include one or more nested metadata blocks . In one embodiment a metadata block may include a nested metadata block for a different type of image than the metadata block. Each nested metadata blocks may also include in turn one or more nested metadata blocks so that metadata blocks may be nested for any number of levels. Correspondingly a metadata reader may be associated with each metadata block within a hierarchy of nested metadata blocks.

Note that the metadata architecture shown in is but one exemplary embodiment other configurations may be used to implement the present invention. For example a fast metadata writer may be implemented by using a metadata block reader to read metadata blocks from an image file and then using a metadata block writer to perform in place editing of metadata items in a metadata block for writing back to the image file. In another example executable software code may instantiate a metadata block reader a metadata block writer a metadata reader and or a metadata writer for performing operations on metadata in an image file without need of a decoder and or encoder.

In general in some image creation application program which may include camera software creates one or more image files . Those image files are added to a storage mechanism either directly by the creation program or indirectly by copying from another medium. Some time later a metadata editing program requests e.g. via a query or the like to read from or write to the metadata of a selected image file e.g. the image file of . When editing adding or modifying metadata re encoding may be necessary in order to fit the metadata into the image file. Typically if more metadata is present than at the time of creation re encoding is necessary.

In accordance with various aspects of the present invention upon re encoding the IFD metadata handler adds padding essentially extra space to the image file for anticipated use with subsequent metadata and other data thereby encoding a padded image file . One concept is to reduce or eliminate the need for future re encoding of an entire image file which is expensive should further editing to add metadata be performed. Note that while represents adding padding via the IFD metadata handler upon re encoding an image file the first time that re encoding is performed the padding may also be added during the first encoding of the file that is as part of image creation. In other words an encode IFD metadata handler having a padding management mechanism may be associated with the image creation application . However by being operational during after creation and as part of re encoding the padding management mechanism does not require the image creation application to have such a capability. The padding management mechanism thus can provide padding for images that were not initially padded as conventional image files are created without padding as well as for those that were previously padded but need additional padding.

Following the last IFD entry IFD M in this example is a pointer to the next IFD or NULL if the last IFD in the image file . In the example of the second IFD IFD is pointed to by the next IFD pointer in block and ranges from IFD 0 to IFD N. In turn following the last entry is a field containing a pointer to the next IFD if any.

In keeping with the present invention upon re encoding the padding management mechanism adds padding to the image file as generally represented in . In one implementation the padding is added directly after an IFD that is following at least one of the next IFD pointer fields. In the example of the padding is shown as having been added following the next IFD pointer field .

In one implementation padding may be on the order of four kilobytes although other sizes of padding may be added as appropriate for a given situation. Also to know whether there is padding or not present a directory entry is added to refer to the padding area with a unique padding tag identifier e.g. 0 EA1C .

Once the padding has been added this advantageously allows the preceding IFD IFD to grow if necessary to add another entry or set of entries. This is generally represented in where a new IFD entry e.g. IFD M 1 or entries may be added by inserting them into the padding space that includes and follows the next IFD pointer . One way to accomplish this is simply to rewrite the entire modified IFD part of which will now extend into what previously was added as padding. The padding space becomes smaller upon such an added entry.

The padding may be used for other purposes as well. For example shows the padding being used to track dead space essentially a count of dead space regions followed by an pairing for each region of dead space e.g. the dead space . As will be understood via this information metadata or other data may be added to dead space e.g. space that was used but became freed for whatever reason typically through user editing or removing of metadata items when sufficient dead space is available rather than to padded space.

The padding also may be consumed by metadata which in one implementation is consumed from the right higher offset to lower offset as represented from the perspective of by the shaded block labeled . Note that this is because any new directory entries are added from the left lower offsets to higher offsets whereby the padding may shrink from both directions without the new entries and metadata overwriting each other.

Depending on the data format padding can be added elsewhere in the image file if appropriate. For example shows an extensible hierarchical data format XMP within a TIFF image file with padding added to an XMP block by an XMP metadata handler 

As can be appreciated by adding spaces 0 20 to the file the padding space added to the XMP block allows the block to subsequently have metadata added thereto without needing to re encode the file.

Turning to an explanation of the padding management mechanism shows general example logic e.g. performed by the padding management mechanism when space needs to be allocated for metadata. Step represents performing any initialization such as to set variables e.g. to find the smallest amount of dead space to allocate if any.

Step selects an pair from the dead space list and step determines whether the size is sufficient to hold the amount of metadata to be written. If not step advances to step to repeat the evaluation with the next pair until none remain.

If sufficient space is detected at step step computes how much space will be wasted if the dead space is used for the metadata. Essentially steps and are directed towards finding the wasted space that if used will result in the least amount of space being wasted. Thus if less space is wasted at step than would be wasted with another pair a new pair is saved at step .

Step repeats the process until the list is exhausted. At this time there was either no dead space that was sufficient or the smallest amount of dead space that will hold the metadata has been located.

Step determines whether sufficient dead space was found that is at least one pair was located that can hold the metadata. If so step represents writing the data to that dead space and essentially removing the pair from the dead space list or adjusting it e.g. if there is wasted space left over after adding the metadata item to the dead space a new or adjusted for the remaining dead space is updated in the dead space list.

In the event that there was not sufficient dead space step determines whether there is sufficient padding to hold the metadata. In one implementation the padding is used even if using it results in the dead space list being overwritten. If sufficient padding exists step represents writing the metadata to the padding region. Otherwise the process failed to find sufficient space and at step a re encoding of the file needs to be performed.

Thus to summarize dead space is used first if sufficient with the dead space that results in the least amount of wasted space being selected for use. If no dead space is sufficient the padding is evaluated to determine whether it can hold the metadata. Only if not is re encoding performed.

If not step repeats the process until all pairs in the list have been selected and evaluated. If no existing pair represents adjacent space to that of the newly deleted pair step adds the newly deleted pair to the dead space list and increments the count. Note that the pairs may be sorted by size step e.g. so that smaller sized dead space pairs tracked in the padding will be overwritten if necessary before larger sized pairs.

It is possible that following significant editing the file may become fragmented with padding dead space deleted entries and so forth. While it is feasible to have a defragmentation utility as part of a metadata handler a more straightforward way to handle such a situation is to simply re encode the file. Padding is added to the re encoded file essentially starting over with a defragmented padded file.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

