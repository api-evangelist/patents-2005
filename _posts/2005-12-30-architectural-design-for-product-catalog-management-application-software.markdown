---

title: Architectural design for product catalog management application software
abstract: Methods, systems, and apparatus, including computer program products, for implementing a software architecture design for a software application implementing catalog management useful to create or update published catalogs based on product master data changes or external supplier catalogs. The application is structured as multiple process components interacting with each other through service interfaces, and multiple service interface operations, each being implemented for a respective process component. The process components include a Purchasing Contract Processing process component that handles agreements between a purchaser and a supplier; a Product Catalogue Authoring process component that creates and edits product catalogs by collecting product information from relevant sources, controls the quality of the product catalogs' contents, and controls when and to what extent Product Catalogues can be published; and a Product Catalogue Publishing process component that makes published product catalogs available to a large number of users electronically for use in other business processes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08326703&OS=08326703&RS=08326703
owner: SAP AG
number: 08326703
owner_city: Walldorf
owner_country: DE
publication_date: 20051230
---
The subject matter of this patent application relates to computer software architecture and more particularly to the architecture of application software for product catalog management.

Enterprise software systems are generally large and complex. Such systems can require many different components distributed across many different hardware platforms possibly in several different geographical locations. Thus the architecture of a large software application i.e. what its components are and how they fit together is an important aspect of its design for a successful implementation.

The invention can be implemented as methods systems and apparatus including computer program products for implementing a software architecture design for a software application implementing catalog management useful to create or update published catalogs based on product master data changes or external supplier catalogs. The application is structured as multiple process components interacting with each other through service interfaces and multiple service interface operations each being implemented for a respective process component. The process components include a Purchasing Contract Processing process component that handles agreements between a purchaser and a supplier a Product Catalogue Authoring process component that creates and edits product catalogs by collecting product information from relevant sources controls the quality of the product catalogs contents and controls when and to what extent Product Catalogues can be published and a Product Catalogue Publishing process component that makes published product catalogs available to a large number of users electronically for use in other business processes.

The invention can further be implemented as methods systems and apparatus including computer program products implementing a software architecture design for a software application that is adapted to interact with external software systems through the service operations described in reference to external process components or a subcombination of them.

The subject matter described in this specification can be implemented to realize one or more of the following advantages. Effective use is made of process components as units of software reuse to provide a design that can be implemented reliably in a cost effective way. Effective use is made of deployment units each of which is deployable on a separate computer hardware platform independent of every other deployment unit to provide a scalable design. Service interfaces of the process components define a pair wise interaction between pairs of process components that are in different deployment units in a scalable way.

Details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and in the description below. Further features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

The product catalog management design includes three deployment units a Purchasing deployment unit a Catalogue Authoring deployment unit and a Catalogue Publishing deployment unit .

The Purchasing deployment unit contains a Purchasing Contract Processing process component that records all relevant business transactions. The Purchasing Contract Processing process component is used to handle agreements between a purchaser and a supplier that covers the supply of goods or the performance of services at agreed conditions.

The Catalogue Authoring deployment unit contains a Product Catalogue Authoring process component . The Product Catalogue Authoring process component is used to create and edit product catalogs by collecting product information from the relevant sources control the quality of the product catalogs contents and control when and to what extent Product Catalogues can be published for use in other business processes.

The Catalogue Publishing deployment unit contains a Product Catalogue Publishing process component . The Product Catalogue Publishing process component is used to make published product catalogs available to a large number of users in an electronic manner as a means to interactively search for and select products for use in other business processes. Published product catalogs are product catalogs that have been released for use in business processes.

A number of external process components described below will be used to describe the architectural design. These include a Product Catalogue Authoring at Customer process component and a Product Catalogue Authoring at Supplier process component . The Product Catalogue Authoring at Customer process component receives updates from the Product Catalogue Authoring process component and the Product Catalogue Authoring at Supplier process component provides updates to the Product Catalogue Authoring process component .

Not explicitly represented in the figures is a foundation layer that contains all fundamental entities that are used in multiple deployment units. These entities can be process components business objects and reuse service components. A reuse service component is a piece of software that is reused in different transactions. A reuse service component is used by its defined interfaces which can be e.g. local APIs Application Programming Interfaces or service interfaces.

In contrast to a deployment unit the foundation layer does not define a limit for application defined transactions. Deployment units communicate directly with entities in the foundation layer which communication is typically not message based. The foundation layer is active in every system instance on which the application is deployed. Business objects in the foundation layer will generally be master data objects. In addition the foundation layer will include some business process objects that are used by multiple deployment units. Master data objects and business process objects that are specific to a deployment unit should be assigned to their respective deployment unit.

A process component of an external system is drawn as a dashed line process component drawn as icon . Such a process component may be referred to as an external process component and it is used to represent the external system in describing interactions with the external system however this should be understood to require no more of the external system that it be able to produce and receive messages as required by the process component that interacts with the external system.

Interactions between process component pairs involving their respective business objects process agents operations interfaces and messages are described as process component interactions which determine the interactions of a pair of process components across a deployment unit boundary i.e. from one deployment unit to another deployment unit. Interactions between process components are indicated in by directed lines arrows . Interactions between process components within a deployment unit need not be described except to note that they exist as these interactions are not constrained by the architectural design and can be implemented in any convenient fashion. Interactions between process components that cross a deployment unit boundary will be illustrated by the figures of this patent application these figures will show the relevant elements associated with potential interaction between two process components but interfaces process agents and business objects that are not relevant to the potential interaction will not be shown.

The architectural design is a specification of a computer software application and elements of the architectural design can be implemented to realize a software application that implements the end to end process mentioned earlier. The elements of the architecture are at times described in this specification as being contained or included in other elements for example a process component is described as being contained in a deployment unit. It should be understood however that such operational inclusion can be realized in a variety of ways and is not limited to a physical inclusion of the entirety of one element in another.

The architectural elements include the business object. A business object is a representation of a type of a uniquely identifiable business entity an object instance described by a structural model. Processes operate on business objects.

A business object represents a specific view on some well defined business content. A business object represents content which a typical business user would expect and understand with little explanation. Business objects are further categorized as business process objects and master data objects. A master data object is an object that encapsulates master data i.e. data that is valid for a period of time . A business process object which is the kind of business object generally found in a process component is an object that encapsulates transactional data i.e. data that is valid for a point in time . The term business object will be used generically to refer to a business process object and a master data object unless the context requires otherwise. Properly implemented business objects are implemented free of redundancies.

The architectural elements also include the process component. A process component is a software package that realizes a business process and generally exposes its functionality as services. The functionality contains business transactions. A process component contains one or more semantically related business objects. Any business object belongs to no more than one process component.

Process components are modular and context independent. That they are context independent means that a process component is not specific to any specific application and is reusable. The process component is the smallest most granular element of reuse in the architecture.

The architectural elements also include the operation. An operation belongs to exactly one process component. A process component generally has multiple operations. Operations can be synchronous or asynchronous corresponding to synchronous or asynchronous process agents which will be described below. An operation is the smallest separately callable function described by a set of data types used as input output and fault parameters serving as a signature.

The architectural elements also include the service interface referred to simply as the interface. An interface is a named group of operations. Each operation belongs to exactly one interface. An interface belongs to exactly one process component. A process component might contain multiple interfaces. In one implementation an interface contains only inbound or outbound operations but not a mixture of both. One interface can contain both synchronous and asynchronous operations. All operations of the same type either inbound or outbound which belong to the same message choreography will belong to the same interface. Thus generally all outbound operations to the same other process component are in one interface.

The architectural elements also include the message. Operations transmit and receive messages. Any convenient messaging infrastructure can be used. A message is information conveyed from one process component instance to another with the expectation that activity will ensue. An operation can use multiple message types for inbound outbound or error messages. When two process components are in different deployment units invocation of an operation of one process component by the other process component is accomplished by an operation on the other process component sending a message to the first process component.

The architectural elements also include the process agent. Process agents do business processing that involves the sending or receiving of messages. Each operation will generally have at least one associated process agent. A process agent can be associated with one or more operations. Process agents can be either inbound or outbound and either synchronous or asynchronous.

Asynchronous outbound process agents are called after a business object changes e.g. after a create update or delete of a business object instance.

An output process agent will generally perform some processing of the data of the business object instance whose change triggered the event. An outbound agent triggers subsequent business process steps by sending messages using well defined outbound services to another process component which generally will be in another deployment unit or to an external system. An outbound process agent is linked to the one business object that triggers the agent but it is sent not to another business object but rather to another process component. Thus the outbound process agent can be implemented without knowledge of the exact business object design of the recipient process component.

Inbound process agents are called after a message has been received. Inbound process agents are used for the inbound part of a message based communication. An inbound process agent starts the execution of the business process step requested in a message by creating or updating one or multiple business object instances. An inbound process agent is not the agent of a business object but of its process component. An inbound process agent can act on multiple business objects in a process component.

Synchronous agents are used when a process component requires a more or less immediate response from another process component and is waiting for that response to continue its work.

Operations and process components are described in this specification in terms of process agents. However in alternative implementations process components and operations can be implemented without use of agents using other conventional techniques to perform the functions described in this specification.

The architectural elements also include the deployment unit. A deployment unit includes one or more process components that are deployed together on a single computer system platform. Conversely separate deployment units can be deployed on separate physical computing systems. For this reason a deployment unit boundary defines the limits of an application defined transaction i.e. a set of actions that have the ACID properties of atomicity consistency isolation and durability. To make use of database manager facilities the architecture requires that all operations of such a transaction be performed on one physical database as a consequence the processes of such a transaction must be performed by the process components of one instance of one deployment unit.

The process components of one deployment unit interact with those of another deployment unit using messages passed through one or more data communication networks or other suitable communication channels. Thus a deployment unit deployed on a platform belonging one business can interact with a deployment unit software entity deployed on a separate platform belonging to a different and unrelated business allowing for business to business communication. More than one instance of a given deployment unit can execute at the same time on the same computing system or on separate physical computing systems. This arrangement allows the functionality offered by a deployment unit to be scaled to meet demand by creating as many instances as needed.

Since interaction between deployment units is through service operations a deployment unit can be replaced by other another deployment unit as long as the new deployment unit supports the operations depended upon by other deployment units. Thus while deployment units can depend on the external interfaces of process components in other deployment units deployment units are not dependent on process component interaction within other deployment units. Similarly process components that interact with other process components or external systems only through messages e.g. as sent and received by operations can also be replaced as long as the replacement supports the operations of the original.

Interactions between Process Components Product Catalogue Authoring and Product Catalogue Authoring at Customer 

The Product Catalogue Authoring process component contains a Product Catalogue business object a Notify of Publication from Product Catalogue to Customer outbound process agent and a Product Catalogue Transmission Sending Out interface .

The Product Catalogue business object represents a structured directory of catalog items where each catalog item represents a product and provides information about it. A product catalog serves to provide or exchange information about a subset of a company s products. The information is tailored to a specific target group of people to provide exactly the information the group of people needs or to advertise the products to the group.

The Product Catalogue business object initiates publication notifications within the Product Catalogue Authoring process component . The Product Catalogue business object first sends a request to the Notify of Publication from Product Catalogue to Customer outbound process agent . For example the request may notify the customer of catalog publication. Here the outbound process agent invokes a Notify of Catalogue Update operation provided by the Product Catalogue Transmission Sending Out interface . Next the Notify of Catalogue Update operation transmits a Catalogue Update Notification message to another process component such as the Product Catalogue Authoring at Customer process component notifying another party about a catalog publication. This can be a new catalog or an update to a previously published catalog.

Interactions between Process Components Purchasing Contract Processing and Product Catalogue Authoring 

The Purchasing Contract Processing process component contains a Purchasing Contract business object a Notify of Product from Purchasing Contract to Product Catalogue Authoring outbound process agent and a Product Catalogue Authoring Out interface . The Purchasing Contract business object represents an agreement between a purchaser and a supplier that covers the supply of goods or the performance of services at agreed conditions.

The Product Catalogue Authoring process component contains a Product Catalogue business object a Maintain Product Catalogue inbound process agent and a Product Catalogue Transmission Receiving In interface . The Product Catalogue business object represents a structured directory of catalog items where each catalog item represents a product and provides information about it.

In the Purchasing Contract Processing process component the Purchasing Contract business object first sends a request to the Notify of Product from Purchasing Contract to Product Catalogue Authoring outbound process agent . For example the request may inform product catalog authoring that a new product is available. Here the outbound process agent invokes a Notify of Product Catalog operation provided by the Product Catalogue Authoring Out interface . Next the Notify of Product Catalog operation transmits a Catalogue Update Notification message to request that the catalog be updated.

In the Product Catalogue Authoring process component interactions involving catalog updates originate from the Catalogue Update Notification message . The Catalogue Update Notification message is received by a Maintain Catalogue operation provided by the Product Catalogue Transmission Receiving In interface . Here the operation sends a request to the Maintain Product Catalogue inbound process agent which updates the Product Catalogue business object.

Interactions between Process Components Product Catalogue Authoring at Supplier and Product Catalogue Authoring 

The Product Catalogue Authoring process component contains a Product Catalogue business object a Maintain Product Catalogue inbound process agent and a Product Catalogue Transmission Receiving In interface . The Product Catalogue business object represents a structured directory of catalog items where each catalog item represents a product and provides information about it.

Catalogue interactions within the Product Catalogue Authoring process component are initiated upon receipt of a Catalogue Update Notification message . The Catalogue Update Notification message is received by a Maintain Catalogue operation provided by the Product Catalogue Transmission Receiving In. Here the operation sends a request to the Maintain Product Catalogue inbound process agent which updates the Product Catalogue business object . For example the product catalog is updated to show the changes received.

Interactions between Process Components Product Catalogue Authoring and Product Catalogue Publishing 

The Product Catalogue Authoring process component contains a Product Catalogue business object a Request Publication from Product Catalogue to Product Catalogue Publishing outbound process agent a Change Product Catalogue based on Published Product Catalogue inbound process agent a Publishing Out interface and a Publishing In interface . The Product Catalogue business object represents a structured directory of catalog items where each catalog item represents a product and provides information about it.

The Product Catalogue Publishing process component contains a Published Product Catalogue business object a Maintain Published Product Catalogue inbound process agent a Notify of Product Catalogue Publication Status outbound process agent a Publishing In interface and a Publishing Out interface . The Published Product Catalogue business object represents a version of a product catalog that has been released for access by or exchange with the target group of people for which the product catalog s content has been tailored. Access by the target group may be by software typically via a network that essentially provides read only access to the information in the catalog. Exchange may occur as an electronic document via a data carrier email or CDs for example as printed copies or any some other media for information exchange.

Updates of the Product Catalogue business object may trigger interactions in the Product Catalogue Authoring process component . In one type of interaction a request for catalog publication may be made. The Product Catalogue business object first sends a request to the Request Publication from Product Catalogue to Product Catalogue Publishing outbound process agent . For example the Product Catalogue business object may request the catalog publication system to publish a new catalog or update or delete an already published catalog. The request may be transmitted in several packages. Here the outbound process agent invokes a Request Catalogue Publication operation provided by the Publishing Out interface . Next the Request Catalogue Publication operation transmits a Catalogue Publication Request message requesting to publish a new or changed catalog or to delete an already published catalog.

In another type of interaction a request for cancelling published catalogs may be made. The Product Catalogue business object first sends a request to the Request Publication from Product Catalogue to Product Catalogue Publishing outbound process agent . For example the request may cancel processing of a catalog. Here the outbound process agent invokes a Request Catalogue Publication Cancellation operation provided by the Publishing Out interface . Next the Request Catalogue Publication Cancellation operation transmits a Catalogue Publication Transmission Cancellation Request message requesting cancellation of the transmission of a catalog and to restore an earlier published state if such exists of the catalog.

In yet another type of interaction a request for a catalog item lock may be made. The Product Catalogue business object first sends a request to the Request Publication from Product Catalogue to Product Catalogue Publishing outbound process agent . For example the request may lock single items of the published catalog or prevent single items from being included in unpublished catalogs. Here the outbound process agent invokes a Request Catalogue Item Lock operation provided by the Publishing Out interface . Next the Request Catalogue Item Lock operation transmits a Catalogue Item Lock Request message requesting to lock single items of the catalog contained in the catalog publication transmission.

In yet another type of interaction a request for catalog content change may be made. The Product Catalogue business object first sends a request to the Request Publication from Product Catalogue to Product Catalogue Publishing outbound process agent . For example the request may change add or delete a limited number of catalog items contained in the published catalog. Here the outbound process agent invokes a Request Catalogue Publication Content Change operation provided by the Publishing Out interface . Next the Request Catalogue Publication Content Change operation transmits a Catalogue Publication Transmission Content Change Request message requesting to change create or to delete a limited number of catalog items contained in the catalog publication transmission.

The Product Catalogue Authoring process component may also receive messages from other process components such as the Product Catalogue Publishing process component . In one type of interaction the Catalogue Publication Transmission Package Notification message is received by a Change Transmission Status operation provided by the Publishing In interface . The message may be a notification from catalog publishing to catalog authoring about the reception of a package of a catalog publication transmission and information about the validity of the package s content. Here the operation sends a request to the Change Product Catalogue based on Published Product Catalogue inbound process agent which updates the Product Catalogue business object . For example the product catalog is updated with the status of an ongoing catalog publication transmission package.

In another type of interaction the Catalogue Publication Confirmation message is received by a Change Publication Status operation provided by the Publishing In interface . The message may be the confirmation from catalog publishing to catalog authoring whether the publication or deletion of a catalog requested by a catalog publication was successful or not. Here the operation sends a request to the Change Product Catalogue based on Published Product Catalogue inbound process agent which updates the Product Catalogue business object . For example the product catalog is updated with the status of an ongoing catalog publication.

In yet another type of interaction the Catalogue Publication Transmission Cancellation Confirmation message is received by a Change Catalogue based on Publication Cancellation operation provided by the Publishing In interface . The message may be the confirmation from catalog publishing whether the transmission of a catalog has been cancelled successfully and an earlier published state of this catalog if such exists has been restored or not. Here the operation sends a request to the Change Product Catalogue based on Published Product Catalogue inbound process agent which updates the Product Catalogue business object . For example the product catalog is updated with the result status of a request to cancel an ongoing catalog publication transmission.

In yet another type of interaction the Catalogue Publication Transmission Content Change Confirmation message is received by a Change Catalogue based on Content Change Publication Status operation provided by the Publishing In interface . The message may be the confirmation from catalog publishing to catalog authoring whether a limited number of catalog items contained in the catalog publication transmission could be changed created or deleted. Here the operation sends a request to the Change Product Catalogue based on Published Product Catalogue inbound process agent which updates the Product Catalogue business object . For example the product catalog is updated with the content change confirmation.

In yet another type of interaction the Catalogue Item Lock Confirmation message is received by a Change Catalogue based on Item Lock Status operation provided by the Publishing In interface . The message may be the confirmation from catalog publishing to the catalog authoring whether single items of the catalog contained in the catalog publication transmission could be locked or not. Here the operation sends a request to the Change Product Catalogue based on Published Product Catalogue inbound process agent which updates the Product Catalogue business object . For example the product catalog is updated with the item lock status.

The Product Catalogue Publishing process component may receive messages from other process components such as the Product Catalogue Authoring process component and update the Published Product Catalogue business object . In one type of interaction the Catalogue Publication Request message is received by a Maintain Published Product Catalogue operation provided by the Publishing In interface . The message may be a request to publish a new or changed catalog or to delete an already published catalog. Here the operation sends a request to the Maintain Published Product Catalogue inbound process agent which updates the Published Product Catalogue business object .

In another type of interaction the Catalogue Publication Transmission Cancellation Request message is received by a Cancel Catalogue Publication operation provided by the Publishing In interface . The message may request cancellation of the transmission of a catalog and to restore an earlier published state if such exists of the catalog. Here the operation sends a request to the Maintain Published Product Catalogue inbound process agent which updates the Published Product Catalogue business object .

In yet another type of interaction the Catalogue Item Lock Request message is received by a Lock Published Catalogue Items operation provided by the Publishing In interface . The message may be a request to lock single items of the catalog contained in the catalog publication transmission. Here the operation sends a request to the Maintain Published Product Catalogue inbound process agent which updates the Published Product Catalogue business object . For example the published product catalog is updated with the locked items.

In yet another type of interaction the Catalogue Publication Transmission Content Change Request message is received by a Change Published Catalogue Content operation provided by the Publishing In interface . The message may be a request to change create or to delete a limited number of catalog items contained in the catalog publication transmission. Here the operation sends a request to the Maintain Published Product Catalogue inbound process agent which updates the Published Product Catalogue business object . For example the published product catalog is updated with the changed contents.

Within the Product Catalogue Publishing process component interactions involving product catalog publishing also may originate in the Published Product Catalogue business object . In one type of interaction a request for notification of a publication package may be made. The Published Product Catalogue business object first sends a request to the Notify of Product Catalogue Publication Status outbound process agent . For example the request may to notify product Catalogue Authoring of a publication transmission package check. Here the outbound process agent invokes a Notify of Publication Transmission Package Check operation provided by the Publishing Out interface . Next the Notify of Publication Transmission Package Check operation transmits a Catalogue Publication Transmission Package Notification message with notification of the transmission.

In another type of interaction a request for publication notification may be made. The Published Product Catalogue business object first sends a request to the Notify of Product Catalogue Publication Status outbound process agent . For example the request may confirm to the sender of a catalog publication transmission that the publication or deletion of the catalog as requested was successful. Here the outbound process agent invokes a Confirm Catalogue Publication operation provided by the Publishing Out interface . Next the Confirm Catalogue Publication operation transmits a Catalogue Publication Confirmation message to send the confirmation.

In yet another type of interaction a request for a publication cancellation notification may be made. The Published Product Catalogue business object first sends a request to the Notify of Product Catalogue Publication Status outbound process agent . For example the request may confirm that a cancellation request from product catalog authoring was received successfully. Here the outbound process agent invokes a Confirm Catalogue Publication Cancellation operation provided by the Publishing Out interface . Next the Confirm Catalogue Publication Cancellation operation transmits a Catalogue Publication Transmission Cancellation Confirmation message confirming the publication cancellation.

In yet another type of interaction a request for content change confirmation may be made. The Published Product Catalogue business object first sends a request to the Notify of Product Catalogue Publication Status outbound process agent . For example the request may confirm to the requester that the requested catalog content change was completed. Here the outbound process agent invokes a Confirm Catalogue Publication Content Change operation provided by the Publishing Out interface . Next the Confirm Catalogue Publication Content Change operation transmits a Catalogue Publication Transmission Content Change Confirmation message to confirm the change.

In yet another type of interaction a request for a catalog item lock confirmation may be made. The Published Product Catalogue business object first sends a request to the Notify of Product Catalogue Publication Status outbound process agent . For example the request may confirm the receipt of a catalog item lock request received from product catalog authoring. Here the outbound process agent invokes a Confirm Catalogue Item Lock operation provided by the Publishing Out interface . Next the Confirm Catalogue Item Lock operation transmits a Catalogue Item Lock Confirmation message to confirm the catalog item lock.

The subject matter described in this specification and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structural means disclosed in this specification and structural equivalents thereof or in combinations of them. The subject matter described in this specification can be implemented as one or more computer program products i.e. one or more computer programs tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program also known as a program software software application or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file. A program can be stored in a portion of a file that holds other programs or data in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. a data server a middleware component e.g. an application server or a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described herein or any combination of such back end middleware and front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specifics these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as an exemplification of preferred embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments may also be provided in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment may also be provided in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

The subject matter has been described in terms of particular variations but other variations can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

