---

title: Hardware accelerated blend modes
abstract: Blending colors of source and destination primitives by a graphics processing unit is disclosed. The graphics processing unit executes a blending program that blends the primitives. The graphics processing unit receives the blending program from a central processing unit or a graphics application program. For example, the graphics processing unit draws a source primitive in a source texture map and a destination primitive in a destination texture map. The blending program (e.g., a pixel shader) is set to be applied to the primitives, and the graphics processing unit applies the blend mode to each pixel of the primitives, rendering a composite primitive in a destination render target.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07312801&OS=07312801&RS=07312801
owner: Microsoft Corporation
number: 07312801
owner_city: Redmond
owner_country: US
publication_date: 20050225
---
The invention generally relates to the field of computer graphics and specifically to computer hardware rendering of graphical information.

A blend mode is a formula used in combining a color of a source primitive with a color of a destination primitive to produce a new color in a rendered primitive. A primitive is the simplest object that typical graphics processing units draw and primitives may be combined to form more robust images shapes backgrounds graphics etc. A source primitive may be a primitive that is rendered atop of an existing primitive and a destination primitive may be the existing primitive. When using a particular blend mode to render a source primitive into a destination primitive the blend mode may be applied to each pixel of the source and destination primitives. In this way a blend mode may be applied to each pixel of a source and of a destination primitive to calculate a new color for each pixel of a rendered primitive.

A color of a pixel may be described by a combination of four components. Three of the components may represent the amount of red R green G and blue B in the color. These components may be labeled R G and B each of which may be a floating point number ranging from 0 to 1. A fourth component may be an alpha A value and may represent an opacity of a pixel. An alpha A value of 0 may describe the pixel as transparent an alpha A value of 1 may describe the pixel as opaque and a fractional alpha A value may describe a degree of translucence of the pixel. The four values of R G B and A thus may define a pixel s color and opacity.

Formulas for blend modes may be written in a variety of ways. Graphics processing units may provide built in support for a formula that computes components of a new color N from components of a source color S and a destination color D. The formulas may include parameters P and Q which may determine how a blend mode behaves. A parameter P called a source blend factor may be chosen from a set 0 1 D 1 D D 1 D. Similarly a parameter Q called a destination blend factor may be chosen from a set 0 1 S 1 S S 1 S. Blend modes that may be built in a graphics processing unit to produce a new color or opacity N for each pixel may include 

Parameters in addition to P and Q may be added to blend modes to provide additional variations for blend modes. For example parameters X Y and Z may be used and may be constants with values of 0 or 1. When compositing an opaque source primitive with an opaque destination primitive X may determine whether an intersection of the source and destination appears in a composite primitive Y may determine whether a part of the source primitive outside the destination primitive appears and Z may determine whether a part of the destination primitive outside the source primitive appears. A function f may be a function of the source and destination colors. The following equations may provide a more general formulation of blend modes again computing a new color or opacity N from a given source color S and destination color D for each pixel 1 1 1 1 1 1 1 1 

Some blend modes may be included with for example drivers for a graphics processing unit and other blend modes may be supplied by a graphics application program. Example parameter values for such blend modes are listed in the following table Table 2 

Typically graphics processing units apply a few blend modes. For more complex or varied blend modes graphics application programs may perform some or all of their rendering calculations through software on a central processing unit. That is the central processing unit may perform the blending of two primitives and then send a bitmap to the graphics processing unit for rendering. The speed of execution of graphics application programs therefore may be limited by the rendering speed at which the central processing unit can render pixels of a composite primitive. The rendering speed of a central processing unit may be slower than the rendering speed of the graphics processing unit.

For example a graphics application program may specify that a particular primitive when drawn atop other primitives should darken the colors of the other primitives. The amount of darkening applied to the existing primitives may be controlled by a luminance of the newly drawn primitive according to a blend mode. Typically blend modes may be applied by the central processing unit for each pixel covered by the new primitive in the composite rendering.

Using the central processing unit to apply a blend mode pixel by pixel may slow application executions as the rendering process is completed. Additionally central processing units may be pulled from completing other work to apply the blend mode thus potentially slowing the performance of other tasks. In a client server scenario the server central processing unit may apply the blend mode and then transmit all the pixels of a composite primitive from the server to the client consuming valuable bandwidth.

There is a need therefore for methods and apparatus for more efficiently rendering blend modes while taking advantage of the speed of a graphics processing unit. The methods and apparatus additionally should minimize the volume of calculations required of a central processing unit and the bandwidth required in the rendering process.

The present invention enables graphics application program blend modes to be calculated on a graphics processing unit rather than on a central processing unit. The invention may take advantage of pipelined parallelism of current graphics hardware free the central processing unit to perform other functions and reduce transmission of pixels of composite primitives from a server to a client. A graphics application program code calling for a blending of two or more primitives may send a central processing unit a program that when executed may apply a blend mode for the blending. The central processing unit may send the program to the graphics processing unit for execution.

The graphics processing unit may execute the program and for example draw a source primitive in a source texture map and draw a destination primitive in a destination texture map. The program for applying the blend mode to the primitives may be set to be applied to the source and destination texture maps. The graphics processing unit may then apply the blend mode to each pixel of the primitives and render a composite primitive in a destination render target.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a central processing unit a graphics processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus . Computer may additionally include an accelerated graphics bus through which the graphics processing unit and the video interface may communicate with the monitor .

The graphics processing unit may render primitives and combinations of primitives e.g. images shapes backgrounds graphics etc. on the monitor by for example transforming graphic points from the primitives to respective buffers calculating lighting at each pixel calculating texture on surfaces and rendering the primitives.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

The client computer and the server computer each may be the computer described with regard to . The client computer may include a central processing unit a graphics application program and a programmable graphics processing unit and may provide a display to the monitor . The server computer may include a central processing unit and a graphics application program . Of course the client computer and the server computer may include other components and may be in communication with other devices such as those described with regard to .

The programmable graphics processing unit may be a hardware device that renders primitives and combinations of primitives e.g. images shapes backgrounds graphics etc. on the monitor . The programmable graphics processing unit may render primitives by for example transforming graphic points from the primitives to respective buffers calculating lighting at each pixel calculating texture on surfaces etc. and rendering the primitives on the monitor . The programmable graphics processing unit may be in communication with the central processing unit of the client computer . Alternatively or additionally the programmable graphics processing unit may be through the client computer in communication with the central processing unit of the server computer .

The graphics application programs each may be any application that provides for rendering graphical information such as primitives. Such primitives may be anything rendered in a buffer or displayed on a monitor. Primitives may be combined and rendered as for example pictures video images text graphics or shapes. The graphics application programs may implement through a graphics processing unit blend modes for blending a source primitive with a destination primitive. Blend modes may be implemented or applied to a primitive through execution of a separate function program module or the like commonly referred to as a pixel shader. As used herein the term pixel shader means program code that applies a blend mode. The graphics application programs may provide for the application of a blend mode in a pixel shader and each pixel shader may be a function or program for executing a blend mode.

The graphics application programs may communicate with or be executed by respective central processing units . During execution of the graphics application program a source primitive may be called to be blended with a destination primitive according to a blend mode. The graphics application program may send to the central processing unit a pixel shader. In accordance with the present invention instead of executing the pixel shader on the central processing unit the graphics application program may direct the central processing unit to send the pixel shader to the programmable graphics processing unit . The central processing unit may direct the programmable graphics processing unit to execute the pixel shader. The pixel shader may thus facilitate applying the blend mode to each pixel of the source and destination primitives and render a composite primitive. That is the programmable graphics processing unit may be directed to blend according to the blend mode the source and destination primitives. The programmable graphics processing unit may execute the pixel shader to apply the blend mode to each pixel of the source and destination primitives and to render the composite primitive for example on the monitor . Alternatively the graphics application program may communicate with an application serving as an intermediary between the graphics application program and the graphics processing unit . Such an intermediary application may be a graphics processing unit driver or a graphics library comprising pixel shaders. The graphics application program may direct the intermediary application to provide an appropriate pixel shader to the programmable graphics processing unit for a blending operation. The intermediary application may then select an appropriate pixel shader to provide the appropriate blending and send the pixel shader to the graphics processing unit for execution.

In an alternative embodiment the graphics application program running on the server computer may send a pixel shader to the central processing unit directing the central processing unit to send it to the client computer for execution on the programmable graphics processing unit . The central processing unit may direct the programmable graphics processing unit to execute the pixel shader and render a composite primitive.

At step the central processing unit may send the program code to a programmable graphics processing unit for execution. The programmable graphics processing unit may at step execute the program code to apply the blend mode to each pixel of the source and destination primitives. A composite primitive may then be rendered on a display buffer at step .

A copy of the destination primitive from the render target may be made and placed in a temporary texture map at step . This temporary texture map is hereinafter referred to as the destination texture map. It will be understood that step may be performed if the programmable graphics processing unit used does not provide for a pixel shader to read pixel colors directly from the destination render target. If an architecture for a programmable graphics processing unit enables or allows reading from and writing to the same render target step may be eliminated from the method .

At step the pixel shader may be set to use the source and destination texture maps during its execution. The programmable graphics processing unit may execute the pixel shader at step applying the blend mode to each pixel of the source and destination texture maps and drawing a filled rectangle into the destination render target. That is the programmable graphics processing unit may combine a source pixel color and a destination pixel color to produce a result color that will be placed in the destination render target for each pixel. It will be understood that the pixel shader may be developed to process blend modes such as those herein described and others using for example pixel shader assembly language or a higher level shading language. If at step more primitives are to be rendered then the process may repeat from step . If at step no more primitives are to be rendered then the destination render target may be displayed.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the specific examples in conjunction with the various figures it is to be understood that other embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. The examples are offered in explanation of the invention and are in no way intended to limit the scope of the invention as defined in the claims. In summary in no way is the present invention limited to the examples provided and described herein. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

