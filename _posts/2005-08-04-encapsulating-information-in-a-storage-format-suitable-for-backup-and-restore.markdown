---

title: Encapsulating information in a storage format suitable for backup and restore
abstract: A system for encapsulating configuration information in storage objects formatted for backup and restore comprises a processor coupled to a memory, where the memory stores instructions executable by the processor to implement a backup manager configured to generate backup versions of a plurality of storage objects (such as files or directories) of a source data set of a primary host. The backup manager may be configured to create an additional storage object that includes information collected from a designated information source in a first format, store the additional storage object within the source data set in a second format, and generate a backup version of the additional storage object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08032491&OS=08032491&RS=08032491
owner: Symantec Operating Corporation
number: 08032491
owner_city: Mountain View
owner_country: US
publication_date: 20050804
---
This application claims the benefit of U.S. provisional patent application Ser. No. 60 674 224 entitled Advanced Techniques For Data Protection And Restoration filed Apr. 22 2005.

This invention relates to computer systems and more particularly to backup and restoration of data within computer systems.

Many business organizations and governmental entities rely upon applications that access large amounts of data often exceeding many terabytes of data for mission critical applications. Numerous different types of storage devices potentially from multiple storage vendors with varying functionality performance and availability characteristics may be employed in such environments.

Any one of a variety of factors such as system crashes hardware storage device failures software defects or user errors e.g. an inadvertent deletion of a file may potentially lead to data corruption or to a loss of critical data in such environments. In order to recover from such failures various kinds of backup techniques may be employed. For example in some storage environments file level replication may be employed where a complete copy of the set of files in one or more file systems at a primary host may be created at a secondary host. If the primary host fails or if the file system at the primary host becomes corrupted or unavailable the files may be recovered or restored by copying from the replica.

However simply restoring contents of storage objects such as files or directories may be insufficient for a desired level of recovery from certain types of failures. For example if a primary host whose files are backed up by a file replication mechanism fails users may desire that the configuration state of the primary host also be restored along with the file data. Unfortunately some types of system configuration information as well as other information appropriate for backup such as application generated or user supplied information may not typically be available or stored in a format recognized by the replication mechanism and as a result may not typically be backed up along with the storage object data. For example in storage environments employing file based replication as the backup mechanism configuration information related to network based file shares may not be stored in a file format accessible to the file replication engine and various elements of system state information may also be stored in data structures other than files or may have to be collected from portions of several files. Requiring separate backup mechanisms to be implemented for different sources of configuration information and any other non file structured information that may be needed for restoration may not be a cost effective solution in many storage environments. In addition in some storage environments especially environments where disk based backups are implemented transparent access to some or all of the backup versions of storage objects may be provided to end users. That is end users may be permitted to access backup versions of storage objects directly without administrative intervention. In such environments when accessing the backup versions some end users may expect to make use of configuration settings such as file share settings similar to those of the primary host.

Various embodiments of systems and methods for encapsulating configuration information in storage objects formatted for backup and restore are disclosed. According to one embodiment a system comprises a processor coupled to a memory where the memory stores instructions executable by the processor to implement a backup manager configured to generate backup versions of a plurality of storage objects such as files or directories of a source data set of a primary host. The backup manager may be configured to create an additional storage object that includes information collected from a designated information source in a first format to store the additional storage object within the source data set in a second format and to generate a backup version of the additional storage object. The information may be collected from a variety of information sources in different embodiments such as providers of configuration information associated with the primary host applications such as e mail servers database management applications etc. or user interfaces that may allow users to supply arbitrary data for backup. For example in one embodiment the backup manager may be configured to use a replication engine to create backup versions where the replication engine may be configured to replicate storage objects of a particular type e.g. files but may not be capable of generating backup versions of objects that are not stored in file format. In such an embodiment the backup manager may be configured to gather non file structured information from a variety of information sources using interfaces such as system calls queries to networking or other databases etc. into the additional storage object and to store the additional storage object in file format so that the replication engine may recognize and replicate the collected configuration information. Using such a technique important information that may be useful for restoration may be protected using an existing backup mechanism e.g. without requiring new types of backup mechanisms to be implemented instead of being lost for example because it was not initially stored in a format understood by the backup mechanism.

In one embodiment the backup manager may be configured to create the additional storage object in response to a detection of a triggering condition such as a change to configuration information at the primary host. In some implementations of such embodiments the backup manager may be configured to monitor one or more sources of configuration information for changes. Various types of configuration information may be included within the additional storage objects in different embodiments such as network file share information system state information some of which may be needed for booting and or initializing a primary host any desired system registry keys and or values performance tuning parameter settings etc. The additional storage object may be provided with a name that identifies it as a container of information encapsulated for backup e.g. by including a string such as SystemState within the name in some embodiments and may be stored in a special location such as a directory hierarchy reserved for encapsulated information containers in such embodiments.

In another embodiment where the encapsulated information includes configuration information and the backup version of the additional storage object is maintained at a secondary host the backup manager may be configured to extract at least a portion of the configuration information from the backup version and use the extracted configuration information to emulate a configuration setting of the primary host at the secondary host. For example if the configuration information includes information about network file share settings at the primary host similar network file sharing configurations may be set up at the secondary host using the extracted configuration information. In addition in response to a restoration request the backup manager may be configured to regenerate configuration information from the backup version of the additional storage object and use the regenerated configuration information to set up or configure a restoration target.

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

The information may be obtained or collected by backup manager in various formats using any appropriate interface e.g. in responses to one or more system calls system registry lookups network database queries in response to input received via a user interface etc. For example in one embodiment storage object X may be stored in the form of a file or a collection of files accessible to and recognized by a file replication engine. In one embodiment a user may request backup manager to back up arbitrary unstructured information supplied by the user and backup manager may include the arbitrary unstructured information within storage object X. Backup manager may be configured to include the additional storage object X within source data set and to generate a backup version X of the additional storage object in addition to the backup versions of the original contents of the source data set. In this way configuration information and or other unstructured information may be gathered from a variety of potentially uncoordinated sources encapsulated into an appropriately formatted storage object and protected from failures that may occur at the primary host . The encapsulated information such as configuration settings of the primary host may be recovered from the backup version X of the additional storage object as needed.

The term storage object as used herein may refer to any collection of one or more data items for which backup and restore functionality may be desired such as one or more individual files file systems directories which may also be termed folders logical volumes database entities such as tablespaces tables or indexes etc. Backup version set associated with source data set may be generated and or maintained using any of a variety of backup techniques in different embodiments such as various types of replication e.g. synchronous or asynchronous replication snapshot or frozen image creation techniques etc. The primary storage objects as well as their backup versions may be stored on any suitable physical storage devices such as individual disks disk arrays storage appliances intelligent disk arrays tape based devices and the like in various embodiments. Source data set may be accessible from primary host either directly e.g. via a protocol such as SCSI Small Computer Serial Interface or via a network such as an IP Internet Protocol based network a fibre channel link etc. Similarly backup version set may be accessible from a secondary host either directly or via a network. In some embodiments portions of storage objects may be backed up directly from volatile storage at the primary host e.g. without requiring backup manager to access disk or tape storage at the primary host. In some embodiments the backup versions may be made accessible to end users for example end users may directly access the backup versions and or restore storage objects from their respective backup versions without the help of backup administrators. In one specific embodiment the source data set and the backup version set may both be stored at storage devices accessible from the primary host e.g. backup may be performed from one set of storage devices to another without the need for involvement of a secondary host .

As shown in in one embodiment the named object agent may include several subcomponents such as an object encapsulator an object namer a notifier a comparer an encapsulated object restorer and a secondary instantiator . Object encapsulator may be responsible for collecting and packaging the contents of encapsulated information container object X. For example in one embodiment where data mover is configured to support file replication but may not be capable of backing up non file data object encapsulator may be a file generator configured to store the collected configuration information application generated information and or user generated information from one or more designated information sources for backup into one or more files within a file system. The internal organization of encapsulated information container object X may vary in different embodiments for example in some embodiments the encapsulated information may be stored in human readable format e.g. as name value pairs while in other embodiments the encapsulated information may be stored in encrypted and or compressed format.

Object encapsulator may be triggered to generate encapsulated information container object X in a variety of ways in different embodiments. For example in one embodiment the creation of encapsulated information container object X may be triggered by an event detected by object encapsulator such as a start of a backup job e.g. an initiation of backup operations for a subset or all of the source data set . In such an embodiment a new encapsulated information container object X may be created corresponding to each backup job. In another embodiment object encapsulator may be configured to monitor one or more sources of information e.g. source A or B of e.g. for changes to configuration information to be collected for backup. In one implementation of such an embodiment object encapsulator may be configured to poll the one or more sources for changes e.g. by issuing one or more system calls provided by an operating system at fixed intervals or by periodically retrieving information from specified sections of a configuration database such as a Windows registry. In some embodiments object encapsulator may be configured to operate on a schedule e.g. to generate new encapsulated information container objects X after specified time intervals. In one implementation where a schedule driven object encapsulator is used to collect configuration information a new encapsulated information container object X may be created according to the schedule even if no changes to the underlying configuration information have occurred since the previous time at which configuration information was gathered while in another implementation a new version of additional storage object X may be generated or retained after generation only if at least some of the configuration information has changed. Schedule based collection and encapsulation of configuration information may be particularly useful for example in environments where it may be difficult to monitor for changes to the configuration information.

The sources from which object encapsulator is to gather information may be determined or designated using a variety of techniques in different embodiments. In one embodiment backup manager may include an administration interface through which users may specify the specific types and or sources of information that is to be gathered. For example in one implementation a graphical user interface or GUI of the administration interface may display a set of candidate types and or sources of configuration information e.g. System State Network File Shares etc. and or other information and a user or administrator may select the desired types and or sources. In another implementation an interface such as a parameter file or a set of application programming interfaces APIs may be provided for users to specify desired sources of information and or the specific techniques to be used to gather the desired information. Users may also supply additional information e.g. a name and parameters of a storage management operation command such as a snapshot creation command associated with source data set that is to be included within encapsulated information container object X for backup in some embodiments. In some embodiments backup manager may be configured to request one or more applications such as an e mail server or database application to provide information to be included in a backup version set . The application generated information may then be encapsulated by backup manager in a format suitable for backup and stored within the source data set .

In embodiments where the encapsulated information includes configuration information object encapsulator may use any of a variety of techniques to collect the configuration information to be encapsulated in different embodiments. For example in one embodiment configuration information related to network file shares e.g. directories or storage devices that are to be shared by more than one host over a network may be collected using one or more functions or system calls provided by an operating system or network manager software. The specific information collected for each file share may include for example the name of the file share the name and or network location of the underlying directory that is to be shared and security information such as a list of users or groups allowed to access the shared directory and the access permissions e.g. read only read write etc. granted to the users or groups.

Configuration information related to system state at the primary host may also be gathered using one or more system calls and may include for example in the case of a primary host that is configured to use a version of Microsoft Windows a subset of keys and or values from the Windows registry a Component Object Model COM or COM database license keys for various software and or hardware products or components in use at the primary host system protected files etc. At least a portion of the system state information collected may be information that is used during system initialization or boot operations in some implementations. In some embodiments an operating system in use at the primary host may provide one or more special interfaces specifically provided for collecting system state information e.g. for collecting sufficient information to allow the primary host to be restored in the event of a catastrophic failure and object encapsulator may be configured to use such special interfaces to collect configuration information. In other embodiments object encapsulator may invoke one or more third party tools to gather the desired configuration information. In some embodiments any set of additional information identified by a user and or by backup manager as being potentially needed for restoration such as various registry keys performance tuning parameter values etc. where the additional information is not already stored within the source data set in a format suitable for backup may be provided to object encapsulator for inclusion within encapsulated information container object X.

Object namer may be configured to select a particular name and or storage location within source data set for the encapsulated information container object X e.g. in order to distinguish storage object X from other storage objects A N of the source data set. In one embodiment where storage objects A N are files and or subdirectories of one or more root directories encapsulated information container object X may be a file stored within a particular directory where the particular directory may be reserved for containers of information gathered and encapsulated by object encapsulator . The name selected for the object X and or its parent storage object such as a directory may include a special pattern identifying the storage object as a container of encapsulated information e.g. a special string such as BackupConfigInfo may be included within the name in one implementation. In some embodiments separate files may be created for different types of encapsulated information and human readable string patterns indicative of the contents of the files may be used for at least a portion of the file names such as SystemState NetworkFileShares etc.

Additional storage objects X may be hidden from or made inaccessible to end users in one embodiment. In another embodiment multiple simultaneous backup jobs or backup sessions may be supported where each session may include the generation of backup versions for a different source data set or on behalf of a different user. In such an embodiment object namer may be configured to provide job specific or session specific names for additional object X. For example a globally unique identifier GUID generated for a particular backup job may be used as part of the name of a directory where an additional object X corresponding to that particular job is stored so that the information gathered for one backup job does not inadvertently get overwritten by or confused with the information gathered for another job.

In some embodiments a notifier may be configured to notify a backup manager component at a second host when one or more backup related events complete at a first host. For example in one embodiment notifier at primary host may be configured to generate a notification to a secondary instantiator at a secondary host when the creation of encapsulated information container object X has been completed at the primary host. The notification may be implemented using any desired notification mechanism in various embodiments such as a message sent via data mover a network message sent over a network connection set up specifically for such notifications etc. and may be used to communicate between various subcomponents of backup manager component . In one implementation notifier may be configured to employ data mover to send a special checkpoint message to secondary instantiator at the secondary host and the secondary instantiator may be configured to deduce from the contents and or format of the checkpoint message that the creation of object X and or the corresponding backup version X has completed. In some implementations notifier may also be used for communication between subcomponents of named object agent within the same host and or for communication between named object agent and data mover or other elements of backup manager . In one implementation instead of or in addition to notifier data mover may be configured to notify secondary instantiator when backup version X has been successfully created.

In response to a notification indicating that the additional storage object containing encapsulated information has been created at the primary host in one embodiment secondary instantiator may be configured to extract at least a portion of the information from a backup version X of the encapsulated information container object X when the backup version X becomes accessible at the secondary host . In addition secondary instantiator may also be configured to use the extracted information to emulate at least one configuration setting of the primary host at the secondary host in some embodiments. For example in some storage environments especially where backup version set is stored on disk based storage devices end users may be provided access to the backup version set. The end users may sometimes not even be aware of the backup mechanisms in use and may be allowed to access the backup versions just as they are allowed to access the primary store objects . If the primary host had a network file share configured end users accessing the secondary host may also expect to access the files of the network file share. In some embodiments secondary instantiator may be configured to emulate some or all of the file sharing configuration of the primary host at the secondary host using information extracted from the backup version X. In emulating the primary host s configuration settings in some implementations secondary instantiator may set up network file shares to access backup versions of the primary host s file shares i.e. the shared storage at the secondary host may comprise backup versions of the corresponding shared storage at the primary host . In other implementations network file shares may be set up to the same underlying storage devices at both the primary host and the secondary host . In addition to or instead of emulating network file share settings in some embodiments secondary instantiator may be configured to emulate other primary configuration settings at the secondary host such as performance tunable settings etc.

In some embodiments where additional storage object X includes configuration information named object agent may be configured to avoid generating new versions of additional storage objects X and or to minimize the amount of configuration information stored within additional storage devices X based on a comparison of current configuration information with previously gathered and encapsulated configuration information. In some such embodiments named object agent may optionally include a comparer configured to determine changes if any to configuration information collected since the last encapsulated information container object X was generated. If no changes have occurred comparer may determine that no new encapsulated information container object X is needed. If only a relatively small fraction of the configuration information has changed since the last time configuration information was backed up in one embodiment comparer may direct object encapsulator to create an incremental version of encapsulated information container object X which may only include the changes instead of the full set of configuration information. In one implementation encapsulated information container object X may be implemented as a group of files with one file containing a baseline version of the configuration information and the remaining files containing incremental changes to the configuration information. In another implementation the incremental changes to the configuration information may be appended to an existing encapsulated information container object file X and only the appended changes may be duplicated at the secondary host by data mover .

In response to a restoration request backup manager may be configured to restore one or more backup versions and or to restore configuration settings encapsulated within backup version X at a specified restoration target in some embodiments. The restoration target may be the primary host or some other specified host at which the data and or configuration of the primary host is to be restored. As part of the restoration encapsulated object restorer may be configured to regenerate configuration information from the backup version X and to set up a configuration of the restoration target in accordance with the regenerated configuration information. For example the system state of the primary host may be duplicated at the restoration target host and or network file shares of the primary host may be set up at the restoration target using the regenerated configuration information. It is noted that in some embodiments the original configuration settings may not be completely restorable e.g. if a disk of the primary host is replaced by a different disk with a different storage capacity at the restoration target and backup manager may be configured to perform a best effort or partial configuration restoration in such cases.

Data mover may be configured to generate backup versions of backup version set including backup version X of encapsulated information container object X using any of a variety of different backup mechanisms in various embodiments. For example data mover may be configured to perform asynchronous or synchronous replication to use snapshots or to use any desired combination of replication and snapshot techniques. In some embodiments data mover may be configured to replicate storage objects at two or more levels of a storage hierarchy as desired e.g. to replicate file system level components such as files and directories as well as volume manager level components such as logical volumes. In other embodiments data mover may be configured to recognize and replicate only file system objects such as files and directories. In one specific embodiment as described below in further detail in conjunction with the description of data mover may be configured to replicate individual I O operations at secondary host as part of a continuous replication process.

In some embodiments all of the elements illustrated in may be included within each backup manager component at each primary and secondary host. In other embodiments not all of the elements illustrated in may be implemented within each backup manager component e.g. in one embodiment a secondary instantiator may be omitted from a particular backup manager component at a primary host and in another embodiment a comparer may be omitted from a backup manager component at a secondary host . In addition to the elements illustrated in in some embodiments backup manager may include additional components such as a user interface that may be used to select specific types of information to be included within encapsulated information container object X as described above.

Backup manager e.g. via one of the subcomponents illustrated in such as object encapsulator may be configured to collect the additional information from a particular information source in a first format block and generate an additional storage object X that includes the additional information block . The additional storage object X may then be stored in the source data set e.g. in a second format appropriate for backup block . For example as noted above in one implementation where data mover of is a file replication engine operable to recognize and generate replicas of files for backup where the replication engine may not be configured to recognize or replicate storage objects other than files or directories the additional information may be stored in a file storage format recognized by the replication engine. In some embodiments the additional storage object X may be included within the source data set in a specially named directory that may be reserved for such additional storage objects as described above in conjunction with the description of object namer of . Backup manager may then generate a backup version X of the additional storage object X block .

In some implementations the creation of additional storage object X in an appropriate storage suitable for replication and the inclusion of the additional storage object within the source data set e.g. by including a directory containing the additional storage object X within a parent directory that has already been specified as belonging to the source data set to a replication engine may lead to an automatic replication of the additional storage object by the replication engine. That is once object encapsulator and object namer have created the additional storage object X and placed it in an appropriate location data mover may be configured to automatically back up the additional storage object X without further interactions with named object agent . It is noted that the operations illustrated in may be performed in a different order than the order shown in or in parallel in some embodiments for example additional storage objects X may be created in parallel with the generation of backup versions A N in some embodiments where backup manager is multi threaded and multiple sets of backup versions A N may be created before an additional storage object X is created. In some embodiments multiple additional storage objects X may be created e.g. as a set of files in a directory hierarchy where each file contains a portion of the additional information and backed up by backup manager . It is also noted that in some embodiments users may request backup manager e.g. via a GUI or a command line interface to include arbitrary user selected collections of data within the additional storage object X.

If a configuration setting of the primary host is to be emulated at the secondary host using encapsulated configuration information the backup manager component B may be configured to extract the appropriate configuration information e.g. the name of the file share the name and network address of the storage device accessed via the file share security information identifying users allowed to access the file share etc. in the case of a network file share configuration setting from the backup version X block of . In some embodiments the extracted information may be converted into its original format e.g. to emulate the configuration setting at the secondary host block . In one embodiment encapsulated information that is not configuration information associated with the primary host e.g. arbitrary user supplied information or application generated information may also or instead be extracted from backup version X at the secondary host e.g. for inclusion within a log or for some application specific purpose. In some embodiments the notification received at the secondary host may be indicative of a completion of the generation of backup version instead of being indicative of the completion of the creation of the additional storage object X. It is noted that in addition to or instead of triggering an emulation of a primary host configuration setting at the secondary host in some embodiments the notification from the primary host may trigger other kinds of operations at the secondary host such as a generation of an e mail message to an administrator etc.

As described earlier various components of backup manager may be included within each of the primary hosts as well as at secondary host . Several of the components such as replication engine named object agent restoration engine and snapshot generator are shown in consolidated form within backup manager in the individual components at each host are not shown for clarity . In one embodiment a replication engine which may also be configured to perform functionality similar to that of data mover of within the backup manager may be configured to periodically replicate data from one or more of the primary hosts to secondary host . In some embodiments the replication operations for different source data sets may be scheduled and managed independently of each other. For example primary host A may support a data mining application whose data sets do not change very often and the source data set A may be replicated once every six hours to a particular destination volume at secondary host . In the same example primary host N may support an online transaction processing system such as an airline reservation system whose data is updated fairly rapidly and the source data set N may be replicated once every ten minutes or via continuous or real time replication as described below to the same destination volume or a different destination volume at secondary host . To maintain point in time copies of the primary application data objects a snapshot generator may be configured to generate additional backup versions B in the form of snapshots e.g. once every hour from the secondary host to a tertiary host . Tertiary host may also include one or more components of backup manager in some embodiments. The snapshot generator and the replication engine may be configured to perform their respective operations asynchronously with respect to one another i.e. according to independent schedules. Snapshots may be generated using any of a variety of specific techniques by snapshot generator e.g. using operating system provided snapshot functionality volume level mirroring space efficient snapshot techniques or custom hardware snapshot techniques.

In some embodiments primary hosts may include respective change monitors e.g. change monitor A at primary host A and change monitor N at primary host N that may be configured to monitor a specified set of storage objects of a corresponding source data set for changes. In one embodiment a change monitor may also be configured to perform some of the monitoring functionality of object encapsulator of i.e. a change monitor may be configured to monitor for changes to configuration information as well as changes to storage objects . When changes such as object creations deletions or modifications are detected the change monitor may be configured to inform the backup manager e.g. via a journaling mechanism and replication engine may be configured to replicate the changes at secondary host . In some implementations replication engine may be configurable to perform replication operations in either direction as desired e.g. from primary hosts to secondary hosts or from secondary hosts to primary hosts.

In one specific embodiment a change monitor may be configured to detect a variety of I O operations e.g. operations to read write or modify attributes such as security or ownership attributes of files performed on the set of primary storage objects and to notify the backup manager of the I O operation detected. Replication engine may be configured to then replicate the I O operation at secondary host . In this way changes being made at primary hosts may be very quickly reflected at the secondary host e.g. the state of the backed up versions at secondary host may track the state of the source data sets to within a few seconds or even to within a few milliseconds in some implementations. In one embodiment configuration changes at the primary host may also be collected by named object agent stored in a format suitable for replication e.g. in a file and replicated to the secondary host as soon as they are detected using the techniques described above. Such a replication process in which changes being made to the primary data objects and or configuration are detected and replicated in real time may be termed continuous replication or real time replication and the backup manager may be termed a continuous protection server in embodiments supporting continuous replication. In some embodiments changes to storage objects may be replicated continuously while changes to configuration information may be replicated periodically or according to a schedule. In one embodiment where information other than configuration information is encapsulated in additional storage objects the non configuration information may also be encapsulated and replicated as soon as it is made available to backup manager . Change monitors may be implemented via file system filter drivers in some embodiments which may be configured to intercept I O operations as they are executed at the primary hosts . In one embodiment change monitors may be configured to periodically check for changes to data objects instead of continuously monitoring for changes. In another embodiment the replication process may include a synchronization of a source data set e.g. a file system with a replica at secondary host with the additional capability of monitoring and replicating changes that occur at the source data set after the synchronization begins that is both synchronization and continuous replication may be performed by backup manager . In some embodiments backup and restoration operations may be managed in units called jobs.

In embodiments where continuous or real time replication is supported an initial period of synchronization between the primary and secondary hosts may be required when replication of a source data set is started and additional periods of synchronization between the primary and secondary hosts may also be needed from time to time e.g. if a data at a primary host is restored directly from tertiary host and thus becomes unsynchronized with respect to the replica at the secondary host . Configuration information and or other additional information may also be gathered and appropriately encapsulated by named object agent during such periods of synchronization in such embodiments.

Secondary host may serve as a staging area for backed up data between the primary hosts and tertiary hosts in the embodiment of . In some embodiments tape devices or optical storage devices such as various types of jukeboxes may be used for tertiary storage while in other embodiments the tertiary storage devices may include disks disk arrays and the like. Backup manager may include a restoration engine in some embodiments which may be configured to implement restoration operations from secondary host or from tertiary host . In such an embodiment restoration engine may provide a restoration selection interface e.g. to allow a user and or administrator to search for and specify identify the storage objects that are to be restored and or encapsulated information that is to be restored as described above. In some implementations the restoration selection interface may be a graphical user interface GUI while in other implementations a command line or text based interface may be used. In one implementation a restoration selection interface may include a web page accessible via the Internet and or an intranet. End users may be allowed to request restoration of storage objects using user friendly names for the objects and or using content based search criteria without for example specifying the exact logical paths or physical locations to the object to be restored or to the backup version from which restoration is desired.

Configuration information related to the backup operations for example including locations of various versions of backed up objects details of the encapsulated information stored for each source data set etc. may be stored in backup configuration database in one embodiment. In another embodiment an administration server may provide an interface such as an administrative console to configure and manage backup server and its components such as named object agent replication engine and snapshot generator . Such an interface may be used for example to select the types and or sources of configuration information or other information to be included within additional storage objects X. In one embodiment in addition to backing up primary hosts backup manager may also be configured to back up data of one or more user workstations . In some implementations any combination of replication engine snapshot generator restoration engine and named object agent may be implemented as independent modules or programs that may be invoked by backup manager as needed.

In various embodiments as described above at least a portion of backup manager may be executed at primary secondary or tertiary hosts. is a block diagram of a computer host that may be deployed as needed as a primary host a secondary host or a tertiary host according to one embodiment. As shown host may include one or more processors such as processors A and B. In various embodiments processors may be implemented using any desired architecture or chip set such as the SPARC architecture from Sun Microsystems or the x86 compatible architectures from Intel Corporation Advanced Micro Devices etc. Program instructions that may be executable to implement part or all of the functionality of backup manager may be partly or fully resident within a memory at a given point in time and may also be stored on a storage device . At least a portion of the additional information e.g. information that is not typically stored in form suitable for replication or backup such as configuration information may be maintained in and collected from memory by backup manager for inclusion in additional storage object X in one embodiment. Memory may be implemented using any appropriate medium such as any of various types of RAM e.g. DRAM SDRAM RDRAM SRAM etc. . In addition to processors and memory host may also include one or more I O interfaces providing access to storage devices one or more network interfaces providing access to a network interfaces to display devices not shown and the like. Any of a variety of storage devices may be used to store the instructions as well as data for backup manager and or the contents of primary storage objects and backup version sets in different embodiments include any desired type of persistent and or volatile storage devices such as individual disks disk arrays tape devices optical devices such as CD ROMs CD RW drives DVD ROMs DVD RW drives flash memory devices various types of RAM and the like. One or more storage devices may be directly coupled to host in some embodiments e.g. using the Small Computer Systems Interface SCSI protocol or may be accessible over any desired storage interconnect such as a fiber channel fabric or storage area network SAN in other embodiments.

In addition to backup manager memory and or storage devices may also store operating systems software and or software for various applications such as backup configuration database administration server etc. in various embodiments. In some embodiments backup manager may be included within an operating system a storage management software product or another software package while in other embodiments backup manager may be packaged as a standalone product. In one embodiment one or more components of backup manager described above such as named object agent replication engine snapshot generator and or restoration manager may be implemented as independent software packages or tools. In some embodiments part or all of the functionality of backup manager may be implemented via one or more hardware devices e.g. via one or more Field Programmable Gate Array FPGA devices or in firmware.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

