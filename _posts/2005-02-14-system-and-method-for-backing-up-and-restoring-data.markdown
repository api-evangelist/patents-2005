---

title: System and method for backing up and restoring data
abstract: Described is a system and method for allowing applications to interact with a common backup program in a uniform way. The system and method provides a communication mechanism for one or more applications to exchange information with the backup program regarding components of the applications. The information exchanged may include an identification of the components of each application. A component may be considered a group of files or resources that should be backed up or restored together. In this way, when a backup operation is initiated, each application may provide to the common backup program instructions describing the specific components to be backed up. In addition, each application may add other application-specific information useful during a restore of the backed up data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07395387&OS=07395387&RS=07395387
owner: Microsoft Corporation
number: 07395387
owner_city: Redmond
owner_country: US
publication_date: 20050214
---
This application is a continuation of application Ser. No. 10 877 569 filed Jun. 25 2004 now U.S. Pat. No. 6 910 112 which is a continuation application of Ser. No. 09 912 615 filed Jul. 24 2001 now U.S. Pat. No. 6 948 038. The benefit of the earlier filing date is hereby claimed under 35 U.S.C. 120.

The present invention relates to data backup systems. More particularly the present invention relates to computing systems having data backup systems for multiple applications.

Computer users have a need to back up their applications and data. However until now backing up data generally has been performed in one of two ways each with its own problems. First a common backup program may be used to backup all or a portion of the data stored on a storage volume such as a hard disk for many different installed applications. In general the common backup program essentially copies data from the storage volume to a backup medium such as a magnetic tape by directories or files without regard to any particular structure that may be maintained by the applications owning the data. One problem with the common backup program is that it cannot identify whether applications have temporary or transient data which should be stored and included in the backup session. For that reason the computer system may need to be taken offline or the applications paused or terminated to give the common backup program a quiescent or stable view of the data on the volume which results in inefficient down time. Another problem with the common backup program is that it generally restores backed up data to exactly the same location on the volume from which the data came. Often during partial restore operations this can result in restoring unnecessary files or data and sometimes in overwriting good data in certain cases such as where an application or its configuration settings have been modified and then backup data is restored over the new data.

The second type of backup system is an application specific backup system. With this type of system the application provides a customized backup process specific to the particular application. The application specific backup process has the benefit of allowing the application to put itself in a quiescent state with respect to its own data and then initiate the backup operation. Since the application is presumed to have knowledge of the state and quality of its own data the application specific backup program also has the benefit of allowing the application to identify specific groups of data or files to be backed up or excluded. However the use of a separate backup program for each application is extremely burdensome to maintain and an inefficient use of resources. Accordingly a need exists for an improved system and method to back up data.

Briefly stated the present invention provides a system and method for allowing applications to interact with a common backup program in a uniform way. The invention provides a mechanism for multiple applications to exchange information with the backup program regarding components of the applications. The information exchanged may include an identification of the components of each application. A component may be considered a group of files or resources that should be backed up or restored together. In this way when a backup operation is initiated each application may provide to the common backup program instructions describing the specific components to be backed up. In addition each application may add other application specific information useful during a restore of the backed up data.

In one aspect of the invention once a backup has been initiated the backup program and the applications communicate through one or more communication documents. In particular an application may create and provide to the backup program a metadata document that describes the components of the application. The metadata document includes information such as which files and resources are to be treated as a component and may include additional information such as a special backup or restore order for particular components or information on how the data should be restored. With that information the backup program proceeds to create a backup document that describes which components will be backed up during the backup operation. Then prior to the actual backup procedure the applications are given an opportunity to review the backup document and annotate the backup document with any information that may be helpful during a restore. Finally the backup program performs the backup procedure. The backup program may return to the backup document and set flags indicating success for each of those components successfully backed up.

On restore the backup program may again request a metadata document from each application or may use existing metadata documents if any exist. As mentioned above the metadata documents may describe the components of each application and particular methods to be applied to the data during restore. Examples of particular restore methods include restoring the data only if the data isn t already at the original location restoring the data to the original location if any existing files can be replaced e.g. the files aren t open replacing existing files with the restored files at the next system reboot and restoring the data to an alternate location.

In another aspect of the invention the backup program may take advantage of a system resource that is capable of providing a view of a volume to be backed up in a quiescent state at a fixed point in time. For example a snapshot service may be employed by the backup program to capture a steady state view of the data stored on a volume for the purpose of performing the backup operation. In particular the backup program may initiate a backup operation by having a snapshot taken of the operative volume. The process of taking the snapshot causes the applications having data on the operative volume to put their data in a state that is backup friendly such as by flushing data to disk or eliminating temporary files. In addition by taking a snapshot of the operative volume the backup operation can be performed without taking the system offline or disrupting users.

Computing device may also have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well know in the art and need not be discussed at length here.

Computing device may also contain communications connection s that allow the device to communicate with other computing devices such as over a network. Communications connection s is an example of communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

First the snapshot service and the providers operate in conjunction to provide a snapshot capability to the system . The snapshot service coordinates the activity associated with taking a snapshot of an original volume . For instance the snapshot service interacts with the snapshot providers the snapshot requestor and applications having data writers to achieve a snapshot of an original volume . The snapshot can be viewed as essentially a duplicate of a subject volume such as the original volume in a crash consistent state. The crash consistent state is defined as a state generally found on a system disk following a catastrophic failure that immediately shuts down the computer system such as a power failure or general protection fault. The crash consistent state is generally recoverable by rebooting the machine and allowing the system to recover. All files that were open on the original volume would be accessible from the snapshot but not guaranteed to be in a consistent state. Files that had pending writes may have torn writes or data may be corrupted. The operating system is generally good at recovering from the crash consistent state but it is not the preferred state for a backup operation. Accordingly the snapshot service of this embodiment interacts with special writers described more fully below that together are able to put the system in a more quiescent state prior to capturing the snapshot . This cooperation enables a snapshot set that is backup ready.

The providers are elements of the system that manage volumes such as the original volume and create the actual snapshots. One example of a provider may work in conjunction with a filesystem and use a copy on write scheme to create a snapshot. In short the copy on write scheme saves data from an old sector of the original volume when new data is about to be written to the old sector. This old data is stored in a diff area . By combining the unchanged data on the original volume with the old data saved in the diff area an image of the disk at the point in time the snapshot was taken is preserved. The image can then be made available to the requestor e.g. a backup application for the purpose of performing a backup of the original volume . Additional providers may also be added.

As suggested above the requestor may be a backup application or any other application or process charged with the responsibility of performing or managing a backup operation. In accordance with this embodiment of the invention the requestor is common to each application installed on the computer system. That provides the advantage that those applications are relieved of the burden of having unique backup procedures for each application. The requestor may communicate with the snapshot service and with one or more writers in the manner described below during a backup operation. Briefly stated in accordance with this embodiment of the invention the requestor gathers information from the writers to define which components on the original volume are to be backed up during the backup operation. The requestor also works with the snapshot service to create the snapshot for use during the backup operation.

The writers are operations functionality modules or code in applications or services to support the interaction between the requestor the snapshot service and the applications or system services. When a system service or application is executing the writers interact with the snapshot service to ensure that data is consistent on the snapshot . If an application or system service is not inning it is assumed that files such as databases associated with the application or system service are closed and consistent so that no additional effort is required by a writer to perform a clean backup. Writers respond to messages issued by the snapshot service or the requestor e.g. a freeze event to allow applications to prepare for the instant at which the snapshot is taken and to ensure that no writes occur to the original volume while the snapshot is being created.

In accordance with this embodiment of the invention the writers exchange information with the requestor by means of one or more shared documents such as a writer metadata file or a backup components file described below. Particular examples of the shared documents as well as their use are illustrated in and described below. Briefly stated the shared documents form the basis for the writer and the requestor to communicate with each other to help coordinate backup and restore activities. For instance a writer metadata file may be created by the writer to inform the requestor of the writer s identity how to backup data associated with the writer and how to restore the data. In addition a backup components file may be used by the requestor to report back to the writer what components are being backed up the status of the backup operation and any other annotated information that may be useful to the application managed by the writer after a restore operation. In short the writer communicates with the requestor to provide information on the application name icons files and other components to backup any files not to backup and on a strategy to restore the components to the disk. In this embodiment the mechanism for that communication is the shared documents.

It is not necessary to a complete functioning of this embodiment of the invention that each application on the computing device have an associated writer. However if an application has no writer the snapshot will still be taken and the data will exist on the snapshot in whatever form it is at the instant that the snapshot is created. As mentioned this state is not always the best case because there may be inconsistent data on the volume caused by incomplete writes data buffered in the application that are not written or open files that are in the middle of a write operation. However the snapshot will typically contain enough information to return the data to a consistent state using some recovery scheme.

Accordingly the application may create modify and generally manage one or more components such as Component A Component B and Component C . Each of the several components may include one or more files icons or other resources. The set of components associated with the application is one example of the types of resources that may be kept on nonvolatile storage subject to a backup or restore operation. Multiple applications may each have their own set of components and those shown in are for illustrative purposes only.

As mentioned above the writer and the requestor are able to communicate backup and restore information about the application s set of components to make the backup and restore process more intelligent. In one implementation the mechanism for that communication is one or more documents that are shared between at least the writer and the requestor . In this implementation those documents are the writer metadata file and the backup components file . Those documents may be data files written in eXtensible Markup Language XML format. Alternatively the documents themselves may actually not be passed between requestor and writer but rather a number of query methods could be provided to access the data represented within the documents without passing the documents themselves.

Taking first the writer metadata file on notification that a backup operation has been requested or at any other time prior to a backup operation the writer produces the writer metadata file to describe the set of components . The writer metadata file is intended to inform the requestor about the writer about the data that the writer owns and how that data should be restored. More specifically the writer metadata file may include such information as an identification of the writer or application a location where the files and components of the application exist a specification of whether and which individual files associated with the writer should be explicitly excluded from or optionally included in a backup operation and a specification of what techniques should be used at restore time. Example restore techniques are described below. Once produced the writer metadata file is a read only document to the requestor . One specific example of an actual writer metadata file is provided for illustrative purposes only in Appendix A of this document and a sample schema for a writer metadata in Appendix B.

As just suggested the writer metadata file may specify one or more restore techniques to be used by the requestor during a restore operation. This information is but one example of a communication between the application as represented by the writer and a backup application e.g. the requestor to facilitate a more intelligent backup and restore operation. The particular restore techniques specified allow the application to maintain some level of control over how its components are backed up and restored without having to implement an application specific backup application. Examples of particular restore techniques that may be specified are provided in tabular format here.

It should be noted that in accordance with this embodiment of the invention if a group of files are expressed as a component backup and restore techniques apply to every file in the component. For example if the writer metadata file expresses a component that includes three files and the restore method is expressed as RESTORE IF CAN REPLACE the requestor will not restore two of the three files if one cannot be replaced. If any of the three files cannot be replaced the requestor handles each file in the group in the same way such as by using an alternate location mapping or failing the entire operation.

Each component identified in the writer metadata file may have a different restore technique assigned. In that way the application as represented by the writer has control at a fine granularity of the particular restore techniques to be employed to almost any resource associated with the application . Alternatively the writer metadata file may be limited to specifying a fewer number of restore techniques or even a single restore technique that are applied to the components identified in the writer metadata file .

As an added feature alternate location mappings may be used to specify alternate locations to restore components based on various criteria The writer may optionally specify an alternate location mapping in the writer metadata file . When the components are restored the restore location is recorded in the backup components file as described later if different from the original location of the component s . In one example alternate mappings may be implemented in combination with the restore techniques described above as indicated in the following table.

Other miscellaneous information helpful to the application may also be specified in the writer metadata file . For example to have a notification issue in response to a complete backup operation or a restore operation the writer may specify that OnBackupComplete method or OnRestore method be called in the writer metadata file . Likewise to cause a reboot following the restore of data the writer can include such a specification in the writer metadata file .

Next the backup components file provides a mechanism for the requestor to communicate with the application via the writer . The backup components file is initially produced by the requestor during a backup operation and describes what is being backed up. More specifically the backup components file includes an indicator of each component that will be backed up and any additional information that will be useful at restore time for those components. Unlike the writer metadata file which is read only the backup components file may be changed by the requestor or the writer prior to or during the backup operation. There are various ways to annotate the backup components file to facilitate the backup and restore processes. The backup components file is available for the writer to examine during a restore operation so that the writer may take appropriate actions following a restore.

The Backup Components file may specify whether bootable system state or system services are backed up. It may specify whether the backup is full incremental differential. For each component it may specify alternate location mappings where a file is restored if the file is restored to a different location than the original. For each component it may specify if the component was successfully backed up. In addition it may specify whether the requestor is doing component by component backup in which the backup components file contains the components being backed up or is backing up entire volumes in which case the backup components file does not contain the components being backed up and the writer must assume that any data that it has on a volume being included in the snapshot is included in the backup . A sample of one actual backup components file appears in Appendix C of this document and a sample of a backup components file schema appears in Appendix D of this document.

To help understand the dynamics and interaction of the system and the advantages realized through the use of the shared documents described above an overview of processing performed by the system is helpful. is an instruction flow diagram illustrating the flow of instructions between various elements of the system during a backup operation. In particular the flow of instructions between the requestor the snapshot service and the writer is shown to illustrate a typical backup operation enabled by the teachings of the present invention. Processing time flows downward in the figure. To begin the requestor binds to an interface of the snapshot service in a bind and initialize phase in preparation of the backup operation. An InitializeForBackup method may be used to initialize the backup components file to communicate information to the writer s . A SetBackupState method may be used to indicate if the backup is for data volumes bootable system state or system services. Other information may additionally be provided such as whether the backup is intended to be a full incremental differential or other type of backup.

During an enumerate writer metadata phase the requestor identifies the writers such as through the use of a GatherWriterMetadata call to the snapshot service which prompts the snapshot service to issue an OnIdentify call to the writer . In response the writer prepares the writer metadata file as described above to define the components associated with the writer for backup. The writer then makes the writer metadata file available to the requestor and the snapshot service returns a GetWriterMetadata call to the requestor . The enumerate writer metadata phase is a discovery phase of the backup operation where the requestor retrieves from the writer its metadata. Once the requestor has acquired metadata from each of the writers it proceeds to the examine writer metadata phase .

During an examine writer metadata phase information is extracted from the writer metadata file by the requestor to facilitate the backup operation. Using the writer metadata the requestor may determine what applications are currently executing and what volumes to snapshot in order to get a complete backup. From the writer metadata the requestor determines the volumes that need to be snapshot to ensure appropriate coverage of the components specified for backup. For example if the requestor attempts to backup bootable system state and the writer indicates that the bootable system state is contained on the boot and system volumes then the requestor would understand to snapshot those volumes in order to back them up. In addition the requestor should identify from the writer metadata file which components or which files should be copied to achieve proper coverage of the application or service being backed up. Moreover the requestor may identify individual files that are to be explicitly excluded from the backup for an appropriate backup to be completed. In this way the requestor ascertains the information listed above from the writer metadata file or files if multiple writers are involved in preparation to initiate a snapshot sequence. The requestor may call a FreeWriterMetadata method when it is done accessing the metadata to deallocate any state that may be retained as a result of the GatherWriterMetadata method.

At this point the requestor has identified the volumes to snapshot. The requestor begins preparing to create the snapshot at a start snapshot phase . During this phase the requestor communicates to the snapshot service which volume is the first to start the set of volumes required for the backup operation. Any additional components to be backed up may also be added to the backup components file at this time. Volumes may be added to the snapshot set until the required volumes are included.

During a prepare for backup phase the requestor adds information to the backup components file and makes it available to the writer . In this way the requestor notifies the writer of the snapshot is commencing. As discussed above the backup components file communicates to the writer the backup plan of the requestor . The writer may annotate the backup components file with restore information at this time. The requestor may also call a GetWriterStatus method to determine whether the writer has succeeded in the prepare for backup phase .

An initiate snapshot phase is the initial stage of the creation of the snapshot . At this point the requestor may idle and await the creation of the snapshot by the snapshot service . The snapshot service performs the snapshot operation in essentially three stages 1 a PrepareForFreeze phase during which the various writers put themselves in a state where they can quickly freeze e.g. flush buffers create a checkpoint and the like 2 a Freeze phase during which each of the processes stop writing to disk and 3 a Thaw phase where writers may resume writing to disk. The several writers may cooperate with the snapshot service during the three stages of the snapshot operation.

When the snapshot operation is complete in a get status phase the requestor may query the writer for success or failure. A snapshot may fail for a variety of reasons. Some may be severe enough for the requestor to abort the snapshot operation and try again later. Some failures may be recoverable. The requestor determines the appropriate course of action based on information received from the writer and the type of backup that is being attempted. For example a writer failure may be ignored if the data the writer is supplying does not need to be backed up. Note that just because a writer fails during a snapshot the snapshot itself does not fail it is really just a writer failure for the snapshot.

The requestor retrieves the snapshot at a get device object phase such as through the use of a GetDeviceObject method. The response to the GetDeviceObject method may be in the form of a path to the snapshot such as device harddiskvolume. That path can be prepended to the path of a file stored on the original volume to open the corresponding file on the snapshot . The requestor is now prepared to perform the backup operation.

The requestor at the backup phase moves data from the snapshot to backup media in the conventional manner such as by using the APIs that are currently used to perform backup operations. The snapshot appears to the requestor as read only and the files on the snapshot appear to be closed. For those reasons the backup operation results in backup data that is more easily restored since the applications with writers such as application are actually involved in the backup operation and can put their components in a quiescent state prior to the backup operation. In addition throughout the backup phase or at its end the requestor may make modifications to the backup components file to indicate the success or failure of backing up each component.

When the backup operation has completed the requestor enters the backup complete phase . In this phase the requestor may pass the backup components file back to the writer to indicate the information that was successfully backed up. The backup complete phase allows applications or writers to cleanup state that is no longer needed once they know that the data has been backed up. For example many database systems truncate logs once the data contained in those logs is backed up. To elaborate some applications may annotate the backup components file with particular information that facilitates restoring the data for example a database might include checkpoint information in the metadata . After the files are placed on disk during the restore operation described later the writer is notified of the restore and can do appropriate post processing based on data in the backup components file including the annotations it made during backup.

It should be noted that the backup components file at this point is assumed to have already been placed on the media . For that reason it may now be read only. The writer has an opportunity to note the components that have been backed up and take any appropriate action the writer deems necessary. Finally at a delete snapshot phase the backup operation is complete and the snapshot may be destroyed.

The above instruction flow diagram illustrates the flow of instructions that occurs in the system during a backup operation. It should be appreciated from the instruction flow diagram that the shared documents e.g. the writer metadata file and the backup components file allow the requestor and the application via the writer to communicate when performing the backup operation. What follows is an instruction flow diagram illustrating the flow of instructions that occurs during a restore operation.

To begin at phase the requestor retrieves the writer metadata file and the backup components file from the backup medium . As discussed above the writer metadata file includes information that describes the writer the components of the application associated with the writer and any special restore techniques that may be applied during this restore operation. The backup components file describes the components and possibly individual files that were actually backed up. Accordingly the requestor retrieves that information and then at an examine writer metadata phase examines the metadata. This allows the requestor to determine what components were backed up what files were backed up and any special restore techniques to apply. The writer metadata file and the backup components file may be examined using methods described in the previous section to determine things such as what is the restore method what are the components is an alternate location mapping specified what are the files that were backed up did the writer request an OnRestore method and the like. Each of these inquiries may be answered during the examine writer metadata phase with reference to the writer metadata file and the backup components file .

At this point the requestor is prepared to restore the data stored on the backup media to the original volume . Thus the requestor begins the process of copying the information from the backup media to the original volume in accordance with any particular restore techniques or instructions specified in the writer metadata file . The writer metadata file may indicate to the requestor how the data is to be restored on a component by component basis. Thus at the perform restore phase the requestor restores each component using the indicated method as described earlier in this document. Should the requestor be forced to place files in an alternate location mapping those alternate locations are also provided in the backup components file . If an alternate location is used by the requestor it may call an AddAlternativeLocationMapping method to indicate which files were relocated and where they were relocated. This information will then be accessible to the writer at the conclusion of the restore operation. The backup components file may also be passed to the writer as part of an OnRestore operation

When the data is completely restored at a notify restore complete phase the requestor may notify the writer that the restore operation is complete. In this way the writer may perform any post processing on the resources that are restored as described above. In addition the requestor may then determine if any of the writers requires an OnRestore method by again examining the writer metadata file . If so the backup application can issue one. Once these functions have completed the restore operation is complete.

The above specification examples and data provide a complete description of the manufacture and use of the invention. Since many embodiments can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

