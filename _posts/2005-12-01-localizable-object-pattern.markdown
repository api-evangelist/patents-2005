---

title: Localizable object pattern
abstract: A computer-implemented method of handling localizable objects is provided. The method includes the step of obtaining an initial class containing localizable properties and non-localizable properties. The initial class is then transformed into a base-part class and a translation-part class. A localization tool for performing the transformation is also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904883&OS=07904883&RS=07904883
owner: Microsoft Corporation
number: 07904883
owner_city: Redmond
owner_country: US
publication_date: 20051201
---
Decentralized and interactive the Internet allows people to access and exchange information and to communicate with one another regardless of physical proximity. This interconnectivity is an expression of globalization the pace of which has accelerated over the last few decades along with a growing awareness of the world as a whole. E commerce has changed traditional business practices by providing direct access to information and products. As the number of non English speaking people with access to the Internet grows companies must evaluate the usability of their Web sites and other products to increase the number of customers. User interface and data in user native languages is one aspect of global application availability.

Storage and retrieval of objects that are at least partially localizable presents numerous challenges. In this context the term localizable refers to objects or object fields that contain data that can be translated into multiple languages. Issues relating to storage and retrieval of objects that are at least partially localizable include 

The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all of the issues noted in the background.

A computer implemented method of handling localizable objects is provided as is a localization tool for performing transformations of classes to a format which supports localizability. Using the method and tool localizable fields in languages other than a base language can be made transparent to users. In an example embodiment the method includes obtaining an initial class containing localizable properties and non localizable properties. The initial class definition is then transformed into a base part class and a translation part class. The translation part class definition contains only localizable fields and a language identifying field.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

The disclosed localization tool localizable object pattern and methods can be embodied in a variety of computing environments including personal computers server computers etc. Before describing the embodiments in greater detail a discussion of an example computing environment in which the embodiments can be implemented may be useful. illustrates one such computing environment which can represent any of these different types of computing environments.

The illustrated embodiments are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the illustrated embodiments include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers telephony systems distributed computing environments that include any of the above systems or devices and the like.

The illustrated embodiments may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The illustrated embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communication network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices. Tasks performed by the programs and modules are described below and with the aid of figures. Those skilled in the art can implement the description and figures provided herein as processor executable instructions which can be written on any form of a computer readable medium.

With reference to an exemplary system includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit. System bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer is operated in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks Intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Currently many application program interfaces APIs which deal with localizable objects require the creation of multiple objects each corresponding to a different language. In the alternative these APIs sometimes currently deal with localization on a property by property basis rather then on entire object basis. These techniques often prevent the API from being transparent in multilingual aspect of objects in scenarios where it is applicable. Some disclosed embodiments provide methods and tools for handling localizable objects.

Referring now to shown is a localization tool which can be used by designers of localizable classes or objects. As is understood in the art in object oriented programming objects are instances of classes. Disclosed embodiments can be described with reference to objects or classes. While aspects of the embodiments are described at times with reference to either classes or objects those of skill in the art will recognize the applicability of the embodiments to objects and classes.

Localization tool can be used by designers and it is therefore described in terms of classes instead of objects though it is applicable to both. The designer of an object can choose to localize class which contains localizable properties or fields using a localization tool . Localization tool includes an input which receives an input class and a class definition . The input class and class definition illustrated in are provided as examples only and the disclosed embodiments are not limited to these examples. Class definition can be for example a diagram or code that additionally contains information about which properties of the class can be translated and which properties cannot.

Input class includes localizable capable of being translated into another language properties and non localizable properties. For example illustrates an example of input class in which properties include both localizable properties and non localizable properties including id class or object id property . Localization tool shown in also includes a transformation component configured to transform the input class into a localization supporting class by applying a localizable object pattern to the input class . The output that the tool creates is code of the class that supports localizability. The tool transforms the input class by applying localizable object pattern to it and outputs the transformed input.

Referring to an example of one possible resulting localization supporting class is provided. As can be seen localization supporting class includes a base part class and a translation part class having a composition relationship with the base part class . In example embodiments an object of translation part class will be created for each language for which a translation is provided. Each object of translation part class will contain all localizable properties of the input class for which a translation is provided. Base part class contains all properties of the input class which are not localizable plus all of localizable properties . In base part class the localizable properties are in a base language for example a default language for the operating system.

The base part class also includes a current language property shown and described with reference to which acts as a language switch such that when a value of the current language property differs from the base language accessing a localizable property of the base part class results in accessing a corresponding property of translation part class containing the localizable properties of the input class translated into that current language.

A description of the localizable object pattern is now provided with reference to further examples. The pattern involves splitting an input class into two parts the base part or object and the translation part or object . The translation part includes all properties that can and should be translated. The identification of these properties is achieved using class definitions shown in . The base part of the object includes all properties that cannot or should not be translated as a minimum it contains an object identity e.g. shown at in and at in as well as all localizable properties that are stored in a most common language.

Adding all localizable properties to the base part of the object enables the API to be transparent with respect to localizability. In other words the caller of an object does not have to be aware of whether that object is localizable and can treat the object as one dimensional although the object contains multiple dimensions one for each language . The base part part of the object contains a collection of translation parts e.g. a composition relationship between the base part and translation part . The base part or object also has a CurrentLanguage property shown at in that acts like a language switch. Accessors of localizable properties of the object getters and setters contain code that sets or gets the value based on the property values stored in the translation collection or the base language stored in the base part. This depends on the value of CurrentLanguage of the object if it is the same as the base language then backing store of an accessor is a private field in the base part otherwise it is an element of the translation collection .

Consider the example provided in and . The SimpleItem class includes an item identity property and three other properties BarCode Name and Description . The BarCode property should not be localizable. The Name property and the Description property should be localizable.

After applying the localizable object pattern the class is transformed into the base part class SimpleItem and the translation part class SimpleItem Translation which have a composition relationship . Base part class includes all of the properties from class including localizable and non localizable properties. The localizable properties and will be in a base language. The translation part class includes only the localizable properties and in a particular language and a Language property which identifies that language.

The API of the transformed SimpleItem class does not break the API of the previous version of SimpleItem class . The collection containing SimpleltemTranslation elements translation part class can be made private and data from the collection can be only accessible through Name and Description getters. In the alternative the collection can be exposed thus leaving the alternative way of accessing translated data. Regardless the accessor of a localizable property contains a code based on a CurrentCulture or global language switch that gets or sets data for that property in the base object or in the one of the child objects from the collection. The global language switch can be the operating system current language if there is one or a global property added for the sake of the implementation of this feature if operating system does not support multiple languages or if the implementer wishes to have a current language independent from the OS settings. In example embodiments CurrentLanguage property of the object defaults from global language switch.

Referring now to shown is a method of handling localizable object classes. The method includes the step of obtaining a first or initial class e.g. class containing localizable properties e.g. properties and non localizable properties e.g. properties . Initial class can also be referred to as an initial class definition. As illustrated the method next includes the step of transforming the initial class into a base part class and a translation part class .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

