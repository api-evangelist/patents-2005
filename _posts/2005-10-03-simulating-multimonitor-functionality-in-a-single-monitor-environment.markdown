---

title: Simulating multi-monitor functionality in a single monitor environment
abstract: The systems and methods of the present provide techniques for virtualizing, simulating or providing multiple displays for an environment having one display device or less display devices than desired. The techniques of the present invention virtualize a client's display environment by modifying and controlling the behavior and appearance of an application window displayed on the client based on a desired display layout for the client. The present invention provides a window message processing mechanism to intercept a selected message to a window of an application. The window message processing mechanism compares the behavior and appearance of the window in view of the desired display layout and modifies the message to display the window on the client based on the desired display layout. As such, the present invention processes selected window messages to translate the behavior or appearance of the window to the desired display layout.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08191008&OS=08191008&RS=08191008
owner: Citrix Systems, Inc.
number: 08191008
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20051003
---
The present invention generally relates to virtualizing a display environment. More particularly the present invention relates to systems and methods for providing a multiple display environment via one or more display devices.

In many cases a user may connect from a client to a server to perform server based or thin client computing. The remote machine or server may execute an application on behalf of the client or the user of the client and then communicate display output from the executing application to the client for displaying on the display of the local client machine. Typically the client may have one computer monitor or display device and the server is communicating display output targeted for a single display environment. However in some cases the client may be connected to multiple display devices. For example a user of the client may desire to display one application on a first display device while displaying another application on a second display device. One or more of these applications may be a remote application running on a server.

In order for a server setup for a single display environment to communicate display output from an application running on the server to a client setup for a multiple display environment the client environment may need to be setup in a restrictive manner that could limit the functionality and benefits of a multiple display environment. The server providing the remote application to the client via a remote session may associate a single display with the remote session. In some cases the display layout for a client has to be organized in such a fashion that a monitor does not reside in the negative coordinate system. As such the user may be limited to configuring the primary monitor set as the top left most monitor in the display layout.

In other cases when displaying output on the client from an application executing on a server the application may not maximize to the appropriate display in the multiple display environment of the client. For example the application may be maximized to all displays or always to the top left display. In further cases some applications that are not displayed on the top left display may have a window such as a dialog or a menu be displayed in the top left display disjoint from the application. In another case problems may occur when changing the display environment while applications are being displayed on the client. For example the resolution of a display device or the number of display devices may be changed. An application may be displayed on a device that is no longer configured in a display configuration or used by the client. This may cause the application to be rendered off screen. As such the application may have to be manually moved back on to a screen area of an existing display device of the new display layout.

In other situations a client may have a single display environment and may be running one or more applications either remotely from a server or locally on the client. The single display environment may restrict or limit the user s use of the applications. For example in one case an application may be displayed in a large portion of the viewable screen area of the display. This may limit a user s ability to use other applications or to view items on the desktop of the computer. In other cases the user may be trying to use and display multiple applications at the same time. For example the user may want to view a side by side comparison between one document in one instance of a desktop or office application to another document in another instance of an office application. However the user is limited to the viewable screen area of the display device to make the comparison. In another case the user may frequently minimize and restore applications from a task bar on the desktop to switch between multiple applications.

Improved systems and methods are desired for virtualizing a display environment and providing multiple display environments for clients with one or more display devices.

The systems and methods of the present invention provide techniques for virtualizing multiple displays for an environment having one display device or less display devices than desired. The techniques of the present invention modify and control the behavior and appearance of an application window displayed on a client based on a desired display layout for the client. The display layout may be configured for multiple displays which may or may not correspond to the number of physical display devices of the client. The present invention provides a window message processing mechanism to intercept a selected message to a window of an application. The window message provides for the behavior or appearance of a window used or displayed by the application. The window processing mechanism compares the behavior and appearance of the window in view of the desired display layout and modifies the message to display the window on the client based on the desired display layout. As such the present invention processes selected window messages to translate the behavior or appearance of the window to the desired display layout.

Using the techniques of the present invention a user can access a remotely available application in a server based computing environment regardless of the monitor layout of the client or without restricted or limited client side setup. Instead of the server associating a single display with the remote session the server will provide display output based on the client s desired display layout. The present invention allows a remotely provided application to maximize to the proper display from the perspective of the client and allows menu items and other windows of an application to be displayed appropriately within an application for example without appearing disjoint from the application. Additionally the present invention automatically detects an off screen window and moves windows to be rendered to a viewable screen area. In summary the present invention provides the functionality and benefits of a multiple display environment without requiring multiple display devices.

In one aspect the present invention relates to a method for displaying a window of an application based on a client display environment. The method includes the steps of providing a desired display layout of a client using one or more display device intercepting by a window message processing mechanism a message to a window displayed on the client by an application and modifying by the window message processing mechanism the message to provide the window on the client based on the desired display layout. In one embodiment the window message processing mechanism modifies the message to modify a behavior or an appearance of the window based on the desired display layout.

In some embodiments of the present invention the desired display layout includes a resolution and a work area of the one or more display devices. The desired display layout may be stored to a storage element and associated with the client. In another embodiment the message identifies a change to a size a position or an attribute of the window. In some embodiments the message comprises a change to one of the following 1 a display resolution 2 a maximized size and position 3 a default minimum tracking size or 4 a default maximum tracking size.

In one embodiment the method of the present invention includes the window message processing mechanism intercepting the message related to a change to a position or a size of the window about to occur determining a display of the desired display layout to which the window should be maximized and modifying the message to maximize the window to a location and a resolution corresponding to the determined display. In another embodiment the method of the present invention includes the window message processing mechanism intercepting the message related to a change to a position a size or an attribute of the window about to occur determining if the window is in a maximized state and if the window is maximized modifying an attribute of the window to fix the position i.e. not allow movement of the window on a screen area of a display. If the window was in a maximized state then in another embodiment the window processing mechanism modifies the window s message to allows movement of the position of the window.

In some embodiments of the present invention the method compares the window s location to the desired display layout to determine if the window is visible on a screen area of a display and if the window is not located to be visible on the screen area of the display modifying the position of the window to be visible on the screen area of the display. In a further embodiment a session login mechanism compares the window s location upon reconnection of a session.

In additional embodiments the method of the present invention includes the window message processing mechanism intercepting the message related to a change to a resolution of a display suspending processing of messages to the window until a second or updated display layout is provided and modifying messages to the window based on the second or updated display layout. In at least one embodiment the window message processing mechanism of the present invention has a hooking mechanism to intercept a message comprising one of the following Windows operating system window messages 1 WM GETMINMAXINFO 2 WM WINDOWPOSCHANGING 3 WM WINDOWPOSCHANGED and 4 WM DISPLAYCHANGE.

In some embodiments the application executes on an application server and displays output to the client via a remote display protocol. In one embodiment the method includes displaying output to the client associated with the desired display layout having a display device in a negative coordinate system or a primary display device not in a top left display location. In another embodiment the method includes modifying the message to maximize the window in a screen area of a display device displaying the application. In other embodiments the method of the present invention includes modifying the message to display a menu of the application in a screen area of a display device displaying the application.

In another aspect the present invention is related to a system for providing a multiple display environment on a client having one or more display devices. The system includes a client display layout representing a desired display environment of a client having one or more display devices. The system also includes a window message processing mechanism intercepting a message to a window provided by an application and modifying the message to provide the window on the client based on the client display layout. In one embodiment the message is related to a behavior or an appearance of the window. In some embodiments of the system the window message processing mechanism of the present invention modifies a behavior or an appearance of the window based on the client display layout.

In other embodiments of the present invention the application executes on the client or an application server. In one embodiment the system includes an application server executing the application on behalf of the client and transmitting display output to the client via a remote display protocol. The remote display protocol includes one of the following protocols 1 Independent Computing Architecture ICA and 2 Remote Desktop Protocol RDP . In one embodiment the client display layout has a resolution and a work area of the one or more display devices. In another embodiment the client display layout may have a display device in a negative coordinate system or a primary display device not in a top left display location. In some embodiments the system also includes an application server storing the client display layout in a storage element and associating the stored client display layout with the client.

In some embodiments of the present invention the message includes a change to a size a position or an attribute of the window. For example the message may include a change to one of the following 1 a display resolution 2 a maximized size and position 3 a default minimum tracking size or 4 a default maximum tracking size. In one embodiment the window message processing mechanism of the present invention intercepts the message related to a change to a position or a size of the window about to occur determines a display device of the client display layout the window should be maximized to and modifies the message to provide a location and resolution corresponding to the determined display. In some embodiments the window message processing mechanism of the present invention intercepts the message related to a change to a position a size or an attribute of the window about to occur determines if the window is in a maximized state and if the window is maximized modifies an attribute of the window to fix the position i.e. not allow movement of the window on a screen area of a display. If the window was in a maximized state then in one embodiment the window processing mechanism modifies the message to allow movement of the position of the window.

In one embodiment of the present invention the system also has a session login mechanism. The session login mechanism compares the window s location to the desired display layout to determine if the window s location is visible on a screen area of a display device and if the window s location is not visible on the screen area of the display device modifies the position of the window to be visible on the screen of the display device. In some embodiments the window message processing mechanism intercepts the message related to a change to a resolution of a display suspends processing of messages to the window until a second or updated display layout is provided and modifies messages based on the second or updated display layout.

In one embodiment the window message processing mechanism of the present invention modifies the message to maximize the window in a screen area on a display device displaying the application. In another embodiment the window message processing mechanism modifies the message to display a menu of the application in a screen area on a display device displaying the application.

In a further aspect the present invention is related to a method practiced in a thin client or server based computing environment for remotely displaying a window on a client having multiple display devices. The method includes requesting by a client having a plurality of display devices to have an application executed on the application server and to have display output from the application executing on the application server transmitted to the client transmitting by the client a desired display layout to the application server and executing by the application server the application on behalf of the client. The method of the present invention further includes providing by the application the display output to have one or more windows display on the client according to the desired display layout of the client and transmitting by the application server the display output to the client via a remote display protocol. The remote display protocol may be the Independent Computing Architecture ICA or the Remote Desktop Protocol RDP .

In some embodiments the method of the present invention associates by the application server the desired display layout with the client and stores the desired display layout on the application server. In one embodiment the desired display layout is stored as a globally mapped data file. In another embodiment the desired display layout includes a display device located in a negative coordinate system of a layout and in other embodiment the desired display layout has a primary display device not in a top left location of a layout.

In one embodiment of the present invention the method may also include processing by the client the display output provided by the application to display the one or more windows on a display device of the plurality of display devices. In some embodiments the method includes translating by the application a portion of the display output to a resolution of a display device of the plurality of display devices. In one embodiment the method further includes maximizing by the application a window on a display device displaying the display output of the application. In another embodiment the method may also provide for displaying by the application a menu or dialog window on a display device displaying the display output of the application.

In additional embodiments the method of the present invention includes providing a hooking mechanism in the application executed on the application server and intercepting by the hooking mechanism a window message to a window of the application. The hooking mechanism modifies the window message to provide the display output regarding the window based on the desired display layout of the client. In one embodiment the method also includes modifying by the hooking mechanism the window message to modify a behavior or an appearance of the window based on the desired display layout.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

Certain illustrative embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not expressly made herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the systems and methods of the present invention provide techniques for virtualizing a display environment of a client by modifying and controlling the behavior and appearance of an application s window based on a desired display layout for the client. The techniques of the present invention may be used for simulating or providing a multiple display setup for a single display environment. The illustrative embodiment of the present invention provides a window processing mechanism to intercept a selected message to a window of an application and modify the message to the window to display the window on the client based on the desired display layout. The message to the window provides for the behavior or appearance of a window used or displayed by the application. In one embodiment the window processing mechanism of the present invention provides a hooking mechanism to an application s window procedure and replaces the original window procedure with a window procedure designed to intercept a selected window message and modify values of arguments or parameters of the intercepted window message based on the desired display layout of the client. As such the present invention processes selected window messages to provide or translate the behavior or appearance of the window to the desired display layout.

The techniques and mechanisms of the present invention may be practiced in a server based computing environment such as between a client and server communicating via a remote display protocol. A server may be setup or configured for a single display environment while the client may be setup or configured for one or more display devices. For example a session on a server such as a session on a Microsoft Windows server operating system may only be able to be configured or setup for a single display. The server may obtain a preferred or desired display layout for the client and store the display layout in association with the client such as associating the display layout with a remote session for the client. The window message processing mechanism of the present invention may be used by the server to intercept and modify selected messages to windows of the application running on the server on behalf of the client. The window messages are modified to provide a behavior or appearance of the window based on the display layout associated with the client. As such the display output communicated by the server to the client includes display output to be displayed on the client according to the client s display layout rather than the display layout e.g. single display layout of the session on the server.

Using the techniques and mechanisms of the present invention allows a user to access a remotely available application in a server based computing environment regardless of the monitor layout of the client. Instead of the server associating a single display with the remote session the server will provide display output based on the client s display layout. Furthermore the present invention allows a remotely provided application to maximize to the proper display from the perspective of the client. Also the present invention allows menu items and other windows of an application to be displayed appropriately within an application for example without appearing disjoint from the application. Additionally the present invention handles the issue of a window being rendered off screen after changes to the display layout by automatically moving the window to a viewable upon detection of an off screen window.

Furthermore the techniques and mechanisms of the present invention may also be practiced in a local computing environment to virtualize simulate or otherwise provide a multiple monitor environment for a client having a single display device. Although the client may have a single display device a desired display layout may be configured or provided to specify multiple displays. The window processing mechanism of the illustrative embodiment of the present invention may be used to intercept and modify window messages for an application on the client to control the behavior or appearance of the window based on the desired display layout instead of the actual monitor layout. As such a user may gain the functionality benefits and advantages of a multiple monitor environment without having multiple display devices.

Although the illustrative embodiment may be generally discussed in relation to a Microsoft Windows based operating system or environment the present invention may also be practiced in other types of operating systems and environments such as any type of Unix or Linux operating system or a Mac OS type of operating system. One ordinarily skilled in the art will recognize and appreciate in reading the detailed description of the illustrative embodiment below that the systems and methods of the present invention may likewise be practiced in these other operating systems and environments.

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

In the embodiment shown in the processor communicates with various I O devices via a local system bus . Various busses may be used to connect the central processing unit to any of the I O devices including a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. For embodiments in which the I O device is a video display the processor may use an Advanced Graphics Port AGP to communicate with the display . depicts an embodiment of a computer in which the main processor communicates directly with I O device via HyperTransport Rapid I O or InfiniBand. also depicts an embodiment in which local busses and direct communication are mixed the processor communicates with I O device using a local interconnected bus while communicating with I O device directly.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any software or portion thereof related to the present invention.

The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the software of the present invention. Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Zire 71 personal digital assistant manufactured by Palm Inc. In this embodiment the Zire 71 operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one aspect the present invention relates to virtualizing a display environment of a client. The present invention provides techniques and mechanisms for directing or controlling the behavior and appearance of a window displayed by an application on a client based on a virtualized display layout. Referring now to one embodiment of an environment in which the present invention may be used is depicted. In brief overview a computing device also referred to as client may be connected to or otherwise use a display device in one embodiment or multiple display devices in another embodiment. The client includes a display layout comprising a desired display configuration for the client such as for display device . The client includes an application providing one or more windows and a storage element for storing the display layout of the client . The client also includes a window processing mechanism . The client may be any workstation desktop computer laptop handheld computer mobile telephone or other computing device capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In further detail the display layout comprises any type and or form of information or data to identify specify or describe a desired display layout configuration for the client . In one embodiment the display layout may comprise a file or set of files in any format. In another embodiment the display layout may comprise any information or data stored in any type and or form of storage or memory element provided by the computing device . In an additional embodiment the display layout may be provided or stored in any suitable type and or form of database. In further embodiments the display layout may be provided via any object data structure or application programming interface API . The display layout may comprise any graphical textual or combination of graphical and textual elements. The display layout may be created edited configured or otherwise provided by any suitable means and or mechanisms such as a graphical and or text based tool program or application. In one embodiment a graphical tool with a user interface may be used to design create edit and configure the display layout .

The display layout may include attributes properties characteristics values settings profiles and other display configuration information to define each display for the client . The display layout may include display configuration for each of the desired displays physical virtual or otherwise. In some embodiments the display layout includes a description of the layout location position organization or arrangement for each display device . In one embodiment the display layout includes a visual or graphical arrangement identifying the location and or size of each monitor with respect to each other. In some embodiments each display is identified by an identifier such as a name or number. Also the display configuration may include a monitor type a screen refresh rate adapter type adapter information screen resolution a color quality a color scheme a font size a background a style for buttons and menus and a screen saver.

Additionally the display configuration may include information or data to identify or specify a resolution and or a work area for each display such as the display corresponding to a display device . In one embodiment the resolution identifies the number of pixels or individual points of color contained on a display monitor expressed in terms of the number of pixels on the horizontal axis and the number of pixels on the vertical axis. As those ordinarily skilled in the art will appreciate the sharpness of the image displayed on the display device may depend on the resolution and the size of the display device . In another embodiment the work area identifies the usable dimensions of the screen area of the display device in pixels. In some embodiments the work area does not include the dimensions of the screen area not useable by the user such as the portion of the screen area having a menu tool or task bar such as the task bar on a desktop provided via a Microsoft Windows operating system.

In one embodiment the display layout is configured to correspond to the number of display devices and their available features and characteristics accessible by the client . In other embodiments the display layout does not match or correspond to the number of display devices connected to the client . For example the client may have a single display device but the display layout may be configured for multiple display devices . In one aspect the display layout may be configured for a display device that is virtual or a virtual display device. A virtual display device is rendered off the screen area of the physical display device and may be placed on and off the visible screen area by any suitable mechanism and or means such as for example tabbing between desktops or panning and scrolling beyond the work area of the physical display device . A virtual display device may comprise a resolution a work area and any other data or information in a display configuration as if it was a physical display device connected or to be connected to a computing device .

In some embodiments the work area of the virtual display device is relative to and or adjacent horizontally or vertically to the screen area of the physical display device . In other embodiments the resolution of the virtual display device is the same resolution of the physical display device or one of the resolutions supported by the physical display device . In some embodiments a display corresponding to a physical display device is not required to be configured as the top left monitor. In other embodiments the display layout may comprise any arrangement of positive and or negative coordinate systems and any displays or display devices virtual or otherwise may be configured to be located with any positive and or negative coordinates or in any portion of the positive and or negative coordinate system.

The storage element illustrated in the client of may comprise any type and or form of storage or memory such as random access memory a disk drive a disk array a rewriteable optical drive shared memory a database a file an object a data structure or any other type and or form of storage or memory element that allows the storing of and access to information or data such as the display layout . In one embodiment storage element provides the display layout as a globally mapped data file which may be accessible by any of the applications of the client . In some embodiments the storage element stores the display layout or a portion of the display layout . In other embodiments the display layout may be converted translated transformed or otherwise altered to be stored in the storage element . Although the storage element is illustrated on the client another computing device accessible to the client such as a server may have a storage element for storing the display layout .

The client may execute or otherwise provide one or more applications . The application can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application provides one or more windows also sometimes collectively referenced herein as . In one embodiment the window is a graphic sometimes rectangular in shape having either some kind of user interface or graphical or textual representation of the output of and in some cases allowing input for the application . In another embodiment the window comprises an area on the screen that displays information including user documents as well as communications such as alert boxes and dialog boxes. Additionally the user may open or close a window move it around on the display and sometimes change its size scroll through it and edit its contents.

In one embodiment the user interface for the application is the window . In other embodiments the application provides a top level window for the presentation and or navigation structure or framework for the application and provides additional windows in response to input or other events. For example the application may have a menu system and screen area for a user interface represented by a top level window and based on user input displays a secondary or smaller window to provide output to the user and or receive input from the user regarding the application .

The application and or any windows of the application may receive a message such as a window message as input. The message may be any type and or form of communication via any type and or form of medium. In some embodiments the message comprises a communication to a window to control or direct the behavior appearance attributes or properties of the window . In an exemplary embodiment of a Microsoft Windows based environment the application is event driven and waits for the operating system or system to pass input to them. The system passes all input for an application to the various windows in the application . Each window has a function called a window procedure which the operating system calls in response to receiving input for the window. A window procedure is a function that receives and processes all messages sent to the window. A window class i.e. an API for creating a window has a window procedure and every window created with that class uses that same window procedure to respond to messages. The window procedure processes the input and returns control to the system. The system passes input to a window procedure in the form of a message which may be generated by the operating system or other applications . A message may be generated for an input event for example when the user types moves the mouse or clicks a control such as a scroll bar. A message may also be generated in response to changes in the operating system or computing device brought about by an application . An application can generate messages to direct windows of the application to perform tasks or to communicate with windows in other applications.

In the exemplary embodiment of a Microsoft Windows based system a message is sent to a window procedure with parameters. In one embodiment the message comprises a set of four parameters a window handle a message identifier and two values referred to as message parameters. The window handle identifies the window for which the message is intended and is used to determine which window procedure should receive the message. A message identifier identifies a purpose or function of the message . When a window procedure receives a message it uses the message identifier to determine how to process the message. For example a message identifier WM PAINT of a message may indicate to a window procedure that the window s client area has changed and must be repainted. The parameters of a message may specify data or the location of data used by a window procedure when processing a message . The meaning and value of the parameters may depend on the message . A message parameter can include an integer a string packed bit flags a pointer to a structure containing additional data or any type and or form of data or information.

Although a message is generally described in the context of a Microsoft Windows based environment a message may be any type and or form of communication in any type of operating system or environment as one ordinarily skilled in the art would recognize and appreciate to control or direct the appearance behavior and attributes of a window being displayed or otherwise being used processed or provided by the application . As such the message may be in a form and have content suitable to the environment or operating system for which the operations of the present invention may be practiced.

Still referring to the window processing mechanism also referred to as a window message processing mechanism of the present invention provides the means and mechanism for changing controlling or directing an appearance behavior or attribute of the window of an application based on the desired display layout of the client . The window processing mechanism may comprise an application programming interface API application module software component library service process task or any other form and or type of executable instructions designed to and capable of executing or providing the functionality of the present invention as described herein. The window processing mechanism may comprise software hardware or any combination of software and hardware. In some embodiments an application may be designed or constructed to include the functionality of the window processing mechanism while in some other embodiments the window processing mechanism is designed and constructed to be used by existing applications for example without changing the application .

In one embodiment the window processing mechanism comprises a mechanism for subclassing window procedures of a window of the application and providing a window procedure that gets called or used in place of the original window procedure of the window . In one embodiment a hooking mechanism is used by the window processing mechanism to provide the replacement window procedure. In some embodiments a hooking mechanism comprises using an application programming interface API to replace the executable instructions or code of a function procedure or API with a desired set of executable instructions or code. For example the window processing mechanism may introduce a hooking mechanism for any API related to creating establishing or providing a window for example the CreateWindowA CreateWindowW CreateWindowExA and CreateWindowExW APIs of the Microsoft Windows operating system environment. In some embodiments the window procedure is replaced via the Windows application programming interface API calls of GetWindowLong and SetWindowLong. In other embodiments the replaced window procedure is stored in a list of any suitable type and or form along with a window handle or reference to the replaced window procedure. As such the window procedure used by the window processing mechanism may call the replaced window procedure. For example the window processing mechanism may pass through a message to the original window procedure for processing.

The window procedure of the window processing mechanism may be constructed and designed to intercept all or a portion of the messages communicated to or received by the window . In some embodiments the window procedure intercepts all messages and any messages not to be modified are communicated to the original or replaced window procedure. In one embodiment of a Microsoft Windows based environment the window procedure of the window processing mechanism intercepts messages with a message identifier comprising one of the following 1 WM DISPLAYCHANGE 2 WM WINDOWPOSCHANGED 3 WM WINDOWPOSCHANGING and 4 WM GETMAXMININFO. A WM DISPLAYCHANGE message communicates to a window a change in a resolution of a display . A WM WINDOWPOSCHANGED message communicates to a window a change in a size position or a place in the Z order for the window . A WM WINDOWPOSCHANGING message is communicate to a window when a change in a size position or a place in the Z order for the window is about to occur. A WM GETMAXMININFO message is communicated to a window when a size or position or a window is about to change.

The window processing mechanism intercepts a message and modifies a return value or parameter of the message to correspond to or be based on the display layout . In some embodiments the window processing mechanism intercepts messages for a top level window and in other embodiments the window processing mechanism intercepts messages for windows that are not a top level window. In further embodiments the window processing mechanism intercepts messages for a certain set of windows . For example the window processing mechanism may be configured to intercept windows defined in a list database storage or any other type and or form of configuration medium.

The message intercepted by the window processing mechanism may have return values arguments and or parameters designed or targeted for the actual display layout of the client or server but the window processing mechanism changes the return values arguments and or parameters to be designed or targeted for the display configuration provided by the desired display layout . The window processing mechanism may read access acquire or otherwise obtain the display layout from the storage element by any suitable means and or mechanism. The window processing mechanism may comprise any type of logic functionality business rules or operations to obtain the values arguments and parameters of the message and analyze compare or otherwise process the values arguments and parameters of the message in view of the display layout and determine any changes or modifications to the values arguments or parameters or the message to display the window on a display identified by the display layout . The window processing mechanism modifies the message according to the determined changes and communicates the message to the window . In some embodiments the window processing mechanism determines the message does not need to be modified and thus communicates the message in the same form as intercepted by the window processing mechanism . In other embodiments the window processing mechanism replaces the message with a second message.

The systems and methods of the present invention may be practiced locally for a client to virtualize simulate or provide a multiple display environment when the client only has a single display device or has less display devices than desired. For example the display layout may identify multiple display configurations and . Display configuration may comprise information about the physical display device connected to the client while display configuration comprises information about a virtual display or virtual display device. In one embodiment since there is a single display device any displaying of an application and windows for the virtual display may occur off of the screen or work area of the physical display device . As such the client may include any type and or form of display switching mechanism to switch the virtual display into the screen area or work area of the physical display device . For example the display switching mechanism may include any mechanism to detect certain key strokes for switching between displays or for movement of the mouse or cursor indicating the user desires to scroll or pan to screen areas not currently visible on the display device .

In further embodiments of the environment of the display layout may be configured to provide multiple displays inside the screen or work area of the single display device . In one embodiment the work area of display device may be arranged into any number of portions sections or quadrants which may be of equal dimensions or not. For example a first virtual display may be the left half of the work area of the display device and a second virtual display may be the right half of the work area . As such a single large monitor or display device may be virtualized into multiple displays via the mechanisms and techniques of the present invention. Additionally the techniques and mechanisms of the present invention may be used for a single display environment with a display layout for a single display to control the behavior appearance and attributes of a window in a desired manner. For example every time an email application is maximized the window processing mechanism may modify the message to the window to display the window in the top left or right corner of the work area .

Referring now to another embodiment of a networked computer environment for practicing the present invention is illustrated. In brief overview a first computing device also referred to as the client communicates with a second computing device also referred to as server via one or more communication networks . The client may be connected to or otherwise use one or more display devices . The client includes a display layout comprising a desired display configuration for the client such as for display devices . The client may also include a client agent . The server includes an application providing one or more windows and a storage element for storing the display layout of the client . The server also includes a server agent a session login mechanism and a window processing mechanism .

The environment may provide a server based or thin client computing environment for practicing the operations of the present invention described herein. For example the application may be an application executed on the server on behalf of the client . The display output from execution of the application may be communicated to the client for display on the client for example via the client agent . The display output may be communicated between the server and client via a remote display protocol. The display output may be based on a window of the application running on the server but to be displayed on the client . As will be described in further detail below the window processing mechanism on the server intercepts and modifies messages of the application running on the server communicates the message to the window . As such the display output communicated to the client reflects the modified message processed by the window .

Although shows a network between the client and the server there may be additional networks e.g. between the client and the server . The client and the server may be on the same network or on a different network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. The topology of the network and may be a bus star or ring network topology. The network and network topology may be of any such network or network topology capable of supporting the operations of the present invention described herein.

The client can be a local desktop client on a local network or can be a remote display client of a separate network . The server may be any type of computing device capable of operating as described herein. Furthermore the server may be provided as a group of server systems logically acting as a single server system referred to herein as a server farm. In one embodiment the server is a multi user server system supporting multiple concurrently active client connections or user sessions.

In one embodiment as shown in a client agent is included within the client . The client agent can be for example implemented as a software program and or as a hardware device such as for example an ASIC or an FPGA. An example of a client agent with a user interface is a Web Browser e.g. a Microsoft Internet Explorer browser and or Netscape browser . The client agent can use any type of protocol such as a remote display protocol and it can be for example an HTTP client agent an FTP client agent an Oscar client agent a Telnet client agent an Independent Computing Architecture ICA client agent from Citrix Systems Inc. of Fort Lauderdale Fla. or a Remote Desktop Protocol RDP client agent from Microsoft Corporation of Redmond Wash. In some embodiments the client agent is configured to connect to the server . In some embodiments not shown the client includes a plurality of client agents each of which may communicate with a server respectively.

Additionally the server may comprise a server agent which may be capable of and configured to work in conjunction with the client agent . For example the server agent may be a server side component that accepts connections and requests from the client agent . In another embodiment the server agent may be capable of and configured to accept or establish remote access connections or sessions for the client . In one embodiment the client agent and server agent may communicate using a protocol such as http ICA or RDP over the network . In some embodiments the client agent and or server agent are used to establish re establish maintain or otherwise provide a server based computing or thin client computing based connection or session. In another embodiment the client agent and the server agent establish the start and end points of communications for a connection between the client and the destination server .

The client and server can connect to the one or more networks through a variety of connections including standard telephone lines LAN or WAN links e.g. T1 T3 56 kb X.25 SNA DECNET broadband connections ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET and wireless connections or any combination thereof. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET SONET SDH Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g and direct asynchronous connections . In one embodiment the client and the server communicate via any type and or form of gateway or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS or the Citrix Gateway Protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla.

In some embodiments the server include a storage element for storing the display layout. In one embodiment storage element provides the display layout as a globally mapped data file which may be accessible by any of the applications of the server . In some embodiments the display layout is stored in the same form as provided to or received by the server . Although the storage element is illustrated on the server in the client may also include a storage element and in some embodiments the client stores the display layout in the client s storage element and or to the server s storage element .

The server may also include a session login mechanism which may include any type and or form of service process task or program application or executable instructions on the server to handle and process login or session requests. The session login mechanism or any portion thereof may be provided via the operating system of the server . In one embodiment the session login mechanism includes the windows logon process winlogon a component of the Microsoft Windows families of operating systems. As such the session login mechanism may provide interactive logon support and may include a Graphical Identification and Authentication dynamically linked library DLL referred to as the GINA and any number of network providers. The session login mechanism may include any interfaces such as an application programming interface API or dynamically linked libraries i.e. a dll to allow any resource application network or network provide gather obtain any identification and authentication information during a logon process.

The session login mechanism may perform an authentication process and password updating operations for the operating system and or for one or more resources programs applications networks or network providers. In one embodiment the session login mechanism provides authentication services for the operating system and in additional embodiments also provides authentication services for access to applications to be executed on the server on behalf of the client such as in a server based or thin client computing model. Additionally the session login mechanism may monitor any mouse and or keyboard activity related to logging on or secure access of the server or any resource application network or network provider. In some embodiments the session login mechanism may establish any initial services processes or tasks for a user or session on the server .

The server may execute or otherwise provide one or more applications . The application can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client or communicating via a network . The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In some embodiments the application uses a remote display or presentation level protocol. In other embodiments the application comprises any type of software related to Voice Over Internet Protocol VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio. In some embodiments the application provides one or more windows also sometimes collectively referenced herein as .

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash.

Additionally the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office LiveMeeting provided by Microsoft Corporation of Redmond Wash.

Although in and the window processing mechanism is illustrated as included in the application the window processing mechanism may reside in any portion of the server the client and or external to the application for example as illustrated in . In one embodiment the window processing mechanism comprises a service process or task that runs in a system context or with the system privileges of the operating system. In some embodiments the windows processing mechanism may monitor messages communicated to windows of an application and intercept and modify the message to the windows . One ordinarily skilled in the art will recognize and appreciate that the windows processing mechanism may comprise any type and or form of executable instructions capable of performing the operations of the present invention described herein.

In another embodiment of environment illustrated in the present invention may be practiced using the session login mechanism . In this embodiment the server may use the session login mechanism to provide for or use any of the functionality of the window processing mechanism of the present invention. In some embodiments the session login mechanism may read access acquire or otherwise obtain the display layout from the storage element . In other embodiments the session login mechanism accesses loads or uses the functionality of the window processing mechanism via a dynamically loaded library such as a library provided via a network provider to the winlogon process of a Microsoft Windows operating system. In other embodiments the session login mechanism interfaces with or communicates to the window processing mechanism to provide the techniques of the present invention. In further embodiments the session login mechanism may use the techniques of the present invention during reconnection re establishment and or re authentication of a login or user session such as a remote session in a server based computing environment .

In another aspect the present invention is related to techniques for virtualizing a display environment of a client by controlling or directing the appearance behavior and attributes of a window of an application based on the desired display layout for a client . In view of the systems and structure of the environments and illustrated in the operations functionality and techniques of the present invention will be discussed as illustrated by the methods of . depicts illustrative method for practicing an embodiment of the present invention using the window processing mechanism . depicts illustrative examples of window messages and processing used in conjunction with illustrative method . depicts illustrative method for practicing an embodiment of the present invention when reconnecting re establishing or re authenticating via the session login mechanism . depicts illustrative method for changing the client s display layout for example during execution of an application .

Referring now to in brief overview illustrative method of the present invention provides a desired display layout of the client at step and at step stores the display layout in the storage element and associates the display layout with the client . At step the window processing mechanism accesses the display layout from the storage element to obtain the desired display layout information for the client . At step the window processing mechanism intercepts messages to a window displayed on a client by an application . At step the window processing mechanism modifies the message to provide the window on the client based on the desired display layout for the client . At step the window is displayed on the client based on the modified message . As such the appearance and behavior of the window is translated to and based on the display layout .

In further detail at illustrative step of the method of the present invention the desired display layout for the client is provided. In one embodiment the display layout is communicated from the client to the server . For example the client establishes a connection or communication session with the server . In some cases the server requests the display layout from the client and the client communicates the display layout in response to the request. In another embodiment the display layout is communicated via the session login mechanism during a logon or authentication process and in some embodiments upon a re logon or re authentication process. In one embodiment the display layout is stored in a database and queried by the client or server to obtain the display layout . In other embodiments the display layout is downloaded by either the client or the server from a web server a web site an application server another server or via the Internet. In further embodiments a user may configure the display layout with a program application or tool and store the display layout on a client server or another computing device .

At illustrative step the display layout is stored in the storage element and associated with the client . In some embodiments the server receives the display layout from the client and stores the display layout in the storage element . In one embodiment the server stores the display layout as a globally mapped data file on the server accessible by one or more applications . In another embodiment the server stores the display layout to another computing device accessible to the server such as via the network . In some embodiments the client stores the display layout to a storage element on the server to a storage element on the client or to a storage element accessible via the network or via the Internet.

The display layout may be stored to the storage element in any form suitable to the storage element and may be converted transformed altered translated or otherwise processed for storage in the storage element . For example in one embodiment the display layout may comprise data such as a file on the client transmitted via network packets to the server and then translated into a globally mapped data file on the server . In another embodiment the display layout is stored into any type and or form of database such as a relational database. In other embodiments the display layout is stored in storage comprising memory. For example the display layout may comprise or be represented by any type of object data structure or portion of memory on the client and or server .

The display layout may be associated with the client by any suitable means and or mechanisms. In one embodiment the name or any portion thereof of the globally mapped data file may identify the client . In another embodiment any portion of content of the globally mapped data file may identify the client . In additional embodiments the client or server may use any type of object data structure process or other elements in memory to associate the display layout with the client . In other embodiments the client or server may use portions of the storage element or other types of storage such as another file to associate the display layout with the client.

The window processing mechanism at step of illustrative method accesses the display layout from the storage element to obtain the desired display layout information for the client . In one embodiment the executable instructions of the window procedure used by the window processing mechanism comprises instructions to load read or otherwise acquire the display layout . For example the window processing mechanism may perform any type and or form of file input output i.e. file I O operations to read a globally mapped data file having the display layout . In another embodiment the instructions of the hooking application programming interface API for the window processing mechanism provides instructions for obtaining the display layout . In another embodiment the application reads or accesses the display layout for example upon execution or start up. In some embodiments the application may be executed during a session such as a user or remote session. In one embodiment the globally mapped data file may only be accessible by an application associated with or available via the remote session. In further embodiments access to the globally mapped data file may have access locked by a mutex or semaphore which is global for the remote session. One ordinarily skilled in the art will recognize and appreciate that any type and or form of locking mechanism can be used to control access the storage element such as a globally mapped data file.

At illustrative step the window processing mechanism of the present invention intercepts messages to a window displayed on a client by an application . In one embodiment upon obtaining the display layout a hooking mechanism is introduced into the server or the application on the server which hooks one or more window creation application programming interfaces APIs such as for example a create window type of API in a Microsoft Windows based environment. In some embodiments the window processing mechanism intercepts all messages to windows of the application . In other embodiments the window processing mechanism intercepts messages of a certain message identifier or name. In one embodiment the message may have arguments parameters or values that are used by the window processing mechanism to determine that the message should be intercepted. In additional embodiments the window processing mechanism intercepts messages to some of the windows of the application and in further embodiments only for a portion of the types of messages communicated to these windows . In yet another embodiment the window processing mechanism is configurable for example by a user to select the messages by name type or otherwise to be intercepted.

In some embodiments the window processing mechanism intercepts messages communicated to or intended for a top level window of the application . In other embodiments the window processing mechanism may intercept any level of window or only certain levels of windows in a hierarchy of windows . For example the window processing mechanism may ignore any popup dialog windows of a second level window displayed on top of or in front of a top level window .

In one embodiment the window processing mechanism may intercept a message but pass the message through or communicate the message to the original or replaced window procedure. In some embodiments the window processing mechanism ignores certain messages . In another embodiment the window procedure of the window processing mechanism also includes the functionality and operations of the replaced window procedure. As such the window processing mechanism may intercept a message and have either the replaced window procedure or the window procedure hooked into the application process the message .

At step the window processing mechanism modifies the message to provide the window on the client based on the desired display layout for the client . In some embodiments the window processing mechanism examines inspects analyzes or otherwise processes any values arguments or parameters of the message in comparison to the display layout for the client displaying the application . Based on the comparison the window processing mechanism may modify adjust edit change alter replace translate or otherwise set or provide values arguments and or parameters for the message that will provide the desired behavior appearance and attributes of the window as displayed or to be displayed by the application on the client in accordance with the display layout . For example the values and or parameters of the message may indicate a size position location resolution or other attributes of the window . These characteristics may be based on a display environment different than as specified in the display layout . As such in some embodiments the window processing mechanism may modify the size position location resolution or other attributes of the message for a display specified in the display layout .

By way of further example and referring now to the window processing mechanism may intercept and modify a message identified as one of the following 1 WM GETMAXMININFO 2 WM WINDOWPOSCHANGING 3 WM WINDOWPOSCHANGED and 4 WM DISPLAYCHANGE. At illustrative step for a message intercepted and identified as a WM GETMINMAXINFO the window processing mechanism analyzes the position of the application i.e. a top level window relative to the one or more displays of the display layout and determines which of the displays the application should be maximized to. The window processing mechanism modifies the message to provide values corresponding and translated to the resolution based on the desired display layout . For example in the server based computing environment of the server based application may provide window resolution for a single monitor session and the window processing mechanism translates the resolution to the multiple display environment provided via the display layout . As such this technique enables the application to maximize to a desired location in accordance with the display layout instead of the single monitor session.

At illustrative step for a message intercepted and identified as WM WINDOWPOSCHANGING the window processing mechanism determines if the window is in the maximized state and if so the message is modified to set the window flag to a no move style of window or otherwise to fix the location or position of the window or not allow the position of the window to change. As such in the maximized state a user may not be able to move the window . This technique enables the application or a window of the application to be maximized to a set or fixed location on a display specified by the display layout . In some embodiments either in response to the WM WINDOWPOSCHANGING message or otherwise the window processing mechanism determines the window is not in the maximized state and modifies the message to remove the no move style e.g. the window s position is no longer fixed or to otherwise allow the position of the window to be moved.

At illustrative step for a message intercepted and identified as WM WINDOWPOSCHANGED the window processing mechanism compares the position or location of the window to the display layout and if the window is to be rendered outside the screen or work area of display then the position or location of the window is changed to be rendered in at least a portion of the screen or work area of the display . This technique enables the user not to lose the application or window of the application to an off screen location.

At illustrative step for a message intercepted and identified as WM DISPLAYCHANGED the window processing mechanism suspends passing of messages until a new or second display layout is obtained or provided for the client . In one embodiment the window processing mechanism suspends the processing of all messages . In some embodiments the window processing mechanism suspends messages that are intercepted and communicated to the replaced or original window procedure. In other embodiments the window processing mechanism suspends messages for the replaced or original window procedure while continuing to process other messages . This technique enables a client to dynamically change the display layout at any time for example during the execution of an application .

Although the techniques of the present invention are generally described above in relation to message examples illustrated in one ordinarily skilled in the art will recognize and appreciate that any message of any type and or form may be used in practicing the present invention. Furthermore the window processing mechanism may perform any logic function operations or rules based on the message and or the display layout and even for the same type of message may perform a different operation or function for each instance of the message depending on changes to the display layout or any events conditions or status of the environment or .

Referring back to at step of illustrative method of the present invention the window is displayed on the client based on the message processed via the window processing mechanism . As such when the window processing mechanism modifies the message based on the display layout the window is displayed on the client according to the display layout . In some embodiments the window processing mechanism does not modify the message and therefore the window is displayed on the client according to the unmodified message . The technique of the present invention as illustrated above enables for example in one embodiment of a server based computing environment an application running on server to provide display output to the client that controls and directs the behavior appearance and attributes of windows in the display output in any manner desired and specified by the display layout which may not correspond to the physical display layout of the client .

In another aspect although the present invention is generally described with a window management system from Microsoft Windows operating system one ordinarily skilled in the art will recognize and appreciate that the present invention may be practiced with any type and or form of window manager or management system such any type and or form of X windows managers including any custom or open source based window manager running on any type of operating system.

Referring now to the techniques of the present invention may be practiced during the re connection re establishment or re authentication of any communication session or user session for example a remote display session between the client and the server . In one embodiment the session login mechanism as illustrated on the server of may include the window processing mechanism or any portion thereof. In brief overview of illustrative method the session login mechanism of the present invention at step accesses or obtains the display layout from the storage element . At step there may be a disconnection and reconnection processed by the session login mechanism . Upon re establishing and or re authenticating the session the session login mechanism at step compares a location of a window to the client s display layout and at step modifies the window to display on the client based on the client s display layout .

At illustrative step the session login mechanism obtains information on the display layout by any suitable means and or mechanisms. For example the window processing mechanism included in or used by the session login mechanism may have executable instructions such as file I O operations to access a globally mapped data file . In another embodiment the session login mechanism may load dynamically linked libraries that load read or otherwise access the storage element having the display layout information. In one embodiment as part of establishing or re establishing the session the session login mechanism may obtain the display layout from the client . For example the session login mechanism requests the display layout from the client along with any identification or authentication credentials.

At illustrative step any type of disconnection or disruption to a session between the client and server may occur and any type of reconnection or re establishment of the session may be facilitated via the session login mechanism . In some cases a user may cause a disconnection or disruption temporary or otherwise to a session between the client and the server due to physical changes in the client s display environment or because the user moves to another computing device . In one case the user moves from a first computing device such as a work computer to a second computing device such as a home computer. The server may maintain the same user session between computing devices but the display layout may have changed. In another case the user and or the client may traverse network segments or network access points that cause changes in the network address or host name e.g. internet protocol IP address of the client or causes the client to disconnect. The client may reconnect manually or automatically to the network such as via the client agent . As such the session login mechanism may facilitate or be used to facilitate the reconnection.

At step of illustrative method of the present invention the session login mechanism compares the location or position of a window of an application in relation to the desired display layout . In some embodiments the session login mechanism intercepts a message to a window and examines inspects or analyzes any portion of the message such as a value or parameter. In one embodiment the session login mechanism queries acquires or obtains the current location or position of one or more windows of the application via an application programming interface API . In another embodiment the session login mechanism requests from the application the location or position of any of the application s windows. The session login mechanism compares the location position size and any other attributes of the window to any information in the display layout .

At step the session login mechanism may modify the window based on the desired display layout . From the comparison of the information about the window to the information of the display layout the session login mechanism in some embodiments modifies the window to display on the client via a display identified in the display layout in a desired manner. In one embodiment via the functionality of the window processing mechanism embodied in or interfaced with the session login mechanism a message to a window may be intercepted and modified in accordance with the operations of the present invention described herein. In another embodiment the session login mechanism may modify one or more windows of the application via any application programming interface API to modify such windows . The techniques depicted by illustrative method enable client sessions to be disconnected and reconnected and have the display of windows be adjusted accordingly to any new or changed display environments of the client new or changed display layouts of the client or changes from one computing device to another computing device

In another aspect the present invention is related to dynamically changing a display layout for a client . Referring now to the techniques of the present invention may be practiced for a change to a display layout that occurs during the execution of an application . In brief overview of illustrative method at step a client s display layout is changed. At step the window processing mechanism suspends window message processing when the client s display layout is changed. At step an updated or a second display layout is obtained by the window processing mechanism and at step the window processing mechanism resumes intercepting and modifying messages to windows based on the second display layout .

In further detail at illustrative step the display layout may be changed at any time and for any reason during course of practicing the present invention. In one embodiment the display environment for the client may change and the display layout may be updated to reflect the changed display environment. For example another display device may be connected to the client . In another embodiment a user of the client may be making adjustments updating or otherwise changing the display layout to suit the user s desire for a behavior and appearance of applications and the display of windows of the application on the client . In yet a further embodiment a first session may be on a first client with a first display layout and the user switches to a second session or maintains the first session on a second client with a second or updated display layout .

At illustrative step the method of the present invention suspends intercepting and modifying messages for windows of an application upon notification of a change to the display layout . In one embodiment the window processing mechanism intercepts a message such as the WM DISPLAYCHANGE message indicating a change in any attribute or characteristic for example the resolution of the display environment. In another embodiment the client communicates a notice to the server the window processing mechanism or the session login mechanism indicating a change has occurred or is about to occur to the display layout . In yet another embodiment the application may comprise a user interface mechanism for a user to indicate a change to the display environment or to have the application suspend processing of window messages according to the display layout .

The window processing mechanism may suspend the processing of messages for all applications a portion of applications or for a portion of windows of one some or all of the application . In one embodiment the window processing mechanism queues any messages received until the window processing mechanism obtains another display layout . In another embodiment the window processing mechanism only suspends processing of window messages to be modified according to the display layout and continues passing the messages not to be modified to the original or replaced window procedure.

At illustrative step the method of the present invention obtains an updated or a second display layout to use for window message processing. The updated or second display layout may be provided by any suitable means and or mechanisms. In one embodiment the updated or second display layout is stored with the first display layout in the storage element . In another embodiment the updated or second display layout is stored as an updated version of the first display layout and in further embodiments the second display layout may replace the first display layout in the storage element . In one embodiment the client communicates the updated or second display layout to the server or stores the second display layout to the storage element on the server . In some embodiments the client via a reconnection or re establishment to the server may provide an updated display layout . In one embodiment the client communicates an unchanged display layout or a display layout to the server that the server already has stored in the storage element . In yet other embodiments the server or client may obtain the second display layout from another computing device on the network such as downloading the second display layout form a server. As described above in connection with illustrative method the window processing mechanism may obtain the display layout from the storage element by a variety of means and or mechanisms.

At step of illustrative method the window processing mechanism of the present invention resumes intercepting and modifying messages to windows based on the second display layout . In one embodiment if the window processing mechanism queued any messages the window processing mechanism analyzes and modifies the queued messages based on the second display layout . Otherwise the window processing mechanism uses the second display layout to modify any messages intercepted after obtaining the second display layout . Using the techniques of the present invention a client display environment and a client s display layout can be dynamically changed during the course of executing one or more applications and the display of windows for the application appear and behave according to the changes to the display layout. For example another display device may be added to the client and an application may be minimized during a change in the display layout. When the display layout is updated the user can maximize the application and have the application appear in the appropriate display even though the display environment changed when the application was minimized.

In view of the functions structures and operations described above the present invention provides systems and methods to control and direct the appearance behavior and attributes of windows of an application in a flexible manner for virtualizing simulating or providing a multiple display environment without restricting or limiting the client side display configuration. For example the display layout of the client may not be limited to configure the physical monitor of the client as the primary display i.e. as the top left most monitor in the display layout configuration. The present invention may be practiced in a server based or thin client based computing environment with clients having multiple display devices or with clients having a single display device. Additionally the present invention provides for the configuration of a display layout that is not restricted or limited to the physical display environment of the client. The present invention can extend the display environment of the client to include additional virtual displays so if the client has two display devices the present invention can be applied to virtualize or simulate three or more displays for the client. The present invention may also be practiced with a single display configuration for a single display device but still change the appearance and behavior of windows based on a desired or customized display layout. With the present invention a client or user may gain the functionality benefits and advantages of a multiple display environment without having multiple display devices or having all the display devices desired.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

