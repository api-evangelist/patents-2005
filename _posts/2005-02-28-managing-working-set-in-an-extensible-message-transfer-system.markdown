---

title: Managing working set in an extensible message transfer system
abstract: Within a mail transfer agent of a message transfer system, a message is received and if the recipient entity resolves to a number of recipients exceeding a specified quantity, the original message is not processed. Instead, at least two messages are created, with each of the created messages addressed to a subset of the original set of recipients. The created messages are returned to the calling module for processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08180833&OS=08180833&RS=08180833
owner: Microsoft Corporation
number: 08180833
owner_city: Redmond
owner_country: US
publication_date: 20050228
---
This application is related in subject matter to U.S. patent application Ser. No. 11 067 776 filed herewith entitled Bifurcation of Messages in an Extensible Message Transfer System and to U.S. patent application Ser. No. 11 068 549 filed herewith entitled Reprocessing of Messages in an Extensible Message Transfer System .

The invention relates to the delivery of messages in a computer system and in particular to an extensible e mail messaging system in which messages can be bifurcated within a mail transfer agent to facilitate extensibility and or manage working set.

While the flow of messages through a delivery system seems simple a message flows in the message flows out in practice message delivery is often more difficult than it may at first glance appear. One type of message delivery is e mail electronic mail exchanged via communication between computers over a network. There are a number of commercially available e mail systems including Microsoft s Exchange IBM s Lotus Notes Sendmail Postfix and others.

The delivery of e mail generally requires the use of a Mail User Agent MUA a client program that enables a user to send and receive e mail a Mail Transfer Agent MTA a server program that enables e mail transfers from one machine to another and a Mail Delivery Agent MDA a program used by the MTA to put mail content into a user s mailbox or to transport e mail to another MTA and possibly a Mail Retrieval Agent MRA a program or service that fetches mail content from a mailbox on a remote server and passes it to an MUA. In some Message Transfer Systems an MTA does not actually deliver e mail it prepares a message e.g. by insuring that the envelope is acceptable to the receiving server and calls an MDA to physically transport the message. SMTP Simple Mail Transfer Protocol is a protocol commonly used for sending and receiving e mail.

SMTP has the capability to transport e mail across networks. A network may consist of mutually TCP accessible hosts on the public Internet mutually TCP accessible hosts on a firewall isolated TCP IP Intranet or hosts in some other LAN or WAN environment utilizing a non TCP transport level protocol. Using SMTP a process can transfer e mail to another process on the same network or to some other network via a relay or gateway process accessible to both networks. Thus an e mail message may pass through a number of intermediate relay or gateway hosts on its path from sender to ultimate recipient. SMTP is independent of the particular transmission subsystem requiring only a reliable ordered data stream channel.

In common usage the two hosts participating in an SMTP transaction are described as the SMTP sender or the SMTP client and SMTP receiver or SMTP server . A given host may act both as server and client in a relay situation. The responsibility of an SMTP client is to transfer an e mail message to one or more SMTP servers or report its failure to do so. To transfer an e mail message to an SMTP server an SMTP client determines the address of an appropriate host running an SMTP server by resolving a destination domain name and establishes a two way transmission channel to that SMTP server. The SMTP client normally initiates an e mail transaction consisting of a series of commands. The commands specify the originator and destination of the e mail and the mail content including any headers or other structure . SMTP replies are sent from the SMTP server to the SMTP client in response to the commands. The SMTP server that receives the transaction may be either the ultimate destination or an intermediate relay that is e mail message transfer can occur in a single connection between the original SMTP sender and the final SMTP recipient or can occur in a series of hops through intermediary systems .

SMTP servers and clients act as MTAs. MUAs are normally thought of as the sources and targets of mail. At the source an MUA might collect mail to be transmitted from a user and hand it off to an MTA the final delivery MTA would be thought of as handing the mail off to an MUA or at least transferring responsibility to it e.g. by depositing the message in a message store via an MDA .

SMTP transports an e mail message. A message includes an envelope and content. The SMTP envelope is sent as a series of SMTP protocol units including an originator address to which error reports should be directed one or more recipient addresses and optional protocol extension material. An address is a character string identifying a user from whom mail is sent or to whom mail will be sent or a location into which mail will be deposited. A mailbox refers to the mail depository. The two terms mailbox and address are typically used interchangeably unless the distinction between the location in which mail is placed the mailbox and a reference to it the address is important. The SMTP mail content is sent in the SMTP DATA protocol unit that is the material transmitted after a DATA command is accepted and before the end of data indication is transmitted is referred to as message content or mail data. Message content includes message headers and a possibly structured message body. Headers typically include subject typically used for a summary of the contents of the message the e mail address of the sender the e mail address of the receiver and local time and date when the message was sent. The body is the text message itself the letter to analogize with traditional mail and may include a signature block at the end.

When the recipient of an e mail message resolves to a plurality of recipients as in the case of an e mail addressed to a distribution list mailing list group or alias the address is expanded that is a copy of the message is forwarded or redistributed to each mailbox in the expanded list. Thus receipt of a single e mail message sent to ALL EMPLOYEES of a very large company may result in the explosion of that e mail into tens hundreds thousands or even more messages to be delivered potentially causing the messaging system to be overwhelmed by the number of messages to be sent. Alternatively receipt of the message may result in a single e mail addressed to a very large number of recipients. While sending a single message is efficient if the single message is addressed to a very large number of recipients system resources such as memory for example may be overtaxed potentially causing system slowdown or even failure. It would be helpful if there were a way to expand messages in a reasonably efficient predictable way that does not overtax system resources.

There exists in the marketplace a demand for extensibility of e mail systems. Users may for example want to have their e mail evaluated by anti spam software anti virus software or to be handled according to a set of policy rules and so on. It would be helpful if there were a way to provide users with extensibility so that a generic message transfer system could be customized to meet a company s particular needs without re writing the message transfer software. It would also be helpful if there were a way to enable a single e mail addressed to a number of recipients to be treated differently for some recipients as specified for example by a set of policy rules reflected in the coding of external modules that could plug in to the generic message transfer system. It would be helpful to provide these enhancements while protecting the users from potential deleterious effects that arise because of existing features in message delivery systems such as distribution list processing.

Sometimes a problem is detected as a message is being processed by an MTA. For example the set of assumptions valid when the message was received by the MTA may have changed system configuration may have changed or some error condition may have occurred. Known systems attempt to keep track of the progress of the message try to correct the problem as well as possible and resume processing from that point. This approach often leads to unpredictable and incorrect results. It would be helpful if there were a more predictable solution that is likely to result in successful delivery more often.

Within a mail transfer agent MTA of a message transfer system a message is received and if the recipient entity resolves to a number of recipients exceeding a specified quantity the original message is not processed as received. Instead the original message as received is replaced by two or more messages which are created by the MTA with each of the created messages addressed to a subset of the original set of recipients. The created messages are returned to the calling module for processing.

The MTA may include a scheduler that can call into the modules and pass mail from one module to the next. The modules of the MTA may provide various functionality related to processing messages. The MTA may also include or provide one or more points within the processing path where the message is accessible to external modules or extensibility agents. Extensibility agents may act to customize the generic message transfer system to for example customize the message system to meet the needs of a particular entity or organization. An extensibility agent may access or access and modify the message within the processing path of the message in the MTA. The number of messages generated by the MTA may be determined by an algorithm which is a function of one or more of the following the size of the message the number of the recipients and the resources of the particular computer on which the message transfer system is running.

The working set of each module thereby is managed a balance is struck between sending one e mail to each recipient the greater the number of recipients the more inefficient is this approach and sending one e mail with a very large number of recipients efficient in terms of numbers of copies made but likely to overtax system resources .

If an error condition is detected during processing of an e mail processing of the e mail is discontinued and a copy of the message is processed from the beginning of the processing path within the categorizer.

A scheduler and a categorizer may enable one or more external modules to control bifurcation of a message as the message is processed within a Mail Transfer Agent MTA . The MTA may receive messages for processing by one or more modules within the MTA. The MTA may also include or provide points at which external modules for example modules provided by an entity other than the entity providing the message transfer system software can access or access and modify the message as it is being processed by the MTA.

Modules may be internal e.g. modules which are part of a categorizer component of the MTA or external e.g. modules which are not part of a categorizer component of the MTA . A scheduler may call or invoke a module and may pass a message to the module. A module may also call or invoke the scheduler and may pass a message to the scheduler. A call from a module to the scheduler may include a list of recipients for which a separate e mail message is to be generated. The list of recipients may be a subset of the recipients on the original e mail that was received. The scheduler may generate a new e mail addressed to the subset of the recipients and return this new e mail to the calling module. The scheduler may generate a second new e mail addressed to the remaining recipients of the original e mail and place the second e mail on a job data structure e.g. a job stack for future processing. The second e mail message may be accompanied by an indicator or identifier of the module which is to process the second e mail. Any number of new e mails addressed to subsets of the recipients of the original e mail may be generated by the scheduler. For example a third e mail message may be generated addressed to a third subset of the original list of recipients and so on until all the recipients have been included on a generated e mail message. Any required number of new messages may be generated by the scheduler.

Thus to enable an external module to control bifurcation of e mail messages within an MTA an e mail addressed to an entity which resolves to a number of recipients is received by an MTA a copy of the e mail is stored and the message is processed by one or more modules within the MTA and also may be processed by one or more external modules e.g. extensibility agents at points within the processing path. The external agent may access or receive the e mail addressed to a number of recipients and may call an API within the scheduler with a subset of the recipients on the received or accessed e mail. In response the scheduler may return to the external module a new e mail addressed only to the recipients listed on the call. This e mail then continues to be processed. The scheduler may also generate additional new e mails addressed to the remaining recipients i.e. the list of the original e mail minus the ones to whom the first e mail was addressed . These additional e mails are placed on a job data structure for processing later.

If an error condition is detected during processing of an e mail processing of the e mail is discontinued and a copy of the message is processed from the beginning of the processing path.

Suppose Malcolm wants to send a message e.g. an e mail to Dan. illustrates an exemplary structure of a message . It will be appreciated that other equally valid message structures are possible such as the one illustrated in in which the envelope is associated with the content rather than containing the content. illustrates an exemplary mail delivery system although it will be appreciated that variations of system abound.

Malcolm composes the body of the e mail using his MUA addresses the e mail to Dan i.e. adds headers and selects a send feature in his MUA . The e mail content is transferred from Malcolm s machine to an MTA . The MTA prepares an envelope acceptable to the receiving server. The mail content in its envelope is transferred if necessary from MTA to the next MTA . This process is repeated as required represented in by the dashed lines until the e mail arrives on Dan s local MTA. During the process of transporting the e mail through the network the envelope may be changed by each MTA that receives it. When the e mail finally arrives on Dan s local MTA the envelope is stripped off and the e mail content is placed in Dan s mailbox by an MDA where it can be retrieved by Dan s MUA which may reside on Dan s machine or elsewhere not shown .

Now suppose Malcolm sends an e mail to a distribution list say to ALL EMPLOYEES of a very large company. Typically no single mailbox exists for ALL EMPLOYEES instead each of the employees of the company should receive a copy of Malcolm s e mail. The MTA should perform the expansion of the ALL EMPLOYEES distribution list. The MTA could generate a new envelope containing a copy of the e mail content for each person in ALL EMPLOYEES. If the number of recipients in ALL EMPLOYEES is very large a large number of e mails will be generated possibly resulting in excessive network or storage consumption . Alternatively the MTA could generate a single new envelope with all the recipient addresses of ALL EMPLOYEES on it. If the number of recipients in ALL EMPLOYEES is very large processing this one e mail could overtax system resources possibly resulting in excessive memory usage or excessive code complexity to deal with large recipient lists .

Now suppose Malcolm sends one e mail addressed to a number of co workers and that the company for whom Malcolm works has some special policy rules about sending e mails. Suppose the company wants to add a particular disclaimer based on the type of recipient. Maybe managers get one type of disclaimer and developers get a second type of disclaimer. Suppose the message should be translated to French for employees living in France and suppose all attachments are to be stripped for all employees who are not managers or developers. It would be nice if this special processing could be performed by adding modules of processing at particular points within the processing path within the MTA for an e mail addressed to a number of recipients for whom diverse processing rules apply.

Now suppose that as a message is being processed the destination mailbox is moved from one server to another server. The message is very likely to be returned undeliverable . Some embodiments of the invention may address these scenarios among others.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Bifurcation of Messages within a Mail Transfer Agent MTA To Facilitate Extensibility and or Manage Working Set

The categorizer may itself include one or more modules components stages or agents as represented by stage stage stage etc. in . Each module component stage or agent may perform particular functions or operations associated with message e.g. e mail processing including but not limited to address resolution routing content conversion and so on. An address resolution stage for example may include the following 

Routing includes determining a path through the network to get the e mail to its final destination. Content conversion may include converting the content of the message to a form required or desired by the recipient. For example the character set of the original content may have to be converted to another character set or an image may have to be converted from one image compression format to another image compression format. Thus the categorizer in some embodiments performs functions related to the creation and modification of the message envelope and or content and may itself include any number of modules performing any number of functions.

The categorizer may also provide points of extensibility as represented in by E E E etc. Extensibility points may provide third parties or other entities points at which additional features may be added to the processing path. Examples of such features include but are not limited to desired features not provided by the categorizer anti spam processing anti virus processing journaling communication blocking rules or policies for mail distribution and mail flow management as well as others. At an extensibility point such as E E E etc. extensibility agents e.g. such as extensibility agents etc. provided by a software vendor customer or third party may be invoked. At extensibility points E E E etc. extensibility agents such as agents etc. may access or access and modify the message or a message derived therefrom.

In operation therefore a receive component of an MTA may receive a message and pass it to the scheduler . The scheduler may call one or more modules within the categorizer for processing and pass the called module a message for processing. The scheduler may also call one or more modules external to the categorizer for processing and pass the called external module a message for processing. Within the categorizer categorizer components e.g. stage stage stage etc. may further act on the message e.g. message or a message derived therefrom potentially modifying the message and in concert with the scheduler potentially generating additional messages e.g. message etc. therefrom. Similarly extensibility agents e.g. agents etc. external to the categorizer may further act on message potentially modifying message and in concert with the scheduler potentially generating additional messages e.g. message etc. therefrom. After processing by the categorizer and any extensibility agents that may exist the messages are passed to the send component . Send component may transfer the message to another MTA or to an NDA. Hence an exemplary processing path with the categorizer may be 

Stage receives message performs its processing generating a modified or partially processed message .

Scheduler passes modified partially processed message to extensibility agent . Extensibility agent performs its processing which involves further modifying modified partially processed message to generate modified partially processed message .

Stage performs its processing on modified partially processed message further modifying message creating message X not shown .

Stage performs its processing message X however the processing that stage performs does not modify message X.

Therefore scheduler passes message X to send component . It will be appreciated that the processing path described above is exemplary only and the invention as contemplated is not restricted to this or any other particular processing path sequence number of modules etc.

To understand how additional messages could result from one incoming message suppose that a CEO of Company X sends an e mail to a distribution list e.g. a group or alias ALL EMPLOYEES . Typically no mailbox exists for ALL EMPLOYEES instead each of the employees of the company should receive a copy of the CEO s e mail. One way to send a copy of the CEO s e mail to each employee is to create a new envelope for each employee and place a copy of the e mail content into each generated envelope. Hence if Company X had 500 000 employees i.e. ALL EMPLOYEES resolves to a list of 500 000 individual recipient addresses 500 000 e mails would be generated from the one received e mail if this plan were followed. The larger the content the more inefficient this would be.

Another way to send a copy of the CEO s e mail to all the employees of Company X would be to generate a single envelope with all 500 000 recipient addresses on the envelope. This is efficient in terms of numbers of copies of the e mail generated but presents processing problems receiving one or more e mails with very large numbers of recipients listed is likely to overwhelm system resources and may cause massive slow downs or even may cause system failure.

In contrast in some embodiments of the invention in response to receiving a message sent to a recipient designation e.g. distribution list group or alias representing a number of recipients exceeding a specified or configurable threshold the categorizer resolves the recipient designation into a list of individual recipients discards the envelope of the received message and generates two or more new envelopes each envelope including a subset of the complete list of individual recipients. In some embodiments of the invention as soon as a new envelope is generated the message is released for processing by the next component module agent or stage within or external to the categorizer.

It will be appreciated that the working set of the component module agent or stage receiving the generated envelopes and their associated content is thereby reduced from the working set that would arise from receiving a single envelope including the entire expanded list of e mail recipients. That is in some embodiments of the invention a portion or subset of the recipients is removed from the working set. In some embodiments of the invention new envelopes for the message are generated when the number of recipients on an envelope reaches some specified or configurable value e.g. a single envelope may have a maximum of 10 000 recipients . In some embodiments of the invention the number of new envelopes generated and thus the number of e mails resulting from distribution list expansion is determined according to an algorithm that balances efficiency e.g. number of envelopes generated each containing a copy of the content and potential processing load e.g. effect on the system of processing a single e mail with a large number of e mail recipients and system resources e.g. available memory etc. . In some embodiments of the invention the algorithm is a function of one or more of the number of recipients the size of the content and available system resources. Hence it will be appreciated that exercise of the invention strikes a balance between efficiency generating a single copy of the message with all recipients on the envelope of the message which in the case of very large numbers of recipients is likely to overwhelm system resources and generating a copy of the message for each recipient which is very inefficient and is likely to cause a system resources to be overwhelmed .

In some embodiments of the invention upon generation of each new envelope the envelope is passed to the next component of the categorizer for additional processing. In some embodiments of the invention the envelope is passed to an extensibility point e.g. E E E etc. that is the generated envelope is accessible by additional components such as extensibility agents.

At if the quantity of recipient addresses exceeds a specified or configurable value the original envelope associated with the message received by the mail transfer agent is discarded. At a new envelope is generated. The envelope may include or be associated with a copy of the content of the original received message. At recipients are added to the envelope according to some function or algorithm as described above. Thus the new envelope may be addressed to a subset of the expanded list of recipient addresses to which the original entity resolved. At the new envelope may be exposed to the next component of the mail transfer agent. At if there are more recipients another new envelope is generated and processed. This process continues until there are no more recipients.

Sometimes within a message delivery system a message is received and is processed by one or more components agents modules or stages and somewhere within the processing path an error condition is detected. Problems with delivery of a message and error conditions may occur because decisions were made based on a set of assumptions now known to be invalid or from any number of circumstances. For example an agent component module or stage may have incorrectly processed the message a recipient may have been added after the routing was already determined resulting in the e mail to the added recipient lacking correct routing information the mailbox of the recipient may have moved e.g. from one server to another server so that when the message is attempted to be delivered the mailbox does not exist where it is expected to be the message processing may require a service not currently available and so on. Errors may also occur when the system configuration has changed e.g. a new MTA has been added or an existing MTA has been removed or is not available so that the possible routing paths have changed system characteristics of an MTA have changed so that the MTA that formerly required the envelope to be in one format now requires the envelope to be in another format a recipient s mailbox has been moved from one server to another server a component module agent or stage has incorrectly processed a message and so on and for many other reasons. Existing systems may attempt to track the progress of the message correct the problem as well as possible and resume processing. This approach is often unsatisfactory inconsistent results may occur because the message continues to be processed under new assumptions or the resultant message may be undeliverable or may contain improperly modified contents.

In contrast in accordance with some embodiments of the invention a system for re processing a message may in response to detection of an error condition generate a copy of the original message and reprocess the copy of the original message from the beginning of the processing path in the categorizer. In some embodiments the content of a partially processed message for which an error condition is detected is compared to the original message received by the MTA. If the content of the partially processed message is identical to that of the original message the partially processed message may be sent back to the first component agent module or stage for processing from the beginning. If the content of the partially processed message is not identical to that of the original message the partially processed message may be discarded and a copy of the original message may be sent back to the beginning of the processing path for processing again. In some embodiments of the invention the content is not compared instead a copy of the message is always generated and processing is repeated from the beginning.

In some embodiments of the invention the message for which an error condition is detected is placed in a delay bin so that the message is not processed until some specified or configurable period of time has passed.

In illustrates an MTA in accordance with some embodiments of the invention. As illustrated in MTA may include one or more of the following components a receive module a send module and a categorizer . The receive module as the name suggests may receive a message such as message from an MDA MUA or another MTA. The send module similarly may send one or more messages derived from message to an MDA or another MTA. The scheduler may generate a copy of the original message and may pass messages between modules as described above.

The categorizer may itself include one or more modules components stages or agents as represented by stage stage stage etc. in . Each module component stage or agent may perform particular functions or operations including but not limited to address resolution routing content conversion and so on. In some embodiments of the invention the categorizer is substantially identical to the categorizer described above. In some embodiments of the invention the categorizer is substantially identical to the categorizer described below.

The categorizer may also provide points of extensibility as represented in by E E E etc. Extensibility points may provide third parties or other entities points at which additional features may be added to the processing path. Examples of such features include but are not limited to desired features not provided by the categorizer anti spam processing anti virus processing journaling communication blocking rules or policies for mail distribution and mail flow management as well as others. At an extensibility point such as E E E etc. extensibility agents e.g. such as extensibility agents etc. provided by a software vendor customer or third party may be invoked. At extensibility points E E E etc. extensibility agents such as agents etc. may access or access and modify the message.

In operation therefore a receive component of an MTA may receive a message and pass it to a scheduler for processing. The scheduler may store the message before passing it to a component stage agent or module for processing. Within the categorizer categorizer components e.g. stage stage stage etc. and extensibility agents e.g. agents etc. may further act on message potentially accessing or accessing and modifying message to generate one or more modified messages e.g. modified messages etc. . After processing by the categorizer the messages are passed to the send component to create a partially processed message that differs from the original message message either in the content or in the envelope or in both. Send component may transfer the message to another MTA or to an MDA.

If however an error condition is detected for message or for modified messages etc. during any part of the processing of the message in the categorizer the message may be re processed from the beginning of processing in the MTA. In some embodiments of the invention when an error condition is detected for message or for modified messages etc. the partially processed message is compared to the original message and if different the partially processed message is discarded a copy of the original message is generated and the copy of the original message is processed from the beginning of the processing path within the MTA.

Similarly in some embodiments of the invention only the content of the partially processed message is compared to the content of the original message and if different the content of the partially processed message is discarded and replaced by a copy of the content of the original message. The newly generated message is then processed from the beginning of processing path in the MTA. In other embodiments only the envelope of the original message is compared to the envelope of the partially processed message and if different the envelope of the partially processed message is discarded and replaced by a copy of the envelope of the original message. The newly generated message is then processed from the beginning of the processing path.

In some embodiments of the invention the comparison of the partially processed message to the original message is not performed and a copy of the original message is always generated for re processing from the beginning. In some embodiments of the invention processing of the envelope is performed independent of processing of the content of the message. Therefore a copy of the envelope only may be generated for reprocessing from the beginning a copy of the content only may be generated for reprocessing from the beginning or some combination thereof may be generated e.g. a portion of the envelope and all of the content all of the envelope and a portion e.g. only the body or only the headers of the content a portion of the envelope and a portion of the content and so on.

The MTA of may include a scheduler for processing messages stored in a job data structure . The job data structure may be a queue a stack a database storing state or any other suitable data structure for storing messages for later processing. MTA may include an API that interfaces between scheduler and modules within and external to the categorizer .

The categorizer may itself include one or more modules components stages or agents as represented by stage stage stage etc. in . Each module component stage or agent may perform particular functions or operations including but not limited to address resolution routing content conversion and so on. An address resolution stage for example may include the following 

The categorizer may also provide points of extensibility as represented in by E E E etc. Extensibility points may provide third parties or other entities points at which additional features may be added to the processing path. Examples of such features include but are not limited to desired features not provided by the categorizer anti spam processing anti virus processing journaling communication blocking rules or policies for mail distribution and mail flow management as well as others. At an extensibility point such as E E E etc. extensibility agents e.g. such as extensibility agents etc. provided by a software vendor customer or third party may be invoked. At extensibility points E E E etc. extensibility agents such as agents etc. may access or access and modify the message. In some embodiments of the invention categorizer is substantially similar to categorizer or categorizer described above.

In operation therefore a receive component of an MTA may receive a message and pass it to a scheduler for processing. The scheduler may call one or more modules within the categorizer for processing and pass the called module a message for processing. The scheduler may also call one or more modules external to the categorizer for processing and pass the called external module a message for processing. One or more additional messages may be generated from message and passed to send component . Within the categorizer categorizer components e.g. stage stage stage etc. and extensibility agents e.g. agents etc. may further act on message or modified messages etc. potentially modifying these messages and potentially generating additional messages therefrom. After processing by the categorizer the messages are passed to the send component . Send component may transfer the message to another MTA or to an MDA.

In accordance with some embodiments of the invention an extensibility agent e.g. agents etc. calls API with a list of recipients. API may compare the list of received recipients with the list of recipients of the original message e.g. message and generate a new e mail envelope for only the list of received recipients returning this message to the calling extensibility agent and placing a message on the job data structure for processing later. The message placed on the job data structure for processing later may include the recipients of the original message except those listed in the message sent from the extensibility agent e.g. agents etc. to the API .

An exemplary process for enabling the bifurcation of a message to be controlled by an extensibility agent in accordance with some embodiments of the invention is illustrated in . In accordance with some embodiments of the invention after receipt of a message by the receive component of the MTA the original message is stored for future reference at . The message may be stored by a component or module in the categorizer or may be stored by the scheduler. In the categorizer the message may be processed by one or more components agents or modules within the categorizer. The message may also be accessed at an extensibility point by one or more external agents and processed thereby.

In some embodiments of the invention the message is an e mail message and is addressed to a number of recipients or to an entity such as a distribution list mailing list group or alias that may be expanded by for example an expansion module to a number of recipients. In some embodiments of the invention the recipients associated with the message are subject to a set of rules that apply to the content routing or other characteristics of the e mail.

At in some embodiments of the invention an agent component module or stage is invoked. In some embodiments of the invention the agent component module or stage is provided by a vendor or by a third party and is meant to plug into an existing generic e mail or messaging system in order to customize the generic e mail or messaging system for a particular organization client business enterprise or other entity.

At a call may be made from the extensibility agent or other component agent module or stage to an API for bifurcating messages. The call may include the name of the calling agent a list of recipients for whom the call pertains and the name of the agent to whom the generated message should be returned.

At the list of recipients for the message is compared to list of recipients on the stored original message. A copy of the message addressed to only the recipients listed on the call is returned to the calling agent at and processing continues within the calling agent. Substantially simultaneously a second message may be generated at .

At the second message generated may be a copy of the original message listing only the remaining recipients that is the recipients listed on the second message may be the recipients of the original message except for those recipients listed by the agent in the call to the API. At the second message is stored on the job data structure. In some embodiments of the invention in addition to the message the list of the remaining recipients and the name of the calling agent the name of the agent to whom the message should be returned is also stored.

Upon completion of processing within the agent if there are more agents in the chain processing continues at the next agent . If there are no more agents at the job data structure is examined for messages to be processed and processing continues at the indicated agent.

Suppose for example that Company X has a number of policy rules concerning the content of and sending of e mails from employees of Company X. For example suppose the policy rules of Company X are the following 

Suppose further that the policy rules described above are implemented by extensibility agents agent agent and agent . Now suppose an e mail e.g. message is sent from an employee of Company X to the following recipients three vendors V V V one of whom is French V is French and client C.

Referring now concurrently to and suppose that a message MSG V V V C is received by MTA . Scheduler stores message . Suppose that extensibility agent is invoked at extensibility point and that extensibility agent is responsible for putting disclaimers on e mails. As the recipient list V V V C includes both vendors and clients extensibility agent calls API with the recipient list V V V . API receives the recipient list V V V compares the received recipient list with the recipient list of the original message which was stored at and returns a message addressed only to V V V e.g. MSG V V V to agent . API also stores a second message MSG C AGENT addressed to only those recipients of the original message not listed in the call i.e. in the example recipient C on the job data structure . MSG V V V is processed by agent and passed on to agent FIG. returning to . Agent receives MSG V V V from agent . Suppose agent is responsible for stripping attachments from e mails to V and V. In this case agent would send recipient list V V to API API would compare recipients generate MSG V V and send this message to agent generate a second message and places the second message on the job data structure . The second message may list the remaining recipient V and would indicate the agent that should process this message i.e. agent . After agent processes MSG V V MSG V V would be processed by agent . Suppose agent is responsible for translating the message to French. Because V is French agent would call API listing recipient V . API returns a message with only recipient V and puts a second message MSG V AGENT n on the job data structure. After all the agents in the chain have been processed the job data structure is accessed and the processing indicated performed. For example the message MSG V AGENT n would be sent to agent n for processing. 

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

