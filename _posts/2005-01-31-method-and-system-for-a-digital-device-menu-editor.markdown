---

title: Method and system for a digital device menu editor
abstract: A method of creating a menu for a handheld digital device in a development environment includes selecting a target device which has an associated operating system available to the development environment. An editor is called for creation of the menu. The editor uses the constraints of the associated target device operating system so that actual behavior of the target device can be viewed as the development occurs. The developer defines functionality for the menu and can verify its operation. The menu editor can be customized for new digital devices with new operating system. Code may be generated as a result of completing the development process and saving the design. The resulting code is assured to run properly on the target device operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07398474&OS=07398474&RS=07398474
owner: Microsoft Corporation
number: 07398474
owner_city: Redmond
owner_country: US
publication_date: 20050131
---
This application shares some subject matter with co owned U.S. patent application Ser. No. 10 922 580 filed Aug. 20 2004 entitled Form Skin And Design Time WYSIWYG For .Net Compact Framework and is incorporated herein by reference in its entirety.

The invention relates to the field of computer programming. More specifically the invention relates to visual programming environments for creating software designed to run on target digital devices.

An increasing number of portable computer devices are available in the market. These devices include handheld or pocket sized computers phones and personal digital assistants of various form factors and capabilities. As the computing power and memory capabilities of the handheld devices increase users are demanding access to more powerful software applications.

Given the multitude of variations of interfaces screen sizes and resolutions among the handheld devices it can be very difficult for a programmer to ensure that a particular chosen graphical user interface GUI of the handheld will appear and work correctly on multiple devices. For example the display and functionality of the target handheld device is often not well reflected in the capabilities of the development system.

Typically programmers of handheld devices alternate between first programming on a desktop development system and then running the newly developed software on an emulator of the handheld device or the actual device to see if the handheld GUI operates as expected. This can be time consuming and inefficient especially if a programmer wishes to port the application to a wide variety of portable devices. In one aspect of programming the typical development environment may allow a handheld device programmer to generate a function such as a handheld menu which cannot be realized in a controllable fashion in the target handheld device.

Thus there is a need for a what you see is what you get WYSIWYG development system for a handheld device which properly emulates the target handheld device such that the software look and feel of the target handheld device can be emulated on a single development system. It would also be advantageous if the development system could be extensible so that it can work with future devices. The present invention addresses the aforementioned needs and solves them with additional advantages as expressed herein.

A menu editor is an important element for application developers of target digital devices. One desirable aspect of a menu editor includes accurately representing the runtime look and feel of a menu as the menu would be seen on a target device. Another desirable aspect of a menu editor is that the code generated by a development system be fully compatible with the target device. Another desirable aspect of a menu editor is that it be extensible for future devices regardless of the operating system used in the target device.

In one aspect of the current invention the menu editor ensures object code for the developed feature is generated that is fully compatible with the specific operating system of the target device. The final code runs on the target device in the same manner as the new feature was displayed on the development system. In a further aspect of the invention a developed feature such as a menu can be defined addressing one target device and then changed to accommodate another handheld device thus allowing feature design re use. In another aspect of the invention the menu editor is extensible to include the development of menu items for future generations of new digital devices.

In one embodiment of the invention a menu editor for a handheld digital device is realized that is a software application finding utility on a development system. The development system is used by handheld device developers for the generation of new applications for handheld digital devices. These developers may be modifying or making new applications using the graphical user interface of the handheld device using a pre existing operating system or using a custom made operating system for the handheld device.

One advantage of the present invention is the ability of the user developer to view the entire handheld device and the response of the handheld device as she is generating new menu functionality. The use of the target device operating system allows the developer to immediately see how the target operating system responds to new menus as they are being developed. This saves both total development and debug time. Another advantage of the present menu editor system is that it is extensible and can be customized for different devices including future devices. Although examples of target digital devices included herein include handheld digital devices the present invention is suitable for any embedded device application having a menu item. Examples of such embedded device applications include but are not limited to non handheld devices such as airline kiosks gas pumps cash registers telephone or other telecommunications system displays.

In the embodiment of the main menu bar is located on the bottom of the handheld device screen . At the present stage of development for this target device GUI the main menu indicates that there are two established main menu items or softkeys top menu and top menu . As an aspect of the invention if the operating system of the target handheld device can support an expansion of the main menu softkeys then an additional menu item space is provided for the developer to type a label to identify the softkey and define one or more functions to be performed upon actuation of the softkey.

The embodiment of indicates that the developer has navigated through multiple menu items on the handheld device GUI. The developer has selected the top menu item of the main menu bar . The resulting function of the selection of the top menu softkey is the display of the menu items drop down list . The menu items list includes menu items through and submenu and . In the embodiment of menu items and submenu and are already labeled by the developer and may or may not yet have functions associated with them. In one aspect of the invention an additional menu item may be labeled by the developer and the newly defined menu item defined according to a desired function. In one embodiment of the invention the total number of new menu items such as item in menu item list is limited by the size of the linear display. This limitation is presented in the development system as a default so that the developer can experience the actual limitation of the handheld device GUI as she is developing software.

In the embodiment of the developer has selected submenu which displays a lower tier menu stack showing submenu items and . Note that not all menu items in stack have lower tier submenu items. For example menu item of stack may perform a paste function whereas submenu may be an import function where the sources of an import is selectable as a multiplicity of submenu items and that are shown in stack . In one aspect of the invention if the handheld device operating system allows the expansion of the lower tier stack to include more submenu items then the development system may depict that ability by displaying a position of a next available menu item . In the embodiment of the ability to expand the number of menu items is shown in every currently displayed menu item such as softkey and menu items and . The embodiment of shows such expansion capability to the programmer by displaying a position for one next available key. However other methods may be employed such as placing an expansion marker or color on the menu or submenu items indicating to the developer that a menu expansion is possible.

The functionality described in is shown by example in . depicts a pocket personal computer PC as shown on a development system screen shot . The pocket PC body is displayed so that the developer may better appreciate the look and feel of the handheld device she is developing. In this embodiment a main menu bar is located at the bottom of the GUI interface of the pocket PC device . The menu bar indicates that three softkeys are already defined as file edit and help. A fourth softkey is indicated as being available. The availability of the new softkey is indicative of the ability of the pocket PC operating system to support an additional softkey.

In the example of the developer has selected the edit softkey of the main menu bar and a submenu item stack is shown. Submenu item stack displays an indication that six submenu functions have been defined by the programmer as follows copy paste cut 100 200 and font. A potential expansion of the submenu item stack is possible by indication of a new menu item in the submenu. The programmer can take advantage of either the main menu softkey or the submenu item in developing a new application capability.

The display indicates that the developer has activated the options menu softkey and a submenu stack is displayed. In this example the operating system does not have a limit on the expansion of the menu items in the submenu stack . Thus a new sub menu item is available to the smart phone device developer.

The specific menu designer selected provides a corresponding device body and menu designer that interacts along with corresponding operating system limitations to render a realistic view of the device being developed. In one aspect of the embodiment a data store contains the selected device operating system and may be accessed by the menu editor . The data store may thus have a plurality of operating systems for a corresponding plurality of handheld devices to be developed.

The development editor contains methods for menu development which are common to the development of menus. It is the specific menu designers and targeted to specific handheld devices which are used to customize the interface and functionality of the menus of the target device. The various designers essentially allow customization of the menu editor for the selected target device. This customization occurs along with an exercise of the relevant portion of the corresponding device operating system in order to allow menu element creation that can function within the performance limits of the selected device.

Consequently the present invention is extensible such that any new operating system for a selected handheld device may be used in conjunction with the menu editor so that new applications can be generated for a device even if a new version of an operating system for that device is being used. Thus not only application developers can use the present invention but a more sophisticated developer can use the present invention to develop and test new applications on a new operating system which may still be under development.

After the menu editor has access to both the relevant device designer and the relevant handheld device operating system in the data store then interactions with the user via the user interface allow the user to customize the menus for the target handheld device. As menus are generated the development system renders a display indicative of what the operating system of the selected device should show on the device GUI and the programmed functionality of the softkeys that are created or modified. When the developer is satisfied with one part of this development she may save the newly created or modified device menu and object code is generated and stored in an output code file . At this point useable target operating system object code is generated specifically for the target device. This code is considered more useable than from prior art development systems because the code was developed by using the operating system of the target handheld device to display the look and feel of the developed menu and functionality during the development process.

An additional aspect of the invention allows an on the fly change of menu items from one device to the next. For example if the menu editor were used by a developer on a first device type the user need not fully restart development of the definition and functionality of the new menu for a new device. The developer may bring up the desired menu development from an existing design in a first device change the definition of the target device and the menu editor can morph the menu design to a second target device. Naturally the new menu on the new target device must be compatible in capability to the second target device to be fully functional. But this porting of a menu design form one device type to another can save development definition time and standardize menus across a family of devices.

Every instance of a managed menu has a top level menu item list which represents the top level menu bar user interface. This corresponds to the top level control for item of . The top level list handles the top level menu item list and contains menu item cell which represents the menu item s user interface of item of . Menu item cell represents the user interface of a menu item. It is managed by sub level menu item list and top level menu item list.

The menu item cell class accesses the menu item designer class and provides design time support for menu items. The menu item cell class can have sub level menu item list if its menu items property contains submenus. A sub list is shown in as item . In this case sub list is represented by a menu item list. The sub level menu item list and top level menu item list handles sub list selection and adding removing menu items.

The menu editor service class implements Menu Editor Service Interface and Ole Command Target Interface . The Menu Editor Service Interface is used to control when to launch display and hide menu editor. The Ole Command Target Interface is used to communicate with a Visual Studio shell command operations such as copy paste cut delete. Visual Studio is available from Microsoft Corporation in Redmond Wash.

Once the targeted device is selected the development system may access a menu editor for the selected device. According to an aspect of the invention the menu editor has access to the operating system of the targeted device. This operating system is useful to emulate the target device response to a new menu program or application that the developer is creating. The display of an image form representative of the target device shown the device graphical display is rendered step by the development system. This image form display helps the developer appreciate the look and feel of the target device and its interaction with a device user. The developer can use the menu editor to define a new menu and the corresponding functionality step . In one embodiment the new menu may be a softkey. According to an aspect of the invention the menu editor allows the developer to see how the new menu will look and operate on the target device because the operating system is available to emulate the actual constraints of the target device operating system.

After the menu operation is defined possibly as a softkey or menu item then the developer may request that target device code be generated step . This may be performed automatically by the development system software or it may be requested by the developer by initiated by actuating a save function. Code representing the newly developed menu function is serialized or generated to be in full compatibility with the specific operating system of the targeted handheld digital device. Because the specific target operating system was used during the development process no unexpected code behavior is expected.

In one aspect of the invention a new menu function targeted to one device may be used in another device. Optional step may be taken after a definition of a menu function for a specific device. The developer may change the target handheld device after a new menu function is defined without loss of menu definition. The method allows the new menu definition to be preserved while access to the specific target device editor is being changed. The preserved menu may be used in the newly re defined target device and new softkeys and menu items may be developed.

Although not required embodiments of the invention can also be implemented via an operating system for use by a developer of services for a device or object and or included within application software. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs appliances lights environmental control elements minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network bus or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.

With reference to an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer system typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disk Read Only Memory CDROM compact disc rewritable CDRW digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM CDRW DVD or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer system . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory not shown . In addition to monitor computer systems may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer system may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s .NET platform available from Microsoft Corporation includes servers building block services such as Web based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device one or more portions of an embodiment of the invention may also be implemented via an operating system application programming interface API or a middle man object between any of a coprocessor a display device and a requesting object such that operation may be performed by supported in or accessed via all of .NET s languages and services and in other distributed computing frameworks as well.

As mentioned above while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to implement an editor for a digital device. Thus the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same similar or equivalent systems and methods achieved by embodiments of the invention.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the signal processing services of an embodiment of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While aspects of the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the claimed invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

