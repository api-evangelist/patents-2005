---

title: Methods, systems, and computer program products for providing configurable telecommunications detail record adapter
abstract: Methods, systems, and computer program products for providing a configurable telecommunications detail record adapter are disclosed. In one method, a user defines input data formats and output data formats via a graphical user interface. The text entered by the user is converted into a configuration file. The configuration file is converted into source code, and the source code is automatically converted into an executable adapter instance. In this manner, different adapter instances may be quickly and easily created by the user to process different input telecommunications detail record formats, such as formats of different probe vendors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07286647&OS=07286647&RS=07286647
owner: Tekelec
number: 07286647
owner_city: Morrisville
owner_country: US
publication_date: 20050118
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 537 117 filed Jan. 16 2004 the disclosure of which is hereby incorporated herein by reference in its entirety.

A computer program listing is being submitted herewith as a 10 KB file and a 24 KB file on CD R in duplicate . Each CD R is marked in indelible ink to identify the Inventors Title File Names XDR Dictionary.txt and XDR Mapping.txt Creation Date Jan. 18 2005 Computer System IBM PC MS DOS MS Windows and Ser. No. 11 037 532. The computer program listing submitted on CD R is hereby incorporated by reference herein in its entirety.

The portion of this disclosure appearing on the enclosed CD Rs is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent disclosure as it appears in the Patent and Trademark Office files or records but otherwise reserves all copyrights whatsoever.

The subject matter described herein relates to methods and systems for processing data. In particular the subject matter described herein relates to a configurable adapter for processing telecommunications data from multiple sources and in multiple formats.

Telecommunications networks have become increasing complex with regard to the amount type and volume of information they transmit. In an attempt to understand the performance and capacity of the networks probes are used to collect telecommunications signaling messages and create data records describing various aspects of network performance. In telecommunications signaling networks probes typically consist of hardware that non intrusively copies signaling messages from signaling links that interconnect telecommunications network nodes. In other examples the probes include hardware and or software internal to telecommunications signaling nodes themselves to copy signaling messages that traverse the nodes. Messages copied by the probes may be forwarded to a central location where data records are produced.

Various applications utilize the data produced by the probes to provide insight into the service delivery traffic volume interconnections to other networks security as well as other performance metrics. However each protocol probe and data type often produce unique and or proprietary data formats as output. Further complicating the analysis applications that use the data produced by the probes may require the data to be provided in specific formats which are often different from those provided by the probes.

One particular problem associated with providing applications that process signaling message data obtained from network monitoring probes is that a single telecommunications service provider may have an installed base of probes that are manufactured by different probe vendors. Because of the capital investment in the existing probe set the service provider may be unwilling to replace the heterogeneous probe set with a homogeneous probe set from a single probe vendor. Thus it is necessary for an application provider to write customized applications for each vendor s probes. Requiring an application provider to write different software for each vendor s probes is cumbersome and results in unnecessary duplication of labor in creating the software.

A second problem associated with providing software that processes data from network monitoring probes occurs when the probe provider upgrades its software or hardware. When this occurs the format of the data output by the probes may change. As a result a provider of customized applications must rewrite application software for each new release of probe hardware and or software. Requiring that the application provider s software release schedule be controlled by the release schedule of the probe provider is undesirable as it may interfere with the application provider s business.

Accordingly in light of these difficulties associated with providing software that processes data from network monitoring probes there exists a need for improved methods systems and computer program products for providing a configurable telecommunications detail record adapter.

The subject matter described herein is generally directed to a system that can be configured to receive process and output data including telecommunications detail records produced from network probes monitoring telecommunications networks. The telecommunications detail records can be received in multiple formats and or from multiple sources. The term telecommunications detail record as used herein refers to a data record generated as a result of activity on one or more networks. Examples of telecommunications detail records include call detail records transaction detail records signal unit detail records Internet protocol detail records and session detail records among others. Thus a telecommunications detail record may include a copy of a single signaling message copies of multiple signaling messages or copies of parameters from a single or multiple signaling messages.

One aspect of the subject matter described herein includes a network side I O interface for receiving telecommunications detail records produced by network probes in multiple formats a mapping module for defining data maps from input formats to output formats one or more adapters that are configured using the data maps and that use the data maps to process the received telecommunications detail records a synchronizer for combining multiple data sets of processed telecommunications detail records into one or more output data sets and an application side I O interface for transmitting the output data stream to various destinations.

In one feature of the system multiple adapters are deployed to process input data streams from multiple sources each of which may produce data in different formats and thus may require separate data mappings. The different formats may be related to the physical format of the data e.g. binary ASCII etc. or the logical format of the data e.g. storing a date time in one field versus storing the date in one field and the time in a separate field . The mapping module may be used to define the separate mappings for mapping one or more input fields to one or more output fields and for defining the destination format and location for the output. The mappings can include a straight input to output map combinations of fields edited fields and mathematical and binary operations on the data in one or more fields to produce output data in the desired format s .

According to another aspect of the subject matter described herein configurable adapter instances can be created by an end user without requiring that the end user manually rewrite adapter source code. In one method an end user such as a technician employed by a telecommunications service provider creates a configuration file containing input data types output data types field mappings etc. via a menu driven graphical user interface. As the user fills in fields in the graphical user interface a configuration file including the data types and the field mappings is created. Next the configuration file is automatically converted into JAVA code using stored JAVA libraries. The JAVA code is then compiled into executable code for a configurable adapter instance. Because an adapter instance can be automatically created the time and labor required to adapt to different data input or output formats is reduced.

Field mapping configuration facilitates the mapping of input fields to output fields using mappings such as one to one one to many many to one many to many as well as mathematical and logical functions. For example a one to one field mapping may define an output field as the complete data residing in one input field. A one to many mapping may be used to map the complete data in one input field or certain portions of the data to numerous output fields. For example if the input field includes a date and time 01132004 17 50 24.30 downstream applications may require the data be split into two separate fields such as a date field 01132004 and a time field 17 50 24.30 .

In addition to mapping data from field s to field s mathematical lexical or logical functions may be performed on one or more input fields to produce the desired output. For example the desired output may be a field representing the talk time of a call whereas the input data may store only the call start and call end times. Using a mapping such as Output talktime Input callend Input callstart the adapter can produce the desired output. Other mathematical or logical functions include addition multiplication division unary subtraction percentage calculations exponential calculations logical and logical or logical binary yes or no bitwise and bitwise or. Lexical operations include operations that divide strings into components based on criteria or keys and reformat and or recombine the components into new strings. Examples of lexical operations include concatenation of a text string parsing of a text string removal of special characters and others.

Furthermore instance configuration defines which input sources are used to create the defined outputs the instance of adapter that is used to process a particular set of inputs and the physical sources and destinations of the input and output data.

An exemplary network monitoring system with which configurable adapter may interface is described in commonly assigned co pending U.S. patent publication no. 20040114741 the disclosure of which is incorporated herein by reference in its entirety. Briefly this system includes link probes that copy signaling messages directly from signaling links and message copy functions internal to signaling nodes such as signal transfer points that copy messages routed by those nodes. The system also includes an administration server that allows a user to define message copying rule sets. The link probes forward message copies to network monitoring platforms. The network monitoring platforms forward message copies to site collectors that collect messages from individual network monitoring sites. The site collectors forward message copies to a data gateway server where application specific CDRs are produced. Configurable adapter may interface with any of the components in the above described network monitoring system to obtain network monitoring data. In one exemplary implementation configurable adapter may receive raw CDRs from the data gateway server and may process the raw CDRs into application specific CDRs. The configurable adapter may also include an MSU feed for receiving MSUs from the site collectors.

Configurable adapter may operate as a software component residing on a computer. Alternatively configurable adapter may operate as a reconfigurable hardware or firmware component. Configurable adapter may be in direct communication with probes or in some embodiments with a data storage device used to store data produced by the probes . Configurable adapter may include of a mapping and format configuration module an adapter engine and a sequencer . In some embodiments multiple instances of the adapter engine also referred to herein as adapter instances can be operating in parallel as shown at and generally . Each instantiation of the adapter engine may operate on separate computer hardware elements or in some embodiments on the same hardware elements.

Mapping and format configuration module facilities the definition of field mapping configuration and instance configuration . In some embodiments a configuration graphical user interface is provided to allow users to define describe and modify the field mapping configuration and the instance configuration .

Each instantiation of adapter engine requests or in some embodiments receives telecommunications detail records or messages from one or more network probes . The data may be stored in ASCII format on a file server residing on or off of the network or in other embodiments some of the telecommunications detail records may be stored in a database. Each instance of adapter engine uses a corresponding instance configuration to determine the source frequency and format of records to be processed by that instance of the adapter engine . Once adapter engine receives records adapter engine processes records according to field mapping configuration and produces a set of output telecommunications detail records according to the format s described in field mapping configuration .

In cases where multiple outputs are produced each instance of adapter engine sends the output telecommunications detail records to a sequencer . Sequencer then combines the output telecommunications detail records into normalized telecommunications detail records . Normalized telecommunications detail records may include a stream or grouping of telecommunications detail records arranged in a time order. In some embodiments sequencer uses business rules governing the type of data being processed the application s receiving the output or other rules defined in mapping and configuration module . For example each instance of adapter engine may receive data from separate probes however the business application used to analyze the data may require the data to be sequenced chronologically and not separated by the source of the data. In such a case sequencer assembles the resulting output from each instance of adapter engine into the normalized telecommunications detail records by sorting the records by transaction time. An exemplary method for sorting telecommunications detail records by transaction time will be described in detail below.

Normalized telecommunications detail records can then be imported into a data server or other data storage device using an import module . The type of data storage device may depend on the applications being used to analyze the data and in some cases may be third party databases such as Oracle SQLServer or others. In other embodiments the data may be stored as a collection of one or more flat files. In some embodiments a data viewer may be provided to allow users to query view or report on the data residing in the data server .

Mapping configuration module receives user specified field mappings and operations from GUI and generates the corresponding portion of the configuration file. Examples of user specified field mappings and operations are shown in xDR field mapping configuration block illustrated in . These mappings may include mappings from input data fields to output data fields. Different input data formats may be handled by allowing a user to define an input xDR dictionary. An input xDR dictionary may allow a user to specify fields data types field lengths and field descriptions for different input xDR formats. For example a user may define different input xDR dictionaries for processing xDRs from different probe vendors. Such dictionaries may be created using mapping configuration module . Field sequence configuration module defines the portion of the configuration file that controls how output xDRs will be sequenced. For example a user may input data with regard to a wait time to make sure that all xDRs have been received before ordering the xDRs. An exemplary method for field sequence configuration that may be created using field sequence configuration module will be described in detail below.

xDR format configuration module stores the output xDR format specified by the user via web based GUI . Similar to the input xDR dictionaries described above xDR format configuration module may allow the user to define output xDR fields data types field lengths and field descriptions. Mapping configuration module allows the user to define mappings between input and output xDR dictionaries.

Business rules plug ins include any business specific rules with regard to xDR formats that are specified by an external application. Examples of business rules include specific mapping rules that apply to a company s input or output xDR format. For example a probe provider may produce xDRs in one format and an application provider may wish to deviate from that format. Accordingly the application provider may define a business specific mapping rule that maps the probe provider s xDRs to the application provider s format.

The text data input by the user via web based GUI is converted by each module into rule metadata . As stated above rule metadata may be an XML formatted configuration file. Once the configuration file is complete the configuration file is provided to rules engine which includes source code classes such as JAVA classes used to convert the configuration file into a source code file and then into an executable file. Rules engine may include or have access to a compiler for compiling the adapter instance source code into an executable adapter instance. In the illustrated example rules engine includes an xDR mapping module a business specific mapping module a field sequence interpretation module and an xDR format validation and exception xDR logging module .

xDR mapping module includes source code libraries that map user implement the user specified input formats output formats and mappings. Business specific mappings module includes libraries that implement the business specific mappings specified by the user. Field sequence interpretation module includes libraries that implement the sequencing of xDRs as described above. xDR format validation and exceptional logging module implements user specified rules for logging events. For example if an input xDR does not match any of the specified input data formats rather than discarding the xDR the xDR may be logged as an exception.

I O interfaces and each include a file system interface a socket interface and a database interface . File system interface of each module interfaces directly with the file system of a network side system. For example if the network or application side system is a Unix based system file system interface may be a Unix based file system interface. Socket interface interfaces directly with network sockets to receive xDRs in real time. Examples of socket interfaces suitable for use with embodiments of the subject matter described herein include WindowS sockets interfaces and BSD sockets interfaces. Database interfaces interface directly with database subsystems on input and output systems. Database interfaces may be any suitable database interfaces such as ODBC compliant database interfaces.

The following example illustrates an XML formatted XDR dictionary that may be generated and stored in configuration file based on user input received via user interface .

As illustrated in the xDR dictionary example above message field names such as OPC and DPC are specified along with their types sizes and indexed location in the dictionary. This data is used to extract corresponding source code for generating xDRs having the indicated format from stored source code libraries. In the Computer Program Source Code Appendix the file XDR Dictionary.txt contains automatically generated source code corresponding to the xDR dictionary listed above. The source code is written in the JAVA programming language. However the methods and systems described herein are not limited to automatically converting the configuration file to the JAVA programming language. Automatically generating any suitable source or object code language is intended to be within the scope of the subject matter described herein. Examples of other suitable languages that may be generated include C C and assembly language.

The following example illustrates an XML formatted mappings between input and output XDR formats that may be generated and stored in configuration file based on user input received via user interface .

As illustrated in the xDR mapping example above target message fields in the output xDR are filled with values from input xDRs and by values that result from expressions generated based on fields in input xDRs. The XML data is used to extract corresponding source code for implementing the indicated mappings stored source code libraries. In the source code appendix the file XDR Mapping.txt contains automatically generated source code corresponding to the XDR mapping example listed above. The source code is written in the JAVA programming language. However the methods and systems described herein are not limited to automatically converting the configuration file to the JAVA programming language. Automatically generating any suitable source or object code language is intended to be within the scope of the subject matter described herein. Examples of other suitable languages that may be generated include C C and assembly language.

Once the source code files have been generated the user selects a compile option via graphical user interface and an executable adapter instance is generated. In one exemplary implementation the source code files may be in JAVA format and the source code files may be compiled using a standard JAVA compiler such as JavaCC .

As stated above one feature of the subject matter described herein is a graphical user interface that allows the user to define run time configuration and xDR creation information that is used to produce each adapter instance. Graphical user interface includes two principal modes of operation a configuration mode and a configurable adapter definition mode. In configuration mode graphical user interface allows a user to specify run time aspects of interfacing with the input and output systems such as file formats number of CDRs produced and source and destination file system location information. In mapping configuration mode the user specifies input and output data formats and rules for mapping fields between input and output data formats.

As stated above the configurable adapter allows the user to create new adapter instances to accommodate different data input and output formats. is a flow chart illustrating exemplary steps that may be performed in creating adapter instances in response to changes in input data format according to an embodiment of the subject matter described herein. Referring to in step a user creates at least one configurable adapter instance by selecting the appropriate parameters using the graphical user interface and compiling the configuration file into an executable file. In step once the instance is created the user activates the instance to process xDRs. In step the user detects an input data format change. This step may be performed manually when the user is notified that new probe hardware or software is coming into service. In step the user creates a new instance to handle the input data change without rewriting the adapter source code. The user simply goes through the steps of selecting the appropriate fields and mappings using the graphical user interface and creates the configuration file. The configuration file is automatically converted into source code and compiled into a new adapter instance. In step the user activates the new adapter instance to process the new input data.

As stated above another aspect of the subject matter described herein is sequencing xDRs or messages to be output to an application in a sequenced manner. xDRs or messages can be received out of sequence due to different processing delays at different probes or by different degrees of network congestion between the probes and the configurable adapter. In some applications it is desirable that xDRs be forwarded to the applications in real time or near real time. In order to ensure that all xDRs or messages have been received and properly ordered it may be necessary to wait for a predetermined time period before sending the xDRs or messages to the application to ensure that all messages have been received and sequenced. However this wait period is preferably not too long because it reduces the real time nature of the xDRs or message feed.

Thus as described the subject matter described herein allows a user to easily define adapter instances that process data from different probes and in different formats without requiring that the user have detailed programming knowledge. The user simply creates a configuration file via a graphical user interface. The configuration file is automatically converted in the source code which is already converted into an executable code to process new data formats.

It will be understood that various details of the invention may be changed without departing from the scope of the invention. Furthermore the foregoing description is for the purpose of illustration only and not for the purpose of limitation as the invention is defined by the claims as set forth hereinafter.

