---

title: System, method, and computer readable medium for integrating an original application with a remote application
abstract: A method, system, and computer readable medium for integrating an original application with a remote application comprises generating adapter classes related to the original application, generating proxy classes related to the remote application, wherein the proxy classes are adapted to communicate with the adapter classes, generating data types related to the remote application, wherein the data types related to the remote application are equivalent to data types related to the original application, and generating streamers related to the remote application, wherein the streamers related to the remote application are adapted to be utilized by the proxy classes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07861212&OS=07861212&RS=07861212
owner: 
number: 07861212
owner_city: 
owner_country: 
publication_date: 20050322
---
The present application is related to U.S. patent application Ser. No. 11 086 101 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING AN ORIGINAL APPLICATION WITH A REMOTE APPLICATION U.S. patent application Ser. No. 11 086 211 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING APPLICATIONS IN MULTIPLE LANGUAGES U.S. patent application Ser. No. 11 086 120 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING AN ORIGINAL LANGUAGE APPLICATION WITH A TARGET LANGUAGE APPLICATION and U.S. patent application Ser. No. 11 086 102 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR NORMALIZING SOURCE FILES IN MULTIPLE SOFTWARE LANGUAGES the disclosures of which are incorporated in their entirety by reference herein.

The present invention is related to integrating applications and more specifically to a system and method for integrating an original application with a remote application.

Various limitations are associated with integrating applications such as difficulty in sharing the structure of application data and application programming interfaces classes . As such it is cumbersome for an application written in one language or in an original application to access a functionality provided by an application written in a different language or a remote application. It is currently tedious to integrate these applications because a common structure must be defined in a third language such as Extensible Markup Language Common Object Request Broker Architecture Event Definition Language etc. .

The present invention overcomes these problems and limitations by providing a system and method for integrating an original application with a remote application.

The present invention comprises a system method and computer readable medium for an original application with a remote application. In one embodiment a method for integrating an original application with a remote application comprises generating adapter classes related to the original application generating proxy classes related to the remote application wherein the proxy classes are adapted to communicate with the adapter classes generating data types related to the remote application wherein the data types related to the remote application are equivalent to data types related to the original application and generating streamers related to the remote application wherein the streamers related to the remote application are adapted to be utilized by the proxy classes.

In another embodiment a method for integrating an original application with a remote application comprises generating proxy classes related to the remote application generating data types related to the remote application wherein the data types related to the remote application are equivalent to data types related to an original application and generating streamers related to the remote application wherein the streamers related to the remote application are adapted to be utilized by the proxy classes.

In a further embodiment a computer readable medium comprises instructions for generating at least one proxy class related to a remote application generating at least one data type related to the remote application and generating at least one streamer related to the remote application wherein the data type related to the remote application is equivalent to at least one data type related to an original application and wherein the streamer is adapted to be utilized by the proxy class.

In yet another embodiment a computer readable medium comprises instructions for generating at least one of a proxy class a data type and a streamer each related to a remote application wherein the data type related to the remote application is equivalent to at least one data type related to an original application.

In yet a further embodiment a system for integrating an original application with a remote application comprises a first module adapted to generate adapter classes related to an original application a second module adapted to generate proxy classes related to a remote application wherein the first module and the second module are operably coupled the second module adapted to generate data types related to the remote application and the second module adapted to convert data communication between the proxy classes and the adapter classes.

In yet another embodiment a module for integrating an original application with a remote application wherein the module is adapted to generate adapter classes related to an original application wherein the adapter classes are adapted to provide access to functions of the original application provide data from the adapter classes to a remote application and receive converted data by the adapter class from the remote application wherein the data is converted into a neutral data format.

In yet a further embodiment a module for integrating an original application with a remote application wherein the module is adapted to generate proxy classes related to a remote application generate data types related to the remote application and convert data communication between the proxy classes and an original application generate streamers related to the remote application wherein the streamers are adapted to convert data communicated by the proxy classes to the original application and convert data communicated by the original application to the proxy classes wherein the data is converted into a neutral data format.

If they are not selected the software and or user are prompted to select the classes methods and other constructs in the program at step . If they are selected it is determined if mapping for all complex user defined types is provided at step . In one embodiment the software program verifies the selected constructs against all target languages. The software program identifies the mapping of the constructs in the original source language to the target language. If the mapping is not provided the software and or user are prompted to perform the mapping for all complex user defined types used in parameters return types and exceptions in step . In one embodiment if the construct is complex in nature and has no equivalent in a target language the software program prompts the user to provide a mapping for the construct. If the mapping is provided it is determined if any target languages are selected at step . If they are not selected the software and or user are prompted to select the target languages at step . If they are selected software is generated to connect the source language application with the target language application s at step . The generated code consists of adapters on the source language side to export existing source language application objects. The generated code consists of proxies on the target language side to provide access to source language application objects.

In one embodiment a method for integrating an original application with a remote application comprises generating adapter classes related to the original application generating proxy classes related to the remote application wherein the proxy classes are adapted to communicate with the adapter classes generating data types related to the remote application wherein the data types related to the remote application are equivalent to data types related to the original application and generating streamers related to the remote application wherein the streamers related to the remote application are adapted to be utilized by the proxy classes. The communication comprises sending input parameters related to the original application to the adapter classes receiving at least one of output parameters return values and exceptions related to the original application at the proxy classes receiving at least one of input parameters related to the original application at the adapter classes and sending at least one of output parameters return values and exceptions related to the original application to the proxy classes.

The method further comprises providing access to functions of the original application by the adapter classes converting data communicated by the proxy classes to the adapter classes and by the adapter classes to the proxy classes by the streamers related to the remote application into a neutral data format and receiving the data by the streamers in neutral data format and converting the data to corresponding data types.

The input file is imported into an application which is a software program implementing the current invention that generates files or classes on an original or source application side and files or classes on a remote or target application side . The streamer class is generated for Class B which is used as the return type for the getB method in Class A while the streamer class generated for Class C is used as the type of the member in Class A. The Adapter class is generated for Class A that provides target language applications to invoke the getB method and access the member of original source application objects. The input file the application the source application side and the target application side may fully and or partially reside on a client a server and or a client and a server.

A proxy class related to the target language sends a request to an adapter class related to the original language and a response and an exception are received by the proxy class . The request the response and the exception are sent generally based on data types and related to the target language streamers and related to the target language and streamers and related to the original language. More specifically the proxy class is generated for the Class A to be used in the target language applications as a proxy for the original source application objects. The proxy class contains a getB method an access for a member and a mutator for the member.

The Class B is an equivalent class for Class B in the original source language that forms the return type of the getB method in the proxy while the Class C is an equivalent class for Class C in the original source language that is used in the accessor and mutator for the member. The streamer classes and are streamer classes generated for the generated Class B and Class C respectively.

The target language application communicates with the source language application by invoking the getB method on the proxy class. The method invocation causes the generated code to create a data packet containing the intent of the target language application to invoke the getB method on the source language application object. The packet is transferred to the source language application . The source language application adapter receives the packet and invokes the method on the original source language application object. The return data of the method is returned as a response packet to the target language application . If an exception occurs during the invocation of the method on the original source language application object the exception data of the method is returned as a exception packet to the target language application .

In one embodiment a system for integrating an original application with a remote application comprises a first module adapted to generate adapter classes related to an original application a second module adapted to generate proxy classes related to a remote application wherein the first module and the second module are operably coupled the second module adapted to generate data types related to the remote application and the second module adapted to convert data communication between the proxy classes and the adapter classes wherein the adapter classes are adapted to provide access to functions of the original application wherein the second module is adapted to generate streamers related to the remote application wherein the streamers related to the remote application are adapted to convert data communicated by the proxy classes to the adapter classes and convert data communicated by the adapter classes to the proxy classes wherein the data is converted into a neutral data format and wherein the streamers are adapted to receive the data in the neutral data format and convert the data to corresponding data types.

The communication comprises sending input parameters related to the original application to the adapter classes receiving at least one of output parameters return values and exceptions related to the original application at the proxy classes receiving at least one of input parameters related to the original application at the adapter classes and sending at least one of output parameters return values and exceptions related to the original application to the proxy classes.

Although an exemplary embodiment of the system and method of the present invention has been illustrated in the accompanied drawings and described in the foregoing detailed description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims. For example the functionality performed by the input file the application the source application side and the target application side can be performed by one or more of the input file the application the source application side and the target application side in a distributed architecture and on or via any electronic device. Further such functionality may be performed by depicted and or un depicted contents of the input file the application the source application side and the target application side .

