---

title: System and method for monitoring interactions between application programs and data stores
abstract: Monitoring interactions between application programs and data stores for analyzing stability of application programs. A method of the invention intercepts interactions from a plurality of application programs to a data store. The method also identifies pre-execution data relating to each of the intercepted interactions and the intercepted interaction is executed. The method identifies post-execution data relating to each of the executed interactions. The identified pre-execution data and the identified post-execution data from each of the interactions are normalized to create normalized interaction data for each of the interactions. The method combines the normalized interaction data for each of the interactions as a function of the application programs associated with each of the interactions. The method further stores the combined interaction data for analysis of the interactions between the application programs and the data store which is indicative of the stability of the application programs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07665098&OS=07665098&RS=07665098
owner: Microsoft Corporation
number: 07665098
owner_city: Redmond
owner_country: US
publication_date: 20050429
---
Embodiments of the present invention generally relate to the field of monitoring interactions between applications. In particular embodiments of this invention relate to monitoring the transient and persistent state of data stored in a file system registry configuration store or other memory accessed via application programming interface API calls between applications or processes and the stored data.

In a typical computing system or device one or more application programs software or other computer executable instructions are installed in addition to an operating system to enhance a user s experience with the computing system or device. For example a user may install a word processing application program to prepare a report and may print the report to a printer connected to the computing system. Another user may install a media processing and managing application software to manage her pictures stored in a digital camera.

The application programs interact with the operating system and or stored data via a set of routines used by the application program. These routines also known as an application programming interface API direct the performance of some procedures by the operating system. In the word processing application program above when the user runs the word processing application program the word processor may initiate a number of API calls to the operating system and its associated components such that the word processor may display a date on the report or may save the location of the report in the computing system in a Most Used Files folder directory. Such API calls may involve reading writing creating or removing one or more files relating to the operating system or in the data store. In addition some API calls may modify entries in a configuration database associated with the operating system.

While the interactions between application programs and the operating system are designed to enhance the user s experience and perform desired functions unintended consequences of the interactions may cause application programs or the operating system to operate correctly. For example a first application program may wish relocate a file from folder B to folder A while a second application program may wish to access the same file in folder B. When the second application program could not find the file in folder B the second application program may become unstable and hang or cease to continue to operate because the file is missing from folder B. This may further result in failure of the operating system.

Some current systems monitor interactions or memory accesses such as API calls between a signal application program and the operating system to prevent crashes or other unexpected consequences. These systems intercept the interactions and identify data relating to the interactions for a particular application program and computing system environment. However the recorded data from such monitoring systems is limited to the particular application program and computing system environment that is monitored. The data recorded by existing systems is inefficient for making comparison with other systems. For example suppose interactions between an application A are monitored in a computing system X and the same application A is also monitored in a computing system Y. Both computing systems X and Y execute the same application A but the computing system X may have a different software and hardware configuration from that of the computing system Y. As such the locations of the files or data that interact with the application A may be different in the computing system X and the computing system Y. The existing monitoring system would record system specific data e.g. file path process ID or the like relating to the interactions between the application A and files or data in the computing system X. Such system specific information is not useful when comparing with recorded data from the interaction with the computing system Y because the system specific information of the computing system X differs from the computing system Y.

Accordingly a system and method for monitoring interactions between a plurality of application programs and stored data and combining the monitored interactions for analysis are desirable to address one or more of these and other disadvantages.

Embodiments of the present invention overcome the shortcomings of the existing systems by creating normalized interaction data from data relating to interactions between application programs and stored data or files. For example embodiments of the present invention remove machine specific information system specific information and or user specific information from the data relating to the interactions. The normalized interaction data is combined as a function of the one or more application programs associated with the interaction. Further embodiments of the present invention store the combined interaction data for analysis. Interactions between the application programs and the operating system and or other stored data are indicative of the stability of the application programs. The combined normalized interaction data provides efficient and beneficial comparison of interaction data across different users machines and computing system environments.

According to one aspect of the invention a computerized method monitors the interactions of application programs with stored data. The computerized method intercepts application programming interface API calls from a plurality of application programs to a data store. The pre execution data relating to each of the intercepted API calls is identified. The computerized method executes the intercepted API calls. The computerized method also identifies post execution data relating to each of the executed API calls. The identified pre execution data and the identified post execution data from each of the API calls are normalized to create normalized interaction data for each of the API calls. The normalized interaction data for each of the API calls is combined as a function of the application programs associated with each of the API calls. The computerized method stores the combined interaction data for analysis of the interactions between the application programs and the data store.

According to another aspect of the invention a system monitors process interaction with a memory area storing files and configuration data. The system includes a memory area storing a plurality of application programs file data configuration data and aggregated interaction data. The system includes a means for intercepting an application programming interface API call from one of application programs to the file data or configuration data stored in the memory area. The system also includes a means for determining interaction data related to the intercepted API call and a means for normalizing the determined interaction data to create normalized interaction data. The system further includes a means for adding the normalized interaction data to the aggregated interaction data as a function of an application identifier associated with the one of the application programs. The aggregated interaction data is indicative of the stability of the plurality of application programs.

In accordance with a further aspect of the invention one or more computer readable media have computer executable components that monitor the memory accesses of application programs with stored data for analysis. A tracer component intercepts memory accesses from a plurality of application programs to a memory area storing files and configuration data. A logger component identifies data relating to each of the memory accesses intercepted by the tracer component. A normalizer component normalizes the data identified by the logger component to create normalized interaction data for each of the intercepted memory accesses. An aggregator component merges as a function of the application programs initiating the intercepted memory accesses associated with each of the memory accesses the normalized interaction data created by the normalizing component for analysis of the interaction between the application programs and the memory area.

Referring first to a diagram illustrates a system for monitoring interactions of application programs with a data store according to one embodiment of the invention. For example the system includes a computing device not shown such as the computer in a computer server a collection of computing devices linked by a common communication network such as an internet an intranet or the like or other computing system that is capable of executing application programs storing data in the data store and permitting interactions between the application programs and the data store .

The plurality of application programs includes application software a set of computer executable instructions programming codes programming routines or the like. For example the application programs may include a word processor program a digital media such as audio or video player program a finance organizing program such as tax preparation or the like. The data store includes data such as files configuration data or a collection of data stored in storage areas such as a volatile memory a non volatile memory or a combination thereof. In one embodiment the data store is part of a memory area which stores the application programs file data registry entries registry keys registry values and or aggregated interaction data to be discussed below . In one embodiment the stored data includes files configuration database entries and monitored data. By reviewing interactions between the application programs and the files or configuration database entries in the data store a user may know the state of the file or configuration database or registry key value both before and after the interaction and the user may examine the nature or the effect of the interaction.

As shown in the application programs uses system API calls to interact with the stored data . For example the application program interacts with the data store by reading a file stored in the data store such as the read only memory or random access memory of . In another example the application program accesses a memory area to modify another file stored in the data store . In another example the application program interacts with files or a configuration database of an operating system such as the operating system as described in stored in the data store . From such interactions or memory accesses application programs may change alter or modify data in the data store . Therefore embodiments of the present invention advantageously monitor system APIs used for such interactions or memory accesses so as to better understand why the application programs fail or why certain pieces of data in the data store are missing or were modified.

The system includes one or more computer executable components for implementing aspects of the invention. In one embodiment the system includes a tracer component for intercepting interactions between the application programs and the data in the data store . The system also includes a logger component for identifying data relating to each of the interactions by the tracer component. A normalizer component normalizes the data identified by the logger component to create normalized interaction data for each of the intercepted interactions. After the normalizer component creates the normalized interaction data an aggregator component combines or merges the normalized interaction data for each of the interactions as a function of the application programs associated with each of the interactions. In one embodiment the tracer component intercepts the API calls initiated from the application programs to the data store . Instead of the direct interaction shown by a dashed arrow between the application programs and the data store the tracer component intercepts or redirects as shown by an arrow the interactions such as the API calls from the application programs to the data store for further processing. For example the tracer component monitors activities of the application programs and the data store . As soon as the tracer component determines that there is an interaction between the application programs and the data store the tracer component intercepts the interaction such as the API call for analysis. In one embodiment the system monitors the activities of the application programs and the data store and communicates with the tracer component by notifying the tracer component that there is an interaction between the application programs and the data store .

The application programs may not be aware that the tracer component has intercepted the interactions as the tracer component may be transparent to application programs and or data store . Aspects of the trace component are known in the art.

In one embodiment the system records a state of an execution environment of each of the application programs before intercepting the interactions. For example the system identifies the following information relating to the state of execution environment of the application programs 

The list above indicating the state of the execution environment of each of the application programs is for illustration only and is not exhaustive. Other information relating to the state of the execution environment of the application programs may be identified.

Still referring to the tracer component communicates with a logger component to identify and store pre execution data such as execution environment parameters e.g. the name of the application program the type of the application program . After the tracer component intercepts a particular interaction from the application programs to the data store the logger component identifies information relating to the particular interaction such as the file in the data store with which the application program interacts.

In the embodiment where the tracer component intercepts the API calls from the application programs and the data store the logger component identifies one or more of the following for each of the API calls an identifier for the API this data represents the thread on which the API was called the address of the caller of the API a bit indicating whether the function failed the value s of arguments passed in to the API and the value s of arguments returned to the caller and or data provided by the interaction.

In another embodiment the system includes a means for intercepting an API call such as the tracer component from one of the application programs to a file data or a configuration data stored in a memory area such as the data store . In addition the system also includes a means for determining interaction data related to the intercepted API calls. Hardware and software such as a data structure a user interface an application program an application software computer executable instructions or codes firmware and the like such as illustrated in the figures constitute means for normalizing the determined interaction data to create normalized interaction data and means for adding the normalized interaction data to the aggregated interaction data as a function of an application identifier associated with said one of the application programs wherein the aggregated interaction data is indicative of the stability of the plurality of application programs to be described below .

In one example the means for determining determines pre execution data of each API call having extensions which include one or more of the following data in the following categories 

The logger component identifies any of the exemplary pre execution data illustrated above before the system having a processor such as the processing unit in executes the API call between the application programs and the data store . After the execution of the API call the logger component identifies the post execution data relating to each of the executed API calls. In another embodiment the system or the logger component records a state of execution environment after the completion of the execution of the application programs .

Still referring to at the completion of identifying the post execution data a normalizer component normalizes the identified pre execution data and the identified post execution data to create normalized interaction data of each of the API calls or interactions. For example the normalizer component removes all or any machine specific information device specific information user specific information or other system specific information from the identified pre and post execution data. As an illustration if the pre execution data includes an application path at C Systems test.exe the normalizer component removes the specific path i.e. C Systems and replaces with a generic term such as SYSTEM FOLDER. By normalizing embodiments of the present invention advantageously overcome deficiencies of prior systems by organizing the pre and post execution data in a uniform format. Because embodiments of the invention normalize the interaction data the normalized interaction data is valuable for combining data from other systems to analyze the stability or behavior of the application programs.

As different systems have various ways of expressing a path to a file or configuration data entries the normalizer component rewrites those paths into a new and comparable path. In one example normalizer component normalizes the pre and post execution data relating to each of the interactions such as the API calls using the following three exemplary types of normalizing operations. Table 1 illustrates a generic normalization operation for normalizing data specifying a machine such as the system or a user.

Tables 2 3 illustrate normalization operations for normalizing data stored as files in the data store . For example files customarily are stored in the data store with a particular path identifying where the file is located. For example as illustrated earlier the file test.exe is stored at the following location C Systems . Other files may be stored at different locations. For example in an embodiment where the application programs is stored in one execution environment while the data store is in another execution environment the path may include the following format DOMAIN share . As such the normalizer component removes the machine or system specific information from the pre and post execution data and rewrites the normalized interaction data in a generic format.

Table 4 illustrates examples of normalized files according to the normalizing operations described above.

In a further example the normalizer component normalizes configuration database entries such as registry entries and or registry entry values. Table 5 illustrates an exemplary normalization operation for normalizing configuration database entries and table 6 shows examples of configuration database entries in the pre normalized format and the post normalized format. While Tables 5 and 6 are specific to an implementation of the invention having a registry the invention is operable with implementations of the invention having any configuration data base or other configuration data stores.

Other normalization operations may be employed by the normalizer component without departing from the scope of the invention.

As a further illustration shows an exemplary screenshot illustrating identified pre execution data and identified post execution data relating to an interaction of an exemplary application program and a file according to one embodiment of the invention. The screenshot includes sections and as an illustration of the execution of the API call or the interaction between an application program and a file in the data store . The screenshot also includes column headings and . The heading describes an action to be performed or executed in the interaction such as the API call . The heading describes a name of the executable data or file in which the API is located. The heading describes a name of the application program or file that calls the API or initiates the interaction. The heading describes a return address and the heading describes a return value. In the example shown in an application program glc133.tmp calls the API or initiates the interaction with Test.dll . The action to be performed in the section is CreateFileA with a return address i.e. memory address of 0x10013908 and a return value of 0x000000D4 .

As shown in the execution of the interaction includes three actions CreateFileA WriteFile and CloseHandle . The section describes the CreateFileA action. In particular at row the application program glc133.tmp wishes to create a new file GLHO005.TMP in a location of C Progs Prog Images . It also indicates that there was no such file GLH0005.TMP at that location according to the pre execution data identified by the logger component . In the next section the application program glc133.tmp writes to the newly created file GLH0005.TMP and in the section at row the application program glc133.tmp has completed its interaction such as the API call and the file GLH0005.TMP is stored in the data store at such location C Progs Prog Images .

By monitoring the interactions between the application programs and the data store embodiments of the present invention intercept the interactions and identify pre and post execution data relating to the interactions. In addition embodiments of the invention normalize the identified data by creating normalized interaction data as a function of the application programs associated with the interactions which is illustrated in .

In another embodiment application programs interact with configuration database entries such as registry entries. The invention is not limited to implementations having a registry. The invention is operable with any implementation storing configuration data. shows an exemplary screenshot illustrating identified pre execution data and identified post execution data relating to an interaction of an exemplary application program and a configuration database entry according to one embodiment of the invention. The screenshot illustrates that the value of the configuration database entry is modified. Similar to the screenshot in screenshot includes sections and as an illustration of the execution of the API call or other interaction between the application program and the configuration database entry. The screenshot also includes column headings and . The heading describes an action to be performed or executed in the interaction such as the API call . The heading describes a name of the configuration database entry in which the API is located. The heading describes a name of the application program or file that calls the API or initiates the interaction. The heading describes a return address and the heading describes a return value. In the example shown in an application program Test.dll calls the API or initiates the interaction with advapi.dll . The action to be performed in the section is RegCreateKeyExW with a return address i.e. memory address of 0x77468C1C and a return value of ERROR SUCCESS .

As shown in the execution of the interaction includes three actions RegCreateKeyExW i.e. create a registry key RegSetValueExW i.e. set a registry key value and RegCloseKey i.e. close registry key . The section describes the RegCreateKeyExW action. In particular at row the application program Test.dll wishes to create a registry entry of Configuration Data USER Software Versions Folders . However in row it indicates that such registry entry already exists. Consequently in section at row the value C Documents Templates is set for the registry entry identified above. As such at section the application program Test.dll closes the identified registry entry. The application program Test.dll modifies the registry entry in the interaction such as the API call .

Returning to after the normalizer component creates the normalized interaction data an aggregator component combines or merges the normalized interaction data for each of the interactions such as the API calls as a function of the application programs associated with each of the interactions. The aggregator component adds the normalized interaction data to an aggregated normalized data such that the aggregated interaction data includes all interactions from different systems without the machine user or system specific information for analysis. For example the combined or aggregated interaction data may be stored in the data store for analyzing the stability of the application programs . Because the application programs and the stored data may be installed and or stored in different execution environment machines systems computing devices or the like the combined or aggregated interaction data is useful in allowing a user to perform a query such as Which files or configuration database entries does application program P access The user may retrieve a portion of the combined interaction data and the result of such query from the combined interaction data is beneficial to programmers software engineers or the like to review and evaluate the stability of the application programs and or the files or the configuration database entries in the data store .

Referring now to a flow chart illustrates a method performed by the system for monitoring interactions between application programs and a data store. At a state of the pre execution environment of each of the application programs is recorded. At interactions from each of the application programs are intercepted and pre execution data relating to each of the intercepted interactions is identified at . At the interactions such as the API calls are executed and post execution data relating to each of the executed interactions is identified. The data relating to the state of the post execution environment is recorded at . The identified pre execution data and the identified post execution data from each of the interactions are normalized to create normalized interaction data for each of the interactions at . The normalized interaction data for each of the interactions such as the API calls is combined as a function of the application programs associated with the interactions such as the API calls at . At the combined interaction data is stored for analysis of the interaction between the application programs and the data store.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM 

140. A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer or one or more computer readable media having computer executable components execute computer executable instructions such as those illustrated in to implement the invention.

The order of execution or performance of the methods illustrated and described herein is not essential unless otherwise specified. That is elements of the methods may be performed in any order unless otherwise specified and that the methods may include more or less elements than those disclosed herein. For example it is contemplated that executing or performing a particular element before contemporaneously with or after another element is within the scope of the invention.

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

In view of the above it will be seen that the several objects of the invention are achieved and other advantageous results attained.

As various changes could be made in the above methods and systems without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

