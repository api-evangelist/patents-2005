---

title: Automatic orchestration of dynamic multiple party, multiple media communications
abstract: A communication orchestration service automatically orchestrates dynamic multiple party, multiple media communications. A customer expresses his or her communications needs in the form of a high-level goal or goals. A goal-based search finds a combination of building block predicates that can be used to satisfy the customer's needs. In conjunction with the search process, the mechanism uses the SIP OPTIONS request or presence information to actively query device status and capabilities during the search. This enables the search to actively explore the communications environment at runtime. Once a solution is found, the necessary parties can be contacted, resources can be provisioned, and the multiple media, multiple user collaboration/conference can be initiated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08041800&OS=08041800&RS=08041800
owner: International Business Machines Corporation
number: 08041800
owner_city: Armonk
owner_country: US
publication_date: 20051108
---
The present invention relates generally to Internet telephony and in particular to automatic orchestration of dynamic multiple party multiple media communications.

Telephone companies are investing in creating and deploying voice over Internet Protocol VoIP infrastructure. Session initiation protocol SIP has emerged as the open de facto standard for inter device signaling and provides a means for initiating and tearing down media sessions between two endpoints as well as negotiating the media types supported by the two endpoints. SIP also allows for mid call changes to the media sessions as well as the network location of the media packet sources and sinks.

Because of the expected jump in the number of SIP enabled the increased functionality offered by SIP devices as compared to traditional public switch telephone network PSTN lines and the blur in traditional communications media offered by technologies such as video conferencing speech to text text to speech etc. the VoIP landscape is rapidly growing in both size and complexity.

As opposed to carrying circuit services on top of the Internet protocol IP the IP Multimedia Subsystem IMS offers operators the opportunity to build an open IP based service infrastructure that will enable an easy deployment of new rich multimedia communication services mixing telecom and data services. Alcatel IMS solution is based on 3GPP specifications but is also able to provide common IMS services for mobile and other access networks including fixed ones. Before trying to emulate circuit switched domain IMS first provides new services that are not too demanding for the underlying access network.

While single media collaboration such as voice conferencing or group instant messaging IM chat can be done on the fly orchestrating multiple media collaboration among a dynamic set of participants remains largely unsolved other than by manual brute force methods. For example if a user wishes to have a voice conference with two or more other participants then a simple single media session may be initiated. However if the participants have different media capabilities then orchestrating the session requires the initiator to coordinate multiple legs for the session. For instance one participant may have voice capabilities while a second participant may have text only capabilities. The initiator must then set up text to voice and voice to text conversion for the text only device to participate in the session. All of these disparate services must be set up and coordinated in order for the session to take place.

The present invention recognizes the disadvantages of the prior art and provides a mechanism for automatic orchestration of dynamic multiple party multiple media communications in a communications network. A goal based search engine receives a goal for a communications session and performs a goal based search to identify a set of discrete operations to achieve the goal. A connection manager determines whether resources are available for the set of discrete operations. When all resources are available for the set of discrete operations the connection manager executes the set of discrete operations to initiate the communications session.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which aspects of the present invention may be implemented. Network data processing system is a network of computers in which embodiments of the present invention may be implemented. Network data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In accordance with exemplary aspects of the present invention clients may be devices participating in Internet telephony or more particularly SIP based telephony. An IP Multimedia Subsystem IMS may use SIP to establish IP connections between terminals. The IP connection can then be used to carry any IP traffic for example interactive game sessions or push to talk communication. In SIP based communication devices have different media capabilities. For example clients and may have voice capabilities while client may have text only capabilities. Other devices not shown may have video or application sharing capabilities for example.

SIP is a protocol for initiating and tearing down sessions between two endpoints. A SIP OPTIONS request allows one party s device to query another about its capabilities without alerting or ringing the second party. The OPTIONS request is handled as if one device hypothetically called another how would the second respond In addition to or in place of an OPTIONS request presence information may also be used to determine information about the devices. For example presence information may identify a terminal as being online with a given set of capabilities. The SIP REGISTER request allows a user to add or remove a device from the list of devices at which he or she can be reached.

Session description protocol SDP describes the media types supported by a device. SDP is used for negotiation of supported media types and network parameters for data exchange between two SIP enabled devices. SIP for instant messaging and presence leveraging extensions SIMPLE is a way to convey both presence on line vs. off line status and to send and receive instant messages to from SIMPLE enabled SIP devices. IMS as described above is an example of another mechanism for negotiation of supported media types and network parameters for data exchange.

In the above example client may register voice capabilities with the REGISTER request and client may query the capabilities of client using the OPTIONS request. Client and client may then use SIP to initiate and maintain a media session. This session may use a voice conferencing service for example. Such a service may be embodied on a server such as server for example. While the above example includes two participating devices voice conferencing will typically have three or more endpoints in a given session.

Various vendors provide SIP based servers and applications for performing single media dynamic conferencing. Simple examples are VoIP based telephone conferencing and multi user text chat sessions. A more complicated example may be video inclusive technology like shared desktop collaboration. Voice based technologies like interactive voice response IVR voice extensible markup language VXML text to speech and speech to text technology and related servers may also be provided for media collaboration or processing.

Java based SIP applications may be developed and deployed onto SIP application servers using a servlet model. SIP servlets are similar to hypertext transport protocol HTTP servlets but define different do Action style methods corresponding to messages in SIP. For example an OPTION request would be processed by a doOptions method. A SIP application may comprise one or more SIP servlets bundled with an appropriate deployment descriptor indicating the SIP servlets that should be invoked to handle specific SIP message types. More information about SIP servlet application programming interface API may be found in Java Specifications Request JSR .

While SIP based telephony is well established for endpoint to endpoint sessions a session among multiple participants with multiple media types is difficult to orchestrate. For example in the example mentioned above client may have voice and text capabilities client may have only voice capabilities and client may have only text capabilities. Thus several media types must be coordinated in order to establish a communication session among clients and .

In accordance with exemplary aspects of the present invention a communication orchestration mechanism reduces the complexity associated with orchestrating dynamic multiple user multiple media communications and collaborations. The mechanism maps small discrete SIP communications paradigms into a set of building block logic predicates. A customer expresses his or her communications needs in the form of a high level goal or goals. A goal based search finds a combination of building block predicates that can be used to satisfy the customer s needs. The search process takes into account the necessary conversions between media types by using available services. The communication orchestration mechanism may be embodied as a service running on server for example.

In conjunction with the search process the mechanism uses the SIP OPTIONS request to actively query device status and capabilities during the search. As stated above IMS may be used to establish IP connections between terminals and to query device status and capabilities. This enables the search to actively explore the communications environment at runtime. The entire search process may run on a hypothetical what if level. Once a solution has been found the necessary parties can be contacted resources can be provisioned and the multiple media multiple user collaboration conference can be initiated.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial government educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments of the present invention.

With reference now to a block diagram of a data processing system is shown in which aspects of the present invention may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable code or instructions implementing the processes for embodiments of the present invention may be located.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub MCH and south bridge and input output I O controller hub ICH . Processing unit main memory and graphics processor are connected to north bridge and memory controller hub . Graphics processor may be connected to north bridge and memory controller hub through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to south bridge and I O controller hub . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communications ports and PCI PCIe devices connect to south bridge and I O controller hub through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS .

Hard disk drive and CD ROM drive connect to south bridge and I O controller hub through bus . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to south bridge and I O controller hub .

An operating system runs on processing unit and coordinates and provides control of various components within data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

As a server data processing system may be for example an IBM eServer pSeries computer system running the Advanced Interactive Executive AIX operating system or LINUX operating system eServer pSeries and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while Linux is a trademark of Linus Torvalds in the United States other countries or both . Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processing unit . The processes for embodiments of the present invention are performed by processing unit using computer usable program code which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices and .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data.

A bus system may be comprised of one or more buses such as bus or bus as shown in . Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as modem or network adapter of . A memory may be for example main memory read only memory or a cache such as found in north bridge and memory controller hub in . The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

An example may be that a user Frank at client needs to talk to Bob at client and Jim at client . Bob is free right now but Jim is in a meeting or is in a call already and can only communicate via text based instant messaging. Frank and Bob are capable of participating in a voice call due to the capabilities of client and client .

Communication orchestration service makes SIP OPTIONS requests to client client and client and determines that Jim is unavailable by phone but is available by instant messaging. Based on the results of the OPTIONS request communication orchestration service determines that Frank and Bob can talk. Communication orchestration service searches for solutions to the submitted goal. Based on the results of the search communication orchestration service provisions voice conferencing service for voice communications and provisions speech to text service and text to speech service which are necessary to link Jim s instant messaging capabilities of client into Frank and Bob s voice call.

Subsequent dynamic changes to the conference such as network failure individuals entering or leaving the call an individual s media capabilities changing and the like cause communication orchestration service to restart searching for solutions to the goal. This time however instead of starting with a how do I accomplish this collaboration goal the dynamic change causes communication orchestration service to use a how do I convert this collaboration into my desired collaboration goal.

Call goals that cannot be immediately accomplished can be delayed until later via the OPTIONS request SIMPLE presence and SIP device REGISTER request listening. A goal such as I need to get both Bob and Jim on the phone at the same time may be impossible if Jim is only available by chat but can be reawakened if Jim REGISTERs a SIP enabled voice capable device. Similar events can be imagined as a user s on line or off line status changes or as a user hangs up a SIP enabled phone and is no longer busy. Goals may have an expiration. For example a goal of I need to talk to someone today would expire when the current day ends.

In one illustrative embodiment communication orchestration service may use a framework of session initiation protocol SIP application design development and execution. Communication orchestration service may partition SIP applications into modular components and a framework for assembling and managing execution of these components. The framework models SIP applications as state machines which receive an input markup language model that describes various states of the application and application execution flows that occur during state changes. In the context of the present invention a SIP application may be implemented using JSR specification which is a SIP servlet application programming interface API specification based on the model of the existing Servlet API available from Sun Microsystems Inc.

The framework not only manages execution flows of SIP applications but also stores and retrieves global application states on behalf of the SIP applications. The framework also determines which module components should receive flow control. This enables greater re use of application components and reduces application complexity.

The framework includes four major components that are specific to each application application data precondition handlers transition handlers and postcondition handlers. Application data comprises an object that holds global application state and data that is required throughout the lifetime of the application. Application data is also passed to various components to provide a common data container. When messages are received application data parses the body of the messages and stores the data in an internal format for use by subsequent components.

Precondition handlers examine the application data object to determine if specific preconditions are met. Preconditions represent the state of the application data prior to a state transition. By examining the preconditions the framework may determine the next state transition to be taken when processing an incoming message in a given state.

Transition handlers are modular or mini SIP applications that contain logic for handling one aspect of the SIP application. Transition handlers receive and process SIP messages and store information in their own instance variables. The scope of the transition handlers is defined by the application developers. Transition handlers may be chained together to construct a state transition for a SIP application. Flow controls between transition handlers may be handled by a framework controller. Loosely grained robust general transition handlers may facilitate transition handler reuse.

Post condition handlers examine the application data object to determine if specific post conditions are met. Post conditions represent the state of the application data after a state transition. By examining the post conditions the framework may determine if a state transition is successful.

The framework controller manages execution flows of the SIP application throughout its lifecycle. The framework controller takes an input markup language that describes information including the application data object flow of the application and a list of state transitions in the application. The input markup language model may be an extensible markup language XML deployment descriptor that is deployed for a particular SIP application.

An application data object includes data that is specific to the application. The flow of application includes various states of the application and futures states that are accessible by each state. Thus the flow of the application is in a state machine format. In the list of state transitions each state transition includes necessary precondition handlers necessary post condition handlers and a list of transition handlers to be executed for the state transition.

Turning now to a diagram illustrating interactions between SIP users within the same domain is depicted in accordance with a preferred embodiment of the present invention. As depicted in domain includes two users PC soft client and telephone . PC soft client may be implemented as a data processing system such as data processing system in .

Upon power up both PC soft client and telephone register their availability and their IP addresses with SIP proxy server in domain . When a user of PC soft client initiates a request to communicate with a user of telephone PC soft client notifies proxy server using the session initiation protocol. Proxy server in turn asks for and receives the IP address of telephone from registrar server .

Proxy server then relays the invitation to communicate from PC soft client including its media type to telephone . The user of telephone informs proxy server whether the invitation is accepted and if the user is ready to receive messages. If the invitation is accepted the acceptance is communicated by proxy server back to a user of PC soft client . Thus a SIP session is established. Hereafter subsequent messages may be sent directly between PC soft client and telephone without interference by proxy server .

Turning now to a diagram illustrating interactions between SIP users of different domains is depicted in accordance with a preferred embodiment of the present invention. As depicted in a user of PC soft client initiates a request to communicate with a user of personal digital assistant PDA . However instead of domain PDA belongs to a different domain domain .

In this case when proxy server receives the communication request from PC soft client proxy server recognizes that PDA is in domain and queries redirect server for the IP address of PDA . Redirect server may reside in either domain or domain . Redirect server then provides the IP address of PDA to proxy server . Upon receiving the IP address proxy server forwards the SIP session invitation via Internet to proxy server in domain which forwards the invitation to a user of PDA . In turn the user of PDA may accept the invitation and proxy server sends the acceptance back to the user of PC soft client .

Turning now to a diagram of component interactions for a framework of SIP application design development and execution is depicted in accordance with a exemplary aspects of the present invention. As depicted in framework includes framework controller application data precondition handlers post condition handlers and transition handlers .

When a SIP application is deployed to a user environment a deployment description such as XML deployment descriptor is also deployed to configure the SIP application for execution. XML deployment descriptor describes information about the SIP application including data specific to the application the flow of the application and a list of transitions in the application.

When a user sends request message via the SIP application to another user framework controller uses XML deployment descriptor as an input to framework . Framework controller then parses message and updates application data with message contents. Framework controller then retrieves a state of the application from application data and determines if the application is at the start of a state.

If the application is at a start of a state framework controller evaluates preconditions by examining application data to determine which state transition to take. If no precondition is defined framework controller proxies the message to the next transition handler for the state transition. If preconditions are defined framework controller loads the next set of precondition handlers to determine if specific preconditions are met.

After each precondition handler determines that preconditions are met framework controller invokes methods of each transition handler according to XML deployment descriptor and passes in message and application data object as input arguments. Each transition handler then updates the result of the state of the application which includes evaluating post conditions using post condition handlers . Thus using framework a user may keep track of all states on behalf of the SIP application.

Additionally each of the transitions pre and post conditions use the SIP OPTIONS command or presence information to determine in real time if a pre or post condition were to be invoked whether it would succeed. As an example the precondition for calling a user would require that a SIP OPTIONS request to the user s phone respond with 200 OK indicating that the user is currently able to answer a call.

In the event that a precondition fails the transition s pre and post conditions may provide listeners which monitor the user s device and indicate when the conditions succeed. Continuing the above example if calling a user precondition fails because the user is busy the precondition could provide a listener within listeners which would fire when the user s device is available.

A parallel library of discrete goal based search predicates is built to form predicates library . These predicates have a one to one mapping with transitions library and do not need to address the above mentioned optional SIP OPTIONS or listener functionality. For instance a predicate may correspond to calling a user and allocating resources for a voice conference etc.

Increasing the number of transition handlers in transitions library results in greater coverage of the SIP related signaling that may be done in the communications system. Increased coverage by transitions library provides support for a greater number of predicates in predicates library which allows for more expressive and more flexible goals.

In addition predicates that represent higher level meta tasks and goals are defined. One example is that contacting someone could be satisfied by a voice connection a text chat connection a combination of the two or perhaps some other connection or combination. As another example if user A has a voice only device and user B has a text only device then user A contacting user B requires that a two way text to speech and speech to text gateway must be provisioned and that user A and user B must each send his or her data through the gateway. At the highest level would be general predicates suitable for discussing goals like I need to get both Frank and Bob on the phone at the same time. 

A user provides predicate based goal to goal based search engine in communication orchestration service . Goal based search engine uses a declarative relational programming language. A declarative language is used to describe problems using facts and rules. Facts state properties that are true of the system. Rules provide ways of deducing new facts from existing facts. Because it gives information about a system a declarative program is often called a knowledge base. Therefore one does not run a program instead one queries the knowledge base. Prolog is a standardized declarative programming language that may be used by goal based search engine .

In the depicted example predicate based goal states a problem and goal based search engine provides predicates from predicates library that solve the problem. Goal based search engine attempts to combine the predicates from predicates library such that they satisfy goal . An intermediate end result is a set of feasible predicates that achieve goal . These predicates are supplied to mapping component .

Mapping component maps the predicates into the corresponding sequence of transitions from transitions library . Since the transitions have pre and post conditions which operate via the SIP OPTIONS request it is possible to determine if the possible solutions will succeed if executed. Connection manager receives the sequence of transitions and issues the SIP OPTIONS requests to determine if a given solution would be successful. If a given solution succeeds connection manager runs the transitions to connect the appropriate parties into the dynamic multiple media multiple user collaboration communications scenario.

The SIP OPTIONS requests and the precondition handlers may indicate that connection manager cannot satisfy the transitions given the current SIP telephony network and available devices. If the given solution is not successful goal based search engine may provide more potential solutions as sets of predicates.

In the event that the search terminates and none of the possible solutions can succeed connection manager may examine available precondition listeners for each possible solution. The critical sequence of precondition listeners that must fire before one of the unsuccessful solutions can become viable may be determined for each possible solution. Listeners wait to be triggered by the appropriate SIP telephone events such as a user becoming available a user registering a phone a media server having a free connection etc. After the first complete critical sequence of preconditions occurs connection manager checks the preconditions via SIP OPTIONS and executes the solution.

Accordingly blocks of the flowchart illustrations support combinations of means for performing the specified functions combinations of steps for performing the specified functions and computer usable program code for performing the specified functions. It will also be understood that each block of the flowchart illustrations and combinations of blocks in the flowchart illustrations can be implemented by special purpose hardware based computer systems which perform the specified functions or steps or by combinations of special purpose hardware and computer instructions.

With particular reference to operation of automatic orchestration of dynamic multiple party multiple media communications is shown. Operation begins and the communication orchestration service receives a goal oriented request block . The communication orchestration service identifies involved users block and identifies potential resources block . Identification of a user may comprise identifying a SIP address of record for the user. Identifying potential resources may comprise looking up SIP registered devices for each user determining capabilities of those devices via the OPTIONS request and determining available conferencing resources. The communication orchestration service may also determine available media conversion resources.

Thereafter the communication orchestration service searches for feasible solutions block and saves the feasible solutions block . The communication orchestration service searches for feasible solutions using the goal oriented request the users and the potential devices within a predicate based search system. The result of the search may comprise a set of predicates that represents ways to connect the above in a way that allows all involved users to communicate. The search does not take into account currently availability of any devices or services. Rather the search finds given ready access to all elements what SIP topology would solve the problem. The feasible solutions may be saved in a queue with ordering based on complexity or cost for example.

For each feasible solution block the communication orchestration service determines whether all resources are available currently block . Using the SIP OPTIONS request possibly combined with load querying hooks into the conferencing system for example the communication orchestration service determines the current state of the devices. This may include for example which users are signed on which devices are busy whether using a conferencing bridge at the current hour of the day is within a cost policy and so forth.

If all resources are not available currently the communication orchestration service identifies the resource s that are unavailable but necessary in other words what resource states prevent the solution from being immediately successful block . The communication orchestration service then camps on the needed resource s block . Using SIP SIMPLE s SUBSCRIBE NOTIFY system the communication orchestration service may SUBSCRIBE to the status of the resources for instance. When the resource status changes a SIP presence server will NOTIFY the communication orchestration service asynchronously. This subscription may apply only to a particular solution.

Returning to block if all resources are currently available the communication orchestration service connects users via the resources block . In one illustrative embodiment particular SIP endpoints may be connected by back to back user agents B2BUAs . B2BUAs allow the system to set up tear down call legs as needed. B2BUAs also allow the system to monitor call status and to perform traditional conference moderator functions such as expelling someone from a call giving control of a whiteboard to a particular user and the like.

Thereafter the communication orchestration service camps on changes in the connected session block . The communication orchestration service monitors the session in progress and may take action on events within the session. The communication orchestration service determines whether changes occur in the connected session block . If there is no change operation returns to block to camp on changes in the connected session. Two changes are shown here but others may be useful and will be readily apparent. As a particular example all users may REGISTER video conferencing capabilities or shared whiteboard functionality.

In the depicted example if resources become available in block operation proceeds to block to identify resource s that are unavailable but necessary as described above. For instance perhaps a conference bridge goes down part of the network becomes unavailable or a participant s computer freezes. The communication orchestration service returns to the queue of feasible solutions and either waits for resources to become available or tries to select a new solution that accomplishes the same goal with different resources.

If the session is terminated by the user in block the communication orchestration service tears down the session block and operation ends. The communication orchestration service tears down all session legs and frees the services and conversion resources in use.

Returning to block when the communication orchestration service camps on needed resource s the communication orchestration service determines whether previously unavailable resource s are now available block . On receipt of a NOTIFY event for example the particular solution may be reawakened and re checked for immediate availability. This notification is especially useful if no feasible solution can be executed currently. A user may wish to have a multiple party call started as soon as it is possible to include all participants for example. If previously unavailable resource s are now available operation returns to block to determine whether all resources are now available.

If previously unavailable resource s are not available in block the communication orchestration service determines if the current solution failed block . If the communication orchestration service determines that the current solution has not failed in block operation returns to block to camp on need resource s .

If the current solution failed in block the communication orchestration service returns to the queue of feasible solutions and considers the next feasible solution block . Thereafter operation returns to block for the next feasible solution. If however all feasible solutions have been exhausted and there are no solutions to consider in block operation proceeds to block to tear down the session and then operation ends.

Failure of a solution shall not be limited to a solution being impossible. The communication orchestration service may camp on needed resources for a predetermined period of time for example. The communication orchestration service may determine that a solution has failed in block and proceed to block to consider the next feasible solution in parallel with camping on need resources block for the current solution. In this manner the communication orchestration service may try a plurality of solutions in parallel until a solution succeeds.

Thus the exemplary aspects of the present invention solve the disadvantages of the prior art by providing a communication orchestration service that automatically orchestrates dynamic multiple party multiple media communications. A customer expresses his or her communications needs in the form of a high level goal or goals. A goal based search finds a combination of building block predicates that can be used to satisfy the customer s needs. In conjunction with the search process the mechanism uses the SIP OPTIONS request to actively query device status and capabilities during the search. This enables the search to actively explore the communications environment at runtime. Once a solution is found the necessary parties can be contacted resources can be provisioned and the multiple media multiple user collaboration conference can be initiated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store or communicate the program for use by or in connection with the instruction execution system apparatus or device.

Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

