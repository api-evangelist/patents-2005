---

title: System and method for managing resource loading in a multilingual user interface operating system
abstract: A system and method is provided to manage different UI language settings in a central place by merging different UI language settings and related dependency data to an integrated UI language preference list. A set of API functions is provided that enables each resource loader to gain consistent UI language support by interacting with the integrated UI language preference list.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07669124&OS=07669124&RS=07669124
owner: Microsoft Corporation
number: 07669124
owner_city: Redmond
owner_country: US
publication_date: 20050422
---
This invention is related to computer software and more particularly to managing resource loading in a multilingual user interface operating system.

Distributing software in a global marketplace requires a user interface that is accessible to a variety of users. Generally an interface is the point at which a connection is made between two elements so that they can work with each other or exchange information. For computer software purposes an interface is typically software that enables a program to work with the user with another program including an operating system or with the computer s hardware. An interface that enables a program to work with a user is called a user interface which can be a command line interface a graphical user interface or a menu driven interface.

To facilitate the use of a common user interface UI in different countries regions the UI should support multiple languages. A software program usually comprises functional code and localizable UI elements or resources. To provide multiple language UIs for a software program traditionally a software provider localizes the entire software program and then generates binaries with code and resources for each of the supported languages. The traditional approach is generally inefficient however in that the software provider must maintain separate software code bases for each of the supported languages. Accordingly the software provider must independently support each separate software code base such as providing technical support providing updates and or providing patches.

Another approach to expand the languages supported by a UI utilizes a common software code base in conjunction with various language specific resource libraries. One such system is Microsoft Corporation s multilingual user interface MUI . Generally described a MUI based operating system MUI system includes a common code module and a default resource module that serves as a default language for the UI. Additionally the MUI system maintains a number of alternative language specific resource modules for displaying some or all the UI objects in an alternative language. Accordingly if a user or an application specifies one of the alternative languages supported by the MUI system the MUI system loads the resources from the corresponding alternative language resource module. For example if a user selects Spanish as a desired UI language the operating system OS loads the system resources from a Spanish specific resource module.

Generally described a UI resource is an item of data such as a dialog box or a font in a Windows environment that can be displayed on a computer screen. Many UI features in a software program can be altered by adding or replacing UI resources without modifying the program s source code. Resource data usually consists of the data structures templates definition procedures management routines icon maps and so forth associated with a particular UI resource such as a menu window or dialog box. An OS often maintains a number of UI resource modules each of which consisting of UI resources that are used by the OS to realize a specific UI feature.

MUI systems may include various resource loaders. A resource loader obtains and loads resources from the desired language specific resource module. A resource loader selects between loading resources from a default resource module typically encoded in English or from a designated language specific alternate resource module. Typically if a desired alternate resource module is unavailable a resource loader selects the default resource module.

In a MUI system in order to load the right language file from a list of available ones each resource loader needs to know what to look for based on a set of rules. These rules are called resource probing rules which regulate the decision making process for loading a particular resource. The resource probing rules thus dictate what is displayed to a user of an application or OS. Different limitations such as imposed by the OS a software application and or a user of the OS or the software application define resource probing rules for a resource loader.

The second category is System UI Package Offering . Depending on what is offered and installed on a particular system the resource presence for a particular language and for a particular component can be very different. In particular when a dependent language is used to substitute a partially localized language the UI languages offered and installed by a system UI package can affect the dependent language available for the partially localized language.

The third category is User UI Language Preference . A user of a MUI system can select a particular language as the user s preferred UI language. Often a user may understand a set of languages instead of just one and would prefer the system to direct the UI display based on the user s known language list and or preference. Such a preference may be particularly important to a user if a software program is only partially localized in the user s primary language. For example a Hong Kong user may prefer to read English instead of simplified Chinese when a software program does not have the user s preferred traditional Chinese UI.

The fourth category is Application Localization Dependency or User Preference . Similar to the first category the System Localization Coverage and Dependency an application s resource coverage can be different among languages. For example the application can be partially localized in some languages to save localization cost. An application may have different UI language coverage from the system in which the application runs. A user can select to use a particular UI language for the application.

The fifth category of factors that dictate what is displayed to a user is Cultural and Language Relationships . A natural relationship usually exists among languages particularly among languages that share the same root. These languages may be different only in accents or are minor progressive adoptions of the exact same language i.e. the root language. The root language is sometimes referred to as the neutral language and the others are referred to as a language specific. For example English is the neutral original language while American English British English and Australian English are the exemplary languages specifics for the root language English. From a UI localization perspective if resources for a particular language specific are not found a natural substitute will be the corresponding resources of the neutral language i.e. the root language of the language specific.

The sixth category of factors that dictate what is displayed to a user in a MUI system is Design Time Knowledge . When everything fails a resource loader may load the original UI language that a program designer uses during software creation time. The resource loader trusts that the program designer provides the original UI language accurately. When a resource for a particular language does not exist for example either because the resource is not installed or localized to the particular language the resource loader can always try the original UI language designated by the program designer at the software creation time.

Therefore each category of factors dictates the use of a specific list of languages. For example an application s UI language availability and user selection dictates a UI language preference list for the application. A user s UI language preference decides the languages in which a resource loader can select to load the resources in. Thus any factor in these exemplary categories can affect the availability of a particular resource or the appropriateness of using a particular resource. The variety and complexity of factors thus affect the set of resource probing rules i.e. the process that a resource loader decides what resources to load. If every single resource loader in a MUI system implements its own resource probing rule different resource probing rules may be used in a MUI system and cause random and mixed language UI items being displayed to a user.

Therefore there exists a need to centralize resource probing rules applicable to a MUI system and enable the system applications in the system and users of the application and system to communicate with centralized resource probing rules via a standard interface.

The invention addresses the above identified need by providing a system and method that merges different UI language settings into an integrated UI language preference list the List . The List captures different UI language settings and dependency data and thus provides a systematic way to manage different UI language settings. The invention further provides a set of API functions that allows resource loaders and applications to query or modify different resource lookup behaviors by reading and configuring the List.

In accordance with one aspect of the invention a computer system containing a plurality of UI language settings is provided. The plurality of UI language settings may include an application UI language preference list APL a user UI language preference list UPL and an ultimate fallback UI language original UI language etc.

One aspect of the invention merges the plurality of UI language settings into the List. For example the invention merges the APL to the List merges the UPL to the List and adds the original UI language to the List.

When merging the APL to the List the invention adds a language in the APL to the List only if the language is not already in the List. The invention also adds a neutral language of the added language to the List if the added language is a language specific.

When merging the UPL to the List the invention adds a language in the UPL to the List only if the language is not already in the List. The invention merges a parent language of the added language to the List if the language is a LIP language and a base language of the added language to the List if the language is a partially localized language.

When merging a parent language of the added language to the List the invention adds a valid parent language of the added language to the List after the added language only if no parent language of the added language is already in the List. The invention also merges a base language of the valid parent language to the List if the valid parent language is a partially localized language. The invention removes the added language from the List if no valid parent language can be found for the added language. A valid parent language is a language that is supported by the OS and is an installed language of the computer system.

When merging a base language of the added language to the List the invention adds a valid base language of the added language to the List after the added language if no base language of the added language is in the List. The invention adds a base language of the valid base language if the valid base language is a partially localized language. The invention removes the added language from the List if no valid base language is found for the added language. A valid base language is a language that is supported by the system.

Another aspect of the invention provides an application programming interface. The application programming interface includes services related to configuring UI language settings integrated in the List. For example the application programming interface may provide a group of functions related to setting and retrieving user UI language preferences in the List. The application program interface may also include a group of functions related to setting and retrieving application UI language preferences in the List.

In summary the invention provides a system and method that collects and merges various UI language settings and related dependency data into an integrated UI language preference list. The invention thus introduces a centralized approach to satisfy different UI language usage scenarios. The invention also provides a set of API functions that enables each resource loader to gain consistent UI language support while avoiding maintaining complex resource probing logic internally.

Embodiments of the invention provide a system and method that merge different UI language related settings and dependency data into one integrated UI language preference list. The integrated UI language preference list the List provides a systematic approach to manage system wide resource loading logic. The invention also provides a set of API functions that allow resource loaders and applications to query or modify system resource look up behaviors through the List.

The following text first describes exemplary UI language preference settings defined by exemplary categories of factors illustrated in and detailed in the Background of Invention section of this document. Then a computer implemented method is described. The computer implemented method merges the exemplary UI language preference settings into the List so to provide a centralized and systematic approach for managing resource loading in a MUI system. Finally an exemplary API is described that enables resource loaders in a MUI system to query and modify the List so to define resource look up behaviors. The illustrative examples provided herein are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Similarly any steps described herein may be interchangeable with other steps or combinations of steps in order to achieve the same result.

Each of the exemplary categories of factors illustrated in results in a UI language setting or preference list. A UI language preference list is also called resource search priority which controls the order in which a resource loader uses to decide which language resource to load when a specified language resource is not available. illustrates UI language preference lists dictated by the exemplary categories of factors illustrated in .

For example the localization dependency list includes UI languages dictated by the first category of factors System UI Localization Coverage and Dependency . Conventionally if localization work is scheduled for a language all resources for the language are localized. However because of the high cost of translation and testing localizing all resources in an OS to a particular language sometimes is not justified for the return of investment. Additionally most users do not use all features provided by an OS or application. Therefore depending on market needs and user behaviors a scalable localization scheme may be adopted for a MUI system this means that certain resources will not be localized in certain languages if there is no business justification or real user needs. Therefore in a MUI system a language may be localized at one of two levels full localization and partial localization. For a language that receives the full localization treatment all the UI resources for the whole system are translated to the language no other language is necessary for resource fallback an end user will be able to get any UI item in the system in the language. On the other hand for a language receiving the partial localization treatment only some of the UI resources are translated into the language. A language receiving the partial localization treatment can be partially localized as an add on LIP language or with no resource duplication partially localized language .

For a partially localized language part of the UI resources are localized to the language while the resources not covered by the language will be covered by another language called the base language. If the base language itself is partially localized another base language can be used to cover the rest of the resources. For example a software vendor may want to release an OS partially localized in Romansch one of the languages spoken in Switzerland. Because the program is only partially localized in Romansch languages such as German Italian and French the other official languages spoken in Switzerland can be added as the base languages for Romansch. As a result in the OS with the Romansch as a partially localized language the resources not localized in Romansch can be viewed in one of the three base languages.

As those of ordinary skill in the art will appreciate a LIP is also called the language interface pack which are add ons installed on top of a running system. A LIP does not contain the full set of resources of the running system. The LIP needs to be installed on top of another language known as the parent language of the LIP language. A setup program for a LIP verifies that a parent language of the LIP language is installed on the running system before installing the LIP. If the LIP language has multiple designated parent languages then at least one parent language needs to be installed on the running system. The author of a LIP decides which language is a parent language and how many parent languages a particular LIP language has. The resources that a LIP does not include will be displayed in one of the parent languages. In exemplary embodiments of the invention a LIP language can have three different kinds of parent languages a single parent language multiple parent languages and default. Default means that no parent languages are defined for the LIP language thus any language on the running system can be used as a parent language for the LIP language.

The second category System Package Offering dictates a system package offering list which identifies at least the installation language of a system. An install language is specified for backwards compatibility needs and is defined as the first UI language installed on a system. The system package offering list may also identify any other languages installed in the system as well as any dependent languages of the installed languages if the installed languages are only partially localized.

The third category User UI Language Preference dictates a user UI language preference list UPL . Different users can speak different languages and would prefer different language fallback orders if a translation for the user s primary speaking language is not available. In an exemplary embodiment of the invention a user is able to specify a UPL that addresses the user s preference in UI language fallback orders. The first language in the UPL will be used to load for all UI resources. Other languages in the list will be used to search for resources if the first search using the first UI language in the list fails. In addition if an application has not set the application UI languages specifically the UPL will be used to look for application UI language resources. In an exemplary embodiment of the invention the UPL contains only one language which is the first installed UI language in the system. In another exemplary embodiment of the invention if none of the UI languages specified in the UPL is an installed language the UPL is treated as an empty list and a machine UI language in a machine UI language list is used. A machine UI language list determines a machine s UI language preference list. During the installation of the machine a setup program will add the first installed UI language to the machine UI language preference list. After setting up the machine an administrator can also change the machine UI language preference list.

The fourth category Application Localization Coverage or User Setting dictates an application UI language preference list APL . An APL may be implemented as a per thread setting so different applications may have different UI language coverage on the same system. In an exemplary embodiment of the invention an application creates and owns its APL. When creating an APL the application also includes a UI language s base language or parent language if the UI language is a partially localized language or a LIP language. If an APL includes more UI languages than what is available in the system or if the application wants to support a different set of UI languages other than the ones stored on the system a user may specify the preferred UI languages for the application. In an exemplary embodiment of the invention a user may specify a set of UI languages that is applicable to an individual application or to all applications in the MUI system.

The sixth category Design Time Knowledge dictates an application ultimate fallback which specifies what language resources a resource loader can count on when all the other language searches fail. The application ultimate fallback is designated for any resource files of the system.

Specifically is a flow diagram illustrating an exemplary process for building an integrated UI language preference list such as the integrated UI preference list illustrated in the List . The process first creates the List. See block . The process then executes a routine that merges an APL into the List. See block . is a flow diagram illustrating an exemplary routine and will be discussed in detail later. After executing the routine the process executes a routine that merges a UPL into the List. See block . is a flow diagram illustrating an exemplary routine and will be discussed in detail later. After executing the routine the process adds to the List the application ultimate fallback i.e. the original UI language for the application designated at the time when the application is developed. See block . The process then terminates and the List has been built that integrates different UI language preference lists in a MUI system.

As noted above is a flow diagram illustrating an exemplary routine that merges an APL into the List. The routine first queries the APL. See block . The routine then uses the query result to determine whether an APL exists. See decision block . If the answer is NO the routine returns. If an APL is available the routine proceeds to process each language in the APL starting with the first language in the APL. See block . The routine first determines whether the language in the APL is already in the List. See decision block . If the answer to decision block is YES meaning that the language in the APL is already in the List the routine proceeds to decision block to determine whether there is another language in the APL. See decision block . If the answer to decision block is YES the routine loops back to block to process the next language in the APL. If the answer to decision block is NO meaning there is no more language in the APL the routine returns.

If the answer to decision block is NO meaning that the language in the APL is not in the List the routine proceeds to add the language to the List. See block . The routine then determines whether the added language is a language specific. See decision block . If the answer to decision block is NO meaning that the language is not a language specific the routine proceeds to decision block to determine whether there is another language in the APL to be processed. If the answer to decision block is YES meaning that the language is language specific the routine proceeds to determine whether the neutral language i.e. the root language of the language is already in the List. See decision block . If the answer to decision block is YES the routine proceeds to decision block to determine whether there is another language in the API to be processed. If the answer to decision block is NO meaning that the neutral language of the language is not in the List the routine proceeds to add the neutral language of the language to the List. See block . The routine then proceeds to decision block to determine whether there is another language in the APL to be processed. If the answer to decision block is NO the routine returns.

As noted above is a flow diagram illustrating an exemplary routine that merges a UPL into the List. The routine first queries the UPL. See block . The routine then uses the query result to determine whether a UPL is available. See decision block . If the answer is NO the routine returns. If a UPL is available the routine proceeds to process each language in the UPL starting with processing the first language in the UPL. See block . The routine first determines whether the language in the UPL is already in the List. See decision block . If the UI language is already in the List the routine proceeds to decision block to determine whether there is another language in the UPL to be processed. See decision block . If the answer to decision block is YES the routine loops back to block to process another language in the UPL. If there is no more language in the UPL to be processed the routine returns.

If the answer to decision block is NO meaning that the language is not in the List the routine adds the language to the List. See block . In the case that the added language is a LIP language the routine executes a routine to merge a valid parent language of the added language into the List. See block . is a flow diagram illustrating an exemplary routine and will be described in detail later. If the added language is a partially localized language the routine executes a routine to merge a valid base language of the added language into the List. is a flow diagram illustrating an exemplary routine and will be described in detail later. The routine then proceeds to the decision block to determine if there is another language in the UPL to be processed. If no more language in the UPL needs to be processed the routine returns.

As noted above is a flow diagram illustrating an exemplary routine for adding to the List a valid parent language for a LIP language in the UPL. In embodiments of the invention the List should contain one parent language for a LIP language. A user may specify a parent language for a LIP language. In the case that a user does not specify a parent language a default parent language will be considered.

Specifically the routine first determines whether a parent language of the LIP language has already existed in the List. See decision block . If the answer is YES the routine does not need to add any other parent language of the LIP to the List. The routine returns.

If the answer to decision block is NO meaning that the List contains no parent language of the LIP language the routine proceeds to determine whether the LIP language is of default type i.e. accepting any UI language in the system to be a parent language. See decision block . If the answer to decision block is YES the routine returns. If the answer to decision block is NO meaning that the routine has yet to enter a valid parent language for the LIP language. The routine proceeds to determine if the user selected or default parent language is a supported language and installed in the system. The routine first determines whether the parent language is a language supported by the OS. See decision block . If the answer to the decision block is YES the routine further determines whether the parent language is an installed system language. See decision block . If the answer to decision block is YES meaning that the parent language is one of the installed system languages the routine proceeds to add the parent language after the LIP language in the List. See block .

The routine then proceeds to determine if the added parent language itself is a partially localized language. See decision block . If the answer is NO the routine has found a valid parent language for the LIP language and the routine returns. If the answer to decision block is YES the routine executes the routine that finds and adds into the List the valid base languages of the added parent language. See block . As noted above is a flow diagram illustrating an exemplary routine and will be discussed in detail later. After executing the routine the routine returns.

If the answer to decision block or decision block is NO meaning that the parent language of the LIP language is not a language supported by the OS nor an installed system language the routine proceeds to determine if there is another parent language designated for the LIP language. See decision block . If the answer to decision block is YES the routine loops back to decision block to start processing this parent language. If the answer to decision block is NO meaning that there is no more designated parent language for the LIP language the routine proceeds to remove the LIP language from the List. See block . The routine then returns.

Specifically routine starts by determining whether a valid base language for the partially localized language is already in the List. See decision block . If the answer to decision block is YES the routine has no need to find another base language for the partially localized language the routine returns. If the answer to decision block is NO the routine proceeds to determine if the user selected or the default base language is a valid base language for the partially localized language by determining whether the base language is a language supported by the OS. See decision block . If the answer to decision block is YES the routine adds the base language after the partially localized language in the List. See block .

The routine then proceeds to determine whether the added base language has its own base i.e. the added base language itself is a partially localized language. See decision block . If the answer to decision block is NO meaning the added base language is fully localized the routine returns. If the answer to decision block is YES meaning that the added base language is partially localized and thus has its own base language the routine proceeds to add into the List the base language of the added base language. See block . The routine then returns.

When the answer to decision block is NO meaning that the base language is not a language supported by the OS the routine proceeds to determine whether there is another base language available for the partially localized language. See decision block . If the answer to decision block is YES the routine loops back to decision block to process the selected base language. If the answer to decision block is NO meaning there is no more designated base language for the partially localized language the routine proceeds to remove the partially localized language from the List. See block . The routine returns.

Exemplary embodiments of the invention further provide a set of API functions to allow different resource loaders and or applications to use e.g. query and or modify the integrated UI language preference list i.e. the List. is a block diagram illustrating an exemplary API and how the API may be used by different entities in a MUI system.

As shown in the API includes a SetThreadPreferredUILanguages function and a GetThreadPreferredUILanguages function . The SetThreadPreferredUILanguage function allows an application to set a list of preferred UI languages for the thread that runs the application. The function validates the input languages to ensure that each input language is supported by the OS. The function may also provide convenient flag values to indicate whether each input language can be displayed in a console window with the current system settings. The function may also be configured to accept a limited number of input languages. The GetThreadPreferredUILanguages function returns an application s preferred UI languages that are set by the SetThreadPreferredUILanguages function . As shown in an application can use the SetThreadPreferredUILanguages function and the GetThreadPreferredUILanguages to modify and retrieve application preferred UI languages in an integrated UI language preference list . Various system UI resource loaders can use the GetThreadPreferredUILanguages function to retrieve an application s preferred UI languages from the integrated UI language preference list .

The exemplary API may also include a SetPreferredUILanguages function a GetUserPreferredUILanguages function and a GetSystemPreferredUILanguage function . The SetPreferredUILanguages function configures a user s UI language preferences. This function may also be configured to set a machine s UI language preferences. In an exemplary embodiment of the invention this function is a private function thus can be only used internally and no external components can programmatically set user or machine UI language preferences. If the input languages for this function are for user UI language preferences this function ensures that the input languages are supported by the OS and are installed system languages and that the input language list only contains the number of languages that are allowed by the system. If the input language list is for machine UI language preferences the function ensures that all languages are supported by the OS that the first language in the list is installed on the system and that other languages in the list are the bases or parents of the first language in the list. This function also ensures the input language list does not contain any duplicate language entries. The GetUserPreferredUILanguages function and the GetSystemPreferredUILanguage function return user or machine preferred UI languages that are set by the SetPreferredUILanguages function . As shown in the SetPreferredUILanguages function the GetUserPreferredUILanguages function and the GetSystemPreferredUILanguage function can be used by a caller to update and retrieve user UI language preferences from the integrated UI language preference list .

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

