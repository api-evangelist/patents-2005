---

title: Collaborative invitation system and method
abstract: A set of collaborative contacts may be selected with an invitation user interface. An invitation to participate in a collaborative activity may be sent to the selected contacts from the invitation user interface or from a collaborative application. The invitation may be received by a collaborative services platform. A user of the collaborative services platform may be presented with the invitation along with an ability to choose one of accept, decline and ignore in response to the invitation. The user may choose to accept, decline or explicitly ignore the invitation, and a response may be sent to the sender of the invitation indicating the user's choice. An application programming interface for a collaborative invitation service of the collaborative services platform may include an invitation element, a send invitation element, a respond to invitation element and a cancel invitation element. The cancel invitation element may be used to cancel issued invitations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752253&OS=07752253&RS=07752253
owner: Microsoft Corporation
number: 07752253
owner_city: Redmond
owner_country: US
publication_date: 20050425
---
This invention pertains generally to networked computing environments and more particularly to facilitated collaboration in networked computing environments.

Networked computing environments have become common features of the workplace and even the home. These environments facilitate a variety of modes of communication including electronic mail instant messaging multimedia document servers discussion groups as well as streaming audio and video and immersive interactive sensory environments. Conventional software applications have begun to take advantage of these rich modes of communication but each has limitations and or disadvantages when considered from the point of view of an integrated and extensible computerized collaboration platform.

Some conventional computer software applications provide aspects of collaborative services but fail to provide effective access to collaborators. Clumsy and or limited access to collaborators can present barriers to collaboration initiation preventing the use of otherwise functional collaboration tools. An aspect of ineffective access to collaborators is a failure by some conventional software applications to effectively discern current physical and or virtual location. Another aspect is a failure by some conventional software applications to effectively discern compatibilities with respect to collaborative functionality.

Beyond deficits in functionality of particular releases of conventional software applications providing aspects of collaborative services some conventional software applications fail to provide for an extensible collaboration platform framework and or architecture. This is no minor failing. An effective architecture may last many years and be incorporated into network computing environments with millions of nodes. Failures of extensibility flexibility maintainability and or scalability of an established architecture may be a much more significant problem than for a single software product release.

This section presents a simplified summary of some embodiments of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some embodiments of the invention in a simplified form as a prelude to the more detailed description that is presented later.

In an embodiment of the invention one or more contacts may be selected with an invitation user interface such as a graphical user interface GUI . An invitation to participate in a collaborative activity may be sent to the selected contacts from the invitation user interface or from a collaborative application for example a collaborative application that facilitates the collaborative activity. Whether the invitation is sent from the invitation user interface or from the collaborative application may be a configurable option. If the invitation is to be sent from the invitation user interface then the collaborative application may be launched and then the invitation may be sent from the invitation user interface. If the invitation is to be sent from the collaborative application then the collaborative application may be launched and then the invitation may be sent from the collaborative application.

In an embodiment of the invention the invitation to participate in the collaborative application may be received for example by a collaborative services platform. A user of the collaborative services platform may be presented with the invitation along with an ability to choose one of accept decline and ignore in response to the invitation. The user may choose to accept decline or explicitly ignore the invitation and a response may be sent to the sender of the invitation indicating the user s choice.

In an embodiment of the invention an application programming interface for a collaborative invitation service includes an invitation element a send invitation element a respond to invitation element and a cancel invitation element. The invitation element may provide access to invitation data corresponding to an invitation to participate in a collaborative activity. The send invitation element may be used to send collaborative invitations to one or more contacts. The respond to invitation element may be used to respond to collaborative invitations and the cancel invitation element may be used to cancel issued invitations.

Prior to proceeding with a description of the various embodiments of the invention a description of a computer in which the various embodiments of the invention may be practiced is now provided. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally programs include routines objects components data structures and the like that perform particular tasks or implement particular abstract data types. The term program as used herein may connote a single program module or multiple program modules acting in concert. The terms computer and computing device as used herein include any device that electronically executes one or more programs such as personal computers PCs hand held devices multi processor systems microprocessor based programmable consumer electronics network PCs minicomputers tablet PCs laptop computers consumer appliances having a microprocessor or microcontroller routers gateways hubs and the like. The invention may also be employed in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment programs may be located in both local and remote memory storage devices.

Referring to an example of a basic configuration for the computer on which aspects of the invention described herein may be implemented is shown. In its most basic configuration the computer typically includes at least one processing unit and memory . The processing unit executes instructions to carry out tasks in accordance with various embodiments of the invention. In carrying out such tasks the processing unit may transmit electronic signals to other parts of the computer and to devices outside of the computer to cause some result. Depending on the exact configuration and type of the computer the memory may be volatile such as RAM non volatile such as ROM or flash memory or some combination of the two. This most basic configuration is illustrated in by dashed line .

The computer may also have additional features functionality. For example computer may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information including computer executable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to stored the desired information and which can be accessed by the computer . Any such computer storage media may be part of computer .

The computer preferably also contains communications connections that allow the device to communicate with other devices such as remote computer s . A communication connection is an example of a communication medium. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. By way of example and not limitation the term communication media includes wireless media such as acoustic RF infrared and other wireless media. The term computer readable medium as used herein includes both computer storage media and communication media.

The computer may also have input devices such as a keyboard keypad mouse pen voice input device touch input device etc. Output devices such as a display speakers a printer etc. may also be included. All these devices are well known in the art and need not be described at length here.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computing devices unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.

In an embodiment of the invention a computer software architecture provides an extensible flexible maintainable and scalable collaboration platform. Aspects of the architecture may be incorporated into a suitable networked computing environment. The architecture may enable and or extend integrated collaboration with conventional computer software applications. In particular the architecture may provide for comprehensive collaborative contact management including current contact presence in a networked computing environment and current contact capabilities for example with respect to available collaborative activities.

The networking hub may communicatively connect computers and . The networking hub and the computers and may together be regarded as an example of a sub network or subnet although of course not a limiting example. The computers and are said to be on the same subnet and may enjoy privileged network communication with respect to each other as a result. For example even though each computer and may send point to point type messages to each other computer and the subnet may be configured such that broadcast type messages in the subnet are received by those computers and in the subnet .

The extensible flexible maintainable and or scalable attributes of the collaboration platform may arise from one or more aspects of its modular structure its modular structure as a whole modes of interaction between ones of the modules and or the interaction patterns of the modular structure as a whole. depicts an example computer software architecture in accordance with an embodiment of the invention. Each aspect of the architecture may be present at each computer and however each embodiment of the invention is not so limited. Aspects of the architecture may be suitably distributed across any suitable subset of the networked computing environment including the networked computing environment as a whole. Different versions of the architecture may be present at different computers and the degree to which each version of the architecture is compatible with each other version of the architecture may vary.

The architecture may include a collaboration services platform . The collaboration services platform may include a contact management service a publication service a signaling service an activity service a data sharing service an authentication service and a connectivity service . The contact management service may include a contact store a presence store and a contact location service . The publication service may include a synchronization service . The signaling service may include an invitation service . The activity service may include an audio visual A V service . The connectivity service may include a peer to peer P2P service and a conventional transport control protocol and internet protocol TCP IP stack . Each service may include and or be incorporated into a peer capable of sending and receiving messages implementing the service.

In an embodiment of the invention the contact management service provides effective access to collaborators that is to users of the collaborative services platform . For example the contact management service may provide contact information for some or all of the users of the collaborative services platform . The contact management service may maintain a database of contacts in one or more data stores. Each contact may be a potential collaborator that is a user of the collaboration services platform may attempt to engage in one or more collaboration activities with each contact. The contact management service may provide one or more user interfaces including graphical user interfaces GUI that present the contacts for example for selection by the user and or so that the user may invoke a collaboration services platform action with respect to a particular contact.

The contact store may store contact objects and MeContact objects described in more detail below with reference to . The presence store may store presence objects also described in more detail below with reference to for the contact objects. In an embodiment of the invention presence data changes more frequently than contact data so that the separate data stores may be optimized for different object update frequencies.

The contact location service may provide one or more of a variety of location data with respect to a given contact. Physical proximity may be an aspect of contact location for example one or more proxies for physical location may be utilized to estimate a physical distance of a contact from the user. Signal strength at a radio receiver is an example of a physical distance proxy. Virtual location may be another aspect of contact location. For example a contact may be active at one or more networks such as network of and or one or more network nodes such as computers and . In addition a contact may be registered but inactive or online but undiscovered or have some other suitable locative status. The contact location service may query a suitable registry and or initiate for example a peer to peer search or a peer to peer name resolution mechanism in order to locate a particular contact.

The publication service may provide access to data published by contacts. In an embodiment of the invention interested users may subscribe to objects published by contacts and receive notification whenever the published objects are updated by the publishing contact. The synchronization service may be responsible for maintaining a database of publication subscriptions. In particular the publication services may provide access to presence information published by contacts.

The signaling service may provide for the establishment and termination of collaborative conferences between contacts present in the networked computing environment as well as for updating parameters of a conference in progress. In an embodiment of the invention establishment update and termination of collaborative conferences is provided in accordance with publish subscribe semantics. In an embodiment of the invention the signaling service incorporate an implementation of a session initiation protocol SIP such as the session initiation protocol described by Handley et al. SIP Session Initiation Protocol Internet Engineering Task Force IETF Request for Comments RFC 2543 March 1999.

The invitation service may enable invitations and related messages to be sent to and from contacts. For example a system user accessing the networked computing environment at one computer may invite a contact at some other computer s and or to participate in a collaborative activity. The invitation service may utilize the contact location service to locate the contact and deliver the invitation. The invitation service may include a variety of user interfaces such as graphical user interfaces GUI for presenting invitation details to an invitee and enabling the invitee to accept decline and or explicitly ignore the invitation. An example invitation service is described below in more detail with reference to .

The activity service may implement collaborative activities and or provide support for the integration of collaborative applications into the collaboration services platform . For example the activity service may provide collaboration services platform compliant application programming interfaces APIs to conventional collaboration applications. Compliant APIs may include functionality for querying a particular contact or computer with respect to activity capabilities and for ascertaining application specific invitation requirements. The audio visual services are an example of collaboration activities that are suitable for incorporation into the activity service .

The data sharing service may enable sharing of data in any suitable format including files documents streams and objects. The data sharing service may provide for data transfer data replication and or data synchronization. Data sharing may be enabled and disabled based on contact participation in an activity participation in a conference and or any suitable access control list ACL entry such as networked computing environment user group.

The authentication service may source and verify authentication credentials for example authentication credentials for contacts and other activity and conference participants. The authentication service may enable the classification of contacts into trusted contacts and untrusted contacts. The authentication service may enable contacts to be trusted independent of contact location and or in accordance with sophisticated networked computing environment presence.

In an embodiment of the invention the connectivity service enables communication between collaboration services platform service instances throughout the networked computing environment for example between a first signaling service instance at the computer and a second signaling service instance at the computer . The communication facilities of the connectivity service may be made available with an application programming interface API so that other collaboration service platform services may communicate between instances independent of the underlying transport mechanism.

The connectivity service may include a TCP IP stack and or higher level communication application programming interfaces such as the Microsoft Windows Sockets 2 Winsock API as described in the Windows Sockets 2 section of the Microsoft Windows Platform Software Development Kit SDK in the Microsoft Developer Network MSDN Library dated March 2005. The peer to peer P2P service may provide connectivity in an overlay network of the network computing environment . For example the peer to peer service may be provided in accordance with the peer to peer application programming interface described in the Windows Peer to Peer Networking section of the Microsoft Windows Platform Software Development Kit SDK in the Microsoft Developer Network MSDN Library dated March 2005 including the graphing grouping identity manager and peer name resolution protocol PNRP namespace provider application programming interfaces.

The services and of the collaboration services platform may be implemented with a set of programmatic objects including a set of collaboration objects interrelated in a collaboration object model. depicts an example set of collaboration objects and an example collaboration object model in accordance with an embodiment of the invention. The collaboration object model may include a contact object a presence object a MeContact object and a MyPresence object an endpoint object a capability object a conference object an activity object and a published object . Of course the collaboration services platform may include many instances of each type of collaboration object and .

The contact object may incorporate suitable attributes for representing a collaborative participant and or a user of the collaborative services platform . In particular the contact object may reference a collaborative presence for example a contact s presence in the networked computing environment . In an embodiment of the invention the contact object references a collaborative presence by referencing an instance of the presence object . An example contact object is described in more detail below with reference to .

The presence object may incorporate suitable attributes for representing a collaborative presence for example a set of computers and or of the networked computing environment at which a particular collaboration services platform user has been active at some time in the recent past where the recent past may vary from seconds to hours days and even years depending upon the collaborative context. The presence object may reference one or more endpoint object instances representing networked computing environment locations. Endpoint objects needn t correspond one to one with computers of the networked computing environment for example because an endpoint object may correspond to a peer in an overlay network of the networked computing environment .

The presence object may further reference zero or more capability object instances representing for example collaborative capabilities at one or more collaborative endpoints and or an aggregate collaborative capability across some or all endpoints associated with the presence object . In addition the presence object may reference zero or more published object instances. An example presence object is described in more detail below with reference to . An example published object is described in more detail below with reference to . An example capability object is described in more detail below with reference to .

The MeContact object may be a type of contact object and may polymorphically inherit the attributes and behavior of the contact object . The MeContact object may be differentiated from the contact object because of the special role a collaboration services platform user s own contact information may play relative to the contact information of other users. For example the MeContact object may reference zero or more contact object instances representing that particular user s known collaborative contacts. The MeContact object needn t reference for example other MeContact object instances. In an embodiment of the invention unnecessary complexity is thus avoided contributing to the extensibility flexibility maintainability and or scalability of the collaboration services platform .

The MeContact object may further reference a MyPresence object instance. The MyPresence object may be a type of presence object and may polymorphically inherit the attributes and behavior of the presence object . Again the MyPresence object may be differentiated from the presence object because of the special role a collaboration services platform user s own presence may play relative to the presence of other users. For example in an embodiment of the invention the user may explicitly update their own MyPresence object instance but not the presence object instances of other users.

In addition the MeContact object may reference zero or more conference object instances representing collaborative conferences in which the user associated with the MeContact object is currently and or recently participating along with other collaboration services platform users. The conference object may reference one or more activity object instances representing collaborative activities. In an embodiment of the invention the conference object is a type of activity object and may polymorphically inherit the attributes and behavior of the activity object . As a result of being a type of activity object the activity object instances referenced by the conference object may be conference object instances. An example MeContact object is described in more detail below with reference to . An example conference object is described in more detail below with reference to .

Each collaborative object and may offer an application programming interface for creating and deleting collaborative object and instances as well as for suitable queries and manipulations of collaborative object and attributes. In an embodiment of the invention where collaborative objects and are described as referencing other collaborative objects and the referenced objects or copies thereof may instead be incorporated into and or made integral to the referencing object. One programmatic object may reference another with any suitable programmatic reference mechanism. Suitable programmatic reference mechanisms include pointers explicit references associated hash codes and their equivalents as well as program language features designed specifically for the purpose.

The programmatic objects and introduced above with reference to are now described in more detail. Each programmatic object and may include one or more application programming interface elements. Each application programming interface element may include one or more interface specifications that specify a manner in which computer system components including collaboration services platform services may configure control and or interact with the programmatic object and . As will be apparent to one of skill in the art the interface specifications may include object attribute specifications variable specifications function call specifications program object specifications message specifications such as request response message pairs and or any other suitable programming interface specification.

The name element may include a friendly name for a contact associated with the contact object . The friendly name may be encoded for example as a rich text string. The presence element may include a reference to a presence object instance.

The buddy flag element may include an indicator that the contact associated with the contact object is categorized as a buddy class contact. Contacts categorized as buddies may be privileged in a variety of ways. For example a buddy may be a trusted contact buddies may be given priority for example invitation priority and buddies may be automatically included in the set of contacts to which a collaboration services platform user subscribes for example for presence data. Buddy class contacts may be computationally more expensive than ordinary contacts and their number may be limited for example with a test embedded in the buddy flag application programming interface element .

The proximity element may include a physical proximity metric and or a virtual proximity metric. For example the physical proximity metric may be a measure of signal strength received at a wireless network interface. Of course the proximity application programming interface element need not be limited to a single metric in response to a proximity query. For example the proximity query may request a raw proximity metric a time averaged proximity metric a quantized proximity metric signal strength bars and or any suitable proximity metric.

The rich text description element may include a rich text string describing the networked computing environment presence associated with the presence object . Simple examples include Currently in Building 9 Playing Halo Level 4 and Unavailable. The endpoints element may include a set of collaborative endpoints that are active recently active and or capable of becoming active participants in one or more collaborative activities. Examples of suitable collaborative endpoints include computers and and peers of an overlay network of the networked computing environment .

The aggregate status element may include an aggregate presence status indicator representative of collaborative presence across the set of collaborative endpoints. Each collaborative endpoint may have an associated presence status for example ONLINE AWAY OUT TO LUNCH BE RIGHT BACK IDLE ON THE PHONE or BUSY. The aggregate presence status associated with a set of endpoints need not be the same as the status associated with any one of the endpoints in the set. Even when the aggregate presence status is the same as at least one of the endpoints in the set it may be different from one or more of the others.

Aggregate presence status may be determined with one or more of a variety of aggregate presence status algorithms. The presence status levels may be ranked and the aggregate status may be set to the highest ranked status in a set of endpoints. Aggregate status may be weighted average of individual status values or other suitable linear or nonlinear transformation of individual status values. The individual status values may also be suitably sorted before being transformed. The aggregate presence status algorithm utilized may depend upon the number of individual endpoints in the set.

The aggregate capabilities element may include a collection of aggregate capabilities associated with a collaborative presence. Each individual endpoint in the collaborative presence may have associated therewith a set of capabilities for example capabilities with respect to collaborative activities. The aggregate capabilities may be a simple aggregate of each of the capabilities of each of the individual endpoints. On the other hand the collection of aggregate capabilities may be limited to those capabilities that are present at each of the individual endpoints. Combinations of these extremes are possible as are more sophisticated aggregate capabilities determination algorithms. For example the collection of aggregate capabilities may be a result of a weighted averaging process or other suitable linear or nonlinear transformation of the capabilities of individual endpoints. In addition an aggregate capability rank or percentage may be associated with each capability in the collection of aggregate capabilities.

The published objects element may include a collection of published objects associated with the collaborative presence. While the capability object may be a type of published object the two are differentiated in that capabilities associated with instances of the capability object are typically long lived e.g. on the order of days weeks or even years whereas published data associated with instances of the base published object are typically short lived e.g. on the order of seconds minutes or hours . This differentiation may be exploited to optimize computer system performance.

The invite to new activity element may enable a collaboration services platform user to invite a contact associated with the presence object to participate in a new collaborative activity. It may be that an associated conference for hosting the activity does not yet exist and that one will be created if the invitation is accepted. The invitation may be delivered to each endpoint referenced by the endpoints element only to those endpoints associated with an ONLINE presence status the invitation may be delivered to each endpoint associated with the collaborative presence in an order for example an order determined by the presence status associated with each endpoint in the order or other suitable invitation delivery strategy.

The invite to existing activity application programming interface element may be preferred When inviting a contact to join an existing conference and or activity. When a conference and or activity is already established some collaborative parameters may not be negotiable or may be less negotiable for example negotiable only within a range determined by collaborative parameters in use by current participants. In addition less flexibility may limit the endpoints of a presence that qualify for participation and thus that are candidates for receiving an invitation.

The find capabilities by type element may enable a collaboration services platform user to query the presence associated with the presence object for capabilities associated with one or more of a plurality of capability types. Examples of capability types include application types such as chat audio and video application capabilities such as audio output audio input video output video input endpoint resources such as bandwidth audio quality and video resolution or any suitable collaborative capability type. The find capabilities by type element may respond to the query with capabilities of individual endpoints and or aggregate presence capabilities.

The find published objects by type element may enable a collaboration services platform user to query the presence associated with the presence object for published objects associated with the presence for example the published objects accessible with the published object element . The published object type may be determined by an associated rich text string. For example those published object instances associated with the same rich text string may be determined to be of the same type.

The publish object element may enable the publication of data associated with the presence. For example the set of presence objects maintained by the published objects element may be updated. In an embodiment of the invention the publish object application programming interface element may be incorporated into the published objects application programming interface element .

The authorized subscribers element may reference one or more contact object instances associated with contacts who are authorized to subscribed to the data associated with the published object . Data access control may be coarse grained for example allow or block or fine grained for example including control over data create read update and delete privileges. The published data element may maintain a set of published data associated with the published object . Any suitable set of data may be published in association with the published object .

The associated applications element may include a reference to a set of collaborative applications that implement the capability associated with the capability object . The application data element may include data and or a specification of data required to configure each of the set of collaborative applications referenced by the associated applications element .

The contacts element may include references to a set of contact object instances associated with contacts known to the collaboration services platform user associated with the MeContact object . The buddies element may include references to a set of contact object instances associated with contacts known to the collaboration services platform user and that are also buddy class contacts for example as indicated by the buddy flag element of the contact object . Mere presence in the set of contact object instances referenced by the buddies element may indicate that the associated contact is a buddy class contact. The set of contact object instances referenced by the contacts element and the buddies element may overlap however in at least one embodiment of the invention the sets are exclusive.

The authorized subscribers element may include references to a set of contact object instances associated with contacts that are authorized to subscribe to published data associated with the MeContact object such as capabilities data. Published data access control may be coarse grained for example block or allow access to all published data or fine grained for example create read update and or delete permissions for each published object or combinations thereof.

The active subscribers element may include references to a set of contact object instances associated with contacts that are actively subscribed to data published by the collaboration services platform user associated with the MeContact object . Of course contact object instances referenced by the active subscribers element should be in accordance with the permissions maintained by the authorized subscribers element .

The conferences element may include references to a set of conference object instances associated with conferences in which the collaboration services platform user associated with the MeContact object is currently participating in which the user has recently participated and or in which the user will soon participate.

The find capabilities by type element may enable a collaboration services platform user to query the contacts associated with the MeContact object for capabilities associated with one or more of the plurality of capability types. For example the find capabilities by type element may query the contact object instances referenced by the contacts element the buddies element and or the MeContact object itself. The find capabilities by type element may respond to the query with capabilities of individual endpoints and or aggregate capabilities. The find published objects by type element may enable the user to query the contacts associated with the MeContact object for published data. As with the find capabilities by type element the find published objects by type element may query the published object instances referenced by the contacts element the buddies element and or the MeContact object itself.

In an embodiment of the invention roles of a conference for example a conference associated with the conference object include organizing managing and or maintaining one or more collaborative activities in which one or more collaboration services platform users are participating. The session information element may include conference level session information. Performance optimizations may be achieved by collecting activity level session information at the conference level. The activities element may include references to one or more activity object instances.

The administrators element may reference one or more contact object instances associated with contacts that are authorized to act as administrators for the conference. Administrative privileges may include adding and removing authorized participants and or activities. The authorized members element may reference one or more contact object instances associated with contacts that are authorized to participate in activities associated with the conference. Authorization may be coarse grained for example allow or block a particular contact from participating in all conference activities fine grained for example permissions may be granted to launch new activities or end existing activities to participate fully in individual activities or to participate in a limited way e.g. observer status or combinations thereof.

The launch activity element may add a new activity to the conference. Joining and leaving activities may be managed by the conference by the activity or by a combination of the two. In each case the conference object application programming interface elements may enforce accordance with the administrators element and or the authorized members element .

Detailed methods performed for example by the collaboration services platform and in accordance with the collaboration object model are now described. depicts example steps performed by the collaboration services platform in accordance with an embodiment of the invention. At step a contact object instance may be selected. For example a contact object instance stored in the contact store may be selected with a user interface of the contact management services .

At step the selected contact object instance may be queried for its associated presence object instance. For example the presence element of the selected contact object may be utilized to access the associated presence object instance.

At step it may be determined if the contact associated with the selected contact object instance is present in the networked computing environment . For example the aggregate presence status of the contact may be obtained from the aggregate status element of the presence object retrieved at step and if the aggregate presence status of the contact is ONLINE then the contact may be determined to be present. If the contact is determined to be present the procedure may progress to step . Otherwise the procedure may exit. The contact is unavailable for collaboration at this time.

Alternatively steps and may be replaced with steps that subscribe to the presence information of the selected contact and wait until a notification indicates that the selected contact is present before proceeding to step . This alternative is indicated with dashed line .

At step the selected contact object may be queried for a set of associated capability object instances. For example the find capabilities by type element of the presence object instance retrieved at step and or steps may be utilized to obtain the pertinent set of capabilities. The particular set of capabilities to be examined may depend upon the target collaborative activity or activities. For example a conference involving voice may trigger a check for audio input capability. At step it may be determined if the selected contact has the required capabilities. If the selected contact does have the required capabilities the procedure may progress to step of . Otherwise the procedure may exit. Step needn t be limited to a simple test. Step may include a negotiation for example coordinated by the signaling service to determine if any of the set of capabilities are sufficient for the target activity or activities.

At step the one or more invitations may be received by the selected contact. For example one of the invitations may be received by the invitation service at the computer . At step the selected contact may respond to the one or more invitations. For example the selected contact may utilize a user interface of the invitation service at the computer to respond to one of the invitations.

At step it may be determined if the invitation was accepted. For example the invitation service at the computer may receive the response sent at step and the contents of the response may determine if the invitation is accepted. If the invitation is accepted the procedure may progress to step . Otherwise the procedure may exit.

Steps and are marked with dashed line to highlight the possibilities for procedural variations when responding to invitations. One reason to send out multiple invitations to the same activity is that the networked computing environment presence of the selected contact may encompass multiple endpoints. For example a collaboration services platform user may send three invitations to the same activity from computer to the computers and . For example computer may be an office desktop PC of the selected contact computer may be a laptop of the selected contact and computer may be a personal digital assistant PDA of the selected contact. The invitation may be displayed to the selected contact at more than one endpoint. For example the selected contact may decline or ignore the invitation at the computer the PDA in this example but accept the invitation at the computer the laptop . A possibility is that the selected contact simply doesn t respond to the invitation. This may result in a timeout and an exit of the procedure.

Another possibility for steps is that the collaboration services platform user at computer sends out an invitation to an activity to each other computer and in the subnet . In this case each contact may respond in parallel.

Having accepted the invitation at step the selected contact may join an associated conference for the collaborative activity. For example the conference may be hosted by at the computer and the selected contact may join the conference from the computer utilizing the signaling service and or the activity service . At step collaboration incorporating the activity may occur.

An example of the invitation service is now described in more detail. In particular interactions between the invitation service the collaborative services platform and collaborative applications distinct from the collaborative services platform although typically referenced by it are highlighted. In an embodiment of the invention the handling of such interactions contribute to the usability extensibility flexibility maintainability and or scalability of the collaboration services platform and thus its suitability for wide scale adoption.

The computer operating systems and may include invitation user interfaces UI and such as graphical user interfaces GUI . In an embodiment of the invention the invitation user interfaces and are incorporated into the collaborative services platform modules and respectively. The computers and may further include collaborative applications and . Although distinct from the collaborative services platform modules and in this example in an embodiment of the invention the collaborative applications and may be incorporated into the collaborative services platform modules and .

A basic collaborative invitation protocol may include three messages a collaboration invitation message a collaboration response message and an invitation cancel message .

The collaboration invitation message may include an invitation identifier one or more capability identifiers application data and a message. The invitation identifier may uniquely identify the invitation. For example the invitation identifier may be a globally unique identifier GUID as described in the Guid Structure section of the NET Framework Class Library documentation version 1.1.1 in the Microsoft Developer Network MSDN Library. Each capability identifier may reference a capability object representing a collaborative capability required for the collaborative activities associated with the invitation. For example each capability identifier may be a globally unique identifier GUID . The application data may include and or specify data to be passed to collaborative applications for example in order to initiate the collaborative activities. The message may be a rich text string containing standard or custom invitation text.

The collaboration response message may include an invitation identifier an invitation response action a response message and extended response data. The invitation identifier may identify the collaboration invitation to which the response message is responding. For example the invitation identifier may be the GUID supplied by the collaboration invitation message . The invitation response action may indicate a type of the response. For example the invitation response may be one of decline accept ignore and error. The response message may be a rich text string containing standard or custom invitation response text. The extended response data may include any suitable additional response data pertaining to the invitation and or collaborative activities.

The invitation cancel message may include an invitation identifier identifying the invitation which the cancel message is canceling. For example the collaboration invitation message may be sent from the computer to the computer to invite a user of the collaborative services platform to participate in a collaborative activity with a user of the collaborative service platform . In response the collaboration response message may be sent from the computer to the computer to indicate whether the invitation is for example accepted or declined. In an embodiment of the invention it is possible for the user of the collaborative services platform to cancel the invitation by sending the invitation cancel message from the computer to the computer .

Before describing example collaborative invitation methods in more detail it will be helpful to describe an example application programming interface API of the invitation service . depicts an example application programming interface API of the invitation service in accordance with an embodiment of the invention. The invitation service API may include an invitation element a create invitation listener element a send secured invitation element a send unsecured invitation element a cancel invitation element a respond to invitation element a get invitation response element a register unregister capability element an enumerate capabilities element and a get capability information element . Although each application programming interface element and may be included in the application programming interface of the invitation service incorporated into the collaborative services platform module and at each computer and different ones of the elements and may be utilized by the computers and depending upon whether the computer is an inviter an invitee or both.

The invitation element may include and provide access to some or all of the same data as the collaboration invitation message . For example the collaboration invitation message or portions thereof may be stored in and or retrieved from the invitation service with the invitation element .

The create invitation listener element may instantiate an invitation listener at a collaborative endpoint such as the computers and . Interface specification parameters may include an endpoint identifier such as an internet protocol IP address or P2P peer identifier there may be multiple endpoints per computer a port identifier there may be multiple communication ports per endpoint and an invitation listener identifier for configuring or destroying the invitation listener. For example the operating system may utilize the create invitation listener element to create an invitation listener listening at a standard invitation and or collaborative services port. The collaborative application may utilize the create invitation listener element to create a an invitation listener at a custom invitation port that is dedicated to listening for invitations to collaborate with the collaborative application .

The send secured invitation element may enable secure sending of invitation messages . Interface specification parameters may include a reference to a contact object instance a reference to an endpoint object instance a reference to the invitation message to be sent a reference to a synchronization object of a thread of execution such as an event to be signaled once a response to the invitation has been received and a reference to an invitation identifier to be set by the send secured invitation element . The invitation message may be sent to the contact associated with the referenced contact object instance. If the endpoint object instance is provided the invitation message may be sent to the associated endpoint otherwise the invitation message may be sent to each endpoint in the presence of the contact associated with the referenced contact object instance.

A decision to participate in a collaborative activity may have security consequences. For example a decision to participate in two way file sharing may expose data to modification and or deletion. As a result it may be that a user of the collaborative services platform decides to accept collaborative invitations only from trusted sources. In an embodiment of the invention a secure communications connection may be established between users that have previously exchanged contact information. For example the contact information may contain cryptographic authentication credentials and the secure communications connection may be established with convention secure protocols such as secure socket layer SSL or security service provider SSP techniques for overlay networks.

However the user may also decide to allow insecure invitations under certain circumstances. The send unsecured invitation element may be similar to the send secured invitation element except that for example there is no requirement that the invitation sender and recipient have previously exchanged contact information. For example the send unsecured invitation element may be utilized to broadcast invitation messages to each computer and on the subnet . Insecure invitations may facilitate ad hoc collaboration and collaboration in facilitated social settings such as multiplayer games.

The cancel invitation element may enable sending of cancel messages . Interface specification parameters may include an invitation identifier such as the invitation identifier set by the send secured invitation element of the send unsecured invitation element . The respond to invitation element may enable sending of the response message . Interface specification parameters may include the invitation identifier and the invitation response action.

Each of the send secured invitation element and the send unsecured invitation element may have both synchronous and asynchronous versions. For example the asynchronous version may send the invitation message and then allow execution of additional instructions in the thread of execution before checking for a response to the invitation. In contrast the synchronous version may wait without executing further instructions in the thread of execution until the response message is received or a timeout occurs. The get invitation response element may be utilized to check for and or wait for a response to an invitation message that was sent asynchronously. Interface specification parameters may include the invitation identifier and reference to be set to the response message when it arrives. Synchronous versions of the send invitation elements and need not include a reference to a thread synchronization object.

The invitation service may maintain a registry of endpoint capabilities. The register unregister capability element may enable registration and deregistration of capabilities with the invitation service . Interface specification parameters may include references to one or more capability object instances and an indication as to whether the capability or capabilities pertain to a particular user of an endpoint or to all users of the endpoint. Each capability object instance may be associated with a capability identifier for example a globally unique identifier GUID . In an embodiment of the invention each capability is associated with a particular collaborative application . The invitation service may include separate application programming interface elements for register capability and unregister capability.

The enumerate capabilities element may enable enumeration of capabilities registered with the invitation service . Interface specification parameters may include an indication as to whether the enumeration should contain capabilities associated with a particular user of an endpoint or with all users of an endpoint. In an embodiment of the invention the enumeration includes capability identifiers instead of for example references to capability object instances. The capability object instance may then be retrieved with the get capability information element .

Example collaborative invitation methods are now described in more detail. A basic context for collaborative invitation is whether the user interacts with a specific application in order to send and or respond to an invitation specific scenario or whether the user interacts with an application independent mechanism to send and or respond to the invitation generic scenario . The four scenarios from generic to generic from specific to generic from generic to specific and from specific to specific are described below with respect to .

At step an activity may be selected with the generic invitation user interface. For example the user interface of the invitation service may interact with the activity service to display a list of available collaborative activities or for example a list of popular or most recently used activities and the user may graphically select a collaborative activity from those displayed. At step it may be determined if the generic invitation user interface is to send the invitation or for example if the invitation is to be sent from a specific collaborative application. For example the determination may depend upon a configurable parameter of the invitation service . If it is determined that the generic invitation user interface is to send the invitation then the procedure may progress to step . Otherwise the procedure may progress to step .

At step the collaborative application associated with the activity selected at step may be launched. Step is depicted with a dashed outline to indicate that although the application may be launched at this time the generic invitation user interface may retain control of the thread of execution and progress to step . This is in contrast to step .

At step details pertinent to the invitation collected so far such as the contacts selected at step and any configuration parameters associated with the activity selected at step may be stored for retrieval by the collaborative application associated with the activity. At step the collaborative application is launched and control of the procedure is surrendered by the generic invitation user interface.

At step the invitation may be sent with the invitation service application programming interface for example with the send secured invitation element or the send unsecured invitation element as described above. Although the same application programming interface element may be utilized to send the invitation when the procedure progresses from step to step the element is invoked by the generic invitation user interface whereas when the procedure progresses from step to step the element is invoked by the collaborative application. As a result the interface specification parameters passed to the element may differ.

The procedure beginning at step describes one of the from generic scenarios because the generic invitation user interface is utilized. In contrast step begins a from specific scenario. At step a collaborative application may be launched. For example the application may be launched in a conventional manner by the computer operating system . Step is a pre condition for step and quite some time may pass between the steps and .

At step one or more contacts may be selected with a user interface of the collaborative application . For example the collaborative application may interact with the contact management service of the collaborative services platform to display a list of know contacts of the application user or for example a list of buddy class contacts and the application user may select a set of contacts from those displayed. In contrast to the progression from step the selection of a collaborative activity is not necessary and the procedure may progress to step . The collaborative application may determine the collaborative activity. However in an embodiment of the invention the collaborative application may support multiple activities in which case an equivalent of step may be appropriate. At step the send invitation element or may be invoked by the collaborative application .

At step it may be determined if endpoints of the candidate contact are known. For example the presence object referenced by the contact object representing the candidate contact may be queried for its set of endpoint objects . If no endpoints of the candidate contact are known e.g. the result of the query is an empty set the procedure may progress to step . If endpoints of the candidate contact are known the procedure may progress to step . At step endpoints for the candidate contact may be located. For example the invitation service may interact with the contact location service to determine a set of valid endpoints for the candidate contact.

At step a candidate endpoint may be selected from among the known endpoints for the candidate contact. At step a communicative connection may be established with the candidate endpoint. For example the connection may be established with the connectivity service . At step the invitation may be sent to the candidate endpoint for example with an invitation message .

At step it may be determined if there are more candidate endpoints. If there are more candidate endpoints the procedure may return to step to select a next candidate endpoint. Otherwise the procedure may progress to step . At step it may be determined if there are more candidate contacts. If there are more candidate contacts the procedure may return to step to select a next candidate contact. Otherwise the invitation may be considered sent.

The from generic and from specific parts of the four scenarios have been described now the to generic and to specific parts are described with reference to respectively. depicts example steps for responding to a collaborative invitation from a generic invitation user interface in accordance with an embodiment of the invention. Where the collaborative invitation was sent to multiple endpoints the steps depicted in and or may be performed at each endpoint.

At step the collaborative invitation may be received at a standard communications port of the collaboration services platform . For example the invitation message may arrive at a TCP IP port reserved for the collaborative services platform and monitored by the invitation service .

At step it may be determined if the endpoint is capable of participating in the activity associated with the invitation. For example the invitation service may compare the capability identifier s in the invitation message with the capabilities that have been registered with the invitation service . Alternatively the MeContact object associated with a user of the endpoint may be queried for its associated set of capability objects and those may be compared with the capability identifier s in the invitation message . If it is determined that the endpoint is capable of participating in the activity associated with the invitation then the procedure may progress to step . Otherwise the procedure may progress to step .

At step the user may accept decline or ignore the invitation. For example the invitation service may display a generic invitation user interface having user interface elements corresponding to the decisions accept decline or ignore. The user may accept decline or ignore the invitation by selecting the corresponding user interface element. If the user accepts the invitation the procedure may progress to step . If the user declines the invitation the procedure may progress to step . If the user ignores the invitation the procedure may progress to step .

At step the response message may be sent indicating that the invitation is declined. For example the response message may be sent with the respond to invitation element of the invitation service application programming interface. Similarly at step the response message may be sent indicating that the user is choosing to ignore the invitation. The invitation element may also be used to send this response. In an embodiment of the invention the ability to send an explicit ignore response enhances an efficiency of collaborative services platform .

At step the details of the accepted invitation may be stored for retrieval by the collaborative application associated with the collaborative activity. For example some or all of the contents of the invitation message may be stored by the invitation service with the invitation element of the application programming interface. At step the collaborative application may be launched by the invitation service .

At step the response message indicating acceptance of the invitation may be sent for example utilizing the respond to invitation element of the invitation service application programming interface. In progressing from step to step control of execution may pass to the collaborative application launched at step . Alternatively the collaborative application may be launched in a parallel thread of execution the threads synchronized as necessary and the invitation service thread that received the invitation at step may exit after responding at step .

At step the collaborative application may read the invitation details stored at step . For example the stored invitation details may result in some re configuration of the collaboration application . At this point the collaboration application may be ready to begin participating in the collaborative activity and at step participation in the collaborative activity may begin.

Some time later at step a collaborative invitation may be received at the nonstandard port. For example the invitation message sent at step may have been sent to the application specific port and or endpoint. At step the collaborative application user may accept decline or explicitly ignore the invitation. For example the collaborative application may display a user interface having user interface elements corresponding to the decisions accept decline and ignore. The user may then choose a desired response by selecting the corresponding user interface element. If the user accepts the invitation the procedure may progress to step . If the user declines the invitation the procedure may progress to step . If the user explicitly ignores the invitation the procedure may progress to step .

At each of steps and the appropriate invitation response may be sent to the inviter. Each step and may for example utilize the respond to invitation element of the invitation service to send the response message with the invitation response action set to accept decline or ignore respectively. Since the desired collaboration application is already launched then if the invitation was accepted the collaborative activity may begin without further delay at step .

Example methods for collaborative presence publication are now described in more detail. In particular serverless presence publication that is an ability to publish collaborative presence information independent of a need for dedicated server computers is advantageous in an embodiment of the invention. For example serverless networked computing environments peer to peer networks or overlay networks may provide for better scalability than networks and network applications requiring dedicated server computers. The networked computing environment may support a peer to peer or overlay network. Each of the computers and may support one or more peers of the peer to peer network. Each peer may be a collaborative endpoint and be associated with an endpoint object instance.

As described above collaborative presence may be represented by the presence object . Any suitable part including all of the presence object may be published to users of the collaborative services platform . In addition programmatic object instances reference by a presence object instance may be published including endpoint objects capability objects and the more generic published objects .

In an embodiment of the invention however one time publishing is typically not enough. Presence information may change. For example published objects may be updated by collaborative applications aggregate status and or presence status associated with a particular endpoint may change throughout the day endpoints may be added or removed from the presence of a particular contact for example by a networked wireless device being turned on and off or moving in and out of a wireless network coverage area endpoint capabilities may change as new collaborative applications are installed. Effective collaboration may require consistently updated presence information. In an embodiment of the invention collaborative presence information is distributed in a serverless networked computing environment such as the networked computing environment with presence subscribe and presence notify messages.

At step communications with the publication service of the collaborative services platform may be initialized. As described above the publication service may be serverless. For example at step the computer user may join a peer to peer P2P network incorporating the publication service . At step some or all of the data contained in and or referenced by the MeContact object associated with the computer user may be published to the publication service for example with one or more presence notify messages thus establishing the collaborative presence of the computer and collaborative services platform user.

At step communications with the contact store may be initialized. For example the contact store may be a conventional data store such as a database and initializing communications with the contact store may include establishing a communications session with the data store. At step the contact store may be queried for buddy class contacts of the user. In an embodiment of the invention querying the contact store includes de referencing one or more references to contact objects included in the buddies element of the MeContact object .

At step subscriptions may be placed to the presences of the buddy class contacts for example with presence subscribe messages as described below in more detail with reference to . At step in response to the subscriptions presence update notifications may be received. For example presence notify messages may be sent through the peer to peer network when changes occur to presences having associated subscriptions.

At step a search may be made for the buddy class contact. For example a peer name resolution protocol PNRP may be utilized to locate an endpoint associated with the buddy class contact in the peer to peer network. Alternatively or in addition a search may be made throughout a local network partition such as the subnet for the contact. Any suitable network partition may be established and or searched for the contact.

The search may not be successful. For example the buddy class contact may not have an associated endpoint in the peer to peer network and or the local network partition. At step it may be determined if the buddy class contact was found. For example the peer name resolution protocol may successful resolve a name of the buddy class contact to an associated collaborative endpoint e.g. peer in the peer to peer network or a reply may be received to a message broadcast throughout the local network partition identifying an associated endpoint e.g. TCP IP address and communications port number for the buddy class contact. If the buddy class contact is found the procedure may progress to step . Otherwise it may be assumed that the absence is temporary for example because the contact has been classified as a buddy and the procedure may progress to step .

Since being classified as a buddy may carry the assumption that the contact is a typically active collaborative participant in an embodiment of the invention periodically searching for missing buddy class contacts sufficiently enhances an effectiveness of the collaborative services platform to be a justified feature in spite of increased demand on computational and network resources. The procedure may wait at step between searches. For example the period between searches may be 10 minutes. Step is surrounded by a dashed line to indicate that the wait and possibly subsequent steps may occur in a separate thread of execution. After instantiating the separate thread of execution for the wait step the main thread of execution may progress to step .

Having found the buddy class contact at step a presence subscribe message may be sent to an endpoint associated with the contact for example the endpoint found at step . The presence subscribe message may specify subscription to some or all of the collaborative presence information associated with the contact. For example the presence subscribe message may specify subscription to presence information accessible through one or more of the rich text description element the endpoints element the aggregate status element the aggregate capabilities element and the published objects element of the presence object application programming interface. Presence notify messages sent in response to the subscription for example at step may need only be sent when a part of the presence changes that is covered by the subscription and may need only include the part of the presence information that has changed.

At step it may be determined if there are more buddy class contacts in the set of buddy class contacts. If there are more such contacts then the procedure may return to step to select a next contact from the set. Otherwise the procedure may progress to further steps such as step and or step of .

At step it may be determined if a subscription policy has been established for the sender of the presence subscription message. For example the contact information associated with the sender that is managed by the contact management service may include an association between the sender and the subscription policy for the sender. Alternatively a subscription policy may be in place for all subscribers or for some group of subscribers of which the sender is a member.

Examples of simple subscription policies include block and allow. That is block subscription requests from the contact or allow subscription requests from the contact. In an embodiment of the invention the subscription policy for the sender is determined by the set of contact object instances referenced by the authorized subscribers element of the MeContact object instance associated with the receiver. If a contact object instance associated with the sender is in set referenced by the authorized subscribers element then the sender is allowed otherwise the sender is blocked.

In an embodiment of the invention more sophisticated subscription policies are possible. For example more sophisticated subscription policies may block and or allow subscription to one or more subsets of the presence information of the subscriber. Allowing subscription to the aggregate status and the rich text description of the presence object and blocking subscription to other presence object elements is one possible example. Any suitable subset including all of the presence object elements and and or programmatic objects referenced by the presence object elements and may be the subject of a subscription policy and or a subscription.

If a subscription policy is in place for the sender of the subscription message the procedure may progress to step . Otherwise the procedure may progress to step . At step the user of the collaborative services platform associated with the collaborative presence that is the subject of the subscription may be queried for a subscription policy with respect to the sender of the presence subscription message. For example the publication service may present a user interface e.g. a graphical user interface or GUI displaying contact information associated with the sender and subscription policy options such as block and allow. The user may then select the subscription policy for the sender with the user interface.

At step the subscription policy selected by the user may be set for the sender. For example the subscription policy may be associated with the sender through the contact management service of the collaborative services platform or a reference to the contact object instance associated with the sender may be added to the set of references maintained by the authorized subscribers element of the MeContact object instance associated with the receiver. At step with a subscription policy with respect to the sender established it may be determined if that subscription policy is to block subscriptions. If the subscription policy is to block subscriptions from the sender then the procedure may progress to step . Otherwise the procedure may progress to step .

At step the collaborative presence subscription may be accepted. For example the subscription specified by the presence subscription message may be associated with the MeContact object associated with the receiver through the contact management service . In an embodiment of the invention the subscription specified by the presence subscription message is accepted by adding the contact object instance associated with the sender to the set of contact object instances referenced by the active subscribers element of the MeContact object instance associated with the receiver. Where subscriptions are more sophisticated than allow and block the subscription specified by the presence subscription message may be filtered with respect to the subscription policy associated with the sender before being accepted. For example if the subscription is to all presence information but the subscription policy limits subscription to aggregate status then the accepted subscription will be to aggregate status only. Together steps and may ensure that the subscription is accepted in accordance with the subscription policy.

At step it may be determined if the sender of the presence subscribe message is a buddy class contact of the receiver. For example the set of contact object instances referenced by the buddies element of the MeContact object associated with the receiver may be checked for a contact object instance associated with the sender of the presence subscribe message. The publication service may determine if the sender of the presence subscribe message is a buddy class contact of the receiver with the contact management service . If the sender of the presence subscribe message is a buddy class contact of the receiver then the procedure may progress to step . Otherwise the procedure may progress to step .

Having determined that the sender of the presence subscribe message is a buddy class contact of the receiver at step it may be determined if the receiver of the presence subscribe message is currently subscribed to the presence of the sender. For example the publication service application programming interface may have an enumerate subscriptions element enabling enumeration of a set of subscriptions placed by a specified contact and the set of subscriptions may be checked for a subscription placed to the presence of the sender. Alternatively or in addition contact information referenced by the buddies element of the MeContact object instance associated with the receiver may include an indication for each buddy class contact as to whether a presence subscription has been accepted by the contact.

If it is determined that the receiver of the presence subscribe message is currently subscribed to the presence of the sender then the procedure may progress to step . Otherwise the receiver may subscribe to the presence of the sender at step . For example it may be that the receiver of the presence subscribe message has previously performed the steps described above with reference to searching for the sender but that the sender was not online and the receiver is waiting at step before searching again. Now the sender has come online and sent out presence subscription messages. Rather than continuing to wait and then expend computational and network resources searching again for the sender in an embodiment of the invention the receiver may respond to the presence subscribe message from the buddy class contact with a reciprocal presence subscribe message. At step the reciprocal presence subscribe message may be sent to the buddy class contact as described above for step .

At step one or more presence notify messages may be sent to the sender of the presence subscribe message in accordance with the presence subscription accepted at step . An initial presence notify message may contain all presence information matching the accepted subscription or for example a set of presence differences over presence information that the receiver is known to already possess. Subsequent to the initial presence notify message additional presence notify messages may be sent to notify subscribers of collaborative presence updates. For example after one or more updates to the collaborative presence of a particular collaborative services platform user one or more presence notify messages may be sent to the publication service . For each subscription to the presence of the user the publication service may determine if the one or more subsets of presence information referenced by the presence notify message match the subscription. For each matching subscription the publication service may propagate the presence notify message to the collaborative services platform user that placed the subscription.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

The use of the terms a and an and the and similar referents in the context of describing the invention especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this invention are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.

