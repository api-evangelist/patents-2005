---

title: Replication-based propagation mechanism for pipelines
abstract: Processing database objects via a database pipeline having a plurality of stages. The invention provides a replication mechanism for propagating selected data from a database in one stage to a database in another stage without accessing a file system. Each database stage may have a plurality of input and output pipes. The invention enables a user to select a subset of the database objects in each stage for propagation to a subsequent stage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424493&OS=07424493&RS=07424493
owner: Microsoft Corporation
number: 07424493
owner_city: Redmond
owner_country: US
publication_date: 20050211
---
This application is a continuation in part of co pending U.S. patent application Ser. No. 10 420 239 filed Apr. 21 2003 entitled Producing a Pipeline and co pending U.S. patent application Ser. No. 10 420 134 filed Apr. 21 2003 entitled Asynchronous Pipeline both of which are hereby incorporated by reference herein.

Embodiments of the present invention relate to the field of data processing. In particular embodiments of this invention relate to propagating data between stages in a pipeline through replication.

With the emergence of the Internet and the interconnection of devices utilized in most every aspect of modern life a wide range of data has become available of an almost limitless diversity. Internet content may be thought of as data that has intrinsic value to a subset of users of web sites internet client devices and the like. This data can be configured to more efficiently address and therefore be of greater value to the subset of users. In many cases this greater value is created as a result of some type of data processing typically in the form of a sequence of stages or steps which may be implemented through use of a pipeline. A pipeline includes one or more stages which may provide manipulation of sets of data combine multiple sets of data into a single set of data through interlinking related data and the like. Often an output of a stage of a pipeline will serve as input to multiple subsequent stages each of which may represent a beginning of a new pipeline and or a continuation of the same pipeline. Since each pipeline stages relies on the availability of data from a preceding stage in the pipeline it is very important to have a reliable system for consuming input data and producing output data for subsequent stages.

Because of the wide range of data available from the Internet systems utilizing a large number of pipelines may be utilized to manipulate the data through use of the various stages. In some systems for example pipelines are interconnected with other pipelines through interconnected stages resulting in a large and intricate system of pipelines such that execution of the pipelines demands a significant amount of computer resources. Execution of pipelines may include performing services included in stages of the pipeline such as interlinking related data and the like. Because of business demands such as timeliness due to a competitive nature of a particular industry execution of stages for a pipeline is accomplished as fast as possible with a high reliability to remain competitive in the industry.

Previous systems employ attach and detach operations to propagate data across stages in a pipeline. However these previous systems do not scale well to large pipelines. For example the detach operation detaches the whole database because the detach operation does not support partial data propagation. Because a subsequent stage may not require all the database objects maintaining multiple copies of unwanted data is a waste of disk resources. Further the previous system consumes extra network bandwidth to copy the large files across stages. There is a need for a system that avoids transferring unneeded data by allowing a subset of the objects in a database to be selected and propagated. Further the detach and attach operations require use of the file system to copy the data to the next stage. Accessing the file system to copy data slows the data propagation and requires additional input output bandwidth.

In addition previous systems allow multiple input pipes but only one output pipe per stage because of the previous propagation mechanisms. To support multiple output pipes in the previous systems the number of databases needed increases significantly. Since each input pipe is an attached database and each output pipe is a detached database there is one database needed for each input pipe and one database needed for each output pipe. So if a particular stage in a pipeline consumes N input pipes and produces M output pipes there may be N M 1 databases needed to process a single stage. When running large quantities of stages on a computing device the complexity and disk space requirements for the pipeline increase significantly. Further because all the input pipes are attached as a database inefficient cross database queries are needed to process the input data and produce the output.

Accordingly a scalable and efficient system for propagating data from one content pipeline to another is desired to address one or more of these and other disadvantages.

Embodiments of the invention communicate data between different stages of a content pipeline. In an embodiment the invention reliably and efficiently propagates data between different database pipeline stages using replication. The invention provides a reliable system for consuming input data and producing output data for subsequent stages to use. In addition the invention is significantly more scalable than previous methods because the invention enables the configuration of a subset of database objects in an abstract way to any quantity of stages. This reduces the demand on disk space by eliminating the need to retain unwanted database objects and eliminating the need to copy data when propagating to a subsequent stage of the pipeline.

Further the invention allows for the creation of multiple input pipes and multiple output pipes from a single database. This allows a single database to be used for all the output pipes. Use of a single database reduces the disk storage requirements execution time and overall complexity of the pipeline implementation. The invention additionally reduces input output usage because the propagation occurs within the database without a need to access a file system.

In accordance with one aspect of the invention a method processes a plurality of database objects in a database via a database pipeline. The database pipeline has a plurality of stages. Each of the plurality of stages has at least one database associated therewith. The database has one or more input pipes and a plurality of output pipes. The method includes defining a plurality of output pipes for a database. The database has a plurality of database objects stored therein. The method further includes specifying a subset of the plurality of database objects in the database for each of the defined plurality of output pipes and defining a subscription as a function of the specified subset of the plurality of database objects. The method further includes propagating from a first one of the stages to another one of the stages the specified subset of the plurality of database objects as a function of the defined subscription and creating a publication as a function of the propagated subset of the plurality of database objects.

In accordance with another aspect of the invention one or more computer readable media have computer executable components for processing a plurality of database objects in a database. The components include a configuration module for defining a plurality of output pipes for one database in a stage in a pipeline. The database has a plurality of database objects stored therein. The components also include a selection module for specifying a subset of the plurality of database objects in the database for each of the plurality of output pipes defined by the configuration module. The components further include a replication module for propagating from the stage to another stage the subset of the plurality of database objects specified by the selection module.

In accordance with still another aspect of the invention a system representing a pipeline includes a configuration service for selecting a subset of a plurality of database objects in a database. The system also includes a first stage for executing a first data processing service to output the subset of the plurality of database objects selected by the configuration service. The database is associated with the first stage. The system also includes a second stage for executing a second data processing service. The second stage has another database associated therewith. The system also includes a data host communicatively coupled to the first and second stages for storing the selected subset of the plurality of database objects such that the executing of the first data processing service is asynchronous with respect to the executing of the second data processing service. The system further includes a propagation mechanism for replicating the subset of the plurality of database objects stored in the data host to the other database associated with the second stage.

In an embodiment the invention propagates data between content pipeline stages. Each content pipeline stage includes one stage with one or more input pipes processing and one or more output pipes. After a stage completes its processing the stage generates the outputs to be consumed by the subsequent stages. The invention enables a developer user or the like to configure a subset of database objects in each database for individual output. Selectively defining the articles of data in any output pipe reduces disk space usage and network traffic levels.

The invention also supports renaming or prefixing similarly named database objects coming from different sources. In this manner the source vendor or other supplier of the database objects may be identified by the prefix associated with the source in the name of the database objects. Further renaming the database objects allows data from different sources with the same schema to be stored within a single database. For example similar data may be coming from more than one provider and the renaming enables the data to be distinguished on the basis of a prefix used in the renaming. The pipeline may be configured from a configuration file e.g. written in extensible markup language . Appendix A lists the contents of an exemplary configuration file.

In general a propagation mechanism according to the invention is operable with one or more of the following pipelines a content selection pipeline an event processing pipeline a direct mailer pipeline an order processing pipeline a product pipeline a plan pipeline a purchase pipeline and any system where data is flowing from one stage to another stage. In one embodiment a propagation mechanism according to the invention communicates television guide listing data music metadata or the like from one stage to another in a pipeline.

The invention may include a system of interconnected pipelines having a plurality of stages that utilize data stores to provide asynchronous operation of stages both with respect to other stages within the pipeline as well as to stages included in other pipelines. A plurality of pipelines may be provided such as a first pipeline second pipeline third pipeline and fourth pipeline each of which target specific types of data. The pipelines are connected so that data from each of these pipelines may be combined and or propagated across other pipelines to provide desired output.

Referring first to an exemplary embodiment of a retailing purchase pipeline is shown. The retailing purchase pipeline includes a purchase check stage a payment stage and an accept stage . The payment stage includes a default payment component and a required payment component .

Data stores may be provided in a variety of ways to provide asynchronous functionality of stages both within a pipeline and between pipelines. Asynchronous pipeline operation is provided so that stages of the pipeline are not dependent on subsequent stages to perform data processing. The first stage may process a next available set of data without waiting to transfer processed data to the second stage by storing the processed data in the data store. Thus once input parameters of a stage are met such as by receiving data for processing the stage is able to process data. For example data may be stored from the first stage and data may also be communicated to the second stage at the same time. Therefore the first and second stages may interact with the data store without interfering with each other.

A data store data host or the like may be implemented as a logical storage device which may include one or more hardware data storage devices such as RAM storage media including hard disks and removable media and the like. For example a data host may include a first storage device that receives output of a third stage of the first pipeline and a second storage device configured to receive output of a second stage of the second pipeline. Both the first and second storage devices may be accessed by a third stage of the second pipeline as a data host. Although interconnection of exemplary data storage devices is contemplated data storage devices may take a variety of configurations to implement a data host. Additionally a data host may include logic to provide additional functionality. The data host may use the logic to perform a variety of functions. For example the data host may clone sets of data replace a set of data aggregate sets of data and the like.

Referring next to an exemplary block diagram illustrates a pipeline having multiple stages. In a system is configured for implementing a pipeline. Systems implementing pipelines may be configured in a variety of ways. For instance considerations such as processing power network connections type of data destination for data and the like may be addressed to provide a system of pipelines which correspond to a developer s needs. As shown in a system implementing a pipeline may include multiple computers computing devices or the like implementing first second and third stages and data stores . A first stage and a first data host communicatively coupled to the first stage are implemented on a first computer . The first computer is communicatively coupled to a second computer which operates to host a second stage a third stage and a second data host . The second stage implemented on the second computer may access the first data host implemented on the first computer which receives the output of the first stage . Likewise the third stage transfers its output to a third data host implemented on a third computer .

In one embodiment not shown a data host is not provided between every stage of the pipeline but rather is provided between stages in which a previous stage processes data faster than a subsequent stage. For example a stage which processes data faster than a previous stage e.g. a second stage may be directly connected to the second stage so that a data pathway is provided without using a data host. Such a configuration may be useful to conserve hardware and software resources. However in additional implementations data stores may also be provided before and after every stage in the pipeline.

Referring next to an illustration of an exemplary implementation shows a pipeline constructed as a collection of stages and services. is an illustration of an implementation in which a developer constructs a pipeline from a plurality of stages and . The developer interacts with the stages to specify characteristics of each of the stages to construct the pipeline. An interoperability manager configuration service or the like provides the corresponding details for generation of each such stage of the pipeline based on the specified characteristics. For example the developer specifies data processing to be performed by a first service of a first stage of the pipeline. The developer then specifies data processing to be performed by second third and fourth services of the second third and fourth stages respectively. In one embodiment processing data by a stage refers to executing a data processing service such as any of services by a stage. The developer may provide a desired order for execution of the stages by specifying interconnections. For example the developer may specify that the first stage outputs data to the second stage and continue in a like manner to the third stage which is output to a fourth stage .

The interoperability manager provides control pathways and shown as solid arrows in the illustration and data pathways shown as dashed arrows between the services based on the specified interconnections of the stages . By providing the control pathways and data pathways the pipeline is automatically generated. For instance the interoperability manager may provide a first control pathway by supplying a location to the second service of where to retrieve control information from the first service . The interoperability manager may provide the first control pathway by supplying a location to the first service of where to transfer control information to the second service . The location may include a memory address network path URL and the like.

The interoperability manager automatically provides data pathways between the services in a similar manner. However the data pathways may include data hosts . Therefore the interoperability manager may provide locations of the data hosts such as an address in memory network path URL and the like. The interoperability manager may include or coordinate with a propagation mechanism for replicating data between the stages .

Interconnections may be specified at varying levels of granularity. For instance a developer may specify an interconnection between stages . The interoperability manager then generates control pathways and data pathways automatically between the services .

A greater level of granularity may also be provided. For example a designer may specify a second data host to act as a sink for the first service of the first stage . The interoperability manager may automatically generate the second data pathway by providing a location of the data host to the first service . Similar granularity may also be provided to automatically generate the first control pathway by specifying that the second service of the second stage is to receive control information from the first service .

In one embodiment the invention includes a system representing a pipeline such as the pipeline of . The system includes a configuration service for selecting a subset of a plurality of database objects in a database associated with a first stage in the pipeline e.g. stage . The first stage executes a first data processing service such as service to output the subset of the plurality of database objects selected by the configuration service. A second stage e.g. stage executes a second data processing service such as service and has another database associated therewith. A data host communicatively coupled to the first and second stages stores the selected subset of the plurality of database objects such that the execution of the first data processing service is asynchronous with respect to the execution of the second data processing service. The system also includes a propagation mechanism not shown for replicating the subset of the plurality of database objects stored in the data host to the other database associated with the second stage. In general the invention is operable with any extensible automatic data driven propagation mechanism.

The exemplary configuration service of the invention includes means for selecting the subset of the plurality of database objects in the database. Hardware and software such as a data structure user interface application program application programming interface API and the like constitute means for selecting the subset of the plurality of database objects in the database. The propagation mechanism of the invention includes means for replicating the subset of the plurality of database objects stored in the data host to the other database associated with the second stage. Hardware and software such as an application program API database replication commands and the like constitute means for replicating the subset of the plurality of database objects stored in the data host to the other database associated with the second stage. The invention also includes means for defining a plurality of output pipes for the database in the first stage. Hardware and software such as a data structure user interface application program application programming interface API and the like constitute means for defining a plurality of output pipes for the database in the first stage.

The configuration service of the invention may access a data structure e.g. in a configuration file configuring a database in a stage. An exemplary data structure includes an input field an output field and an object field. The input field stores one or more values each representing an input pipe. The output field stores a plurality of values each representing an output pipe. The object field is associated with each of the plurality of values stored in the output field and identifies a subset of the plurality of database objects.

Referring next to an exemplary block diagram illustrates data propagation based on replication. The invention includes a publisher database a distributor database and a subscriber database . The invention defines publication from the producer stage e.g. publisher database which is consumed by the consumer stage e.g. subscriber database . There may be any number of publications defined on the publisher stage. In general subscription and publication are well known in the database context. However with the invention a stage may still access the database while subscribers are subscribing or the publisher is producing a new output pipe because the database is not detached and the data remains accessible in the single database.

In one embodiment the propagation mechanism of the invention is implemented using snapshot replication. Using this approach the invention maintains multiple publications such as Pub Pub and Pub per database stage in snapshot folders and the subscriber has an option to choose which version of data it is interested in. Subscribers have an option to choose which version of the published data to use. Although the default behavior is to choose the latest version some subscribers may choose earlier versions e.g. an earlier version may be helpful for testing a data related issue . The publisher publishes the data using a new publication e.g. with a new version number whenever there is new data to publish and the distributor maintains multiple publications. Multiple publications may be achieved with double buffering but the publisher does not overwrite any existing published data. The subscriber is able to read the data while the publisher is producing a new version.

In one embodiment one or more computer readable media such as computer readable medium have computer executable components modules or the like for processing a plurality of database objects in a database. The components interact with the publisher database the distributor database and the subscriber database . Exemplary components include a configuration module a selection module a replication module a subscription module a publication module a filter module and an initialization module . The configuration module defines a plurality of output pipes for one database in a stage in a pipeline. The database has a plurality of database objects stored therein. The selection module specifies a subset of the plurality of database objects in the database for each of the plurality of output pipes defined by the configuration module . The replication module propagates from the stage to another stage the subset of the plurality of database objects specified by the selection module . In one embodiment the replication module propagates the subset of the plurality of database objects specified by the selection module without accessing a file system. In particular because the replication is maintained by the database server abstract replication application programming interfaces APIs replicate the data directly to the subscriber. The subscription module defines a subscription as a function of the subset of the plurality of database objects specified by the selection module . For example the subscription module defines a subscription to include only those database objects in the subset of the plurality of database objects specified by the selection module . The publication module generates a publication as a function of the subscription defined by the subscription module . For example the publication module generates a publication that corresponds to the subscription by generating a publication having the specific data e.g. rows and columns requested in the subscription. The filter module filters the data used to generate the publication in module by removing a row or a column from the data. The initialization module initializes the plurality of output pipes defined by the configuration module .

Referring next to an exemplary flow chart illustrates operation of software implementing an embodiment of the invention in a database pipeline having a plurality of stages. Each of the plurality of stages has at least one database associated therewith. The database has one or more input pipes and a plurality of output pipes. A method processes a plurality of database objects in the database via the database pipeline. The method includes defining a plurality of output pipes for the database at and defining one or more input pipes. The database has a plurality of database objects stored therein. The method further includes specifying a subset of the plurality of database objects in the database for each of the defined plurality of output pipes at . The method also includes defining a subscription at as a function of the specified subset of the plurality of database objects and propagating from a first one of the stages to another one of the stages the specified subset of the plurality of database objects as a function of the defined subscription at . For example the subscription includes a request for the specified subset of the plurality of database objects. Further propagating includes propagating only those database objects identified in the subscription. Propagating the specified subset of the plurality of database objects includes in one embodiment replicating the specified subset of the plurality of database objects without accessing a file system. The method also includes creating and or generating a publication as a function of the propagated subset of the plurality of database objects at . In one embodiment defining the publication includes defining which objects are associated with which output pipe. Generating the publication includes publishing the data for the next stage to consume.

The method further includes processing that is customizable by a user developer or the like. For example the processing may include prefixing or adding a source identifier to each of the specified subset of the plurality of database objects to identify the source of each therein initializing one or more of the input pipes as a function of the created publication e.g. initializing the input pipes based on the configuration specified in the publication and initializing the defined plurality of output pipes. In addition the method may include filtering the selected subset of the plurality of database objects horizontally and or vertically at . During horizontal filtering one or more of a plurality of data rows are eliminated from the selected subset of the plurality of database objects. During vertical filtering one or more of a plurality of data columns are eliminated from the selected subset of the plurality of database objects. Further the invention enables generalized filtering such as shown below.

In one embodiment one or more computer readable media have computer executable instructions for performing the method illustrated in . The operations illustrated in are described in greater detail with respect to and .

Referring next to and exemplary flow charts illustrate the propagation of data across stages. In particular illustrates the initialization of input and output pipes. Initialization includes making connections between databases if needed between servers if databases are hosted on different servers and generally performing operations to prepare for the propagation. illustrates defining a subscription propagating data and deleting old subscriptions.

In one embodiment data replication occurs in the following manner. When a stage is ready for importing new data from the previous stage e.g. is ready for replicating the snapshot created by the previous stage software hardware and or the like associated with the stage operates to read the configuration file to get information about the stage and any data sources. For each DBSubscribeInputPipe defined in the configuration for this pipeline stage the software obtains information about that distributor publisher publication and the actual publication name e.g. specified as a version number . The software starts the subscription using a SQLDistribution COM object. The SQLDistribution COM objects abstracts the invocation of the agent which replicates the data at the subscriber. A Run method associated with the object returns only after the completion of the replication or if there is an error. After replication the software reads the configuration again to follow more steps if needed for this particular pipeline stage. After completion of processing the software publishes the new data to the next stages as illustrated and described with reference to and .

Referring next to and exemplary flow charts illustrate the creation and management of publications. illustrates an exemplary method involved in defining a publication. The method in generates the publication and deletes old publications. For example the invention maintains a counter representing a quantity of created publications by incrementing the counter each time a publication is created. If the invention determines that the incremented counter exceeds a pre defined threshold the invention deletes a previously created publication.

In one embodiment the invention publishes new data from a pipeline stage in the following manner. When the stage is ready for publishing software hardware and or the like associated with the stage operates to read the configuration file. For each publication specified in the publications list in the configuration file the software obtains a new version number and uses the obtained number as the publication name. The software creates the new publication for the output database. The publication is enabled for anonymous access by any subscriber. Listed below is an exemplary publication description.

The following pseudo code describes the addition of articles from the list specified in a corresponding dbObjectGroupId reference.

Every publication is named using the publication name and version number in the following form  . The software adds the publication to the publication collection for the output database and creates a snapshot of the newly created publication. In one embodiment a Snapshot Agent is used to create the snapshot. Alternatively a SQLSnapShot Common Object Model COM object is used to create the snapshot. The SQLSnapShot COM object abstracts the creation of the snapshots. An Initialize method validates control properties and establishes all database connections. A Run method of the object may be invoked to run the agent e.g. execute the replication process using the control properties . The Run method blocks and returns only when the snapshot is done and returns the appropriate return code . Instead of monitoring the agent about the status of the snapshot the Run method directly provides the required functionality. A Terminate method terminates the replication process and closes all database connections.

After the publication has been created the software creates an entry in a corresponding message store including the publication name and the version number such as shown below.

The software deletes the old publication leaving a predefined configurable number of publications. Alternatively or in addition a delay delete feature deletes a specific publication only after the publisher determines that the specific publication should be deleted and that no subscriber is using the specific publication.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in and to implement embodiments of the invention. In one embodiment the invention is implemented with SQL server replication the C programming language e.g. to program the SQL server or as a driver for the SQL database and the extensible markup language XML . While embodiments of the invention may have been described herein with reference to SQL server replication the invention may be implemented using any other database replication or transformation mechanism. Moreover while C is a high level language the logic of the invention may be implemented in any other high level language. Further XML is a universal format but the invention is operable with any other format as well.

The following examples further illustrate the invention. The sample configuration file below is for the stage name called xxx pipeline. It has defined an Input Pipe section an Output pipe section and a Processing section. Once the stage is done with its processing it will generate the Output pipe as defined in the OutputPipe. There can be any number of output pipes associated with a single stages as there might be different consumers asking for different data from this stage . If multiple consumers are using the same data then they can share the same output pipe produced by this stage. An output pipe in this example is a replication based publication with the name publicationName attribute version number associated with the output pipe . It contains the DB Objects as defined by the dbObjectGroupId. The follow code excerpt illustrates configuration of stages and input and output pipes of an exemplary pipeline.

The following code excerpt illustrates the selection of the subset of the plurality of database objects in the database.

For the exemplary xxxOutput output pipe defined above dbObjects defines the list of the database objects to be included in the output publication. There may be any type of database objects in the output publication e.g. table stored procedure user defined functions or views . With each database object the invention provides the ability to define the pre creation method to execute before replicating the data. For example the user developer or the like may specify tables to be truncated before replicating the new data. Alternatively or in addition if the user wants to preserve the old data there is no need to truncate. The drop function is useful for recreating the schema every time any stage gets the new data.

The xxxOutput output pipe defined above has a different set of database objects associated with it and has a destination prefix defined. This adds an xxx prefix to all the database objects when subsequent stages get the data. This is useful when one stage is consuming data from multiple stages having database objects with the same name. In particular this feature is useful when trying to merge data from different data providers which has already been converted to a common format with the same schema. For a different set of the database objects which may be used by different subsequent stages there is one output pipe DBPublishOutputPipe . The DBPublishOutputPipe element creates the anonymous publication which can be consumed by anybody so the publishers do not need to know about the subscribers.

The second pipeline stage yyy pipeline depends upon the output generated by the xxx pipeline as mentioned by the following input pipe.

This is a DBSubscribeInputPipe element which subscribes the data produced by the xxx pipeline for publication input. The data is replicated to the stage database using the properties defined at the publication level e.g. prefixing or any filtering . The invention also has the ability to execute some pre script e.g. before propagating the data and post script e.g. after propagating the data .

In the above structure publicationName is the name for the Output pipe e.g. the prefix of the actual publication name . The dbObjectGroupId field is the reference identifier for the list of database objects to include in this publication. The compress field indicates whether to compress the publication or not. The destinationPrefix field adds a prefix to all the database objects while replicating the data to distinguish database objects with the same name from different input pipes. The numberOfVersionsToKeep field specifies the number of versions to keep.

In the above structure the appName field represents a stage name of the input pipe name. The publicationName field represents the name of the output pipe e.g. publication name from the input stage. The dbName field identifies the database to which the data should be replicated. By default data is replicated to the stage database. The prescript field identifies a script to be executed before replicating the data. The postscript field identifies a script to be executed after replicating the data.

The type field specifies the type of the database objects e.g. table sproc view func . The sName field identifies the source database object name. The sOwner field identifies the source ownership. The dName field identifies the destination name e.g. the source name is the default . The dOwner field identifies the destination ownership. The preCreationMethod field identifies a pre creation method e.g. none delete drop truncate .

The order of execution or performance of the methods illustrated and described herein is not essential unless otherwise specified. That is elements of the methods may be performed in any order unless otherwise specified and that the methods may include more or less elements than those disclosed herein. For example it is contemplated that executing or performing a particular element before contemporaneously with or after another element is within the scope of the invention.

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

In view of the above it will be seen that the several objects of the invention are achieved and other advantageous results attained.

As various changes could be made in the above constructions products and methods without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

