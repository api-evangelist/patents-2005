---

title: Application programming interface for administering the distribution of software updates in an update distribution system
abstract: An application programming interface (API) for administering the distribution of software updates on an update service node is presented. The API provides a plurality of interface calls through which an administrator can establish rules by which software updates available to the update service node are distributed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08245218&OS=08245218&RS=08245218
owner: Microsoft Corporation
number: 08245218
owner_city: Redmond
owner_country: US
publication_date: 20050311
---
The present invention relates to software and computer networks and in particular the present invention relates to an application programming interface for administering the distributing of software updates in an update distribution system.

Nearly all commercially available software products undergo a continual revision process to repair or update features of the software. Each revision of a software product frequently requires adding new files replacing existing files with newer revisions deleting obsolete files or various combinations of these actions. This process of replacing older files adding new files and deleting obsolete files of a software product will be referred to hereafter as updating the product and the data collection including binary files data files update instructions metadata database data system registry settings security settings and the like used in updating the product will be referred to hereafter more simply as an update. 

Once a software provider has created an update for a software product either to fix a problem enhance security or add new features the software provider will want to make that update widely available to its customer base. Quite often such as when the update is directed at correcting a flaw in the product or addressing a critical security issue the software provider will want that update installed on the customers computers as soon as possible. Indeed most software providers have a business incentive to distribute software updates to their customers as quickly and as trouble free as possible.

The computer industry has experienced an explosive growth in the number of computers connected to networks and in particular to the Internet. Due to this explosive growth and due to the communication abilities available through a connection to the Internet the Internet has become an important and integral channel for software providers to distribute updates to their customers. In fact the Internet has become the primary distribution channel for many software providers to provide software updates to their customers. It is often in the best interest of software providers to distribute software updates over the Internet as electronic update distribution over the Internet reduces their overall costs and enables customers to obtain the software updates as soon as they are available. More and more frequently these software updates are conducted automatically over the Internet without any user intervention.

While the Internet is now commonly used as a conduit for distributing software updates from software providers several issues frequently arise. Two such issues include 1 efficiency relating to the update distribution infrastructure resources and 2 administrative control over the distribution and installation of software updates.

In regard to efficiency of the distribution resources networks including the Internet possess only a finite amount of communication resources often referred to as bandwidth. A finite amount of communication bandwidth frequently results in bottlenecks especially in regard to software updates for popular software products such as Microsoft Corporation s Windows family of operating systems and related productivity products. Such bottlenecks exist even when software updates are made available on multiple download locations distributed throughout the Internet. One reason that such bottlenecks occur is the unstructured access model made available by the Internet. For example if a first user at computer A requests the latest download of a software product the download passes through the first user s independent service provider ISP . Furthermore the request is treated as a single individualized access meaning that the request is treated independent of and unrelated to any other network traffic and or request. As such if a second user at computer B who also happens to have the same ISP requests the same download as the first user the request from the second user is also treated as a single individualized access. In this example the same download will be transmitted over the same infrastructure twice because each request was treated in isolation. Clearly if the number of users increases substantially the finite communication bandwidth will become a bottleneck. In this example which is quite common it would have been much more efficient if the download could have been cached at a local location and each user request satisfied from the local cache.

With regard to control of distribution many organizations especially large organizations have legitimate reasons to control the distribution of updates to their computers. For example unfortunately some updates have or introduce flaws frequently referred to as bugs that break features of a software product. These broken features may be insignificant but all too often they can disrupt a business s mission critical features. As a business cannot afford to lose its mission critical features a responsible business will first evaluate and test each software update within a controlled environment for some period of time prior to releasing the update to the remainder of their computers. This evaluation period permits the organization to validate whether an update will adversely affect a mission critical feature. Only after it has been satisfactorily determined that an update will not bring down any mission critical feature is the update permitted to be distributed to the remainder of the organization s computers. Clearly most organizations must exercise control over the installation of software updates on their computers.

Another reason that a business or an organization often needs to control distribution of software updates is to ensure consistency among the computers in the organization. It is very important for information service departments to have a standardized target platform upon which all computers operate whether it is for a word processor or an operating system. Without a standard software and computer maintenance may be unnecessarily complex and difficult.

Still another reason that local control is important is for billing purposes. In large organizations it is often inefficient to individually install software on a computer or to individually maintain licenses for a particular software product for each computer in the organization. Instead a single site license permits an organization to run a software product on numerous computers. Thus an organization may be required to report the number of computers running a product under the site license or may need to limit the number of computers running a product under a site license. All of these reasons often require local control over software update distribution.

In light of the various above identified issues relating to software update distribution what is needed is an extensible software update distribution architecture for providing control over the distribution of software updates as well as increasing their distribution efficiency. The present invention addresses these and other issues found in the prior art.

According to aspects of the present invention an update service node having an application programming interface for administering the distribution of software updates on the update service node is presented. The update service node includes an update store for storing software updates. The update service node also includes an update web service through which the update service node obtains software updates from a parent update service node over a communication network and through which the update service node distributes software updates to child update service nodes over the communication network. Still further the update service node includes an administration application programming interface API through which an administrator establishes controls the distribution of software updates to child update service nodes and client computers wherein the administration API is an object exposing a plurality of interface calls through which the administrator establishes said rules.

According to additional aspects of the present invention an application programming interface API for administering the distribution of software updates on an update service node is presented. The API comprises a get configuration interface call which returns a configuration interface object for reading and writing software update administration configuration values to the update service node. The API further comprises a get subscription interface call which returns a subscription interface object defined on the update service node. The API still further comprises a get update interface call which returns a update interface object corresponding to an update identifier passed in the get update interface call as well as a get updates interface call which returns an update collection object containing update interface objects corresponding to values passed in the get updates interface call. The API also comprises a get computer interface call which returns an client computer object corresponding to the a client computer associated with the update service node and that was identified in the get computer interface call and a get computers interface call which returns a computer collection object including client computer objects corresponding to client computers associated with the update service node. Additionally the API comprises a get group interface call which returns an target group object that was identified in the get group interface call and a get groups interface call which returns a target group collection object including target group objects corresponding to target groups on the update service node.

According to still further aspects of the present invention a software update distribution system for distributing software updates is presented. The software update distribution system comprises an update service node and an administration application programming interface API associated with the update service node. The administration API is an interface object exposing a plurality of interface calls for controlling the distribution of software updates. The administration API includes a get configuration interface call which returns a configuration interface object for reading and writing software update administration configuration values to the update service node. The API further includes a get subscription interface call which returns a subscription interface object defined on the update service node. The API still further includes a get update interface call which returns a update interface object corresponding to an update identifier passed in the get update interface call as well as a get updates interface call which returns an update collection object containing update interface objects corresponding to values passed in the get updates interface call. The API also includes a get computer interface call which returns an client computer object corresponding to the a client computer associated with the update service node and that was identified in the get computer interface call and a get computers interface call which returns a computer collection object including client computer objects corresponding to client computers associated with the update service node. Additionally the API includes a get group interface call which returns an target group object that was identified in the get group interface call and a get groups interface call which returns a target group collection object including target group objects corresponding to target groups on the update service node.

According to aspects of the present invention an update distribution system organized in a hierarchical fashion for distributing software updates is presented. is a pictorial diagram of an exemplary update distribution system formed in accordance with aspects of the present invention. According to the present invention at the top of an update distribution system such as the illustrated update distribution system is a root update service node . Software providers such as software provider distribute their software updates through the update distribution system by submitting the updates to the root update service node . According to aspects of the present invention software providers such as software provider may submit their software updates to the root update service node through a network such as the Internet .

A hierarchical update distribution system such as the exemplary update distribution system will likely include at least one other update service node in addition to the root update service node . As illustrated in the exemplary update distribution system includes root update service node and two additional update service nodes update service node and update service node . According to the present invention each hierarchical update distribution system is organized in a tree like structure underneath the root update service node . In other words each update service node in an update distribution system has zero or more child update service nodes. Thus while the exemplary update distribution system shows that each parent update service node i.e. the root update service node and update service node have only one child it is for illustration purposes only and should not be construed as limiting upon the present invention. Furthermore with the exception of the root update service node each update service node in an update distribution system has one parent update service node. Accordingly as shown in update service node is a child node to the root update service node and update service node is a child node to update service node . As can be seen each update service node with the exception of the root update service node can be both a child update service node and a parent update service node.

As illustrated in the exemplary update distribution system the root update service node communicates with update service node through the Internet . However it should be understood that this is illustrative only and should not be construed as limiting upon the present invention. Each update service node in an update distribution system need only be able to communicate with its parent and or children through some communication network. Thus while update service node communicates with its parent root update service node through the Internet it may alternatively communicate with its child update service nodes such as update service node via a local area network .

Also shown in update service node resides within a sub network of the local area network . As an example local area network may correspond to an organization s general corporate network and update service node represents the corporation s link to the update distribution system via its connection to its parent root update service node . Further sub network may correspond to an identifiable group of computers within the corporate network such as a test evaluation group a remotely located office or a mission critical group. As will be described in greater detail below according to aspects of the present invention an administrator on update service node is able to control the distribution of updates to update service node and ultimately to client computers.

It should be appreciated that each update service node including both the root update service node and update service nodes and is configured to distribute software updates to both child update service nodes as well as client computers. As shown in the exemplary update distribution system includes client computers . Each update service node including the root update service node distributes updates to child update service nodes and client computers according to local configuration information. According to one embodiment an administrator defines groups and associates update distribution rules with those groups. Each update service node has at least one distribution group.

As an example to illustrate how the update distribution system operates assume that local area network corresponds to a business organization s corporate network. According to one embodiment of the present invention an administrator on update service node may define multiple distribution groups for the corporate network including an evaluation group corresponding to the sub network including update service node and client computers and for evaluating the suitability of an update for the general corporate network as well as a general corporate group including the update service node and client computers .

With regard to the evaluation group the administrator includes the update service node as a member and associates rules with that group such that updates are immediately distributed to the evaluation group s members as they become available. Alternatively with regard to the general corporate group the administrator adds client computers and associates a rule such that updates are only distributed to the general corporate group members if specifically authorized by the administrator. Assume also that an administrator for child update service node creates a default group consisting of the client computers and in the evaluation sub network to which any new software update may be immediately distributed.

Continuing the above example a software provider submits a software update to the root update service node . According to rules established at the root update service node the update is eventually distributed to the corporate update service node . Upon receiving the update per the rules established by the administrator the corporate update service node distributes the update to the members of the evaluation group defined as only the child update service node but withholds the update from the general corporate group pending specific authorization to distribute the update to that group.

Continuing the above example upon receiving the update the evaluation update service node processes the update with respect to each defined group. In this example the evaluation update service node has only one group. However as previously mentioned in an actual implementation there may be multiple groups defined each with a unique set of associated distribution rules. For this example the evaluation update service node immediately makes the update available for distribution to client computers and . Client computers and may now be updated and the evaluation period process may begin.

Still continuing the above example when the administrator on the corporate update service node is sufficiently satisfied that the update is suitable for distribution over the entire corporate network the administrator then explicitly authorizes the update to be distributed to the members of the general corporate group. The corporate update service node correspondingly makes the update available to client computers . It should be understood that the evaluation update service node may also be included in the general corporate group. However because the evaluation update service node has already been updated no additional update related action is needed for distributing the update to the evaluation sub network .

As can be seen by the above example the present invention offers significant benefits in terms of local distribution control and download efficiency. In addition to the above described aspects of local distribution control significant savings in communication bandwidth are also realized. For example while the exemplary corporate network illustrated in includes five client computers the software provider s update was downloaded from the root update service node to the corporate update service node only one time. Clearly then as the number of client computers serviced by an update service node increases the communication bandwidth usage between a parent update service node and a client update service node remains constant thereby substantially reducing the amount of communication bandwidth that would otherwise be used. Additionally the update distribution system is both extensible and scalable. The update distribution system is extensible in at least two ways any number of child update service nodes may be added to a parent update service node and child update service nodes may also be a parent update service node. Each sub tree of the update distribution system may therefore be tailored to meet individual needs.

The update web service provides a common set of Web services through which client computers child update service nodes and a parent update service node can communicate with an update service node. For example with reference to in order for the child evaluation update service node to obtain a software update from the parent corporate update service node the client communicates through the parent s update web service . Similarly when a parent update service node such as root update service node has information including updates to communicate to its child update service node the parent update service node communicates through the child s update web service .

In an actual embodiment of the present invention the common set of Web services provided by the update web service generally referred to as the web services interface includes the following calls GetServerAuthConfig for obtaining authentication configuration information from a parent update service node GetConfigData and GetServerConfigData for obtaining parent update server node configuration information and properties GetServerCookie for obtaining an authorization token from a parent update service node GetRevisionIdList for obtaining an update list from a parent update service node GetUpdateData for obtaining update metadata and update payloads from a parent update service node and ReportEvents for reporting the update activity that occurred on an update service node to its parent update service node.

The client update module handles communications between a client computer and the update service node in regard to updates and update information stored on the update service node. The update related communications include but are not limited to distributing updates in response to client requests and providing a list of available software products and associated updates for the client computer. The client update module is also responsible for determining whether a client computer is authorized to obtain a particular update according to associated distribution rules and responds to a client computer with the update related information that the client computer is authorized to access.

The child update module handles update related communications between a parent update service node and its child update service nodes. The update related communications include but are not limited to identifying lists of software products and associated updates available to a child update service node as well as responding to update requests from a child update service node. The downstream update module is responsible for determining whether a child update service node is authorized to obtain a particular update according to associated distribution rules and responds to a child update service node with the update related information that the child update service node is authorized to access.

The reporting module generates update related reports such as which groups have or have not received a particular update which client computers have or have not downloaded installed an update what updates are available on the update service node and the like. These reports may be used internally such as by an administrator and also submitted to the parent update service node via the parent s update service interface . As described above it is often necessary for corporations to determine which client computers have a particular update installed such as for billing purposes or for maintenance purposes. Information reports generated by the reporting module may be the basis of these reports.

The authentication authorization module is responsible for authenticating i.e. determining the identity of a particular client computer or child update service node and determining whether a client computer or child update service node is authorized to access available updates at the update service node . To those client computers and child update service nodes that are authenticated and authorized to access updates on an update service node the authentication authorization module issues an authorization token that must be used in conjunction with obtaining updates. The issuance and use of an authorization token is described in greater detail below in regard to .

The administration API represents the application interface through which control of the update service node is exercised and through which updates ultimately are stored and distributed. When the update web service receives various update related requests from client computers and child update service nodes these requests are ultimately broken into calls into the administration API either directly or indirectly through the client update module and the child update module . In conjunction with the administration user interface or some other program installed on the update service node suitably configured to use the administration API an administrator ultimately controls all aspects of the update process for that update service node as well as any child update service nodes and client computers. An actual embodiment of an administration API is described in greater detail below in regard to .

Through the administration user interface administrators may configure and maintain an update service node via the administration API . Thus through the administration user interface an administrator creates modifies and deletes groups as well as associating rules for each group. Furthermore using the administration user interface an administrator establishes to which group a client computer or child update service node belongs. Through the administration user interface an administrator may also explicitly authorize the distribution of updates to client computers or child update service nodes configure the update service node to periodically query its parent update service node for new updates configure reporting parameters and view internal reports and the like. As mentioned above while the administration user interface permits an administrator to exercise control over aspects of the update service node another application residing on the update service node suitably adapted to operate with the administration API may be used instead of the administration user interface .

As mentioned above according to one embodiment of the present invention an update service node includes both an update content store and an update information store . The update content store stores the actual files representing the software updates such as binaries and patch files. In contrast the update information store stores information and metadata corresponding to the updates available on the update service node including the update files stored in the update content store . According to one embodiment the update content store and the update information store are both relational databases. While the exemplary update service node is shown as having two data stores the present invention should not be so limited. In an alternative embodiment both the update content store and the update information store may be combined in a single information store.

In accordance with aspects of the present invention a software update may be presented as being available on an update service node to client computers and child update service nodes even though the update is not stored physically in the update content store . More particularly rather than immediately downloading and storing the actual update files on an update service node a link referencing the update files on the parent update service node or elsewhere may instead be stored on the update service node. Thus if a client computer requests the update or a child update service node requests the actual update the update is then brought down from the parent update service node and stored in the update content store in preparation for delivering it to the client computer or child update service node. Those skilled in the art will recognize this type of update access is referred to as just in time downloading. In this manner an available update need not be distributed over the various network channels until it is actually requested. According to aspects of the present invention an administrator of an update service node may selectively determine whether to obtain software updates in a just in time manner.

While the above description of illustrates various components of an exemplary update service module it should be appreciated that other components of an update service module may also exist. Furthermore the above described components should be understood to be logical components not necessarily actual components. In an actual implementation the above identified components may be combined together and or with other components according to implementation determinations. Additionally it should be appreciated that while an update service node may be viewed as a server computer on a network in an actual implementation an update service node may be implemented on any number of types of computing devices. For example each update service node may be implemented and or installed on a single stand alone computer system or alternatively on a distributed computing system comprising multiple computing devices.

The client update module is an optional component for a root update service node depending on whether the root update service node provides software updates directly to client computers. For example with reference to root update service node would include the optional client update module as the root update service node that directly services client computer . However if a root update service node were not to directly service client computers the client update module could be omitted.

The reporting module is optional for a root update service node because a root update service node has no parent update service node to whom update reports are provided. However to the extent that update reports are desirable to the root update service node s administrator the reporting module may be optionally included.

In addition to comprising the logical components included in an update service node the root update service node also includes a software provider interface . The software provider interface provides the communication interface by which a software provider submits software updates directly to the root update service node and indirectly to the exemplary update distribution system .

Similar to the update service node of the above description of illustrates various components of an exemplary root update service module . However it should be appreciated that other components of a root update service module may also exist. Furthermore the above described components should be understood to be logical components not necessarily actual components. In an actual implementation the above identified components may be combined together and or with other components according to implementation determinations. Additionally it should be appreciated that while a root update service node may be viewed as a server computer on a network in an actual implementation an update service node may be implemented on any number of computing devices. For example the root update service node may be implemented and or installed on a single stand alone computer system or alternatively on a distributed computing system comprising multiple computing devices.

In order to better understand how an update is distributed from the root update service node throughout an update distribution system an illustration of an exemplary exchange between a parent update service node and a child update service node is warranted. is a block diagram illustrating an exemplary exchange between a parent update service node and a child update service node in propagating a software update from the parent update service node to the child update service node in accordance with aspects of the present invention. As can be seen the exemplary diagram is divided in half the left half of which corresponds to actions and events of the parent update service node and the right half corresponding to actions and events of the child update service node .

For purposes of discussion with regard to it should be further understood that the parent update service node may or may not be the root update service node in the update distribution system . Additionally for purposes of this discussion it is assumed that the parent update service node has been configured by an administrator such that the child update service node may not receive software updates unless explicitly authorized to do so by the administrator.

As shown in the exemplary exchange beginning at event the parent update service node receives a software update from a software provider either directly if the parent update service node is the root update service node or indirectly through the update distribution system . At some point after the parent update service node receives the software update from the software provider the child update service node begins a process for obtaining software updates from the parent update service node.

According to one embodiment a child update service node can be configured to automatically obtain the software updates available from a parent update service node on a periodic basis. More particularly an administrator via the administration user interface may selectively configure the child update service node to automatically obtain the latest software updates available on the parent update service node on a periodic basis. As one example an administrator may configure the child update service node to obtain the latest software updates from its parent update service node on a daily and or hourly basis as well as specify the time of day that the automatic update process is to commence. Other periodic schedules and criteria may also be utilized. Similarly an administrator may manually initiate the update process through the administration user interface .

To begin the updating process at event the child update service node authenticates and authorizes itself with the parent update service node . Authenticating and authorizing with the parent update service node provides an element of control over the distribution of software updates limiting update distribution to authorized update service nodes. Authenticating and authorizing techniques are well known in the art any number of which may be employed to authenticate and authorize a child update service node with the parent update service node . The present invention is not restricted to any one technique.

After properly authenticating and authorizing with the parent update service node at event the parent update service node returns an authorization token to the child update service node . According to one embodiment an authorization token is a time sensitive token providing the child update service node authorization to conduct further update activities with the parent update service node for a limited amount of time. Thus if the child update service node is not properly authenticated and authorized with the parent update service node no authorization token is returned and the child update service node is unable to perform any other update related activities except authentication and authorization. Similarly after the update token has expired the child update service node is unable to perform any further update related activities with the parent update service node except reauthentication and reauthorization.

After receiving the authorization token at event the child update service node submits a request to the parent update service node for a product update catalog along with the authorization token. A product update catalog represents a listing or table of contents of software products for which the parent update service node distributes software updates.

According to aspects of the present invention a child update service node is not required to propagate all software updates available on its parent update service node . For example with reference to the exemplary update distribution system of the corporate update service node may have site licenses to only a fraction of software products available on the root update service node . Accordingly it would be unnecessary for the corporate update service node to obtain all software updates available at the root update service node as most would never be used. Accordingly an administrator on an update service node may selectively establish which software product updates will be available on the update service node.

According to one aspect of the present invention the update product catalog obtained from a parent update service node identifies all software products for which updates are available whether or not the child update service node is configured to distribute updates for each product. However according to an alternative aspect of the present invention the update product catalog obtained from a parent update service node identifies only those software products for which the requesting child update service node is configured to distribute updates. For example limiting which software products are listed in the product update catalog may be determined according to the group or groups to which the child update service node belongs.

At event the parent update service node returns a product update catalog to the child update service node . At event the child update service node selects those products from the product update catalog for which the latest updates are currently desired. It should be noted that even though the product update catalog may list only those software products that the child update service node distributes the child update service node may be configured to obtain updates for different software products at different times or on different periodic schedules.

At event the child update service node submits an update synchronization request along with the authorization token identifying the selected products for whose updates the child update service node is currently seeking. Included in the synchronization request is information identifying the latest update available for a product on the child update service node . Information identifying the latest update for a product is hereafter referred to as an update anchor. Update anchors for each software product are typically stored in the update information store . In one embodiment an update anchor includes a revision number and a date associated with the revision number.

In response to the update synchronization request at event the parent update service node determines which if any new updates are available for the child update service node . As mentioned above this determination is based on the specific rules associated with particular software updates and the group or groups of which a child update service node is a member as well as the update anchor. For this example as previously mentioned the previously received software update was explicitly not authorized for the child update service node . Therefore the software update received at event is not determined to be available to the child update service node . Accordingly at event an update list is returned to the child update service node without identifying the software update received at event . According to aspects of the present invention the update list identifies all of the updates available on the parent update service node according to the synchronization request. In one embodiment the update list identifies each available update information by a unique identifier associated with an update.

At event because the update list is empty i.e. no updates are currently available on the parent update service node the update process of the child update service node simply delays or sleeps for a predetermined amount of time. According to the current example during this delay period at event an administrator at the parent update service node authorizes the software update received at event to be distributed to the child update service node .

At event the child update service node again begins the automatic update process by authenticating and authorizing itself with the parent update service node . In response at event the parent update service node returns an authorization token to the child update service node .

At event the child update service node submits a request along with the authorization token to the parent update service node for a product update catalog. At event the parent update service node returns the product update catalog to the child update service node . At event the child update service node selects the products for the update catalog for which updates are desired. At event the child update service node submits the update synchronization request identifying those selected products with the authorization token.

Because the child update service node has been authorized to obtain the software update previously received at event at event the parent update service node determines that the software update is available for the child update service node and includes corresponding update information in the update list. Thereafter at event the parent update service node returns the update list now identifying the software update received at event to the child update service node .

With an update list identifying an available update on the parent update service node the child update service node now has the information necessary to obtain the software update. According to one embodiment of the present invention a child update service node obtains the software update from the parent update service node in two parts obtaining update metadata and obtaining the update content or file hereafter referred to as the update payload. According to additional aspects of the present invention the update metadata describes pertinent aspects of the software update including but not limited to an update identifier that uniquely identifies the update revision number information associated with the software update whether the software update should be considered a priority language specific information relationships to other software updates location of the update payload for downloading purposes installation handler routines and the like.

Some of the reasons that it is often beneficial to download the entire software update in two parts i.e. the update metadata and the update payload is that the update payload is often substantially larger than the update metadata and the update payload is not always immediately needed i.e. needed for installation on a client computer if it is ever needed. Thus according to one embodiment of the present invention the update payload is downloaded separately from the update metadata and only when needed. Those skilled in the art will recognize this downloading technique as lazy downloading or alternatively as just in time downloading. According to aspects of the present invention an administrator may configure an update service node to obtain the update payload in a just in time fashion or immediately upon obtaining the update metadata. Furthermore in an alternative embodiment both update metadata and the update payload may be downloaded jointly.

As shown in with an update identified in the update list at event the child update service node requests the update metadata for the available software update according to its unique identifier in the update list. As with most other communication exchanges with the parent update service node the update request is submitted with the authorization token. It should be noted that while in the illustrated example all update metadata is downloaded in one access according to alternative aspects of the present invention not shown the update metadata may be downloaded in more than one access. For example in a first access only elements of the update metadata to are necessary to determine whether a software update is applicable and or desirable is first downloaded such as applicability rules and dependencies upon other software updates. Then after it is determined that an update is applicable and or desirable the remainder of the update metadata may be obtained. In response at event the parent update service node returns the update metadata for the software update child update service node which in turn stores the update metadata into the update information store .

In one embodiment the update metadata includes but is not limited to a unique identifier associated with a particular update a description of the update such as size of the update problems addressed by the update revision anchor information and the like update applicability rules such as whether the update requires a previous update to be installed whether the update must be installed separately whether the update supersedes other available updates and the like end user license agreement data and URL information for locating and or accessing the update payload if it is not stored on the parent update service node .

Optionally at event the child update service node submits a request to download the update payload from the parent update service node . In response at event the parent update service node returns the update payload to the child update service node which in turn stores it in the update content store .

Because update activity has now occurred on the child update service node at event the child update service node generates and submits an update report to the parent update service node outlining the update activities that have just recently occurred. Thereafter the child update service node again delays until the next time that the update process is scheduled to run not shown .

Those skilled in the art will appreciate that the above described events are for illustration purposes and reflect one particular exemplary set of events and circumstances. Clearly other events may also occur according to specific details and circumstances which will cause some variation to the above described events. Additionally it should be understood that while the child update service node is obtaining the latest available software updates from the parent update service node the child update service node may simultaneously be processing update requests from its child update service nodes. Accordingly the above sequence of events should be viewed as illustrative only and not limiting upon the present invention.

After having established communication parameters with the parent update service node at block the child update service node obtains a product update catalog describing software products for which the parent update service node provides distributes updates. At block the child update service node selects those software product updates for which updates are currently sought. At block the child update service node submits an update synchronization request to the parent update service node including both the authorization token and an anchor associated with the selected software products identifying the current revision and updates already on the child update service node.

In response to the update synchronization request at block the child update service node obtains an update list from the parent update service node synchronized according to the software updates available on the parent update service node according to what is currently stored on the child update service node. As mentioned above the update list identifies by a unique identifier those software updates on the parent update service node that are available to the child update service node. Thereafter the exemplary subroutine terminates.

With reference again to after having obtained a synchronized update list from the parent update service node at decision block a determination is made as to whether any software updates are currently available for downloading from the parent update service node. This determination is made according to whether there are any update identifiers listed in the synchronized update list. If no software updates are currently available for downloading the exemplary routine proceeds to delay block where the exemplary routine delays sleeps until the next update period occurs. Alternatively if there are updates available for downloading from the parent update service node at block the child update service node obtains the updates from the parent update service node. Obtaining available updates from the parent update service node is described below with regard to .

According to one embodiment at block the child update service node obtains the update payload corresponding to the selected update identifier from the parent update service node and stores the update payload in the update content store . Optionally the update content need not be immediately downloaded to the child update service node. As previously mentioned a child update service node may be selectively configured to download updates from a parent update service node in a just in time fashion. According to this optional treatment as illustrated in rather than proceeding from block to block the exemplary subroutine optionally proceeds from block to decision block .

At decision block after having obtained the update metadata for the selected update identifier and optionally the update payload a determination is made as to whether there are any additional update identifiers in the update list. If there are additional update identifiers at block the next update identifier in the update list is selected and the subroutine returns to block for additional processing. The routine continues until at decision block it is determined that there are no more update identifiers in the update list whereupon the exemplary subroutine terminates.

Returning again to after having obtained the available updates from the parent update service node at block the child update service node reports the update activities to the parent update service node. Thereafter at delay block the exemplary routine delays sleeps for a predetermined amount of time until the next update period and then proceeds to block to repeat the above identified update procedures.

As illustrated in at decision block even when no updates are available on a parent update service node a child update service node may be optionally configured to report its update activities to the parent update service node. According to this alternative configuration when there are no updates available the exemplary routine may proceed to block to report the update activities.

At decision block a determination is made as to whether there are any available updates for the identified software product. This determination is made according to metadata for the software product stored in the update information store according to the update anchor provided by the child update service node and according to distribution rules associated with the group to which the child update service node belongs. According to this determination if there are updates available at block unique update identifiers associated with the available updates are written into an update list. After having written unique update identifiers for available updates into the update list at decision block a determination is made as to whether there are any more additional software products identified in the update synchronization request. If there are additional update software products in the update synchronization request at block the parent update service node selects the next software product identified in the update synchronization request and returns to decision block for determining whether there are available updates for the selected software product. Alternatively if there are not more software products identified in the update synchronization request at block the update list is returned to the child update service node. Thereafter the exemplary subroutine terminates.

As mentioned above an update service node is administered through the administration API via the administration user interface or some other similarly equipped module. To better understand how the administration API operates is a pictorial diagram for illustrating how the administration API is utilized with regard to configuring an update service node to distribute software updates to client computers.

As shown in an administrator uses the administration API to generate subscriptions and groups . The update service node during an update process uses the updates available to that update service node as well as the subscriptions and groups to distribute the updates to client computers such as client computers .

As those skilled in the art will appreciate an administrator generates a subscription to updates for a particular product or product family as well as the class of update. For example a product may be Microsoft Corporation s Internet Explorer product and a subscription would indicate this product in waiting for available updates. Similarly a product family would typically indicate a number of products such as Microsoft Corporation s Office as a product family that includes numerous identifiable products. Subscriptions also typically identify the type of update that is approved for download onto client computers. For example the type of an update may be critical severe general etc.

According to one embodiment of the present invention client computers are organized into groups and subscriptions and updates are applied to groups. In an actual embodiment each client computer belongs to two groups an all computers group and one other group. According to this actual embodiment the update service node has defined the all computers group and one other an unassigned computers group. Through the administration API the administrator is free to define any number of other groups and assigned client computers to a group. Failing to assign a client computer to a group leaves the client computer in the unassigned group. In short according to this embodiment a client computer belongs to the all computers group and one other. Groups may include any number of clients computers. Groups of client computers for applying software updates are illustrated in as boxes and .

According to an actual embodiment the administration API is the interface through which Microsoft Corporation s Windows Software Update Services is configured and administered. In this embodiment the administration API is generally implemented by or accessible through the interface object IUpdateServer. The description of an actual embodiment of the IUpdateServer interface object is listed at the end of this section as Table 1. This IUpdateServer interface object is part of the administration API document included as part of the U.S. Provisional Application No. 60 553 042 filed Mar. 12 2004 which is incorporated herein by reference. However various interface calls identified in Table 1 are generally described below in regard to .

The configuration information interface call provides access to configurable and readable values of the update service node including but not limited to available languages who is the parent update service node and location for that parent update service node proxy servers and addresses the mode in which the update service node synchronizes updates with its parent update service node and the like. In an actual embodiment as described in Table 1 the configuration information interface call is the GetConfiguration interface call on the IUpdateServer object which returns an instance of an IConfiguration interface object for the update service node. The IConfiguration interface object is described in greater detail in the incorporated API of the provisional application.

The subscription information interface call provides access to subscription information including but not limited to the status of the most recent subscription efforts when the next subscription effort e.g. downloading a particular update to a client computer will be completed the frequency of the subscription synchronization and the like. In an actual embodiment there are at least two different interface calls to obtain subscription information. The GetSubscrition interface call on the IUpdateServer object returns a ISubscription interface object corresponding to a specific subscription on the update service node and the GetSubscriptions interface call returns a collection of ISubscription interface objects. Additionally a subscription is created using the CreateSubscription interface call which creates an empty subscription on the update service node. Details of the ISubscription interface object are described in the incorporated API of the provisional application.

The update service node status interface call provides access to update service node status including but not limited to the currently deployed updates available updates and the like. In an actual embodiment the GetUpdatesSummary interface call returns a summary collection object describing overall update summary information for the update service node. Details regarding this interface call are described in the incorporated API of the provisional application.

The get updates interface call provides access to information regarding available software updates. More particularly the interface call provides access to all software updates available in the system. In an actual embodiment there are several interface calls to obtain update information. The GetUpdate interface call returns an IUpdate object that provides information regarding a specific update on the system. Additionally the GetUpdates interface call returns a collection of IUpdates objects available to the system. Additional details regarding these interface calls is provided in the incorporated API of the provisional application.

The get computers interface call provides access to the client computers associated with the update service node. In an actual embodiment there are at least two interface calls to access information regarding the various client computers including but not limited to a GetComputer interface call that returns an IComputer object corresponding to a client computer identified in the interface call and a GetComputers interface call that returns a collection of IComputer objects the collection includes all client computers associated with the update service node. As above additional details regarding this interface calls on the IUpdateServer object are described in the incorporated API of the provisional application.

The get groups interface call provides access to the groups defined on the update service node. As mentioned above in an actual embodiment each client computer belongs to the all computers group and one other group. If a client computer is not assigned to a group that client computer defaults to the unassigned group. In at least this actual embodiment a number of interface calls are available including but not limited to a GetTargetGroup interface call that returns an ITargetGroup object corresponding to a group identifier passed to the interface call and a GetTargetGroups interface call that returns a collection of ITargetGroup objects corresponding to all groups defined on the update service node.

Those skilled in the art will appreciate that while some of the interface calls have been described they are not an exhaustive set of interface calls. Indeed an actual embodiment of an administration API includes numerous interface calls the majority of which have not been specifically described.

With regard to the following table Table 1 the abbreviation WUS is an acronym for Windows Update Server.

While various embodiments including the preferred embodiment of the invention have been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

