---

title: Configuration proxy service for the extended firmware interface environment
abstract: A method of abstracting information through object interfaces is described. The object interfaces are used to present platform device information in a pre-boot service environment. Firmware tables such as Advanced Configuration and Power Interface and System Management Basic Input/Output System may be used to auto-configure diagnostic test suites through an abstracted software interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07421620&OS=07421620&RS=07421620
owner: Intel Corporation
number: 07421620
owner_city: Santa Clara
owner_country: US
publication_date: 20050407
---
This application is a continuation of U.S. application Ser. No. 10 052 830 filed on Jan. 15 2002 by inventor Russell L. Carr now U.S. Pat. No. 6 901 534 entitled CONFIGURATION PROXY SERVICE FOR THE EXTENDED FIRMWARE INTERFACE ENVIRONMENT and priority is claimed thereto.

The present invention pertains to the field of field diagnostics support. More particularly the present invention relates to a method to provide auto configuration of diagnostic test models in the field to match the system s configuration.

Firmware is a set of hardware setup programs. Firmware is typically stored in flash memory or read only memory. Firmware includes programs such as device drivers which are used to activate the hardware of a standard computer system. For example a personal computer may include hardware for performing operations such as reading keystrokes from a keyboard transmitting information to a video display or sending information to a printer.

The operating system OS performs functions such as scheduling application programs and resolving conflicts among applications that request access to the same resources. Moreover operating systems communicate service requests from application programs to the hardware device drivers. Examples of operating systems include DOS Windows and UNIX.

The Extensible Firmware Interface EFI is an architecture specification. The EFI provides an interface between the OS and the platform firmware. The interface is in the form of data tables that contain platform related information and boot and runtime service calls that are available to the OS and its loader. The EFI helps provide a standard environment for booting the OS and running system maintenance applications.

The EFI provides a coherent scalable platform environment. The specification defines a complete solution for the firmware to completely describe platform features and surface platform capabilities to the OS during the boot process. The EFI definitions are compatible with both 32 bit Intel Architecture IA 32 and 64 bit Intel Architecture IA 64 based processors.

Once the platform firmware has begun to retrieve the OS loader image the OS loader continues to boot the complete operating system at approximately the same time. In doing so the OS loader may use the EFI boot services and interfaces defined by EFI or other required specifications to survey comprehend and initialize the various platform components and the OS software that manages them. The EFI runtime services and console services are also available to the OS loader during the boot phase.

The configuration proxy service provides configuration information for the interface between the OS and the platform firmware. For one embodiment of the invention the interface is the EFI service environment. The configuration information is abstracted from the platform s underlining configuration reporting standards prior to booting the system. The machine is booted to the EFI service partition prior to running the OS. Once the operating system begins running the OS activity is given priority over the EFI service environment and the configuration proxy operation is terminated.

The configuration proxy is designed to provide a high degree of isolation between the test algorithms and the details of a platform s implementation. Thus the configuration proxy is portable across different platforms and execution environments. The portability of the configuration proxy will help reduce maintenance and development costs of test modules. Test programmers will not need to write and maintain their own discovery algorithms. Instead of designing test algorithms specific to a given platform the configuration proxy allows test algorithms to be used with multiple platforms by obtaining necessary configuration information through object class definitions. This removes dependence on independently developed and maintained methodologies. The underlying discovery infrastructure will be allowed to evolve independently of the tests in support of new architectures and features.

The discovered or saved information can be displayed by a local console or by remote applications that use the data. The discovered or saved information can also be used to auto configure a test suite. Further the information can be assessed by tests directly as in operation of .

Aside from diagnostics the configuration proxy can be used with other applications such as utilities. The applications are used locally within the EFI service environment or remotely through protocols through the service environment. In the event that the applications are remote the applications would be accessed through an EFI driver stack via either a local area network or a serial bus. If remote the applications may be hosted by any operating system.

As previously stated once the OS begins running in operation the OS activity is given priority over the EFI service environment and the configuration proxy operation is terminated in operation .

The test control module utilizes the configuration proxy to enumerate the system configuration information from the platform s firmware tables . The configuration information is retrieved either in object format as retrieved from the firmware tables or plain text form. The configuration proxy is not designed to be modified by users. For an embodiment of the invention the platform firmware information obtained by the configuration proxy is generated by whatever firmware tables are available. All abstracted information is made available and the tester is free to use whatever information is applicable.

For another embodiment of the invention the test control has knowledge of exactly which devices exist. In this embodiment the test control discovers which devices are available gathers only information needed by the diagnostic tests and applies the tests using the information gathered. There is a possibility that tests which access the test control will require more information.

For yet another embodiment of the invention the tests are able to access the configuration proxy directly without having to access the test control . Tests may use the information from the configuration proxy to access hardware through the drivers or port addresses which were configured by the EFI firmware rather than having to have apriority knowledge of the system s configuration.

The platform s firmware tables may include System Management Basic Input Output System SMBIOS tables Advanced Configuration and Power Interface ACPI tables and Intelligent Platform Management Interface IPMI tables. The firmware setup programs are part of the discovery process at system power up. The firmware is stored in system memory. The Basic Input Output System BIOS performs initial queries after power up. Thereafter the operating system initializes itself and obtains information from industry standard tables such as SMBIOS and ACPI. Thus the configuration proxy utilizes the same discovery mechanisms as the operation system in a pre boot service environment.

The configuration proxy takes advantage of the information gathering process administered by the EFI environment. Element is a set of device drivers which enable the communication between the configuration proxy and the platform firmware tables by activating the firmware tables. The device drivers are unique depending on whether the architecture is based on IA 32 or IA 64.

When ready to run diagnostics the test control using the content of the test configuration files invokes diagnostic providers . Diagnostic providers are middleware interfaces that abstract test modules from the test session control application . This middleware may be implemented as either an EFI application or an EFI hosted python script. The configuration information gathered by the configuration proxy may be used to auto configure the diagnostic test suites. The diagnostic provider calls test modules to execute the tests on hardware . For an embodiment of the invention the test models are responsible for initiating call backs to configuration proxy in order to gather the appropriate method to access the device under test.

Further the diagnostic provider relies on Field Replaceable Units FRU isolators to identify failed replacement units. The FRU isolators can utilize the configuration proxy to access the SMBIOS structures in the platform tables and other configuration information to identify failed FRU s.

Aside from invoking diagnostic providers the test control may also store information in system logs . The information stored in the system logs can then be assessed by the diagnostic console through an application programming interface provided by test control . In some embodiments of the invention the system logs may be accessed out of band through an apparatus such as a system management controller.

In addition to supporting abstractions of sources of system configuration information the configuration proxy also provides an interface for managing the stored configuration data. The external software interface to the configuration proxy service is abstracted by an interface library . Each device table may be accessed through a specific group of objects and methods as defined by the specific device driver. For example ACPI has a predefined set of objects and methods required to access ACPI information from the tables. Similarly SMBIOS has a set of predefined objects and methods. The objects and methods of each firmware device conform to their respective industry standards.

The external software interface to the configuration proxy service is abstracted by the interface library . The configuration proxy provides persistent storage of the configuration data. The configuration proxy relies on the content of the persistent storage file to keep track of the previously detected configuration information retrieved from the ACPI tables and other platform configuration information sources.

The recently detected configuration is stored in working storage . A working storage is maintained by the configuration proxy . The working data reflects the discovered configuration. The discovered data can be different from the expected data. Thus the architecture identifies installed devices or objects that are not responsive by comparing the persistent data with the working data.

The persistent data however should be pre configured because the persistent data is a snapshot of the expected configuration. Another operational mode such as reboot will detect if the configuration has changed. The pre configuration is performed during an operational mode by putting the tables into file format and then downloading the file into the persistent storage . Moreover the persistent data can be used to detect if the firmware is bad at machine bootup by comparing the expected configuration to the detected configuration.

In addition the pre configured data is also useful for certification purposes. For example the platform configuration can be certified by comparison with the pre configured persistent data. The persistent data is updated each time a change occurs. Therefore there should be no changes that the persistent data does not know about.

Embodiments of the present invention may be implemented in hardware or software or a combination of both. However preferably embodiments of the invention may be implemented in computer programs executing on programmable computer systems each comprising at least one processor a data storage system including volatile and non volatile memory and or storage elements at least one input device and at least one output device. Program code may be applied to input data to perform the functions described herein and generate output information. The output information may be applied to one or more output devices in known fashion.

Each program may be implemented in a high level procedural or object oriented programming language to communicate with the computer system. However the programs may be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language.

Each such computer program may be stored on a storage media or device e.g. hard disk drive floppy disk drive read only memory ROM CD ROM device flash memory device digital versatile disk DVD or other storage device readable by a general or special purpose programmable computer system for configuring and operating the computer system when the storage media or device is read by the computer system to perform the procedures described herein. Embodiments of the invention may also be considered to be implemented as a machine readable storage medium configured for use with a computer system where the storage medium so configured causes the computer system to operate in a specific and predefined manner to perform the functions described herein.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modification and changes may be made thereto without departure from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense.

