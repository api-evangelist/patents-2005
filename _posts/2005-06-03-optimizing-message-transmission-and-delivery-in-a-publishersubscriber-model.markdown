---

title: Optimizing message transmission and delivery in a publisher-subscriber model
abstract: Systems and methods for reducing the latency incurred during the publication of a message in a message publication system are provided. In a message publication system wherein the publishing component and the receiving component are located within the same processing space, several of the latency components that are usually unavoidably incurred may be eliminated. In such a system, the messaging queue is not used as a medium between the two components but is instead used as a secondary back-up storage. This results in the elimination of one latency component as the message is directly published from the publishing component to the receiving component. Further time reductions or optimizations occur when the durability, or reliability, of the message publication is not a concern and the messaging queue can be completely disregarded. Yet another optimization occurs when the identity of the subscriber is known in advance by the publisher.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08028085&OS=08028085&RS=08028085
owner: Microsoft Corporation
number: 08028085
owner_city: Redmond
owner_country: US
publication_date: 20050603
---
The interaction between a publisher and a subscriber is a necessary feature in a message publication environment. In such an environment a publisher routes messages to a subscriber through a persistent and dynamic storage center. This center which may be thought of as a message data store a subscription store and a middle man between the two components incorporates a designated storage queue for each subscriber of the system.

In a typical message publication environment when the publisher possesses a message to be published a publishing component contacts the subscription store to identify the potential subscribers to receive the message. Once a list of subscribers for the message to be published is obtained the message is pushed into the designated queue of each subscriber. In order for each subscriber to receive the message a polling mechanism is employed. Specifically a message receiving component pulls the message from the storage queues and delivers the message to each subscriber. After the message has been received and processed by a subscriber it is removed from that subscriber s storage queue.

The message delivery process outlined above incurs several latencies throughout the course of evaluating sending delivering and removing a message. Time Te is the evaluation time and occurs at the beginning of the process after the publication interface has been provided with a message to be published. Te is the amount of time necessary to consult the subscription store in order to review and obtain a list of subscribers who can receive the message. The next encountered latency is time Tq the queue time that is required to push the message to the queue of each subscriber identified on the subscriber list. Tp the poll time is the latency incurred when the receiving component polls the subscriber s queue and takes the message out to be published and processed. An additional latency component in the message delivery process Tc the clean up time occurs during the clean up process in which the message is removed from the subscriber s queue. This latency occurs after the message has safely been polled to the subscriber and the subscriber has completely processed the message.

Generally the latency components discussed above are not desirable. Accordingly there is a need for systems and methods that reduce or even eliminate entirely one or more of the latency components involved in the transmission and publication of a message in a publisher subscriber model. The present invention satisfies this need.

The present invention is directed to a system and method for reducing the latencies associated with the publication of a message to subscribers in a message publication system that implements a publisher subscriber model. Such a system typically comprises a publishing component a subscription and message store and one or more receiving components each associated with one or more subscribers. The subscription and message store typically comprises a number of message queues each corresponding to one of the subscribers to the system. When the publishing component receives a message to be published the publishing component normally determines from the subscription store which subscribers are to receive the message and then stores a copy of the message in the message queues of each of those subscribers. Each receiving component typically polls the message queues of each of the subscribers for which it is responsible to determine whether any new messages have been placed in any of those message queues. When a new message is detected in the message queue of a subscriber the receiving component retrieves the message from the message queue and delivers it to the subscriber. Typically the message is retained in the message queue but is marked to indicate that the receiving component has retrieved the message and delivered it to the subscriber.

According to the present invention the conventional message publication process is improved for subscribers whose receiving components reside in the same process space as the publishing component by reducing the latencies normally associated with message publication in such a system. In particular after receiving a message to be published and identifying a subscriber to which the message is to be published where that subscriber s receiving component resides in the same process space as the publishing component the message is instead transferred directly from the publishing component to the receiving component without requiring that the receiving component retrieve it from a message queue associated with the subscriber.

In one embodiment the subscription and message store is bypassed altogether in which case the durability of the message is not preserved. In another embodiment the durability of the message is maintained by storing it in the message queue associated with the subscriber even though it has also been published directly to the receiving component. In that embodiment while adding the message to the subscriber s queue the message is marked in the message queue as if it had been retrieved from the queue by the receiving component.

In other embodiments in which the identity of each subscriber to which a message is to be published is already known the conventional step of accessing the subscription store to identify the subscribers to which a message is to be published can also be eliminated resulting in a further optimization of the message delivery process.

Typically the subscription and message store is a dynamic and persistent data store e.g. a database that maintains information regarding potential subscribers and the message types that each subscriber such as subscribers . . . is interested in receiving. It may contain a number of message queues each associated with a different subscriber. Generally there is one message queue for each subscriber. For example as shown in there are three queues for three different subscribers Designated Queue A Designated Queue B and Designated Queue C. It is understood however that the present invention is not limited to any particular number of subscribers and corresponding message queues. An example of such a system is a document collaboration system where users may subscribe to receive specific types of documents of their choosing. When a new document is made available all of the subscribers that have indicated interest in this type of document are notified and the new document is published to the subscribers.

In a conventional publisher subscriber message publication system when the publisher has a message to be published it posts the message to the publishing component via an application programming interface API exposed by the publishing component. The publishing component will then determine from information in the subscription store which subscribers should receive the message. For example the subscription store may maintain information about each subscriber and the types of messages to which the subscriber has subscribed. Once the subscribers to which the message is to be published have been determined the publishing component will store a copy of the message in the respective message queues of each subscriber.

Each receiving component such as receiving component typically polls the message queues of each of the subscribers for which it is responsible to determine whether any new messages have been placed in any of those message queues. When a new message is detected in the message queue of a subscriber the receiving component retrieves the message from the message queue and delivers it to an in memory component of the subscriber. Typically the message is retained in the message queue but is marked for example by setting a flag in the message queue structure to indicate that the receiving component has retrieved the message and published it to the subscriber. The marking process is necessary in that it allows the receiving component to only retrieve and publish each message once by indicating the messages that have previously been retrieved and published.

A receiving component typically services multiple subscribers. In one embodiment this is achieved by establishing within the receiving component a plurality of data partitions. Generally there is one data partition for each subscriber. For example in the system illustrated in there are three data partitions Data Partition A Data Partition B and Data Partition C one for each of the subscribers and . Again however it is understood that the present invention is not limited to any particular number of subscribers and corresponding data partitions.

As used herein the term publisher generally refers to any component part or portion of a system that functions to transmit or otherwise send a message to another component part or portion of the system. The term subscriber generally refers to any component part or portion of a system that functions to receive a message. The terms publish publishing publication and variations thereof refer generally to the process of transmitting sending delivering or otherwise providing a message to one or more subscribers. The term publishing component generally refers to program code in the form of a component program module object routine procedure or otherwise that when executed is capable of receiving a message to be published and determining which subscribers should receive the message. The term receiving component generally refers to program code in the form of a component program module object routine procedure or otherwise that when executed is capable of receiving a message intended for a subscriber by retrieving it from a data store or otherwise and delivering it to the subscriber.

As discussed in the Background section several latencies occur in a conventional publisher subscriber model. For example time Te is the amount of time necessary to consult the subscription store in order to review and obtain a list of subscribers to which the message of interest should be published. Time Tq is the time required to push the message to the queue of each subscriber identified on the subscriber list. Tp is the latency incurred when the receiving component polls the subscriber s queue and takes the message out to be published to and processed by the subscriber and Tc is the latency that occurs during the clean up process in which the message is removed from a subscriber s queue.

Another feature of the traditional publisher subscriber model discussed above is that the durability of a message is generally guaranteed. Message durability refers to the reliability of the message being published. A non durable message is one in which the message can afford to be lost and a durable message is one in which the message once published must be received by all of the indicated subscribers. For the publication of a durable message certain measures are taken to ensure the message will not be lost and will be received by the subscriber. These measures exist in the traditional model where messages are routed through the message queues. And it is these measures that result in the latencies Tq Tp and Tc.

The inventors have recognized that certain of the latencies typically experienced in a conventional message publication system can be reduced or eliminated when both the publishing component and the receiving component for a particular subscriber s reside in the same process space on a computer system in which the message publication system is executing. In such a case the inventors have recognized that a message may be transferred directly from the publishing component to the receiving component as illustrated by line in . The inventors have also recognized that further optimizations can be achieved when the durability of a message is not required and when the subscribers to which a message should be published are predetermined.

Referring to at step the publishing component receives a message from publisher to be published to one or more subscribers e.g. subscribers . . . . At step the publishing component accesses the subscription store in order to determine the subscribers to which the message should be published. At step the publishing component forms a list of subscribers to which the message should be published. At step in accordance with the invention the publishing component determines for each intended subscriber whether the receiving component associated with that subscriber is in the same process space as the publishing component. If not then at step the message is pushed into the message queue for that subscriber in the subscription store in the conventional manner. The new message will be detected during the polling process performed by the receiving component and ultimately will be published to the in memory subscriber component.

If however it is determined at step that the receiving component of the subscriber is in the same process space then at step the message is pushed into the corresponding message queue for the subscriber. But in this case the message is marked in the queue as if it has already been discovered during the polling process of the receiving component retrieved from the queue and published to the in memory component of the subscriber even though this has actually not occurred . Such marking is accomplished in whatever manner messages are normally marked as such in the message queues. For example the message queue structure in the subscription store may include a flag for each message that can be set for this purpose. Thus it is made to appear in the subscription store that the message was already retrieved and delivered to the subscriber. Next at step the message is then delivered directly to the receiving component associated with the subscriber. In one embodiment where the receiving component comprises multiple data partitions one for each of the subscribers that it services the message will be delivered directly to the data partition corresponding to the subscriber. A variety of means may be used to deliver the message to the receiving component in the same process space and the present invention is by no means limited to any one mechanism. For example the delivery can be achieved by passing the message to the receiving component via an inter process communication mechanism via an application programming interface call such as a public method call or by directly updating the in memory data structure of the receiving component. At step the receiving component then publishes the message to an in memory component of the subscriber in a conventional manner.

As can be appreciated when the publishing component and receiving component reside in the same process space this method avoids the usual latency Tp by delivering the message directly to the receiving component. The subscriber does not have to wait for the receiving component to discover the message during its polling process and to then deliver it to the subscriber. Yet because the message is still pushed to the message queue for the subscriber the durability of the message is maintained.

Whether the message is published in the conventional manner or via the more direct delivery method of the present invention the message will eventually be removed from the message queue at step in accordance with the conventional message clean up process.

Referring to the process begins at step where the publishing component receives a message from publisher to be published to one or more subscribers. At step the publishing component accesses the subscription store in order to determine the subscribers to which the message should be published. At step the publishing component forms a list of subscribers to which the message should be published. At step in accordance with the invention the publishing component determines for each intended subscriber whether the receiving component of each subscriber is in the same process space as the publishing component. If not then at step the message is pushed into the message queue for that subscriber in the subscription store in the conventional manner. The new message will be detected during the polling process performed by the receiving component and ultimately will be delivered to the in memory subscriber component. The message will then at some point be removed from the message queue in the conventional manner.

If however it is determined at step that the receiving component is in the same process space then at step the message is delivered directly to the receiving component s data partition corresponding to the subscriber. For example this can be achieved by passing the message to the receiving component via an inter process communication mechanism or via a direct in memory update. Again it is understood that any mechanism for passing the message directly to the receiving component may be employed and the present invention is by no means limited to any one mechanism. The receiving component then at step delivers the message to the in memory subscriber component. Unlike the embodiment illustrated in however the message is not pushed into the message queue for the subscriber. Thus the message is not preserved and is considered non durable.

As can be appreciated assuming that the publishing component and receiving component reside in the same process space this embodiment avoids not only the latency Tp but also the latencies Tq and Tc because the message is not stored in the message queue for the subscriber.

Referring to at step the publishing component receives a message from publisher to be published to one or more subscribers. Unlike the prior embodiments instead of accessing the subscription store to identify the subscribers to which the message should be published that list of subscribers is already known. Accordingly at step the publishing component selects one of the known subscribers. At step in accordance with the invention the publishing component determines whether the receiving component of the subscribet is in the same process space as the publishing component. If not then at step the message is pushed into the message queue for that subscriber in the subscription store in the conventional manner. The new message will be detected during the polling process performed by the subscription component and ultimately will be delivered to the in memory subscriber component.

If however it is determined at step that the receiving component is in the same process space then at step the message is pushed into the corresponding message queue for the subscriber. But in this case the message is marked in the queue as if it had already been discovered during the polling process of the receiving component retrieved from the subscription and message store and published to the subscriber even though this has actually not occurred . Again such marking is accomplished in whatever manner messages are normally marked as such in the message queues. Next at step the message is delivered directly to the receiving component s data partition corresponding to the subscriber. At step the receiving component publishes the message to the in memory subscriber component.

As can be appreciated assuming that the publishing component and receiving component of the intended subscriber reside in the same process space this method not only avoids the latency Tp but also the latency Te because the consultation with the subscription and message store in order to obtain a list of subscribers to receive the message is not necessary as the identity of subscribers is predetermined.

Whether the message is published in the conventional manner or via the more direct delivery method of the present invention the message will eventually be removed from the message queue at step in accordance with the conventional message clean up process.

Referring to the process begins at step where the publishing component receives a message from publisher to be published to one or more subscribers. At step the publishing component selects one of the predetermined subscribers. At step in accordance with the invention the publishing component determines whether the receiving component is in the same process space as the publishing component. If not then at step the message is pushed into the message queue for that subscriber in the subscription store in the conventional manner. The new message will be detected during the polling process performed by the subscription component and ultimately will be published to the in memory subscriber component. The message will then at some point be removed from the message queue in the conventional manner.

If however it is determined at step that the receiving component is in the same process space then at step the message is delivered directly to the receiving component s data partition corresponding to the subscriber. At step the message is delivered to the in memory subscriber component. Unlike the embodiments illustrated in however the message is not pushed into the message queue for the subscriber. Thus the message is not preserved and is considered non durable.

As can be appreciated assuming that the publishing component and receiving component reside in the same process space this embodiment avoids not only the latencies Tq Tp and Tc but also the latency component Te.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures components program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

All or portions of the methods of the present invention described above may be embodied in hardware software or a combination of both. When embodied in software the methods of the present invention or certain aspects or portions thereof may be embodied in the form of program code that when executed by a computing system cause the computing system to perform the methods of the present invention. This program code may be stored on any computer readable medium as that term is defined above.

It is noted that the foregoing examples have been provided merely for the purpose of explanation and are in no way to be construed as limiting of the present invention. While the invention has been described with reference to various embodiments it is understood that the words which have been used herein are words of description and illustration rather than words of limitation. Further although the invention has been described herein with reference to particular means materials and embodiments the invention is not intended to be limited to the particulars disclosed herein rather the invention extends to all functionally equivalent structures methods and uses such as are within the scope of the appended claims.

