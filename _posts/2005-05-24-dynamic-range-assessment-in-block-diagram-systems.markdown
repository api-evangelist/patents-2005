---

title: Dynamic range assessment in block diagram systems
abstract: Remote monitoring tools are provided for non-intrusively and synchronously interacting with graphical models. The remote monitoring tools are dynamically connected to the graphical model without requiring the addition of components to the model definition. The remote monitoring tool can perform dynamic range assessment on the graphical model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812269&OS=08812269&RS=08812269
owner: The MathWorks, Inc.
number: 08812269
owner_city: Natick
owner_country: US
publication_date: 20050524
---
This application is a continuation in part of Ser. No. 11 011 298 entitled Tools for System Level Design Environments filed on Dec. 13 2004.

The present invention relates to a system and method suitable for non intrusively monitoring data synchronous with events in an executing block diagram or graphical model and more specifically on performing dynamic range assessment on the monitored data.

Historically engineers and scientists have utilized graphical models in numerous scientific areas such as Feedback Control Theory and Signal Processing to study design debug and refine dynamic systems. Dynamic systems which are characterized by the fact that their behaviors change over time are representative of many real world systems. Graphical modeling has become particularly attractive over the last few years with the advent of software packages such as Simulink made by The MathWorks Inc. of Natick Mass. LabVIEW made by National Instruments Corporation of Austin Tex. and the like. Simulink provides sophisticated software platforms with a rich suite of support tools that makes the analysis and design of dynamic systems efficient methodical and cost effective.

A dynamic system either natural or man made is a system whose response at any given time is a function of its input stimuli its current state and the current time. Such systems range from simple to highly complex systems. Physical dynamic systems include a falling body the rotation of the earth bio mechanical systems muscles joints etc. bio chemical systems gene expression protein pathways weather and climate pattern systems etc. Examples of man made or engineered dynamic systems include a bouncing ball a spring with a mass tied on an end automobiles airplanes control systems in major appliances communication networks audio signal processing nuclear reactors a stock market etc.

Professionals from diverse areas such as engineering science education and economics build mathematical models of dynamic systems in order to better understand system behavior as it changes with the progression of time. The mathematical models aid in building better systems where better may be defined in terms of a variety of performance measures such as quality time to market cost speed size power consumption robustness etc. The mathematical models also aid in analyzing debugging and repairing existing systems be it the human body or the anti lock braking system in a car . The models may also serve an educational purpose of educating others on the basic principles governing physical systems. The models and results are often used as a scientific communication medium between humans. The term model based design is used to refer to the use of graphical models in the development analysis and validation of dynamic systems.

Dynamic systems are typically modeled in model environments as sets of differential difference and or algebraic equations. At any given instant of time these equations may be viewed as relationships between the system s output response outputs the system s input stimuli inputs at that time the current state of the system the system parameters and time. The state of the system may be thought of as a numerical representation of the dynamically changing configuration of the system. For instance in a physical system modeling a simple pendulum the state may be viewed as the current position and velocity of the pendulum. Similarly a signal processing system that filters a signal would maintain a set of previous inputs as the state. The system parameters are the numerical representation of the static unchanging configuration of the system and may be viewed as constant coefficients in the system s equations. For the pendulum example a parameter is the length of pendulum and for the filter example a parameter is the values of the filter taps.

Generally graphical analysis and modeling methods such as the block diagram method are used in modeling for design analysis and synthesis of engineered systems. The visual representation allows for a convenient interpretation of model components and structure and provides a quick intuitive notion of system behavior.

During the course of modeling and simulation it is often desirable to be able to observe particular data values at certain locations of the model or to observe how data is transformed through the model. Examples of such data values include signal values states work areas and parameters. Signal displays used in conjunction with a system level design environment such as Simulink often require multiple display mechanisms to be associated simultaneously with multiple signals to monitor the progress of a model at various points of interest. Currently block diagram environments offer scope blocks to be used in such situations with each scope connected to a signal of interest in the model. Alternatively environments such as Real Time Workshop manufactured by The MathWorks Inc. of Natick Mass. offer interfaces to various data values of the model such that an individual can non intrusively observe the data values.

In many systems the dynamic range of values appearing within the system is of interest when verifying operation of the system. For example some system components which take as input numeric values that change over time may operate properly only if the inputs fall within a prescribed numerical range system performance may be negatively impacted if the values fall outside the range. In this example knowledge of the dynamic range of input values under situations of interest is an important characterization of the system.

Dynamic range is a ratio of the maximum data value to the minimum data value. Typically mechanisms used to retain values within a dynamic system have associated with them limits on their maximum dynamic range. The dynamic range limit can arise from several sources constraints imposed on system components such that they operate within a prescribed specification for interoperability safety or performance reasons a physical limitation on the operation of an analog system component such as saturation limits on an analog amplifier or storage considerations of digital system components whereby values can be accurately retained only if they fall within prescribed range limits. These examples are representative and by no means exhaustive. Failure to adhere to such dynamic range limits can lead to poor system performance incorrect system operation or overall system failure. Assessment of the dynamic range of values occurring within the system is thus of great importance.

However conventional non intrusive approaches to observing the various data elements such as dynamic range do not allow users to observe the data synchronously with the various execution events in the block diagram or other operating model. Such synchrony is necessary in many scenarios because data values may be not be in a deterministic observable state at all times during model execution. An example of such a scenario is when a signal memory location is reused by multiple blocks for efficiency reasons. Furthermore allowing synchronous observation of the data also ensures that observers of the data are operating optimally for example when the data values are refreshed.

There is a need in the art for a design tool that interacts with an executing model in a manner that is non intrusive but that is also synchronized with the model as the model executes. The interaction can be decoupled from the model as a remote monitoring tool which can observe data from or for the model as it executes and perform dynamic range assessment using the observed data. The present invention is directed toward further solutions that address this need.

In accordance with various aspects of the present invention a remote monitoring tool is provided. The monitoring tool can non intrusively collect data of interest of a model. Data of interest can be dynamically selected for monitoring. The monitoring tool can initiate an action upon occurrence of a predetermined execution event of the model. Data of interest may also be dynamically selected upon occurrence of a condition. The monitoring tool can access at least one of data and an event of the model using one of block diagram primitives and textual language primitives.

In accordance with one embodiment of the present invention in a graphical modeling environment operating on an electronic device a method of using a remote monitoring tool includes connecting it to the graphical modeling environment prior to execution during execution or after execution of a model. The method continues with operating the at least one remote monitoring tool to perform dynamic range assessment. The remote monitoring tool is detachable from the model during execution of the model in the graphical modeling environment.

In accordance with one embodiment of the present invention a medium is provided for use in a graphical modeling environment on an electronic device. The medium holds instructions executable using the electronic device for performing a method of using a remote monitoring tool. The method includes connecting at least one remote monitoring tool to the graphical modeling environment prior to execution during execution or after execution of a model. The method continues with operating the at least one remote monitoring tool to perform dynamic range assessment. The remote monitoring tool is detachable from the model during execution of the model in the graphical modeling environment.

In accordance with one example embodiment of the present invention the at least one remote monitoring tool can be implemented using block diagram primitives. These primitives are aggregated into the block diagram automatically prior to execution by the modeling environment.

In accordance with one example embodiment of the present invention the at least one remote monitoring tool can be implemented as an event listener application programming interface API . This API can provide a non intrusive and synchronized interface. The listener may be implemented using one of block diagram primitives and textual language primitives.

In accordance with one example embodiment of the present invention the at least one remote monitoring tool can be implemented as a set of callbacks. These callbacks are invoked synchronously with block diagram execution events. The callbacks may be implemented using one of block diagram primitives and textual language primitives.

In accordance with another aspect in an electronic device supporting a graphical modeling environment a method of debugging a model using a remote monitoring tool is provided. The method comprises connecting at least one monitoring tool to the graphical modeling environment prior to execution during execution or after execution of the model. The method continues with operating the at least one monitoring tool to perform dynamic range assessment on data of interest of the model. Based on the results of the dynamic range assessment the model may then be modified. Further monitoring can then be performed.

In accordance with another aspect a system for generating and displaying a graphical modeling application is provided. The system comprises a distribution server and a client device in communication with the distribution server. The distribution server provides to the client device a remote monitoring tool for performing dynamic range assessment.

In accordance with another aspect in a network having a server executing a graphical modeling environment and a client device in communication with the server a method is provided. The method comprises selecting at the server from the client device data of interest of a model in the graphical modeling environment invoking the remote monitoring tool synchronously with model execution in the graphical modeling environment performing dynamic range assessment on the data of interest using the remote monitoring tool and outputting from the server to the client device the result of the dynamic range assessment.

An illustrative embodiment of the present invention relates to a remote monitoring tool and corresponding method of use. The remote monitoring tool is configured to perform dynamic range assessment. The remote monitoring tool is non intrusively and synchronously connected to a graphical modeling environment prior to execution during execution or after execution of a model. The remote monitoring tool is detachable from the model during execution of the model in the graphical modeling environment.

The remote monitoring tool is non intrusive to the graphical model such that the remote monitoring tool is not embedded in the model in the same way that other elements of the model are interconnected and embedded. In the case of a graphical model using blocks and signals the user does not add blocks or signals to the model diagram when attaching a remote monitoring tool in accordance with the present invention to the model. Rather data of interest is selected for monitoring and during execution the model informs the remote monitoring tool of events of which the tool has requested to receive notification. The process of sending an event can be achieved through but not limited to an event listener application programming interface API a callback based interface and or model and remote monitoring tool aggregation for execution. The remote monitoring tool can work with execution modes that include but are not limited to interpretive accelerated or generated code model execution modes.

It should be noted that the electronic device is merely representative of a structure for implementing the present invention. However one of ordinary skill in the art will appreciate that the present invention is not limited to implementation on only the device as described herein. Other implementations can be utilized including an implementation based partially or entirely in embedded code where no user inputs or display devices are necessary. Rather a processor can communicate directly with another processor or other device.

Turning now to example embodiments of the present invention the method and system of the present invention operate in a block diagram modeling environment such as that of Simulink . The block diagram modeling environment is otherwise referred to herein as the graphical model. One of ordinary skill in the art will appreciate that there are a number of different graphical modeling and simulation applications that make general use of blocks or other graphical representations to model or simulate conditions events designs operations and the like or to model and control events implemented on hardware devices and the like. Accordingly the present invention is intended for use on all such modeling applications.

The present invention is generally directed to a system and method for interacting non intrusively yet synchronously with a graphical model. is a screen depiction of a graphical model simulating a dynamic process. shows a version of a time based or event based block diagram graphical model . As referred to herein graphical model is intended to encompass multiple variations of graphical model. Graphical model is formed generally of a plurality of blocks that pass signals to represent a dynamic system. The particular use or purpose of the graphical model can vary to include anything that can be modeled using a graphical modeling environment. Thus the present invention is not limited to the specific example embodiments discussed herein as understood by one of ordinary skill in the art.

In the example embodiment time based graphical models have blocks connected by signals . Blocks are responsible for computing the values of signals as time progresses. The arrows denote the computational direction of the signal. Input ports read signals and output ports write signals. The user of the present invention may wish to obtain a reading of a value of one of the signals in the graphical model or of one of the processes in one of the blocks . However in the graphical model illustrated there is no instance of a scope shown with the model. Accordingly if the graphical model is running a model execution at the time illustrated in the figure conventional modeling applications in the situation illustrated have no mechanism for a user to be able to take readings of signal or internal block model states synchronously.

However with the remote monitoring tool of the present invention in accordance with one embodiment an event listener API or equivalent tool is provided to associate the tool with the graphical model without being embedded in the graphical model . For example if the user wishes to know the value of the signal at point A in the graphical model for the purpose of performing dynamic range assessment the user implements the remote monitoring tool of the present invention to initiate an observation event. The user registers with the model using the event listener API a request to invoke the monitoring tool when point A in the graphical model is computed by the source block of the signal of point A. As the model is executing when the signal at point A is re computed by the source block of the signal an event is sent to the listener. The listener in this illustrative example reads the value of the signal at point A which can then be used in assessing dynamic range at that point in the model. It should be noted that throughout this description the example embodiments make use of an API form of tool to connect the remote monitoring tool to the model. However one of ordinary skill in the art will appreciate that the remote monitoring tool does not need to be implemented in the form of an API but rather can be implemented using a number of different tools including library based modules and other tools. As such references to an API in the present description are intended to include APIs as well as such other equivalent tools noted above. In addition an alternative example embodiment of the present invention makes use of an aggregation programming paradigm to achieve the non intrusive and synchronized behavior of the remote monitoring tool.

The remote monitoring tool does not need to be represented graphically in the graphical model . However because the remote monitoring tool registers listeners with the model the model can insert a graphical symbol or text such as symbol in or other representation in the graphical model showing the existence of the listener for the remote monitoring tool. Such graphical representation can be for example shown in the block indicating the remote monitoring tool is connected to the internal state of the block and not the signal . More specifically in the illustrative example showing the symbol connections made by the remote monitoring tool can be described by selection of one or more signals from a list of all available signals in the graphical model . The remote monitoring tool can also be described by the direct entry of an identification of one or more signals in the graphical model . The connections can be highlighted at some point in time to associate a symbol with one or more selected signals . For example this can be accomplished by pressing a button in the display interface with the corresponding signal in the model highlighted by color blinking or other temporary or persistent graphical indication in addition to textual or other representations. The connection can also be highlighted by a graphical affordance in the graphical model such as a test point symbol small lollipop icon connected to a signal line for as long as the virtual connection remains. For connections to internal block state as in the illustrative block the connections can be created in similar fashion to signal selection except that a block is selected. Likewise the connection of a remote monitoring tool to a block may be represented by test point symbol an example of which can be as seen in .

The remote monitoring tool can be connected to the model using an event listener API. More specifically and in accordance with an example embodiment of the present invention the API that enables the practice of the remote monitoring tool in accordance with the present invention includes the presence of user definable pre execution and or post execution callbacks or events associated with any of the methods of the computational blocks in the graphical model such that the callback or event enforces proper synchronization for data transfer to and from the tool. Such an API can likewise be provided where the definitions refer to data nodes in a physical hardware device such as memory locations in a processor a physical I O protocol for a processor or an FPGA or ASIC or some other defined method for data delivery as understood by one of ordinary skill in the art. A unique identifier can be provided for each signal in the graphical model or hardware such that the tool can be associated with any signal or group of signals. Methods to read signal data via the unique identifier which can be synchronized by the pre execution and or post execution callback or event can be provided. Furthermore textual graphical audio visual tactile or other data rendering techniques and capabilities supported by or interfaced to the modeling environment can be provided such that the signal data is presented to user in a discernable manner.

The remote monitoring tool can include different types of tools such as display scopes strip chart recorder an oscilloscope a spectrum analyzer a 2 port network analyzer a logic signal display a waterfall plot a communications constellation plot an audio output device and a video display device. The monitoring tool can also be a non graphical tool such as a tool that reads the model data such as the signal at point A of the illustrative model and sends the data to another system for processing. One of ordinary skill in the art will appreciate that the present invention is not limited to using the event listener API to non intrusively and synchronously connect the remote monitoring tool s to the model.

Ideally the monitoring tool is used in performing dynamic range assessment on the monitored system. Dynamic range assessment may take place during the design and simulation phase of building a system when the model of the system is being created. It may take place during the test of subsystems of the simulation system or as a test on the completed simulation system. It may also take place on the actual system produced such as a DSP implementation of a signal processing system. This latter case may be accomplished by communication with the final hardware system such as in hardware in the loop HIL test systems.

The number of nodes within a block diagram that are tracked within a system as part of a dynamic range assessment can vary widely depending on the particular assessment being conducted. The assessment can be a partial characterization of just a single component or just a single computation of interest within a single component it might be across a subsystem of components for a specific operation it might be characterization of a class of components having certain system characteristics such as all components of a particular type or across all values produced within an entire system as a whole.

The digital implementation of a system is of particular interest. The dynamic range constraint often arises from a pre selected number of bits used to represent values within a digital system the storage location being an address in a computer memory or a register of certain size within a processor GPP DSP etc a predetermined number of storage locations allocated for this purpose within an ASIC or FPGA or other temporary or permanent storage mechanism exhibiting a constraint on the number of bits used to represent a numeric value. Dynamic range characterization of constant values that is values that are certain to remain fixed throughout the course of simulation may be of interest for characterization. Of even greater interest is the characterization of dynamic values that is values that are subject to change during the course of simulation.

In another embodiment it may be desirable to change the implementation of a system in which the mechanisms used to retain values within the system such as a set of pre defined data types impose limits on the representation of dynamic range. An example of this is the change from floating point to fixed point numeric representation of digital values.

Typically the types of measurements made for dynamic range assessment include minimum and maximum values observed at the node s monitored by the remote monitoring tool as well as histograms of the data being monitored. In some embodiments mean values may be determined. In certain embodiments the remote monitoring tool may also be configured to monitor the number of times a specific set of threshold values has been crossed. Other possible configurations and measurements will apparent to one skilled in the art given the benefit of this disclosure.

In addition the displays of the remote monitoring tool if required are provided separate from the graphical model thus keeping with the non intrusive feature of this invention. Likewise a GUI can be provided with a multiple document interface type of layout in which a master GUI contains one or more visual display device windows with additional interfaces for managing the connections to the model corresponding to each remote tool.

Several example embodiments of implementations of the remote monitoring tool in accordance with the present invention are described herein. In addition is a diagrammatic illustration of a method of using the remote monitoring tool realized using the event listener API. In accordance with one example embodiment of the present invention a user can attach a remote monitoring tool to a model to listen to specific events before during or after model execution step . The user can detach a remote monitoring tool before during or after graphical model execution step . Connections to the model by the remote monitoring tool are maintained while the model is not running step . When the model is not running step the user can edit the model and possibly change it structure. If the act of editing the model deletes an object such as a block or line that is connected to a remote monitoring tool the tool becomes disconnected from the model.

The user can start the model execution step . During model execution model and block methods are invoked. Within Simulink this consists of a simulation loop. Each computational block in Simulink may contain multiple run time methods that are executed within the simulation loop. Simulink decomposes block methods by type and executes them in a predefined manner from model models that are invoked by the simulation loop. During execution of a model or block method step if a block with registered listeners is encountered step the model sends an event step causing the remote monitoring tool to execute. Dynamic Range assessment can then be performed. When execution completes step the model returns to the not running state step .

One example implementation of the remote monitoring tool of the present invention is shown in . is a screen depiction of a tool resulting from the user implementing the remote monitoring tool. The remote monitoring tool presents a histogram plot showing dynamic range. The histogram plot is a visual display of the dynamic range for the graphical model at point A. The remote monitoring tool can include a number of different interfacing options some of which can be implemented in a toolbar configuration. For example shows a toolbar having a number of standard buttons. One of ordinary skill in the art will recognize there can be several button configurations. One example button that can be utilized in conjunction with the present invention is a highlight button which when clicked on will highlight the signal in the graphical model being displayed by the remote monitoring tool.

Another example toolbar can be seen in . In this implementation the toolbar has a button for connecting and disconnecting a remote monitoring tool. They button may also indicate the current state of connectivity for the remote monitoring tool. In the button indicated that the remote monitoring tool is currently disconnected and the user may click the button to connect the remote monitoring tool. In the button indicates the remote monitoring tool has been connected and the user may click the button to disconnect the remote monitoring tool.

In addition the remote monitoring tool interface in a particular embodiment can vary. For example in the remote monitoring tool is implemented as a multiple document interface MDI style GUI design incorporating multiple display devices in a single master window . In this example there are connections established for each display corresponding to signals originating from multiple graphical models . A first display reports data from a first graphical model. A second display reports data from a second graphical model. A third display and a fourth display report data from a third and fourth graphical model. The remote monitoring tool is formed of the collection of the displays and . Each of the displays operates independently and pulls data from different model locations. The displays can pull data from the same model location if desired. Furthermore as mentioned previously each of the collection of the displays and forming the remote monitoring tool can be individually or collectively attached or detached from the graphical models before during or after the graphical models are implemented.

As described the remote monitoring tool includes at least one tool. The remote monitoring tool is attached to the model in the graphical modeling environment prior to execution during execution and or after execution of a model. The remote monitoring tool is detachable from the model during execution of the model in the graphical modeling environment.

The monitoring tool non invasively collects data after data of interest has been selected . The selection of the data of interest can be displayed in accordance with the examples illustrated herein. In addition the remote monitoring tool can initiate an action upon selection of a predetermined characteristic of the data or event observed. For example if a predetermined data point such as a maximum or a minimum is achieved in a graphical model as it is running the remote monitoring tool can register the occurrence and forward instructions or implement other actions to address the occurrence. Such actions may include pausing the model execution forwarding data relating to other points in the model at the time of the occurrence sending a message to the user implementing a change in the operation of a separate model and or hardware device and the like.

The remote monitoring tool configurations can be saved in the graphical model or can be saved separate from the graphical model. In addition one of ordinary skill in the art will appreciate that a reference or other identifier to a specific remote monitoring tool can likewise be stored within the graphical model or separate from the graphical model being viewed or manipulated by the remote monitoring tool. Furthermore the selection of blocks signals or ports to be interfaced with the remote monitoring tool can be performed using any available interface mechanism including graphically textually data and can be implemented through in direct or direct connection to other software or hardware and the like in addition to user interface.

In the embodiments presented herein the remote monitoring tool configurations consist of the various attributes of the tool the user has created. The tool can be connected to the model using an object selector. The object selector is one component of the remote monitoring tool that associates each tool the user has created with objects e.g. blocks signals or ports in the model. For example the selection of model objects blocks signals or ports to be connected to a remote monitoring tool can be done using a signal selector that displays the model hierarchy in a textual fashion. The user navigates to the desired object in the textual hierarchy and connects the tool the object. Alternatively the user can select an object in the model and then click a button in the signal selector to attach the remote monitoring tool to the selected object.

It should be noted that one useful implementation of the remote monitoring tool of the present invention is in the performance of debugging of a system being modeled using the graphical model as shown in . To debug an operating model the model is first provided step . The user implements an instance of the remote monitoring tool step . At this point the remote monitoring tool can influence the next steps. The user may attach the remote monitoring tool at a point in the model at which access to data is desired or collect data step . If desired the data collected can be registered step . The remote monitoring tool can then perform dynamic range assessment DRA step while still maintaining its non invasive characteristics in the graphical model. The steps can be repeated as necessary to debug the model step .

One skilled in the art will recognize that there are several ways to attach monitoring tools to a model. In one example shown in as model an alternative embodiment of the present invention can be used to connect or disconnect remote monitoring tools from the model . One can bring up the context sensitive menu for a signal by right clicking on a signal such as signal . Within the context sensitive menu one can open a viewer that is connected to the signal using an open viewer selection note multiple viewers can be connected to one signal disconnect one or all of the viewers connected to the signal using a disconnect selection or create and connect a new viewer using a create view selection .

When executing the model using an interpretive engine the event listener paradigm provides a straight forward means by which to support the remote monitoring tool. However one skilled in the art recognizes that a model can be translated to generated code where the generated code can be a high level programming language such as C Java or C or assembly code. To support the adding and removing of remote monitoring tools during execution the generated code can be instrumented before and after each block method. Alternatively a run time engine can be created which using the executable created after compiling and linking the code can instrument the executable with entry points before and after the code for each model and block method thus enabling one to implement the event listener architecture enabling the removal and addition of remote monitoring tools during model execution.

An alternative to the event listener paradigm for synchronously connecting the remote monitoring tool to the model is to aggregate the model objects and the remote monitoring tool s into one execution engine. This can be done when the connections to the model are made prior to model execution and are not altered during execution. The remote monitoring tool is not added to the graphical definition of the model rather an internal aggregated representation of the model is formed consisting of both the model objects plus the remote monitoring tools. After this is done an internal execution structure can be created by translating the model into executable operations or generated code. If the connections are altered during execution it is necessary to know a priori the full range of alterations that may be performed. Otherwise dynamic alteration of the execution structure needs to occur and dynamic alteration of the execution structure is very similar to the event listener paradigm.

The examples to this point have focused primarily on the system where the graphical modeling environment was on a local electronic device. The graphical modeling environment may of course also be implemented on a network as illustrated in having a server and a client device . Other devices such as a storage device may also be connected to the network.

In one such embodiment a system for generating and displaying a graphical modeling application comprises a distribution server for providing to a client device a remote monitoring tool for performing dynamic range assessment. Here the distribution server provides a client device with a remote monitoring tool for performing dynamic range assessment. This remote monitoring tool may be part of a tool set available to the client on the server. The client may then use the remote monitoring tool for performing dynamic range assessment on a block diagram for a dynamic system.

In another embodiment the server may execute the graphical modeling environment. A user may then interact with the graphical modeling interface on the server through the client device. In one example of such a system a server and client device are provided. The server is capable of executing a graphical modeling environment. The client device is in communication with the server over a network. On the server from the client data of interest to be monitored may be selected. The remote monitoring tool may then be invoked synchronously with model execution in the graphical modeling environment. Dynamic range assessment may then be performed and the results outputted from the server to the client device.

The remote monitoring tool provides freedom to tap into an existing and executing model at any time to collect data. Accordingly a user attempting to diagnose or debug a model of a dynamic system can use the remote monitoring tool of the present invention to both take contemporaneous or real time readings of signal values within the graphical model and or communicatively associated devices. One of ordinary skill in the art will appreciate that debugging is an iterative process that can be implemented in a number of different ways such that the present invention is not limited to the specific example of debugging described herein. Rather the present invention and corresponding method of use can vary in accordance with preferred debugging processes.

Accordingly the present invention is generally directed to a remote monitoring tool and corresponding method of use. The tool is non intrusive meaning there are no explicit modeling primitives e.g. blocks or lines added to the graphical model. Thus there is no requirement that the tool be programmed into the model when the model is being created. The remote monitoring tool is furthermore remote and monitoring in nature meaning that it is separate from the graphical model. The remote monitoring tool can be connected to the graphical modeling environment prior to execution during execution or after execution of a model and is also detachable from the model during execution of the model in the graphical modeling environment.

Numerous modifications and alternative embodiments of the present invention will be apparent to those skilled in the art in view of the foregoing description. Accordingly this description is to be construed as illustrative only and is for the purpose of teaching those skilled in the art the best mode for carrying out the present invention. Details of the structure may vary substantially without departing from the spirit of the present invention and exclusive use of all modifications that come within the scope of the appended claims is reserved. It is intended that the present invention be limited only to the extent required by the appended claims and the applicable rules of law.

