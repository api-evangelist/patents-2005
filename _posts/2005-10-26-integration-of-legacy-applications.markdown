---

title: Integration of legacy applications
abstract: A method and apparatus are disclosed for integrating an legacy application hosted on an application server onto a network, such as the Internet. This allows one or more remote computers to access the legacy application over the network. The disclosed method and apparatus do not require changes to be made to the legacy application, due to the fact that the legacy application is accessed using messages in the form produced by the native operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07765254&OS=07765254&RS=07765254
owner: International Business Machines Corporation
number: 07765254
owner_city: Armonk
owner_country: US
publication_date: 20051026
---
The present invention relates generally to the field of computer software applications and in particular to accessing legacy applications over a computer network such as the Internet.

Legacy applications are applications that typically have been inherited from languages platforms and or techniques earlier than the current Internet based technology. Most enterprises have legacy applications and associated legacy databases that still today serve critical business needs. Regardless of the fact that such applications are often large monolithic and difficult to modify they continue to be used. Generally it is due to the cost associated with replacing or redesigning the applications and often despite their poor competitiveness and compatibility with modern equivalents.

There are many advantages to migrating the operation of a business to a distributed system. Often the Internet is used as the preferred network linking the distributed system. However legacy applications were not developed for Internet based communication in mind. Legacy applications were developed to execute on stand alone systems which may be deployed in a multi user environment like a terminal server. Their continued use restricts enterprises from joining the e commerce world in which business is conducted over the Internet.

One obvious solution is to rewrite the legacy application in a modern development language and in a manner that complies with more recently developed Internet programming models. However rewriting involves formidable costs and risks especially when such applications share common data. Also legacy applications typically have business logic and interface logic intermixed. Dividing out the business logic from the interface logic is often a formidable task.

Also the databases used by legacy applications contain data accessible in a format not normally suited for Internet applications. Thus there is a need to address the difficulty of using legacy applications with newer technology.

US Patent Publication 2002 0178170 A1 discloses a system wherein such databases are retained and an interface or connector is provided for each database for converting data between a hierarchical or multi valued simple data structure used for the legacy database and a rich data structure used for Internet databases.

US Patent Publication 2003 0046639 A1 discloses a single platform system for facilitating creation exchange presentation and management of documents a collection of data that may be in any format or form to support business transactions. The single platform system also links to and integrates legacy systems messaging gateways and other enterprise information systems.

In the article entitled Choosing a Middleware for Web Integration of a Legacy Application published in Software Engineering Notes vol 25 no 3 pages 50 53 middleware is used as a platform to support integration of a legacy application running on mainframe and a web server. Hence a three tier client server architecture is created.

A method and system for integrating legacy applications into a platform independent environment are disclosed in U.S. patent application Ser. No. 10 769 435 filed on Jan. 30 2004 in which a portable executable PE is invoked through a platform independent interface by processing an export table in the PE to obtain the function names used in the PE. A resources table in the PE is processed to obtain a user interface used in the PE. A platform independent user interface is generated based on the user interface used in the PE. At least one of the functions used in the PE is invoked through the platform independent user interface.

The foregoing need is addressed in the present invention. In one form of the invention a method for communicating with an application includes receiving by a user agent on a user computer a user request for an application via an application layer protocol. The application is not sufficiently operable via an application layer protocol to directly interact effectively over a network. The user agent submits a request for the application to a intermediary computer. The intermediary computer responsively requests the application and a host computer launches an instance of the application responsive to the request from the intermediary computer. Also the intermediary computer retrieves a first form for the user agent wherein the first form emulates a first screen of the application. The user agent renders the first form and receives user input via an application layer protocol for the first form. Also the user agent submits data for the form including the user input to the intermediary computer. The host computer posts a message to the instance of the application responsive to information extracted by the intermediary computer from the received form data. The posted message includes the user input and is in an operating system message format such that the message appears to the application as if the message is responsive to a hardware input event.

In another aspect the launching creates a process identifier for the instance of the application and the posting of the message is responsive to the process identifier.

Also the request to the intermediary computer includes a dialog identifier and the retrieving of the first form by the intermediary computer is responsive to the dialog identifier.

In a still further aspect the intermediary computer associates the process identifier and the dialog identifier wherein the information extracted from the received form data by the intermediary computer includes the user input and the dialog identifier. The intermediary computer sends the user input and the process identifier to the host computer responsive to the association of the process identifier and the dialog identifier.

Additionally or in a variation the intermediary computer associates the process identifier and an input field tag of the first form wherein the information extracted from the received form data by the intermediary computer includes the user input and the input field tag. The intermediary computer sends the user input and the process identifier to the host computer responsive to the association of the process identifier and the input field tag.

In yet another aspect the host computer sends the process identifier and data from the application to the intermediary computer and the intermediary computer sends the first form and the data from the application to the user computer.

In another form a system for communicating with an application includes a user agent on a user computer and an intermediary computer. The user agent is operable to receive a user request for an application via an application layer protocol and responsively submit a request to the intermediary computer. The application is not sufficiently operable via an application layer protocol to interact effectively over a network. A host computer is operable to launch an instance of the application responsive to a request from the intermediary computer. The intermediary computer has an integration object for retrieving a first form for the user agent the first form emulating a first screen of the application. The user agent is operable for rendering the first form receiving user input via an application layer protocol for the first form and submitting data for the form to the intermediary computer wherein the data includes the user input. The host computer has a message manager for posting a message to the instance of the application responsive to information extracted from the received form data by a macro manager of the integration object. The posted message includes the user input and is in an operating system message format such that the message appears to the application as if the message is responsive to a hardware input event.

In another aspect the intermediary computer includes a message constructor operable to send the user input and the process identifier to the host computer responsive to the association of the process identifier and the dialog identifier.

In addition or alternatively the message constructor is operable to send the user input and the process identifier to the host computer responsive to the association of the process identifier and the input field tag.

Other variations objects advantages and forms of the invention will become apparent upon reading the following detailed description and upon reference to the accompanying drawings.

In the following detailed description of the preferred embodiments reference is made to the accompanying drawings illustrating embodiments in which the invention may be practiced. It should be understood that other embodiments may be utilized and changes may be made without departing from the scope of the present invention. The drawings and detailed description thereof are not intended to limit the invention to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Where reference is made in any one or more of the accompanying drawings to steps and or features which have the same reference numerals those steps and or features have for the purposes of this description the same function s or operation s unless the contrary intention appears.

The network preferably includes the Internet in which case the network server may be an Internet server. Remote computer specifies a path to the network server using a Universal Resource Locator URL having a known syntax for defining a network connection. However network may also be a self contained network such as an Intranet a wide area network WAN or a local area network LAN .

The computer module typically includes at least one processor unit a memory unit for storing data and programs a storage device and a number of input output I O interfaces to . The input output I O interfaces include a video interface that couples to the display device an interface for the printer a network interface used by the general purpose computer for communicating to and from the network and an I O interface for the keyboard and mouse . The components to communicate via an interconnected bus .

An operating system and application programs are resident on the storage device and read into memory from which processor controls execution of the application programs.

In the case of application server the application programs include a legacy application a message manager application a mapper application and a server module .

The legacy application receives interactive user input such as data and commands by messages the operating system generates in direct response to hardware events caused by the user. That is the legacy application can not accept hardware events as inputs but rather relies on the operating system to generate messages equivalent to the hardware events. Thus the legacy application is dependent on messages from the operating system for interacting with systems external thereto like peripheral devices and other applications executing on application server .

In contrast to legacy applications more modern Internet based applications are able to send and receive interactive user output and input via application protocol data units i.e. messages in an application layer of the Open Systems Interconnect Reference Model OSI Model which is a hierarchy of layers defining requirements for communications between computers that was established by the International Standards Organization. The application layer is the top layer of the OSI model and it defines how application processes can communicate. For example an application protocol used by an Internet based application is the Hyper Text Transfer Protocol HTTP protocol as described in RFC2616 which is hereby incorporated herein by reference. HTTP is used to convey information such as HTML pages on the World Wide Web. Other examples of application layer protocols include File Transfer Protocol FTP Post Office Protocol POP3 Simple Mail Transfer Protocol SMTP Simple Network Management Protocol SNMP Telephone Network TELNET and Extensible Messaging and Presence Protocol XMPP .

An additional feature or limitation of legacy applications that are the subject of the present disclosure distinguishes them from modern Internet based applications. In a console based legacy application user interaction is possible by file inputs and outputs. This kind of legacy application includes for example UNIX and DOS based applications. The input and output of console based legacy applications are text based. It is relatively straightforward to interact with these applications through files since the operating system takes care of file based interaction through file redirection. While file interaction is not as interactive as user output and input via application protocol data units as in Internet based applications nevertheless file interaction does provide a rather straightforward communication means for interfacing a legacy application to an Internet based application. In contrast to console based legacy applications however there are also Graphical User Interface GUI based legacy applications. GUI based legacy applications interact with users through rich graphics such as button and lists via a keyboard and pointing device such as a mouse. A GUI based legacy application needs to be explicitly designed during development to interact via files or else such capability is not supported by the application. Most GUI based legacy applications such as for example Windows MAC and X Motif applications do not support input and output interaction through files because it requires additional design i.e. coding. The present invention is particularly relevant to legacy applications that do not support complete input and output interaction through files. This may include some console based legacy applications but commonly includes most GUI based legacy applications.

A hardware event is typically triggered by a user action on a device or peripheral connected to the application server such as a key press on keyboard . A hardware driver of the application server communicates that hardware event to the operating system. The operating system in return converts the hardware event to a message including information relevant to the hardware event. In the case of the key press the information will include which key has been pressed. Similarly in the case where the hardware event is a depression of a button of mouse the information included in the message will include the position of the pointer when the button was depressed. It is then this message that is received by the legacy application.

In the case of network server the application programs include a server application such as a servlet in the Java 2 Platform Enterprise Edition J2EE and an integration object which includes a macro manager application and a message constructor . Integration object may be for example Beans .Net object or COM. The message constructor is an application program interface API that passes data in the form of application layer messages to the legacy application executing on the application server .

The network server also has forms stored on its storage device . The forms are typically in a language such as hyper text mark up language HTML Xforms etc. that is understood by a network user agent e.g. an Internet browser XML based clients webservices clients EJB clients etc. the stored forms include one form for each legacy application screen. That is each form when rendered by the network user agent presents a particular window or dialog on the user s display that corresponds to a screen of the legacy application.

It should be understood that in other embodiments of the invention a form can be represented in and the browser is capable of supporting different languages other than HTML such as for example Xforms Webforms or Winforms. Server side form handling mechanisms may include JSP Struts Jfaces ASP etc.

Message manager application mapper application and server module are typically provided for installation on application server on a computer readable medium. Similarly server application and integration object are typically provided for installation on network server on a computer readable medium. Computer readable media may be computer readable disks magnetic or optical . Message manager application mapper application server module the integration object and server application each form a computer program product which may also be transferred to servers and over network .

In operation remote computer accesses the legacy application which resides and executes on application server through network and network server . Hence a client server computing environment exists with the at least one remote computer being the client and application server acting as the server. The software applications used by client reside on application server and are accessed over network .

Referring now to in connection with a sequence diagram illustrates steps performed during typical operation of software system . Operation starts in step where remote computer sends a request for access to the legacy application to network server via network in response to a user entering a user request in a HTML document that is presented to the user on computer via a network user agent such as an Internet browser. The user request specifies the network server and the legacy application using appropriate location identifiers. In one embodiment of the invention this may be by the user entering the identifiers manually. In another embodiment the server and legacy application identifiers have been included in the HTML document by the document developer so that the user may specify the identifiers merely by making a browser selection in the document.

In response to receipt of the request for access to the legacy application by network server from remote compute network server in step launches an instance of integration object resident thereon. In step network server and in particular server application executing on network server identifies from the identifier in the request the particular legacy application remote computer wishes to access and sends a request to application server hosting the legacy application to launch the legacy application.

Operation continues in step where server module of application server launches an instance of legacy application in response to receiving the request from network server which includes the identifier for legacy application . This launching of an instance of legacy application causes the operating system of application server to generate a unique process identifier ID . Server module responds to the request from network server by sending the process ID of the instance of legacy application to network server . In addition a first screen of the legacy application may have some data populated on legacy application at runtime in which case legacy application passes the data to network server .

In response to receipt of the process ID and the data from legacy application in step macro manager application on network server retrieves HTML code for a first form from its storage device fills in the legacy application data for the form and sends this code with the filled in data to the browser executing on remote computer for the browser to render as a form. The first form represents the first screen of the legacy application and is presented to the user by the browser to emulate the first screen on remote computer .

In response to receipt of the HTML code by remote computer the browser displays the first form on display device of remote computer in step . One type of form has only output fields with no input fields such as the case where the form includes only information for the user. The user information may for example be Transaction complete or Thank you . Another type of form has both input and output fields. The typically browser presents the output fields to provide to the user information about the preceding transaction whereas the browser presents the input fields to allow the user to input data relating to a next transaction. Input fields may receive user entered text a selection from a list of alternatives a check box or a button such as a Submit Reset or Cancel button. Control buttons such as an OK button or Submit button are associated with a control ID.

As first form displayed on the display device of remote computer in the illustrated instance requires input the user operating remote computer responsively fills values into form displayed by a browser application on display device of remote computer as would be the case were the user to directly access legacy application on application server . This includes the user depressing a control button once all values have been filled in. In response in step remote computer browser submits data from form via HTTP over network to network server . Conventionally the browser packages the form data as a string which includes the values input by the user and the input tags associated with the values. In step in response to receiving the form data a macro manager of the integration object on network server identifies a macro corresponding to the form. Macro manager provides services to integration object for extracting the user entered values the input field tags for the respective values and the dialog ID from the received form data.

The extracted values process ID and dialog ID are then passed to message constructor which constructs a message containing the values for sending to launched integration object . illustrates the component parts of message . Message produced by message constructor contains the previously mentioned process ID to identify the instance of the legacy application dialog ID to identify the screen of the legacy application to which values are to be inserted user entered values and control ID of any control button that the user selected when filling out the form. The constructed message is sent to application server .

Thus message received by application server from network server is intended for an instance of the legacy application as indicated by the message s process ID . That instance of legacy application is identified in step by mapper application parsing process ID from message . The format of message is also validated by mapper application .

Also in step message manager application converts message received from network server to a message format employed by the operating system of legacy application and posts the converted message to the instance of legacy application by message manager application . With the message converted to the operating system s message format it appears to legacy application as if the message came from the operating system in response to a hardware input event. In this manner inputs received over network are posted to the legacy application by message manager in the form the legacy application expects to receive inputs with the assistance of the operating system s API. For example legacy application may expect to receive inputs from keyboard of application server on which it is executing. The inputs contained in the message posted to legacy application appear to it as if the message was formed by the operating system in response to a keyboard event.

For example in one instance the event is a keyboard event. In general on the Microsoft Windows operating system for example when a user presses any key stroke the operating system posts a keyboard message including key down or key up along with the required information such as what is the key pressed a b c etc 1 2 3 etc and what are the status of the some keys like control alt shift etc. A similar keystroke event can be also be generated by an application like message manager to the legacy application without intervention of the operating system. This is possible because the operating system of the legacy application provides API s to post messages between applications as an inter process communication mechanism. Accordingly in an embodiment of the present invention message manager and legacy application use this inter process communication mechanism to post messages. Message manager constructs the keystroke event message with the needed information such as the key character to be sent along with the status of alt ctrl shift keys etc. If there is a string that needs to be sent to legacy application it is sent as a sequence of individual characters.

Legacy application reacts to the message from message manager in a manner according to the usual operation of application which typically includes generating a different screen on display device of application server . Outputs from the legacy application are typically not compatible with network environments. Accordingly outputs from the legacy application have to be converted to a structure that is compatible with the network environment.

Server module in step then reads data from the current new screen in a well known manner commonly referred to as screen scraping and identifies the current screen from the dialog ID. In step server module then passes the dialog ID to network server together with output data extracted from the current screen. The dialog ID exists as part of the legacy application. Such dialog ID s are assigned as part of legacy application development.

Upon receipt of the dialog ID and output data in step the macro manager on network server identifies the form that corresponds to the received dialog ID retrieves from the storage device of network server information representing the particular form integrates the output data with the information representing that particular form and sends to the browser executing on remote computer the information representing the current screen formed by the legacy application. Upon receipt of the information representing the current screen of the legacy application by remote computer the browser emulates the current screen on the display device of remote computer in step by displaying the form with the integrated output data.

Operation then continues in a manner described above from step where user inputs on remote computer are communicated to the legacy application and outputs from the legacy application are communicated back to remote computer .

The operation of system will now be described with reference to an example scenario where a user wants to check his bank account details with the bank account details being maintained by a legacy application. The operation starts when the user on remote computer and using an Internet browser sends a request for access to a bank account legacy application to network server .

Upon receipt of the request for access to the bank account legacy application by network server from remote compute network server launches an instance of the integration object resident thereon. The server application executing on network server identifies from the request the bank account legacy application remote computer wishes to access and sends a request to application server hosting the legacy application to launch the legacy application.

The server module on application server then launches an instance of legacy application and responds to the request from network server by sending the process ID of the instance of legacy application to network server as well as information relevant to a first screen of the bank account legacy application. This is a log on screen.

Upon receipt of the process ID and information relevant to the first screen macro manager on network server retrieves from its storage device HTML code for a first form and sends this information to the browser executing on remote computer . The first form represents the first screen of the legacy application and is used by the browser to emulate the log on screen on remote computer . The browser displays the first form on display device of remote computer .

The user logs into a screen displayed by a browser on display device of remote computer by entering using keyboard an account ID and a password into the field provide on the form. Once a submit button is depressed the browser sends user entered values and their tags from the form as a string including the account ID and password to network server .

Server application receives the string from the form and extracts the user entered values. The extracted values which comprise the account ID and the password are then passed to message constructor which constructs a message containing those values before the message is sent to application server .

Upon receipt of the message by application server the targeted instance of legacy application is then identified by mapper application and message manager application converts the message to the message format employed by the operating system of application server . The converted message is then posted to the instance of the legacy application which sees the message as a normal log on message in response to a normal keyboard input.

An account details legacy application reacts to the log on message by presenting the requested bank account details on the display device of application server if the login succeeds.

The account details are then read from the new screen using screen scraping. The account details and the dialog ID of the screen itself are then passed to network server . The macro manager on network server identifies the screen of legacy application that corresponds to the received dialog ID and sends to the browser executing on remote computer information representing a form associated with that screen together with the data representing the account details. Finally the browser displays the form on the display device of remote computer .

Similarly if the log on fails the dialog ID of a log on failure screen is passed to network server . The macro manager on network server sends to the browser executing on remote computer information of a form representing the log on failure screen. The browser then displays the log on failure form.

It may be noted that in the above described arrangement at various points in the communication processes among remote computer network server and application server the issue is presented of how to map between a legacy application screen and a form. This issue is resolved in a variety of ways in various embodiments of the present invention.

In creating a form for a corresponding screen of legacy application according to one embodiment of the invention a software developer assigns a unique dialog ID to the form and includes the dialog ID in the HTML code for the form i.e. the code that a browser uses to render the form. The software developer creates the HTML forms to include unique tags for with each input and output field. In embodiments of the invention without a unique dialog ID for a form correspondence among inputs and a legacy screen can be determined by unique variable names for inputs. That is integration object may have variable instances as attributes and a macro may have mapping among the variables to real controls on the legacy screen. Thus mapping among input values and the legacy screen is enabled by this arrangement. Similarly after communication output values are set into instance variables of integration object .

In various embodiments of the present invention the following processes or data structures of server are involved in parsing results including the DialogID and sending them to the legacy application as follows. Integration Object is a runnable entity of server in order to avail the services offered by server such as HTTP transport XML parsers client session tracking etc. For example if server is a websphere application server then runnable entity may be a java class file. Macro manager is a library bridge between integration object macros and legacy application server providing api s function to extract information. Integration object uses macro manager for many services such as extracting relevant information from a macro requesting to communicate send and receive to legacy application server etc. A macro may be an XML file representing the screen information of the legacy application. It has information such as the input and output fields on a particular legacy screen and how to trigger the legacy application to process with the given outputs.

In an embodiment of the invention in which the forms are HTML Forms a server side form handling mechanism is JSP and integration object is Bean for one particular user request one instance of integration object is created and completes steps and described herein above which includes saving results for further communication. For instance a current HTML input form may be as follows 

According to this embodiment of the invention process LogonOutput.jsp passes on values to integration object on server gets process output from integration object and then creates HTML forms for delivery to remote computer . The Logonoutput.jsp program on server may be as follows wherein comments are embedded between tags 

Integration object gets values including dialog id process id control id etc. by extracting for a particular variable accoutnumber and password from a macro. The variable name is unique so there will not be any confusion. For example a macro may be as follows 

In one embodiment of the present invention each legacy screen has a unique Dialog ID that was part of the originally developed application and that can be determined by use of an operating system API. A developer creates a form for each screen of a legacy application such as an HTML file. The developer assigns a unique Dialog ID for each form so the correspondence between each form and legacy screen can be determined. In one embodiment of the invention either the Dialog ID for each HTML form is the same as the Dialog ID for the corresponding legacy screen or else some sort of map showing correspondence between legacy screens and corresponding HTML forms to send to the user is kept on server . A user sends a request from remote computer to server including an identifier of a requested legacy application . Legacy application inherently has a first screen such as a logon screen for example. For example the legacy application s first screen s Dialog ID may be logon999. Server gets the HTML file that corresponds to that first screen either by getting the HTML file with the same Dialog ID as the first legacy screen or else using its map.

In one such embodiment the HTML file s Dialog ID may also be logon999. Server also gets initial data if the first screen includes some such initial data from legacy application . Server may modify the HTML code of the file to add the initial data from the legacy application and then server sends this version of the HTML file including the initial data to the user on remote computer . The user interacts with the form and ultimately sends results i.e. text numbers or selections back to server in the form of a string having tags associated therewith as were defined by the HTML file. That is the user does not send the form itself back but rather sends results i.e. text numbers or selections that arise from the user interacting with the form. Server has to somehow determine that these returned results are for the first form which in turn is for the first legacy screen. In one embodiment of the invention the Dialog ID logon999 is included in the HTML file. Accordingly for this embodiment of the invention the results returned to server will also include Dialog ID logon999 so server can use the returned Dialog ID logon999 to point the returned results back to the legacy screen of the same Dialog ID. An advantage of the present invention is that the legacy application and associated databases remain unchanged. Inputs and outputs to and from the legacy applications are the only elements affected.

Due to the fact that the legacy application is accessed using messages in the form produced by the native operating system inputs received over the network are accepted by the legacy application. Also as the input messages are in the regular form there is no risk of corrupting the legacy application nor its associated database s .

Herein reference is made to forms in a markup language format. It should be understood that such forms may be of any of a variety of types including HTML forms XHTML forms and Xforms.

The foregoing describes only some embodiments of the present invention and modifications and or changes can be made thereto without departing from the scope and spirit of the invention the embodiments being illustrative and not restrictive.

