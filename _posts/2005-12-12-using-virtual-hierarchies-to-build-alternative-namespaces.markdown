---

title: Using virtual hierarchies to build alternative namespaces
abstract: A containment mechanism provides for the grouping and isolation of multiple processes running on a single computer using a single instance of the operating system. A system is divided into one or more side-by-side and/or nested isolated environments enabling the partitioning and controlled sharing of resources by creating different views of hierarchical name spaces via virtual hierarchies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539481&OS=08539481&RS=08539481
owner: Microsoft Corporation
number: 08539481
owner_city: Redmond
owner_country: US
publication_date: 20051212
---
This application is related in subject matter to U.S. patent application Ser. No. 11 301 066 entitled OS Mini Boot for Running Multiple Environments filed Dec. 12 2005 U.S. patent application Ser. No. 11 301 071 entitled Use of Rules Engine to Build Namespaces filed Dec. 12 2005 U.S. patent application Ser. No. 11 301 072 entitled Mechanism for Drivers to Create Alternate Namespaces filed Dec. 12 2005 and U.S. patent application Ser. No. 11 301 065 entitled Building Alternative Views Of Name Spaces filed Dec. 12 2005.

When a single computer is used to run multiple workloads a balance should be struck between isolation of applications and the cost of using and administering the application isolating system. Applications should ideally be isolated from each other so that the workload of one application does not interfere with the operation or use of resources of another application. On the other hand the system should be flexible and manageable to reduce the cost of using and administering the system. Ideally the system should be able to selectively share resources while maintaining application isolation. Typically however all processes running under the same user account have the same view of system resources. The lack of isolation of the applications running on a particular computer contributes to application fragility application incompatibility security problems and the inability to run conflicting applications on the same machine.

A number of different solutions have been proposed which address one or more aspects of the problems discussed above. One way to isolate applications running on the same machine is to run the applications on different virtual machines . A virtual machine VM enables multiple instances of an operating system OS to run concurrently on a single machine. A VM is a logical instance of a physical machine that is a virtual machine provides to the operating system software an abstraction of a machine at the level of the hardware that is at the level of the central processing unit CPU controller memory and so on. Each logical instance has its own operating system instance with its own security context and its own isolated hardware resources so that each operating system instance appears to the user or observer to be an independent machine. VMs are typically implemented to maximize hardware utilization. A VM provides isolation at the level of the machine but within the virtual machine no provisions for isolating applications running on the same VM are provided for by known VM implementations.

Other known proposed solutions to aspects of the problems described above include Sun Microsystem s Solaris Zones jails for UNIX BSD and Linux the VServers project for Linux SWSoft s Virtuozzo web hosting solutions from Ensim and Sphera and software available from PolicyMaker and Softricity.

Another approach that addresses aspects of application isolation is hardware partitioning. A multi processor machine is divided into sub machines each sub machine booting an independent copy of the OS. Hardware partitioning typically only provides constrained resource allocation mechanisms e.g. per CPU allocation does not enable input output IO sharing and is typically limited to high end servers.

Hence in many systems limited points of containment in the system exist at the operating system process level and at the machine boundary of the operating system itself but in between these levels security controls such as Access Control Lists ACLs and privileges associated with the identity of the user running the application are used to control process access to resources. There are a number of drawbacks associated with this model. Because access to system resources is associated with the identity of the user running the application rather than with the application itself the application may have access to more resources than the application needs. Because multiple applications can modify the same files incompatibility between applications can result. There are a number of other well known problems as well.

There is no known easy and robust solution using known mechanisms that enables applications to be isolated while still allowing controlled sharing of resources. It would be helpful if there were a mechanism that allowed an application process group of applications or group of processes running on a single machine to be isolated using a single operating system instance while enabling controlled sharing of resources.

An intra operating system isolation containment mechanism called herein a silo provides for the grouping and isolation of processes running on a single computer using a single instance of the operating system. A single instance of the operating system divides the system into multiple side by side and or nested isolated environments silos enabling the partitioning and controlled sharing of resources by providing a view of a system name space to processes executing within the silos. That is a single OS image serving the computer employs the mechanism of name space containment to constrain which process group of processes application or group of applications can use which resource s . Restricting access to resources is therefore directly associated with or based on the silo the process or application is placed in because if a process or application is unable to resolve a name used to access a resource it will be unable to use the resource. More particularly controlled sharing of resources is implemented via hierarchical name space containment of hierarchical name spaces such as the file system. New points of containment are provided at the process level group of processes level application level or group of applications level. A silo provides an abstraction at the level of a high level operating system e.g. at the level of files directories objects and semaphores to the applications and processes within the silo by enabling the applications and processes to run within the silo s view of the system or parent hierarchy.

A silo specific view of the system hierarchy or view of the parent hierarchy in the case of a nested silo may be created by creating and exposing a virtual hierarchy or tree the nodes of which may be linked back to a node or name in a physical hierarchy associated with the external system environment in which the silo resides or to a node or name in a parent silo . A virtual hierarchy is volatile. It is not persisted to permanent storage e.g. is not written to disk or to other stable storage media but resides only in memory or other volatile media and may be created dynamically as the silo is initiated. When the silo exits the virtual hierarchy may be discarded. The physical hierarchy in contrast is permanent persisted to stable storage and is independent of the existence or non existence of the silo. A silo may be implemented by having the silo provide the root for the processes running in the silo. For example the silo may provide the root of a virtual directory to be used by a process running in the silo. The provided root may represent the root of the file system directory for the process in the silo. A process within the silo cannot see or express any names above the virtual root. One or more hierarchies may be associated with a silo.

A virtual hierarchy may be created by grafting branches from the system hierarchy onto nodes directly or indirectly attached to the virtual root associated with the silo. For the virtual file system the grafting operation makes either a file or a directory appear at one or more places within the process s virtual file system directory. The file system implementation effectively builds a new file system view over the system s physical file system name space which is persisted to permanent storage and does exist after the silo exits or over the parent s file system name space. This concept may also be applied to other hierarchical name spaces such as the registry and the object manager name spaces.

A file system is a method for storing and organizing computer files and the data the files contain on storage e.g. on disk . Most file systems use an underlying non volatile data storage device on which files are persisted. A typical storage device provides access to an array of fixed size blocks sometimes called sectors which are generally 512 bytes each. The file system software is responsible for organizing these sectors into files and directories. The file system also keeps track of which sectors belong to which file and which sectors are not being used. Traditional file systems offer facilities to create move and delete both files and directories.

File systems typically have directories which associate file names with files usually by connecting the file name to an index into a file allocation table of some sort such as the FAT in an MS DOS file system or an inode in a UNIX like file system. Directory structures may be flat or may allow hierarchies. In hierarchical directories each directory may include one or more sub directories. In some file systems file names are structured with special syntax for filename extensions and version numbers. In others file names are simple strings and per file metadata is stored elsewhere.

A disk file system is a file system designed for the storage of files on a data storage device most commonly a disk drive. The disk drive may be directly or indirectly connected to the computer. Examples of disk file systems include FAT NTFS HFS ext2 ISO 9660 ODS 5 and UDF. In contrast database file systems are not hierarchical. Instead of hierarchical structured management files are identified by their characteristics like type of file topic author or similar metadata. Examples include Gnome VFS BFS and WinFS. Transactional file systems are those that log events or transactions to files. Each operation performed may involve changes to a number of different files and disk structures. In many cases these changes are related so they should be executed at the same time. An example might be a bank sending another bank some money electronically. The bank s computer will send the transfer instruction to the other bank and it will also update its records to indicate the transfer has occurred. If the bank s computer crashes before its records have been updated upon reset there will be no record of the transfer but the bank will be missing some money. A special purpose file system is a file system that is not a disk file system or network file system. This includes systems where the files are arranged dynamically by software intended for communication between computer processes or temporary file space for instance.

Various file systems use one or more of three kinds of links to point to data in files hard links symbolic links and aliases. A hard link is a reference or pointer to the physical data on a volume. In most file systems all named files are hard links. The name associated with the file is a label that refers the operating system to the actual data. More than one name can be associated with the same data but the data must exist in the same file system. A symbolic link is a type of link used in Unix for example which refers to another file by its pathname. In contrast with hard links there are no restrictions on where a symbolic link can point it can refer to a file on another file system to itself or to a file which does not even exist detected as a problem only when the link is accessed . An alias is designed to maintain a link to its original file even if the original file is moved or renamed. All of these links are however typically associated with non volatile directories.

Unix and Unix like operating systems assign a device name to each device but the files on the device are not accessed by the device name. Instead files on the device are accessed by a virtual file system which makes all the files on all the devices appear to exist under one hierarchy. This means that in Unix there is only one root directory shared by all the partitions on the device. Every file existing on the system is located somewhere under that single root directory. The UNIX chroot command enables the root directory to become something other than its default for the lifetime of a process however the root directory is stored on non volatile storage media so that if the process crashes the directory stored on disk must be rebuilt.

Unlike many other operating systems Microsoft WINDOWS uses a drive letter abstraction at the user level to distinguish one partition from another. For example the path C WINDOWS represents a directory WINDOWS on the partition represented by the letter C. Each drive letter or partition is associated with a directory tree data structure. Each directory tree data structure has a root which represents the first or top most directory in a hierarchy. It is the starting point from which all the directories in the hierarchy originate. In Unix all file system entries including mounted partitions are leaves of this root. However under DOS and WINDOWS each partition has a separate root directory labeled C for a particular partition C and there is no common root directory above that. Each device may be partitioned into multiple partitions so that multiple root directories may be associated with a single device. For example a user s physical hard disk may be partitioned into multiple logical disks each of which have their own drive letter and root directory. 

Secure access to file system operations can be based on access control lists ALCs or on capabilities. Most commercial file systems including some Microsoft WINDOWS operating systems use access control lists to control access to resources. Because of the widespread use of ACL based permission controls multiple applications are often allowed to share resources including shared access of hierarchical name spaces . Access to the resources is based on privileges associated with the identity of the person running the application or process rather than being based on the needs and characteristics of the application itself. This approach can be problematic. For example a user may have broad access privileges e.g. administrator status because some of the programs he runs need that level of access. For example because program1 run by user1 needs access to files one to ten user1 s access privileges must permit him to access files one to ten. Suppose program2 only needs access to files one and two. When user1 runs program2 program2 will nevertheless have access to files one to ten because user1 s privileges allow access to files one to ten. Thus because file system operations are based on ACL based permission controls in general the file system name space can be and generally is more or less global to all the processes launched by user1 running on the machine. ACL based permission controls lead to a number of problems including a program could waste processing time handling things it should not consider the presence of a new file that the program is not expecting might cause the program to operate incorrectly different programs may write or modify the same file causing interference and so on. This problem is exacerbated because not all programs have the same level of trustworthiness. Program2 may not be as trustworthy as program1 but since the user s privileges allow him to access files one to ten program2 has access to files one to ten and may maliciously modify them. In addition there may be occasions when it is desirable to provide different programs different files even though the programs use the same name for the file. Finally different programs may use the same name but mean different files. Hence there is a need for better control of shared resources than that which can easily be obtained using ACLs and privileges.

To address the need for a more powerful access control mechanism than that provided for by ACLs the silo containment mechanism is introduced that enables the creation of a new isolated environment in which a process program set of programs or application can run. A new name space is created and associated with the isolated environment. The new name space provides a view of a global name space for the process program set of programs or application running in the silo. The new name space is created by creating a virtual hierarchy and joining pieces of an existing physical non volatile e.g. on disk file system to the leaf nodes of the virtual hierarchy to create a silo specific virtual hierarchy. The virtual hierarchy is stored in volatile storage e.g. memory and has no effect on the system hierarchy which is stored in non volatile storage. As the virtual hierarchy does not affect the global name space and is not persisted to non volatile storage if the system crashes the global name space does not need to be repaired or restored as would be required if the global or system name space on non volatile storage were modified. This concept may be applied to hierarchies such as the file system and other hierarchical name spaces.

The invention contemplates the presence of a number of silos that are fairly dynamic that is the silos may come and go and may change fairly rapidly. When the silo is created one or more virtual hierarchies for the silo are created in memory. When the silo exits the virtual hierarchy or hierarchies for the silo are discarded.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Within each partition system may include a system environment and a number of isolated environments. In some embodiments of the invention the isolated environments are silos. The system environment may include or be associated with a number of name spaces including but not limited to one or more of a system processes name space a system objects name space and a file system name space . System may also include an operating system . The operating system may include one or more operating system components including but not limited to an operating system kernel and an object manager . In some embodiments of the invention the object manager resides within the kernel. System may also include other components not here shown but well known in the art.

System may include one or more side by side silos etc. in each partition or associated with each drive letter. Each silo in some embodiments is associated with its own silo process name space silo object name space and silo file system name space but shares a single operating system instance with all the processes in the system. For example in silo is associated with silo processes name space silo objects name space and silo file system name space . Silo etc. does not however have its own operating system instance. That is for example silo is served by the same operating system instance operating system that serves the system environment and any other silos that may exist. Silo etc. may include one or more child silos etc. Silo itself may include one or more child silos and so on to any degree of nesting. Child silo in is associated with child silo processes name space child silo objects name space and child silo file system name space but is served by the same operating system instance that serve all the other environments. A child silo may be created by a process running in its parent silo. For example in a process in silo processes name space may have created child silo by creating a view into the silo name space as described more fully below. A process may not escape from its silo. For example a process in silo processes name space may not escape from silo . Similarly a child process of child silo processes name space may not escape from child silo . Furthermore the smallest entity capable of being siloed placed in its own silo is a process. A sub process cannot be siloed.

Thus the global name space for resources may be overridden by a silo specific version of the name space the virtual hierarchy that restricts the access of processes within the silo to the resources to those appearing within the virtual hierarchy. Processes may be assigned to the silo based on characteristics associated with the process so that resources can be restricted for processes in the silo based on the process instead of based on the user running the process. For example each silo may override portions of the global file system name space. If the silo is a child silo portions of the parent silo name spaces can be overridden by the child silo name space. For example when a process such as process etc. running within a silo e.g. silo attempts to access a particular part of the file system the access may be redirected to a silo specific version of the file system.

To illustrate the creation of a virtual hierarchy for a silo the following example is directed to the creation of a virtual file system directory for the silo but it will be understood that the process also applies to the creation of other hierarchical name spaces. In the tree structure outside of the dotted box illustrates an exemplary physical file system directory as it exists in non volatile storage. Node is the root node. Nodes and represent child nodes of node . Nodes and are first level nodes. Node is a child node of node nodes and are child nodes of node and node is a child node of node . Nodes and are second level nodes. Nodes and are child nodes of node and nodes and are child nodes of node . Nodes and are third level nodes. Physical directory may represent the global hierarchical file system directory for processes in the system environment and may represent for example the following 

Nodes and may represent user folders or sub directories e.g. node may be user Madhu s folder node may be user Jeff s folder and node may be user Erick s folder .

Virtual hierarchy enclosed in the dotted box may represent a virtual file system directory that may be created in memory i.e. volatile storage for a silo such as silo of created at step . Virtual hierarchy exists independently of physical hierarchy . Physical hierarchy is unaffected by the creation use or operations on virtual hierarchy . An empty virtual root e.g. node is created . Then virtual directory nodes are created . For example in nodes and may be created. Nodes may be created on one or more sub root levels. For example nodes and are first level nodes and node is a second level node. Any number of levels of nodes may be created. Junctions may then be created to the physical hierarchy i.e. to the physical file system directory in the example on non volatile storage . A junction may be created from a leaf node such as leaf node leaf node and or leaf node to a node in the underlying physical directory. For example in virtual directory a junction junctions are indicated in the figures by dashed arrows extending from leaf node of virtual directory to node of physical directory has been created a junction from leaf node of virtual directory to node of physical directory has been created and a junction from leaf node of virtual directory to node of physical directory has been created. It is not necessary to name nodes in the virtual directory the same as corresponding nodes in the physical directory. For example the node named Erick in physical directory may be named ErickX in virtual directory . illustrates the effect of creation of the junctions.

It will be appreciated that a junction from any node of a virtual directory may be established to any node of a physical directory. Furthermore it will be appreciated that any node in the physical directory that exists above the junction will be unavailable to any process using the virtual directory. For example nodes and are unavailable to a process whose virtual directory is virtual directory . Furthermore it will be appreciated that additional levels of nodes may exist between the virtual root node and the leaf nodes in the virtual directory hierarchy as shown in in which the nodes and exist on a first sub root level between root node and leaf nodes and . Node exists on a first sub root level between root node and leaf node and node exists on a second sub root level between node and leaf node . Although only three sub root levels are shown in any number of sub root levels may exist in a virtual directory hierarchy.

a pointer to a physical directory node or a string representing the name of the physical directory node

an access mask An access mask is a 32 bit value containing the permissions that are allowed or denied in the ACE Access Control Entry which is used in an ACL Access Control List . When an object is opened the Access Mask is used to request access rights.

A process a group of processes a program a group of programs an application or a group of applications may be placed in the isolated environment. Each process etc. will access the virtual hierarchy associated with the isolated environment. Access to resources is thus restricted to those portions of the system hierarchy for which junctions to the physical hierarchy are provided. The virtual hierarchy provides the only way that a process within the isolated environment can access a resource or set of resources represented by the virtual hierarchy.

At if the node referenced is a node in the virtual directory and the node referenced is not a leaf node a handle is returned to the virtual node . If the node referenced is a leaf node the name used to reference the node is changed to a name that can be resolved in the physical directory and a handle to a node in the physical directory is returned . For example suppose a request to open a file is received. Suppose that the specific request is open C Documents and Settings Erick . At it may be determined that a silo e.g. silo exists on partition C. If the process requesting access to the Erick folder is a process such as a process of system processes i.e. a process outside the silo a handle to node of may be returned. If the process requesting access to the Erick folder is a process such as process i.e. a process within the silo the node to which access is being requested is node of virtual directory . Node is a leaf node with a junction to node in the physical directory. Suppose node of virtual directory is named ErickX. In this case the name would have to be changed to Erick in order to be correctly resolved in the physical directory.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

