---

title: Independent message stores and message transport agents
abstract: Multiple independent MTAs transmit messages such that if one of the MTAs fails, the other MTAs may continue to transmit messages. Multiple independent message stores are provided such that if one of the message stores fails, messages on the other message stores may continue to be transmitted. Multiple notification agents monitor the message stores for new messages and notify one of the MTAs when a new message is available for transmission.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08077699&OS=08077699&RS=08077699
owner: Microsoft Corporation
number: 08077699
owner_city: Redmond
owner_country: US
publication_date: 20051107
---
Businesses and individuals rely heavily on e mail systems to communicate. Because of the critical nature of these communications it is essential that e mail systems are both reliable and efficient. Current methods known in the art typically co locate a message transport agent MTA and a message store within a single integrated system in order to manage delivery to users and for message transmission. This method may result in two single points of failure.

First the message store may be a single point of failure. The message store contains all messages in the system. If the message store fails the MTA cannot access the message store. A system failure will result because the MTA cannot deliver new incoming messages to the message store and no outgoing messages on the message store can be transmitted by MTA.

Second the MTA may be a single point of failure. The MTA is responsible for delivering and transmitting messages to the message store. If the MTA fails a system failure will result because no new incoming messages can be delivered to the message store and no new outgoing message may be transmitted from the message store.

In one embodiment a method is provided for notifying a MTA that a new message is available for transmission on a message store. When the new message has been received on the message store an MTA is selected and notified. The MTA responds to the notice by transmitting the new message to a specified destination.

In another embodiment the clustered mail box and notification agent includes multiple notification agents and multiple MTAs. The notification agents can access all MTAs. Each notification agent is associated with a message store. The notification agent monitors the message store for new messages. Each MTA can access all message stores.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The notification agents are responsible for notifying one of the MTAs that a new outgoing message is available on the message store . The message stores contain all messages incoming and outgoing within the cluster . At least one message store is associated with each server C D executing the notification agent . Outgoing messages are stored on the message store awaiting transmission by the MTA .

Each notification agent may access all MTAs and each MTA may access all messages stores via the servers C D. If a message store is inaccessible and a remaining message store is accessible the received messages on the remaining accessible message store may be transmitted thus minimizing the impact of the inaccessible message store as a single point of failure. And if the selected MTA is inaccessible and a remaining MTA is accessible the received message may be transmitted by the remaining accessible MTA thus eliminating the selected MTA as a single point of failure.

By executing the MTAs and the notification agents on separate servers A B C D and allowing full mesh connectivity between MTAs notification agents and message stores one of the single points of failure is removed the single MTA. The message store will still remain a single point of failure but there are now less moving parts on that machine so that the probability of failure is further reduced. Additionally if multiple servers C D house the message stores and a single message store fails the MTA may continue to transmit the messages from the other message stores. This will minimize the impact of the failure on the system.

Furthermore enabling multiple MTAs to share in message transmission allows the work load to be shared across multiple servers A B running the MTAs . This load balancing provides a more efficient use of hardware resources. Also multiple MTAs allow a network operator to take one MTA server offline without halting the flow of messages. Thus hardware or software upgrades can be done to the server without any impact to the functionality of the system.

In one embodiment the notification agent runs inside of service on the server C D. Because the notification agent and the MTA are located on separate servers the notification agent utilizes a remote procedure call to communicate with the MTA . Additional means of communication may be employed including UDP ping and TCP connections. In another embodiment the notification agent tracks performance counters including remote calls per second remote calls and the number of inaccessible servers. To alert system administrators of a possible system failure in another embodiment the notification agent creates entries in a system log when no MTA is available to process a message transmission.

In operation the notification agent monitors the message store for new outgoing messages . When a new outgoing message is detected by the notification agent the notification agent selects and notifies one of the MTAs that the message is available for transmission. The MTA responds to the notification by transmitting the message to other clusters other organizations or to one of the message stores in the cluster .

The server typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by server . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by server . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The server typically has some form of system memory including computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM .

The server may operate in a networked environment using logical connections to one or more remote computers such as a remote computer. The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to server . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment server is connected to the LAN through a network interface or adapter. When used in a wide area networking environment server typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to server or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation server executes computer executable instructions such as those illustrated in the figures to implement aspects of the invention.

The override list is a list of servers executing the MTA that is maintained on the server executing the notification agent. By default no override list will exist. If the override list is present the notification agent will only notify MTAs in the list. For example the override list may be located on a server object in a ACTIVE DIRECTORY brand directory service of Microsoft Corporation Redmond Wash. The override list will be stored in the SubmissionServerOverrideList property that will exist in the server object. The set mailboxserver and get mailbox server tasks may be used to update the override list. The following is an algorithm that retrieves the current override list from the server object clears the list and adds a new entry to the list 

At if it is determined that the override list of MTA does not exist a list of available MTAs is obtained at . In one embodiment the list is obtained by querying the directory service for the list of all MTAs in the cluster. At the notification agent monitors the message store for new messages. When a new message is detected the notification agent selects an MTA from the list at . In one embodiment the MTA is selected to balance the load across the MTAs so that each MTA will get substantially equal distribution of notifications. For example the following round robin algorithm may be used to implement the load balancing where the CurrentMTA represents the selected MTA MTAArray represents the list of MTAs and NumMTAs represents the number of MTAs in the MTA list CurrentMTA MTAArray CurrentMTA NumMTAs 

In another embodiment the MTA is selected as a function of the load capacity of each of the MTAs and the current load of each of the MTAs. In another alternative embodiment a list of monitored message stores is obtained and the MTA is selected as a function of the list of message stores and the list of MTAs. In another embodiment the selection prefers the same MTA to increase system determinism. For example the list of message stores and MTAs are sorted the index of the message store containing the new message is determined and the MTA is selected by indexing into the MTA list using the index determined in the preceding step allowing the index to wrap.

At a notification is sent to the selected MTA. In one embodiment the notification agent utilizes a RPC to send the notification. In another embodiment the notification provides the following data as parameters associated with the new message entry ID for the item being submitted parent entry ID for the message message class for the message the mailbox that contains the message. In this embodiment all parameters are retrieved off a MapiEvent structure on the server.

At the notification agent determines whether the notification was received by the MTA. In one embodiment a return value is implemented to make the determination. The return value will contain one of the following possible values although other values are contemplated notification successful notification failed due to a transient message error or notification failed due to a non message error. For example if notification failed due to a transient message error the notification will be retried at later time because this is an indication that the MTA was accessible by the notification agent but unable to transmit the message temporarily. If the notification failed due to a non message error the notification will be retried utilizing another MTA because this is an indication that the MTA was no longer accessible to the notification agent.

If a determination is made at that the notification was successful performance counters are updated at . Then the notification agent continues to monitor the message store for new messages at .

If a determination is made at that the notification unsuccessful the selected MTA is removed from the MTA list at . In one embodiment the removed MTA will be added back to the list of MTAs after 600 seconds. If it is determined that the MTA list is not empty at a new MTA is selected at . In one embodiment the next MTA in the list is selected as the new MTA. Once the new MTA is selected at the new MTA will be notified that the message is available for transmission at .

If the MTA list is determined to be empty at an event log entry is written at to alert system administrators that there are no MTAs available to transmit the new message. At the notification agent will temporarily suspend notifications.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

