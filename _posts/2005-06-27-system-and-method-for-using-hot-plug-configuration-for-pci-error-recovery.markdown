---

title: System and method for using hot plug configuration for PCI error recovery
abstract: A method, system, and program product for recovering from a bus error in a computer system having a hot plug interface. In accordance with the method of the present invention, an operating system transparent interrupt, such as a system management interrupt, is generated in response to a bus error. Responsive to the operating system transparent interrupt, the hot pluggable bus is scanned and a device associated with the error is identified by an interrupt handler invoked by the interrupt. Finally, a hot plug configuration manager, such as an advanced configuration and power interface is utilized to remove the identified device from system operations without having to restart the system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07447934&OS=07447934&RS=07447934
owner: International Business Machines Corporation
number: 07447934
owner_city: Armonk
owner_country: US
publication_date: 20050627
---
The present invention relates generally to error handling in data processing systems and in particular to a system and method for recovering from an error occurring in association with a bus or interconnect that supports hot plugging.

Computer systems generally comprise multiple devices interconnected by one or more buses or interconnects. For example a typical computer system architecture includes a processor connected to main memory through a host or memory bus. The host or memory bus is connected to an expansion bus. In many computer architectures the expansion bus is typically a local bus such as a peripheral component interconnect PCI bus. PCI generally designates a physical and logical interconnection between a host entity such as a processor or bus bridge and devices attached via so called expansion slots designed for high speed operation.

PCI bus architecture development has been instrumental to developments in overall system architecture. The PCI X standard is one such development directed toward improving performance of high bandwidth devices such as gigabit Ethernet cards Fibre Channel Ultra3 Small Computer System Interface SCSI processors interconnected as a cluster etc.

A problem associated with bus architectures such as PCI relates to error handling. When an error is detected on the bus such as in a PCI card slot the address at which the failure occurred in logged. This is typically accomplished by error logging circuitry in the host bridge or PCI to PCI bridge . When for example a PCI bus parity error PERR or system error SERR occurs on any PCI X bus on a server system the conventional error handling technique proceeds as follows. First a system management interrupt SMI is generated in response to the PERR SERR condition. An SMI handler is invoked and scans all PCI X devices in the system to identify the problematic device. The SMI handler typically records the error in an error log maintained on a bus bridge or adapter device and asserts a user indicator such as an LED indicator corresponding to the identified device. Finally the SMI handler requests a service processor to generate a non maskable interrupt NMI that results in a system reboot procedure.

For many computer systems such as high end servers any unscheduled system shutdown is costly. Accordingly there is a need for handling PCI bus errors that enables the system to continue reliable operations in a manner that avoids rebooting the system.

A method system and program product for recovering from a bus error in a computer system having a hot plug interface are disclosed herein. In accordance with the method of the present invention an operating system transparent interrupt such as a system management interrupt is generated in response to a bus error. Responsive to the operating system transparent interrupt the hot pluggable bus is scanned and a device associated with the error is identified by an interrupt handler invoked by the interrupt. Finally a hot plug configuration manager such as an advanced configuration and power interface is utilized to remove the identified device from system operations without having to restart the system.

The above as well as additional objects features and advantages of the present invention will become apparent in the following detailed written description.

The present invention is generally directed to a system method and computer program product for handling bus errors. In particular the invention is directed to handling such errors resulting from failures in devices coupled to a bus or interconnect having hot plug configuration capabilities such as a peripheral component interconnect PCI bus. In a preferred embodiment the invention is directed to handling hard bus transaction errors such as data and or address parity errors that for example are reported using the PERR and SERR convention of the PCI specification. As explained in further detail with reference to the figures the present invention provides a means for enabling the system to recover from PCI input output I O errors and other bus transaction errors such as PCI bus parity errors PERRs or system errors SERRs by combining hot plug configurability with bus error detection and notification means. By incorporating hot plug configurability features into bus error processing faulty devices may be taken offline without the need to shutdown and reboot the system. In a preferred embodiment the present invention leverages advanced configuration and power interface ACPI hot plug capabilities such as those used in PCI X bus architectures together with PCI error detection functionality to provide an error recovery mechanism that enables a faulty bus device to be taken offline without having to reboot the system. Further information relating to the PCI and PCI X specification may be found in the PCI X specification rev. 2.0 the content of which is incorporated by reference herein in its entirety.

With reference now to the figures wherein like reference numerals refer to like and corresponding parts throughout and in particular with reference to there is depicted a data processing system adapted for implementing bus error recovery in accordance with the present invention. Data processing system is described herein as a symmetric multiprocessor SMP system although as used herein the terms data processing system computer and the like are intended to mean essentially any type of computing device or machine that is capable of receiving storing and running a software product including such devices as communication devices e.g. pagers telephones electronic books etc. and personal and home consumer devices e.g. handheld computers Web enabled televisions home automation systems multimedia viewing systems etc. .

As depicted in data processing system includes one or more processor s communicatively coupled to a system bus . Processor represents one or more central processing units of any type of architecture such as CISC Complex Instruction Set Computing RISC Reduced Instruction Set Computing VLIW Very Long Instruction Word or a hybrid architecture although any appropriate processor may be used. Processor executes instructions and controls overall system operation. In support of its control function processor reads and or stores code and data to from a main system memory . Although not depicted in processor may include a variety of other elements not necessary to understanding the present invention.

System memory is accessible to processor via system bus . System memory is typically implemented as a combination of non volatile storage media such as read only memory ROM devices and volatile storage media such as an array of dynamic random access memory DRAM devices.

As further depicted in a host bridge provides an interface between system bus and an I O bus to which one or more peripheral devices A N are connected. I O bus is typically compliant with one of several industry standard I O bus specifications including for example the Peripheral Components Interface PCI standard. Peripheral devices A N preferably comprise any type of peripheral device such as network interface cards NICs graphics controllers video accelerators audio cards hard or floppy disk controllers Personal Computer Memory Card International Association PCMCIA controllers Small Computer Systems Interface SCSI adapters telephony cards and others. Coupled to one or more of peripheral devices A N are additional downstream devices A N which may be PCI to PCI adapters or other devices for otherwise expanding the functionality of I O bus .

While only a single I O bus is depicted in systems such as data processing system generally include multiple PCI buses wherein each bus includes multiple devices and possibly connected to other buses via bridges.

In accordance with the invention I O bus conforms to a standard specification supporting hot plug capability. To implement this capability data processing system preferably includes a hot plug controller . Hot plug controller is communicatively coupled to the various I O bus peripherals A N via signals carried over I O bus and other signal lines not depicted . Such signals to and from hot plug controller are used to electrically and logically isolate a corresponding device from I O bus when removing a device e.g. PCI adapter card and or when taking the device offline in accordance with the bus error recovery technique of the present invention. Hot plug controller preferably is capable of generating parity and system error signals PERR and SERR when an error condition is detected for one of the devices A N. Such error signals may be reported by hot plug controller directly to processor or alternatively may be provided to other logic such as host bridge or other logic not shown and such other logic may generate a SMI. In any case when the hot plug controller asserts a bus transaction error signal such as a PERR or SERR signal an SMI or other suitable interrupt is asserted. As is known to those skilled in the art a SERR signal indicates a severe system error in data processing system relating to the addressing phase and PERR indicates a parity error during the data phase of PCI bus I O.

Host bridge facilitates communication between I O bus and system bus . Bus switch control logic within hot plug controller is coupled to host bridge and I O bus and provides control over the I O bus for increased loading thereof. More specifically and assuming I O bus conforms to the PCI hot plug specification of the PCI standard switch control logic within hot plug controller provides control over I O bus for insertion and removal of peripheral devices such as PCI adapter cards while allowing the system and the rest of the PCI I O subsystem to remain powered and operational. In this manner the load capabilities of I O bus are expanded and insertion and removal of PCI adapter cards is possible while allowing the system and the rest of the PCI I O subsystem to remain powered and operational via the use of in line switch modules not shown in combination with the bus switch control logic within hot plug controller .

Assuming peripheral devices A N are PCI adapter cards each of devices A N is installed into corresponding adapter slots A N. While not expressly depicted in each of adapter slots A N includes a connector that mates with a corresponding connector on the PCI adapter card thus providing an electrical and mechanical coupling interface between the adapter card and data processing system . Furthermore each of adapter slots A N preferably includes a mechanical or electromechanical member not depicted that can be mechanically actuated by a user. The mechanical members may comprise for example levers that can be flipped from one position to another and back. When actuated such a mechanical member causes a signal not depicted to be asserted to a hot plug controller to alert the controller that removal of the PCI adapter from the slot in which the mechanical member was actuated is underway. Among its other functions relating to configuration of peripherals A N hot plug controller causes the power to be applied or removed from a given one of slots A N depending on the configuration status of the corresponding devices as determined by configuration settings within ACPI BIOS .

Peripheral devices A N such as adapter cards use designated error signals such as a PERR or SERR signal to report a parity or system error relating to PCI I O. To avoid system operations using invalid or corrupted data convention PCI error processing generally includes halting and resetting i.e. rebooting in most cases. This can be the reason for a system crash or sudden shutdown which can be costly in terms of time and money in the case of a high end server application.

As further depicted in system memory includes persistent storage flash memory and volatile random access memory RAM . A number of program modules may be stored in system drives not depicted and RAM including an operating system application program modules and program data . Flash memory comprises electrically erasable programmable read only memory EEPROM modules for persistently storing such as system startup programs. Copied from Flash memory to RAM during system startup is a basic input output system BIOS containing the basic routines and instructions for transferring information between elements within data processing system such as during start up. In the depicted embodiment BIOS is an ACPI BIOS that includes instructions and modules for interacting with operating system and hot plug controller to implement hot plug as well as power management functionality within data processing system .

ACPI is generally a power management specification that enables the operating system to turn off selected devices such as a monitor or CD ROM drive when not in use for a specified period. In addition to providing power management ACPI also provides hot plug configuration support.

The Advanced Configuration and Power Interface ACPI specification was developed to establish industry common interfaces enabling robust operating system OS directed motherboard device configuration and power management of both devices and entire systems. ACPI is the key element in Operating System directed configuration and Power Management OSPM . ACPI evolves the existing collection of power management BIOS code Advanced Power Management APM application programming interfaces APIs PNPBIOS APIs Multiprocessor Specification MPS tables and so on into a well defined power management and configuration interface specification. ACPI provides the means for an orderly transition from existing legacy hardware to ACPI hardware and it allows for both ACPI and legacy mechanisms to exist in a single machine and to be used as needed. Further new system architectures are being built that stretch the limits of current Plug and Play interfaces. ACPI evolves the existing motherboard configuration interfaces to support these advanced architectures in a more robust and potentially more efficient manner.

Systems such as data processing system that support hot plug PCI utilize ACPI to inform the operating system of insertion and removal events. In convention systems ACPI discovers hardware insertion and removal events when a so called general purpose event is asserted and a system control interrupt SCI is raised. For example when a user requests to remove a hot pluggable device the following steps are performed. First the user may actuate an eject button for the PCI slot. The hot plug PCI controller responds by asserting a general purpose event. In response to the general purpose event the core chip set raises an SCI.

Known power management and configuration techniques such as the advanced power management APM and the plug and play specifications were implemented by basic input output system BIOS instructions stored in read only memory. When a power management or configuration event occurred e.g. a request to transition from an on state to a sleep state the BIOS received notice of the event via an operating system transparent interrupt known as a system management interrupt SMI . It was the responsibility of the BIOS to manipulate the necessary software state information and to control the system s hardware and perform the requested action.

Under the new ACPI when a power management or configuration event occurs the operating system is notified via an operating system visible interrupt known as a system control interrupt SCI . It is the operating system itself that directs all system and device power state transitions. Central to ACPI operations is an ACPI driver. This driver is an operating system level program which receives notice of all SCI events and either performs the necessary event handling actions itself or passes control to an ACPI control method.

The ACPI specification represents an abstract interface between a computer system s hardware and firmware and its operating system. The ACPI includes hardware registers tables and as well as ACPI BIOS . ACPI registers are used to store and pass event information between the hardware firmware and operating system. ACPI tables are used to describe system information e.g. supported power states power sources clock sources features e.g. available hardware devices and methods for controlling those features e.g. ACPI control methods . ACPI BIOS is that part of the computer system firmware that implements the ACPI specified interfaces for sleep wake some restart operations and provides permanent storage of ACPI table information. Further information relating to ACPI may be found in the Advanced Configuration and Power Interface specification rev. 3.0 the content of which is incorporated herein in its entirety.

The present invention combines hot plug functions such as those deployed by ACPI BIOS with bus error detection and reporting functions implemented by buses and bus devices to provide a combined detection reporting and system recovery mechanism. As further depicted in a system management interrupt SMI handler module is stored within a protected and specially designated system management RAM SMRAM address space of RAM . SMRAM is logically independent from the rest of system memory in that it is only accessible while the system operates in system management mode SMM in which one or more processors have received a system management interrupt. SMRAM generally contains SMI handler routines such as those used by SMI handler module and when processor has entered SMM in response to an SMI request hardware interrupt transparent to the operating system the processor saves or dumps its operating state into the protected address space provided by SMRAM . SMI interrupt handler includes many of the conventional routines and instructions for processing various types of system management interrupts in accordance with well known SMM operation principles. Furthermore and in accordance with the depicted embodiment SMI handler includes a PCI error reporting module that is invoked responsive to an SMI indicating a PCI bus error.

As explained in further detail below with reference to the error handling method of the present invention combines the error detection and notification functions performed by PCI error reporting module with the error handling routines and instructions performed by a PCI error handler deployed from ACPI BIOS .

As explained in further detail below PCI error reporting module includes routines and instructions for in response to an SMI resulting from a PCI error scanning the bus connected devices in the system to identify the problematic device. The error processing of PCI error reporting routine further includes instructions for recording the error in an error log in the PCI device in question. Furthermore a user indicator is preferably asserted such as illuminating an alert LED corresponding to the faulty device.

In accordance with the invention the standard employed by I O bus provide for hot plug capability. As utilized herein hot plug generally refers to being able to install or remove an expansion card from a computer while the computer is operating. The hot plug capability implemented in part by hot plug controller permits for example a PCI card such as one of peripheral devices A N to be functionally added to or removed from their respective slots A N on PCI bus while the remaining bus and data processing components continue to operate.

When a hot plug hot add operation occurs any component added to the operating platform also typically requires some attention with regard to initialization. However since the platform BIOS is not in control of the platform during the hot plug operation device specific code provided by the BIOS is typically executed by the OS to effect hot plug initialization. For example such an operational mechanism may be implemented using the Advanced Configuration and Power Interface ACPI Source Language ASL as defined in the ACPI Specification. Further information regarding ACPI and ASL may be obtained by referring to the ACPI Specification Revision 2.0a Mar. 31 2002 the content of which is incorporated herein by reference.

The hot plug capability of I O bus enables a user to simply remove and install PCI cards without having to shut down and reboot the data processing system . In accordance with conventional PCI bus hot plug specification operating procedures the user must alert the data processing system s software before removing a PCI card. This process generally entails the user notifying a hot plug service routine of the user s desire to remove a card from a particular slot. The service routine then uses various operating system functions to quiesce the software driver associated with the PCI card the user desires to remove. Quiescing means that all communications between the PCI card to be removed and the rest of the computer system are discontinued. In addition to directing the system not to initiate any new transactions to the PCI card to be removed a reset signal is also asserted to the PCI device to prevent it from attempting to communicate with the rest of the system. The hot plug service routine invoked such as from ACPI BIOS then causes power to the slot to be turned off. At this point the user can remove the PCI device.

These steps are generally reversed to add a card to a hot plug PCI bus. The user first installs the card in a vacant PCI slot and then notifies the hot plug service routine that a new card is present and should be turned on. The system responds by powering on the slot and permitting communications to occur to or from the newly installed PCI card.

As explained now with reference to the method of the present invention enables a failing PCI device to be identified and deactivated in a manner that preserves current processor state data is transparent to the operating system and imposes minimal if any overall runtime processing disruption.

Referring first to there is depicted a high level flow diagram illustrating steps performed during detection notification and recording of PCI bus errors such as may be performed by data processing system in accordance with one embodiment of the present invention. The process begins as illustrated at steps and with bus operations conducted over I O bus until a bus error is detected. In an embodiment in which I O bus conforms to the PCI X specification the error detected at step may be a SERR or PERR error detected within one of peripheral devices A N and reported to operating system .

In response to the detected bus error a system management interrupt SMI is generated in PCI bus hardware such as by host bridge and sent to processor unit as shown at step . The generated SMI is recognized and processor saves its present operating state in a state save map not depicted initializes various registers to support a system management mode SMM execution environment and commences execution with SSM as depicted in . In a conventional ACPI power management implementation a one of peripheral devices A N typically a keyboard controller generates SMIs to notify ACPI BIOS of power management system events. These events include hot keys thermal conditions battery status and specified button presses. These operations are performed without operating system knowledge or interference and as such are referred to herein as operating system transparent. 

An SMI handler such as SMI handler is invoked to process the event. In accordance with the depicted embodiment the event is a PCI bus error. As shown at steps and processing of the event by SMI handler includes scanning peripheral devices A N to identify the source of the error detected at step . In one embodiment the scanning performed as shown at step may comprise searching one or more error condition registers located in any or all of host bridge and peripheral devices A N to identify which device the device originated from possibly from one of the downstream devices A N. Once located in association with a specified one of devices A N the error is recorded by SMI handler in an error log. While not expressly depicted in the bus error processing performed by SMI handler may further include asserting a user indicator such as an LED indicator to identify which of devices A N is the problem device.

Next and in accordance with a preferred embodiment of the invention SMI handler generates an interrupt for invoking a hot plug configuration interface step . In a preferred embodiment the hot plug configuration interface comprises at least in part ACPI BIOS and more specifically a PCI error handler module within ACPI BIOS . In a preferred embodiment the interrupt generated at step is a system control interrupt SCI that prompts PCI error handler to address a specified bus device error. Processing of the system control interrupt in accordance with the invention is described below with reference to . The SMM execution terminates when processor encounters a restore state map or similar instruction and restores the saved processor state information and resume operation system operations. The process for detecting a bus error ends as shown at step .

With reference to there is illustrated a high level flow diagram depicting steps performed by a hot plug configuration interface in response to a PCI bus error in accordance with a preferred embodiment of the invention. As shown in the process begins at step and proceeds to step with a determination of whether or not a hot plug configuration interface interrupt has occurred. As utilized herein a hot plug configuration interface interrupt corresponds to a system configuration interrupt such as that generated as shown at step specifying a bus device error. As shown at steps and if the event specified by the system configuration interrupt is not a device error occurring on or in association with a hot pluggable bus i.e. non error hot plug event in which a device is installed or removed from the bus ACPI BIOS handles the system configuration interrupt by configuring the operating state of the system accordingly.

If as depicted at steps and the event specified by the system configuration specifies a bus device error PCI error handler identifies the problematic device using error registers or otherwise. Given that the system is no longer operating in SMM which is operating system transparent and as shown at step PCI error handler requests operating system to terminate all device driver s of the device s on the PCI bus I O bus or other on which the identified problem device is coupled. Proceeding as shown at step PCI error handler further issues a request to hot plug controller to power down the device s corresponding to those identified at step . Having terminated the device drivers and removed operating power from the suspect devices the bus error handling system method of the invention has effectively removed the problematic device from system operations without having to restart or reboot the system. Furthermore and in a preferred embodiment the status flags not depicted for one or more of adapter slots A N corresponding to the de allocated device s are changed to reflect a non hotpluggable status step to prevent the slots from restarting prior to checking and resetting by the system administrator. The bus error recovery ends as shown at step .

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

