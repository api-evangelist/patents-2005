---

title: Method for synchronized trunk failover and failback in a FC-AL switching environment
abstract: The synchronization of trunk failover between two FC-AL switches when a primary trunk failure occurs is disclosed. If primary trunk T should fail, S bypasses the cascade port and sends a MaRK (MRK) ordered set out over duplicate trunk T to switch S. In response, S sends an acknowledgement MRK ordered set over T back to S. S then reconfigures the switch to establish T as the primary trunk, and acts as a masters in the failover process and initiates LIP ordered sets which are communicated to all devices in the system to initialize them. Note that when S receives the MRK ordered set and acknowledges it by sending an acknowledgement MRK back to S, it acts as a slave in the failover process and does not attempt to initiate LIPs, thereby eliminating the possibility of multiple Loop Initialization cycles and reducing the time in which data cannot be transmitted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07724654&OS=07724654&RS=07724654
owner: Emulex Design & Manufacturing Corporation
number: 07724654
owner_city: Costa Mesa
owner_country: US
publication_date: 20050822
---
This invention relates to trunking in Fibre Channel Arbitrated Loop FC AL switches and more particularly to synchronizing trunk failover and failback to ensure that only one loop initialization occurs and that loop initialization completes properly and promptly.

In addition cascade ports on the FC AL switches S and S enable the switches to be interconnected via two trunks T and T. Trunking involves the use of multiple inter switch connections for increased throughput and redundancy. In the example of trunk T is designated as the primary trunk and trunk T is designated as the duplicate trunk. Note that the designation of trunks as primary and duplicate does not merely represent a difference in names but represents substantive differences between the two trunks. In the exemplary configuration of the initiators I and I connected to S are able to communicate with devices connected to S e.g. drive D through the trunks T and T.

However primary trunk T may fail see in for a number of reasons. In conventional FC AL switches each FC AL switch switch S and S in the example of responds to the failure independently. When hardware in S recognizes the failure it enters a failover mode and initiates a failover event. Trunk failover and failback is the ability to redirect traffic from a failed trunk to a working trunk and or back to the original primary trunk once it is re established. Failover and fail back is managed and driven by an Application Programming Interface API which is used to manage each of the switches independently in separate enclosures.

When the failover event is initiated a bypass event occurs in which the cascade port coupled to the trunk T is changed from an inserted state i.e. device connected to a bypass state i.e. device not connected according to FC protocols well understood by those skilled in the art. The hardware in S also generates and sends an interrupt to the processor connected to S which recognizes that T is no longer available but that duplicate trunk T exists and reconfigures the switch to establish T as the primary trunk. The processor then initiates a Loop Initialization process to all devices in the SAN to initialize them. When devices receive the Loop Initialization Primitive LIP ordered sets at the start of the Loop Initialization cycle they cease normal communications and enter an initialization state by sending specific ordered sets and frames out over the loop and actively reserving an address which is necessary to establish subsequent normal communications with other devices on the loop. Normal communications may be resumed only when the Loop Initialization has completed and the participating devices have reserved a new address.

Because each switch is managed by a separate instance of the API installed in separate enclosures trunk failures and re inserts between two enclosures may not be detected simultaneously by the APIs. As a result failover and fail back may not take place simultaneously instead these often occur sequentially separated by up to approximately 40 ms of time depending on the rate at which firmware accesses the API. These sequential failover or fail back events cause multiple loop initializations to be triggered which can lead to multiple system issues.

If S recognizes the failure before S it is possible that the LIP ordered sets generated by S may cause all devices attached to S to be initialized before switch S recognizes the failure and enters a failover mode. However because S has not yet recognized the failure and reconfigured itself to establish T as the primary trunk when S tries to send LIP ordered sets down the duplicate trunk T see in they will be blocked. Note that duplicate trunks are not allowed to participate in loop initialization and therefore block LIP primitives and loop initialization frames. When S finally recognizes the failure and enters the failover mode it reconfigures itself to establish T as the primary trunk and may generate its own LIP ordered sets which causes all devices attached to S to be initialized. Furthermore because S had already recognized the failure and had established T as the primary trunk S is able to send LIP ordered sets up T see in which results in the devices connected to S to be initialized a second time a duplication of effort with respect to the devices connected to S.

In the scenario described above two independent failover events including multiple LIP ordered sets are generated. During a failover event no data can be communicated between devices attached to the switches S and S. This time period where no regular communication is possible is approximately the time difference between when the first switch recognized the failure and when the second switch recognized the failure which is somewhat random and non deterministic plus the time it takes for Loop Initialization to complete in both switches and may represent a potentially severe disruption to data communications.

Note that the possibility of multiple failover events caused by a trunk down event only occurs when the switches are FC AL switches that act like hubs to connect the devices as though they were in a regular shared arbitrated loop yet allow multiple switches to be cascaded using trunks. Multiple failover events are a side effect of the capability of the FC AL switches and occur because the devices connected to the switches were not designed to handle non deterministic failover modes.

Therefore there is a need to be able to synchronize and coordinate trunk failover and failback between the two FC AL switches when a trunk failure occurs and the primary trunk designation is changed in order to minimize the disruption to data communications caused by multiple unnecessary loop initialization cycles.

Embodiments of the present invention synchronize and coordinate trunk failover and failback between the two FC AL switches when a trunk failure occurs and the primary trunk designation is changed in order to minimize the disruption to data communications caused by multiple unnecessary loop initialization cycles. Failover and fail back may be managed and driven by an API which is used to manage each of the switches independently.

In a system comprised of FC AL switches S and S connected together via primary trunk T and duplicate trunk T if T should fail and the T failure is detected by S S initiates a failover event by performing a port bypass event to change the cascade port coupled to T to a bypass state and bypass the cascade port. S then causes a MaRK MRK ordered set to be sent out over T to S. After S sends the MRK ordered set it waits to receive an acknowledgement of the MRK ordered set from S.

If S receives MRK 00 EF it acknowledges receipt by sending an acknowledgement MRK ordered set over T back to S. If S receives the acknowledgement MRK ordered set S reconfigures the switch to establish T as the primary trunk as seen from the perspective of both S and S. The processor connected to S then acts as a master in the failover process and initiates LIP F F ordered sets which are communicated to all devices in the system all devices connected to S and S to initialize them. When devices receive the LIP ordered sets they reserve an address which is necessary to establish subsequent communications with the devices. Once the devices have been initialized and the Loop Initialization cycle is complete S can return to a normal operation state.

Note that when S receives a MRK ordered set and acknowledges it by sending an acknowledgement MRK ordered set back to S it acts as a slave in the failover process and does not attempt to initiate LIPs thereby eliminating the possibility of multiple Loop Initialization cycles and reducing the time in which data cannot be transmitted.

In the following description Of preferred embodiments reference is made to the accompanying drawings which form a part hereof and in which it is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the preferred embodiments of the present invention.

Embodiments of the present invention synchronize and coordinate trunk failover and failback between the two FC AL switches when a trunk failure occurs and the primary trunk designation is changed in order to minimize the disruption to data communications caused by multiple unnecessary loop initialization cycles.

Normal operation both trunks operational. When S of is in a Normal Operation State see in data is being communicated between devices connected to S and to S and both trunks T primary and T duplicate in are up and operating normally.

Failover. If primary trunk T should fail as indicated at and the T failure is detected by S hardware in S initiates a failover event by performing a port bypass event to change the cascade port coupled to T to a bypass state and bypass the cascade port. The cascade port contains hardware such as a state machine that may detect either in band indications of a T failure such as a complete loss of synchronization due to a loss of signal a particular ordered set such as a LIP F or a particular frame or out of band indications of a T failure such as dedicated pins that are asserted when a T failure occurs. Examples of out of band indications include an asserted Receive Loss RX LOS pin or an asserted Transmit Fault TX FAULT pin when a Small Form factor Pluggable SFP connection is used on a switch see the INS 8074I Specification for SFP Small Form factor Pluggable Transceiver by the SFF Committee . The hardware in S generates and sends an interrupt referred to as Primary Trunk Down Event to firmware being executed by processor . The firmware may call the API every 30 ms or so to determine whether any Primary Trunk Down Events have occurred. When the firmware receives the Primary Trunk Down Event interrupt see in S enters a Received Primary Trunk Event State see in and the processor connected to S causes a MaRK ordered set e.g. MRK 00 EF to be sent out over the duplicate trunk T to S see in in . The MRK ordered set indicates that S received a Primary Trunk Down Event and indicates to S that it should also enter a failover mode. Note that the ordered set MRK 00 EF will be used herein for purposes of illustration only a different ordered set could also be used. After S sends MRK 00 EF it enters a wait state see in where it starts a timer and waits to receive an acknowledgement of the MRK 00 EF ordered set from S.

Failover S acknowledges. If S receives MRK 00 EF it acknowledges receipt by sending an acknowledgement MRK ordered set e.g. MRK EF 00 over duplicate trunk T back to S see in . If S receives the acknowledgement MRK EF 00 and the timer has not yet timed out see in S enters a Received MRK EF 00 State see in . The processor connected to S recognizes that T is no longer available but that duplicate trunk T exists and reconfigures the switch to establish T as a temporary primary trunk see in as seen from the perspective of both S and S. The processor connected to S then acts as a master in the failover process and initiates LIP F F ordered sets see in which are communicated to all devices in the system connected to S and S in the present example to initialize them. When devices receive the LIP ordered sets they reserve an address which is necessary to establish subsequent communications with the devices. Once the devices have been initialized and Loop Initialization is complete S can return to a normal operation state see in .

Note that when S receives MRK 00 EF and acknowledges it by sending a MRK EF 00 back to S it acts as a slave in the failover process and does not attempt to initiate LIPs thereby eliminating the possibility of multiple Loop Initialization cycles and reducing the time in which data cannot be transmitted.

Failover S does not acknowledge. On the other hand while S is still in the wait state see in the timer may time out see in . In such a case S enters a Timed Out Waiting for MRK State see in . This may occur for example if S does not support synchronized trunk failover. In embodiments of the present invention the selected approach is to have S act as though synchronized trunk failover was not being implemented. Accordingly the hardware in S reconfigures the switch to establish T as a temporary primary trunk see in . The processor connected to S then initiates LIP ordered sets see in which are communicated to all devices connected to S and S in an attempt to initialize them. Once the devices have been initialized S can return to a normal operation state see in .

Note that because in the present example S does not support synchronized trunk failover S will independently detect the T failure and initiate its own failover process wherein a bypass event occurs in which the cascade port coupled to the trunk T is changed from an inserted state i.e. device connected to a bypass state i.e. device not connected and S is reconfigured to establish T as a temporary primary trunk. After S is reconfigured to establish T as the temporary primary trunk the LIP ordered sets from S may be sent down T to initialize the devices connected to S. Of course because S is acting independently the processor connected to S may also initiate LIP ordered sets that may re initialize all devices connected to S and S resulting in a duplication of effort and added disruptions to normal data communications.

Failback. is a continuation of the exemplary SAN of wherein T has failed the failover process has run to completion T is now the temporary primary trunk LIPs have caused the devices connected to be reinitialized and both S and S have been operating in a normal operation state for some period of time. Now suppose trunk T is properly connected back into cascade ports on both S and S at . When T is plugged back in hardware in S will perform a port insert event or a trunk up event to re insert the cascade port and generate and send an interrupt referred to as an Original Primary Up Event see in to the processor . When the processor receives the Original Primary Up Event interrupt see in S once again enters the Received Primary Trunk Event State see in and the processor connected to S causes a MRK ordered set e.g. MRK 00 EF to be sent out over the temporary primary trunk T to S see in in . After S sends MRK 00 EF it enters a wait state see in where it starts a timer and waits to receive an acknowledgement of the MRK 00 EF ordered set from S.

Failback S acknowledges. If S receives MRK 00 EF it acknowledges receipt by sending an acknowledgement MRK ordered set e.g. MRK EF 00 over temporary primary trunk T back to S see in . Note that when S receives MRK 00 EF which may be the same MRK ordered set received for either a Primary Trunk Down Event or a Original Primary Up Event the current designation of the primary trunk will enable S to distinguish and recognize which event is occurring at the time.

If S receives the acknowledgement MRK EF 00 and the timer has not yet timed out see in S enters the Received MRK EF 00 State see in . The hardware in S then reconfigures the switch to once again establish T as the primary trunk see in . The processor connected to S then acts as the master in the failback process and initiates LIP ordered sets see in which are communicated to all devices connected to S and S to initialize them. When devices receive the LIP ordered sets they reserve an address which is necessary to establish subsequent communications with the devices. Once the devices have been initialized S can return to a normal operation state see in .

Note that when S receives MRK 00 EF and acknowledges it by sending a MRK EF 00 back to S it acts as the slave in the failback process and does not attempt to initiate LIPs thereby eliminating the possibility of multiple Loop Initialization cycles and reducing the time in which data cannot be transmitted.

Failback S does not acknowledge. On the other hand if S is still in the wait state see in and the timer times out see in S enters a Timed Out Waiting for MRK State see in . The hardware in S also reconfigures the switch to establish T as a temporary primary trunk see in . The processor connected to S then initiates LIP ordered sets see in which are communicated to all devices connected to S and S in an attempt to initialize them. Once the devices have been initialized S can return to a normal operation state see in . However because S never acknowledged receipt of the MRK ordered set it is possible that the LIP ordered set generated by S may cause all devices attached only to S to be initialized before switch S recognizes the failure and enters a failover mode. When S finally recognizes the failure and enters the failover mode it may generate its own LIP ordered set which again causes all devices attached to both S and S to be initialized. In other scenarios S may become blocked and unable to complete the LIP until S recognizes the failure and also enters a failover mode. The LIP ordered set generated by S is then able to complete its initialization of all devices attached to S and S.

Failover simultaneous MRKs. The situation in which both switches S and S simultaneously recognize a failure and enter a failover mode will now be discussed. As noted above if primary trunk T should fail hardware in S will perform a port bypass event to change the cascade port coupled to T to a bypass state and bypass the cascade port generate and send an interrupt referred to as Primary Trunk Down to the processor . When the processor receives the Primary Trunk Down interrupt see in which is generally referred to as a Primary Trunk Event S enters a Received Primary Trunk Event State see in and the processor connected to S causes a MRK ordered set e.g. MRK 00 EF to be sent out over the duplicate trunk T to S see in in . After S sends MRK 00 EF it enters a Sent MRK 00 EF State see in where it starts a timer and waits to receive an acknowledgement of the MRK 00 EF ordered set from S.

If S recognizes the failure at about the same time as S then hardware in S will also perform a port bypass event to change the cascade port coupled to T to a bypass state and bypass the cascade port generate and send an interrupt referred to as Primary Trunk Down to the processor connected to S. When the processor receives the Primary Trunk Down interrupt S enters a Received Primary Trunk Event State and the processor connected to S causes a MRK ordered set e.g. MRK 00 EF to be sent out over the duplicate trunk T to S at . After S sends MRK 00 EF it enters a Sent MRK 00 EF State where it starts a timer and waits to receive an acknowledgement of the MRK 00 EF ordered set from S.

At this point in time both S and S are in the Sent MRK 00 EF State see in each waiting for an acknowledgement MRK EF 00 ordered set to be received from the other switch. In other words because both S and S detected the T failure at about the same time and both initiated the failover process at about the same time a collision has occurred. The scenario is handled by a random back off time and resend algorithm described below. This mechanism is used to quickly resolve which of the two connected switches will be responsible for commencing the subsequent loop initialization.

If S receives an MRK 00 EF from S instead of the expected acknowledgement MRK EF 00 see in which indicates that both S and S have recognized the T failure and have initiated a failover process both S and S enter a Wait Random Time State see in where each switch waits a random period of time that is different for each switch. When the random time period for S expires see in if S has not received another MRK 00 EF from S see in this indicates that the random time period for Si was shorter than the random time period for S and that S can act as the master in the failover process and be first in re sending the MRK 00 EF . Accordingly S re sends a MRK 00 EF to S across T see in and re enters the Sent MRK 00 EF State see in . Because S waits a random time before re sending the MRK 00 EF a collision with a MRK 00 EF re sent from S should be avoided.

When the random time period for S expires see in S will already have sent out a MRK 00 EF to S so S will have received a MRK 00 EF . S then enters a Received MRK 00 EF State in which S acts as a slave in the failover process and sends an acknowledgement MRK EF 00 back to S over T. The hardware in S reconfigures the switch to once again establish T as the primary trunk and S returns to the Normal Operation State. 

When S which was waiting in the Sent MRK 00 EF State receives the acknowledgement MRK EF 00 back from S see in it acts as the master in completing the failover process as described above.

If on the other hand S is in the Wait Random Time State and the random time period for S expires see in and S has received a MRK 00 EF this indicates that the random time period for S was longer than the random time period for S and that S should act as the slave in the failover process. S then enters a Received MRK 00 EF State see in and sends an acknowledgement MRK EF 00 back to S over T see in . The hardware in S reconfigures the switch to once again establish T as the primary trunk see in and S returns to the Normal Operation State see in .

The previous discussion of presumed that S either detected the T failure first or at least detected the T failure simultaneously with S so that in either case S generated a MRK 00 EF . However in the case where S does not detect the T failure first or does not detect the T failure simultaneously with T S may be in the Normal Operation State see in when it receives a MRK 00 EF from S see in . In this case S enters the Received MRK 00 EF State see in in which S acts as a slave in the failover process and sends an acknowledgement MRK EF 00 back to S over T see in . The hardware in S reconfigures the switch to establish T as the primary trunk see in and S returns to the Normal Operation State see in .

Although the present invention has been fully described in connection with embodiments thereof with reference to the accompanying drawings it is to be noted that various changes and modifications will become apparent to those skilled in the art. Such changes and modifications are to be understood as being included within the scope of the present invention as defined by the appended claims.

