---

title: Method and apparatus for sharing resource locks amongst applications
abstract: A method and apparatus for sharing an exclusive lock for a resource amongst a defined plurality of applications. A first application to lock a resource is given a key. The first application may provide the key to other applications to allow those applications to simultaneously access the locked resource. Generally, the first application will only provide keys to applications that are compatible with the first application such that the applications having keys to a resource will be able to simultaneously access the resource without conflict.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566298&OS=08566298&RS=08566298
owner: Symantec Operating Corporation
number: 08566298
owner_city: Mountain View
owner_country: US
publication_date: 20050728
---
Embodiments of the present invention generally relate to computer networks that share resources amongst applications and more particularly to a method and apparatus for sharing a resource lock amongst applications.

A significant advantage of computer networks is that a user can remotely access a document an image a printer backup storage or other resources. Computer networks and the Internet in particular have rendered the geographic location of a user irrelevant. The Internet contains a vast number of resources that are available to practically anyone with an Internet connection. In a similar manner local area networks can make documents applications printers and other resources available to anyone connected to the local area network.

This ability to remotely access a resource has greatly enhanced the ability of people and businesses to work together more quickly and efficiently. This is especially true of a remote resource that is collaboratively produced or otherwise utilized.

Additionally individual nodes of a network may simultaneously execute multiple software applications that access and utilize resources with the network or within the computer executing the applications. The speed of computers enables such simultaneous execution of applications. As such individual nodes and multiple nodes of a network may execute applications that utilize the same resources.

When multiple applications of a network whether executing on a single node or multiple nodes need to utilize a resource at the same time a collision or deadlock may occur. Consequently applications are designed to utilize locks to block multiple applications from simultaneously attempting to use a resource i.e. access to a resource is serialized. Locks generally come in two types exclusive and shared. An exclusive lock when used by an application running on a particular node blocks all other applications from accessing the resource during the period that the lock is enabled. A shared lock permits an application to access a resource but allows other applications executing on the same or other nodes to also have unlimited access to the resource. The other applications that may access the resource are only limited by the security features of the network.

A shared lock may also be color coded where the shared lock is assigned a color and applications that have been assigned the same color may utilize the same colored locked. Thus the locks are only granted to applications having the same color.

Serialization using exclusive locks for individual applications might result in an inefficient use of resources. In some instances a number of applications may simultaneously utilize a resource without conflict however the underlying assumption of exclusive lock techniques is that simultaneous use of a resource is to be avoided. On the other hand shared locks are too liberal in their allowance of applications to simultaneously use a resource. Shared locks invite conflicts by allowing open access to resources.

It would be beneficial if groups of compatible applications could be provided exclusive access to a resource while applications that do not belong to the group i.e. applications that may cause conflicts are blocked from such access for a period of time while the lock is enabled.

The present invention is a method and apparatus for sharing a resource lock amongst a defined plurality of applications. A first application to lock a resource is given a key. The first application may provide the key to other applications to allow those applications to simultaneously access the locked resource. Generally the first application will only provide keys to applications that are compatible with the first application such that partner applications having keys to a resource will be able to simultaneously access the resource without conflict. In a second embodiment two keys are issued one for exclusive mode locks and one for shared mode locks. The application that is issued these keys can share exclusive or shared access to the locked resource. In a third embodiment multiple keys are issued provided for multiple colored locks. By distributing to the various partner applications different keys of different colors the applications can be categorized into different color modes according to their respective keys. In a forth embodiment of the invention a lock manager using a registration process assigns a unique identifier to a group of partner applications. Any application in the group may access a locked resource associated with the unique identifier.

The present invention is a method and apparatus for sharing resource locks amongst applications. The shared exclusive locks enable applications to selectively share resource utilization with other applications.

In operation application using the lock API requests the lock manager to lock the resource . The application shares a key to the lock with another application i.e. partner application is given a key . The partner application can then use its associated lock API to interact with the lock manager to access and utilize the locked resource . In one embodiment of the invention the lock manager supplies the key for the locked resource. In another embodiment the key is supplied by the application and the lock manager creates a lock that matches the key .

At step a key is sent from the lock manager to the application . Alternatively the application provides the key and the lock manager creates a lock for the resource that matches the key . At step the application that requested and received the key shares a duplicate of the key with at least one other application to create a plurality of applications that can share the resource. Generally the lock API accesses a list of applications that can compatibly access the resource . At step the application sends the key to the other applications on the same node or other nodes. When those applications wish to use the resource they may use the key to unlock the resource for their use. The method ends at step . Using the inventive architecture the first application elected by some policy such as first come first served or application priorities etc. to request the exclusive lock for a particular resource creates an authorized plurality of applications that may compatibly and simultaneously access the resource.

The lock manager may establish time limits in which the key is enabled such that a group can only use a key for a pre established period of time. Thus access to the resource is serialized by group of applications.

At step the method queries whether the lock is available. The lock is deemed available if the resource is not currently locked. If the query is negatively answered the method ends at step . The application will be informed that a lock is unavailable. If the query is affirmatively answered the method proceeds to step where the lock manager generates unique keys k exclusive mode key and k shared mode key . At step the keys k and k are respectively sent to the client as an exclusive lock mode key key ex and a shared lock mode key key shr . Alternatively the application provides keys with the request and the lock manager creates locks to match the keys. The resource is locked at step .

At step the method queries whether the share mode is exclusive or shared. If the share mode amongst the partner applications is exclusive the method proceeds to step where the exclusive lock mode key k is given to a partner application. The application holding the exclusive lock mode key k may exclusively access the resource and all other applications in the group and outside the group are blocked from such access. In this mode the group of partner applications controls access to the resource by sharing the exclusive lock mode key. Thus serialization is performed amongst the partner applications within the group and the group controls the serialization.

If the mode is shared the application shares the shared lock mode key k with one or more partner applications to facilitate simultaneous access to the resource in the same manner as described with respect to . The method ends at step .

In an alternative embodiment of the invention the dual key embodiment i.e. having two modes can be expanded by using colored locks to generate provide a plurality of keys for a plurality of lock colors. By using a plurality colored keys the applications that are provided the keys can be categorized into different color modes i.e. a mode for each color and the appropriately colored keys can be sent to them accordingly. Thus partner application groups are formed based on the keys and modes of operation for the group member applications are defined by the colors of the keys that they hold.

In the embodiments of the invention described above a simple lock counter process can be used to determine when a lock is to be released. Other techniques for lock count monitoring can be used. In the lock count process for each application that accesses a resource the lock manager increments the lock count. The lock count tracks the number of client applications that have accessed a given handle for a resource. When an application unlocks a resource i.e. no longer maintains a lock the lock count is decremented. When the count reaches a specific value e.g. the same count value from where the count started when the first lock was taken the lock manager will destroy the lock structure.

In another embodiment of the invention rather than using keys the lock manager using a registration process assigns a unique identifier to all the partner applications in a group of compatible applications. Any of the partner applications can access a resource associated with a unique identifier.

Each computer whether a mobile device desktop computer server digital assistant and the like comprises a central processing unit CPU support circuits and memory . The CPU may comprise one or more conventionally available microprocessors or microcontrollers. The support circuits are well known circuits that support the operation of the CPU . These circuits may comprise at least one of power supplies clock circuits input output interface circuitry cache or the like. Memory may comprise random access memory read only memory removable disk memory flash memory optical memory or various combinations of these types of memory. The memory is sometimes referred to as main memory and may in part be used as cache memory or buffer memory. The memory of computer stores various forms of software and files such as an operating system OS application software a lock API and at least one key or a unique identifier to access locked resources in accordance with embodiments of the present invention.

The memory of computer stores various forms of software and files such as an operating system OS a lock manager applications and at least one key or a unique identifier to enable clients to access locked resources in accordance with embodiments of the present invention. Various resources may be coupled to the computer or any of the computers . These resources are generally made available to the computers of the network . These physical resources may include file systems databases backup systems and media and the like.

In operation the compatible applications executing on any of the computers can share resource locks amongst the compatible applications of a single computer or many computers. Such sharing of resource locks enable compatible applications to simultaneously access a resource. Thus facilitating efficient network or computer operation.

This invention finds use in computer architectures where multiple nodes or single nodes are executing compatible applications that can simultaneously access a resource. For example in a database application the application software generally sets a locking bit on a file before starting an input output operation. During such an operation the data of the file is not altered. Thus such applications as a backup application are compatible with the execution of an input output operation. Using the invention the database application can send a shared lock mode key to a backup application that may be executing on the same node as the database application or on another node of the network. As such the backup application may access and backup the file that would otherwise be locked during the input output operation. Allowing multiple compatible applications to utilize resources facilitates efficient use of resources.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

