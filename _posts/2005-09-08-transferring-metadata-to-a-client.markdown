---

title: Transferring metadata to a client
abstract: Methods providing clients with a full contextual metadata experience. Metadata include multiple forms of property data, or information, relating to media accessed by a media player, such as a CD in a CD-ROM drive of a computer. Metadata is transferred from a server to a client. Identification parameters associated with the accessed media file are submitted by the client to a server, and property data is retrieved and forwarded to the client. The metadata provides the user with integrated, contemporaneous property data directly related to the media file being played, providing automatic, integrated access to data from multiple databases, simply by accessing a related media file through a media player, without further direction from the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07428572&OS=07428572&RS=07428572
owner: Microsoft Corporation
number: 07428572
owner_city: Redmond
owner_country: US
publication_date: 20050908
---
This application is a divisional of pending application Ser. No. 10 622 972 filed Jul. 18 2003 entitled Methods Computer Readable Mediums and Systems for Requesting Retrieving and Delivering Metadata Pages assigned to Microsoft Corporation and incorporated herein by reference for all purposes.

Embodiments of the present invention relate to the field of processing media content. In particular embodiments of this invention relate to processing requests for metadata from clients by identifying retrieving and rendering such metadata.

Many known computer systems play media files such as those stored on compact discs CDs . Such systems typically provide some modicum of information relating to the media file being played. For instance most computers capable of playing a CD provide a listing of the number of songs or tracks stored on the CD. Such a list would typically include the order in which such tracks are stored on the CD and the length of each track. These systems typically do not provide other basic information such as the artist or artists featured on the CD or the track names. Such systems do not satisfy the needs of users who desire additional textual or visual information relating to the CDs they are enjoying.

Other more advanced systems such as CD Text encoded CDs and compatible media players are capable of storing more information on the CDs themselves. For example these systems are capable of storing album titles artist names and song titles on a particular music CD. With a compatible player such CDs display this additional information when playing a CD. However these systems lack the ability to provide additional textual information relating to the contents of the CD. They also lack the ability to provide updated and timely information beyond what is stored on the CD at the time of manufacture.

Accordingly a system for providing users with a full contextual metadata experience including multiple forms of information relating to the media currently accessed by a media player such as a CD in a CD ROM drive of a computer is desired to address one or more of these and other disadvantages.

The following simplified summary provides a basic overview of some aspects of the present technology. This summary is not an extensive overview. It is not intended to identify key or critical elements or to delineate the scope of this technology. This Summary is not intended to be used as an aid in determining the scope of the claimed subject matter. Its purpose is to present some simplified concepts related to the technology before the more detailed description presented below.

Accordingly methods for transferring metadata to a client are disclosed. An identification parameter associated with a file identifies metadata associated with the file for sending from a server to a client. In one embodiment a method determines if all identification parameters are present and obtains any missing identification parameters.

In at least one embodiment the method transfers metadata from a server to a client. The metadata include property data associated with a media file accessible by the client. The method submits an identification parameter associated with the accessed media file from the client to a server retrieves the property data and forwards the property data to the client. This greatly enhances the overall contextual metadata experience for the user by providing integrated contemporaneous property data directly related to the media file being played. Thus embodiments of the invention provide automatic integrated access to data from multiple databases simply by accessing a related media file through a media player without further direction from the user.

A method for retrieving metadata for a media file accessible via a media player is disclosed. The metadata include property data associated with the media file. The method comprises determining that the media file is accessed by the media player and submitting an identification parameter associated with the accessed media file to a server when the determining that the media file is accessed by the media player indicates that the media file is accessed by the media player. The server receives the property data corresponding to the accessed media file from the server.

Another method retrieves metadata for a media file accessible via a media player. The metadata include property data associated with the media file. The method comprises determining whether a first identification parameter associated with the media file is stored on the media player. A second identification parameter associated with the accessed media file is submitted to receive the property data from a server when the determining whether a first identification parameter associated with the media file is stored on the media player indicates the first identification parameter is not stored on the media player. The method comprises determining whether the property data is stored on the media player when the determining whether a first identification parameter associated with the media file is stored on the media player indicates the first identification parameter is stored on the media player. The first identification parameter associated with the accessed media file is submitted to receive the property data from a server when the determining whether the property data is stored on the media player indicates the property data is not stored on the media player. The method further comprises determining whether an artist ID is a known various artists value on the media player when the determining whether the property data is stored on the media player indicates the property data is stored on the media player. The first identification parameter associated with the accessed media file is submitted to receive the property data from a server when the determining whether an artist ID is a known various artists value on the media player indicates the artist ID is a known various artists value. The property data is rendered on the media player when the determining whether an artist ID is a known various artists value on the media player indicates the artist ID is not a known various artists value.

In yet another embodiment a method for rendering metadata for a media file accessible via a media player is disclosed. The metadata include property data associated with the media file. The method comprises determining that the media file is accessed by the media player and identifying an identification parameter of the media file stored on the media player when the determining that the media file is accessed by the media player indicates that the media file is accessed by the media player. The method further comprises determining that the property data associated with the identification parameter of the accessed media file is stored on the media player. The property data stored on the media player is rendered.

In another embodiment a method renders metadata for a media file accessible via a media player. The metadata include property data associated with the media file and comprises requesting the property data from a server when at least one of a a content ID is not stored on the media player b the property data is not stored on the media player and c an artist ID is a known various artists value are true. The property data stored on the media player is accessed when a b and c are false. The method additionally comprises rendering the property data.

In still another embodiment a method for providing an XML document to a client comprises receiving an identification parameter for an XML document from a client. The method determines if all necessary identification parameters are present and retrieves any missing identification parameters when the determining if all necessary identification parameters are present indicates that identification parameters are missing. The method forwards the identification parameters to a structural query language SQL Server receives the XML document from the SQL Server and forwards the XML document to the client.

In a further embodiment a method for transferring metadata from a server to a client is disclosed. The metadata include property data associated with a media file accessible by the client. The method determines that the media file is accessed by the client and submits an identification parameter associated with the accessed media file from the client to a server when the determining that the media file is accessed by the client indicates that the media file is accessed by the client. The method retrieves the property data from a structural query language SQL server and forwards the property data to the client.

Yet another embodiment of the invention is directed to one or more computer readable media that has computer executable instructions for retrieving metadata for a media file accessible via a media player. The metadata include property data associated with the media file. The computer executable instructions for performing steps comprise determining that the media file is accessed by the media player and submitting an identification parameter associated with the accessed media file to a server when the determining that the media file is accessed by the media player indicates that the media file is accessed by the media player. The computer executable instructions comprise receiving from the server the property data corresponding to the accessed media file.

In another embodiment a computer readable medium has computer executable instructions for rendering metadata for a media file accessible via a media player. The metadata include property data associated with the media file. The computer executable instructions for performing steps comprise determining that the media file is accessed by the media player and identifying an identification parameter of the media file stored on the media player when the determining that the media file is accessed by the media player indicates that the media file is accessed by the media player. The computer executable instructions further determine that the property data associated with the identification parameter of the accessed media file is stored on the media player and render the property data stored on the media player.

In still another embodiment a computer readable medium has computer executable instructions for rendering metadata for a media file accessible via a media player. The metadata include property data associated with the media file. The computer executable instructions for performing steps comprise requesting the property data from a server when at least one of a a content ID is not stored on the media player b the property data is not stored on the media player and c an artist ID is a known various artists value are true. The computer executable instructions further access the property data stored on the media player when a b and c are false and render the property data.

In yet another embodiment a computer readable medium has computer executable instructions for providing an XML document to a client. The computer executable instructions for performing steps comprise receiving an identification parameter for an XML document from a client and determining if all necessary identification parameters are present. The computer executable instructions retrieve any missing identification parameters when the determining if all necessary identification parameters are present indicates that identification parameters are missing. The computer executable instructions forward the identification parameters to a structural query language SQL Server receive the XML document from the SQL Server and forward the XML document to the client.

In still another embodiment a computer readable medium has computer executable instructions for transferring metadata from a server to a client. The metadata include property data associated with a media file accessible by the client. The computer executable instructions for performing steps determine that the media file is accessed by the client and submit an identification parameter associated with the accessed media file from the client to a server when the determining that the media file is accessed by the client indicates that the media file is accessed by the client. The computer executable instructions retrieve the property data from a structural query language SQL server and forward the property data to the client.

In a further embodiment a system transfers metadata from a server to a client. The metadata include property data associated with a media file accessible by the client. The system comprises a client computer for determining that the media file is accessed by the client and submitting an identification parameter associated with the accessed media file from the client to a server when the determining that the media file is accessed by the client indicates that the media file is accessed by the client. The system comprises a server for retrieving the property data from a structural query language SQL server and forwarding the property data to the client.

In yet another embodiment a computer readable medium has stored thereon instructions for retrieving metadata for a media file accessible via a media player. The metadata include property data associated with the media file. The computer readable medium comprises instructions for determining that the media file is accessed by the media player and instructions for submitting an identification parameter associated with the accessed media file to a server when the determining that the media file is accessed by the media player indicates that the media file is accessed by the media player. The computer readable medium comprises instructions for receiving from the server the property data corresponding to the accessed media file.

In still another embodiment a computer readable medium has stored thereon instructions for rendering metadata for a media file accessible via a media player. The metadata include property data associated with the media file. The computer readable medium comprises instructions for requesting the property data from a server when at least one of a a content ID is not stored on the media player b the property data is not stored on the media player and c an artist ID is a known various artists value are true. The computer readable medium comprises instructions for accessing the property data stored on the media player when a b and c are false and instructions for rendering the property data.

In yet another embodiment a computer readable medium has stored thereon instructions for providing an XML document to a client. The computer readable medium comprises instructions for receiving an identification parameter for an XML document from a client and instructions for determining if all necessary identification parameters are present. The computer readable medium comprises instructions for retrieving any missing identification parameters when the determining if all necessary identification parameters are present indicates that identification parameters are missing. The computer readable medium comprises instructions for forwarding the identification parameters to a structural query language SQL Server instructions for receiving the XML document from the SQL Server and instructions for forwarding the XML document to the client.

Methods and systems are described that enhance the user experience when playing various media such as CDs and DVDs. One or more databases managed by a server maintain metadata associated with various media. The metadata can include any type of additional information that can be of interest to a user or consumer of the media. Identification parameters associated with particular media files accessed by the user are submitted to the server to retrieve particular property data associated with such media files. Such methods and systems provide integrated exposure of multiple metadata sources to a single user based upon the current media file being played. Moreover such methods provide the user with an opportunity to edit the content and appearance of the displayed data.

Referring first to an exemplary block diagram illustrates a system generally indicated for implementing a method of the present invention. In an embodiment the system includes a client e.g. a personal computer having a media player capable of accessing media files stored on a CD . For example the media player may comprise software on a computer and a CD ROM drive of the computer the media file being stored on a CD inserted into the CD ROM drive. The client communicates with a server to request metadata associated with the media files on the CD . Such communication includes submitting an identification parameter associated with the accessed media file as will be discussed in greater detail below. As noted below in greater detail the server receiving the identification parameter communicates with an identifier database to retrieve any missing identification parameters because the entire set of common identification parameters are not always available for the request and are set to empty when unavailable. As described in greater detail below the first request to the server contains a TOC or a Content ID as its content identifier. The other identification parameters are obtained from results of former queries to the server. By returning the additional identifiers to the client as part of the XML document the next time a request for the same CD is submitted the specific identification parameters associated with that CD will also be submitted with the TOC or the Content ID. This feature allows the server to minimize its data lookup when these extra identification parameters available. In any event once all identification parameters are collected they are forwarded to a Structural Query Language SQL Server . Depending upon what identification parameters are collected and forwarded the SQL Server forwards particular property data associated with the CD in the form of an eXtensible Markup Language XML document or documents to the server. The server then forwards the XML document or documents to the client. One skilled in the art would readily understand that such a system is also readily applicable to other media files and storage media such as video images stored on DVD ROMs. Others details of this system will be described in detail hereinafter.

Turning to an additional exemplary block diagram illustrates a specific system generally indicated of the present invention. This system includes a client computer having software such as Microsoft Windows Media Player residing on the computer for retrieving and rendering metadata by displaying a hypertext markup language HTML view of an XML document . A set of local script pages reside as a resource in a dynamic link library DLL stored with the software on the client computer . Such script pages may further comprise an HTML page and several hypertext component Internet Explorer htc IE behavior pages. As discussed in detail below these pages use interfaces built within the software to submit an identification parameter such as a content ID or a Table of Contents TOC of the currently accessed media file to a server side data interface. Specifically such identification parameters are submitted to a specific Active Server Page ASP at a Uniform Resource Locator URL address via Hypertext Transfer Protocol HTTP . Parameters defining the type of metadata required based upon a currently viewed Metadata Delivery Page generally indicated e.g. are also included with the submitted content ID. Once the identification parameters are submitted to the ASP the ASP parses the parameters received from the client and submits each to relevant databases accessible via an SQL server. Such databases comprise at least one of an extended metadata database A a basic metadata database B a current media database C and a news database D to name a few. Other databases are also contemplated as within the scope of the present invention. The property data of interest is then retrieved from each database and forwarded to the client as an XML document for parsing and rendering as HTML. The property data included in such XML documents are designed to provide a contextual metadata experience for each media file as it is accessed by the client .

Referring now to an exemplary home Metadata Delivery Page is shown. Such a page displays various pieces of metadata e.g. Album Name Artist Name Track Listing etc. and links for accessing several other pages of metadata e.g. Artist Info Lyrics Music News . The page also displays Videos and Downloads News and a chart of albums relevant for the currently played media. Additional pages of metadata accessible through the home Metadata Delivery Page display album details EP Extended Play details singles information track information album reviews artist reviews track reviews music news information in chart format artist information biographies compilations latest releases official web sites bootlegs videos photos cover art related albums related artists related audio stations media purchase information and other related metadata. For example some document names that can be requested are identified as follows 

Referring now to an exemplary flow chart illustrates the operation of a client system according to a method of the present invention. To begin a CD is inserted into a CD ROM drive of the client computer at . A user would typically initiate the insertion of a CD while the remaining operations are performed without user intervention. A client without an autorun CD feature enabled would also require the user to initiate play of the media file with the media player. With autorun enabled the method of the present invention determines that a media file is accessed by the media player for example the CD by the CD ROM player. Without a determination that a CD is placed within the CD ROM the method does not begin. Once the system determines that a media file is accessed the system retrieves any stored data from the media player relating to the particular media file at . One type of such stored data is user input data previously input by the user and stored by the system during a previous access of the media file. For example one such stored data is a rating of the media file entered by the user. When accessing a particular file the system prompts the user for a rating of a particular media file. When the user accesses the media file in the future such data is available for the system and user. Another such stored data may be textual information relating to the media file again input by the user. Such textual information might include lyrics associated with the media file. Other types of stored data associated with the media file are also contemplated as within the scope of the present invention.

The system next introduces three logical queries thereby providing four distinct flow paths through the flowchart of . These queries and flow paths are generally outlined here and are discussed in detail hereinafter. The system queries a whether an identification parameter e.g. a content ID associated with the media file is not stored on the media player b whether the property data is not stored on the media player and c whether an artist ID associated with the media file is a known various artists value. When at least one of the foregoing queries is true the system requests the property data from the server. When each of the foregoing queries is false however the system accesses the property data stored on the media player. Once the source of the property data is determined either at the server or locally on the client the system renders the property data for the user. The property data associated with each media file or song is rendered individually while each media file is being accessed. Once a new media file is accessed on the same CD the metadata associated with such a media file is rendered. Thus all of the requested property data is downloaded initially when the CD is accessed and rendered on a per song basis when each song is played with one exception. If the artist ID associated with the media file is a known various artists value e.g. a compilation CD data is requested as each subsequent media file is accessed rather than all data simultaneously as with a CD by a single artist. One skilled in the art would readily understand that any of these queries may be stated in the negative yielding opposite answers and corresponding results without departing from the scope of the present invention. Moreover one two or three of the queries may be utilized by the system to determine what additional actions to undertake.

Turning to the details of each flow path of the method a first flow path is utilized when it is determined that a content ID associated with the accessed media file is not stored on the media player at . A content ID is an identification parameter associated with a particular media file which particularly identifies the media file to the server when retrieving the property data. When a CD is first accessed by a media player no content ID will be available. Without a content ID the method must submit another identification parameter stored with the media file at . For example an appropriate identification parameter is a Table of Contents TOC stored with a media file. When accessing a CD the TOC is a CD table of contents cataloging the media files stored on the CD. Once the identification parameter is submitted here the TOC the property data is received from the server at along with a content ID associated with the accessed media file for subsequent submitting of the content ID as an identification parameter associated with the media file to the server. Should the same CD be accessed again by the same client the content ID would be the submitted identification parameter rather than the TOC. Once the property data is received by the client it is cached with a collection ID defining a music album at . Such a collection ID comprises multiple media files accessible by the media player. Finally the method of the present invention comprises rendering the received property data on the media player for use by a user of the media player .

The remaining three flow paths are utilized when it is determined that an identification parameter e.g. a content ID associated with the accessed media file is stored on the media player. For these paths the media player has previously accessed this media file and a content ID has been cached on the media player during such prior access by the media player. The system no longer relies on a TOC as an identification parameter as with the first flow path. More specifically a second flow path is utilized when the method determines that an identification parameter is stored on the media player at and that the property data is not stored on the media player at . Once these criteria are met the system submits the stored content ID as its identification parameter to retrieve the property data at . The desired property data is then retrieved from the server and received by the client at and cached with the collection ID defining a music album at generally as set forth above except that no content ID will be received or cached because the content ID was previously stored on the client. As with the first flow path the method further comprises rendering the received property data on the media player at for use by a user of the media player. As shown in both determining queries whether the identification parameter is stored on the media player and whether the property data is stored on the media player occur before submitting the identification parameter to the server .

A third flow path requires particular answers to each of the three queries noted generally above. First the method determines that a particular identification parameter here the content ID is stored on the media player at . Second the method determines that the property data of interest is stored on the media player at . Third the method determines that an artist ID is a known various artists value on the media player at . In other words the third query extends the inquiry to determine whether the CD of interest is a compilation CD. Where the artist ID is a various artists value the content ID will be sent to the server to retrieve the property data. Because the CD could include a compilation of artists such as a movie soundtrack the method opts to retrieve the data from the server rather than utilizing the property data stored on the media player. This ensures that property data for each media file by each artist on the CD is retrieved rather than merely rendering the data available on the media player which may not include property data associated with each media file and artist. Caching of the received property data with a collection ID defining a music album at and rendering the received property data on the media player for use by a user of the media player at occur as set forth above with respect to the second flow path. As shown in each of the three determining queries whether the identification parameter is stored on the media player whether the property data is stored on the media player and whether an artist ID is a known various artists value on the media player occur before submitting the identification parameter to the server .

Finally a fourth flow path requires particular answers to each of the three queries disclosed above. Like the third flow path the method must determine that a particular identification parameter here the content ID is stored on the media player and that the property data of interest is stored on the media player . Unlike the third flow path however the method then determines that an artist ID is not a known various artists value on the media player at . In this case the third query determines that the CD of interest is not a compilation CD and the method may utilize the property data stored on the media player. Therefore no identification parameter need be submitted to the server. Instead the property data may be directly cached from the memory of the media player and rendered on the media player at for use by a user of the media player. By verifying that the data stored on the media player is the correct property data associated with the media file the fourth flow path provides system efficiency by not requiring access to the server to retrieve data already available on the media player.

In addition to the identification parameters disclosed above the method of the present invention also contemplates submitting identification parameters comprising one or more of an AMG album ID AID an AMG performer ID PID an MSID person an MSID album and a genre for identifying the media file. Other identification parameters are also contemplated as within the scope of the present invention.

Referring now to an exemplary flow chart illustrates operation of a method of the present invention on a server. The method is directed to providing property data in the form of an XML document to a client. The method is the server side counterpart to the client side method described in detail above. First the client sends an identification parameter to the server and the server receives the identification parameter for an XML document at . Once the server receives the identification parameter the method determines if the request is for a super document at . A super document is a document comprising two or more single XML documents merged into a single document or super document to reduce network traffic between the client and the server. An example of a super document is an info home document. If a super document is requested the method then requires that the server process or step through each of the documents in the super document at . This process is ongoing and the method continues while the super document processes.

The method continues by determining if all necessary identification parameters are present in the request at . Such identification parameters might include a content ID a TOC or any of the identifiers listed above or appreciated by those skilled in the art. Where the server determines that not all of the necessary identification parameters are present the method requires retrieval of any missing identification parameters at . This retrieval may comprise retrieving the missing identification parameters from a cache located on either the client or the server or from a database. Once the missing identification parameters are retrieved the identification parameters are forwarded to an SQL Server to fetch the documents at . The SQL server determines the documents that correspond to the forwarded identification parameters and sends those documents to the server which receives the XML documents from the SQL Server and prepares an XML document for the user.

Once the document is received by the server the method determines again if the document request is for a super document at . If the request is not for a super document the server forwards the XML document to the client at . The method is then complete and the server awaits further requests. The server will also forward any identification parameters to the client with the XML document. These parameters are then stored on the media player and may be utilized in future client requests as discussed above. If the request is for a super document the requested XML document is appended to the super document before forwarding the super document at and the XML document to the client. In addition before returning the requested XML document to the client the server determines if the processing or stepping through of the documents in the super document is complete at . If such processing is not complete the method returns to the operation of the server processing each of the documents in the super document at as described previously. This process continues and the method continues to check the status of the super document while it is being processed only returning the super document and the XML document to the client when the processing of the super document is complete. In this manner only one XML document need be forwarded to the client.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that can be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN can be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the operations described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

In operation computer executes computer executable instructions such as those illustrated in to satisfy a request for property data by transferring property data from server to client. In one embodiment computer determines that the media file is accessed by the media player. Computer submits an identification parameter associated with the accessed media file to a server. Computer receives from the server the property data corresponding to the accessed media file. In another embodiment computer requests property data from a server when at least one of a a content ID is not stored on the media player b the property data is not stored on the media player and c an artist ID is a known various artists value are true. Computer accesses the property data stored on the media player when a b and c are false. Computer then renders the property data.

Those skilled in the art will note that operation of software routines of the invention can be implemented in numerous ways all within the scope of the invention. For example the methods described herein may be implemented as a set of application programming interfaces APIs available to the media player program and to the operating system executing on computer . In another embodiment the software routines described herein may be implemented as an application program executing on computer that interfaces with the operating system and media player program to perform the methods described herein. In yet another embodiment the software routines described herein may be implemented as part of the operating system executing on computer with an API available to the media player.

The following example further illustrates the invention. In particular this is an example of how the property data is retrieved from a server. This particular example uses an Album Information pane in an Info Center View of the Windows Media Player. First the Album Information pane calls the data access code with the required document to start the process.

The access code is retrieved the parameters are loaded out of storage and the data access call is constructed 

The cache is verified to determine if the property data is previously cached and the request for the media need not be forwarded to the server 

Once it is verified that the request indeed needs to be submitted the request is forwarded to the server asynchronously 

Those skilled in the art will note that the order of execution or performance of the methods illustrated and described herein is not essential unless otherwise specified. That is it is contemplated by the inventors that elements of the methods may be performed in any order unless otherwise specified and that the methods may include more or less elements than those disclosed herein.

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

As various changes could be made in the above constructions products and methods without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

