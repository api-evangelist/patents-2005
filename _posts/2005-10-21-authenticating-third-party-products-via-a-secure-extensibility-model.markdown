---

title: Authenticating third party products via a secure extensibility model
abstract: Secure extensibility access to application program interfaces (APIs) is described. Techniques are described in which trust indicia are used determine relative trustworthiness of an extensibility module attempting to access of APIs of an application module. Access to APIs of the application module is managed based upon trustworthiness of the extensibility module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730539&OS=07730539&RS=07730539
owner: Microsoft Corporation
number: 07730539
owner_city: Redmond
owner_country: US
publication_date: 20051021
---
Computer software applications often provide mechanisms for extensibility such that third party developers may create third party applications adding functionality to host software. Extensibility is typically provided by permitting access to published or unpublished application program interfaces APIs within the host software.

Traditionally APIs were made openly available to anyone desiring to access the APIs to encourage development and increased functionality of the underlying software. Accordingly APIs may be freely used to provide enhanced functionality and to deliver additional functionality to end users. However APIs may also be targeted by malicious parties which may exploit the APIs for malicious purposes to attack the underlying software and or attack other software. When users are utilizing a trusted application for instance it is often difficult for the users to know when to trust third party applications that plug into the trusted application and extend functionality. Thus users may unknowingly install an untrustworthy rouge or malicious extensibility application that may cause harm.

Authenticating third party products via a secure extensibility access model is described which may be utilized to establish trust and prevent malicious extensions. In an implementation trustworthiness is established for an extensibility module that attempts to access application program interfaces APIs of a host application. The secure extensibility access model for instance may reference a plurality of trust indicia that are utilized to determine whether the application is trusted e.g. from a trustworthy source . An extensibility module may be permitted or denied access to APIs based on the established trustworthiness. The extensibility module may also be given differential access to subsets of APIs. e.g. permitted to access certain APIs and denied access to other APIs . Further the extensibility module may be prevented from executing entirely or quarantined if trustworthiness is below a threshold level or is unknown.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The same reference numbers are utilized in instances in the discussion to reference like structures and components.

Secure extensibility module access to application program interfaces APIs of an application module is described. APIs in many applications today typically are available to anyone seeking to utilize the APIs to add functionality to the host application. For example a third party developer may develop an extensibility module e.g. add in extension plug in and so forth for the host application that extends e.g. provides added or different functionality the application. However users of the application may not be able to distinguish a good extensibility module from a malicious extensibility module. Thus a rouge or malicious extensibility module that causes harm may be mistakenly installed. Secure extensibility access techniques are described which may be used to manage access given to an extensibility module seeking to utilize APIs of a host application to provide extended functionality to the application module.

In one or more implementations establishing trustworthiness of an extensibility module seeking to access the APIs of an application module is described. Trustworthiness may be established on the basis of a variety of trust indicia. For example trust indicia may be configured as one or more identifiers provided by an extensibility module to establish identity. Identifiers may be used to establish confidence in the identity of the extensibility module. Trust indicia may also be reputation information gathered about the extensibility module. For instance a community of users having experience with the extensibility module may recommend whether or not a particular extensibility module should be trusted. Reputation for an extensibility module from a variety of sources may be available from a reputation service.

Different trust indicia may be combined to establish trustworthiness of an extensibility module. Thus trustworthiness may be determined using either identity or reputation or using both identity and reputation combined. Reputation is typically the evidence of identity or known good behavior of the associated extensibility module. Additional trust indicia associated with an extensibility module are also contemplated for example source of the extensibility module domain names or IP address where downloaded time date and so forth. Numerous types of trust indicia may be used alone or in combination to establish identity and reputation thereby establishing trustworthiness.

Policies based upon trustworthiness may be applied to manage access to APIs. For example a trust rating may be associated with an extensibility module based upon trust indicia. A policy may then allow access to APIs if an extensibility module based on the trust rating e.g. the extensibility module has a trusted e.g. high rating. On the other hand access to APIs may be denied if there is a low trust rating. Further polices may be set for all APIs of an application module or for subsets of the APIs. Thus an extensibility module with an established trustworthiness e.g. trust rating may be permitted to access one subset of APIs and may be denied access to another subset of APIs. Policies may be set by default by the application module. Policies may also be defined by a user of the application module which may include the overriding of default policies via a user interface.

In the following discussion an exemplary environment is first described which is operable to provide secure extensibility access techniques. Exemplary procedures are then described which are operable in the exemplary environment as well as in other environments.

Additionally although the network is illustrated as the Internet the network may assume a wide variety of configurations. For example the network may include a wide area network WAN a local area network LAN a wireless network a public telephone network an intranet and so on. Although a single network is shown the network may be configured to include multiple networks. For instance a plurality of computing devices may be communicatively coupled via a peer to peer network to communicate one to another. Each of the computing devices may also be communicatively coupled to other computing devices over the Internet. Further although a single computing device is shown it should be apparent that a number of computing devices such as computing device may be connected to network . Accordingly the computing device may be representative of a plurality of computing devices that are configured to interact and communicate one to another via network such as by email instant messages and so forth.

Computing device is illustrated as including an application module . Application module may provide a variety of functionality. For example one or application module may be configured to send and receive email. Email employs standards and conventions for addressing and routing such that the email may be delivered across the network utilizing a plurality of devices such as routers other computing devices e.g. email servers and so on. In another example application module may be configured to provide one or more business productivity functions such as word processing database spreadsheet and presentation functionality. In a further example application module may be configured to provide one or more software development functions such as development interfaces tools management and compilation. Further application module may be configured to provide other computing functions such as web services graphic design web browsing and media management editing viewing and or playback.

In yet another example the application module may be configured to send and receive instant messages. Instant messaging provides a mechanism such that a plurality of computing devices when participating in an instant messaging session may send text messages to each other. A plurality of computing devices may be configured to communicate one to another via network . The instant messages are typically communicated in real time although delayed delivery may also be utilized such as by logging the text messages when one of the computing devices is unavailable e.g. offline. Thus instant messaging may be though of as a combination of e mail and Internet chat in that instant messaging supports message exchange and is designed for two way live chats. Therefore instant messaging may be utilized for synchronous communication. For instance like a voice telephone call an instant messaging session may be performed in real time such that each user may respond to each other user as the instant messages are received.

A computing device typically will have numerous applications modules which each may be configured in a variety of ways. It is contemplated that the techniques described herein may be employed with a variety of application modules of a computing device which may be configured to provide different respective functionality. For example computing device may have a business productivity application module and an instant messaging application module each configured to provide secure extensibility access to respective APIs using the techniques described.

Application module is illustrated as including a plurality of application programming interfaces APIs where k can be any integer from one to K . APIs within application module may be used to extend functionality of application module . APIs may be a set of routines protocols and tools configured to be used by a developer to create an extension e.g. to add functionality for application module . Thus APIs simplify third party development by providing development building blocks and a mechanism for access to the developer. As will be described in greater detail in reference to APIs may be arranged into groups or subsets.

Application module is depicted as having an API access module . API access module is representative of functionality which may be utilized to control access to the APIs . For example an extensibility module which may be configured to access the application module . More specifically extensibility module may attempt to access APIs or a subset of the APIs of application module to provide added or different functionality to application module . In an implementation API access module controls whether access to APIs is given to extensibility module .

As depicted in extensibility module may be located on computing device . The computing device may obtain the extensibility module in a variety of ways. Extensibility module for instance may be downloaded to computing device from the internet via network a peer to peer network and so forth. Further extensibility module may be copied to computing device via computer readable media such as flash memory CD ROMs DVD ROMS floppy discs and so forth. API access module may operate to establish trustworthiness when extensibility module seeks access to APIs .

For example a third party developer may develop the extensibility module which then seeks access to APIs within application module . API access module is executed to establish whether the extensibility module satisfies a measure of trustworthiness before permitting access. Thus if extensibility module satisfies the measure of trustworthiness API access module API may permit access to APIs . Extensibility module may then operate to extend functionality of application module . Alternatively API access module may establish that extensibility module fails a measure of trustworthiness and access to APIs may accordingly be denied.

Although the extensibility module is depicted on the computing device in another instance the extensibility module may remain at a remote location e.g. upon a remote computer or upon media . In this instance API access module may be configured to determine the trustworthiness of extensibility module before extensibility module is downloaded or copied to computing device . Further a different level of trustworthiness may be required to download an extensibility module than is required to access one or more APIs . Thus and extensibility module may be downloaded based upon one level of trust but be required to have a higher level of trust to access one or more APIs . Further discussion of establishing different levels of trustworthiness to access different API s or subsets of API may be found in relation to .

API access module may challenge an extensibility module to establish trustworthiness using a variety of trust indicia. Trust indicia may include the identity of the extensibility module . Accordingly API access module may be configured to establish confidence in identity of an extensibility application . As depicted in extensibility module may include one or more identifiers where m can be any integer from one to M . Identifiers may be configured in a variety of way. For example identifiers may be third party certificates self signed certificates public keys a hash a process id an executable name and so forth. API access module may reference one or more of identifiers provided by extensibility module as proof of identity. Based upon the number quality and or type of identifiers provided API access module determines confidence in identity of extensibility module . Confidence in identity may be used alone or in combination with other trust indicia including reputation discussed below to establish trustworthiness.

In the case of an identifier configured as a certificate a certificate authority connected to network may be utilized to manage validate and distribute certificates. As depicted in a certificate authority includes certificate manger module and has storage to store a plurality of certifications where q may be any integer from one to Q . Storage by way of example may be a database to store certifications for a plurality of modules including extensibility module .

In an implementation a certification corresponds to an identifier provided by extensibility module for proof of identity when challenged by API access module . API module references the certification for validation of the identifier and accordingly to establish confidence in identity of the extensibility module . API access module communicates with certificate authority through network to examine the certification . API access module utilizes the certification for validation of the identifier . Further API access module utilizes the results of validation to establish confidence in identity extensibility module .

While a single certificate authority is depicted it is contemplated that API access module may be configured to communicate with a number of certificate authorities as necessary to access certifications corresponding with different extensibility modules such as extensibility module . Further discussion of identifiers that may be referenced and employed by the application access module to establish trustworthiness may be found in relation to .

Trust indicia may also include the reputation of the extensibility module . For example the environment of is depicted as including a reputation service that has a plurality of reputations stored in storage where n can be any integer from one to N . The reputation service may employ a reputation manager module to aggregate reputations data from a variety of sources and for a variety of modules into reputations that correspond to the modules. In one implementation the reputation service is configured to aggregate reputation data and to provide reputations in real time or near real time . In this manner the most up to date reputation data is provided for an associated module. If trust for a module becomes compromised a change in the associated reputation of the module may be distributed to clients in a timely fashion.

In an instance API access module uses one or more reputations as trust indicia to establish trustworthiness of the corresponding extensibility module . While a single reputation service is depicted it is contemplated that API access module may be configured to communicate with a number of reputation services to access reputations for extensibility modules such as extensibility module . Thus a plurality of reputations corresponding to an extensibility module may be accessed from one or more reputation service .

Reputation data used to establish reputations may be provided by a variety of sources. The reputation service therefore may act as a collector aggregator and propagator of reputations from the variety of sources including other reputation services. Additionally the reputation service may utilize information to generate reputations such as data from third parties and other independent data sources for use in generating the reputations. Reputation service may also collect information from a community of users who may make recommendations regarding the extensibility module . Thus a variety of users of a particular extensibility module may drive reputation of the module by providing feedback directly to a reputation service or by providing information to another source collected by a reputation service from the source. One or more reputations may then be used by API access module in establishing trustworthiness.

In an implementation one or more of the trust indicia may be used to determine trustworthiness of an extensibility module before permitting access to APIs . Thus identity or reputation may be used alone to establish trustworthiness. In addition different trust indicia such as identity and reputation may be used in conjunction to establish trustworthiness. Thus trustworthiness may be established in a variety of ways and varying levels of trust may be utilized to provide differing levels of access to APIs e.g. access to all some or none of the APIs .

In other words API access module may enforce a hierarchy of trustworthiness in which one or more ways of establishing trust are more likely to represent trustworthiness than one or more other ways of establishing trust. For example if an identifier provided by an extensibility module is a third party certificate from a highly trusted third party certifier then a trusted rating e.g. high of trustworthiness may be associated with the extensibility module . Sufficient reputation alone from a reputation service may also establish trustworthiness. Lower trustworthiness i.e. not trusted may be associated with an extensibility module when a less trusted identifier e.g. a hash is used for proof of identity and no other trust indicia are available. If however a lesser identifier e.g. a hash is used for proof of identity and is supplemented with a good reputation from a reputation service then an intermediate trustworthiness may be associated with the extensibility module . Naturally a variety of combinations of trust indicia may result in a variety of corresponding trustworthiness.

The hierarchies of trustworthiness may be employed and maintained in a variety of ways. For example the hierarchies may be policies built into API access module e.g. by hand crafted rules machine learning and so on provided by the user deployed and updated dynamically from a web update service and so on. Further discussion of trustworthiness hierarchies and policies may be found in relation to .

Generally any of the functions described herein can be implemented using software firmware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module functionality and logic as used herein generally represent software firmware or a combination of software and firmware. In the case of a software implementation the module functionality or logic represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices further description of which may be found in relation to . The features of secure extensibility access described below are platform independent meaning that the strategies may be implemented on a variety of commercial computing platforms having a variety of processors.

The computing device is illustrated as executing an application module on the processor which is storable in memory . The application module when executed may be utilized to perform a variety of functions as discussed in reference to . Further computing device is illustrated as executing an extensibility module on the processor . As previously indicated extensibility module may also remain at a remote location e.g. upon a remote computer or upon media .

Application module is depicted as having an API access module . API access module is representative of functionality which may be utilized to establish trustworthiness of extensibility module using trust indicia and to control access to APIs within application module . For example API access module may challenge extensibility module before permitting access to APIs.

API access module may further include additional modules to perform a subset of the functionality of API module . By way of example depicts API access module having identification module reputations module and access control module . Identification module is representative of functionality which may be utilized to determine confidence in identity of extensibility module . Reputations module is representative of functionality which may be utilized to obtain reputation data regarding extensibility module . Access control module is representative of functionality which may be utilized to establish trustworthiness of extensibility module and control access to APIs based upon trustworthiness. Naturally in other implementations the modules may be further separated into stand alone modules combined and so on without departing from the spirit and scope thereof.

The extensibility module may provide a plurality of identifiers where m can be any integer from one to M which may be utilized to establish trustworthiness of extensibility module . As indicated identity may be one type of trust indicia used in establishing trustworthiness. Extensibility module for example may provide one or more identifier as proof of identity when challenged by application access module . In an implementation application access module may use one or more identifiers to determine a confidence in identity of extensibility module . Confidence in identity may depend upon the quality number and or type of identifiers provided by the extensibility module . Thus as depicted in confidence in identity may be defined on a relative scale based upon what identifiers are available from extensibility module .

In an instance confidence in identity may be a rating on a scale running from high confidence e.g. trusted to low confidence e.g. not trusted . Confidence in identity may be related to ease in spoofing or falsifying the provided identifiers. If confidence in identity is sufficiently high then confidence in identity may establish trustworthiness of extensibility module . In other words application access module may permit access to one or more APIs using only confidence in identity . In this case additional or different trust indicia are not necessary to establish trustworthiness.

If confidence in identity is insufficient then additional trust indicia may be sought to supplement identity and establish trustworthiness. Thus application access module may be configured to use confidence in identity in combination with other trust indicia to determine whether APIs may be accessed by extensibility module . A variety of identifiers and combinations thereof may be employed by API access module examples of which are described as follows.

Third party certificates may involve the signing of a portion of extensibility module with a certificate that can be traced to a certificate authority e.g. certificate authority depicted in . API access module may process the certificate which typically includes the identity of the certificate authority. For example API access module may validate the certificate to establish the trustworthiness of the extensibility module . If necessary validation may involve communication between computing device and certificate authority via network . A certificate may also be encrypted using a public private key pair. Thus API access module may use a public key provided with a certificate to decrypt the certificate.

The level of trustworthiness established by this technique may also be based on the reputation of the third party certifier and a type of certificate e.g. some certifiers offer several levels of increasingly secure certification . In other words the confidence in identity and therefore trustworthiness may be dependent upon who issued the certificate and what type of certification is used. For example trustworthiness may be immediately established for an extensibility module that is signed by a particular third party certifier while another extensibility module signed by another third party certifier may require additional trust indicia before trustworthiness is established.

A certificate may also configured as a self signed certificate . As with a third party certificate self singed certificates involve signing a portion of an extensibility module with a certificate except in this case the developer of the extensibility module creates the certificate rather than a third party. Thus self signing may be a more convenient and less costly manner of singing for the developer. Trustworthiness that results from a self signed certificate therefore depends again upon who issued the certificate. A known and reputable party for example may establish trustworthiness using only self signed certificates. However other self signers may require additional trust indicia before trustworthiness is established. For instance a self signed certificate of a relatively unknown party may be supplemented with reputation data such as a reputation associated with the extensibility module . Policies within API access module may determine which combinations of trust indicia are required for different certifiers.

A public private key pair may also be used in conjunction with third party certificates or self signed certificates . In an implementation this involves creation of a public private key pair signing the certificate with the private key and distributing the public key with the certificate or via other distribution methods. API access module may use the public key associated with a certificate provided by an extensibility module to decrypt the certificate validate the certificate establish confidence in identity and so forth.

A hash of the contents of an extensibility module may also be used to establish identity and trustworthiness. The hash utilized may be the product of any well known hash function such as SHA 1 or MD 5 or may be the product of any effectively unique content specific hash function. Hash functions may take the contents of extensibility module and run it through a standardized mathematical function to create a digest or digital fingerprint which may be a 128 bit 160 bit or any other sized portion of data. Small changes in the message create radically different digests and the digest provides no useful information about the content of the file other than its identity. Two files having the same content having no other data appended will produce the same digest. The likelihood of two different files having the same digest is considered remote so as to create an effective identifier. A hash may be provided with extensibility module . Alternatively API access module may be configured to create a hash of an extensibility module .

Further hash functions may be computed for modules known to be trustworthy and for modules for known rouge or malicious modules. A hash list may then be created that identifies which of the variety of hashes are trustworthy and which are not. Such a list may then be maintained within API access module . A hash list might also be updateable or accessible via network from a web service. For example reputation service may provide hash lists in addition to or in lieu of reputations . Thus a computed or provided hash of extensibility module may be compared to the hash list to verify identity and or establish trustworthiness.

Extensibility module on computer may provide a variety of other associated identifiers. For example a process ID or executable name may be associated with extensibility module and may be provided to API access module as proof of identity. Other identifiers are also contemplated for example a file name a file size a creation date a download location e.g. domain name or IP address and so forth. Many types of identifiers may be low level identifiers which are easily spoofed or falsified and thus would establish a low confidence in identity . Such low level identifiers may be used in conjunction with other more reliable identifiers and or with other types of trust indicia e.g. reputation . For example combinations of identifiers such as self signed certificate and process ID may establish a high confidence in identity than each alone. Further one or more identifiers may be used by API access module to access a reputation from a reputation service such as reputation service depicted in .

Another type of trust indicia is reputations . As previously indicated reputations associated with an extensibility module may be used in conjunction with or in lieu of confidence in identity to establish trustworthiness of extensibility module . depicts reputations in memory of computing device . API access module when executed on the processor may retrieve one or more reputations associated with the extensibility module when attempting to access APIs of the application module. For example reputations may be accessed from a reputation service and stored in memory of computing device .

In an implementation API access module uses one or more identifiers associated with extensibility module to query a reputation service via network . API access module may request a reputation associated with extensibility module using one or more identifiers provided by the extensibility module a hash of the extensibility module and so on. Reputation service and more particularly the reputations manager module is configured to receive requests for reputations and to retrieve one or more reputations corresponding to identifiers provided by the request. The reputations may then be communicated to the computing device via the network . As depicted in the communicated reputations may be stored in memory . API access module may then use reputations in establishing trustworthiness of an associated extensibility module .

It is contemplated that API access module may be configured to query a plurality of reputation services and to retrieve one or more reputation from each reputation service if available. For example two reputation services may each provide a different reputation associated with an extensibility module . API access module may be further configured to aggregate reputations from the plurality of sources e.g. multiple reputation services . In one instance a user of application module may select which of a plurality of reputation services should be used to obtain reputations. In this manner a user may select one or more reputation services that the user prefers. Naturally default settings may select a reputation service in the absence of user action.

Reputations may indicate a measure of relative trustworthiness of an extensibility module and may originate from a variety of sources. For example third party raters of reputation services a community of users individuals and extensibility developers may provide reputation service information regarding extensibility modules and so on. Reputation service may aggregate information from this variety of sources into a reputation . The proprietors of a reputation service may also develop reputations on their own as a portion of their service.

In an implementation reputation may indicate that the subject extensibility module is either recommended or not recommended i.e. trusted or not trusted. In another instance reputations may aggregate representations of information gathered from many users regarding the subject extensibility module . For example a reputation may indicate a number of users reporting a percentage recommending and a percentage not recommending. Reputation may also be a rating such as good ok bad unknown and so forth. A variety of other scales of relative reputation are contemplated such as a letter grade a percent recommended a number and so forth. API access module may be configured to process one or more reputations in a variety of forms to establish the relative trustworthiness of extensibility module .

The techniques and procedures describe herein may be used to control access to all or some of the APIs of an application module . further depicts API as plurality of API subsets where j may be any integer from one to J . APIs may be grouped in a variety of ways to establish one or more API subsets . For example one API subset may by related to user interface features of an application module such as menus fonts and so forth. Another subset may be related to communications functionality of application module . Thus different APIs subsets may be used to allow extensibility to different components of application module .

Further access to different subsets of APIs may be restricted or controlled based upon different levels of trustworthiness. A more sensitive or critical API subset for instance may require a relatively high degree of trustworthiness to be established. For example only an extensibility module providing a third party certification will be permitted access to a critical API subset . Other less sensitive API subsets may be accessible if a lower degree of trustworthiness is established for example using a hash supplemented with a favorable reputation .

At some low level of trustworthiness access to all APIs and API subsets may be denied. On the other side at some high level of trustworthiness access to all APIs and API subsets may be permitted. If insufficient information is available to establish trustworthiness an extensibility module may be denied access and quarantined. API access module may then attempt to establish trustworthiness at a later time.

It is also noted that a threshold level of trustworthiness may be required before an application module is downloaded copied and or executed. In other words one trust level may be required to enable downloading or copying of an extensibility module to a computing device . Then when extensibility module is executed and attempts access to various API s or API subsets an additional determination of trustworthiness may be required before permitting access to each API or subset . In this manner threshold level trustworthiness may be required before allowing an extensibility module any access to computing device or APIs . If the threshold level is satisfied some of APIs may be accessible while more sensitive APIs may require additional proof of trustworthiness before access is permitted.

Thus a variety of combinations of trust indicia allows for different manners of establishing trustworthiness and may result in different degrees of access to APIs. A developer of an extensibility application is not limited to a single manner of establishing trust. Allowing only third party certifications for example may be cost prohibitive for an individual developer or hobbyist. Using the secured extensibility access techniques described confidence in identity may be established user a variety of identifiers . Further reputations may be used to supplement poor proof of identity. Different levels of access may be may correspond to different levels of trust.

API access module may define varying degrees of trustworthiness depending upon what of identifiers are used e.g what confidence of identity exists and what reputations are available e.g. good bad and so forth . In other words API access module may employ a scalable treatment depending on the trustworthiness e.g. the strength of identity and reputation associated with the extensibility application .

In an implementation trust indicia whether alone or in differing combinations may be used by API access module to establish relative trustworthiness. The trustworthiness may then be expressed as a trust rating having several different levels i.e. hierarchies of trust. depicts a trustworthiness scale defining relative trustworthiness. Trustworthiness scale may be implemented in a variety of ways. As depicted in trustworthiness scale has a plurality of trust ratings . . . P . Trust ratings may be for example Good Ok Unknown Poor or Bad P . Numerous other manners of expressing relative trustworthiness may be employed such as a letter a number a percent trusted and so forth. Thus API access module may be configured to employ trust indicia to establish trustworthiness in the form of a relative trust rating .

These rating may then be used to permit or deny access to APIs or different API subsets based on which of the different trust ratings P are satisfied by the application e.g. the trustworthiness of the extensibility module . For example if the combined trust indicia for a particular extensibility module results in a high level trust rating e.g. Good then the extensibility module may be permitted to access APIs of the application module . However if the extensibility module meets lower level trust rating e.g. Ok the extensibility module may be denied access to all APIs of an application module or be given differential access to subsets of APIs e.g. permitted to access certain APIs and denied access to other APIs . Further the extensibility module may be prevented from executing entirely or quarantined if trustworthiness e.g. trust rating is below a threshold level e.g. Bad or may not be determined e.g. Unknown .

Thus secure extensibility access techniques described create access availability to a wide range of extensibility developers that may have varying abilities and resources available to establish trust. Depending upon what level of access to APIs is required by a particular developer different approaches to establishing trust may be employed. The level of proof required to gain access may be matched to the level of access sought. If low level proof is provided access may be granted to a limited subset of APIs . However if greater proof is provided then more access may correspondingly be obtained e.g. to other subsets or to all APIs .

Further one or more configurable policies where s may be any integer from one to S may be used to manage access to APIs based upon trustworthiness. Policies may define what access to APIs is provided for each level of trustworthiness on a trustworthiness scale . For example API access control module may examine one or more policies that define which APIs or subsets of APIs may be accessed for example by an extensibility module having high trustworthiness e.g. a trust rating of Good . The same policy or another policy may similarly define what access is permitted at other relative trustworthiness levels e.g. OK Unknown and so forth . Thus a single policy or set of policies may establish the rules that govern what level of trust is required to access various APIs of an application module . API access module applies these rules to manage access given to an extensibility module having an established trustworthiness.

Policies may be maintained within API access module application module computing device and so forth. For instance policies are depicted in as stored within memory of computing device . It is noted that policies might also be accessible from a remote location via network a peer to peer network or otherwise remotely accessible. For example a community of users may share policies via network .

In an implementation the API access module may also set default policies which may be modified by a user of application module . API access module for example may expose a user interface that allows a user to set a variety of access policies including overriding default policies . Access policies may be set for APIs or subsets of APIs within an application module . Further policies may also define what type trust indicia is required to establish a particular trust rating . Thus a policy may specify that a third party certificate is to be provided as proof of identity to access a certain subset of APIs . A user may then modify the policy to allow a self signed certificate to be used to access the same set of APIs .

In an implementation a user may also be permitted to configure other aspects of API access module . For example a policy may define which identifiers or combinations of identifiers may result in sufficient confidence in identity to establish trustworthiness without additional trust indicia. In other words the policy defines what level of confidence in identity necessitates additional trust indicia. Additionally policies may be used to set correlations between confidence in identity and trust ratings . Similarly policies may also be used to set correlations between reputations from a reputation service and trust ratings . Thus configurable policies within application module may be used in a variety of ways to manage access to APIs based upon trustworthiness.

The following discussion describes API management techniques that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware firmware or software or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. It should also be noted that the following exemplary procedures may be implemented in a wide variety of other environments without departing from the spirit and scope thereof.

Access to API s is managed based upon trustworthiness block . In the previous example trustworthiness of extensibility module may be established as low i.e. untrustworthy. Thus access to APIs may be denied. Accordingly extensibility module is not executable to provide added functionality change menu items to the application module . In another instance trustworthiness of extensibility module is established as unknown . In this instance the extensibility module is denied access and quarantined. An attempt to establish the trustworthiness of the quarantined extensibility module may then be made at a later date when more information is available. Further if trustworthiness meets a threshold level e.g. medium trustworthiness corresponding to specific APIs that the extensibility module is seeking to access then API access module may permit access to those specific APIs .

A challenge is issued to the extensibility module to provide proof of identity and reputation block . Continuing with the previous example application module in may challenge extensibility module before allowing access to the APIs .

Identity of an extensibility module is validated using one ore more identifiers provided by the extensibility module block . For example the extensibility module may provide one or more identifiers for proof of identity such as a third party certificate a self signed certificate a hash a process id an executable name attachment and so on. The application module validates the identity of the message using one or more of the identifiers. Validating may result in a confidence in identity of extensibility module as described previously in relation to .

The reputation of an identified extensibility module is determined block . Following the previous example application module queries one or more reputation services such as reputation service depicted in . The application module may use one or more of identifiers to request reputations . In response the reputation service or reputation services returns one or more reputations that correspond to the extensibility module . Reputations for instance may include a number of users reporting on extensibility module and a percentage of users recommending the extensibility module. Thus a reputation may indicate one hundred users with seventy five percent recommending.

The trustworthiness of an extensibility module is established block . For example application module may use identifiers confidence in identity and reputations to establish trustworthiness for the extensibility module . Access to APIs is managed based upon trustworthiness block . For example if the extensibility module is trusted e.g. has a high trustworthiness the application module may permit access to the APIs . If trustworthiness is relatively lower however the application module may deny access to some or all of APIs . Thus application module may manage access to APIs based upon trustworthiness.

A determination is made if confidence in identity is sufficient to establish trustworthiness of the extensibility module decision block . Staying with the previous example the self signed certificate may correspond to a high confidence in identity based upon a default settings or a user defined policy of API access module . The policy may also define that additional trust indicia are not required to permit access to APIs . In this instance trustworthiness may be established base upon trust indicia block without retrieving additional trust indicia block . For example API access module may establish trustworthiness based upon the self signed certificate alone.

In another instance the self signed certificate may not be sufficient based upon a default settings or a user defined policy of API access module to establish trustworthiness alone. In other words API access module through default settings or a policy may require that self signed certificate be supplemented with additional trust indicia. In this second instance additional trust indicia may be sought block . For example API access module may query a reputation service depicted in using one or more identifiers to retrieve one or more reputations . As depicted in reputations from one or more reputation service may be retrieved to memory of computing device . Reputations may indicate for example that the extensibility module configured to add logging features to instant messaging application application module is recommended.

Trustworthiness is then established based upon trust indicia block . In the second instance trustworthiness may be established using all the trust indicia gathered. Thus trustworthiness may be established using both confidence in identity determined based upon a self signed certificate and reputations gathered from a reputation service . Again default settings or user policies may define what level of trustworthiness is assigned to extensibility module depending on the number type and quality of trust indicia. As depicted in trustworthiness may be defined as a trust rating upon a relative trust scale .

Based upon the trustworthiness access to APIs of an application module is managed block . In the previous examples trustworthiness of extensibility module may be established as high and thus access to APIs may be permitted. Therefore the extensibility module may be executed to provide added functionality to the instant messaging application.

In another example extensibility module of may seek access to APIs of the instant messaging application e.g. application module to provide both enhanced message logging features and message formatting features. Further APIs may be organized in subsets corresponding to different components of instant messaging application. Thus one subset may correspond to message logging and another subset may correspond to message formatting. Naturally a variety of other subsets may exist corresponding to a variety of aspects of the instant messaging application. In this example trustworthiness established for the extensibility module may be sufficient to access one subset and insufficient to access another subset. Thus API access module may manage access to APIs by permitting access to one subset and denying access to another subset.

Access to API s of an application module is managed based upon the examined policy block . For example the policy may indicate that an untrustworthy module will be denied access to all APIs . Thus if trustworthiness of extensibility module is untrustworthy API access module may manage access to deny access to APIs . The policy may also indicate that a trustworthy module will be allowed to all APIs . Accordingly if the extensibility module is trustworthy then API access module will manage access to permit access to APIs . Naturally a variety of combinations of trustworthiness and corresponding access may be described by one or more policy. Thus the policies may be used to manage access to APIs in a variety of ways.

Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed invention.

