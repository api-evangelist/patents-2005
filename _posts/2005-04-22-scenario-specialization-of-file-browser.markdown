---

title: Scenario specialization of file browser
abstract: In a graphical user interface environment, a situational-specific browser may be used to provide contextually appropriate levels of information for files whose information is to be displayed. As different views of files are to be displayed, the browser may dynamically adjust its configuration to display different types of information, features and/or command options. Different views may be predefined, or new views may be dynamically created in response to user navigation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08522154&OS=08522154&RS=08522154
owner: Microsoft Corporation
number: 08522154
owner_city: Redmond
owner_country: US
publication_date: 20050422
---
The present application relates generally to the field of computer software. More particularly the application relates to a system and method for providing an improved user interface when browsing files on a computer system. The application relates to the display of information regarding such files and for allowing user interaction with this information.

To the relief of trees everywhere the proliferation of digital documents has rendered paper documents obsolete in many situations. Digital technology has made it easy to duplicate and distribute digital versions of what used to be reams and reams of paper filed in countless filing cabinets. While the technology for capturing these documents has changed dramatically over the years the approach to organizing them and retrieving them generally has not.

Today file systems still use the traditional concept of filing cabinets and folders in organizing data where files are logically placed in one of the folders on the system. Browsing for these files is just as archaic and still resembles manually rifling through a filing cabinet full of paper documents. A file is considered to be stored in just one folder location and the user is forced to look through a number of folders and subfolders to peruse the documents that are on the computer system. Additionally the browsing interface provided to the user is static and largely ignorant of the significance of the data being displayed. This ignorance and static browsing capabilities limits the amount of information provided to the user and tends to complicate and prolong the user s efforts at browsing for files in the system.

For example shows an example of a browser panel offered in the MICROSOFT WINDOWS XP operating system. The panel shows the contents of a folder C Folder which contains a number of subfolders and files and includes the folder address the names of the various elements shown their size their type and their date of modification . The layout of panel is the same regardless of the contents being displayed even if the panel s layout would result in an inefficient display. For example the system shows a blank for the size of the two subfolders but if C Folder contained only subfolders the browser panel would still display the Size column with an entire column of blank entries. This column of blanks would still occupy the same width allotted to the Size column in the panel s display format and may well force certain more meaningful information off of the current display area.

Today s computer systems are being presented with more and more digital files to manage and there is an ever present need to improve the efficiency and clarity with which file information is give to the user as the user browses the files on the system. Prior browsers such as panel have room for improvement in this area and such improvements are described below.

Aspects of the present invention may meet one or more of the above needs and overcome one or more deficiencies in the prior art by providing a system and method in which the user is given an improved file browsing interface.

The browsing interface may vary depending on the contents to be displayed. In some instances the browsing interface may customize the user interface options presented in the browser panel in accordance with the contents to be displayed. The browser may rearrange remove and or add displayed properties in accordance with the contents.

Other aspects of the browser s features appearance and or organization may be customized based on the contents.

One or more templates may be provided and or created to provide a predetermined set of criteria for generating a browser panel.

Software interfaces may be provided to allow development of additional browser panels by users and or applications.

User interaction with such a browser may cause further alterations in the browser s appearance and or functionality.

The present invention relates to a system and method for providing an improved user experience when browsing files on a system. An exemplary operating environment for the present invention is described below.

Referring to the drawings in general and initially to in particular wherein like reference numerals identify like components in the various figures an exemplary operating environment is shown and designated generally as operating environment . The computing system environment is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment .

The features described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the features may be practiced with a variety of computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. They may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system includes a general purpose computing device in the form of a computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . If desired any of the elements described herein may be implemented as standalone elements e.g. a single processing unit or as multiple elements working in concert e.g. multiple processing units .

Computer typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Examples of computer storage media include but are not limited to Random Access Memory RAM Read Only Memory ROM Electronically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology CD ROM digital versatile discs DVD or other optical or holographic disc storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store desired information and be accessed by computer . The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A Basic Input Output System BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable nonremovable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to nonremovable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable nonremovable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory units digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a nonremovable memory interface such as interface . Magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for computer . For example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Typically the operating system application programs and the like that are stored in RAM are portions of the corresponding systems programs or data read from hard disk drive the portions varying in size and scope depending on the functions desired. Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they can be different copies. A user may enter commands and information into the computer through input devices such as a keyboard pointing device commonly referred to as a mouse trackball or touch pad a wireless input reception component or a wireless source such as a remote control. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port IEEE 1394 port or a universal serial bus USB or infrared IR bus.

A display device is also connected to the system bus via an interface such as a video interface . Display device can be any device to display the output of computer not limited to a monitor an LCD screen a Thin Film Transistor TFT screen a flat panel display a conventional television or screen projector. In addition to the display device computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks such as connections to a metropolitan area network MAN intranet or the Internet.

When used in a LAN networking environment the computer may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer may include a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the network interface or other appropriate mechanism. Modem could be a cable modem DSL modem or other broadband device. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Other internal components of the computer are possible but not shown. For example various expansion cards such as television tuner cards and network interface cards may be incorporated within a computer .

When the computer is turned on or reset the BIOS which is stored in ROM instructs the processing unit to load the operating system or necessary portion thereof from the hard disk drive into the RAM . Once the copied portion of the operating system designated as operating system is loaded into RAM the processing unit executes the operating system code and causes the visual elements associated with the user interface of the operating system to be displayed on the display device . Typically when an application program is opened by a user the program code and relevant data are read from the hard disk drive and the necessary portions are copied into RAM the copied portion represented herein by reference numeral .

As previously mentioned the features described herein may be described and implemented in the general context of computer useable instructions. Computer useable instructions include functions procedures schemas routines code segments and modules useable by one or more computers or other devices. The computer useable instructions form an interface to allow a computer to react according to a source of input. The instructions cooperate with other code segments to initiate a variety of tasks in response to data received in conjunction with the source of the received data.

Each available browser may be defined by a template stored in memory of the computer system. The template could simply be a file identifying the contents of the view the organization the features to display etc. The template may also specify the actual files that are to be displayed in the browser view.

Display may include a list panel showing the available browser panels. The list may include a listing of all available views on the system which may be presented in a nested menu sub menu format to conserve display area. This range of views may be referred to as a pagespace. The list may alternatively list a subset of browser panels that are associated with the current panel resulting in a smaller pagespace. For example if the current display is a music panel the list may display Playlist and Genre view options or specific playlists and or genres that have their own panels.

Display may include a files panel which may contain a listing of the files that meet the criteria established for the current browser panel. The files panel may include indicia representing data files such as an icon and or text and one or more properties of the files e.g. their names authors file sizes file types project affiliation date of creation modification etc. . The properties may be arranged such as in columns and may be rearranged and or modified depending on what is appropriate given the criteria used for the selected display . For example a music browser might choose to list the Song Title as the first property with Artist and Album next whereas a browser for project XYZ might list the Edit Date first with File Size and File Type to follow. Certain browser types may wish to omit undesired properties e.g. the Album property may not be very useful for a spreadsheet document . Each browser display may have a customized arrangement of files and associated properties. Column width row size indicia appearance e.g. size color etc. grouping stacking and any other display properties may be included in this customization. For example some browsers may display their files as thumbnails e.g. picture browsers may do this while other browsers may simply display the files in a text listing of the files and their properties.

Display may also include a preview panel that provides a preview of the content of one or more selected files from the files panel . There may also be a properties panel that displays properties for one or more selected files from the listview data . The properties panel may provide greater detail and or amounts of properties than that shown in listview . Display may include other types of display and user interface elements as well such as navigation commands panel sizing commands etc.

Each of the various portions of display may be implemented as distinct software modules. For example there may be a Commands module that is responsible for defining the user interface elements that are to go into Commands display a Listview module for processing the display elements in the files panel a Preview module for generating the content of the preview panel etc. These modules may expose application program interface API elements to facilitate interoperability with other applications and the various modules may be provided with parameters such as the criteria for a given view its position its size etc. Having distinct modules may simplify the process of defining new panels with different layouts and arrangements.

Each browser display may also have differences beyond just having different contents in the display areas discussed above. For example each browser may have its own customized arrangement of display areas such that certain areas may be resized added removed based on the criteria and or contents of the particular browser. For example a music browser might wish to do away with preview panel and offer music commands e.g. play pause cue add to playlist burn to CD etc. in command area . The other display areas may be rearranged and or resized to take advantage of the space previously occupied by the preview panel. The particular layout of the browser may be set for example in the template defining the browser view. For example depicts an example of a different browser having elements arranged in a different manner. In that example the list of available browser views has been enlarged to occupy the space relinquished by the preview panel. As another difference each browser view may have its own unique display theme such as watermark pattern color theme font etc. to help further distinguish the view from other views on the system. Context menus e.g. available commands text etc. user interface behaviors default commands on left right mouse clicks and other display interaction attributes may also be different for each browser.

In step the criteria may be used to identify the various files on the system that satisfy or meet the criteria and which are to be included in the browser display. These files may be identified through a search of the system s memory or they may simply be identified from the template information if the template already identifies the files to be listed.

When the files are identified the system may assemble a specific browser view or panel in step . Assembling the panel may include consulting a predefined template to determine the various elements modules that are needed in the panel. In some instances the panel may be further customized and or modified when the files identified for display satisfy a different set of criteria from the ones established for the template or if the identified files are suitable for display in a different template that has narrower criteria. For example if the user requests a browser for all files associated with a given project such as XYZ Project the system may be expected to provide a project browser panel. Such a panel may have been defined with the possibility that a project may include files of multiple types and may have separate display regions to segregate files based on file type. However if a particular project only happens to have files of one type then the system may dynamically customize the browser panel for the current display. The further customized panel may offer extended command options applicable to the file type or remove display areas and or elements that normally would have been used to display files of other types. The browser views may be dynamically modified based on the identity of files that meet the criteria used to establish the panel. Other types of custom assembly may be performed. The browser may adjust the panels depending on the number of files to be displayed so that a portion of a first display area s screen space may be transferred to a different display area e.g. a smaller listview is shown but a larger properties area is shown . The browser may adjust the panels based on the search criteria used to identify the files for display e.g. the criteria may be incorporated into a predetermined portion of the display or the results may be arranged based on the criteria and how well the files matched them .

In step the browser view may be generated on a display device associated with the computer system. Then in step the system may check to determine whether the user has performed an interaction or supplied an input to the browser view. User interaction may include editing text navigating through the pagespace by selecting a different view and or interacting with any of the displayed elements on the browser. If the user has given an input then in step the system may revise the browser in response. The revision to the browser may include removing adding or modifying one or more of the displayed elements in the browser view and may result in a dramatically different display. For example the user viewing a Music browser view may select one of the music files and request to view a Project browser for a project associated with the selected music file the Project browser may have a completely different display format. The browser displays may be dynamically modified to add and or remove any of the features described above which results in a browser interface that continuously provides users with a high level of contextually appropriate information.

When changing or revising a particular browser the system may provide visual effects to smooth the transition. For example animation may be used to show a repositioning of a displayed element fading can be used to show the addition deletion of elements and morphing effects may be used to show one element changing into another one. Although different views are possible a user or the system or its applications may also specify that certain features e.g. display elements available commands menus etc. or formats are to remain constant in multiple browser views to help minimize user confusion.

In step which occurs after step or if no user input has been received in step the system may check to determine whether the browser is to be closed or left and if so the browser process for this browser may end. If not the process may return to step to await further user input.

The page description may include a reference to a browser page structure . The browser page structure may include a variety of properties that ultimately define the view. For example there may be a view property defining the basic attributes to be contained in this view those attributes may be the same preview pane left pane and task pane in the basic view frame . The page may also have a data source property which may identify a location from which the data that populates the particular view may be obtained. The source may for example include a static list of data. The page may also include a command property which may identify the various commands that are to be supported by the view. Each command may be implemented by a separate application and or routine and may include commands for handling preview pane tasks context menu options etc. Of course the above is just one example of how the various browser views may be managed and implemented.

The discussion above refers to browsers but the features described herein need not be limited to system shell browsers. Any application wishing to offer customized views of data files may take advantage of the features described herein.

Alternative embodiments and implementations of the present invention will become apparent to those skilled in the art to which it pertains upon review of the specification including the drawing figures. For example the various steps in the described processes may be rearranged modified and or deleted as desired to implement a selected subset of features described herein. Additionally in the above references to certain features being found in one or more aspects or embodiments of the present invention are made simply to illustrate various concepts that may be advantageously used alone or in combination with other concepts and should not be read to imply that there is only one inventive concept disclosed herein or that all of the described features are required in any of the claims that follow. Rather each of the following claims stands as its own distinct invention and should not be read as having any limitations beyond those recited.

