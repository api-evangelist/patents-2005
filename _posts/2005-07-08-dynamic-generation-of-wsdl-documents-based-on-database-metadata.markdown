---

title: Dynamic generation of WSDL documents based on database metadata
abstract: Methods for generating WSDL (“Web Services Description Language”) documents to describe types and function entry points based on database metadata are disclosed. Such a method may include resolving the endpoint metadata by querying based on parameters about the request collected by the HTTP stack. From the endpoint metadata, the list of entry points which have been mapped may be collected. For each entry point, attributes about the entry point may be collected, and metadata for the types of parameters to the entry point may be looked up. A first collection of unique XML schema namespaces may be created, with one entry corresponding to each unique XML schema namespace for any arbitrary user-defined XML Schema definitions required by a parameter to an entry point. A second collection of unique XML schema namespaces may be created, with one entry corresponding to each unique XML schema namespace for an entry point. The wrapper elements for the WSDL document and any global XML schema definitions may be emitted. The first collection of unique XML schema namespaces may be iterated through, and the XML schema definitions may be emitted. The second collection of unique XML schema namespaces may be iterated through. For each entry point in the second collection, the XML schema definition for the entry point may be emitted, including any XML schema definitions for parameters to the entry point. After emitting all of the XML schema definitions, the entry points may be iterated through, and WSDL document definitions for messages, port types, and bindings for each entry point may be emitted. After emitting all of the message definitions, the WSDL document may be completed by emitting service entry definitions for the endpoint.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07590935&OS=07590935&RS=07590935
owner: Microsoft Corporation
number: 07590935
owner_city: Redmond
owner_country: US
publication_date: 20050708
---
Generally the invention relates to dynamic generation of WSDL documents based on database metadata. More particularly the invention relates to methods for generating based on database metadata a WSDL document that describes types and function entry points.

For programs to access services and types that exist on server the services and types must be described in a manner that enables a programmer to write programs to access the services and types. One way to provide such description is to provide printed documentation. Such printed documentation however requires human intervention to interpret the description.

Web Services Description Language WSDL is a standards based document format that allows for machine descriptions of services and types. Such a description can be used directly in a programming environment. Thus in a programming environment on a client for example a programmer can automatically build language bindings to access services on the server.

In WSDL documents types can be described in terms of eXtensible Markup Language XML data types. The services and types that exist on the server which may be a Structured Query Language SQL server for example can be mapped to XML. The types that exist on the client which may be a programming environment such as a C programming environment for example can also be mapped into XML. Thus the server and client can communicate with one another using their respective mappings to XML as translations to and from a common language.

Some server environments map from a programming language environment or domain e.g. C into an XML domain. For example methods for generating WSDL documents from C PERL and other such programming languages are known. There is a need however for defining services provided in a database environment. Thus there is a need for describing database services and types in a WSDL document.

The invention provides a mechanism for querying a database for metadata at runtime in order to satisfy the request for a WSDL document as well as a specific algorithm for coalescing definitions into common XML Schema namespaces. In particular the invention provides methods for generating WSDL documents to describe types and function entry points based on database metadata.

A method according to the invention may include resolving the endpoint metadata by querying based on parameters about the request collected by the HTTP stack. Those skilled in the art will recognize this as being similar to or the same as the mechanisms for supporting virtual hosts or virtual roots for HTTP servers. From the endpoint metadata the list of entry points which have been mapped may be collected. For each entry point attributes about the entry point may be collected and metadata for the types of parameters to the entry point may be looked up.

A first collection of unique XML Schema namespaces may be created with one entry corresponding to each unique XML Schema namespace for any arbitrary user defined XML Schema definitions required by a parameter to an entry point. A second collection of unique XML Schema namespaces may be created with one entry corresponding to each unique XML Schema namespace for an entry point. The wrapper elements for the WSDL document may be emitted. Any global XML Schema definitions may be emitted.

The first collection of unique XML Schema namespaces may be iterated through and the XML Schema definitions may be emitted. The second collection of unique XML Schema namespaces may be iterated through. For each entry point in the second collection the XML Schema definition for the entry point may be emitted including any XML Schema definitions for parameters to the entry point.

After emitting all of the XML Schema definitions the entry points may be iterated through and WSDL document definitions for messages port types and bindings for each entry point may be emitted. After emitting all of the message definitions the WSDL document may be completed by emitting service entry definitions for the endpoint.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation FIG. illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client devices can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Basically a WSDL document defines a web based service. Such a document may provide information necessary for the service to be called and used. Such information may include for example the address of the service names of methods i.e. entry points on the service etc. A typical WSDL document may include type information zero or more entry points service information etc. As shown in database metadata may include a set of configuration information that indicates what the user wants to expose. Such configuration information may include entry points mapping global services options etc. The database may also include type metadata such as name and type information as well as entry point metadata which may include name and parameter information.

At step the list of entry points that have been mapped i.e. configured is collected from the endpoint metadata. Such entry points may include functions or stored procedures for example that may be called as part of the service.

At step for each entry point attributes about the entry point are collected. Such attributes may include for example the name of the end point a URL etc. Metadata for the types of parameters to the entry point is looked up.

At step a first collection of unique XML Schema namespaces is created. The first collection includes one entry corresponding to each unique XML Schema namespace for any arbitrary user defined XML Schema definitions required by a parameter to an entry point. An entry point may have a name. Zero or more parameters may be associated with an entry point. Each parameter may have a name and a type. To call the entry point one needs to know the entry point name and the parameters names and types.

For example consider an entry point named put document. A list of parameters p p may be required to call the entry point. Accordingly the entry point may be called as put document p p . p is parameter name and might be of type nvarchar 256 for example which may be a standard XML type. p is a parameter name and might be of type patentdocument which may be a user defined type. For example a user may define a type patentdocument by providing an XML schema for type patentdocument. According to an aspect of the invention if a number of entry points exist and they refer to a number of user defined types then the user defined types may be collected and grouped by namespace because preferably they are to be emitted by namespace during the generation of the WSDL document. This is a requirement of the semantics of XML Schemas such that all definitions for types within a particular XML namespace must be collected within a single XML Schema definition for that XML namespace. In addition if several entry points all refer to the same user defined type that user defined type may preferably only be emitted once in the WSDL document.

At step a second collection of unique XML Schema namespaces is created with one entry corresponding to each unique XML Schema namespace for an entry point. Again those skilled in the art will recognize that the names of the entry points might have user defined XML namespaces and it will be necessary to group all entry points which are in the same XML namespace into the same XML Schema definition for that namespace.

At step the wrapper elements for the WSDL document are emitted. A standard WSDL document has particular well defined format. For example a standard WSDL document includes a preamble that indicates that the document is a WSDL document. Wrapper elements for example are standard defined generic formats for WSDL documents. It should be understood that the preamble and wrapper elements may be emitted at any time during generation of the WSDL document.

At step any global XML schema definitions are emitted. In certain environments there may be some data structures such as SOAP headers for example that are commonly used. Such data structures might be used anywhere in any request that might be sent back and forth and they are typically independent of any particular request because they might be applied in any request. It should be understood that global XML schema definitions may be emitted at any time during generation of the WSDL document as long as they are placed within the XML schemas section of the WSDL document.

At step the first collection of unique XML schema namespaces are iterated through and the XML schema definitions emitted. For example if a first type e.g. patentdocument is based on a second type e.g. generaldocument then the WSDL document should define type generaldocument before it introduces type patentdocument. Consequently a definition for put document may be emitted first. It should be understood that the XML schemas in the first collection of unique XML schema namespaces might be emitted at any time during the generation of the WSDL document so long as they are placed within the XML schemas section of the WSDL document.

It should be understood that a user can choose fairly arbitrary names. Names have two parts an XML namespace part and a name part. A name may be represented as namespace name where namespace is the XML namespace part and name is the name part. If the user arbitrarily picks the same XML namespace for two types say NS A NS B then the namespaces should be grouped accordingly in the WSDL document. For example namespace NS may be emitted followed by the types for NS. After all the types for NS have been emitted then the next namespace say NS may be emitted followed by the types for NS. All unique namespaces may be identified and all names may be iterated through to find all names that correspond to each namespace.

At step the second collection of unique XML Schema namespaces are iterated through. For each entry point in the collection the XML Schema definition for the entry point may be emitted including any XML Schema definitions for parameters to the entry point. It should be understood that the XML schemas in the second collection of unique XML schema namespaces might be emitted at any time during the generation of the WSDL document so long as they are placed within the XML schemas section of the WSDL document.

At step after emitting all of the XML Schema definitions the entry points may be iterated through. For each entry point WSDL document definitions are emitted for messages port types and bindings which are defined in the WSDL standard and provide everything necessary to define a callable entry point .

After all of the message definitions are emitted the WSDL document may be completed at step by emitting service entry definitions for the endpoint. Such service information may include a name of the service the URL it is at etc. A service may have multiple entry points.

It should be understood that information may be grouped in the WSDL document differently from how it is grouped in the database. For example two services might use the same type and it may be undesirable to emit the same type twice. Also because the database might have multiple copies of type information the data should be inspected in order for a determination to be made that the same type occurs more than once.

Typically the first things that can be resolved are the last things to be written to the WSDL document. Similarly the last things that can be resolved are the first things to be written. For example in WSDL there is a particular order in which one may have to emit all the declarations. In order to use a certain type that type may have to be defined in the document before it is used. Consequently according to an aspect of the invention a workspace may be built and collections created before the data is emitted in the proper order. For example database queries may be run data may be pulled out of the queries and collected in certain ways that enable the document to be generated in order.

By emitting data to generate the WSDL document in the order described herein the document can be generated from top to bottom. Consequently the document may be emitted piecemeal over a network if desired so there is no need to save the whole document in memory and then send over the network. Alternatively the document may be stored and then sent over the network as a whole.

Thus there have been described methods for dynamic generation of WSDL documents based on database metadata that can be used in a programming environment. Any application that wants to invoke entry points on the service can use the document to support the programming environment for writing applications and can use the document as part of generating and processing SOAP messages. Thus a WSDL document may be defined that such an application can use the WSDL document to invoke entry points within the database. Typically though not necessarily such entry points will be programs written by a database administrator.

Though the invention has been described in connection with certain preferred embodiments depicted in the various figures it should be understood that other similar embodiments may be used and that modifications or additions may be made to the described embodiments for practicing the invention without deviating therefrom. The invention therefore should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the following claims.

