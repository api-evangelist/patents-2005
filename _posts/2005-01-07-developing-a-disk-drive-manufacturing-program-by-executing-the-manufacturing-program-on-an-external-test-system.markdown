---

title: Developing a disk drive manufacturing program by executing the manufacturing program on an external test system
abstract: A method of manufacturing a disk drive is disclosed. The disk drive comprising a disk, a head actuated radially over the disk, a host interface for receiving disk commands from a host system, and a semiconductor memory for storing a drive operating program and a manufacturing program. The drive operating program comprising a disk access procedure for processing disk commands and a disk access vector for calling the disk access procedure. During a development stage, the manufacturing program is executed by an external test system that sends disk commands to a development drive. During a manufacturing stage, the manufacturing program is executed internally on each disk drive being manufactured by calling the disk access procedure of the drive operating program through the disk access vector.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07062398&OS=07062398&RS=07062398
owner: Western Digital Technologies, Inc.
number: 07062398
owner_city: Lake Forest
owner_country: US
publication_date: 20050107
---
This application is a divisional of U.S. patent application Ser. No. 10 329 161 filed on Dec. 24 2002 now U.S. Pat. No. 6 996 501 the disclosure of which is incorporated herein by reference.

This application is related to co pending U.S. patent application Ser. No. 10 329 167 entitled A DISK DRIVE EXECUTING A PREEMPTIVE MULTITASKING OPERATING SYSTEM COMPRISING TASKS OF VARYING PRIORITY filed on Dec. 24 2002 co pending U.S. patent application Ser. No. 10 183 207 entitled DISK DRIVE AND METHOD FOR IMPLEMENTING NONSTANDARD DISK DRIVE COMMANDS ON A SERIAL ATA INTERFACE THAT ONLY SUPPORTS STANDARD ATA DISK DRIVE COMMANDS filed on Jun. 26 2002 and co pending U.S. patent application Ser. No. 10 232 638 entitled DISK DRIVE AND METHOD FOR DATA TRANSFER INITIATED BY NONSTANDARD DISK DRIVE COMMANDS ON A SERIAL ATA INTERFACE THAT ONLY SUPPORTS STANDARD ATA DISK DRIVE COMMANDS filed on Aug. 30 2002 the disclosures of which are incorporated herein by reference.

The present invention relates to disk drives. More particularly the present invention relates to developing a disk drive manufacturing program by executing the manufacturing program on an external test system.

A disk drive may be designed to process vendor specific commands VSC used by vendors such as disk drive manufactures to test and configure the disk drive during manufacturing. In the past the manufacturing program was developed using a programming language e.g. assembly C or C and executed by an external test system known as a single plug tester SPT communicating with the disk drive over a host interface. In order to increase the manufacturing throughput the number of SPTs must be increased which is expensive due to the intelligent circuitry employed within each SPT.

U.S. Pat. No. 6 282 501 discloses a disk drive which executes a test program internally thereby avoiding the expense of an external test system. However the test program executed within the disk drive comprises a sequence of standard read write commands similar to the commands sent by a host system. It would be impractical to implement many of the manufacturing programs using read write macros as disclosed by the 501 patent. For example it would be impractical to implement the defect scan which scans the disk for defective sectors and logs pertinent statistical data in an initial burn in IBI log stored in a system file on the disk. The IBI log is then used to create a defect list for mapping defective sectors to spare sectors.

There is therefore a need to execute manufacturing programs for a disk drive while avoiding the expense of external test systems.

The present invention may be regarded as a method of manufacturing a disk drive. The disk drive comprising a disk a head actuated radially over the disk a host interface for receiving disk commands from a host system and a semiconductor memory for storing a drive operating program and a manufacturing program. The manufacturing program comprises platform independent executable code segments and disk access executable code segments. The drive operating program comprising a disk access procedure for processing disk commands and a disk access vector for calling the disk access procedure. The manufacturing program is developed on an external test system by initiating a test program comprising the platform independent executable code segments of the manufacturing program and host interface executable code segments. The external test system executes the platform independent executable code segments and the host interface executable code segments to send disk commands to a development drive. The manufacturing program is executed on the disk drive by executing the platform independent executable code segments of the manufacturing program and executing the disk access executable code segments of the manufacturing program to execute disk commands by calling the disk access procedure of the drive operating program through the disk access vector.

In one embodiment the development drive comprises a disk drive. In an alternative embodiment the development drive comprises a program emulating a disk drive.

In one embodiment the manufacturing program is stored in a non volatile semiconductor memory. In one embodiment the manufacturing program is stored on the disk of the disk drive. In yet another embodiment a host system downloads the manufacturing program to the disk drive. In one embodiment a host system sends a host command to the disk drive to begin executing the manufacturing program. In one embodiment the host system sends at least one input parameter with the host command to the disk drive to begin executing the manufacturing program wherein the manufacturing program is responsive to the at least one input parameter.

In one embodiment the drive operating program transmits a status data structure to the host system the status data structure representing an execution status of the manufacturing program.

In one embodiment a compiler compiles program source code to generate the test program and the manufacturing program. The program source code comprises platform independent source code segments for implementing the platform independent executable code segments. The program source code further comprises host interface source code segments for implementing the host interface executable code segments and disk access source code segments for implementing the disk access executable code segments. The program source code comprises a compiler directive for selecting between the host interface source code segments when compiling the program source code to generate the test program and the disk access source code segments when compiling the program source code to generate the manufacturing program.

In yet another embodiment the drive operating program comprises a preemptive multitasking drive operating program comprising tasks having varying priority levels. The tasks comprising at least a host task for receiving the disk commands from the host system through the host interface a background task for executing the manufacturing program and an execution task for arbitrating and executing disk commands received from the host task and the background task. In one embodiment the execution task gives priority to disk commands received from the host task over disk commands received from the background task.

In yet another embodiment the drive operating program comprises a status update procedure for updating a status data structure associated with the manufacturing program and a status update vector for calling the status update procedure. The manufacturing program updates the status data structure by calling the status update procedure through the status update vector and the status data structure is transmitted to the host system over the host interface.

In another embodiment the drive operating program comprises a suspend for completion procedure for suspending the manufacturing program until the drive operating program finishes processing a current disk command. The drive operating program comprises a suspend for completion vector for calling the suspend for completion procedure. The manufacturing program performs data processing for a previous disk command concurrent with the drive operating program executing the current disk command. After finishing the data processing for the previous disk command the manufacturing program calls the suspend for completion procedure through the suspend for completion vector. When the suspend for completion procedure returns to the manufacturing program the manufacturing program executes a next disk command by calling the disk access procedure of the drive operating program through the disk access vector.

In still another embodiment the manufacturing program comprises a plurality of executable files stored on the disk and a sequence control table comprising control data for selecting and executing the executable files.

In one embodiment the platform independent executable code segments execute a defect scan of the disk maintains statistical data related to the defect scan and stores the statistical data in a disk file. In one embodiment the test program maintains the statistical data related to the defect scan when executed by the external test system and stores the statistical data in a disk file of the development drive whereas the manufacturing program maintains the statistical data related to the defect scan when executed by the disk controller and stores the statistical data in a disk file of the disk drive.

In the embodiment of the development drive is a disk drive comprising a disk a head actuated radially over the disk a disk controller for processing the disk commands received from the external test system over a host interface and a semiconductor memory for storing a drive operating program executed by the disk controller . Any suitable development drive may be employed including a disk drive as illustrated in . In an alternative embodiment the development drive comprises software and or hardware for emulating a disk drive. For example in one embodiment the development drive is implemented as a program running on the external test system which emulates a disk drive.

The disk in the embodiment of comprises a plurality of radially spaced concentric tracks wherein each track comprises a plurality of data sectors and a plurality of embedded servo sectors . The embedded servo sectors comprise head positioning information for positioning the head over a target track.

In one embodiment the manufacturing program is stored in a non volatile semiconductor memory within the disk drive and in another embodiment the manufacturing program is stored on the disk and loaded into the semiconductor memory when executed by the disk controller . The manufacturing program may be installed into the disk drive in any suitable manner including through an interface different from the host interface . In another embodiment the manufacturing program is programmed into a non volatile semiconductor memory which is installed into the disk drive during manufacturing.

In the embodiment of the disk drive is installed into a dumb chamber during the manufacturing process. The dumb chamber provides power to the disk drive over a power interface which allows the disk drive to execute the manufacturing program internally. This avoids using the single plug tester SPT employed in the prior art which requires expensive processing circuitry for executing the manufacturing program and communicating with the disk drive .

The disk drive may initiate the manufacturing program in any suitable manner. In one embodiment a host system sends a host command to the disk drive to begin executing the manufacturing program . In one embodiment the host command includes at least one input parameter for configuring the manufacturing program . In another embodiment the disk drive is configured e.g. using jumpers or by a host system so that during a next power on cycle the manufacturing program is automatically executed.

In the embodiment of the code compiler receives an input parameter for configuring the compiler directive depending on whether the test program or manufacturing program is being generated. When the compiler directive is configured to generate the test program the code compiler compiles the platform independent source code segments into the platform independent executable code segments and compiles the host interface source code segments into the host interface executable code segments . When the compiler directive is configured to generate the manufacturing program the code compiler compiles the platform independent source code segments the into platform independent executable code segments and compiles the disk access source code segments into the disk access executable code segments .

In an alternative embodiment shown in the code compiler compiles drive operating source code to generate the drive operating program and manufacturing source code to generate the manufacturing program . In one embodiment the manufacturing program is developed by downloading and executing the manufacturing program on the disk drive rather than execute the manufacturing program on an external test system as in . In this embodiment the manufacturing source code lacks the host interface code segments of as well as the compiler directives since it is not necessary to compile source code to run on the external test system . As in the embodiments described above in the manufacturing program executes disk commands by calling the disk access procedure of the drive operating program through the disk access vector .

In one embodiment the drive operating program comprises a preemptive multitasking drive operating program comprising tasks having varying priority levels. Referring to in one embodiment the plurality of tasks comprise at least a host task for receiving the disk commands from the host system through the host interface via a host bus interface HBI interrupt request IRQ a background task for executing the manufacturing program and an execution task for arbitrating and executing disk commands received from the host task and the background task . Also in the embodiment shown in the plurality of tasks comprise a disk task for processing disk commands by initiating seek operations and configuring parameters of a read write channel not shown . The disk task is responsive to a data formatter IRQ for configuring disk format parameters associated with a format of the disk including the number and location of defects. A wedge event WE interrupt is generated wherein the disk task is notified when the wedge event interrupt determines a seek operation has completed and the execution task is notified when the wedge event interrupt determines the head has reached a servo wedge associated with a rotational position optimization RPO algorithm. A servo wedge interrupt is generated at each servo wedge for performing time critical servo processing operations. In the embodiment of the servo wedge interrupt interfaces with the disk task through the wedge event interrupt .

The priority level of the tasks shown in are from highest priority on top disk task to lowest priority on the bottom background task . In this manner the execution task gives priority to disk commands received from the host task over disk commands received from the background task . This allows the background task to be interrupted suspended when a host command is received from the host system. After processing the disk command generated by the host task the background task continues the operation it was performing. Further details of a suitable preemptive multitasking drive operating program are disclosed in the above referenced U.S. patent application entitled A DISK DRIVE EXECUTING A PREEMPTIVE MULTITASKING OPERATING SYSTEM COMPRISING TASKS OF VARYING PRIORITY .

The VERSION of the vector table in identifies the version number of the vector table data structure. The INPUT PARAMETER POINTER stores a pointer to a plurality of input parameters described in greater detail below with reference to . The VSC COMMAND REQUEST stores the disk access vector used by the manufacturing program to call the disk access procedure of the drive operating program . The input parameter for the disk access vector is a pointer to a vendor specific command descriptor VSCD described below with reference to . The output parameter for the disk access vector is an error code.

The SUSPEND FOR COMPLETION of the vector table stores a suspend for completion vector used by the manufacturing program to call a suspend for completion procedure of the drive operating program . This embodiment allows the manufacturing program to process data for a previous disk command while the drive operating program executes a current disk command issued by the manufacturing program . When the manufacturing program finishes the data processing for the previous disk command the manufacturing program calls the suspend for completion procedure which does not return until the drive operating program has finished executing the current disk command. When the suspend for completion procedure returns the manufacturing program issues a next disk command to the drive operating program and begins data processing for the previous disk command. In one embodiment an input parameter for the suspend for completion vector is an option to suspend the drive operating program on defect scan data. In this embodiment the suspend for completion procedure does not return to the manufacturing program until the specified defect scan data is available or the drive operating program finishes executing the current disk command.

The PTM STATUS UPDATE of the vector table stores a status update vector used by the manufacturing program to call a status update procedure of the drive operating program for updating a status data structure associated with the manufacturing program . The status data structure is transmitted to a host system over the host interface in response to a VSC status request command received by the drive operating program from the host system. Referring to the embodiment shown in during the manufacturing process the host system sends a VSC status request command to each of the disk drives and each disk drive returns the status data structure.

In one embodiment the manufacturing program comprises a plurality of executable files stored on the disk and a sequence control table SCT storing control data for selecting and executing the executable files. shows an example embodiment of a SCT comprising a plurality of test request blocks TRBs . Each TRB identifies an executable file referred to as a process test module PTM wherein each PTM comprises a plurality of different test functions. In the embodiment of the SCT is stored as a file on the disk and loaded into the semiconductor memory at power on if the disk drive is configured to execute the manufacturing program . The FILE HEADER of the SCT is a standard file header which identifies the SCT file. The TEST POINTER of the SCT identifies the first TRB to execute after the disk drive has been initialized. This facilitates resuming the manufacturing program in the event the disk drive is reset e.g. due to a power failure . The TRB SIZE of the SCT indicates the size of each TRB in bytes which enables the disk controller to delineate the TRBs.

The next entries of the SCT in comprise the TRB data structures. The PTM ID of the TRB identifies the file ID of the PTM associated with the TRB. In this embodiment the PTM comprises a plurality of different test functions and the TEST ID of the TRB identifies which test within the PTM to execute. The INPUT PARAMS of the TRB identify test specific input for the test executed. The FLAGS of the TRB indicate the action taken after completing the test proceed directly to next test or perform a warm start before starting next test . The GOTO ON PASS of the TRB identifies the next TRB to execute if the current test passes. The GOTO ON FAIL of the TRB identifies the next TRB to execute if the current test fails. The GOTO ON TIME of the TRB identifies the next TRB to execute if the current test times out. The TIMER of the TRB indicates the maximum number of seconds before the current test times out. The EXTENDED ERROR CODE of the TRB is the error code returned by the current test. The CURRENT COMMAND of the TRB identifies the last PTM command issued VSC action ATA command or SMART subcommand . The PTM STATUS of the TRB identifies the last status reported by the PTM.

In one embodiment the manufacturing program executes a defect scan of the disk . While executing the defect scan statistical data is compiled and stored in a disk file. In one embodiment the test program running on the external test system of maintains the statistical data related to the defect scan and stores the statistical data in a disk file of the development drive . When the disk controller runs the manufacturing program on the disk drive of the statistical data related to the defect scan is stored in a disk file of the disk drive .

The manufacturing program may implement any suitable operation in addition to the defect scan. The operations may include the following 

Included in the appendix is an example embodiment of program source code for implementing the defect scan operation referred to as ToneScan including the platform independent source code segments host interface source code segments used by the test program to communicate with the development drive of and disk access source code segments used by the manufacturing program to call the disk access procedure of the drive operating program . In the source code the manufacturing program is referred to as a process self test PST . The compiler directive PST MODE is configured by an input parameter to compile the platform independent source code segments and either the host interface source code segments for the test program or the disk access source code segments for the manufacturing program . The statistical data related to the defect scan is written to a disk file via function m clog.Write nHead by executing a VSC command either by the test program running on the external test system through the host interface executable code segments or by the manufacturing program running on the disk drive using the disk access vector to call the disk access procedure of the drive operating program .

