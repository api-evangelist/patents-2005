---

title: Canceling window close commands
abstract: A method, apparatus, system, and signal-bearing medium that, in an embodiment, receive a close command directed to a window, and determine whether the close command was received within a close threshold time of the display of the window. If the close command was received within the threshold time, in various embodiments, a close dialog is displayed, the window is faded, the window is shrunk, or a status message is displayed indicating that the window is closing. If a cancel command is received within a cancel-close threshold, the closing of the window is canceled. If the number of times the cancel command has been received for the window exceeds a cancel threshold, then in various embodiments, the close threshold is increased, magnification is recommended, a sound option is recommended, or speech recognition is recommended. In an embodiment, in response to a close command directed to a window, a determination is made whether the number of times the window has been resized is greater than a resize threshold. If the window has been resized greater than the resize threshold, in various embodiments, the cancel dialog is displayed, the window is faded, the window is shrunk, or a status message is displayed indicating that the window is closing. In another embodiment, if input to a window has been received within an input threshold time since the window was opened, then a confirmation message is displayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07464341&OS=07464341&RS=07464341
owner: International Business Machines Corporation
number: 07464341
owner_city: Armonk
owner_country: US
publication_date: 20050630
---
This invention generally relates to computer systems and more specifically relates to a user interface for closing windows.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely sophisticated devices and computer systems may be found in many different settings. Computer systems typically include a combination of hardware such as semiconductors and circuit boards and software also known as computer programs. As advances in semiconductor processing and computer architecture push the performance of the computer hardware higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

One of the most important developments in making computers not only more powerful but easier to use was the development of sophisticated user interfaces. Early computer systems were programmed with a series of switches or buttons and provided little relevant feedback during the operation of the computer system. This type of interface proved cumbersome and accordingly increasingly more functional and interactive interfaces were developed to extend the functionality of computer systems.

One very popular user interface that ultimately gained widespread adoption on any different computer systems was the command line interface. Using a command line interface the user interacted with the computer system by typing a specific command on a keyboard to instruct the computer regarding the desired operation to be performed. The command line interface was not intuitive however and still limited the use of computers to those who had the time and desire to learn a large number of relatively cryptic commands.

Recognizing the growing need for a more user friendly interface computer engineers and programmers developed the Graphical User Interface GUI . A GUI uses visual representations of common items to allow a user to operate a computer system. In most GUI based systems various windows icons symbols menus etc. are manipulated or activated by a computer user via a pointing device e.g. a keyboard mouse trackball touchpad trackpad or speech recognition device which allows the user to give instructions to the computer. The movement of the pointing device is usually translated to the movement of an animated arrow or cursor displayed on the computer screen. By moving the pointing device the user can position the cursor at various locations on the computer screen. Then by activating a button on the pointing device the user can invoke various commands and options on the graphical user interface.

Most graphical user interfaces make extensive use of windows. A window is usually but not always a rectangular portion of the display on a computer monitor that presents its contents seemingly independently of the rest of the screen. A window is typically manipulated by 1 opening and closing the window e.g. by selecting an icon to start a program 2 moving the window to any area of the screen by dragging e.g. positioning the pointer over the window and moving the mouse or other pointing device with a button held down 3 repositioning the window so that the window appears to be behind or in front of other windows or objects on the screen 4 adjusting the size i.e. horizontal and or vertical dimensions and 5 scrolling to any section of the window contents e.g. by using scroll bars along the bottom and right edges of the window or by using a mouse wheel or keyboard commands.

The size of most windows can be adjusted over a wide range including full screen a fraction of the screen and more than the full screen. In the latter case the desired section of the window can be viewed by moving the window to expose it. Windows can also be minimized which results in their being replaced by an icon and or their name usually in a strip along the bottom of the screen without actually closing the underlying application program. This flexibility is made possible by the various parts that can constitute a window. The parts of a window may include frames vertical and horizontal scrollbars drag strips often along the top for dragging the entire window and along the other edges and lower corners for changing window size buttons for closing maximizing and minimizing and tabs for moving among pages in a window .

Another feature of windows is the ability for multiple windows to be open simultaneously. This is particularly valuable in a multitasking environment i.e. an operating system in which multiple programs can run seemingly simultaneously and without interfering with each other. Each window can display a different application or it can display different files that have been opened or created with a single application.

Multiple open windows can be arranged with respect to each other in a variety of ways. They can be arranged so that they are contiguous and do not overlap tiled windows or so they do overlap overlaid windows . Overlaid windows resemble a stack of documents lying on top of one another with only the upper most window displayed in full. Any window can be moved to the top of the stack and made the active window i.e. ready for receiving user input by positioning the pointer in any portion of it that is visible and clicking a mouse button. When applications are launched they may open in a single window or multiple windows.

Various type of windows exist and their functions and appearances can vary substantially. For example child windows are windows that are opened either automatically or as a result of some user activity when using a parent window. They can range in functionality from the very simple to the full complement of controls. Message windows also referred to as dialog boxes or pop up messages are a type of child window. A dialog box is usually a small and very basic window that is opened by a program or by the operating system to provide information to the user and or obtain information or at least a response from the user including setting options or issuing commands.

Because the screen may contain so many windows and because some windows may pop up or open unexpectedly users are at risk for commands being carried out against unintended windows. For example if the user issues a close command intended for a first window at approximately the same time that a second window unexpectedly pops up opens or launches the close command may be unintentionally applied to the second window. If the user is watching carefully the user might see a flicker of the second window before it closes but the user might miss the second window entirely. The missed window might be an important calendar reminder for a meeting or an urgent instant message from a supervisor a customer a coworker or a family member and the consequences of missing the window that was unintentionally closed might be severe.

Thus there is a need for a better way to ensure that commands are applied against the intended window.

A method apparatus system and signal bearing medium are provided that in an embodiment receive a close command directed to a window and determine whether the close command was received within a close threshold time of the display of the window. If the close command was received within the threshold time in various embodiments a close dialog is displayed the window is faded the window is shrunk or a status message is displayed indicating that the window is closing. If a cancel command is received within a cancel close threshold the closing of the window is canceled. If the number of times the cancel command has been received for the window exceeds a cancel threshold then in various embodiments the close threshold is increased magnification is recommended a sound option is recommended or speech recognition is recommended. In an embodiment in response to a close command directed to a window a determination is made whether the number of times the window has been resized is greater than a resize threshold. If the window has been resized greater than the resize threshold in various embodiments the cancel dialog is displayed the window is faded the window is shrunk or a status message is displayed indicating that the window is closing. In another embodiment if input to a window has been received within an input threshold time since the window was opened then a confirmation message is displayed. In this way the user may be aided in sending commands or entering data to the intended window.

It is to be noted however that the appended drawings illustrate only example embodiments of the invention and are therefore not considered limiting of its scope for the invention may admit to other equally effective embodiments.

Referring to the Drawings wherein like numbers denote like parts throughout the several views depicts a high level block diagram representation of a computer system connected via a network to servers according to an embodiment of the present invention. The terms computer and server are used for convenience only and an electronic device that acts as a server in one embodiment may act as a client in another embodiment and vice versa. In an embodiment the hardware components of the computer system may be implemented by an eServer iSeries computer system available from International Business Machines of Armonk N.Y. However those skilled in the art will appreciate that the mechanisms and apparatus of embodiments of the present invention apply equally to any appropriate computing system.

The major components of the computer system include one or more processors a main memory a terminal interface a storage interface an I O Input Output device interface and communications network interfaces all of which are coupled for inter component communication via a memory bus an I O bus and an I O bus interface unit .

The computer system contains one or more general purpose programmable central processing units CPUs A B C and D herein generically referred to as the processor . In an embodiment the computer system contains multiple processors typical of a relatively large system however in another embodiment the computer system may alternatively be a single CPU system. Each processor executes instructions stored in the main memory and may include one or more levels of on board cache.

The main memory is a random access semiconductor memory for storing data and programs. In another embodiment the main memory represents the entire virtual memory of the computer system and may also include the virtual memory of other computer systems coupled to the computer system or connected via the network . The main memory is conceptually a single monolithic entity but in other embodiments the main memory is a more complex arrangement such as a hierarchy of caches and other memory devices. For example the main memory may exist in multiple levels of caches and these caches may be further divided by function so that one cache holds instructions while another holds non instruction data which is used by the processor or processors. The main memory may be further distributed and associated with different CPUs or sets of CPUs as is known in any of various so called non uniform memory access NUMA computer architectures.

The main memory includes a window controller window data and applications . Although the window controller the window data and the applications are illustrated as being contained within the memory in the computer system in other embodiments some or all of them may be on different computer systems for example the servers and may be accessed remotely e.g. via the network . The computer system may use virtual addressing mechanisms that allow the programs of the computer system to behave as if they only have access to a large single storage entity instead of access to multiple smaller storage entities. Thus while the window controller the window data and the applications are illustrated as being contained within the main memory these elements are not necessarily all completely contained in the same storage device at the same time. Further although the window controller the window data and the applications are illustrated as being separate entities in other embodiments some of them or portions of some of them may be packaged together.

The window controller manipulates the closing of displayed windows associated with the applications via the window data . In various embodiments the window controller may be an operating system a portion of an operating system an application an application programming interface API a browser a browser plug in or any other appropriate function. The window controller includes instructions capable of executing on the processor or statements capable of being interpreted by instructions executing on the processor to perform the functions as further described below with reference to and . In another embodiment the window controller may be implemented in microcode or firmware. In another embodiment the window controller may be implemented in hardware via logic gates and or other appropriate hardware techniques in lieu of or in addition to a processor based system. The window data is further described below with reference to . The applications may be any executable or interpretable code or statements or hardware logic capable of requesting the display of windows including but not limited to an operating system a user application or a third party application.

The memory bus provides a data communication path for transferring data among the processor the main memory and the I O bus interface unit . The I O bus interface unit is further coupled to the system I O bus for transferring data to and from the various I O units. The I O bus interface unit communicates with multiple I O interface units and which are also known as I O processors IOPs or I O adapters IOAs through the system I O bus . The system I O bus may be e.g. an industry standard PCI bus or any other appropriate bus technology.

The I O interface units support communication with a variety of storage and I O devices. For example the terminal interface unit supports the attachment of one or more user terminals and . The storage interface unit supports the attachment of one or more direct access storage devices DASD and which are typically rotating magnetic disk drive storage devices although they could alternatively be other devices including arrays of disk drives configured to appear as a single large storage device to a host . The contents of the main memory may be stored to and retrieved from the direct access storage devices and as needed.

The I O and other device interface provides an interface to any of various other input output devices or devices of other types. Two such devices the printer and the fax machine are shown in the exemplary embodiment of but in other embodiment many other such devices may exist which may be of differing types. The network interface provides one or more communications paths from the computer system to other digital devices and computer systems such paths may include e.g. one or more networks .

Although the memory bus is shown in as a relatively simple single bus structure providing a direct communication path among the processors the main memory and the I O bus interface in fact the memory bus may comprise multiple different buses or communication paths which may be arranged in any of various forms such as point to point links in hierarchical star or web configurations multiple hierarchical buses parallel and redundant paths or any other appropriate type of configuration. Furthermore while the I O bus interface and the I O bus are shown as single respective units the computer system may in fact contain multiple I O bus interface units and or multiple I O buses . While multiple I O interface units are shown which separate the system I O bus from various communications paths running to the various I O devices in other embodiments some or all of the I O devices are connected directly to one or more system I O buses.

The computer system depicted in has multiple attached terminals and such as might be typical of a multi user mainframe computer system. Typically in such a case the actual number of attached devices is greater than those shown in although the present invention is not limited to systems of any particular size. The computer system may alternatively be a single user system typically containing only a single user display and keyboard input or might be a server or similar device which has little or no direct user interface but receives requests from other computer systems clients . In other embodiments the computer system may be implemented as a personal computer portable computer laptop or notebook computer PDA Personal Digital Assistant tablet computer pocket computer telephone pager automobile teleconferencing system appliance or any other appropriate type of electronic device.

The network may be any suitable network or combination of networks and may support any appropriate protocol suitable for communication of data and or code to from the computer system . In various embodiments the network may represent a storage device or a combination of storage devices either connected directly or indirectly to the computer system . In an embodiment the network may support Infiniband. In another embodiment the network may support wireless communications. In another embodiment the network may support hard wired communications such as a telephone line or cable. In another embodiment the network may support the Ethernet IEEE Institute of Electrical and Electronics Engineers 802.3x specification. In another embodiment the network may be the Internet and may support IP Internet Protocol .

In another embodiment the network may be a local area network LAN or a wide area network WAN . In another embodiment the network may be a hotspot service provider network. In another embodiment the network may be an intranet. In another embodiment the network may be a GPRS General Packet Radio Service network. In another embodiment the network may be a FRS Family Radio Service network. In another embodiment the network may be any appropriate cellular data network or cell based radio network technology. In another embodiment the network may be an IEEE 802.11B wireless network. In still another embodiment the network may be any suitable network or combination of networks. Although one network is shown in other embodiments any number including zero of networks of the same or different types may be present.

The servers may include some or all of the hardware and or software elements previously described above for the computer system . In another embodiment the servers are optional not present or not used.

It should be understood that is intended to depict the representative major components of the computer system the network and the servers at a high level that individual components may have greater complexity than represented in that components other than or in addition to those shown in may be present and that the number type and configuration of such components may vary. Several particular examples of such additional complexity or additional variations are disclosed herein it being understood that these are by way of example only and are not necessarily the only such variations.

The various software components illustrated in and implementing various embodiments of the invention may be implemented in a number of manners including using various computer software applications routines components programs objects modules data structures etc. referred to hereinafter as computer programs or simply programs. The computer programs typically comprise one or more instructions that are resident at various times in various memory and storage devices in the computer system and that when read and executed by one or more processors in the computer system cause the computer system to perform the steps necessary to execute steps or elements comprising the various aspects of an embodiment of the invention.

Moreover while embodiments of the invention have and hereinafter will be described in the context of fully functioning computer systems the various embodiments of the invention are capable of being distributed as a program product in a variety of forms and the invention applies equally regardless of the particular type of signal bearing medium used to actually carry out the distribution. The programs defining the functions of this embodiment may be delivered to the computer system via a variety of tangible signal bearing media which include but are not limited to the following computer readable media 

 1 information permanently stored on a non rewriteable storage medium e.g. a read only memory storage device attached to or within a computer system such as a CD ROM DVD R or DVD R 

 2 alterable information stored on a rewriteable storage medium e.g. a hard disk drive e.g. the DASD or CD RW DVD RW DVD RW DVD RAM or diskette or

 3 information conveyed by a communications or transmissions medium such as through a computer or a telephone network e.g. the network .

Such tangible signal bearing media when carrying or encoded with computer readable processor readable or machine readable instructions that direct the functions of the present invention represent embodiments of the present invention.

Embodiments of the present invention may also be delivered as part of a service engagement with a client corporation nonprofit organization government entity internal organizational structure or the like. Aspects of these embodiments may include configuring a computer system to perform and deploying software systems and web services that implement some or all of the methods described herein. Aspects of these embodiments may also include analyzing the client company creating recommendations responsive to the analysis generating software to implement portions of the recommendations integrating the software into existing processes and infrastructure metering use of the methods and systems described herein allocating expenses to users and billing users for their use of these methods and systems.

In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. But any particular program nomenclature that follows is used merely for convenience and thus embodiments of the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The exemplary environments illustrated in are not intended to limit the present invention. Indeed other alternative hardware and or software environments may be used without departing from the scope of the invention.

In an embodiment the window controller displays the cancel close dialog in response to receipt of a close command within a threshold amount of time from the display of the window to which the close command was directed. The window controller also may display the cancel close dialog in response to the window being resized a number of times that exceeds a resize threshold as further described below with reference to . A window may be requested to be resized via selection of the resize icon via grabbing and dragging a corner or border of the window with a pointing device via double clicking within the window header or via any other appropriate resizing technique. In various other embodiments the window controller may shrink or fade the window in response to receipt of a close command within a threshold amount of time from the display of the window . The shrinking or fading may be in lieu of the cancel close dialog or in addition to the cancel close dialog . In another embodiment the window controller may shrink or fade the window in response to the window being resized a number of times that exceeds a resize threshold. The window controller shrinks the window by reducing its size over time. The window controller fades the window by reducing its intensity over time so that any windows or other objects behind the window become visible over time.

The cancel close dialog gives the user the opportunity to request e.g. via the yes option that the close operation directed to the associated window be canceled. In another embodiment the user may request that the close operation to be canceled via selecting the window clicking in the window clicking and holding in the window double clicking in the window or any other selection mechanism as the window is fading or shrinking away and before the window totally closes or disappears. In various embodiments in response to the cancel close command request the window controller stops the close operation and stops the fading or shrinking of the window .

The user interface elements windows arrangement of windows and data illustrated in and are examples only and in other embodiments any number and type of user interface elements windows arrangement of windows and data may be used.

The window identifier identifies a window such as the window or . The close threshold time indicates a threshold amount of time following opening of the window with respect to the occurrence of a close window command. The input threshold time indicates a threshold amount of time following opening of the window with respect to inputting data to the window.

The resize threshold indicates a threshold value of the number of times the window has been resized such as minimized maximized stretched reduced or otherwise had its dimensions changed. The resize count indicates a current count of the number of times that the window has been resized. The window controller compares the resize count against the resize threshold as further described below with reference to .

The cancel threshold indicates a threshold number of times that a close operation directed to the window has been canceled. The cancel count indicates a current number of times that a close operation directed to the window has been canceled. The window controller compares the cancel count against the cancel threshold as further described below with reference to .

The cancel close high threshold field indicates a high threshold value to be used with a timer that represents a long time period during which the user has the opportunity to request canceling the closing of a window via a cancel close command. The cancel close high threshold field is used by the window controller to give the user a longer time longer than the cancel close low threshold to cancel the closing of the window in scenarios when the likelihood is higher that the user will want to cancel the close. Such example scenarios include the window being closed has been open for a shorter amount of time the close command was received within the close threshold or the user has previously resized this window many times the resize count exceeds the resize threshold .

The cancel close low threshold field indicates a low threshold value to be used with a timer that represents a short time period during which the user has the opportunity to request canceling the closing of a window via a cancel close command. The cancel close low threshold field is used by the window controller to give the user a shorter time shorter than the cancel close high threshold to cancel the closing of the window in scenarios when the likelihood is lower that the user will want to cancel the close. An example scenario includes the window being closed has been open for a long amount of time the close command was not received within the close threshold and the user has previously resized this window a small number of times the resize count is less than or equal to the resize threshold . By selecting between the cancel close high threshold and the cancel close low threshold the window controller selects the cancel close threshold to use based on a likelihood that the cancel command will be received.

Although the window data indicates separate records for each of the windows with separate thresholds and counts in other embodiments some or all of the windows may share thresholds and or counts.

If the determination of block is true then the close window command was received within the close threshold time of the display of the window so control continues to block where the window controller initializes a timer to the value of the cancel close high threshold . The window controller uses the cancel close high threshold as opposed to the cancel close low threshold at block to give the user a longer time to send the cancel command because the likelihood is higher at this point that the cancel command will be received since the close was received within the close threshold or the resize count exceeds the resize threshold .

Control then continues to block where the window controller fades the window shrinks the window or displays the status message . Control then continues to block where the window controller optionally displays the cancel close dialog offering to cancel the closing of the window. Control then continues to block where the window controller determines whether a cancel close command in response to the cancel close dialog or by selection of a shrinking window fading window or window with the status message has been received prior to the expiration of the timer previously initialized at block or block . If the determination of block is true then the cancel close command has been received before expiration of the timer so control continues to block where the window controller processes the cancel close command as further described below with reference to . Control then continues to block where the logic of returns.

If the determination of block is false then the cancel close command was not received before expiration of the timer so control continues from block to block where the window controller closes the window. Control then continues to block where the logic of returns.

If the determination of block is false then the close window command was not received within the close threshold time of the window opening activation or display so control continues from block to block where the window controller determines whether the resize count exceeds the resize threshold . If the determination of block is true then the resize count does exceed the resize threshold so control continues to block as previously described above.

If the determination of block is false then the resize count does not exceed the resize threshold so control continues from block to block where the window controller sets a timer to the value of the cancel close low threshold . The window controller uses the cancel close low threshold as opposed to the cancel close high threshold at block to give the user a shorter amount of time to send the cancel command because the likelihood is lower at this point that the cancel command will be received since the close was not received within the close threshold and the resize count does not exceed the resize threshold . Control then continues to block as previously described above.

If the determination of block is false then a close window command was not received so control continues from block to block where the window controller processes other commands as further described below with reference to . Control then continues to block where the logic of returns.

If the determination of block is false then the cancel count does not exceed the cancel threshold so control continues from block to block where the logic of returns.

If the determination of block is false then a resize command has not been received so control continues from block to block where the window controller determines whether input to the window was received within the input threshold time since the window was opened.

If the determination of block is true then input to the window was received within the input threshold time since the window was opened so control continues from block to block where the window controller displays the input confirmation message . Control then continues to block where the logic of returns.

If the determination at block is false then input to the window was not received within the input threshold time since the window was opened so control continues to block where the window controller processes other commands. Control then continues to block where the logic of returns.

In the previous detailed description of exemplary embodiments of the invention reference was made to the accompanying drawings where like numbers represent like elements which form a part hereof and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments were described in sufficient detail to enable those skilled in the art to practice the invention but other embodiments may be utilized and logical mechanical electrical and other changes may be made without departing from the scope of the present invention. Different instances of the word embodiment as used within this specification do not necessarily refer to the same embodiment but they may. The previous detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

In the previous description numerous specific details were set forth to provide a thorough understanding of embodiments of the invention. But the invention may be practiced without these specific details. In other instances well known circuits structures and techniques have not been shown in detail in order not to obscure the invention.

