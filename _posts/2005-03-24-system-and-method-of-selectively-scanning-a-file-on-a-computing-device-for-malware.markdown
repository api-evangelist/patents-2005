---

title: System and method of selectively scanning a file on a computing device for malware
abstract: In accordance with this invention, a system, method, and computer-readable medium that selectively scans files stored on a computing device for malware is provided. One or more files may be sent from a trusted source to a computing device that implements the present invention. The integrity of the files that originate from a trusted source is validated using a signature-based hashing function. Any modifications made to files stored on the computing device are tracked by a component of the operating system. In instances when the file is not modified after being validated, an aspect of the present invention prevents the file from being scanned for malware when a scanning event is directed to the file. As a result, the performance of the computing device is improved as static files from trusted sources are not repeatedly scanned for malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07676845&OS=07676845&RS=07676845
owner: Microsoft Corporation
number: 07676845
owner_city: Redmond
owner_country: US
publication_date: 20050324
---
The present invention relates to computing devices and more particularly to selectively scanning files stored on a computing device for malware.

As more and more computers and other computing devices are interconnected through various networks such as the Internet computer security has become increasingly more important particularly from invasions or attacks delivered over a network or over an information stream. As those skilled in the art and others will recognize these attacks come in many different forms including but certainly not limited to computer viruses computer worms system component replacements denial of service attacks even misuse abuse of legitimate computer system features all of which exploit one or more computer system vulnerabilities for illegitimate purposes. While those skilled in the art will recognize that the various computer attacks are technically distinct from one another for purposes of the present invention and for simplicity in description all malicious computer programs that spread on computer networks such as the Internet will be generally referred to hereinafter as computer malware or more simply malware.

When a computer system is attacked or infected by computer malware the adverse results are varied including disabling system devices erasing or corrupting firmware applications or data files transmitting potentially sensitive data to another location on the network shutting down the computer system or causing the computer system to crash. Yet another pernicious aspect of many though not all computer malware is that an infected computer system is used to infect other computer systems that are communicatively connected by a network connection.

A traditional defense against computer malware and particularly against computer viruses and worms is antivirus software that is available from several software vendors. Most antivirus software identifies malware by matching patterns within data to what is referred to as a signature of the malware. Typically antivirus software scans for malware signatures when certain events are scheduled to occur such as when data is going to be written or read from an input output I O device. As known to those skilled in the art and others computer users have ongoing needs to read and write data to I O devices such as hard drives floppy disks compact disks CDs etc. For example a common operation provided by some software applications is to open a file stored on an I O device and display the contents of the file on a computer display. However since opening a file may cause malware associated with the file to be executed antivirus software typically performs a scan or other analysis of the file before the open operation is satisfied. If malware is detected the antivirus software that performed the scan may prevent the malware from being executed for example by causing the open operation to fail.

Typically when a new malware is identified software vendors provide a software update to antivirus software that contains a signature of the new malware. When the update is installed the antivirus software is able to identify the new malware. However existing systems are unable to easily determine if files on the computing device are capable of being infected with the new malware. Instead every file on a computing device will typically be scanned when a previously unknown malware signature becomes available. Those skilled in the art and others will recognize that scanning a file for malware is a resource intensive process. As a result the performance of the computing device may suffer when new malware is released on a communication network.

One proposed technique for preventing duplicative scans for malware is to categorize files on a computing device as either originating from trusted or untrusted sources. In this example files from an untrusted source will be scanned every time a software update that contains a new malware signature is provided. However files from trusted sources may not be scanned for malware if the integrity of the files can be verified. For example a trusted source may provide a representation of a file that was processed with a function such as a hashing algorithm. Antivirus software may use the processed representation of the file to determine if the file was modified after the file was received from the trusted source. In instances when a file was not modified a scan of the file is not performed. However the method currently used to determine whether the file was modified after being received from the trusted source includes comparing the processed representation of the file received from a trusted source to a newly computed representation of the file. In instances when the two processed representations of the files match then the file was not modified after being received from the trusted source. Thus for example each time a new signature is received the antivirus software would be required to process the representation of the file on the computing device with the same function used by the trusted source. Then the two processed representations of the file would be compared. In this example the computational resources required to determine whether the file is still trusted before scanning the file is roughly equivalent the resources required to simply perform an antivirus detection scan on the file. Therefore the performance of the computing device is not significantly improved if the technique described above is implemented.

The present invention addresses the above identified needs by providing a system method and computer readable medium for selectively scanning files on a computing device for malware. In general terms describing one aspect of the present invention a file is received at a computing device that implements the present invention from a trusted source such as an operating system provider or authoritative application provider. At the time the file is received an integrity check is performed on the file that insures the file received corresponds positively to the representation of the file maintained by the trusted source thereby validating the integrity of the file. More specifically a unique signature of the file is generated and compared to a signature of the file that was generated by the trusted source. If the integrity of the file is validated as originating from the trusted source an aspect of the present invention prevents the file from being scanned for malware when a scanning event is directed to the file. In addition after the file is received and validated any changes made to the file are tracked by a component of the operating system. A new integrity check will not be performed so long as this component of the operating system determines that the contents of the file have not been modified. As a result the performance of the computing device is improved as files received from a trusted source that are not modified by a third party after being received from the trusted source are not revalidated as originating from the trusted source unless a positive indicator is received from the operating system that the file was modified.

In another aspect of the present invention a software system that improves the performance of a computing device by selectively scanning files for malware is provided. In an exemplary embodiment the software system includes an integrity table for associating a file received from a trusted source with data indicative of whether the file was modified after being received from the trusted source. Also the software system includes a file validation application that updates the integrity table when a file from a trusted source is modified. For example when a trusted source such as an application program provider installs a software update on a computer one or more files associated with the software update will be revalidated as originating from the trusted source. In this instance when installation of the software update is scheduled to occur the file validation application may cause an integrity check on files associated with the software update that determines whether the contents of the files are still from the trusted source. In this embodiment of the present invention the software system also includes a selective scan module configured to query the integrity table and determine whether a file that is the object of a scan event needs to be scanned for malware.

In still another embodiment a computer readable medium is provided with contents i.e. a program that causes a computer to operate in accordance with the methods described herein.

In accordance with this invention a system method and computer readable medium that selectively scans files stored on a computing device for malware is provided. One or more files may be sent from a trusted source to a computing device that implements the present invention. Any changes made to files stored on the computing device are tracked by a component of the operating system. When a scan event is directed to a file from a trusted source the integrity of the file may be validated as originating from the trusted source through a computer implemented comparison. The comparison determines whether the integrity of the file was previously validated as originating from a trusted source by performing a lookup in an integrity table. In instances when the file was not previously validated an integrity check is performed to insure that the file originated from a trusted source. If the integrity of the file is validated an aspect of the present invention prevents the file from being scanned for malware. As a result the performance of the computing device is improved as files from trusted sources that are not modified are not scanned for malware or revalidated as originating from the trusted source.

Although the present invention will primarily be described in the context of reducing the number of files that are scanned for malware in an antivirus system those skilled in the relevant art and others will appreciate that the present invention is also applicable to other areas than those described. The following description first provides an overview of a system in which the present invention may be implemented. Then applications and program modules that implement the present invention are described. The illustrative examples provided herein are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Similarly any steps described herein may be interchangeable with other steps or combinations of steps in order to achieve the same result.

Referring now to the following is intended to provide an exemplary overview of one suitable computing device in which aspects of the present invention may be implemented. The computing device may be any one of a variety of devices including but not limited to personal computing devices server based computing devices personal digital assistants cellular telephones other electronic devices having some type of memory and the like. For ease of illustration and because it is not important for an understanding of the present invention does not show the typical components of many computing devices such as a CPU keyboard a mouse a printer or other I O devices a display etc. However the computing device depicted in does include an operating system an I O device and an antivirus system . As further illustrated in the antivirus system is comprised of several components including but not limited to a validation application an integrity table a selective scan module and a scan engine . Collectively aspects of the present invention implemented in the operating system and the antivirus system provide a way to identify files from trusted sources that do not need to be scanned for malware.

As illustrated in the computing device stores an operating system for controlling the general operation of the computing device and providing services and resources requested by application programs. The operating system may be a general purpose operating system that is commercially available such as a Microsoft operating system UNIX operating system or Linux operating system. As known to those skilled in the art and others a general purpose operating system performs basic tasks such as managing the I O of a computing device and tracking data stored in memory. For example an application program may make a request to the operating system in order to write data to the I O device . Generally described the I O device may be a local hardware device such as a hard drive floppy disk flash memory tape drive compact disk CD etc. Alternatively the I O device may be a remote hardware device connected to the computing device through a network connection. In any event the operating system manages the communication of data between I O devices and application programs. Also in one embodiment of the present invention the operating system provides services to components of the antivirus system . For example the operating system may be configured to track changes if any made to a file stored on the I O device . As described in further detail below aspects of the present invention may use these types of services provided by the operating system to determine if the file needs to be scanned for malware or validated as originating from a trusted source.

As illustrated in the antivirus system includes a scan engine designed to detect malware from file data. Many different software vendors include a scan engine or equivalent mechanism in antivirus software that is designed to identify data characteristic of malware. One known technique employed by some existing antivirus software for identifying malware includes obtaining a copy of the malware in the wild. Then program code that implements the malware is processed with a function that converts the program code into a signature that may be used to uniquely identify the malware. Then in response to an event such as an I O request the scan engine searches data associated with the request for any known malware signatures. The scan engine illustrated in may employ this known technique to scan file data for a malware signature. However the scan engine may be configured to perform additional types of analysis in order to determine if a file is infected with malware. For example some antivirus software emulates program execution to detect behaviors that are characteristic of malware. Also increasingly heuristic techniques are being used to detect malware. In any event it should be well understood that any of these and other malware detection techniques not described herein may be implemented in the scan engine .

The present invention is designed to allow the antivirus system to execute more efficiently by reducing the number of files that need to be scanned for malware or validated as originating from a trusted source. Aspects of the present invention will typically be implemented in one or more components of the antivirus system such as in the validation application and the selective scan module .

As described in further detail below with reference to the validation application is configured to begin when a file is received from a trusted source. Then an integrity check is performed on the file that determines whether the contents of the file have been modified by a third party. After the initial integrity check the validation application adds an entry for the file in the integrity table . Generally described the integrity table stores information about each file on the computing device that was received from a trusted source. More specifically each file in the table is associated with a variable that is indicative of whether the contents of the file have been successfully validated as originating from the trusted source.

The validation application is responsible for keeping the integrity table up to date. For example when a software update that contains a new malware signature is received the validation application uses time stamps in the integrity table to identify files received from a trusted source that were modified since their most recent integrity check. For example after the new malware signature is received another integrity check is performed on files that were modified since the previous integrity check to determine if the modification originated from the trusted source. Then an entry in the integrity table is updated with the results of this most recent integrity check.

As described in further detail below with reference to the selective scan module prevents unnecessary scans of files from being performed when a scan event occurs. More specifically the selective scan module prevents a file that originated from a trusted source that has not been modified by a third party from being scanned for malware or re validated as originating from a trusted source. In summary when a scan event directed to a file occurs the selective scan module determines if the file is from a trusted source. In instances when the file is not from a trusted source the file will be scanned for malware. However in instances when the file is from a trusted source a lookup of the file s entry in the integrity table is performed. Data in the integrity table is used to determine whether the file was modified since the file s most recent integrity check. If the file was not modified a scan of the file is not performed. Conversely if the file was modified the selective scan module may cause an integrity check and or a scan for malware to be performed on the file.

As mentioned previously the performance of the computing device is improved if the number of files scanned for malware is reduced. Aspects of the present invention are able to significantly reduce the number of files scanned for malware thereby allowing system resources to be allocated to other processes. Those skilled in the art and others will recognize that most files stored on a computing device consist of software routines that implement the functionality of an operating system or application program. Typically the data in these types of files remains static because application programs and operating systems are updated infrequently. Thus a high percentage of files on a computing device may be bypassed by an antivirus system when a scan event occurs.

As illustrated in some of the components included in the computing device e.g. the operating system I O device and antivirus system are communicatively connected. For example the antivirus system is able to make requests to the operating system and have those requests satisfied. Also as illustrated in the operating system manages the storage and data on the I O device . As known to those skilled in the art and others is a simplified example of one computing device capable of performing the functions of the present invention. Actual embodiments of the computing device will have additional components not illustrated in or described in the accompanying text. Also depicts one component architecture for the antivirus system but other component architectures are possible.

Now with reference to a flow diagram that illustrates one exemplary embodiment of the validation application will be described. In one embodiment data identified by the validation application is stored in a data structure e.g. the integrity table . The data is then used by the selective scan module described below with reference to to identify files received from a trusted source which do not need to be scanned for malware. With continuing reference to and the accompanying description an exemplary validation application illustrated in will now be described.

As illustrated in the validation application remains idle at block until a file is received from a trusted source at a computing device that implements the present invention. As mentioned previously a trusted source may be an application program provider an operating system provider or any other entity that does not distribute malware. In one embodiment of the present invention the trusted source also provides validation data when a file is transmitted to a computing device that implements the present invention. For example files that implement the functionality of an operating system may be processed with a function that generates validation data. The validation data is a signature that uniquely identifies the file and may be used to determine if the file has been modified. Those skilled in the art and others will recognize that a number of widely available hashing algorithms may be used by the trusted source to generate validation data. For example the secure hashing algorithm commonly known as SHA 1 may be used to generate the validation data. In any event files that implement the functionality of the operating system are processed with the hashing algorithm and stored in a central database that is maintained by the operating system provider hereinafter referred to as the catalog database . Typically validation data stored in the catalog database is protected so that modifications to operating systems files may be identified.

At block the validation application performs an integrity check on the file received at block . More specifically at block the file is processed with the same function that was used by the trusted source to generate the validation data. For example if the trusted source used the SHA 1 hashing algorithm to generate the validation data the same function is applied to the file at block . Then the data generated by the hashing algorithm is compared to the validation data that was received from the trusted source. If the validation data associated with the file matches that data generated by applying the hashing algorithm to the file at block then the file has not been modified since being received from the trusted source. Conversely if the data does not match the file was modified and has the potential to be infected with malware.

As illustrated in at block the validation application adds an entry to the integrity table for the file received at block . As mentioned previously the integrity table stores information about each file that was received from a trusted source on the computing device . Also each file with an entry in the integrity table is associated with a variable that is indicative of whether the contents of the file were successfully validated as originating from a trusted source.

For illustrative purposes and by way of example only a representative integrity table is illustrated in . The integrity table consists of three columns each of which contains multiple entries. The columns are identified as FILEID VALIDATED and TIME STAMP . The FILEID column contains a unique identifier for each file that is received from a trusted source and stored on a computing device. Those skilled in the art will recognize that existing systems that manage the storage of data in a file system assign a unique identifier to files stored on a computing device that may be obtained and inserted into the integrity table . The VALIDATED column stores a value that identifies the state of the file. For example the VALIDATED column contains a value that is either a 0 or a 1. In one embodiment of the present invention if the VALIDATED column contains a 1 then the associated file was validated as originating from a trusted source. Alternatively if the VALIDATED column contains a 0 then the file was not validated as originating from a trusted source. Also the TIME STAMP column contains a value indicative of the last time e.g. month day year etc. an attempt to validate the file occurred. As described in more detail below the TIME STAMP column may be used to determine whether the contents of a file have change since last being validated. It should be well understood that typically the integrity table will be cached in an area of memory designed for fast access. However changes made to the integrity table will be written back to nonvolatile memory so that the changes will persist through a reboot of a computing device.

Returning to the validation application illustrated in at decision block the application remains idle until a new malware signature is received at a computing device that implements the present invention. When a new malware begins spreading on a communication network software vendors typically provide an update to antivirus systems so that the new malware may be identified. In the prior art when a new malware signature was received each file on a computing device was considered to be potentially infected with the malware. As a result data associated with a file previously identified as being free from a malware infection was changed so that the file would be scanned for malware when a scan event was directed to the file. In accordance with one aspect of the present invention a file from a trusted source that is not modified is not scanned for malware when an antivirus system is updated to identify the new malware.

In one embodiment of the present invention software updates that contain signatures of new malware are automatically obtained from a download center. In this instance a software update may be obtained at regular intervals or whenever the new software update becomes available. Also a software update that contains a new malware signature may be obtained manually. For example a user may determine that a computing device is vulnerable to a malware infection and download a software update that is published on a Web site. However those skilled in the art and others will recognize that a new malware signature may be received in different contexts than those described above. Thus the examples provided above that describe specific ways in which a malware signature may be received should be construed as exemplary and not limiting.

At block the validation application selects a file received from a trusted source that maintains in entry in the integrity table . When a new malware signature is received the validation application causes data in the integrity table to be updated. By updating the integrity table in this instance the validation application minimizes the computational resources required to scan for malware when a scan event is directed to a file from a trusted source. Since a file that maintains an entry in the integrity table may be selected using techniques generally known in the art the technique used at block will not be described in further detail here.

As illustrated in at decision block the validation application determines whether the selected file was modified since the file s most recent integrity check. If the file was modified the validation application proceeds to block . Conversely if the file was not modified the validation application proceeds to block described below. The determination of whether a file was modified may be performed using a number of different techniques of which the following are only examples.

In one embodiment of the present invention a component of the operating system that tracks changes made to an I O device is used to determine if the selected file was modified since the file s most recent integrity check. For example some operating systems provide a shadow copy service designed to reconstruct previous versions of a file or an entire volume e.g. a logical collection of files . More specifically at a configurable interval a shadow copy service takes a snapshot of a selected file. In order to reduce the amount of data required to reconstruct a previous version of the file the shadow copy service stores information about changes made to the file. Stated differently each saved version of a file is not maintained by the shadow copy service. Instead if a user modifies a file the shadow copy service stores enough information about the modification to reconstruct the previous version of the file. Those skilled in the art and others will recognize that a shadow copy service could provide an Application Programming Interface API that allows other software modules to determine when a file was last modified. In this embodiment of the present invention the file stamp associated with the selected file in the integrity table is compared to the time the file was last modified as indicated by the shadow copy service. Obviously if the file stamp in the integrity table is more recent then the modification time as indicated by the shadow copy service then the file was not modified since the most recent integrity check.

In another embodiment of the present invention a unique identifier assigned to the file by the operating system is used to determine whether modifications were made to the selected file since the file s most recent integrity check. Those skilled in the art and others will recognize that each volume of an I O device has a location where information about files on the volume is stored and central management of the volume is performed. For example the Windows NT File System maintains a master file table that contains a record for each file on a volume. When a file is created a new record for the file is inserted into the master file table and a predetermined amount of space is allocated to store attributes of the file. In this type of system Update Sequence Numbers USNs are sequentially assigned to files and recorded in the master file table when data is scheduled to be written to a file. Since USN numbers are assigned sequentially the USN number assigned to the selected file provides a de facto timestamp indicative of when the file was last modified. In one embodiment of the present invention the integrity table may be modified to include the USN number assigned to a file since its most recent integrity check. Then the validation application may compare the USN number currently assigned to the selected file with the USN number that is recorded in the integrity table to determine if a file has been modified since the file s last integrity check.

In yet another embodiment of the present invention a filter driver that hooks into the I O system of the computing device may be used to determine if a file was modified since the file s last integrity check. Those skilled in the art and others will recognize that a filter driver may be configured to monitor the communication between an operating system and an I O device. In this embodiment the filter driver records each modification made to a file that is stored on a volume. Then to determine whether the selected file was modified since the file s most recent integrity check the time stamp associated with the selected file in the integrity table is compared to the time the file was last modified as recorded by a filter driver. Obviously if the file stamp in the integrity table is more recent then the modification time as indicated by the filter driver then the file was not modified since the most recent integrity check.

At block the validation application performs an integrity check on the selected file. As mentioned previously an integrity check determines whether a file has been modified since the file s most recent integrity check. However since the process for performing an integrity check was described above with reference to block further description of that process will not be described in further detail here.

As illustrated in at block the validation application updates the integrity table with the data generated by the integrity check performed at block . For example the integrity check may indicate that the selected file was modified since been received from a trusted source. In this instance the VALIDATED variable associated with the selected file in the integrity table will be set to indicate that the file was not validated. Also the TIME STAMP column will be updated with the time of this integrity check.

At decision block the validation application determines if any files contained in the integrity table have not been selected previously. Typically when a new malware signature is received every file with an entry in the integrity table is analyzed to determine if modifications were made to the file since the file s most recent integrity check. The validation application sequentially selects all of the files in the integrity table and determines if the selected file was modified. In any event if additional files do not need to be selected the validation application proceeds to block where it terminates. Conversely if at least one additional file will be selected the application proceeds back to block and blocks through repeat until all of the files in the integrity table have been selected.

Now with reference a selective scan module depicted in will now be described. Those skilled in the art and others will recognize that the selective scan module is designed to work in conjunction with the validation application and integrity table described above with reference to . With continuing reference to and the accompanying descriptions an exemplary selective scan module illustrated in will now be described.

At decision block the selective scan module remains idle and waits for an event that requires one or more files to be scanned for malware. As will be appreciated by those skilled in the art and others antivirus software may initiate a file scan in many different instances. For example a computer user may issue a command to start execution of a program by double clicking on an icon associated with the program. To prevent malware from being executed antivirus software may cause one or more files associated with the program to be scanned before the program is loaded into memory and executed. Also antivirus software may be configured to scan all of the files on a computing device for malware. In this instance files are sequentially selected and scanned. However as known to those skilled in the art and others the examples provided above should be construed as exemplary and not limiting as one or more files may be scanned for malware in other contexts not described herein.

At block the selective scan module selects a file that is an object of the scan event received at block . As described above one or more files may by the object of a scan event. Since techniques for selecting a file are generally known in the art further description of the technique used at block will not be described in further detail here.

As illustrated in at decision block the selective scan module determines whether the selected file originated from a trusted source. As mentioned previously for each file on a computing device that originated from a trusted source an entry for the file is maintained in the integrity table . Thus at decision block the selective scan module determines whether the selected file maintains an entry in the integrity table . In instances when the file does have an associated entry in the integrity table the selective scan module determines that the file originated from a trusted source and proceeds to block . Conversely if the file does not have an associated entry in the integrity table the file is not from a trusted source and the selective scan module proceeds to block .

At decision block the selective scan module determines whether the file was successfully validated at the most recent integrity check. More specifically at block a lookup of the integrity table for data associated with the selected file is performed. As mentioned previously the present invention maintains an integrity table which contains information about each file on a computing device that originated from a trusted source. Collectively the validation application and integrity table track whether a file was successfully validated as originating from the trusted source in the most recent integrity check. At block the variable in the integrity table that is indicative of whether a file was successfully validated is identified. If the variable indicates that the file was successfully validated then the selective scan module proceeds to block . Conversely if the variable indicates that the file was not successfully validated the module proceeds to block described below.

As illustrated in at decision block the selective scan module determines whether the selected file was modified since the file s most recent integrity check. If the file was modified the selective scan module proceeds to block described below. Conversely if the file was not modified the selective scan module proceeds to block . Since methods for determining whether a file was modified since the file s most recent integrity check were described above with reference to at block further description of those methods will not be provided here. Significantly the selective scan module identifies files that were not modified since being received from a trusted source. For these types of files the present invention prevents the file from being scanned for malware.

At block the selective scan module performs an integrity check on the selected file. If block is reached the file was modified since the most recent integrity check. As mentioned previously an integrity check determines whether data in a file including any modifications made to the file originated from a trusted source. However since the process for performing an integrity check was described above with reference to at block further description of that process will not be provided here.

At block the selective scan module causes a scan for malware to be performed on the selected file. As mentioned previously software implemented routines in the scan engine are configured to scan a file for malware. In one embodiment of the present invention the scan performed at block includes matching patterns of data to a malware signature. However the scan may include additional malware identification methods. For example the scan performed at block may include identifying heuristic factors that are characteristic of malware or emulating program behavior in a virtual operating environment. In any event it should be well understood that the techniques for identifying malware described above should be construed as exemplary and not limiting. The selective scan module may be implemented with any number of malware scanning techniques not described herein.

At decision block the selective scan module determines if any files that were the object of the scan event received at block have not been selected previously. If additional file s do not need to be selected the selective scan module proceeds to block where it terminates. Conversely if at least one additional file will be selected the selective scan module proceeds back to block and blocks through repeat until all of the files that are the object of the scan event have been selected.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

