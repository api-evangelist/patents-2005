---

title: Activity-based software traceability management method and apparatus
abstract: Computer method and apparatus for managing traceability of a software program are disclosed. Given a subject software program, the invention method/apparatus provides a respective history log for each artifact of the program. The invention method/apparatus records in the respective history log changes made to an artifact of the subject software program. During a change being made to the artifact, a processor routine determines from the respective history log related artifacts. An indication of the determined related artifacts is displayed to a user as impact analysis results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716649&OS=07716649&RS=07716649
owner: International Business Machines Corporation
number: 07716649
owner_city: Armonk
owner_country: US
publication_date: 20051215
---
Software development is typically performed as group projects. A subject software system is developed through design efforts test efforts implementation efforts and maintenance efforts. There may be different groups and different group members participating in each of these efforts. Throughout these efforts and among the work group members various modeling and other development tools are used for increased communication and consistency in developing the subject software system. A software traceability management system is one such tool.

When a software development artifact is modified the developer would like to know what other artifacts need to be modified in order for the subject system to remain consistent. An artifact is the persistent result of work done by a user typically persisted in a file system such as a model and source code. Being able to perform impact analysis before changing an artifact has been a longstanding but elusive need in software development for years. One of the main issues is managing change to software system requirements. Without the ability to perform impact analysis artifacts produced as part of the development process drift apart and become inconsistent. This leads to misunderstandings wasted time schedule slips and non conformance to requirements. In short failure to manage change leads to higher development costs.

For example when two software artifacts are connected by a dependency traceability relationship a change to the first artifact might require a change to the second artifact in order to maintain the semantics of that relationship. These dependence traceability relationships are an essential mechanism for determining impact analysis i.e. determining what other artifacts need to be updated following a change to a given set of artifacts.

Traditional solutions attempt to solve the problem using manually created and maintained traceability links. Links are manual because the variety of artifact types spans domains for example requirements are human readable while code is written in a formal technical language. Complex software systems have hundreds if not thousands of requirements and there are many to many relationships between artifact types requirements needs designs tests code etc.

Past attempts to create and maintain the traceability relationships fail because the cost to the development team outweighs the benefit. Maintaining traceability links is an arduous task even for a relatively small development effort and this is one of the main reasons existing traceability solutions fail. There are many accounts that document this issue and the difficulty in solving it.

The present invention addresses the problems of the prior art and provides activity based traceability management. A traceability management system of the present invention includes computer implemented steps of 

With reference to and the present invention provides a traceability management tool system which is activity based. The tool provides a respective history log or change history for each of various work files artifacts . Each change history indicates a series or sets of changes made to respective artifact file . Here all changes are made in the context of an activity where the set of all changes to complete an activity is known as a change set . Each change set indicates changes and respective artifacts operated on by the changes. is illustrative.

A later Activity n 1 is recorded as including changes to file version for example and file in its change set . Similarly Activity n 1 is recorded by tool as having changes change set that modified files and .

In addition change history records the respective type or kind category of activity defined by change sets . For example Activity is illustrated as being a bug fix and Activity n 1 and Activity n 1 are database table changes . Other activity types include enhancements changes to the G UI graphical user interface and the like.

In one embodiment change history of an artifact is implemented as a linked list of records. Each record corresponds to a respective activity and holds information and data representing changes change sets of that activity. Through a pointer reference identifier or other common technique the change history is associated with or loosely coupled to respective artifact . That way with each modification of artifact a respective activity record is made in e.g. appended to change history . As such change history effectively serves as a history log of artifact .

Other data structures for implementing change history change sets and activities are suitable and in the purview of one skilled in the art.

Referring back to when a software artifact is modified a history log or change history of that artifact is inspected and all files that are the products of a change set that modified that artifact are identified as objects that might need to be modified. Thus the present invention leverages information that is made available via the change history and the user follows an activity based usage model.

By contrast to the prior art the present invention builds upon activity based change management. Unlike traditional methods of providing impact analysis the present invention does not burden the development team with the arduous task of creating and maintaining traceability links. Rather the present invention infers dependency relationships from the change history that the traceability management system records from normal day to day usage.

In the illustrated example of the preferred embodiment determines an ordered list of related files to artifact as follows. When artifact is modified tool refers to respective change history . On a per activity change set basis tool counts the respective occurrences of other files indicated in each change set . Tool determines the file with the greatest number of occurrences i.e. highest relative frequency of occurrence to be most likely a related file of subject artifact . Likewise tool determines the file with the second greatest number of occurrences in change sets to be the next likely related file of subject artifact and so on.

In the illustrated example tool determines that file has been affected changed more often with the changes to given artifact than any other file. That is file is indicated in each of change sets and while file is indicated only in two change sets . Thus tool outputs an ordered list indicating a high probability of file being related to given artifact and a somewhat lower probability of file being related to given artifact .

In other embodiments the determination of related files to artifact is made based on change sets of activities of the same activity type . So in the illustrated example of say artifact is currently modified by an activity of the type indicated database table change . Invention tool then filters i.e. only considers the change history activity entries of type database table change . This results in tool analyzing only Activity n 1 and Activity n 1 or respective change sets to determine files that have most frequently been affected by changes to given artifact . Based on the illustrated change sets tool determines changes to file are recorded in each of these subject activities and outputs an indication that file is a related file to give artifact . Tool finds files and indicated in only change set and thus indicated relatively fewer times than file with respect to the subject change sets . As such tool outputs an ordered list indicating files and after file as the determined related files to given artifact .

In another embodiment tool gives higher weight to more recent change sets. So if the first ten change sets in change history of the given artifact indicate file as having been affected but the most recent change sets indicate file as having been changed with the changes to given artifact then tool gives higher weight to file based on recent frequency. However in the case of a tie based on recency change set age then tool places priority on activity type discussed above .

Other combinations or permutations of weighting and ordering lists of related files are suitable and in the purview of are skilled in the art given this disclosure the present invention.

Client computer s devices and server computer s provide processing storage and input output devices executing application programs and the like. Client computer s devices can also be linked through communications network to other computing devices including other client devices processes and server computer s . Communications network can be part of a remote access network a global network e.g. the Internet a worldwide collection of computers Local area or Wide area networks and gateways that currently use respective protocols TCP IP Bluetooth etc. to communicate with one another. Other electronic device computer network architectures are suitable.

In one embodiment the processor routines and data are a computer program product generally referenced including a computer readable medium e.g. a removable storage medium such as one or more DVD ROM s CD ROM s diskettes tapes etc. that provides at least a portion of the software instructions for the invention system. Computer program product can be installed by any suitable software installation procedure as is well known in the art. In another embodiment at least a portion of the software instructions may also be downloaded over a cable communication and or wireless connection. In other embodiments the invention programs are a computer program propagated signal product embodied on a propagated signal on a propagation medium e.g. a radio wave an infrared wave a laser wave a sound wave or an electrical wave propagated over a global network such as the Internet or other network s . Such carrier medium or signals provide at least a portion of the software instructions for the present invention routines program .

In alternate embodiments the propagated signal is an analog carrier wave or digital signal carried on the propagated medium. For example the propagated signal may be a digitized signal propagated over a global network e.g. the Internet a telecommunications network or other network. In one embodiment the propagated signal is a signal that is transmitted over the propagation medium over a period of time such as the instructions for a software application sent in packets over a network over a period of milliseconds seconds minutes or longer. In another embodiment the computer readable medium of computer program product is a propagation medium that the computer system may receive and read such as by receiving the propagation medium and identifying a propagated signal embodied in the propagation medium as described above for computer program propagated signal product.

Generally speaking the term carrier medium or transient carrier encompasses the foregoing transient signals propagated signals propagated medium storage medium and the like.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

While this invention has been particularly shown and described with references to preferred embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.

For example the computer network and system of are for purposes of illustration and not limitation. Other computer architecture and configurations are suitable.

Further change history and change sets may be implemented in a variety of data structures objects and other techniques common in the art. The foregoing describes one such implementation for purposes of illustration and not limitation.

Traceability management tools and methods of the present invention may be incorporated into or a feature of a configuration management system. When a change is made to one file in a configuration of a software program the present invention tool method determines what other files are related to the one file. This automated determination of traceability relationship information enables a programmer user to perform impact analysis during the configuring of the subject software program.

