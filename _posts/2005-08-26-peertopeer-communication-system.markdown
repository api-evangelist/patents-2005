---

title: Peer-to-peer communication system
abstract: A peer-to-peer communication system that transmits application data from an application component on one network peer to an application component on another network peer. A programming interface is provided to the communication system to facilitate programming of applications that rely on peer-to-peer communications. The communication system uses messaging providers to which each peer may be connected for purposes other than communications between peer-to-peer application components, thereby reducing the resources a peer-to-peer application requires for communication and making the system advantageous for use in portable electronic devices. Additionally, the communication system uses addresses already assigned in each messaging provider, allowing peer-to-peer communication between peers that may otherwise have been non-addressable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680112&OS=07680112&RS=07680112
owner: Microsoft Corporation
number: 07680112
owner_city: Redmond
owner_country: US
publication_date: 20050826
---
Computer networks are widely used for communication of data and are used to provide many business and personal applications that rely on an exchange of data between computing devices in different locations. The Internet is an example of a widely used communication network. Such networks includes multiple interconnected servers and other devices to which data may be sent or from which data may be obtained by other devices connected to the network. To enable network communications to be directed to specific devices within the network each device may be assigned a network address. Each address is typically unique and persistent meaning that any message sent over the network containing the address for a specific device will always be routed to that device.

Many users of applications that rely on network communication connect to the network as peers. In this context peer refers to a platform that may contain hardware and software through which access to the network is obtained often by a single user. As a result there can be many more peers in a network than there are other devices such as servers. Because networks usually have a limited number of addresses available there are often not enough network addresses for every peer to have a unique network address.

Rather than being assigned a unique and persistent address each peer conventionally connects to the network through a device such as a router that performs network address translation NAT . The router may have a unique and persistent network address such that messages sent over the network may be addressed to the router. The router in turn is connected to multiple peers over a sub network. Each peer may be assigned an address that is meaningful only within the sub network.

As the peer sends messages intended for communication over the network it may insert its sub network address as the address from which the message was sent. The router receives these messages over the sub network and forwards them on to the network. Before forwarding the message the router translates the peer s sub network address to its own address that is recognized as a valid network address.

Servers and other network devices that process messages may use the address in the message to direct a response to the sender of the original message. Accordingly the router receives all responses intended for any of the peers connected through its sub network. The router then forwards these messages over its sub network but first translates the address in each incoming message to the sub network address of the peer intended to receive the message. In this way each peer can send messages over the network and receive responses.

But because the address of a peer may not be unique and persistent it is difficult for a network device to initiate communication with a peer. To initiate communication with a peer another peer or network device would need to discover an address that can be used to send messages to that peer.

One way that the need for address discovery is avoided is through the use of a store and forward messaging system. A store and forward messaging system employs a relay server having a unique and persistent address within the network. Messages intended for a peer may be sent to the relay server which stores the messages. The relay server waits for the peer for which the message is intended to send a message to the relay server requesting any stored messages intended for the peer. Such a message will include an address the relay server may use to direct a response to the peer and the relay server can transmit any stored messages intended for the peer as a response to that message.

For a store and forward system to work the relay server must have a way to identify specific peers for which messages are intended. To identify peers the relay server may establish its own addressing mechanism. Because such addresses are not used as network addresses the relay server is unconstrained by any limitations on the available number of network addresses in assigning addresses.

E mail is an example of a store and forward messaging system in widespread use. Every user of an e mail service has an e mail address which can be used by both the relay server and other peers to route messages to a peer from which a user accesses the e mail system.

Other network addressing mechanisms are known. Some messaging providers use networks for which a network address is assigned to every peer. For example the cellular phone system assigns a unique and persistent address i.e. the phone number to every peer allowing text messages in SMS format to be sent from one peer to another without the intervention of a relay server.

As another example instant messaging uses a different approach to provide realtime transmission of messages to peers. In an instant messaging format peers that are available to receive messages identify themselves to a relay server operated by a messaging provider. Once the relay server obtains an address through which messages may be sent to a peer that address may be provided to other peers wanting to communicate with that peer.

The invention relates to peer to peer communication. In one aspect a programming interface is provided to a communication component on each peer that may receive or transmit data. The interface facilitates creation of application programs requiring peer to peer communications.

The communication component may transmit and receive messages using a messaging provider that would be accessed on the peer for reasons other than communications of data between peer to peer applications allowing peer to peer applications to be implemented without consuming substantial resources for communication which can be significant for resource constrained devices such a smart phones PDAs and pocket PCs. Using an existing messaging provider to transmit peer to peer application data also simplifies communications by enabling use of addressing mechanisms that are already established.

In another aspect the communication component may aggregate messages received from multiple messaging providers or select a messaging provider from multiple available messaging provider to send a message. This structure allows messaging providers offering services with different characteristics to be available to meet the needs of various applications or to meet various needs of the same application at different times such as by allowing messaging providers offering different transmission characteristics to be used to convey different types of messages for the same application.

We have recognized that significant advantages can be obtained in providing applications that rely on peer to peer communication. By providing a simple way for such applications to exchange data applications can be more readily developed for a peer to peer environment.

As described in more detail below a programming interface is provided to allow application programs to send and receive data using existing messaging providers. The interface allows applications running on each peer to exchange data with other peers in much the same way that an application may store and retrieve information from a data store. An application developer is thereby freed of the need to understand network addressing or the complexities associated with network communications. As a further advantage using existing messaging providers can greatly reduce the size of applications based on peer to peer communications. Such a size reduction can be particularly significant in resource constrained systems. Therefore providing an application programming interface through which messaging providers may be readily accessed facilitates the deployment of peer to peer applications for portable electronic devices.

Further the programming interface may facilitate communication with devices that have addresses that are normally masked by their messaging providers. For example current addressing techniques used by cellular messaging providers do not provide a convenient mechanism for communication from applications to specific addressees.

An embodiment of the invention may be employed in peer to peer network shown in . Peer to peer network has multiple peers such as peers A and B. Each peer may be a desktop computer or any other network enabled computing device. Peers such as A and B may communicate through messaging provider . In this example messaging provider provides a store and forward type e mail system.

Messaging provider in this example uses the Internet to transport e mail messages. Each of the peers A and B may be connected to Internet through a device that performs network address translation and may therefore have no fixed Internet address. In this example peers A and B are connected through routers A and B that perform network address translation.

Messaging provider includes relay server . In this example relay server is a mail server. Relay server may have a fixed Internet address such that any peer may initiate communication with it.

Each of the peers A and B may include computer readable medium on which data and computer executable instructions are stored. Some portion of the computer executable instructions on each of peers A and B may implement a messaging client that may be used to send or receive e mail messages using messaging provider . For example a messaging client on peer A may receive user input specifying an e mail message to be sent and an e mail address to which the message is to be sent. The messaging client may then transmit a message through router A to relay server . If the e mail message is intended for a user accessing the network through peer B a messaging client on peer B may access relay server through router B to receive e mail messages from server . In this way e mail messages may be transmitted from peer A to peer B. The converse steps may be taken to send messages from peer B to peer A.

To facilitate sharing of application data between components of an application running on peer A and components of the application running on peer B communication client on peer A may send messages to relay server containing application data. Similarly communication client on peer B may retrieve messages containing application data from relay server . Communication client may then make that data available to a recipient application component on peer B. In this way a virtual link may be established between a peer application component on peer A and a peer application component on peer B. Similar virtual links may be established between any two or more peers having access to messaging provider .

Peer to peer network may also include other messaging providers that may be used to transport application data. In the example of messaging provider is shown. In this embodiment messaging provider transports messages using a cellular telephone system. Messaging provider operates multiple access points such as access points A and B. The access points are interconnected by a messaging backbone . In this example messaging provider is a network managed by a cellular telephone company and may transport multiple types of messages including text messages. Users of the messaging provider access the network through peers that may be cellular telephones smart phones or other devices equipped to send and receive messages. In this example peers A and B are illustrated as portable handheld electronic devices that are constructed to receive messages in an SMS format.

Messaging providers and are examples of messaging providers that may be used to communicate data between application components running on different network peers. Any suitable message provider may be used. A simple approach to peer to peer communication that uses relatively few resources on a peer as described herein may be particularly desirable for peers that are based on portable computing devices. Such devices are typically connected to messaging providers that operate according to protocols such as IMAP POP3 SMTP SMS HTTP TCP IP and MMS.

The messaging providers may be accessed indirectly through a web service or other suitable means. In network access to messaging provider by devices connected to internet through a web service provided by server . Server is connected to backbone of messaging provider . Server may send messages addressed to any of the peers such as A and B connected to backbone by messaging provider . Additionally server has a network address recognized by messaging provider and may receive messages from peers A or B connected through messaging provider .

Server is also coupled to peers such as peers A and B through a connection to Internet and may exchange messages with any peer connected to Internet . Such peers can use a web service provided by server to send and receive messages using messaging provider .

Server interconnects messaging providers and and may forward messages sent using one messaging provider to a peer that receives messages over the other messaging provider. This cross coupling between Internet and backbone allows data to be sent from a peer connected to Internet to a peer connected to messaging provider . Virtual link illustrates that communication between peer B and peer B is possible. A similar virtual link may be used to transmit application data between peers connected to different messaging providers.

Turning to a software architecture of a messaging client is illustrated. Such a messaging client may be used on any peer for which communication is desired. Messaging client may be used on a peer on which applications such as applications A . . . D execute. Such a peer may also be programmed with an e mail user interface to provide e mail communications.

Messaging client facilitates communication using multiple messaging providers such as messaging providers A B C and D. Such messaging providers may for example be an Internet Service Provider that provides access to an e mail messaging system a cellular telephone company that provides access to an SMS messaging system or any other messaging provider whether now known or hereafter developed. Such messaging providers need not be commercial entities and any mechanism by which a network peer may send messages may be regarded as a messaging provider. Nor does a messaging provider have to be established by a single entity. A messaging provider could be a collection of components owned or operated by different entities that interact to transmit messages.

In the embodiment illustrated messaging client is implemented as a plurality of computer executable instructions stored on a computer readable medium associated with a peer. In embodiments in which a peer is implemented as software executing on a desktop computer or other computing device the computer readable medium may be computer memory in the computing device. The computer executable instructions may be prepared in any desired programming language and may be converted to machine code or executable code before storage in the computer readable medium or may be interpreted or applied to a JIT compiler to derive executable code at run time.

In the computer executable instructions making up messaging client may be organized as a plurality of modules each of which performs a function associated with the messaging client. Each module may interact with other modules according to constructs of the programming language used to create the modules. For example each module may contain function calls that are exposed to other modules so that the functions of one module may be called from another module. Alternatively the modules may be linked into one executable file with references from one module to another resolved as part of the linking. As a further alternative each module may be an element of a library of modules that are dynamically linked when executed. Accordingly the specific form in which each of the modules is implemented and in which the modules interact is not critical to the invention and any suitable method may be used.

One of the modules illustrated in is messaging aggregator . Messaging aggregator acts as an interface to multiple messaging providers A . . . D. It includes an inbox and an outbox . Messaging aggregator may be constructed to interact with each messaging provider using known techniques. However messaging aggregator provides a mechanism to interact with multiple messaging providers. In the illustrated embodiment messaging aggregator includes inbox through which messages may be received from any of the messaging providers and outbox through which messages may be sent using any of the messaging providers.

Inbox may receive messages from all of the messaging providers A . . . D and buffer them in memory until processed by e mail user interface or an application such as A . . . D. The messages may be stored with an indication of the source of the message which may include an indication of the messaging provider through which the message was received. Such an indication may be expressly stored or may be implied from other information that is stored. For example messages may include an indication of an address from which a message originated which may indicate the messaging provider that transmitted the message.

Outbox may receive messages from e mail user interface or an application A . . . D and buffer them in memory until they are transmitted. Outbox may buffer messages to be transmitted over any of the messaging providers. Each message to be transmitted may be stored with message routing information such as an indication of the messaging provider over which it is to be transmitted. Such an indication may be expressly included in the message or may be included by implication such as by indicating the destination address of the message in a format that identifies the messaging provider through which such a message may be sent.

To facilitate supply of message routing information messaging client includes message routing information module . Message routing information module may contain a directory of addressees in association with routing information for each addressee. The routing information may include one or more addresses useful for transmitting messages to the addressee. The routing information may explicitly specify a messaging provider that can carry messages to that addressee. Routing information may alternatively or additionally be provided implicitly based on the form of the address stored. In some embodiments message routing information module may contain routing information for more than one mode of transmission to a single addressee allowing messaging client to select the most appropriate messaging provider for the form of the message to be delivered or to use an alternative messaging provider if the message can not be delivered via the first selected messaging provider. Outbox may use the routing information to format the message for transmission using one of the messaging providers A . . . D.

In this example applications A B C and D represent any applications that may execute on a peer. The applications may be data processing applications such as a word processor or spread sheet. In this example the data processing applications may be operated in a peer to peer mode in which data is obtained from or sent to another peer. The data may be sent to or received from a corresponding data processing application or any other application that generates or uses data.

However the invention is not limited to use in connection with data processing applications and applications A B C and D may be any applications whether now known or hereafter developed that may be operated in a peer to peer mode. For example some or all of the applications A B C and D may be games or other peer to peer applications for entertainment use. In an embodiment in which the applications are games peers within peer to peer network may each be equipped with a component of a gaming application. Data sent between peers may represent moves in a game or other gaming information.

E mail user interface includes software that presents a user interface to a human user of the peer on which messaging client is installed. The precise form of the interface may depend on the hardware components of the computer processor of the peer but may include interfaces such as graphical user interfaces presented on a display activated through a mouse or other pointing device a text interface accessed through a keyboard or a natural language interface accessed through an audio interface. E mail user interface also receives text or other input from a human user that specifies the content of an e mail message to be sent and routing information for that message.

E mail user interface and each of the applications A B C and D may be implemented as one or more components containing computer executable instructions. The computer executable instructions may be in any suitable computer language. Such applications are known in the art and e mail user interface and applications A B C and D may be constructed using known programming techniques.

E mail user interface and applications A B C and D differ from conventional e mail client software and applications as known in the art in that they send and receive messages using API . API provides a mechanism for applications A B C and D to send data to or receive data from an application component on another peer and for e mail user interface to send and receive e mail messages with e mail clients on other peers. API simplifies programming of applications and creating an e mail client because it avoids the need for such programs to include software that performs any of the data communication functions that are performed by messaging client .

In some embodiments API provides an interface to applications A B C and D that is in the same form as an interface to a data store. Because data stores are commonly used in application programs API provides a mechanism for a computer programmer to incorporate peer to peer communications in an application using simple commands of a familiar form. API also provides functions for e mail user interface such as sending and receiving messages that are conventionally found in an e mail client allowing e mail user interface to be simpler than traditional e mail client software even though messages may be sent using multiple messaging providers.

API may be a module containing computer executable instructions in any suitable computer language. In this embodiment API may be dynamically linked to e mail user interface and applications A B C and D so that functions implemented in API may be called from within e mail user interface and applications A B C and D. Linking also allows functions within applications A B C and D and e mail user interface to be called from within API .

In this embodiment API includes multiple communication functions that may be called from applications A B C and D and e mail user interface . One such function a SEND function may transmit data using a messaging provider to which the peer has access. To transmit data API provides the data to outbox .

The SEND function may operate synchronously or asynchronously. For synchronous operation the function may return when the message is sent by the selected messaging provider thereby blocking execution of the calling program until the transmission is completed. For asynchronous operation the SEND function may operation so as not to block execution of the calling program.

Outbox may provide the message to the desired messaging provider in the appropriate form. For example outbox may format the message with a header specifying the intended addressee a sender address a time stamp or other desired information and append the data in the message body.

The SEND function provided by API may accept as one of its parameters an indication of the recipient of the information. The recipient may be identified in any suitable way. In one embodiment the recipient is identified as a named addressee and need not be specified by an address for a peer connected via one of the messaging providers. Outbox may determine the appropriate address in a format recognized by one of the messaging providers A . . . D from a record in message routing information module . In this way application information may be sent from an application component on one peer to an application component on another peer without the need for the application components to be programmed to use peer addresses.

To facilitate delivery of messages to the intended application component once the message reaches the peer on which that application component executes messaging client may be constructed such that data for communication between peer applications is tagged with an identifier before transmission. For example the SEND function within API may before passing data to outbox attach an application tag identifying the data as representing data for peer to peer communications. Such an application tag may also identify the application from which the data originated and or the application for with the data is intended. Alternatively the data may be tagged with an application tag to identify the data as representing an e mail message to be processed by an e mail user interface .

Upon receipt of a message over one of messaging providers A . . . D containing data for one of the applications A B C and D communication client may use the application tag to manage delivery of the data to the appropriate application. In the embodiment of message dispatcher retrieves messages from outbox and forwards them through API to the intended recipient application.

Message dispatcher may be a component comprising computer executable instructions that monitor messages in inbox and forwards the data in a message to e mail user interface or one of the applications A . . . D as appropriate based on an application tag in the received message. Delivery may be achieved by message dispatcher presenting the data through API to a component of the recipient application.

As each message containing application data is received message dispatcher determines which of a plurality of applications A B C and D is to receive the data from the message. In the described embodiment registry is maintained by message dispatcher to track which applications are available to receive data. As described above an application tag identifying an application to receive data in a message may be appended to the data before transmission. An application tag may similarly identify messages as containing e mail data allowing message dispatcher to likewise route e mail data to e mail user interface .

Registry may contain information used by message dispatcher to pass information to the recipient application based on the application tag. For example each application may provide a function through which it receives data. The name or other identifier of this function may be stored in registry in connection with the application tag. Message dispatcher may read the application tag in a message in inbox and identify an entry in registry for that application tag. As part of the entry in registry a function for the application may be provided. Message dispatcher may remove the message from inbox and call the function for the application as indicated in registry . For messages directed to e mail user interface the data from the message may similarly be supplied through a function in e mail user interface identified in registry .

As described above data from messages in inbox is pushed to a recipient application by message dispatcher . It is not necessary that data be pushed to the application. Each application could pull data. To implement a pull architecture message dispatcher may contain a RECEIVE function that may be called by applications . . . D or e mail user interface . Such a function could examine messages in inbox to identify messages containing data for the application calling the RECEIVE function. Application tags could also be used to match messages in inbox to the intended application though any suitable means may be used.

API may also be programmed to contain other communication functions such as functions that manage information stored in message routing information module . For example API may be programmed with functions that add or remove records in message routing information module . Such a function may be called by one of the applications A . . . D that receives user input specifying a peer in peer to peer network with which the application will exchange data. Conversely an application may call a function within API to remove a record from data structure when communication is no longer desired with the peer reachable through the address specified in that record. Records in data structure may be similarly added or removed by function calls made by e mail user interface .

API may include functions that may be called to edit information in any of the records in data structure . API also may contain a function to allow an application to search for a specific record in data structure . Functions that add remove edit or search for records within a data structure are known. Accordingly these functions within API may be implemented using conventional programming techniques whether now known or hereafter developed.

API may provide other functionality for managing messaging client . For example API may provide a function that an application may call to register with message dispatcher . Such a function may place a record in registry including an application tag for the application calling the registration function. The registration function may store in addition to an application tag for the application an entry point to the application that message dispatcher may use to transmit data from messages directed to that application.

Turning to additional details of message routing information module are shown. Message routing information module may be implemented as a data structure in any suitable form. shows an example of a data structure that may be used. Data structure may be stored in computer readable memory associated with the peer on which messaging client executes.

The example of shows that data structure includes multiple records such as records A B and C. Each record may contain multiple fields of which fields C C and C in record C are numbered.

Field C stores an addressee. The addressee may be stored as a text string by a coded identifier or in any other suitable way. The addressee need not be an address as used by any of the messaging providers. For example the addressee could be specified as a human user or as an application component.

Field C identifies a messaging provider over which messages may be sent to the addressee identified in field C. Any suitable method of representing a messaging provider may be used such by storing the name of the messaging provider a code associated with the messaging provider or a port through which the messaging provider is accessed.

Field C includes an address by which the addressee identified in field C may be accessed using the messaging provider identified in field C.

Data structure may include multiple records having the same value in the addressee field indicating that the same addressee may be accessed using multiple messaging providers. Alternatively records in data structure may have more fields than indicated allowing multiple messaging providers to be specified for an addressee.

Turning to a process by which data may be transmitted as part of a peer to peer communication is shown. In this example data is transmitted using a messaging provider operating a store and forward messaging system but any suitable messaging provider may be used. The process of includes a subprocess performed within an application sending data. At block the application generates the data to be sent. Block may represent conventional processing by an application. For example in a word processing application the processor block may involve obtaining user input which may be obtained in any suitable way.

At block the application begins the transmission process by making a call to a SEND function within API . The call to API made at block includes passing a parameter to the SEND function that identifies an addressee and data to be sent. In this example the addressee information identifies another application component in a peer receiving the communication by specifying the application tag of the application to process that data on a remote peer.

Sub process is then performed within messaging client . The call to the SEND function of API made at block results in an access to message routing information module . Routing information associated with the addressee specified in the call to API made at block is retrieved from data structure . That information specifies a messaging provider and address recognized by that messaging provider associated with the peer intended to receive the data. The address of the peer does not need to be a network address of the peer and can be any address recognized by the messaging provider. For example when a store and forward messaging provider is used the message may be transmitted first to a relay server and the peer retrieving the message from the relay server may not be addressable over the network used to transmit the message.

At block a messaging provider is selected. Where a single entry exists in data structure for the addressee specified as a parameter to the SEND command called at block the messaging provider specified in that record is selected at block . Where multiple records exist for such an addressee processing at block may involve performing an algorithm to select a preferred messaging provider. The messaging provider may be selected from the multiple messaging providers that may transmit a message based on transmission latency amount of data to be communicated or other factors associated with each messaging provider and desired characteristics of the transmission.

At block one or more application tags are appended to the data to be transmitted. Application tags may identify the application that generated the data to be transmitted and or the application that is to receive the data.

At block message aggregator formats the data the application tags and a destination address for the peer on which the application executes into a message. The message is in a form recognized by the messaging provider selected to transmit the message. Such a message may for example include a header containing the address of the peer to receive the message. The message appropriately formatted for the selected messaging provider is passed to outbox .

At block the message in outbox is transmitted by the selected messaging provider. In this example the selected messaging provider is a store and forward messaging provider. Accordingly the transmission of a message using that messaging provider results in the message being stored on a relay server at block .

The process of also may be used for sending e mail messages by e mail user interface . When sending an e mail an application tag identifying the data as an e mail message is appended at block .

Next subprocess is performed. In this example subprocess is performed within message dispatcher in the peer on which the application receiving the data executes. At block a message is read from inbox . At block message dispatcher analyzes the data portion of that message to read the application tag that were appended to the data at block as part of the transmission of the message. Message dispatcher compares the application tag read from the received message to identification codes stored in its registry to identify an application for which the data is intended.

At block message dispatcher may extract the data portion of the received message. This data is used in a call to a RECEIVE function within API at block . The RECEIVE function called at block accepts as a parameter the data extracted at block . The function may also accept as a parameter information read from registry identifying an entry point or other method by which the identified application receives messages. The call to API made at block then transfers the data to the specified application using the specified entry point for the application.

Processing then continues to block . At block the application receiving the data processes it in accordance with the application. The processing may be independent of the method by which the data was transmitted to the application.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art. For example the invention is described in connection with peers that are single user devices such as personal computers or smart phones. However the invention is not so limited. A system as described above may be used for transmission from a device generally regarded as a server to a peer. In such an embodiment the server may push notify the peer device of a message.

As another example software is described as being made of multiple modules. Each module may be a physically separate set of computer executable instructions such as may be stored in either source or executable code form in a separate and recognizable section of a computer readable medium. However modules may be combined or implemented as a portion of a larger program or components of a program and may have no separately identifiable structure. In this latter case a module may be a functional portion of a larger component.

As an example of an additional variation embodiments are described above in which messaging providers are used to transport messages from one peer to a remote peer. Messages may be communicated in any fashion. A single message may also be communicated using multiple providers. For example a message may be transmitted using first an e mail messaging provider that relays the message to a cellular telephone to company for delivery to a remote peer. Accordingly any number or combination of messaging providers or communications channels may be used as a messaging provider for messages.

Further the communications functions that may be implemented by an API or a messaging client is not limited to the specific messages described above. For example some component of the communication system could be programmed to poll addressees in the data structure to find an addressee willing and or able to engage in a peer to peer communication. Such a function could be useful for application components that implement multi player games. Addressees could be polled to find an addressee willing to participate in the game. Even if such a function is not implemented as part of messaging client an application could poll addresses by using functions that read entries in data structure and send messages to the addressees.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or conventional programming or scripting tools and also may be compiled as executable machine language code.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes etc. encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiment.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

