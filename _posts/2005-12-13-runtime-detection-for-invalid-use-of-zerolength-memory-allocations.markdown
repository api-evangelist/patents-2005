---

title: Runtime detection for invalid use of zero-length memory allocations
abstract: Methods for handling zero-length allocations are disclosed. An example of such a method may include returning a self-describing/diagnosing dynamic address that has all the properties required for a secure implementation. Another example may include returning a series of different addresses (instead of a single address per process) to improve supportability. Yet another example may include maintaining diagnostic information about the original allocation for ease of problem resolution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730453&OS=07730453&RS=07730453
owner: Microsoft Corporation
number: 07730453
owner_city: Redmond
owner_country: US
publication_date: 20051213
---
Memory allocations have the behavior that they return a pointer to memory that can be read from and written to for a requested length. Additionally such a pointer can be passed into another memory allocation routine like realloc or free for example.

A zero length allocation is a special case. Because the requested length is zero bytes an attempt should not be made to read from or write to the memory. Existing C C code that treats zero length allocations as a completely normal part of the process flow is pervasive. However incorrect use of these zero length allocations can be a source of software defects that are difficult to track down. Traditional implementations tend to present one or more of the following issues 1 they break existing code 2 they have security problems and make it easier for poorly written code to overwrite memory and 3 their behavior is unpredictable i.e. faulty code make work some of the time . When they do expose problematic code the problem is difficult to diagnose.

A traditional memory allocator may handle a zero length allocation in any of a number of different ways. For example it may return a NULL i. e. treat it as a failed allocation . This can break existing coding patterns that use zero length allocations as normal cases in loops or user inputs. Though these coding patterns are arguably risky they are pervasive in existing C C code and perfectly safe if implemented correctly.

Another approach is to return the smallest possible allocation i.e. treat the request as 1 byte instead of 0 bytes . This allows the existing C C code to work but has the drawback that it allows poorly written code to read to and write from the memory allocation. The may cause a runtime failure sporadically depending on the contents of memory surrounding the allocation. Additionally this has security implications as any attempt to write to this memory location is by definition a memory corruption and buffer overrun.

Still another approach is to return a well known address. Previous versions of MICROSOFT EXCHANGE for example improve on this by returning a constant like 0x00000001 for example that points to memory that can neither be written to or read from. If improperly written code accesses this address an access violation occurs and the problem can be diagnosed. Though this is an improvement on the above methods it has the following drawbacks. First any constant value that is guaranteed to be inaccessible on any running system will have the drawback of being innocuous like the number 1 . Developers who see this in a problem report may not realize that this constant is associated with a zero length allocation. Also though the code that references that invalid memory address is often at fault there are also cases where the code that does the allocation is at fault and is not near the code accessing the memory like when the allocation is passed across an API boundary . This requires a customer to reproduce the problem with additional diagnostics enabled.

Methods for handling zero length allocations are described and claimed herein. An example of such a method may include returning a self describing diagnosing dynamic address that has all the properties required for a secure implementation. For example instead of returning a constant and well known address a dynamic address may be returned. Such a dynamic address may have the following properties it cannot be read from it cannot be written to and it describes the problem to a developer in an obvious fashion.

Another example of such a method may include returning a series of different addresses instead of a single address per process to improve supportability. Instead of returning a single invalid address a range of invalid addresses maybe returned so that a developer can differentiate among possible different sources of the allocation.

Yet another example may include maintaining diagnostic information about the original allocation for ease of problem resolution. For example a record of each zero byte allocation may be maintained as well as the callstack of the code that requested it. This allows for complete identification of who allocated the memory and who accessed it.

Runtime detection for invalid use of zero length memory allocation may be accomplished by reserving allocating two memory pages side by side. The first page may be configured to disable reading from and writing to. The second page may be read only and may contain a message that describes this as a zero byte allocation. is a flowchart of an example MICROSOFT WINDOWS based implementation of a method for runtime detection for invalid use of zero length memory allocation.

At global memory may be allocated. At least two contiguous pages of memory may be allocated. Two pages of contiguous memory are desirable because a page is the smallest unit of memory that can have unique access characteristics like read only read write or no access for example. One page may be provided to have certain desired security characteristics e.g. any attempt to read from or write to the memory will fail . At least one additional page is desirable to contain a diagnostic message for developers to understand why an attempt to read or write failed. The pages may be contiguous so developers will see the diagnostic message when a failure on the first page occurs. A third page may be allocated for extra buffer. A multi page region of memory may be defined in C syntax according to 

During initialization at the first page of this multi page region may be marked as no access. That is the first page may be marked such that it cannot be read from nor written to. For example the first page may be set to PAGE NOACCESS using VirtualProtect .

At a diagnostic message may be written into the second page. The diagnostic message may for example indicate that a zero byte allocation has been requested. In general the diagnostic message may be any message that indicates to a developer looking at this particular memory address that something has happened that requires attention.

At the second page and subsequent pages if more than two were allocated at above may be marked as read only so that the message cannot be corrupted if the memory is accessed. For example the second page may be set to PAGE READWRITE using VirtualProtect .

It should be understood that a zero length allocation request is not necessarily a bad thing. In a non zero allocation the developer allocates memory that is expected to be needed memory for storage of say email. For example say it is presumed that an email is going to be less than 256 characters. The developer can declare up from that an email is going to be less than 256 characters and this will be statically defined at compile time. Alternatively this can be done dynamically. Memory can be allocate off the stack directly from virtual memory. A heap may also be used.

In a zero length allocation the developer declares that he wants memory of size zero. This might occur because there are certain programming styles that do not treat zero as a special case. In other words it is expected that a zero can be passed and things will take care of themselves. Also in some environments legacy code may exist that makes it untenable for developers to go back and check for zero passing.

If the value returned in response to the zero length allocation request is used properly then the program will keep right on working fine. If the returned value is used improperly by either reading from or writing to the allocated memory then the program may crash. When a crash occurs the developer will typically dump a memory location that is sent back from the program. This may not provide the developer with enough information to diagnose the root cause of the crash. It may not be immediately obvious that the crash is related to the improper use of a buffer returned by a zero length allocation. A debugger will typically display that location plus some number of bytes that follow that location. It is desirable therefore if an improper zero byte allocation is requested to provide the debugger with a global address that enables the debugger to display at least a portion of the diagnostics message that was written into the second page at . It may be desirable to display the entire diagnostics message or at least enough of the message to pique the developer s interest i.e. to make the developer want to look at the rest of the message to find out what is going on .

Accordingly at a range of N addresses may be calculated such that if an improper zero length allocation request is received the program will return one of the N addresses as a starting address that enables the debugger to display all or part of the diagnostics message. Suppose it is desirable for the diagnostics tool to display at least some number of bytes Y of the diagnostic message e.g. as shown in Y 2 . Suppose further than the diagnostics tool can display only X bytes. N may be calculated as X Y and represents a number of bytes on the first page that can be used as a starting location for display of the desired portion of the diagnostics message. Thus the range of addresses N may be a subset of the addresses that define the first page.

At the program waits for an allocation request. If the allocation is a normal allocation then at the request is handled normally. If at an invalid zero length allocation is detected then at one of the N global addresses may be returned from the first page. As described in detail above N may be small enough such that typical debugger commands will show the start of the diagnostic message on the second page. To calculate which of the N addresses to return one may choose to keep a global counter of zero length allocations and determine which address to return by calculating that count modulo N i.e. cZeroLenghAllocations N . provides an example output of such an allocation in the debugger.

At this point the developer can determine what went wrong and who is doing the improper thing with the address. However at this point the developer cannot necessarily be sure who requested the zero length allocation in the first place. Frequently it is not the fault of person who is using the memory but of the person who allocated it. For example a misuse might occur long after the program requests the address. In such an example the program later goes to do something with the address but it cannot so it crashes.

Accordingly at standard diagnostic utilities may be used to grab a callstack of the calling code and store it in a global circular buffer along with information like which specific address was returned for example. The call stack identifies exactly who allocated each address. More than one person might have allocated the address. The call stack enables the developer to home in who it was who requested the allocation.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the fuinctionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client devices can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

