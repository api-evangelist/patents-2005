---

title: Cache hint correction for security scanning
abstract: A computer includes a filter module providing a standardized interface for intercepting file access requests. The computer also includes a cache manager that manages the caching mode used with the requests. An application on the computer issues a file access request and explicitly or implicitly specifies a cache hint informing the cache manager of a desired caching mode. A security scanner module scans files on the computer for malicious software. The security scanner module intercepts a file access request and alters the caching mode, if necessary, to one optimized for security scanning. The security scanner module performs the file scan using the optimal caching mode, and, if necessary, resets the caching mode to its original state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730533&OS=07730533&RS=07730533
owner: Symantec Corporation
number: 07730533
owner_city: Mountain View
owner_country: US
publication_date: 20051118
---
This invention pertains in general to software for detecting viruses and other malicious software and in particular to techniques for scanning a computer file for the presence of the malicious software.

Caching is a well known technology for optimizing access to data stored by a computer. Typically a computer uses a relatively large yet slow memory device for long term storage of data. Examples of slow memories include hard drives CD ROMs and DVDs. Additionally the computer uses a relatively small yet fast memory for short term storage of data. An example of such a fast memory is the computer s random access memory RAM . Caching accelerates the operation of the computer by anticipating which data in the slow memory will be used by the computer and moving those data to the fast memory before they are needed.

Modern file systems include a cache manager that performs file caching for processes executing on the computer. The cache manager identifies the files and or parts of the files that are likely to be accessed by a process and loads those files or portions into a fast memory in anticipation of the process s request for access. The NTFS and WinFS file systems from MICROSOFT CORP. of Redmond Wash. are examples of operating systems having cache managers.

To facilitate selection of the correct caching strategy file systems allow a process to specify a cache hint when requesting access to a file. The cache hint indicates the manner in which the process expects to access the data. For example a process can use a cache hint to specify whether it is reading a file sequentially. The cache manager receives the hint and uses it to select a caching mode that is optimized for the expected data accesses.

Antivirus and other types of security scanners scan files on a computer s storage device to detect the presence of viruses and or other malicious software. In most instances a security scanner scans all files of certain types accessed by other processes executing on the computer. This scanning allows the security scanner to proactively detect malicious software and quarantine or remove it before the software has a chance to perform malicious actions.

One way that a security scanner implements its scanning is by intercepting file access requests from other processes. Under this technique however the caching mode for the file is based on the cache hint in the original file access request and is not necessarily the mode that is optimal for security scanning. The use of a suboptimal caching mode can make the scanning process inefficient which is undesirable because security scanning is performed frequently and even minor inefficiencies can have an impact on the overall performance of the computer. Therefore there is a need in the art to use the optimal caching mode when a security scanner is scanning a file for the presence of malicious software.

The above need is met by a security scanner module that determines the caching mode associated with a file access request and changes the caching mode if necessary to the mode that is optimal for security scanning.

A computer includes a filter module providing a standardized interface for intercepting file access requests. The computer also includes a cache manager that manages the caching mode used with the requests. An application on the computer issues a file access request that explicitly or implicitly specifies a cache hint informing the cache manager of a desired caching mode.

A security scanner module scans files on the computer for malicious software. The security scanner module intercepts a file access request and determines the caching mode associated with it. If the caching mode is not optimal for security scanning the security scanner module changes the caching mode to the optimal one by for example changing the cache hint in the file access request or altering data structures maintained by the cache manager. The security scanner module performs the file scan using the optimal caching mode and if necessary resets the caching mode to its original state.

The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Computers acting in different roles may have different and or additional elements than the ones shown in . For example a computer acting as a server may have greater processing power and a larger storage device than a computer acting as a client. Likewise a computer acting as a server may lack devices such as a display and or keyboard that are not necessarily required to operate it.

In one embodiment the computer executes an operating system such as a variant of MICROSOFT WINDOWS or LINUX. The operating system controls the operation of the computer . In general the operating system executes one or more application programs. In addition the computer executes a file system such as NTFS or WinFS from MICROSOFT Corp. for WINDOWS based computers and or ext2 for LINUX based computers. The file system controls the storage device and provides an interface through which programs executed by the operating system can access data stored therein. Depending upon the embodiment the file system can be integrated into the operating system or a discrete entity.

The operating system file system and application programs executed by the computer are formed of one or more processes. This description utilizes the term module to refer to computer program logic for providing a specified functionality. A module can be implemented in hardware firmware and or software. A module is typically stored on the storage device loaded into the memory and executed by the processor . A module can include one or more processes and or be provided by only part of a process.

An application is executed under control of the operating system. During its execution the application occasionally issues requests to access files stored on the storage device . The actual content of the request depends upon the operating system and or file systems in use but typical requests identify the file by its name and location and specify the type of access e.g. read or write access desired by the application . The operating and or file system generates an identifier called a file handle in response to the request from the application . The application operating system file system and other entities on the computer can utilize the file handle to reference the file. In addition other file handle instances can be used to access the same file. For purposes of this description the term file access request refers to the initial request from the application and or the file handle generated in response thereto.

In one embodiment the file access request also contains a cache hint. The cache hint describes the way in which the application expects to access the file. For example the cache hint can indicate that the application will access the file in a random fashion that it will access the file in a sequential fashion or that the application requests that no caching be performed. For example the MICROSOFT WINDOWS application programming interface API includes a CreateFile call where the calling application can supply a hint parameter having the value FILE FLAG RANDOM ACCESS or FILE FLAG SEQUENTIAL SCAN to respectively indicate that the application will access the file randomly or sequentially.

In one embodiment file access requests from applications are intercepted by a filter module . The filter module can redirect the request to another module executing on the computer and thereby extend or replace functionality provided by the file system. In one embodiment the filter module is the filter manager provided by MICROSOFT CORP. Software developers can create minifilter drivers that integrate into the filter manager and register to intercept specified types of file access requests. The filter manager uses assigned altitudes to determine the relative priorities of multiple minifilter drivers and thus provides a standardized interface for intercepting file access requests.

The minifilter drivers can register to intercept the requests at different points along the requests processing. For example a minifilter driver can register to intercept file access requests before the requests are passed to other modules in the file system. Likewise a driver can register to intercept a file handle returned by the file system in response to a request from an application. In other embodiments the functionality of the filter module is provided by other modules provided by MICROSOFT and or other entities.

A cache manager module receives file access requests targeted at the file system and selects a caching mode for the access. As mentioned above the file access request will often contain a cache hint specifying how the application expects to access the file. The cache hint thus implicitly specifies the caching mode preferred by the application. If a cache hint is absent the cache manager module may use a default value instead. In one embodiment possible caching modes the cache manager module can use include random sequential write through do not cache writes to the file and no buffering no caching at all . The cache manager will typically attempt to use the caching mode specified by the cache hint although other constraints may force it to select a different caching mode.

For purposes of this description assume that the cache manager module includes functionality for generating file handles in response to received file access requests. The cache manager module associates a selected caching mode with each file handle. All accesses to a file that use a particular file handle will use the caching mode that is associated with it. The cache manager module utilizes a set of data structures to store and maintain the associations between file handles and caching modes. In other embodiments other modules within the operating and or file system may generate the file handles.

A security scanner module registers with the filter module to intercept certain types of file access requests received by the filter module . The security scanner module contains functionality for scanning a file on the storage device to detect malicious software contained therein. In one embodiment the security scanner module determines the caching mode associated with a file access request and determines whether the caching mode is the one best suited to the security scanning. If the caching mode is not optimal the security scanner module changes the caching mode to the optimal one. In one embodiment the best caching mode for security scanning is one optimized for random access. In other embodiments other caching modes may be better suited to security scanning. Once security scanning completes the security scanner module returns the caching mode to the one originally associated with the file access request.

An interface module interfaces with the other logical and or physical entities within the computer such as the entities illustrated by . To this end the interface module is adapted to communicate with the filter module to receive intercepted file access requests including requests from applications and file handles returned by the cache manager . In addition the interface module is adapted to communicate with the cache manager and the storage device .

A filter registration module registers with the filter module to intercept certain file accesses. In an embodiment where the filter module is the filter manager from MICROSOFT CORP. the filter registration module includes a filter minidriver that is registered with the filter manager at a Microsoft assigned altitude. In one embodiment the filter minidriver is registered within an altitude region specifically provided to antivirus and other security software. Being registered at this altitude allows the filter registration module to intercept requests and file handles ahead of the majority of other entities in the computer that might register with the filter module .

A caching mode determination module determines a caching mode associated with a file access request. For an intercepted file access request from an application an embodiment of the caching mode determination module identifies the value of the cache hint parameter if any contained therein. For example the caching mode determination module can determine that the cache hint parameter contains the value FILE FLAG SEQUENTIAL SCAN.

For an intercepted file handle an embodiment of the caching mode determination module examines the file handle to determine the associated caching mode. If the caching mode is not apparent from the file handle an embodiment of the caching mode determination module queries the cache manager using public and or private interfaces to determine the caching mode. For example the cache determination module can examine the data structures maintained by the cache manager to determine caching modes. In another embodiment the cache determination module determines the caching mode associated with a file handle through other techniques such as by performing a set of file accesses to test the caching behavior associated with the file handle.

A caching mode alteration module temporarily alters the caching mode associated with a file access request. In one embodiment the caching mode alteration module alters the caching mode associated with a file access request by changing the value of the cache hint parameter within the request. For example if a file access request contains the hint FILE FLAG SEQUENTIAL SCAN the module can replace this value with FILE FLAG RANDOM ACCESS. In one embodiment the caching mode alteration module alters the caching mode associated with a file handle by manipulating the data structures maintained by the cache manager .

A file scanning module scans a file identified by a file handle and determines whether the file contains malicious software. Examples of malicious software include viruses worms Trojan horses spyware and adware. If the file scanning module detects malicious software it can perform a variety of actions such as cleaning the infected file quarantining the file and or reporting the existence of the malicious software to the end user. In one embodiment the file scanning module is NORTON ANTIVIRUS from SYMANTEC CORP. of Cupertino Calif.

In the security scanner module registers with the filter module to intercept file handles returned by the cache manager . At some point the application requests access to a file . The request either explicitly or implicitly includes a cache hint. The filter module receives this request and passes it to the cache manager . The cache manager opens the file for access and generates a file handle. The cache manager associates a caching mode with the file handle and this mode is usually the one specified by the cache hint. The cache manager returns the file handle to the filter module .

Upon receiving the file handle the filter module determines that the security scanner module has registered for file handles and provides it with the handle. In response the security scanner module determines whether the caching mode associated with the file handle is optimal for security scanning. If the mode is not optimal the security scanner module changes the caching mode to the optimal mode. Once the mode is changed or if no change is necessary the security scanner module scans the file for the presence of malicious software. If malicious software is found the security scanner module cleans the file quarantines the file and or performs a similar action such actions are not shown in . Upon completion of the security scan the security scanner module resets the caching mode to its original state if necessary and returns the file handle to the application that initially requested access to the file .

In the embodiment of the security scanner module registers with the filter module to intercept file access requests from applications and file handles returned from the cache manager . Eventually the application issues a file access request and that request either explicitly or implicitly include a cache hint. The filter module receives this request and passes it to the security scanner module . The security scanner module examines the cache hint in the file access request and determines whether it specifies a mode that is optimal for security scanning. If the mode is not optimal the security scanner module changes the cache hint so that it specifies the optimal mode.

The security scanner module sends the file access request to the cache manager . The cache manager opens the file for access and generates a file handle with the cache mode specified by the cache hint. The cache manager returns the file handle to the filter module and the filter module passes the file handle to the security scanner module . The security scanner module uses the file handle to scan the file for the presence of malicious software. Once scanning is performed the security scanner module resets the caching mode to its original state if necessary. This resetting can be accomplished for example by manipulating the cache manager s data structures to change the caching mode associated with the file handle to the one specified by the application s cache hint. The security scanner module returns the file handle to the application that initially requested access to the file .

In the embodiment of the security scanner module registers with the filter module to intercept file handles returned from the cache manager . Eventually the application issues a file access request. The filter module receives this request and passes it to the cache manager . The cache manager opens the file for access and generates a file handle designated as file handle in . The cache manager returns the file handle to the filter module .

Upon receiving the file handle the filter module determines that the security scanner module has registered for file handles and provides it with the handle. In response the security scanner module determines whether the caching mode associated with the file handle is optimal for security scanning. This determination can also be made by examining the file access request from the application as shown in the embodiment of .

If the caching mode is not optimal the security scanner module issues a new file access request for the same file. This new request contains a cache hint that specifies the optimal mode for security scanning. The cache manager opens the file for access and generates a second file handle designated as file handle in . The cache manager returns the second file handle to the security scanner module via the filter module . The security scanner module scans the file using either file handle if the associated cache hint is optimal or file handle if the cache hint associated with the application s original file access request is not optimal . If the security scanner module does not detect malicious software within the file it closes file handle and or returns file handle to the application .

Thus the caching mode associated with a file access request is identified. If the caching mode is not optimal for security scanning the caching mode is changed for the duration of the scan. Then the caching mode is reset to the mode requested in the original file access request.

The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.

