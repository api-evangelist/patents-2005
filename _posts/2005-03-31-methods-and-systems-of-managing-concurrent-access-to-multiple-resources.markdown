---

title: Methods and systems of managing concurrent access to multiple resources
abstract: For a method and system for managing concurrent access to multiple resources, resources are assigned to sets in such a way that it is safe to concurrently access any combination of resources in a resource set. For each resource set, a virtual machine is defined and associated with the resource set. An application is assigned to a virtual machine. When an application requests access to a resource not in the application's virtual machine, access control lists are consulted to determine whether the access should be allowed, given the other resources already accessed by the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07568236&OS=07568236&RS=07568236
owner: Microsoft Corporation
number: 07568236
owner_city: Redmond
owner_country: US
publication_date: 20050331
---
This application is a divisional of a co pending U.S. patent application Ser. No. 09 946 659 filed Sep. 5 2001 and entitled METHODS AND SYSTEMS OF MANAGING CONCURRENT ACCESS TO MULTIPLE RESOURCES .

This invention is related in general to the art of managing access to multiple resources and more particularly to a method of managing concurrent access to multiple resources.

Restricting network access to only authenticated users protects confidential information on the network from being compromised. Restricting access using common user authentication techniques however does not address network integrity issues in situations when a computer connects to more than one network. shows a typical setup of a computer connected to a private corporate network via an Ethernet card and to the public Internet via a modem . An application running on the computer has access to the two networks. This setup may give rise to security issues. For example when the application concurrently accesses the two networks the user of the application may inadvertently broadcast secure information from the private corporate network to the public Internet by mistakenly hitting a key that initiates such a broadcast. Or the user intending to send a packet to the private corporate network could unintentionally send the packet over the public Internet without proper security protection. For another example a remote computer also connected to the Internet can access the application through computer s Internet connection and from there access the private corporate network . Thus because the application has concurrent access to the two networks it presents a security hole exploitable by remote computers.

Current operating systems do not guard against security risks such as those mentioned above. A typical operating system allows for the establishment of an insecure channel linking private and public network connections that may result in an unprivileged application accessing confidential information maintained in the private network. In conventional operating systems it is difficult to enforce a policy forbidding an application from accessing public networks like the Internet while the application is connected to a private network. Such a policy can be defeated by a user using a phone line to connect to the Internet which circumvents a firewall regulating access to the private network. Moreover remote users of a private network may have no practical recourse but to use a public network like the Internet to create a Virtual Private Network VPN connection to the private network. But the VPN connection to the private network simultaneously connects the computer to both the secured private network and the unsecured public Internet. In a manner similar to the example given above a remote computer also connected to the Internet can access the computer via the Internet and then access the private network via the VPN connection.

In general an application concurrently accessing two networks creates a security breach point. Further the computer may have access to resources other than the networks for example a local file system or a network printer. In these instances similar security problems may be caused by concurrent access. For example a user s local files may be compromised by the user mistakenly printing the files on the network printer. These examples can be generalized into a multiple concurrent resource access problem by regarding the connection to the private network the connection to the Internet and the connection to the network printer as resources in a multiple resource environment.

As shown in the computer provides access to five resources represented by R R R R and R wherein R is the connection to the private network and R is the connection to the Internet. The possible dangers of concurrently accessing pairs of the resources are reflected in the entries in Table 1.

Thus it is desirable to have a method for managing access to multiple resources that enforces security considerations such as those in Table 1. Currently many operating systems applications and hardware devices provide methods of either setting up security access to a resource or enhancing the security connection to a resource. But none of them provides a method of managing concurrent access to multiple resources.

The present invention is directed to a method and system for managing concurrent access to multiple resources. Resources are assigned to sets in such a way that it is safe to concurrently access any combination of resources in a resource set and two resource sets are disjoint. For each resource set a virtual machine is defined and associated with the resource set. Each running application instance is assigned to a virtual machine. When an application instance attempts a resource access operation the permissions of the principal that is running or owns the application instance hereafter a principal refers to an entity for example a user or a system process that may be given permission to perform certain operations are compared against access control lists ACLs . These lists specify for each principal whether application instances owned by the principal may perform various resource access operations including but not limited to accessing a resource in the virtual machine assigned to the application instance or in another virtual machine creating a new resource creating a new virtual machine and concurrently accessing a resource in another virtual machine while maintaining access to resources in the virtual machine to which the application instance is currently assigned.

In one embodiment of the invention in response to a request from an application instance to either access or generate a resource in a resource set other than the resource set associated with the virtual machine to which the application instance is assigned a management facility consults the access control lists to determine whether the application instance s principal has permission to perform the requested operation. If the principal has permission the management facility enables the access. Else the management facility rejects the request.

In an alternative embodiment of the invention if the management facility finds that the principal has the requisite permission the request is fulfilled by generating a new instance of the application in association with the virtual machine of the requested resource creating that virtual machine or the new resource if appropriate.

In another alternative embodiment of the invention when the management facility grants the request the request is fulfilled by moving the instance of the application from the virtual machine to which it was originally assigned to a destination virtual machine associated with the requested resource. The moving of the instance of the application may involve creating a new instance of the application in the destination virtual machine removing the instance of the application from its original virtual machine and dropping the connection of the instance of the application on the original virtual machine to the resource set associated with the original virtual machine.

In an exemplary multiple network environment employing the present invention a computer connects to a private network and to the Internet. Two virtual machines are launched each of which is associated with one network connection. Application instances are assigned to the virtual machines. Depending upon the permissions associated with their principals some application instances may concurrently access the Internet and the private network whereas other application instances may not concurrently access both networks.

The present invention is directed to a method and system for managing concurrent access to multiple resources. The term resource used in this invention can mean for example but is not limited to a connection to a network a connection to a printer a local file system a section of shared memory or a software object.

Application instances are assigned to virtual machines each of which is associated with a set of resources. Access control lists specify for each principal whether application instances owned by the principal can perform various resource access operations. Specifically an application instance is termed unprivileged if by reason of its principal s permissions it may never concurrently access resources in more than one virtual machine. A privileged application instance on the other hand may or may not be allowed such concurrent access depending on circumstances such as the nature of the requested resources.

Although it is not required the present invention may be implemented using instructions such as program modules that are executed by a computer. Generally program modules include routines objects components data structures and the like that perform particular tasks or implement particular abstract data types. The term program includes one or more program modules.

The invention may be implemented on a variety of machines including personal computers cell phones hand held devices multi processor systems microprocessor based programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be implemented in a distributed system where tasks are performed by components that are linked through a communications network. In a distributed system cooperating modules may be sited in both local and remote locations.

Starting from the multiple resource access problem illustrated in and Table 1 Table 2 groups the resources with respect to the security access consequences listed in Table 1.

Although the resource sets A and B in Table 2 are defined according to pair wise combinations of resources this is not an absolute requirement. Rather a resource set is defined particularly in a complex situation to avoid dangerous combinations of any number of resources as appropriate to the situation.

Referring to a computer provides access to resource sets A and B . Resource set A includes resources R R and R while resource set B includes resources R and R. An unprivileged application A and a privileged application B are associated with resource set A and an unprivileged application C is associated with resource set B. These associations may be defined according to the application user s preferences or may be defined by default when the applications are initialized. Each resource set is accompanied by an access control list. The per resource set access control lists define for each principal whether the principal has permission to access or create a resource in the set. An additional system wide access control list defines for each principal whether the principal has permission to concurrently access resources in more than one resource set and to create new resource sets. The unprivileged applications A and C may not concurrently access resources in separate resource sets whereas privileged application B may or may not be allowed to do so as determined by comparing the permissions of application B s principal with the access control lists.

For example assume that privileged application B has access to resource R in resource set A and requests concurrent access to resource R in resource set B. The system first determines whether application B s principal has permission to access R. If so the system then determines whether application B s principal has permission to concurrently access R and R. If so the concurrent access is enabled. Otherwise the access request is rejected. If application B requests the creation of a new resource in resource set B the system determines whether application B s principal has such permission. If so the request is granted. Unprivileged application A may not concurrently access resources in separate resource sets even though application A s principal may have permission to access the resources individually. Similarly application A s principal might have permission to create a new resource in resource set A depending as usual on the access control lists associated with resource set A while application A may not create a new resource in resource set B.

To practice the method illustrated with respect to multiple virtual machines are launched as shown in . illustrates components of a computer system employing one embodiment of the invention. In a computer originally comprises two resource sets resource set A and resource set B . The computer has two virtual machines each of which is associated with one resource set. In particular virtual machine A VMA and virtual machine B VMB are associated with resource set A and resource set B respectively. Unprivileged application A and privileged application B are assigned to VMA and are running on a desktop A operated by VMA. A desktop represents a visual workspace that is accessed through a graphical user interface. Unprivileged application C is assigned to VMB and is running on a desktop B operated by VMB. Although the exemplary embodiment illustrated in has a desktop for each of the virtual machines this is not an absolute requirement. Other embodiments with a virtual machine lacking a desktop or having more than one desktop are not intended to be excluded by from the scope of the invention described herein. To operate the computer and the virtual machines inside the computer a management facility is supplied. In keeping with the invention the management facility may be an operating system of the computer or a program module. The management facility is adapted for managing the virtual machines connections to the resources in the resource sets in such a way that applications assigned to a virtual machine may access resources.

The management facility operates in part by comparing the permissions given to principals with various access control lists. An exemplary access control list A accompanying resource set A may specify a that applications run by users A B and C may access resource set A b that user A may access resources R and R in resource set A user B may access resources R and R and user C may access resource R and c that all three users may create new resources in resource set A. An exemplary access control list B accompanying resource set B may specify a that only users B and C may access resource set B b that users B and C may access all resources in resource set B and c that no user may create a resource in resource set B. In addition to the access control lists the management facility also maintains a record of a assignment relationships between virtual machines and application instances and b association relationships between resource sets and virtual machines.

If after determining that the access control lists do not allow a requested resource access operation to take place the management facility preferably denies the request. When the denial is based on a prohibition against concurrent access the management facility may move the requesting application from its original virtual machine to the virtual machine associated with the newly requested resource at the same time severing the application s connection to any resources in the original virtual machine. Alternatively the management facility may create a new instance of the requesting application in the virtual machine of the requested resource. In all of these possibilities the management facility honors the access control lists rules against concurrent access because no one instance of an application has concurrent access to the newly requested resources and to the resources in the application s original virtual machine.

Referring to the management facility in accordance with one embodiment of the invention comprises a persistent storage a device driver that communicates with an application and the storage and a virtual machine launching module connected to the storage and the device driver. The virtual machine launching module further comprises a resource generating module and a desktop launching module . According to one embodiment of the invention the persistent storage stores the access control lists. The virtual machine launching module is responsible for launching a new virtual machine in compliance with the stored access control lists. After launching a new virtual machine the record of the status of the computer system is updated accordingly. The device driver manages communications and data transfer for applications with respect to the stored access control lists.

In and application A has requested access to the Internet but is not allowed concurrent access to the private network and to the Internet. In one embodiment the request is simply denied. Alternatively in a first instance of application A is connected to the private network and a second instance of application A is generated in virtual machine B to enable the user of application A to access the public Internet . The second instance of application A is generated under the condition that user A has permission to access the Internet. As in the situation illustrated in no one instance of an unprivileged application has access to both the private network and the public Internet. As a second alternative in unprivileged application A is moved from virtual machine A to virtual machine B which is associated with the Internet. The original instance of application A in virtual machine A is removed.

The following is an exemplary Application Programming Interface API usable for implementing the methods of and . The API uses these abstract data types 

VmInfo A compound data type that describes a virtual machine. An implementation of this abstract data type might include such information as a name creation time etc.

VmId A value that identifies a single virtual machine and is unique within at least a single physical machine.

ResourceInfo A compound data type that describes a resource such as a network interface or a route that exists within the context of a single virtual machine.

ResourceId A value that identifies a single resource and is unique within at least a single physical machine.

Method for creating a virtual machine create vm in Principal principal in VmInfo info out VmId identifier out Status status .

Method for destroying a virtual machine destroy vm in Principal principal in VmId identifier out Status status .

Methods for obtaining information about virtual machines get vm info in Principal principal in VmId identifier out VmInfo info out Status status and get vm info set in Principal principal out set of VmInfo out Status status .

Method for updating information about a virtual machine update vm info in Principal principal in VmId identifier in VmInfo info out Status status .

Method for registering for change notifications register for vm change notifications in Module module in Principal principal in Function notify vm created in Function notify vm info updated in Function notify vm to be destroyed out Status status .

Method for notification of VM information change notify vm info updated in VmId identifier in VmInfo info .

Methods for managing a module s per virtual machine resources create resource in Principal principal in VmId origin virtual machine in VmId destination virtual machine in ResourceInfo info out ResourceId identifier out Status status and access resource in Principal principal in VmId origin virtual machine in VmId destination virtual machine in ResourceId identifier out Status status .

With reference to one exemplary system for implementing embodiments of the invention includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line . Additionally device may also have additional features and functionality. For example device may also include additional storage removable or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by device . Any such computer storage media may be part of device .

Device may also contain one or more communications connections that allow the device to communicate with other devices. Communications connections are an example of communications media. Communications media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communications media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. As discussed above the term computer readable media as used herein includes both storage media and communications media.

Device may also have one or more input devices such as a keyboard mouse pen voice input device touch input device etc. One or more output devices such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at greater length here.

It will be appreciated by those of skill in the art that a new and useful method and system for managing access to multiple resources has been described herein. In view of the many possible embodiments to which the principles of this invention may be applied however it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of invention. Those of skill in the art will recognize that the illustrated embodiments can be modified in arrangement and detail without departing from the spirit of the invention. Therefore the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof.

