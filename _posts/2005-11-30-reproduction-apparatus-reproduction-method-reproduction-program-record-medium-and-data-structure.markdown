---

title: Reproduction apparatus, reproduction method, reproduction program, record medium, and data structure
abstract: A reproduction apparatus has a player section, a content reproduction section, an interface section. The player section has a read section reading data from the record medium on which the content data containing at least one of a video data stream and an audio data stream and a reproduction control program controlling the reproduction of the content data are recorded, an input section accepting an input from a user, and an output section outputting the reproduced content data. The content reproduction section reproduces the content data according to the reproduction control program. The interface section interfaces among the content reproduction section, the reproduction control program, and the player section. When a command representing an end of the reproduced content data is described in the reproduction control program, the reproduction control program supplies the command to the interface section and the interface section executes a process corresponding to the command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08139926&OS=08139926&RS=08139926
owner: Sony Computer Entertainment Inc.
number: 08139926
owner_city: Tokyo
owner_country: JP
publication_date: 20051130
---
The present invention contains subject matter related to Japanese Patent Application JP 2004 350192 filed in the Japanese Patent Office on Dec. 2 2004 the entire contents of which being incorporated herein by reference.

The present invention relates to a reproduction apparatus that allows the reproduction control for programs recorded on a large capacity record medium to be easily performed and to a reproduction method thereof a reproduction program thereof a record medium thereof and a data structure thereof.

So far an interactive function that displays a menu screen and sub menu screens for various settings and buttons button images on the menu screens for user s data inputs and that executes a selected function has been accomplished for sell packages that are packages of which video data and audio data such as a movie a drama a music concert or the like is recorded on a record medium such as a DVD.

Now Compact Disc Digital Audio CD DA that is a typical example of such cell packages will be described. One CD DA generally contains a plurality of tracks of music data. Each track is assigned a number. When a normal reproduction is performed music data are successively reproduced in the ascending order of track numbers. After music data with the largest track number have been reproduced the reproduction is stopped.

In addition to the normal reproduction operation which reproduces music data in the order of track numbers many CD player models have other reproduction functions such as a random reproduction a shuffle reproduction and a disc repeat reproduction that reproduce music data in the order of other than track numbers. The random reproduction is a function that randomly selects a track of music data from those recorded on a disc and reproduces the selected track of music data after the completion of the reproduction of a particular track of music data. The shuffle reproduction is a function that reproduces music data recorded on the disc irrespective of the order of track numbers and stops the reproduction after the completion of the reproduction of all tracks of music data recorded on the disc. In the normal reproduction the disc repeat reproduction repeats the normal reproduction from the beginning track of music data after the completion of the reproduction of the last track of music data. In the shuffle reproduction the disc repeat reproduction changes the reproduction order of track numbers and reproduces the music data in the changed order.

In the CD DA the arrangement of music data is designated by only track numbers. Thus it is clear that the beginning of a content is the beginning of music data with track number 1 and the end of the content is the end of music data with the largest track number.

On the other hand there is a system that performs a reproduction control for contents of video data and audio data recorded on a record medium according to commands or programs recorded thereon. For example a plurality of contents such as a main part of a movie a preview a movie making scene a menu and so forth are recorded on a DVD video disc. When the contents are reproduced from the disc their reproductions are controlled according to the commands and programs. Patent Document 1 discloses a technology that performs a reproduction control for contents according to such commands and programs.

However in such a system which performs a reproduction control according to commands and programs it was difficult for a player to detect an end of a content.

When an end credit portion of a movie is reproduced it can be predicted that the content comes to the end. However actually the end of the end credit portion is not always the end of the content. For example if a program that is executed upon the completion of the end credit portion causes a menu screen to appear it can be thought that a pair of a menu screen and a main part of a movie is a content. Thus it cannot be determined that the end of the main part of a movie be the end of the content. In addition a reproduction control program may be thought of as a part of a content.

Thus if a content contains a reproduction control program it is very difficult to determine the end of the content. In other words the end of a content depends on how the content creator recognizes the content. Thus only the content creator knows the end of the content.

The DVD video standard does not define a means that allows the content side to inform the player side that a particular part of a content is the end of a content. Thus it is difficult for the DVD player that reproduces data from a DVD video disc to accomplish the player s unique functions.

For example the player may not have the repeat function that repetitively reproduces a content. Instead the player may repetitively reproduce only a single title one sequential program chain to directly and continuously reproduce a content from the beginning to the end. Thus it was difficult to accomplish player s unique functions.

In view of the foregoing it would be desirable to provide a reproduction apparatus that allows player s unique functions to be easily accomplished when the reproduction control for contents is performed according to a reproduction control program a reproduction method thereof a reproduction program thereof a record medium thereof and a data structure thereof.

According to an embodiment of the present invention there is provided a reproduction apparatus that reproduces content data recorded on a record medium. The reproduction apparatus has a player section a content reproduction section an interface section The player section has a read section that reads data from the record medium on which the content data containing at least one of a video data stream and an audio data stream and a reproduction control program controlling the reproduction of the content data are recorded an input section that accepts an input from a user and an output section that outputs the content data that are reproduced. The content reproduction section reproduces the content data according to the reproduction control program. The interface section interfaces among the content reproduction section the reproduction control program and the player section When a command that represents an end of the content data that are reproduced is described in the reproduction control program the reproduction control program supplies the command to the interface section and the interface section executes a process corresponding to the command.

According to an embodiment of the present invention there is provided a reproduction method of reproducing content data from a record medium. The content data are reproduced from the record medium according to a reproduction control program that is read from the record medium on which the content data containing at least one of a video data stream and an audio data stream and the reproduction control program controlling the reproduction of the content data are recorded. The content reproduction step the reproduction control program and a player section having a read section that reads data from the record medium an input section that accepts an input from a user and an output section that outputs the content data that are reproduced are interfaced. When a command that represents an end of the content data that are reproduced is described in the reproduction control program the reproduction control program supplies the command to the interface step and the interface step executes a process corresponding to the command.

According to an embodiment of the present invention there is provided a reproduction program that causes a computer device to execute a reproduction method of reproducing content data from a record medium. The content data are reproduced from the record medium according to a reproduction control program that is read from the record medium on which the content data containing at least one of a video data stream and an audio data stream and the reproduction control program controlling the reproduction of the content data are recorded. The content reproduction step the reproduction control program and a player section having a read section that reads data from the record medium an input section that accepts an input from a user and an output section that outputs the content data that are reproduced are interfaced. When a command that represents an end of the content data that are reproduced is described in the reproduction control program the reproduction control program supplies the command to the interface step and the interface step executes a process corresponding to the command.

According to an embodiment of the present invention there is provided a record medium from which data are readable by a computer device and on which a reproduction program is recorded the reproduction program causing the computer device to execute a reproduction method of reproducing content data from a record medium. The content data are reproduced from the record medium according to a reproduction control program that is read from the record medium on which the content data containing at least one of a video data stream and an audio data stream and the reproduction control program controlling the reproduction of the content data are recorded. The content reproduction step the reproduction control program and a player section having a read section that reads data from the record medium an input section that accepts an input from a user and an output section that outputs the content data that are reproduced are interfaced. When a command that represents an end of the content data that are reproduced is described in the reproduction control program the reproduction control program supplies the command to the interface step and the interface step executes a process corresponding to the command.

According to an embodiment of the present invention there is provided a record medium from which data are readable by a computer device and on which content data containing at least one of a video stream and an audio stream and a reproduction control program controlling the reproduction of the content data are recorded. The reproduction control program and the content data according to the reproduction control program are reproduced. A player section having a read section that reads data from the record medium an input section that accepts an input from a user and an output section that outputs the content data that are reproduced is interfaced. A command that represents an end of the reproduced content data is described to the interface step.

According to an embodiment of the present invention there is provided a signal having a data structure of which content data containing at least one of a video stream and an audio stream and a reproduction control program controlling the reproduction of the content data are multiplexed that is transmissible and receivable through a communication line and that is processible by a computer device. The content data are reproduced according to the reproduction control program. A command that informs the computer device of an end of the content data is described in the content data the command being read by the computer device while the computer device is reproducing the content data.

According to an embodiment of the present invention the reproduction apparatus has a player section a content reproduction section an interface section. The player section has a read section configured to read data from the record medium on which the content data containing at least one of a video data stream and an audio data stream and a reproduction control program controlling the reproduction of the content data are recorded an input section configured to accept an input from a user and an output section configured to output the content data that are reproduced. The content reproduction section reproduces the content data according to the reproduction control program. The interface section interfaces among the content reproduction section the reproduction control program and the player section. When a command that represents an end of the content data that are reproduced is described in the reproduction control program the reproduction control program supplies the command to the interface section and the interface section executes a process corresponding to the command. Thus although the content data are reproduced according to the reproduction control program when the player section is informed of an end of the content the player section can perform a unique reproduction operation.

According to an embodiment of the present invention the content data are reproduced from the record medium according to a reproduction control program that is read from the record medium on which the content data containing at least one of a video data stream and an audio data stream and the reproduction control program controlling the reproduction of the content data are recorded. The content reproduction step the reproduction control program and a player section having a read section configured to read data from the record medium an input section configured to accept an input from a user and an output section configured to output the content data that are reproduced are interfaced. When a command that represents an end of the content data that are reproduced is described in the reproduction control program the reproduction control program supplies the command to the interface step and the interface step executes a process corresponding to the command. Thus although the content data are reproduced according to the reproduction control program when the player section is informed of an end of the content the player section can perform a unique reproduction operation.

According to an embodiment of the present invention a reproduction control program and content data according to the reproduction control program are reproduced from a record medium from which data are readable by a computer device and on which the content data containing at least one of a video stream and an audio stream and the reproduction control program controlling the reproduction of the content data are recorded. A player section having a read section configured to read data from the record medium an input section configured to accept an input from a user and an output section configured to output the content data that are reproduced is interfaced. A command that represents an end of the reproduced content data is described to the interface step. Thus although the content data are reproduced according to the reproduction control program when the player section is informed of an end of the content in the computer device that reproduces data from the record medium the player section can perform a unique reproduction operation.

According to an embodiment of the present invention in a data structure content data containing at least one of a video stream and an audio stream and a reproduction control program controlling the reproduction of the content data are multiplexed. The data structure is transmissible and receivable through a communication line. The data structure is processible by a computer device. The content data are reproduced according to the reproduction control program. A command that informs the computer device of an end of the content data is described in the content data the command being read by the computer device while the computer device is reproducing the content data. Thus although the content data are reproduced according to the reproduction control program when the player section is informed of an end of the content in the computer device that process data that has this data structure the player section can perform a unique reproduction operation.

As described above according to an embodiment of the present invention a script program that performs a reproduction control for a content explicitly informs the player of an end of the content. Since the player receives the information that represents the end of the content the player can easily accomplish a unique reproduction control function that is executed after the end of the content.

An operation of the player to be performed at an end of a content can be designated according to for example a setting of the player of whether the disc repeat function has been set and the state of the content of whether a menu screen is provided. Thus an improper situation for example appearance of a black screen which results from lack of the consideration for the user can be prevented from taking place. In addition a user friendly interface can be provided.

When the content creator only describes method end at a portion that he or she wants to designate as an end of a content the player automatically performs a proper process without need to provide a complicated program. Thus a lot of time and effort to create the content can be saved.

These and other objects features and advantages of the present invention will become more apparent in light of the following detailed description of a best mode embodiment thereof as illustrated in the accompanying drawings.

For easy understanding a system according to an embodiment of the present invention will be described. According to this embodiment of the present invention a player model is described in a scrip language referred to as the ECMA script. The ECMA script is a cross platform script language based on JavaScript registered trademark of Sun Microsystems Inc. defined by the European Computer Manufacturers Association ECMA . The ECMA script has high compatibility with HTML documents and can define original objects. Thus the ECMA script is suitable for a player model of this embodiment of the present invention.

In other words the DVD Video of the related art uses non general purpose commands defined in the DVD Video standard to describe a control program that accomplishes interactive functions. A control program is dispersedly embedded in a plurality of files at plurality of positions of a data file or in an AV file. The conditions and order in which an embedded control program is executed are defined in the DVD standard.

In the DVD Video system it is difficult to structures a general purpose content creation system. Thus contents are created using a template with which a story is created according to a prepared scenario. When complicated contents are created it is necessary to use a custom made content creation system instead of a template. According to this embodiment of the present invention to solve such a problem the ECMA script which is a general purpose and extensible script language is used to control AV contents.

In the following description the standard of this embodiment of the present invention is referred to as the Universal Media Disc Video Standard UMD is a registered trademark of Sony Computer Entertainment Inc. . The script portion of the UMD Video Standard is referred to as the UMD Video Script Standard.

Next the UMD Video Standard will be described in brief. shows the structure of layers of the UMD Video Standard. The UMD Video Standard defines three layers a script layer a play list layer and a clip layer. According to this structure a stream is managed.

The UMD Video Standard deals with MPEG2 packetized elementary streams of video data audio data and subtitle data that have been digitally encoded as an MPEG2 stream of which they are multiplexed. The MPEG2 stream of which elementary streams of video data audio data and subtitle data are multiplexed is referred to as a clip AV stream. The clip AV stream is contained in a clip AV stream file. When a clip AV stream file is recorded a clip information file is correspondingly created in the relationship of one to one. A set of a clip information file and a clip AV file that corresponds to the clip information file is referred to as a clip.

A clip is a unit of data that are recorded at a time on a disc. The reproduction order of clips is managed in the play list layer that is an upper layer of the clip layer. The play list layer is a layer that designates the reproduction path of clips. The play list layer contains at least one play list PlayList . A play list is a group of play items PlayItems . A play item contains one pair of an in point and an out point that represent the reproduction range of a clip. With a plurality of play items clips can be reproduced in any order. Play items can designate the same clip. An in point and an out point of a clip AV stream file are designated by time stamps clip internal times . The time stamps are converted into byte positions of a clip AV stream with information of a clip information file.

A play list is just a structure in which play items that represent all or part of clips are reproduced in a designated order. With only a play list it is difficult to accomplish a branch of the reproduction of clips and interactivity to the user. According to this embodiment of the present invention a plurality of play lists are contained together in one file PLAYLIST.DAT. 

The script layer is described in a UMD video script of which a language specification ECMA script is extended. The UMD video script is a script of which the ECMA script is extended to accomplish original functions for the UMD Video.

The script layer is an upper layer of the play list layer. The script layer is composed of a sequence of commands that cause the player to reproduce a play list and that sets the player. With commands in the script layer a play list reproduction can be accomplished in such a manner that one of streams according to a plurality of languages is selected or play items are reproduced according to a play list selected according to a predetermined condition. An example of an application that uses the play list reproduction that has such a conditional branch is a multi story. The script layer accomplishes an interactive function to the user.

According to this embodiment of the present invention the script layer is composed of a file referred to as a resource file. The resource file contains script data script program described according to the real ECMA scrip sound data for sound effects for button operations a screen design composed of image data for a background image of a menu screen and image data bit map data with which GUI parts such as button images are displayed.

There may be a plurality of resource files. According to this embodiment of the present invention resource files are assigned file names according to a predetermined naming rule. For example extension RCO of the file name represents that the file is a resource file.

Next a model of a reproduction apparatus player that reproduces data according to the UMD Video Standard this mode is referred to as the player model will be described. The player reads a resource file a play list file and a clip information file from a disc. Thereafter the player reads clip AV stream files from the disc in the reproduction order defined in the resource file the play list file and the clip information file and reproduce video data audio data subtitle data and so forth from the clip AV stream files.

According to the language specification of a script program a functional block that reproduces a play list is implemented as an object of the script program. In the UMD Video Standard an object that reproduces a play list is referred to as the movie player object. Commands that cause the player to reproduce a play list and set the player are methods that the movie player object has. The movie player object is controlled by methods in the script layer. At this point a function that allows the movie player object to inform the script layer of a state change and a reproduction position is needed. This function corresponds to an operation of which the movie player object issues an event to a script program. A process corresponding to the event is described as an event handler.

When a model of which information is sent from the movie player object to the script program with events and the script program controls the movie player object with objects is created the script program can control the reproduction of a clip AV stream.

In addition since the movie player and the movie player object are thought to be substantially the same they will be described with the same reference numeral.

In the movie player reads a clip AV stream file with a method received from a lower layer native implementation platform shown in according to a user s input and with a method received from an upper layer script layer according to a database of play lists and clip information and decodes and displays the clip AV stream.

The inside of the movie player object depends on the implementation of the UMD video player that reproduces the UMD Video. The script layer provides the movie player object with an application programming interface API that uses methods and properties as black boxed objects. In this example the UMD video player represents a real device that implements a movie player. All UMD video players implement a movie player according to the UMD Video Standard and have reproduction compatibility therewith.

As shown in the movie player object has three input output paths that are a path that accepts a control command from the native implementation platform a path that informs the script layer of an event and a path that accepts the method from the script layer .

The control command is a command that controls the operation of the movie player and that is received from the native implementation platform . The native implementation platform is an interface between a device unique portion of the UMD video player as a real device and the movie player . The event is a script event that is sent from the movie player to the script layer . The method is a method with which a script program of the script layer issues a command to the movie player .

The movie player object contains a database of play lists and clip information according to the UMD Video Standard. The movie player invalidates masks the user s input and converts a reproduction position designated with time into a byte position of the clip AV stream according to the database .

A playback module in the movie player object decodes the clip AV stream which is an MPEG2 program stream PS of which video data audio data and subtitle data are multiplexed. The playback module has two states that are a play state and a stop state and changes one state to the other state with a control command and a method see . It should be noted that a clip AV stream is not limited to an MPEG2 PS. For example the model can treat an MPEG2 transport stream TS to be the same as an MPEG2 PS

The script layer is a layer that executes a script program according to the UMD Video Standard controls the movie player object and displays a screen. The script layer accomplishes a scenario that the content creator side intends to create. The script layer issues the method to the movie player object and receives the event therefrom. The script layer exchanges a key event corresponding to the users input and the method that causes the native implementation platform to display a screen with the native implementation platform .

The native implementation platform also has various functions that are not defined in the UMD Video Standard. According to this embodiment of the present invention there is the method with which the script layer issues a command to the native implementation platform an object of which a function is abstracted is defined in the native implementation platform . The script program considers the method to be included in the object. This is because a method is included in an object. Thus a controller object is defined in the native implementation platform . The method is defined to be a method of the controller object .

For example buttons on a menu screen are displayed by the native implementation platform with the method supplied from the script program of the script layer to the native implementation platform . When the user selects or decides one of the buttons the native implementation platform informs the script layer of the key event corresponding to the user s input . The script program in the script layer performs a process for the key event corresponding to the user s input .

The roles of the movie player and the script layer are designated so that while the movie player decodes video data audio data and subtitle data and controls the display of the decoded data the script layer places and displays part images hereinafter referred to as GUI parts that compose the graphical user interface GUI such as buttons and processes corresponding to selection and decision of GUI parts.

The native implementation platform is a platform for which the movie player object and the script program operate. When the real UMD video player is a hardware device the UMD video player implements the native implementation platform to mediate processes between the hardware and the movie player .

For example the native implementation platform accepts the user s input from the user and determines whether the accepted user s input is a command for the movie player object or a command for a displayed button in the script layer . When the determined result represents that the user s input is a command for the movie player the native implementation platform converts the user s input into the control command that is an internal control command for the movie player and issues the control command to the movie player .

On the other hand when the determined result represents that the user s input is a command for a displayed GUI part in the script layer the native implementation platform informs the script layer of the key event corresponding to the user s input . The native implementation platform can display a button image on the screen with the method issued from the script layer according to the user s input . In other words the native implementation platform and the script layer can directly exchange an event and a method not through the movie player .

In addition the native implementation platform can access the properties of the movie player and check the state of the movie player .

Next the movie player will be described in details. shows an example of the internal structure of the movie player . As described above the movie player is composed of the database and the playback module . The database is an area that stores information of a play list read from the disc and information of clips namely clip information.

The playback module is composed of a decoder engine and a property . The property is a value that represents the state of the playback module . The property has two types of properties A read only parameters whose values depend on the initial setting of the movie player like a language code and a property B player state whose value varies depending on the state of the playback module .

The values of the properties A whose values depend on the initial setting are set by a native system for example a real device. Thus the values of the properties A are not changed by a play list clip information and a script program. The values of the properties A can be read only from a script program. In contrast the value of the property B which represents the state of the playback module can be read from a script program. In addition the value of the property B can be written from a particular script program.

In this operation model it is assumed that a play list and clip information are pre loaded from the disc before a clip AV stream is reproduced. Instead the operations of the movie player model may be accomplished in another implementation.

The movie player object reproduces a play list designated by the script layer or the native implementation platform . For example the movie player references the database and obtains the reproduction position of the clip AV stream as the byte position of the file according to the designated play list. In the playback module the decoder engine controls the decoding of the clip AV stream according to the information of the reproduction position.

As shown in the movie player has two states that are a play state and a stop state depending on the reproduction state of a play list. The play state represents that a play list is designated and it is being reproduced. The play state includes a normal reproduction variable speed reproductions such as a double speed reproduction and a speed reproduction a fast forward a fast reverse and a pause. A so called step reproduction of which each frame is forward reproduced and reverse reproduced is a state of which the pause state and the play state are repeated. The stop state represents that a play list is not being reproduced. In the stop state a play list is not selected and the value of the player state that represents currently reproduced play list number is indefinite.

The state of the movie player depends on the state change between the play state and the stop state of the decoder engine of the movie player . The value of the property B is updated according to the state change of the decoder engine .

Resume information stores the state that exits immediately before the stop state occurs. After the movie player decodes a play list when the movie player is in the play state if the state of the movie player is changed to the stop state the resume information stores the state that exists immediately before the stop state occurs. In addition the resume information can be stored in a nonvolatile memory of the player as hardware for each title of the disc. The disc has unique identification information referred to as a title ID for each title. The resume information and the identification information are correlatively stored. Thus when the state of the disc having the title according to the identification information is changed from the stop state to the play state data can be reproduced from the position at which the stop state occurred according to the resume information .

Next an event model of the movie player will be described. In the play state that the movie player reproduces a play list the movie player generates various events. The events execute process programs that are described as scripts and referred to as event handlers. The event handlers are methods called upon the occurrence of events. A program execution model that starts executing a process program upon the occurrence of an event is referred to as an event driven model. In the event driven model an irregular event occurs. When the event occurs a predetermined program is executed. According to this embodiment of the present invention a script program controls the operations of the movie player object with an event handler group.

Since the system side selects an event handler called upon the occurrence of an event the content creator side does not need to describe a process that determines what event occurred in a script program.

In such a manner while the player is operating various events occur. When an upper level program is informed of the occurrence of an event the upper level program can know the state of the player. When the upper level program provides programs event handlers that are executed corresponding to events of which it is informed it can handle various events. Events and event handlers will be described later.

When the content creator side has not described an event handler the upper level program executes an operation default event handler that is built in the player and that is defined in the standard or ignores the event. When it is not necessary for a particular event to perform any process if an event handler according to the event is not described the event can be actively ignored.

As event models there may be an event listener model a single method model and so forth. In the event listener model an object registers a listener according to a predetermined event to a player object. When an event that occurs in the player object is an event that has been registered the player object transmits the event to the object that has registered the event. The object executes a method that corresponds to the event. In the single method model one method is called whenever an event occurs.

The event model of this embodiment of the present invention is simpler than the event listener model that needs processes such as an event registration process and an event deletion process. The single method model needs to know what event occurred and describe in the method a preprocess that changes a process routine prepared for each event that occurs. Since the method is implemented by the content creator side even if the model is simple the load of the content creator side increases. In addition whenever an event occurs since one large process program method is called a large memory area will be used and the execution speed will become slow. Thus since the model of this embodiment of the present invention provides process programs event handlers for individual events it can be said that this model is superior to the other models at these points.

Next the external specifications of the movie player object will be described. Generally an object defined according to the ECMA Script Language Specifications has properties and methods. Like this object as shown in and the movie player object of this embodiment of the present invention has properties and methods. When an external object designates the object name and the property name of a target object the external object can directly read and write the designated property of the target object. Instead when method setXXX where XXX represents the property name that sets the property value and method getXXX that reads the property value are defined the methods can read and write this property of the other object.

When a disc is loaded into the movie player a scrip file that is read from the disc is decided according to the language code represented by property languageCode that is set in the read only parameters A. If the disc loaded into the movie player does not have a script file according to the language a default script file is read from the disc. For example a file at the beginning of a plurality of script files is read as a default script file from the disc.

The dual monaural is a mode of which left and right L R channels of stereo audio are independently used as monaural audio channels.

When the movie player is in the play state or the pause state each property that belongs to the player state B represents these information. When the movie player is changed to the stop state each property that belongs to the player state B is backed up as the resume information . At this point the contents of the player state B may be cleared.

According to the UMD Video Standard video data can be displayed at a part of the display screen. The following four methods are methods that display video data at a part of the display screen. Method setPos sets the display position of video data. Method getPos obtains the display position of video data. Method setSize sets the display size of video data. Method getSize obtains the display size of video data.

In reality the movie player and the native implementation platform are integrated. In other words the movie player UMD and the native implementation platform correspond to hardware as the UMD player that loads a disc and reproduces video data from the disc and software that controls the UMD player. What portions are hardware and software depend on the implemented structure. For example when the UMD player is a personal computer or the like the other portions except for the disc dive are composed of software. When a single UMD player is used besides the disc drive for example a video decoder an audio decoder and so forth may be composed of hardware. Thus methods commands and events are not always explicitly exchanged between the movie player and the native implementation platform as shown in .

On the other hand with respect to key inputs of the user as shown in the user s input is received by the native implementation platform at the first. In other words the native implementation platform receives a key input of the user as the user s input . The native implementation platform determines whether the user s input is a command to the movie player or an event to a script program in the script layer . Depending on the determined result the native implementation platform issues the control command or the key event and informs the corresponding upper layer movie player or the script layer of the issued control command or key event .

Key VK NEXT provides a function corresponding to a next designation key that inputs a value that represents next. Key VK PREVIOUS provides a function corresponding to a previous designation key that inputs a value that represents previous. With key VK NEXT and key VK PREVIOUS the user can designate a jump to for example the next chapter and the previous chapter respectively.

Key VK ANGLE provides a function corresponding to an angle change key that designates an angle change for multi angle video data. Key VK SUBTITLE provides a function corresponding to a subtitle change key that designates English subtitle Japanese subtitle and subtitle ON OFF. Key VK AUDIO provides a function corresponding to an audio change key that designates an audio mode such as surround mode or bilingual mode. Key VK VIDEO ASPECT provides a function corresponding to an aspect change key that changes an aspect ratio of video data.

Key VK MENU provides a function corresponding to a menu key that displays a menu. Key VK ENTER provides a function corresponding to an enter key that completes a command input or a data input. Key VK RETURN provides a function that returns the process by one step.

Key VK COLORED KEY1 provides a function corresponding to a colored function key 1. Key VK COLORED KEY2 provides a function corresponding to a colored function key 2. Key VK COLORED KEY3 provides a function corresponding to a colored function key 3. Key VK COLORED KEY4 provides a function corresponding to a colored function key 4. Key VK COLORED KEY5 provides a function corresponding to a colored function key 5. Key VK COLORED KEY6 provides a function corresponding to a colored function key 6.

Since the functions of the key inputs shown in are different in their roles from those of the key inputs shown in the native implementation platform needs to select destinations that are informed of the key inputs. As described above key inputs shown in designate the reproduction operations of video data audio data and subtitle data. When the native implementation platform receives one of the key inputs shown in as the user s input the native implementation platform converts the received key input into a command shown in and informs the movie player of the converted command.

On the other hand since the key inputs shown in are the user s input to the GUI the script layer which composes a screen and places buttons needs to be informed of these inputs. When the native implementation platform receives a key input shown in as the user s input the native implementation platform converts the key input into the event shown in and informs the script layer of the event . shows examples of the events according to the key inputs.

Next commands shown in will be described in detail. Command uo timeSearch playListTime starts reproduction from a designated time of a play list that is being reproduced. Argument playListTime represents the time of the play list when the beginning of the play list is 0. Since this command does not designate a play list number the time represented by argument playListTime is a designated time in the range of the play list that is being reproduced. Command uo play starts reproduction at normal reproduction speed. The start position is decided according to the resume information . When there is no resume information this user s operation is invalidated. This command corresponds to the execution of method play without the play list number. With this command the user is incapable of designating a play list number.

Command uo playChapter chapterNumber starts reproduction from a chapter designated by argument chapterNumber in a play list that is being reproduced. Without the chapter number this command starts reproduction from the beginning of the chapter that is being reproduced. This command corresponds to method playChapter without the chapter number. Command uo playPrevChapter starts reproduction from the immediately preceding chapter. Command uo playNextChapter starts reproduction from the immediately following chapter.

Command uo jumpToEnd jumps to the end of the play list. This command corresponds to a user s operation that stops the reproduction and generates event playListEnd. With this command the script layer executes event handler onPlayListEnd. Command uo forwardScan speed starts forward reproduction at a reproduction speed designated by argument speed. Command uo backwardScan speed starts backward reproduction at a reproduction speed designated by argument speed. Argument speed of these commands uo forwardScan speed and uo backwardScan speed depends on the implementation of the UMD video player.

Command uo playStep forward starts step forward reproduction. Command uo playStep backward starts step backward reproduction Command uo pauseOn pauses reproduction Command uo pauseOff cancels the pause state of reproduction.

Command uo setAudioEnabled Boolean turns ON OFF an audio stream. When this command is executed the value of flag audioFlag is correspondingly changed. Command uo setSubtitleEnabled Boolean turns ON OFF a subtitle stream. When this command is executed the value of flag subtitleFlag is correspondingly changed. Command uo angleChange changes a display angle. When the movie player is informed of this command corresponding to the user s operation the movie player informs the script layer of event angleChange. Command uo audiochange audioStreamNumber changes an audio stream to be reproduced. Command uo changeAudioChannel value changes the number of audio channels or changes one channel to the other channel in the dual monaural reproduction. When this command is executed the value of flag audioFlag is correspondingly changed. Command uo subtitleChange subtitleStreamNumber changes the existing subtitle stream to another subtitle stream.

Next the relationship between events shown in and methods of the movie player will be described in detail. Event menu jumps to a menu. The native implementation platform informs the script layer rather than the movie player of this event. When the script layer receives event menu the script layer executes event handler onMenu. Event exit is an event that the native implementation platform issues when it completes an UMD video application. When the script layer receives event exit the script layer executes event handler onExit.

Event resourceChanged is an event that the native implementation platform generates when the existing resource file is changed to another resource file. When the script layer receives event resourceChanged the script layer executes event handler onResourceChanged.

Event up event down event left event right event focusIn event focusOut event push and event cancel are events that occur when button images as GUI parts on the screen are focused. The native implementation platform informs the script layer rather than the movie player of these events. When a button image is focused for example the cursor displayed on the screen represents the coordinates of the button image so that the button image can be selected. Event up event down event left and event right occur when an up button image a down button image a left button image and a right button image are focused respectively. Event focusIn occurs when any button image is focused. Event focusOut occurs when any focused button image is defocused. Event push occurs when a press operation is performed for any focused button image. Event cancel occurs when a cancel operation is performed against the press operation for any button image.

Event autoPlay and event continuePlay are events that cause the script layer to start executing a script. Event autoPlay is an event that causes a script to automatically start execution when a disc is loaded. Event continuePlay causes a script to resume execution to the position at which the execution of a script was stopped according to for example the resume information when a disc is loaded.

There are programs that are executed when events shown in occur. These programs corresponding to the events are referred to as event handlers. Events and event handlers can be correlated using for example names. The name of an event handler is created by adding a prefix on to the name of the corresponding event. and show examples of event handlers. When the content creator describes the contents of event handlers the UMD video player can perform various operations that the content creator intends.

Event mark and event handler onMark are executed when an event mark is detected. An event mark is embedded in for example a play list. While the movie player is reproducing a play list the movie player detects an event mark from the play list. When the movie player detects the event mark the movie player informs the script layer of event mark. The script layer executes event handler onMark corresponding to event mark. Likewise event playListEnd and event handler onPlayListEnd are executed when the reproduction of a play list is completed. Event chapter and event handler onChapter are executed when a chapter mark is detected. A chapter mark is embedded in for example a play list and detected by the movie player while it is reproducing the play list.

Event angleChange and event handler onAngleChange are executed when an angle change is designated by a user s operation. For example when key input VK ANGLE is input to the native implementation platform by a user s operation as the user s input the native implementation platform converts the user s input into command uo angleChange and supplies it to the movie player . The movie player generates event angleChange corresponding to command uo angleChange and supplies event angleChange to the script layer . The script layer executes event handler onAngleChange corresponding to event angleChange. Likewise event audiochange and event handler onAudioChange are executed when the audio change is designated by a user s operation. Event subtitleChange and event handler onSubtitleChange are executed when a subtitle change is designated by a user s operation.

Event menu and event handler onMenu jump to a menu. Event menu is an event of which the native implementation platform informs the script layer when the menu key is pressed by a user s operation The script layer receives this event executes event handler onMenu corresponding thereto and arranges and displays GUI parts that compose a menu screen with event handler onMenu . Event exit and event handler onExit are an event and the corresponding event handler. When the native implementation platform completes a UMD video application the native implementation platform generates event exit.

When the completion of the operation of the UMD video player is designated by for example a user s operation the native implementation platform informs the script layer of event exit. When the script layer receives event exit the script performs an exit process with event handler onExit .

Event resourceChanged and event handler onResourceChanged are an event and the corresponding event handler. After the native implementation platform has changed the existing resource file to another resource file the native implementation platform generates event resourceChanged.

Event autoPlay event handler onAutoPlay event continuePlay and event handler onContinuePlay cause a script to start execution.

Besides event handlers for the controller object there are event handlers for buttons. However event handlers for buttons do not closely relate to this embodiment of the present invention their description will be omitted.

Next with reference to a flow chart shown in an example of a process that executes a provided program upon the occurrence of an event of a user s input will be described in brief. shows an example of which while the UMD video player is normally reproducing data from a disc when the user presses a key to causes the UMD video player to reproduce the next chapter for example next key the UMD video player jumps to the next chapter according to the key input starts reproducing data from the next chapter and displays a provided message on the screen.

While the UMD video player is normally reproducing data from the disc when the user presses the key next on the remote control commander of the UMD video player at step key VK NEXT is supplied as the user s input to the native implementation platform . The native implementation platform generates user command uo playNextChapter corresponding to the user s input at step S . The native implementation platform informs the movie player of user command uo playNextChapter .

When the movie player receives command uo playNextChapter the movie player searches the database for the position of the next chapter mark based on the current reproduction position according to play list information at step S . At step S it is determined whether the next chapter mark exists. When the determined result represents that the next chapter mark does not exist the movie player does not jump to the next chapter but continues the current reproduction operation.

In contrast when the determined result at step S represents that the next chapter mark exists the flow advances to step S. At step S the movie player stops the current reproduction and obtains the byte position of the next chapter mark in the clip AV stream file from feature point information of the clip information file of the database . At step S the movie player accesses the obtained byte position of the file and starts reproducing the stream from the position.

After step S a process that displays a message that informs the user that the existing chapter was changed to the next chapter on the screen is performed. When the existing chapter is changed to the next chapter and the reproduction is started from the beginning of the next chapter event chapter occurs at step S . For example the movie player detects a chapter mark at the beginning of the chapter and generates event chapter. The movie player informs the script layer of event chapter. In addition the movie player informs the script layer of the chapter number of the chapter to be jumped. The script layer starts executing an event handler corresponding to the informed event for example event handler onChapter at step S .

In this example it is assumed that an operation that displays a message that represents that the chapter was changed on the screen is described in the event handler. A script in the script layer executes the event handler obtains the chapter number of which the movie player informed the script layer when the event occurred at step S and causes the native implementation platform to display a predetermined message that represents for example the beginning of the chapter of the obtained chapter number on the screen. Accordingly the native implementation platform displays the message on the screen at step S and completes the process of the event handler at step S .

In the foregoing process when the user operates the key next which causes the movie player to start reproducing data from the next chapter the movie player jumps to the next chapter. When the movie player starts reproducing the next chapter the movie player displays a message that represents the beginning of the next chapter on the screen.

Thus an event of a user s input causes the state of the movie player to be changed and a new event to occur. With new events the movie player can perform various processes.

The player model can reproduce video data audio data and subtitle data. With events that the content creator intended so that they occur at times during the reproduction and corresponding event handlers that are executed corresponding to the events operations that he or she intended can be accomplished. In addition when a user operation is preformed of the player while it is reproducing a play list the native implementation platform supplies to the movie player a control command corresponding to the user input as the user s operation so that the existing state of the player is changed to another state that the user desired. In addition the native implementation platform informs the script in the script layer of an event corresponding to the user s input as the user s operation to the player. As a result the operations of the player that the content creator provided can be accomplished corresponding to user s operations.

Since the player model has such a structure the user can reproduce video data audio data and subtitle data and interactively operate them.

Next an example of a script program in the script layer will be described. It is assumed that the content creator created a flow of reproduction of a content as shown in . The content shown in has as display elements play lists and a top menu and a message . The play list is used to display a warning message that is automatically displayed when a disc is loaded. The play list is a main part of a movie as an example of the content. The top menu has GUI parts such as buttons with which for example the user causes the script to reproduce the play list . The message is displayed at any time during the reproduction of the play list .

In addition in the structure shown in several event handlers are provided. When a disc is loaded into the UMD video player event handler onAutoPlay automatically reproduces the play list from the disc and displays a warning message on the screen. Event handler onPlayListEnd is an event handler that is called when the reproduction of the play list is completed. In the example shown in when the reproduction of the play list or the play list is completed event handler onPlayListEnd is called. In other words event handler onPlayListEnd determines whether the reproduction of a play list is completed. When the reproduction of the play list is completed event handler onPlayListEnd starts reproduction of the play list . When the reproduction of the play list is completed event handler onPlayListEnd calls the top menu .

Event handler onMenu is called when the user operates the menu key. Event handler onMenu calls the top menu and displays it on the screen Event handler onMark is executed when time designated by mark Mark elapsed during the execution of a play list. In the example shown in mark Mark is set in the play list . During the execution of the play list when time designated by mark Mark elapses the message is displayed on the screen.

In the example shown in when a disc is loaded into the UMD video player event handler onAutoPlay is called. Event handler onAutoPlay reproduces the play list and displays a warning message on the screen. After the reproduction time of the play list has elapsed the play list comes to the end and event handler onPlayListEnd is called. Event handler onPlayListEnd determines that the play list has been completely reproduced and reproduces the next play list . When the user operates the menu key while the play list is being reproduced event handler onMenu is called. Event handler onMenu displays the top menu on the screen. Event handler onMenu starts reproducing the play list from the beginning corresponding to a predetermined operation on the top menu . When the reproduction time of the play list has elapsed for time designated by mark Mark event handler onMark is called. Event handler onMark displays the message on the screen. When the play list has been completely reproduced event handler onPlayListEnd is called. Event handler onPlayListEnd determines that the play list has been completely reproduced and displays the top menu on the screen.

Method movieplayer.play causes the movie player to reproduce a play list. The play list number of a play list to be reproduced is described in parentheses as an argument. When the play list has been completely reproduced event playListEnd occurs. When event playListEnd occurs the script calls event handler movieplayer.onPlayListEnd . At this point event playListEnd and object event info are supplied to the script. The play list number of a play list that has been completely reproduced and so forth are stored in object event info. The script can change the next operation corresponding to the content of object event info.

Next with reference to the file management structure according to the UMD Video Standard will be described. Files are hierarchically managed in a directory structure and recorded on a disc. A disc file system standardized by International Organization for Standardization ISO 9660 Universal Disk Format UDF or the like may be used.

File TITLEID.DAT and directory VIDEO are placed under the root directory. Directory RESOURCE directory CLIP directory STREAM and file PLAYLIST.DAT are placed under directory VIDEO. 

File TITLEID.DAT is a file that stores a title identifier that differs in each title type of content . One disk has one file TITLEID.DAT. 

Resource file JA000000.RCO is placed under directory RESOURCE. As described above in addition to a script program that composes the script layer data that compose a menu screen for example part data such as image data and sound data are contained in the resource file. One resource file is normally placed under directory RESOURCE. Instead a plurality of resource files may be placed under directory RESOURCE. A plurality of resource files are created for a plurality of menus that are different in languages. In this case however one resource file is used at a time.

A resource file has a file name having a period as a delimiter and fixed extension RCO that a resource file. The character string followed by the period represents the contents of the resource file. The file name of a resource file has a format of CCdannn RCO. The first two characters CC represent a language code of the resource file. The next character d is a flag that represents whether the language code is a default language. The next character a represents the aspect ratio of the display screen. The next four characters nnnn represent an identification number. The identification number is assigned so that file names of resource files are not redundant.

According to the naming rule of a resource file the file name thereof represents the language attribute of resource data and the aspect ratio of the display screen. A resource file is properly selected according to the file name.

At least one clip information file is placed under directory CLIP. A clip information file has a file name composed of a character string portion having five to several characters such as 00001 in this example numerals a period as a delimiter and an extension portion such as CLP. . Extension portion CLP represents that the file is a clip information file.

At least one clip AV stream file is placed under directory STREAM. A clip AV stream file has a file name composed of a character string portion having several to five characters such as 00001 in this example numerals a period as a delimiter and an extension portion such as PS. Extension portion PS represents that the file is a clip AV stream file. According to this embodiment of the present invention a clip AV stream file is an Moving Pictures Experts Group 2 MPEG2 program stream of which a video stream an audio stream and a subtitle stream are multiplexed and contained in a file identified by extension portion PS. 

As described above a clip AV stream file is a file of which video data and audio data are compression encoded and time division multiplexed. Thus when the clip AV stream file is read and decoded video data and audio data are obtained. A clip information file is a file that describes the characteristics of a clip AV stream file. Thus a clip information file and a clip AV stream file are correlated. According to this embodiment of the present invention since the character string portions having several to five characters of the file names of the clip information file and the clip AV stream file are the same the relationship therebetween can be easily obtained.

As described above a resource file contains a script file that describes a script program. A resource file contains a program that causes reproduction states for a disc to be interactively changed according to this embodiment of the present invention. A resource file is read before other files are read from the disc.

File PLAYLIST.DAT is a play list file that describes a play list that designates the reproduction order of a clip AV stream. Next with reference to to the internal structure of file PLAYLIST.DAT will be described. shows an example of syntax that represents the overall structure of file PLAYLIST.DAT. In this example the syntax is described in the C language which is used as a descriptive language for programs of computer devices. This applies to tables that represent other syntaxes.

Field name length has a data length of 8 bits and represents the length of the name assigned to the play list file. Field name string has a data length of 255 bytes and represents the name assigned to the play list file. In field name string the area from the beginning for the byte length represented by field name length is used as a valid name. When the value of field name length is 10 10 bytes from the beginning of field name string is interpreted as a valid name.

Field number of PlayLists has a data length of 16 bits and represents the number of blocks PlayList that follow. Field number of PlayLists is followed by a for loop. The for loop describes blocks PlayList corresponding to field number of PlayLists. Block PlayList is a play list itself.

Next an example of the internal structure of block PlayList will be described. Block PlayList starts with field PlayList data length. Field PlayList data length has a data length of 32 bits and represents the data length of block PlayList including field PlayList data length. Field PlayList data length is followed by field reserved for word alignment having a data length of 15 bits and flag capture enable flag PlayList having a data length of 1 bit. Field reserved for word alignment and flag capture enable flag PlayList having a data length of 1 bit align data in 16 bits in block PlayList .

Flag capture enable flag PlayList is a flag that represents whether a moving picture that belongs to block PlayList including flag capture enable flag PlayList is permitted to be secondarily used. When the value of flag capture enable flag PlayList is for example 1 it represents that the moving picture that belongs to PlayList is permitted to be secondarily used in the player.

In the foregoing example flag capture enable flag PlayList has a data length of 1 bit. Instead flag capture enable flag PlayList may have a data length of a plurality of bits that describe a plurality of secondary use permission levels. For example flag capture enable flag PlayList may have a data length of 2 bits. In this case when the value of the flag is 0 the moving picture may not be perfectly prohibited from being secondarily used. When the value of the flag is 1 the moving picture may be permitted to be secondarily used in the case that the moving picture is compression encoded with a predetermined resolution or lower such as 64 pixels 64 lines. When the value of the flag is 2 the moving picture may be perfectly permitted to be secondarily used without any restriction. Instead when the value of bit 0 of the flag is 0 the moving picture may be permitted to be secondarily used in the content reproduction application. When the value of bit 1 of the flag is 1 the moving picture may be permitted to be secondarily used in another application for example wall paper image or a screen saver in the movie player. In this case the values of bits 0 and 1 of the flag may be used in combination.

Field PlayList name length has a data length of 8 bits and represents the length of the name assigned to block PlayList . Field PlayList name string has a data length of 255 bits and represents the name assigned to block PlayList . In Field PlayList name string the area from the beginning for the byte length represented by field PlayList name string is used as a valid name.

Field number of PlayItems has a data length of 16 bits and represents the number of blocks PlayItem that follow. Field number of PlayItems is followed by a for loop. The for loop describes blocks PlayItem corresponding to field number of PlayItems. Block PlayItem is a play item itself.

Blocks PlayItem of block PlayList are assigned identification information ID . For example block PlayItem described at the beginning of block PlayList is assigned for example 0. Blocks PlayItem are assigned serial numbers in the order of appearance such as 1 2 and so forth. The serial numbers are used as identification information of blocks PlayItem . Argument i of the for loop repeated for blocks PlayItem can be used as identification information for blocks PlayItem . Block PlayItem is followed by block PlayListMark .

Next with reference to an example of the internal structure of block PlayItem will be described. Block PlayItem starts with field length. Field length has a data length of 16 bits and represents the length of block PlayItem . Field length is followed by field Clip Information file name length. Field Clip Information file name length has a data length of 16 bits and represents the length of the name of the clip information file corresponding to block PlayItem . Field Clip Information file name has a variable data length in bytes and represents the name of the clip information file corresponding to block PlayItem . In field Clip Information file name the area from the beginning for the byte length represented by field Clip Information file name is used as a valid name. When a clip information file is designated by field Clip Information file name a clip AV stream file corresponding to the clip information file can be identified according to the above described relationship of the file names.

Field IN time and field OUT time have a data length of 33 bits each. Field IN time and field OUT time are time information that designate the reproduction start position and the reproduction end position of a clip AV stream file corresponding to the clip information file designated by field Clip Information file name in block PlayItem . With information of field IN time and field OUT time the reproduction start position other than the beginning of the clip AV stream file can be designated. Likewise with information of field IN time and field OUT time the reproduction end position other than the end of the clip AV stream file can be designated. Field reserved for word alignment is an adjustment field that causes the data length of the data structure to become a multiple of 16 bits. Field reserved for word alignment has a data length of 15 bits.

Next with reference to an example of the internal structure of block PlayListMark will be described. Block PlayListMark starts with field length. Field length has a data length of 32 bits and represents the length of block PlayListMark . Field length is followed by field number of PlayList marks. Field number of PlayList marks has a data length of 16 bits and represents the number of blocks Mark . Field number of PlayList marks is followed by a for loop. The for loop describes blocks Mark corresponding to field number of PlayList marks.

Next an example of the internal structure of block Mark will be described. Block Mark starts with field mark type. Field mark type has a data length of 8 bits and represents the type of block Mark including field mark type. According to this embodiment of the present invention as shown in two types of marks a chapter mark and an event mark are defined. A chapter is a search unit that divides a play list block PlayList . A chapter mark represents the chapter position with time information An event mark is a Mark that causes an event to occur.

Field mark name length has a data length of 8 bits and represents the length of the name assigned to block Mark . Field mark name string at the last line of block Mark represents the name assigned to block Mark . In field mark name string the area from the beginning for the byte length represented by field mark name length is used as a valid name.

Four elements of field ref to PlayItem id field mark time stamp field entry ES stream id and field entry ES private stream id correlate block Mark defined in block PlayList with a clip AV stream file. In other words field ref to PlayItem id has a data length of 16 bits and represents identification information of block PlayItem . Thus field ref to PlayItem id identifies a clip information file and a clip AV stream file.

Field mark time stamp has a data length of 33 bits and designates the time of a mark in a clip AV stream file. Next with reference to field mark time stamp will be described in brief. In a play list is composed of three play items assigned numbers 0 1 and 2 PlayItem PlayItem and PlayItem . It is assumed that time tof the play list is contained in play item PlayItem . In addition it is assumed that play items and correspond to program streams A B and C of clip AV stream files through clip information files respectively.

In this case when a mark is designated to time tof the play list the value of field ref to PlayItem id is 1 that represents a play item including time t. In addition time corresponding to time tin the corresponding clip AV stream file is described in field mark time stamp.

Returning to the description of field mark time stamp is followed by field entry ES stream id and field entry ES private stream id. Field entry ES stream id and field entry ES private stream id have a data length of 8 bits each. When block Mark is correlated with a predetermined elementary stream field entry ES stream id and field entry ES private stream id identify the elementary stream. Field entry ES stream id and field entry ES private stream id represent a stream ID stream id of packets packet in which elementary streams are multiplexed and a private stream ID private stream id of a private packet header private packet header respectively.

The stream ID stream id of the packets packet and the private stream ID private stream id of the private packet header private packet header are based on provisions on a program stream of for example the MPEG2 system.

Field entry ES stream id and field entry ES private stream id are used when the chapter structure of clip AV stream is different from that of clip AV stream . When block Mark is not correlated with a predetermined elementary stream the values of these two fields are 0. 

Next with reference to to the internal structure of a clip information file will be described. As described above clip information file XXXXX.CLP describes the characteristics and so forth of corresponding clip AV stream file XXXXX.PS placed under directory STREAM. 

Field presentation start time and field presentation end time are followed by field reserved for word alignment that has a data length of 7 bits and flag capture enable flag Clip that has a data length of 1 bits. Field reserved for word alignment and flag capture enable flag Clip having a data length of 1 bit align data in 16 bits in file XXXXX.CLP. Flag capture enable flag Clip is a flag that represents whether a moving picture contained in a clip AV stream file corresponding to file XXXXX.CLP. is permitted to be secondarily used. For example when the value of flag capture enable flag Clip is for example 1 it represents that the moving picture of the clip AV stream file corresponding to file XXXXX.CLP is permitted to be secondarily used in the video player.

Field number of streams has a data length of 8 bits and represents the number of blocks StreamInfo that follow. Field number of streams is followed by a for loop. The for loop describes blocks StreamInfo corresponding to field number of streams. The for loop is followed by block EP map .

Next an example of the internal structure of block StreamInfo will be described. Block StreamInfo starts with field length. Field length has a data length of 16 bits and represents the length of block StreamInfo . Field length is followed by field stream id and field private stream that have a data length of 8 bits each. As shown in block StreamInfo is correlated with elementary streams. In the example shown in when the value of field stream id of block StreamInfo is in the range from 0xE0 to 0xEF block StreamInfo is correlated with a video stream. When the value of field stream id of block StreamInfo is 0xBD block StreamInfo is correlated with an Adaptive Transform Acoustic Coding ATRAC audio stream a Linear Pulse Code Modulation LPCM audio stream or a subtitle stream. When the value of field private stream id of block StreamInfo is in the range from 0x00 to 0x0F from 0x10 to 0x1F and from 0x80 to 0x9F block StreamInfo is correlated with an ATRAC audio stream an LPCM audio stream and a subtitle stream respectively.

Block StreamInfo mainly describes two types of information the first type not varying in a stream the second type varying in a stream. Information that does not vary in a stream is described in block StaticInfo whereas information that varies in a stream is described in block DynamicInfo with change points designated with time information.

Block StaticInfo starts with field reserved for word alignment that has a data length of 8 bits. Field reserved for word alignment aligns data in a byte in block StreamInfo . Field reserved for word alignment is followed by field number of DynamicInfo. Field number of DynamicInfo has a data length of 8 bits and represents the number of blocks DynamicInfo that follow. Field number of DynamicInfo is followed by a for loop. The for loop describes field pts change point and block DynamicInfo repeated corresponding to field number of DynamicInfo.

Field pts change point has a data length of 33 bits and represents time at which information of block DynamicInfo becomes valid with PTS. Time at which each stream starts is represented by field pts change point and is equal to field presentation start time defined in file XXXXX.CLP. 

Next with reference to an example of the internal structure of block StaticInfo will be described. The contents of block StaticInfo depend on the type of the corresponding elementary stream. The type of the corresponding elementary stream can be identified by the values of field stream id and field private stream id as shown in . shows block StaticInfo whose contents vary depending on the type of an elementary stream which is a video stream an audio stream or a subtitle stream using an if statement. Next block StaticInfo will be described according to the types of elementary streams. shows block StaticInfo that represents whether the type of the elementary stream is a video stream an audio stream or a subtitle stream using an if statement. Next block StaticInfo will be described according to the types of the elementary streams.

When the elementary stream is a video stream block StaticInfo is composed of field picture size having a data length of 4 bits field frame rate having a data length of 4 bits and flag cc flag having a data length of 1 bit. Field picture size and field frame rate represent the picture size and the frame frequency of the video stream. Flag cc flag represents whether the video stream contains a closed caption When the value of flag cc flag is for example 1 the video stream contains a closed caption. Field reserved for word alignment aligns data in 16 bits.

When the elementary stream is an audio stream block StaticInfo is composed of field audio language code having a data length of 16 bits field channel configuration having a data length of 8 bits flag lfe existance having a data length of 1 bit and field sampling frequency having a data length of 4 bits. Field audio language code represents a language code contained in the audio stream. Field channel configuration represents a channel attribute of audio data such as monaural stereo multi channel or the like. Field lfe existance represents whether the audio stream contains a low frequency emphasis channel. When the value of field lfe existance is for example 1 the audio stream contains the low frequency emphasis channel. Field sampling frequency represents the sampling frequency of audio data. Field reserved for word alignment aligns data in 16 bits.

When the elementary stream is a subtitle stream block StaticInfo is composed of field subtitle language code having a data length of 16 bits and flag configurable flag having a data length of 1 bit. Field subtitle language code represents a language code contained in the subtitle stream. Flag configurable flag represents whether the size and position of characters of the subtitle stream that is displayed are permitted to be changed. When the value of flag configurable flag is for example 1 it represents that the size and position of characters of the subtitle stream that is displayed are permitted to be changed. Field reserved for word alignment aligns data in 16 bits.

Next with reference to an example of the internal structure of block DynamicInfo will be described. Block DynamicInfo starts with field reserved for word alignment having a data length of 8 bits. Elements preceded by field reserved for word alignment depend on the type of the elementary stream. The type of the elementary stream can be identified by the values of field stream id and field private stream id described with reference to . shows block DynamicInfo whose contents vary depending on the type of an elementary stream which is a video stream an audio stream or a subtitle stream using an if statement. Next block DynamicInfo will be described according to the types of elementary streams.

When the elementary stream is a video stream block DynamicInfo is composed of field display aspect ratio having a data length of 4 bits. Field display aspect ratio represents whether the display output aspect ratio of video data is 16 9 or 4 3. Field reserved for word alignment aligns data in 16 bits.

When the elementary stream is an audio stream block DynamicInfo is composed of field channel assignment having a data length of 4 bits. When the audio stream is composed of two channels field channel assignment represents whether the output is a stereo or a dual monaural. The dual monaural is used to reproduce for example bilingual audio data. Field reserved for word alignment aligns data in 16 bits.

When the elementary stream is a subtitle stream block DynamicInfo is composed of field reserved for word alignment. Field reserved for word alignment aligns data in 16 bits. In other words with respect to a subtitle stream block DynamicInfo does not define an attribute that dynamically varies.

Next with reference to an example of the internal structure of block EP map will be described. Block EP map represents a valid decode start position referred to as an entry point or a random access point RAP of a bit stream of each elementary stream with time information and position information. The position information may be the minimum access unit for a recording medium on which an elementary stream is recorded. Each elementary stream can be decoded from the position represented by block EP map .

Since the valid decode start position of a fixed rate stream can be calculated information such as block EP map is not necessary. On the other hand for a variable rate stream and a stream whose data size varies in each access unit such as a stream according to the MPEG video compression encoding system block EP map is important information necessary for randomly accessing data.

Block EP map starts with field reserved for word alignment having a data length of 8 bits. Field reserved for word alignment aligns data in 16 bits. Field reserved for word alignment is followed by field number of stream id entries. Field number of stream id entries has a data length of 8 bits and represents the number of elementary streams described in block EP map . A first for loop describes field stream id field private stream id and field number of EP entries repeated corresponding to field number of stream id entries. In the first for loop a second for loop describes field PTS EP start and field RPN EP start repeated corresponding to field number of EP entries.

The first for loop describes field stream id and field private stream id that have a data length of 8 bits each and identify the type of the elementary stream as shown in . Field stream id and field private stream id are followed by field number of EP entries. Field number of EP entries has a data length of 32 bits and represents the number of entry points described in the elementary stream. The second for loop describes field PTS EP start and field RPN EP start repeated corresponding to field number of EP entries.

Field PTS EP start and field RPN EP start have a data length of 33 bits each and represent entry points themselves. Field PTS EP start represents time of an entry point in a clip AV stream file with the PTS. On the other hand field RPN EP start represents the position of an entry point in a clip AV stream file in the unit of 2048 bytes.

According to this embodiment of the present invention one sector as a disc access unit is 2048 bytes. Thus field RPN EP start represents the position of an entry point of a clip AV stream file in sectors.

The valid reproduction start position of a video stream is immediately preceded by packet private stream2. Packet private stream2 is a packet that contains information that can be used to decode a video stream. Thus the position of an entry point of a video stream is the position of pack pack that contains packet private stream2.

Block EP map correlates times of a clip AV stream and positions of a clip AV stream file. Thus with time information time stamp of an access point of a clip AV stream the clip AV stream file can be easily searched for a data address at which data are read. As a result the disc can be smoothly accessed at random.

According to this embodiment of the present invention in block EP map sets of time information and position information sets of field PTS EP start and field RPN EP start in the second for loop for each elementary stream are pre registered in the ascending order descending order . In other words time information and position information have been rearranged in a predetermined direction. Thus a binary search can be performed for the data.

According to this embodiment of the present invention as described above an elementary stream of video data is an elementary stream according to the MPEG2 Video Standard. However this embodiment of the present invention is not limited to this example. For example an elementary stream of video data may be an elementary stream according to the MPEG4 Visual Standard or the MPEG4 AVC Standard. Likewise according to this embodiment of the present invention as described above an elementary stream of audio data is an elementary stream according to the ATRAC Audio System. However this embodiment of the present invention is not limited to such an example. Instead an elementary stream of audio data may be an elementary stream according to for example the MPEG1 2 4 Audio System.

Next a disc reproduction apparatus according to an embodiment of the present invention will be described. shows an example of the structure of a disc reproduction apparatus according to an embodiment of the present invention. Connected to a bus are a central processing unit CPU a memory a drive interface an input interface a video decoder an audio decoder a video output interface and an audio output interface . Each section of the disc reproduction apparatus can exchange a video stream an audio stream various commands data and so forth with other sections through the bus .

In addition a disc drive is connected to the drive interface . The disc drive exchanges data and commands with the bus through the drive interface .

The CPU has a read only memory ROM and a random access memory RAM not shown . The CPU exchanges data and commands with each section of the disc reproduction apparatus through the bus according to a program and data pre stored in the ROM and controls the entire disc reproduction apparatus . The RAM is used as a work memory of the CPU .

Although omitted in the disc reproduction apparatus can have a nonvolatile memory such as a flash memory that can rewrite data and hold it after the power of the disc reproduction apparatus is turned off. The nonvolatile memory is connected to for example the bus so that the CPU writes data to the nonvolatile memory and reads data therefrom.

Supplied to the input interface is an input signal that is input from an input device with which the user performs an input operation. The input device is for example a remote control commander with which the user remotely operates the disc reproduction apparatus using for example an infrared signal and keys disposed on the disc reproduction apparatus . The input interface converts an input signal supplied from the input device into a control signal for the CPU and outputs the control signal.

Recorded on a disc in the format shown in to are a play list a script program a clip information file a clip AV stream file and so forth. When the disc is loaded into the disc drive it reproduce them from the disc automatically or according to a user s input operation. A script file a play list file and a clip information file that are read from the disc are supplied to the CPU and stored in for example a RAM of the CPU . The CPU reads a clip AV stream file from the disc according to data and a script program stored in the RAM.

The clip AV stream file which is read from the disc is temporarily stored in the memory . The video decoder decodes a video stream and a subtitle stream of the clip AV stream file stored in the memory according to a command received from the CPU . The CPU performs an image process such as an enlargement process or a reduction process for the decoded video data and subtitle data a synthesization process or an addition process for the video stream and subtitle stream and obtains one stream of video data. The image process may be performed by the video decoder and the video output interface . The video data are buffered in the memory and supplied to the video output interface . The video output interface converts the supplied video data into an analog video signal and supplies the analog video signal to a video output terminal .

Likewise the audio decoder decodes an audio stream of the clip AV stream file stored in the memory according to a command received from the CPU . The decoded audio data are buffered in the memory and supplied to the audio output interface . The audio output interface converts the supplied audio data into for example an analog audio signal and supplies the analog audio signal to an audio output terminal .

In the example each section shown in is composed of independent hardware. However this embodiment of the present invention is not limited to this example. In other words the video decoder and or the audio decoder may be composed of software that operates on the CPU .

The disc reproduction apparatus has the CPU and the memory and operates according to the program. Thus it can be thought that the disc reproduction apparatus is a kind of a computer device.

When the power of the disc reproduction apparatus is turned on the operation system initially starts up on the CPU and performs necessary processes such as initial settings for each section and reads an application program in this example the video content reproduction section from the ROM. The operation system provides basic services such as reading of a file from the disc and interpreting of a file system to the video content reproduction section while the video content reproduction section is operating. For example the operation system controls the disc drive through the drive interface corresponding to a file read request supplied from the video content reproduction section and reads data from the disc . The data that are read from the disc are supplied to the video content reproduction section under the control of the operation system .

The operation system has a multitask process function that time division controls a plurality of software modules virtually in parallel. In other words each module that composes the video content reproduction section shown in can be operated in parallel by the multitask process function of the operation system .

Next the operation of the video content reproduction section will be described more specifically. The video content reproduction section has other several internal modules and accomplishes the following functions.

The script control module stores the received resource file to for example a predetermined area of a RAM not shown of the CPU . The CPU script control module reads the resource file from the RAM interprets the resource file and executes it. Instead the resource file may be stored in a predetermine area of the memory and when necessary the resource file may be written to a RAM not shown of the CPU .

As described in the player model GUIs that create and output images of the menu screen move the cursor corresponding to a user s input and change the menu screen are accomplished by a graphics process module controlled according to the script program. At this point with image data and sound data contained in the resource file stored in the memory the menu screen and so forth are created. By executing the script program the script control module can control the player control module .

The player control module references database information contained in files such as play list file PLAYLIST.DAT and clip information file XXXXX.CLP that are read from the disc and performs the following controls to reproduce video contents from the disc .

The content data supply module reads content data such as a clip AV stream file from the disc according to a command received from the player control module and supplies the content data to the buffer control module . The buffer control module stores the content data in the memory as a substance A of the buffer. The content data supply module controls the buffer control module to supply the content data stored in the memory to a video decoder control module an audio decoder control module and a subtitle decoder control module according to requests therefrom. In addition the content data supply module reads content data from the disc so that the content data stored under the control of the buffer control module becomes a predetermined amount.

The decode control module controls the operations of the video decoder control module the audio decoder control module and the subtitle decoder control module according to commands received from the player control module . The decode control module has an internal clock function and controls the operations of the video decoder control module the audio decoder control module and the subtitle decoder control module so that video data and audio data are synchronously output.

The buffer control module exclusively uses a part of the memory as the substance A of the buffer. The buffer control module stores a data start pointer and a data write pointer. The buffer control module also has as internal modules a video read function an audio read function and a subtitle read function. The video read function has a video read pointer. The video read function has a register that stores information au information as access unit information. The audio read function has an audio read pointer. The subtitle read function has a subtitle read pointer and a subtitle read function flag. The subtitle read function flag controls enabling disabling of the subtitle read function according to its value. When for example 1 is written to the subtitle read function flag the subtitle read function is enabled. When for example 0 is written to the subtitle read function flag the subtitle read function is disabled.

The video read function the audio read function and the subtitle read function which are internal modules of the buffer control module have demultiplexer functions that demultiplex a multiplexed clip AV stream of which a video stream an audio stream and a subtitle stream have been multiplexed and obtain the video steam the audio stream and the subtitle stream. According to this embodiment of the present invention a clip AV stream is formed of a plurality of elementary streams that are time division multiplexed according to the MPEG2 system program stream format. Thus the video read function the audio read function and the subtitle read function have a demultiplexer function for MPEG2 system program streams.

Consequently the video read function reads the value of field stream id see placed at a predetermined position of the video stream and holds the value. Likewise the audio read function and the subtitle read function read the values of field stream id and field private stream id see and hold the values. The values of field stream id and field private stream id are used to analyze the supplied bit stream.

The video decoder control module causes the video read function of the buffer control module to read one video access unit of the video stream from the memory and supply the video access unit to the video decoder . The video decoder control module controls the video decoder to decode the video stream supplied to the video decoder in the access unit and generate video data. The video data are supplied to the graphics process module .

Likewise the audio decoder control module causes the audio read function of the buffer control module to read one audio access unit of the audio stream from the memory and supply the audio stream unit to the audio decoder . According to this embodiment of the present invention the access unit audio frame that composes an audio stream has a predetermined fixed length. The audio decoder control module controls the audio decoder to decode the audio stream supplied to the audio decoder in the access unit and generate audio data. The audio data are supplied to an audio output module .

The subtitle decoder control module causes the subtitle read function of the buffer control module to read one subtitle access unit of the subtitle stream from the memory and supply the subtitle access unit to the subtitle decoder control module . According to this embodiment of the present invention the subtitle access unit that composes the subtitle stream contains length information at the beginning. The subtitle decoder control module has a subtitle decode function that can decode the supplied subtitle stream and generate subtitle image data. The subtitle image data are supplied to the graphics process module .

As described above the video data decoded by the video decoder under the control of the video decoder control module and the subtitle image data decoded by the subtitle decoder control module are supplied to the graphics process module . The graphics process module adds the subtitle image data to the supplied video data in a predetermined manner and generates a video signal that is output. The graphics process module generates the menu image and the message image according to commands received from the script control module and the player control module and overlays them with the output video signal.

For example the graphics process module performs an enlargement process and a reduction process for the supplied subtitle image data and adds the processed image data to the video data in a predetermined manner according to a command received from the script control module .

In addition the graphics process module converts the aspect ratio of the output signal according to the aspect ratio of the predetermined output video device and the output aspect ratio designated in the content reproduced from the disc . When the aspect ratio of the output video device is 16 9 and the output aspect ratio is 16 9 the graphics process module directly outputs the video data. When the aspect ratio of the output video device is 16 9 and the output aspect ratio is 4 3 the graphics process module performs a squeezing reduction process that matches the height of the image with the height of the screen of the output video device inserts black portions into left and right sides of the image and outputs the resultant image. When the aspect ratio of the output video device is 4 3 and the output aspect ratio is 4 3 the graphics process module directly outputs the video data. When the aspect ratio of the output video device is 4 3 and the output aspect ratio is 16 9 the graphics process module performs a squeezing process that matches the width of the image with the width of the screen of the output video device inserts black portions into the upper and lower areas of the image and outputs the resultant image.

The graphics process module also performs a process that captures the video signal that is being processed according to a request from the player control module and supplies the requested video signal thereto.

A video output module exclusively uses a part of the memory as a first in first out FIFO buffer. The video output module temporarily stores video data processed by the graphics process module in the buffer and reads the video data therefrom at predetermined timing. The video data that are read from the buffer are output from the video output interface .

The audio output module exclusively uses a part of the memory as a FIFO buffer. The audio output module stores audio data that are output from the audio output interface to the buffer and reads the audio data therefrom at predetermined timing. The audio data that are read from the buffer are output from the audio output interface .

When the audio mode of the content is dual monaural for example bilingual the audio output module outputs the audio data according to a predetermined audio output mode. When the audio output mode is main audio the audio output module copies audio data of the left channel in for example the memory and outputs audio data of the left channel and audio data of the memory . Thus the audio output module outputs audio data of only the left channel. When the audio output mode is sub audio the audio output module copies audio data of the right channel in for example the memory and outputs audio data of the right channel and audio data of the memory . Thus the audio output module outputs audio data of only the right channel. When the audio output mode is main and sub audio or the content is stereo the audio output module directly outputs the audio data.

The user can interactively sets the audio output mode on for example the menu screen that the video content reproduction section generates.

A nonvolatile memory control module writes data to an area in which data are not erased after the operation of the video content reproduction section is completed this area is referred to as a nonvolatile area and reads data therefrom according to a command received from the player control module . The nonvolatile memory control module has a function that stores a plurality of sets of data Saved Player Status and data Saved Player Data with a key of a title identification ID Title ID . The nonvolatile memory control module stores Backup Player Status that the player control module has as data Saved Player Status data. Data Backup Player Status corresponds to data of for example the player state B that exists immediately before the operation of the player control module is completed. Data Saved Player Status corresponds to the resume information . In addition the nonvolatile memory control module stores data User Data that the player control module has as data Saved User Data. Data User Data are predetermined data that the user sets to the player control module .

The nonvolatile memory control module correlatively stores a set of data Saved Player Status and data Saved User Data with the title ID of the disc in a predetermined area of the flash memory of the disc reproduction apparatus . The storage medium in which the nonvolatile memory control module stores data is not limited to a flash memory but a hard disk or the like.

Next a state change model of the movie player according to an embodiment of the present invention will be described in detail. According this embodiment of the present invention only the internal states of the movie player are defined. In other words according to this embodiment of the present invention the states of the movie player are defined on the basis of the operations and functions thereof.

More specifically with respect to the operations of the movie player from a view point of the reproduction of a play list two states of which the movie player is in the play state or the stop state are defined. In addition with respect to the functions of the movie player two states of whether the movie player accepts control commands from the native implementation platform are defined.

The play state is sub divided into several states. In other words the play state is sub divided into normal reproduction of forward normal speed variable speed reproductions other than normal speed in forward direction and reverse direction and pause. Step forward and step reverse reproductions are accomplished by alternately performing the normal reproduction and pause. The state that the movie player is reproducing a play list has the same meaning as the movie player is in the play state.

Next with respect to the functions of the movie player their states will be described. With respect to the functions of the movie player it has a mode in which the movie player accepts the control command from the native implementation platform this mode is referred to as the normal mode and a mode in which the movie player ignores the control command this mode is referred to as the menu mode . The two operation modes of the movie player are defined as states thereof.

In the normal mode the operation of the movie player can be controlled by the user s input not through a script program in the script layer .

On the other hand in the menu mode the movie player does not accept the control command . The movie player accepts only the method from the script layer . Thus the operation of the movie player can be controlled by a script program in the script layer . For example the user s input is supplied as the event from the native implementation platform to the script layer . The script program in the script layer controls the operation of the movie player with the method corresponding to the key event .

In other words with the menu mode the content creator side can control the operations of the movie player . In addition with the menu mode various controls can be accomplished using small kinds of keys.

Thus with respect to the operations the movie player has two states which are the play state and the stop state. In addition with respect to the functions the movie player has two modes which are the normal mode and the menu mode. Thus in the movie player four states as combinations of the two operational states and two functional states are defined. In other words after the movie player is generated until it is eliminated the movie player is in one of these four states. The generation and elimination of the movie player will be described later.

When the method that causes the movie player to change the existing state to another state is issued in the model the movie player quickly changes the existing state to another state according to the method . In a real device time after the method is issued to the movie player until the movie player has changed the existing state to another state according to the method depends on the implementation of the device.

When the method that causes the movie player that is in a particular state to change the existing state to the same state the state of the movie player does not change. For example when the movie player is in the normal mode and in the stop state even if the method that causes the movie player to change the existing mode and state to the normal mode and the stop state the existing mode and state of the movie player do not change.

The pause state is included in the play state. To cause the movie player to change the stop state to the pause state method play with an argument of value pauseMode that designates pause is used.

Next four states as combinations of the two states and two operation modes of the movie player and state changes among the four states will be described. In the following description the normal mode and the menu mode of the functional modes of the movie player are referred to as normal and menu respectively. On the other hand the play state and the stop state of the operation states of the movie player are referred to as play and stop respectively. The combinations of the modes and states of the movie player are conveniently denoted by state mode state . In the following description changes of states and modes of the movie player are referred to as state changes.

As is clear from the movie player has a total of 16 state changes including state changes from the existing state to the same state namely 4 4 16 state changes. These state changes are performed by the method that is supplied from the script layer to the movie player . In other words the state changes of the movie player are performed outside the movie player . In other words the state changes are not automatically performed in the movie player without methods supplied from the script layer . In addition state changes are not preformed in the movie player with control commands supplied from the native implementation platform .

According to this embodiment of the present invention since combinations of arguments of the method are restricted it is impossible to perform all state changes that are possible in the movie player with the method.

Next four states which are StateMenu Stop StateNormal Stop StateMenu Play and StateNormal Play which are possible in the movie player will be described one after the other.

The movie player is not reproducing a play list in the stop state and is not accepting the control command from the native implementation platform . This state is used for a menu screen or the like on which a moving picture is not reproduced in the background.

To allow a script program to securely control the movie player that has been just generated it is effective for the movie player not to accept the control command from the native implementation platform . Thus immediately after the movie player is generated it is placed in StateMenu Stop.

The movie player is not reproducing a play list in the stop state and is accepting the control command from the native implementation platform . This state is used when the movie player is not reproducing for example a moving picture. Since the movie player accepts the control command in this state it is preferred not to use this state immediately after the movie player is generated.

The movie player is reproducing a play list in the play state and is not accepting the control command from the native implementation platform . This state is used for a menu screen or the like on which the movie player is reproducing a moving picture in the background.

The movie player is reproducing a play list in the play state and is accepting the control command from the native implementation platform . This state is used while the movie player is reproducing a main part of a video content.

Next a model of which the movie player is generated will be described in brief. For example when the power of the disc reproduction apparatus is turned on and the operation system gets started by the CPU necessary processes such as initial settings for individual sections are performed. In addition the video content reproduction section is called from the ROM. The video content reproduction section is executed by the CPU . As a result the movie player is generated. When the power of the disc reproduction apparatus is turned off the movie player is eliminated.

The movie player is assumed to be an implicit object. Thus it is not necessary for a script program to explicitly generate the movie player .

As described above immediately after the movie player is generated it is placed in the menu mode and the stop state StateMenu Stop . Immediately after the movie player is generated the following properties that the movie player has become indefinite.

When the movie player is initialized the UMD video player that has a resume reproduction function that resumes the reproduction to the previous stop position can set values stored in the nonvolatile memory instead of default values of the properties. For example the resume information can be used.

Next the method that causes the movie player to change the existing state to another state will be described. shows the combinations of the four states of the movie player with respect to the existing StateMode State and StateMode State changed by the method . As is clear from as the method that causes the movie player to change the existing state to another state there are method Stop method play and method resume . The operation of the movie player caused by method resume depends on whether the resume information is present.

Next method stop will be described. Method stop causes the movie player to change the existing state to the stop state regardless of the existing mode. Method stop has an argument for a mode. Method stop with an argument allows the movie player to change the existing state and mode to the stop state and the mode designated by the argument. As will be described later when method stop is executed with a particular condition satisfied the player state B is backup up and held as the resume information .

Next method play will be described. Method play causes the movie player to change the existing state to the play state. Method play can have an argument for a mode. Method play allows the movie player to change the existing state and mode to the play state and the state designated by the argument. As will be described later when method play is executed with a particular condition satisfied the player state B is backed up and held as the resume information .

Next method resume will be described. Method resume is a method that restores the resume information to the player state B and resumes the reproduction of the movie player . In other words method resume causes the movie player to resume the reproduction from the position represented with the resume information . When method resume is executed without the resume information the movie player does not change.

The conditions of which method resume causes the movie player to restore the resume information are as follows. When method resume is executed if the resume information is present and the existing state is not StateNormal Play the movie player restores the resume information . In other words when method resume is executed if the resume information is present and the existing state is one of StateMenu Stop StateNormal Stop and StateMenu Play method resume causes the movie player to change the existing state to StateNormal Play and restore the resume information .

Method play has a plurality of arguments. For simplicity it is assumed that method play has three types of arguments that are argument pauseMode argument menuMode and argument playListNumber. Specifically more arguments are defined for method play .

Argument pauseMode designates the reproduction mode in the play state. Argument pauseMode has value x1 value pause or value 1. Value x1 designates the normal forward reproduction Value pause designates the pause. Value 1 designates the retention of the existing reproduction speed. Thus argument pauseMode designates the details of the play state of the movie player after the execution of method play . When value pause is designated a picture designated by an argument is displayed and the movie player is paused. In this case if a picture is not designated by an argument a picture designated according to a predetermined selection rule is displayed and the movie player is paused.

Argument menuMode designates the mode of the movie player the normal mode or the menu mode and has one of value Normal value Menu and value 1. Value Normal designates the normal mode. Value Menu designates the menu mode. Value 1 designates the retention of the existing mode.

Argument playListNumber designates the number of a play list to be reproduced. Argument playListNumber can be omitted. In this case the currently selected play list is not changed.

Next with reference to to examples of the state changes of the movie player upon the execution of method play will be described. In to the left side represents a existing state A of the movie player whereas the right side represents a changed state B after the script program issues the method to cause the movie player to change the existing state A. Indicated below the states A and B are play list numbers PL1 and PL2 that have been designated in these states.

Thus the movie player receives method play from the script program the movie player performs various operations. AT this point depending on a condition the movie player changes the existing state to another state. When the content creator describes method play with different arguments in the script program various operations of the movie player can be accomplished.

Only when the movie player executes method play received from the script program the movie player starts reproducing a play list of a selected play list number. When the reproduction of a play list is started the movie player that is in the stop state may start reproducing the play list or the movie player that is reproducing the play list may stop reproducing it select a new play list and start reproducing the new play list.

When the script program issues method play with an argument to the movie player the value of the argument is set to the player state B. When an argument of method play is omitted a default value or a predetermined value according to the rule for each parameter is set to the player state B.

It is not desired to allow a play list to be reproduced in the order that the content creator does not intend. Thus the control command corresponding to a user s operation is prohibited from causing a play list to be reproduced with a play list number. This is one of features of the operation model of the movie player according to this embodiment of the present invention.

If an invalid play list and a non existing time is designated for the value of an argument of method play the execution of method play will fail. This means that the script program contains an error and violates the standard. The error handling at this point depends on the implementation of the movie player .

Next the reproduction of a plurality of play items will be described. Once the movie player starts reproducing a play list the movie player continues to reproduce it until it comes to the end. The reproduction of a play list from the beginning to the end does not need a user s operation and a control of the script program. As shown in the movie player reproduces play items that compose a play list as designated in play list file PLAYLIST.DAT see . The play items that compose the play list are successively reproduced without control of event handlers.

The operation of the movie player after it reproduces one play item until it reproduces the next play item depends on the implementation thereof not defined in a format. For example whether the last picture of a play item is continuously displayed or a black picture is displayed depends on the implementation of the movie player . However when an authoring process of which for example an IN point of a play item is set to a random access point entry point see is performed the gap time of two play items can be decreased as much as possible.

Next the operation of the movie player during the reproduction of a play list will be described. A user s variable speed reproduction command for a high speed reproduction such as double speed reproduction or triple speed reproduction low speed reproduction such as speed reproduction and reveres reproduction is input as the user s input to the native implementation platform . Corresponding to the user s input a control command that depends on the implementation of the movie player is supplied from the native implementation platform to the movie player .

The speeds of the variable speed reproductions depend on the implementation of the movie player . A command having an argument of faster or slower with which a speed can be designated is supplied from the native implementation platform to the movie player . The movie player converts the command into a real speed. The method that accomplishes variable speed reproductions depends on the implementation of the movie player . The script program can know the speed that the movie player has designated with method getPlayerStatus .

In contrast method play that the script program sends to the movie player does not designate a speed with an argument. Method play designates only pause with argument pause and normal speed reproduction with argument x1 .

After the movie player reproduces a play list in the forward direction at a variable reproduction speed when the existing play item comes to the end the movie player reproduces the next play item. At this point the movie player reproduces the next play item in the same direction and at the same reproduction speed to continue the variable speed reproduction.

When the movie player performs a high speed reproduction at a higher speed than the normal speed at the end of a play list even if the last picture of the play list is not a jump point the movie player displays the last picture of the play list.

After the movie player reproduces a play list in the reverse direction when the existing play list comes to the beginning the movie player reproduces the preceding play item namely a chronologically preceding play item in the forward direction. The movie player reproduces the preceding play item from the end to the beginning in the reverse direction at the same reproduction speed. When the play list that the movie player is reproducing comes to the beginning in the reverse direction the movie player cancels the variable speed reproduction and pauses at the beginning of the play list.

In addition the movie player pauses with the control command that causes the movie player to pause. When the pause state of the movie player is cancelled the reproduction direction and the reproduction speed of the play list depends on the implementation of the movie player .

Next events that occur during the reproduction of a play list will be described. As described with reference to events that occur during the reproduction of a play list are event angleChange event audioChange and event subtitleChange corresponding to user s operations and event chapter and event mark corresponding to marks embedded in a play list. Examples of operations upon the occurrence of events are described with reference to .

Next a process performed at the end of a play list will be described. As described above the movie player reproduces a play list of play list number designated with method play . Once the movie player starts reproducing a play list the movie player continues to reproduce the play list until it comes to the end without controls of the script program and the control command . When the play list the movie player reproduces comes to the end the movie player informs the script program of event playListEnd no matter how the play list comes to the end. In other words when the play list comes to the end regardless of whether the movie player performs the normal reproduction the fast forward reproduction or the jump reproduction from another play list the movie player generates event playListEnd.

When the play list that the movie player is reproducing comes to the end and event playListEnd occurs the movie player pauses and the reproduction time of the play list that the movie player stores matches the last time of the play list. The last time of the play list is the reproduction end time of the last picture of the play list and matches the OUT point of the last play item on the reproduction time axis.

Event playListEnd can be used to successively reproduce a play list and display a menu at a branch point of a multiple story.

When the script program has event handler onPlayListEnd as a program executed upon the occurrence of event playListEnd the script program executes event handler onPlayListEnd. When event handler onPlayListEnd describes method play that causes the movie player to start reproducing another play list the movie player starts reproducing the play list. In such a manner the movie player continues to reproduce the play list.

Next with reference to this operation will be described more specifically. When the movie player has reproduced a play list of play list number PL1 event playListEnd occurs. When event playListEnd occurs event handler onPlayListEnd that the script program has is executed. Event handler onPlayListEnd designates the reproduction of a play list of play list number PL2. The movie player receives event handler onPlayListEnd and reproduces the play list of play list number PL2 which has been designated.

Thus the reproduction path temporarily changes from the end of the play list of play list number PL1 to event handler onPlayListEnd and then to the beginning of the play list of play list number PL2. 

When a menu is displayed at a branch point of a multiple story a command that reproduces a play list that displays a menu screen with a branch point at the end may be described in event handler onPlayListEnd corresponding to event playListEnd.

After a play list that the movie player is reproducing comes to the end to reproduce the next play list the script program needs to explicitly issue a corresponding command. Since the reproduction order of play lists is decided by the script program the movie player side is incapable of autonomously deciding a play list to be reproduced next.

When a play list that the movie player is reproducing comes to the end at step S the movie player informs the script layer of event playListEnd at step S . The movie player continues to display the last picture of the play list that came to the end and changes the existing state to the pause state at step S .

When the script layer receives event playListEnd the script layer executes event handler onPlayListEnd at step S . The operation that the movie player performs next depends on the description of the script program in event handler onPlayListEnd.

After step S even if the movie player that pauses receives a method or the control command that cancels the pause state or that causes the movie player to start reproduction in the forward direction the movie player ignores the method or the control command . The methods that cause the movie player to start reproduction in the forward direction are method play and method playStep that have an argument that designates the forward reproduction. The control command that causes the movie player to start reproduction in the forward direction includes command uo play command uo playNexChapter command uo forwardScan command uo playStep command uo pauseOn and command uo pauseOff . The movie player ignores these commands when it pauses at the end of a play list.

When the movie player pauses at the end of a play list method stop and method resume are valid. The mode change is valid when the movie player pauses at the end of a play list.

After event playListEnd occurs the movie player that operates in the normal mode can accept other than the control command that causes the movie player to start reproduction in the forward direction. In this case when the script program executes the method for the movie player it operates according to the method .

In the example shown in event handler onPlayListEnd causes the script layer to execute method stop at step S . When the script layer executes method stop the movie player cancels the operation caused by the method and changes the existing state to the stop state at step S . In the stop state the movie player clears the last picture of the play list that the movie player has reproduced and displays a block screen.

Event handler onPlayListEnd causes the script layer to execute the method that causes the movie player to reproduce the next play list at step S . For example in method play value x1 as argument pauseMode value Menu as argument menuMode and a play list number to be reproduced next as argument playListNumber are designated respectively. These values cause the movie player to change the existing mode to the menu mode and to reproduce a play list of play list number designated by argument playListNumber at the normal. Thereafter the script layer completes event handler onPlayListEnd at step S . The movie player side changes the existing mode to another mode according to method play designated at step S. In addition the movie player reproduces the designated play list at the designated speed at step S .

The content creator needs to author describe the next operation that the movie player that has reproduced one play list performs in event handler onPlayListEnd for improvement of user s operability so that after the movie player has reproduced the play list the movie player changes the existing state to the stop state reproduces the next play list with method play or displays the menu screen.

Next state changes and reproduction resume function of the movie player will be described. First with reference to three types of memory areas that the UMD video player has will be described. In the UMD video player model a player state area a resume information area and a user data area are defined as three types of essential memory areas. These three types of memory areas and are formed in for example the memory . Instead these memory areas and may be formed in the RAM which is a work memory of the CPU .

The player state area is a memory area that stores information that represents the reproduction state of the movie player . In other words the player state area stores the player state B shown in . The contents of the player state area can be read from a script program with method getPlayerStatus .

The resume information area is a memory area that temporarily backs up part of information held in the player state area . In other words information of part of the player state area is stored as the resume information shown in in the resume information area . Part of information of the player state area which is backed up in the resume information area is restored to the player state area when necessary. The backup and restoration of information are performed by the native implementation platform . Information stored in the resume information area is used for a resume reproduction function that starts reproduction from the previous reproduction stop position.

The script program can read the contents of the resume information area with method getResumeInfo . The script program can change a parameter with respect to a stream in the resume information stored in the resume information area with method changeResumeInfo .

Information stored in the resume information area is saved to a nonvolatile memory by the native implementation platform when necessary. Likewise information saved from the resume information area to the nonvolatile memory is loaded from the nonvolatile memory by the native implementation platform and stored in the resume information area when necessary.

The backup of information from the player state area to the resume information area and the restoration of information from the resume information area to the player state area are processes that the movie player automatically performs as it changes the existing state to a predetermined state with predetermined methods.

The user data area is an area that stores information that depends on a content. The content creator can freely use the user data area . The user data area can be freely used for such as the history of a reproduction path of a play list of the movie player and correct and incorrect answers corresponding to a content.

The script program can save data to the user data area with method setUserData . The script program can read the contents of the user data area with method getUserData . The native implementation platform saves information stored in the user data area to the nonvolatile memory when necessary. Likewise the native implementation platform loads information from the nonvolatile memory and stores the information to the user data area when necessary.

Next the UMD video player model that accomplishes the reproduction resume function according to an embodiment of the present invention will be described.

First the resume operation will be described in brief. The operation that resumes the reproduction state with information backed up in the resume information area is referred to as the resume operation. The resume operation is performed with method resume .

More specifically the player state B is backed up from the player state area in the resume information area and the reproduction state is resumed with the resume information backed up in the resume information area according to method resume . The player state B is composed of the state of the movie player namely the number of the play list and the number of the chapter that the movie player is currently reproducing the selected stream number and so forth.

The operation of the movie player to which method resume is issued depends on whether the resume information is stored in the resume information area . When the resume information is stored in the resume information area the resume information is restored as the player state B to the player state area . At this point the resume information stored in the resume information area is discarded.

When a reproduction stream is changed on a menu called during the reproduction of a content method changeResumeInfo is used. After the resume information stored in the resume information area is changed to designated information with method changeResumeInfo when the resume operation is performed with method resume the existing reproduction stream can be changed to the designated reproduction stream and the reproduction of the designated reproduction stream can be started.

When method resume is executed the movie player can perform the resume operation. Instead when the resume information is obtained with method getResumeInfo and method play with an argument designated is executed the resume operation may be accomplished.

Next the backup of the player state B to the resume information area will be described with reference to and . shows a state change of which the player state B stored in the player state area is backed up to the resume information area in the four state changes defined in the movie player . shows conditions of which the player state B is backed up to the resume information area .

When the movie player that is reproducing a play list in the normal mode and the play state StateNormal play changes the existing state to the stop state the player state B stored in the player state area is backed up to the resume information area and stored as the resume information . In the stop state some values of the player state B become indefinite.

In addition when the movie player changes the existing state StateNormal play to StateMenu play the player state B stored in the player state area is also backed up to the resume information area .

In contrast when the movie player that is reproducing a play list in the menu mode changes the existing state to another state the player state B stored in the player state area is not backed up to the resume information area .

In other words the player state B is backed up as the resume information to the resume information area .

It is expected that the player state B is backed up to the resume information area so as to store the return position of the main part of a content. For example when a sequence of operations that reproduce the main part of a content jump to a moving picture menu returns to the main part of the content and reproduces the main part of the content from the reproduction stop position accomplished it is expected that the resume information which is data of the player state backed up in the resume information area is used.

Thus while the main part of a content is being reproduced namely the existing state of the movie player is StateNormal Play the resume information stored in the resume information area has been discarded. When the movie player changes the existing state StateNormal Play to another state the player state B is backed up as the resume information to the resume information area .

Thus to accomplish the resume reproduction the player state B is backed up to the resume information area and the resume information stored in the resume information area is discarded as the movie player changes the existing state to another state. When the script layer designates method resume if the resume information is stored in the resume information area the resume information is restored as the player state B to the player state area .

The script layer can load the resume information from the resume information area with method getResumeInfo . A parameter with respect to a stream in the resume information stored in the resume information area can be changed with method changeResumeInfo . In addition with an argument of method stop the resume information stored in the resume information area can be discarded.

Next with reference to to the restoration of the resume information stored in the resume information area to the player state area and the discard thereof will be described. The resume information stored as a return position of the main part of a content is discarded after the movie player returns to the main part reproduction state namely StateNormal Play. At this point there are two cases. In the first case the resume information is restored as the player state B to the player state area and then discarded. In the second case the resume information is discarded not restored.

In other words in this model when the movie player returns to StateNormal Play the resume information stored in the resume information area is discarded. At this point when the movie player and so forth satisfy predetermined conditions the resume information stored in the resume information area is restored to the player state area and then discarded. When the resume information is restored to the player state area the reproduction is started from the position designated by the resume information . This operation is the resume reproduction.

When the following three conditions 1 to 3 are satisfied the resume information is restored and then discarded 

When the resume information is stored in the resume information area if method resume is executed the movie player changes the existing state to StateNormal Play. When the resume information is not stored in the resume information area if method resume is executed the movie player does not change the existing state to another state. At this point the movie player remains in StateMode State that occurred immediately before method resume was executed and the player state B is not changed.

In contrast when the following three conditions 4 to 6 are satisfied the resume information is not restored but discarded 

When the resume information is not stored in the resume information area if method play is executed the movie player changes the existing state to StateNormal Play. As a result the state in which the resume information is not stored in the resume information area remains unchanged.

The resume information stored in the resume information area can be discarded by setting an argument of method stop . Specifically according to this embodiment of the present invention as an argument of method stop argument resumeInfoClearFlag that designates whether to discard the resume information stored in the resume information area is defined. As shown in when method stop is executed if argument resumeInfoClearFlag is designated with value true the resume information is discarded.

When the main part of a movie that the movie player reproduces comes to the end and the reproduction of the movie player is stopped the end position of the main part of the movie is recorded as the resume information . Thereafter when the user operates the movie player to perform the reproduction operation resume reproduction operation the movie player jumps to the end of the main part of the movie and pauses. Thus the operability of the resume reproduction operation in the movie player becomes bad.

To improve the operability of the resume reproduction operation in the movie player it is necessary to provide a section that discards the resume information that is automatically recorded as a characteristic of the model. Since only the movie creator knows the end of the main part of a movie the script program can designate the discard of the resume information for the movie player with argument resumeInfoClearFlag of method stop .

When the play list that the movie player is reproducing comes to the end at step S the movie player informs the script layer of event playListEnd at step S . The movie player continues to display the last picture of the play list that came to the end at step S and pauses at step S .

When the script layer receives event playListEnd the script layer executes event handler onPlayListEnd at step S . At step S the script layer determines whether the play list corresponding to event playListEnd is the last of the author scenario. In addition the script layer can determine whether a particular play list is the last play list of a scenario according to for example the script program .

When the determined result represents that the play list is not the last play list the flow advances to step S. At step S the script layer sets argument resumeInfoClearFlag of method stop to value false and issues method stop that does not discard the resume information to the movie player . When the movie player receives method stop the movie player changes the existing state to the stop state. In addition the movie player backs up the player state B to the resume information area at step S .

In contrast when the determined result at step S represents that the play list is the last play list in the scenario the flow advances to step S. At step S the script layer sets argument resumeInfoClearFlag of method stop to value True and informs the movie player of method stop that discards the resume information . When the movie player receives method stop the movie player changes the existing state to the stop state. In addition the movie player discards clears the resume information stored in the resume information area at step S .

After step S the script layer executes method end depending on the description in the script program .

Next the life cycles of the player state B the resume information and the user data will be described.

The storage state of the player state B depends on the implementation of the movie player . As long as the player state B can be obtained with method getPlayerStatus issued from the script layer the player state B can be stored in any format.

When the movie player changes the existing state StateNormal Play to another state the player state B is backed up to the resume information area .

Parameters videoNumber audioNumber audioFlag subtitleNumber and subtitleFlag with respect to a stream of the resume information can be changed with method changeResumeInfo issued from the script layer .

When the movie player starts reproducing a play list in the normal mode the contents of the resume information are discarded. At this point there are two cases. In the first case before the contents of the resume information are discarded it is restored to the player state B. In the second case before the contents of the resume information are discarded it is not restored to the player state B. When method stop is executed with argument resumeInfoClearFlag true the contents of the resume information are discarded.

With method getResumeInfo the contents of the resume information can be read from the script layer . When the resume information that has been discarded is read since value 0 is returned as return value playStatus it can be determined whether the resume information is stored.

When the movie player is completed eliminated the resume information is also eliminated. When the movie player is completed eliminated the UMD video player that accommodates the nonvolatile memory saves the resume information to the nonvolatile memory. At this point the UMD video player also saves the user data to the nonvolatile memory.

When method setUserData is executed user data are saved to the user data area . With method setUserData an integer type array having a data length of 64 bits maximum to the user data area . Data stored in the user data area can be read with method getUserData issued from the script layer . When the user data are not stored an array having a length of 0 is returned.

The script layer does not have a method that clears the contents of the user data area . When the contents of the user data area are overwritten the contents can be changed.

When the movie player is completed eliminated the user data area is also eliminated. When the movie player is completed eliminated the UMD video player accommodating the nonvolatile memory saves the data stored in the user data area to the nonvolatile memory. At this point the UMD video player also saves the resume information to the nonvolatile memory.

Next another embodiment of the present invention will be described. According to this embodiment of the present invention a script program explicitly informs the native implementation platform of an end of a content. When the native implementation platform receives the information the native implementation platform can accomplish various functions unique to the player after the end of the content.

The content creator intentionally designates an end of a content. Thus the position of an end of a content that the content creator intended is described in only a script program that he or she created. In other words the end of a play list is not always an end of a content. As with a multi story content one content may contain a plurality of ends.

Now a content that has a story structure as shown in is assumed. The content starts at start point . The content is reproduced according to route a composed of at least one play list. When the content comes to branch point one of routes b and c is selected on a predetermined branch menu screen or the like. When route b is selected one of routes d to f is selected at branch point . According to the selected route the content comes end point or . When route c is selected at branch point one of routes g and h is selected at branch point . According to the selected route the content comes to end point or .

The content which has such a structure can have end points and . In this case the content has five ends of a content. Instead depending on the structure of a branch menu branch points and may be designated as ends of a content. In addition an end of a content may be designated in the middle of a route. When the parental function or the like is used an end of a content may be designated with settings of the player. When the parental function or the like is used a plurality of ends of a content may be designated in a single story content which does not have story branches.

On the other hand the script program determines the last position of a content according to the stop position of the movie player and the history thereof. Now method end that allows the script program to inform the controller object of an end of a content is described in the script program so that it executes the method at a position that the program creator desires. Thus the script program can explicitly inform the native implementation platform of an end of a content. 

For example in a script program method end can be described in an event handler corresponding to the event received from the movie player as a play list is reproduced at the end of the content.

The script program informs the native implementation platform of an end of the content with method end . In addition since the script program obtains the return value of method end from the native implementation platform the script program can know whether a player s unique function is performed and perform the next operation.

When the return value of method end is false and the script program has determined that a player s unique function is performed the script program can suppress the execution of another method so that it does not prevent the operation of the player s unique function. In contrast when the return value of method end is true and the script program has determined that a player s unique function is not performed the script program can call a menu screen so that user s operability is improved.

Next a specific example of the operation using method end will be described. First an example of which a disc repeat function is accomplished using method end will be described. The disc repeat function is a function that automatically starts reproduction of a content from the beginning after it comes to the end.

Method end is supplied to the native implementation platform . When the native implementation platform receives method end the native implementation platform determines whether the disc repeat function has been set to the UMD video player at step S . For example the disc repeat function is set to the native implementation platform and written to the read only memory A not shown in .

When the determined result represents that the disc repeat function has been set the flow advances to step S. At step S the native implementation platform issues event autoplay to the script layer . At this point since method end has not been complete event autoplay is enqueued at step S . Since the disc repeat function has been set the return value of method end at step S is false at step S .

The script layer executes the script program after method end to the end of an event handler executed at the end of the content at step S . Events that were enqueued earlier than event autoPlay are executed. Thereafter event handler onAutoPlay corresponding to event autoplay is executed at step S . As described with reference to and event handler onAutoPlay is an event handler corresponding to event autoPlay that causes the script program to be automatically executed when the disc is loaded into the player. Event handler onAutoPlay is executed when data of the disc are reproduced from the beginning. When event handler onAutoPlay is called the content is reproduced from the beginning.

On the other hand when the disc repeat function has not been set at step S and the UMD video player completes the operation without any special operation the flow advances to step S. At step S method end returns value true as the return value. At this point the script program is executed after method end until the end of the event handler at step S . The next operation of the UMD video player depends on the script program. When the script program does not describe any code after method end the UMD video player becomes a standby state waiting for an event at step S . For example the UMD video player displays a black screen and waits for an event. Instead the UMD video player may display a menu screen depending on the description of the script program. At steps S and S the native implementation platform does not perform any process.

In the example of which the disc repeat function is accomplished with method end if the disc repeat function has not been set to the player the return value of method end is true. After an event handler that contains method end has been executed the UMD video player becomes a standby state waiting for an event.

At this point if the movie player has reproduced a play list and has stopped the operation the movie player may display no data namely a black screen . When the script program waits for an event and a user s operation if the black screen appears the user may think that the player stops the operation. Since no guide appears on the display screen the user will get confused about what to do the next. In other words it can be said that this situation results from lacking of consideration for the user.

This situation may take place when the content creator does not provide a script program that navigates the user so that the menu screen appears after the completion of the reproduction of a content.

Next an example of which a player s unique function is executed at an end of a content using method end which prevents such an operation from taking place will be described with reference to a flow chart shown in . Before the execution of the flow chart the content creator has described method end in a script program to designate his or her desired position as an end of a content. When the content has been reproduced and it comes to the end the script program issues method end in an event handler executed at the end of the content at step S .

Method end is supplied to the native implementation platform . When the native implementation platform receives method end the native implementation platform references for example the read only memory A and determines whether the disc repeat function has been set to the UMD video player at step S .

When the determined result represents that the disc repeat function has been set the flow advances to step S. At step S the native implementation platform issues event autoPlay to the script layer . The script layer enqueues event autoPlay. Thereafter the flow advances to step S.

In contrast when the determined result at step S represents that the disc repeat function has not been set the flow advances to step S. At step S the native implementation platform determines whether event handler onMenu has been registered to the script program. When the content creator has described event handler onMenu in the script program and when the script program is initially executed event handler onMenu is registered to the interpreter that executes the script program. When event handler onMenu has been registered it can be executed. In this case the flow advances to step S. At step S event menu corresponding to event handler onMenu is enqueued. Thereafter the flow returns to step S.

In contrast when the determined result at step S represents that event handler onMenu has not been registered the flow advances to step S. When event handler onMenu has not been registered the disc repeat function has not been set. In addition there is no event handler that causes the UMD video player to display a menu. In this case a process that causes the UMD video player to complete the operation and causes the native implementation platform to display a menu is performed. In other words the flow advances to step S. At step S the native implementation platform enqueues event exit. As described with reference to event exit is an event that causes the UMD video player to complete the operation. Thereafter the flow advances to step S.

As described at step S step S and step S in this example when method end is issued the native implementation platform enqueues one of event autoPlay at step S event menu at step S and event exit at step S . With one of these events the UMD video player executes a player s unique function after the execution of the event handler. Thus only value false is returned as the return value of method end at step S . Thereafter the execution of the script program is resumed.

At step S the execution of method is complete. After the return value has been obtained the script program is executed. When the script program comes to the end of an event handler that contains method end at step S enqueued events are executed in the order at step S .

When event autoplay was enqueued at step S event handler onAutoPlay is executed at step S. Event handler onAutoPlay causes the UMD video player to reproduce the content from the beginning.

When event menu was enqueued at step S event handler onMenu is executed at step S. In many cases however depending on the intention of the content creator it is expected that event handler onMenu contains a code that causes the UMD video player to display a menu screen. Thus in many cases the menu screen is displayed.

When event exist was enqueued at step S event handler onExit is executed at step S. Event handler onExit causes the UMD video player to complete the operation. After the UMD video player completes the operation control is transferred to for example a player s unique system menu with which the player can be set for its hardware.

As described above according to this embodiment method end which causes the script layer to inform the native implementation platform of an end of a content is defined. An operation of the player to be performed at an end of a content can be designated according to for example a setting of the player of whether the disc repeat function has been set and the state of the content of whether a menu screen is provided. Thus an improper situation for example appearance of a black screen which results from lack of the consideration for the user can be prevented from taking place. In addition a user friendly interface can be provided.

When the content creator only describes method end at a portion that he or she wants to designate as an end of a content the player automatically performs a proper process without need to provide a complicated program. Thus a lot of time and effort to create the content can be saved.

The foregoing embodiments of the present invention are applied to the disc reproduction apparatus that processes both an audio stream and a video stream. Instead these embodiments of the present invention may be applied to the disc reproduction apparatus that reproduce either an audio stream or a video stream.

In the foregoing embodiments of the present invention as the record medium for content data a disc shaped record medium is described. Instead as the record medium for content data a semiconductor memory may be used.

In the foregoing embodiments of the present invention the disc reproduction apparatus is composed of dedicated hardware. Instead the structure of the disc reproduction apparatus except for the disc drive may be accomplished by software that runs on a computer device. In this case the software that accomplishes the disc reproduction apparatus may be provided by a record medium such as a Compact Disc Read Only Memory CD ROM or a Digital Versatile Disc ROM DVD ROM . In this case the record medium for software that accomplishes the disc reproduction apparatus is loaded into the disc drive of the computer device and the software recorded on the record medium is installed to the computer device. When the disc drive device according to the UMD is connected to the computer device the same structure as the disc reproduction apparatus according to the foregoing embodiments of the present invention can be accomplished. The software may be recorded on a record medium for a UMD video content.

It should be understood by those skilled in the art that various modifications combinations sub combinations and alternations may occur depending on design requirements and other factors insofar as they are within the scope of the appended claims or the equivalents thereof.

