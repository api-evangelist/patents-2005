---

title: Context free grammar engine for speech recognition system
abstract: The present invention includes a context-free grammar (CFG) engine which communicates through an exposed interface with a speech recognition engine. The context-free grammar engine, in one illustrative embodiment, handles loading and unloading of grammars, as well as maintaining a desired activation state of the grammars which are loaded. Further, the CFG engine represents all loaded grammars, and their corresponding activation states, as a single grammar to the speech recognition engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07155392&OS=07155392&RS=07155392
owner: Microsoft Corporation
number: 07155392
owner_city: Redmond
owner_country: US
publication_date: 20050207
---
The present application is a continuation of and claims priority of U.S. patent application Ser. No. 09 751 613 filed Dec. 29 2000 now U.S. Pat. No. 6 957 184 U.S. Provisional Patent Application Ser. No. 60 219 861 filed on Jul. 20 2000 the content of which is hereby incorporated by reference in its entirety.

U.S. patent application Ser. No. 09 751 836 entitled MIDDLEWARE LAYER BETWEEN SPEECH RELATED APPLICATIONS AND ENGINES filed on Dec. 29 2000 the content of which is hereby incorporated by reference in its entirety.

The present invention deals with speech recognition systems. In particular the present invention relates to a context free grammar engine for use in speech recognition systems.

In speech recognition systems a computer system attempts to identify a sequence of words from a speech signal. One way to improve the accuracy of the recognition is to limit the recognition to a set of selected phrases. This is typically done by limiting valid recognition hypotheses to phrases that are found in a context free grammar CFG .

In the past applications which invoked speech recognition engines communicated directly with the engines. Because the engines from each vendor interacted with applications directly the behavior of that interaction was unpredictable and inconsistent. This made it virtually impossible to change recognition engines without inducing errors in the application. It is believed that because of these difficulties speech recognition technology has not quickly gained wide acceptance.

In an effort to make such technology more readily available an interface between engines and applications was specified by a set of application programming interfaces API s referred to as the Microsoft Speech API version 4.0 SAPI4 . Though the set of API s in SAPI4 specified direct interaction between applications and engines and although this was a significant step forward in making speech recognition and speech synthesis technology more widely available some of these API s were cumbersome to use required the application to be apartment threaded and did not support all languages.

The process of making speech recognition more widely available has encountered other obstacles as well. For example many of the interactions between the application programs and the engines can be complex. Such complexities include cross process data marshalling event notification parameter validation default configuration and many others. Conventional operating systems provide essentially no assistance to either application vendors or speech engine vendors beyond basic access to audio devices. Therefore application vendors and engine vendors have been required to write a great deal of code to interface with one another.

In one particular example where one or more applications desires to use one or more grammars with a speech recognition engine the speech recognition engine is required to keep track of individual grammar loads and to request additional grammars to be loaded for imported rules. Further the speech recognition engine is often required to parse recognition results to provide the application with a desired parse tree structure. This consequently requires the speech recognition engine to perform a great many tasks other than simply recognizing speech from an audio input signal or speech signal .

The present invention includes a context free grammar CFG engine which communicates through an exposed interface with a speech recognition engine. The context free grammar engine in one illustrative embodiment handles loading and unloading of grammars as well as maintaining a desired activation state of the grammars which are loaded. Further the CFG engine represents all loaded grammars and their corresponding activation states as a single grammar to the speech recognition engine.

In yet another embodiment the CFG engine can be called through an interface by the SR engine to perform parsing services. This relieves the SR engine of substantially all tasks except simply recognizing speech from an input signal.

A set of interface methods are also provided such that the speech recognition engine can query the CFG engine about new grammars words transitions and rules. This allows the SR engine to build an internal representation of the active grammars maintained by the CFG engine.

In still another embodiment the CFG engine builds a rich structure from the recognition results provided by the speech recognition engine. This result is in turn provided to the application through exposed interface methods.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier WAV or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic FR infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way o example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In one illustrative embodiment speech middleware component is implemented in the operating system illustrated in . Speech middleware component as shown in includes speech recognition middleware component context free grammar CFG engine and text to speech TTS middleware component .

A detailed description of the operation of speech middleware component is provided in the above identified and incorporated co pending patent application. For a full understanding of the present invention however only a short description of the operation of that component is warranted.

Briefly in operation speech middleware component resides between applications and engines and . Applications can be speech recognition and speech synthesis applications which desire to invoke engines and . In doing so applications make calls to speech middleware component which in turn makes calls to the appropriate engines and in order to have speech recognized or synthesized.

For example applications may provide the source of audio data for speech recognition. Speech middleware component passes that information to speech recognition engine which simply recognizes the speech and returns a recognition result to speech recognition middleware component . Speech recognition middleware component places the result in a desired format and returns it to the application which requested it.

CFG engine briefly assembles and maintains grammars which are to be used by speech recognition engine . This allows multiple applications and multiple grammars to be used with a single speech recognition engine . This is discussed in greater detail later in the specification.

It is also sufficient to know for the purposes of the present invention that the SpSite object is the object which SR engine calls to communicate events and recognitions and to make other communications with the SpRecoGrammar object .

CFG engine is configured to maintain the grammars which are accessible by SR engine through the interface provided by SpRecoGrammar object . In doing so CFG engine allows additional grammars to be loaded and made accessible to SR engine . CFG engine also enables SR engine to build an internal representation of the grammars which are loaded. CFG engine also enables application to load or unload additional grammars implement dynamic grammars by making changes to the content of loaded grammars and to load nested grammars. In addition CFG engine can be called through the interfaces provided by the SpRecoGrammar object by SR engine . SR engine can request that its results be parsed by CFG engine to alleviate SR engine of the parsing burden. CFG engine also creates a rich result which is returned through the interfaces provided by the SpRecoGrammar object to application .

In order to better understand certain aspects of the present invention it is useful to understand the general structure of grammar rules which are used by SR engine in recognizing speech. A brief discussion of such a grammar structure is now provided with respect to . is a state diagram showing the grammar structure for a set of grammar rules while is a state diagram showing the grammar structure for a single rule.

More specifically provides an example of a state diagram showing three top level grammar structures or rules derived from a text formatted grammar. In the three grammar structures are and which begin at nodes and respectively.

The newgame grammar structure has a transition from starting node or state to node or state that is associated with the word new . From state to state this structure has a second word transition associated with the word game . After state there are two parallel transitions and to a final state . Transition is an epsilon transition indicating that word transition which is associated with the word please is optional.

During speech recognition speech recognition engine traverses the state diagram to determine whether the speech signal it is recognizing corresponds to any of the grammar structures. For example speech recognition engine will identify the structure as corresponding to the input speech signal if the word new is found at the beginning of the speech signal followed by the word game . Note that since the word please is optional in the structure speech recognition engine will identify the newgame structure even if the word please is not found in the speech signal.

The grammar structure which starts at node is more complex than the structure. From starting node the structure has an epsilon transition and a word transition that both end at state . Epsilon transition indicates that the please associated with word transition is optional. From state there are two consecutive word transitions leading respectively to state and state . These word transitions are associated with the words play and the respectively.

From state to state the structure has a wildcard transition . During this transition speech recognition engine will ignore any input provided by the user after the word the and before words associated with a grammar structure which is found transition from state to state . Thus no matter what the user says during transition speech recognition engine can still identify the structure as being recognized for the speech signal.

Transition of the structure is a grammar structure transition. When speech recognition engine encounters this transition it substitutes the entire state diagram of the referenced grammar structure in place of the grammar structure transition. For example speech recognition engine replaces transition with the state diagram of which represents the grammar structure. It then determines if the input speech signal can be represented by part of the complete grammar structure including the portion of that structure provided by the grammar structure.

From state to end state of the structure there is an epsilon transition and a word transition associated with the word please . Epsilon transition indicates that the word please is optional in the structure.

The structure associated with start node begins with an epsilon transition to state . Epsilon transition is in parallel with a word transition associated with the word please . As such the word please is optional.

From state to state the structure provides two parallel transitions and associated with the words put and move respectively. Thus if the user says either put or move the speech recognition engine will identify these portions of the speech signal with the structure.

From state to state there is a single word transition associated with the word the . From state to state the structure provides a grammar structure transition associated with the grammar structure.

From state to state there are two parallel word transitions and associated with the words on and to respectively. A word transition for the word the extends from state to state which is followed by a grammar structure transition to state for the grammar structure.

An epsilon transition extends from state to state . This epsilon transition indicates that the transitions between states and are all optional. As such the words associated with these transitions do not need to be present in the speech signal in order for speech recognition engine to identify the structure from the speech signal.

From state to end state there is epsilon transition in parallel with a word transition . Epsilon transition indicates that the word please associated with transition is optional.

Application then indicates to SpRecoGrammar object by calling an exposed method that application desires to load a grammar from a designated input. In one illustrative embodiment SpRecoGrammar object exposes four different methods which are used by the application depending upon the source of the grammar. Those methods for example can allow the application to load a grammar from a file from a memory location from a resource or from an object. Of course other sources could be provided as well. This is indicated by block .

The SpRecoGrammar object then invokes CFG engine providing it with the location of the grammar to be loaded. It should be noted that in many embodiments SR engine can only operate on a binary grammar. Therefore CFG engine locates the grammar to be input. If it is in a binary grammar format processing simply continues. If it is in a text format it is illustratively compiled on the fly in to a binary grammar. In any case once the grammar is located and is in binary form CFG engine loads the grammar into associated memory. In loading the grammar CFG engine internally maintains a store which indicates where all of the rules in each loaded grammar are from. In other words given a rule identifier CFG engine can determine which grammar that particular rule belongs to. Invoking CFG engine and loading the grammar are indicated by blocks and .

Once the grammar is loaded CFG engine calls SR engine through the interfaces provide by the SpRecoGrammar object and passes in all of the new words associated with the grammar which has just been loaded along with handles to the new words provided by CFG engine . This is indicated by block . In response to receiving the new words SR engine calls back on SpSite and provides its internal pointer the pointer internal to SR engine to the new words which it has just received. This is indicated by block . Therefore each time CFG engine calls SR engine in relation to a given word it identifies that word to SR engine by providing the internal pointer which SR engine uses for that word. Similarly when SR engine calls back to SpSite in relation to any word it provides the pointer or handle which CFG engine generated for that word.

CFG engine continues loading in new words and word handles and receiving the internal pointer to those words from SR engine until no new words are left to be loaded. This is indicated by block .

Once all of the new words are loaded CFG engine calls SR engine through the SpRecoGrammar object and passes in the rule information associated with the grammar which has just been loaded. Such rule information illustratively includes the rule identification number rule ID the rule name the level of the rule i.e. whether it is a top level rule and whether the rule is active or inactive by default. Passing in the rule info is indicated by block in .

As with new words SR engine then calls back on SpSite providing its internal pointer to the new rules which have just been identified to it. This is indicated by block . Again each time CFG engine refers to a rule in communicating with SR engine it provides the internal pointer for SR engine associated with that rule. SR engine in turn provides the handle or rule ID generated by CFG engine for the associated rules as well.

Once CFG engine has communicated all of the words in the new grammar and identified the rules in the new grammar to SR engine SR engine makes a series of calls to CFG engine through SpSite and the SpRecoGrammar object such that SR engine can build an internal representation of the rule structure corresponding to each of the rules in the new grammar. This is indicated by block . This process is also described in greater detail below with respect to .

Once SR engine has built its internal representation of the new grammar rules the application passes in information telling CFG engine to either activate or deactivate specified rules. In the absence of this information CFG engine simply activates the default rules in the new grammar. This is indicated by block in . The CFG engine then makes appropriate calls to the SR engine through the SpRecoGrammar object to active and deactivate the desired rules. This is indicated by block .

At this point the entire new grammar has been loaded not only into CFG engine or its associated memory but the appropriate grammar structures have also been created by SR engine so that it can now begin recognition using the new grammar.

It should also be noted that grammars can be removed in substantially the reverse process as that illustrated by . In other words application calls CFG engine through the SpRecoGrammar interfaces to remove a grammar. The CFG engine calls the SR engine through the appropriate interface to remove the words and rules associated with that grammar. Similarly in order to add another grammar the process illustrated by is simply repeated. Further if application wishes to activate or deactivate rules in a dynamic grammar it simply provides an indication of that through the interfaces provided by the SpRecoGrammar to CFG engine . CFG engine then notes which rules have been activated or deactivated and calls SR engine through the interfaces provided by SpRecoGrammar object with appropriate calls to active or deactivate the specified rules.

In this way multiple grammars can be used and loaded by application and they are all maintained by CFG engine . CFG engine represents all of the combined grammars as a single grammar to SR engine . SR engine therefore need not know and need not track multiple grammars dynamic grammars etc. It simply builds an internal representation of the new rules added by CFG engine or it deletes its representation of rules and words which are removed by CFG engine . It also simply activates or deactivates rules as indicated by CFG engine . This significantly relieves the burden on SR engine and leaves it to simply do speech recognition based on an input audio signal or speech signal.

In response CFG engine sends back a structure describing the rule. For example if CFG engine is describing the rule shown in CFG engine first provides the rule ID the rule name newgame an indication that is a top level rule and an indication of whether the rule is active or inactive by default. SR engine then queries CFG engine through SpSite for more information as indicated by block in . In response CFG engine sends back an indication first indicating that the transition following state is a word transition and the word is new . CFG engine also provides an indication as to the identity of the next state .

SR engine then has a choice as to how to proceed. In accordance with one illustrative embodiment SR engine simply waits until it recognizes the word new and realizes that it is potentially starting down the tree structure of the newgame rule. In that case SR engine then queries CFG engine as to any additional fanout for the rule. For instances SR engine may then ask what the next transition is in the rule if there is one. At that point CFG engine provides an indication that the transition from state is another word transition the word is game and also provides the identity of state . In this way SR engine only builds the internal structure of the entire rule as the text associated that rule is being recognized.

In accordance with another illustrative embodiment SR engine continues to query CFG engine to obtain the full fanout for all rules even before recognition has begun. In this way SR engine can obtain all necessary information to build all the internal structures which will represent the rules prior to beginning recognition. Having SR engine retrieve the rule information to complete its internal structure of the rules whether it is done prior to speech recognition or during speech recognition is illustrated by block in .

First application calls the interfaces provided by SpRecoGrammar object to load a grammar G. This is indicated by block . The grammar G is the loaded by CFG engine as indicated with respect to above. This is indicated by block . The application then calls an exposed method on the interface implemented by SpRecoGrammar object to change the grammar. In making this call application illustratively passes in the changes in grammar G to create a new grammar G . This is indicated by block . This grammar G is passed from the SpRecoGrammar object to CFG engine and CFG engine compares the grammar G to grammar G which is already loaded. This is indicated by block . In order to do this comparison CFG engine illustratively compares the word lists associated with grammars G and G to see if any words have been changed deleted or added. CFG engine also illustratively compares the rule table associated with the two grammars to see if any rule content has changed.

If CFG engine determines that there has been no change to the content of any existing rule as illustrated by block CFG engine simply calls the engine to add or remove rules or words from the grammar. This is done as described with respect to above and is illustrated by block in .

However if at block it is determined that there is a change to the content of an existing rule then CFG engine calls SR engine to invalidate grammar G. This is indicated by block . Once that grammar has been invalidated SR engine makes appropriate calls to the CFG engine through SpRecoGrammar object to build its internal representation of the grammar G . This is indicated by block . It should again be noted that SR engine can build the entire grammar prior beginning speech recognition or it can simply build enough grammar to begin speech recognition then build the remaining structures as needed during the recognition process.

Another aspect of the present invention involves additional referenced grammars. CFG engine loads grammars which are referred to by other grammars. For instance in the above example grammar G may refer to a rule in another grammar G. If that happens CFG engine locates and loads Grammar G such that it can represent the entire grammar as a single grammar to SR engine . is a flow diagram which better illustrates this process.

CFG engine first receives a grammar G that refers to a rule in another grammar G. This is indicated by block in . CFG engine then locates and loads grammar G as indicated above with respect to . This is indicated by block . CFG engine then calls SR engine through SpRecoGrammar object with the grammar information related to grammar G if it has not done so already and with the grammar information related to grammar G. This is indicated by block . It should be noted that CFG engine can load the entire grammar G into SR engine or it can simply load in the relevant rules from grammar G.

It should also be noted that should grammar G refer to yet another grammar G CFG engine locates grammar G loads it and loads all or the relevant portions of grammar G into SR engine . All of these steps the loading of separate grammars the identifying of separate grammars and the tracking of rules for those grammars is done transparently to SR engine . SR engine simply receives rules and words and views them as a single grammar.

CFG engine is also illustratively configured to parse a result from SR engine and to provide a more rich result back to application . illustrate the parsing of a result from engine . is a flow diagram better illustrating how the parsing operation occurs. is a parse tree which shows a recognized phrase with elements numbered and a plurality of rules and which were used to spawn the result. illustrates a portion of a result which is generated by CFG engine .

In order to parse a phrase and generate a result CFG engine first needs a recognition result from SR engine . Therefore SR engine returns a result such as rule ID and a transition sequence to CFG engine through SpSite . This is indicated by block in . The rule ID represents the particular rule which fired to spawn the recognition result and the transition sequence is a sequence of transition handles identifying transitions in the rule which generated the recognition result.

For example assume that SR engine recognized the phrase play the ace of spades illustrated by number in . That phrase is composed of 5 elements numbered . The and rules and respectively are illustrated in . The rank and suit rules and are similar rules but have not been set out in detail.

Each of the rules has a rule ID associated with it. Also as shown in each rule has a plurality of possible transition sequences which can be followed to generate phases.

After receiving the recognition results CFG engine creates a parse tree as indicated by block in . In constructing a parse tree CFG engine identifies the rules and the elements in phrase which the rule is responsible for. In other words it can be seen in that the rule is responsible for elements and in phrase . rule is responsible for element while rule is responsible for element and rule is responsible for element . The rule ID s and transition sequences provided by SR engine allows CFG engine to internally create the parse tree identified by for phrase .

Similarly CFG engine can provide any suitable way of indicating which elements correspond to which rules . One embodiment of this is shown in field in . In that field two integers are separated by a comma. The first integer is indicative of the element in phrase while the second integer indicates the span of elements in phrase corresponding to the rule identified in field . Therefore it can be seen that the rule has generated the element number in phrase and only element number because the integer representing the span of elements is set to .

A variety of other types of information can also be pulled together to provide the rich result to application as indicated by block in . One embodiment of such a result is that indicated by the phrase structure set out below 

Thus it can be seen that the present invention significantly reduces the burden on both SR engine and application . CFG engine handles loading unloading activation deactivation and invalidation of grammars. CFG engine also handles adding and deleting words and rules from dynamic grammars and loading multiple grammars. CFG engine also parses results returned by SR engine and generates a rich result which is provided to application . It will be appreciated that CFG engine does this all substantially transparently with respect to SR engine . The SR engine simply views the information provided by CFG engine as a single grammar which has rules and words that are intermittently added deleted activated deactivated and invalidated. In this way SR engine simply needs to recognize speech based on a speech signal input and need not concern itself with all of the various tasks performed by CFG engine .

Although the present invention has been described with reference to preferred embodiments workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention.

