---

title: Information processing apparatus, control method therefor, computer program, and computer-readable storage medium
abstract: A method of processing data to be printed and print setting information used to print the data includes a detection step of detecting uninterpretable information from the print setting information, a transmission step of transmitting the uninterpretable information detected in the detection step, an acquisition step of acquiring interpretable information which is sent back in response to transmission of the uninterpretable information transmitted in the transmission step, and a creation step of creating print setting information by using the information acquired in the acquisition step.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07768661&OS=07768661&RS=07768661
owner: Canon Kabushiki Kaisha
number: 07768661
owner_city: Tokyo
owner_country: JP
publication_date: 20050728
---
The present invention relates to a technique of generating from information created by an application program print data to be output to a printing apparatus.

To print a document created by the user from an application program running on a computer such as a PC print data of the document is transferred to a printing associated processing program such as a printer driver via an OS Operating System . The printer driver transmits dedicated instruction data to a printer apparatus thereby printing the document. Data transferred from the application program to the printer driver are roughly classified into two print setting information which describes a format and input output settings compatible with the printer and drawing data for reproducing an actual document.

The ranges of setting values designated by print settings are limited to only functions and ranges which can be designated by the printer but the application program does not know all the functions of the printer. An interface which is provided to the application program by the operating system and used to designate print settings is limited to basic functions which are considered to be supported by every printer for example designation of the paper size and sheet feed cassette setting of the delivery tray setting of single double sided printing and monochrome color setting. The printer driver provides only an interface which informs the application of ranges of these basic functions that can be designated by the printer. However functions of the printer are not limited to them and the printer driver must extend print settings in order to use various functions of the printer apparatus such as a detailed color matching function and many finishing functions including stapling.

The application uses one area to save print settings and this area is divided by contents into a basic area which is provided by the operating system and an extension area which can be freely extended by the printer driver. To extend print settings the printer driver stores unique settings in the extension area. Since data in the extension area cannot be directly known by the application program various functions of the printer are set by prompting the user to set them with a user interface or application programming interface API unique to the printer driver.

Conventional formats for saving print settings are a DEVMODE data structure structure which holds information on the initialization and environment of a device which is ensured in a memory area and a job ticket print ticket for saving data in the XML format of a markup language which describes data with tags. The DEVMODE data structure is a binary data structure and printer drivers of respective vendors can relatively freely arrange data in the extension area. Due to the freely extendable structure however the extension area cannot be understood by printer drivers except one which internally knows the specifications of the extension area. Since a job ticket which saves data in the XML format has a text data structure the printer driver can acquire all data of the job ticket by reading tags one by one. However the basic and extension areas are discriminated by assigning different name spaces. If a name space has the same tag name but is unknown to the printer driver the printer driver cannot understand a function of the printer that corresponds to acquired data.

As described above settings in the extension area change depending on the vender of a printer driver or the printer apparatus. To attain optimal settings desired by the user the user must perform setting every printing by using the user interface or application programming interface of a printer driver which is unique to the printing apparatus and is output before printing. Although how to hold print settings changes depending on the application an application which saves print settings in a document inherits print settings created by a printer driver of another vendor. Of print settings created by a printer driver of another vendor setting information in the basic area is inherited but setting information unique to the printer apparatus in the extension area is not inherited. Thus in the worst case print processing fails unless the user performs setting again.

To solve this problem there is proposed a mechanism of performing print processing by issuing an instruction to a printer driver capable of reading data from the extension area and complementing data on the basis of setting information in the basic area e.g. Japanese Patent Laid Open No. 2003 162394 . According to this method print settings dedicated to respective controllable printer drivers are held and print settings dedicated to a printer driver necessary for a printer used to print are applied. If print settings dedicated to a necessary printer driver are not held print settings are created again via the application programming interface of the printer driver. This mechanism can be implemented because setting information in the basic area contains the device name of a printer in print settings.

If an application holds a plurality of types of print settings but does not have print settings dedicated to the printer driver of a printer which actually prints all pieces of information in the extension area that are used to set various printer functions cannot be set by only setting information in the basic area. Only half finished settings are stored in the extension area and in some cases all pieces of setting information in the extension area are not reflected and only the initial values of the printer driver are used. In creating a plurality of types of print settings a printer driver which is dedicated to a printer and finally output does not always exist. If no dedicated printer driver exists print settings must be done again via the user interface or application programming interface in printing. In resetting since the application programming interface is unique to each printer driver an application cannot use the interface of a printer driver of an unknown vendor and cannot set information in the extension area. It is difficult for the user to understand which actually set functions are inherited and which functions are not. Functions in the extension area that are added as needed and correspond to a new printer of each vendor cannot be followed. The user cannot grasp print settings used to execute print processing and makes settings again for a printer driver which is actually output.

The present invention has been made to solve at least one of the above problems and has as its object to provide a mechanism which allows a printer driver or printing apparatus to interpret print setting information that is set in another printing system and cannot be interpreted by the printer driver or printing apparatus.

To solve the above problems for example a method according to the present invention has the following steps.

That is as an example of one aspect there is disclosed a method of processing data to be printed and print setting information used to print the data comprising a detection step of detecting uninterpretable information from the print setting information a transmission step of transmitting the uninterpretable information detected in the detection step an acquisition step of acquiring interpretable information which is sent back in response to transmission of the uninterpretable information transmitted in the transmission step and a creation step of creating print setting information by using the information acquired in the acquisition step.

Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings in which like reference characters designate the same or similar parts throughout the figures thereof.

A preferred embodiment of the present invention will be described in detail below with reference to the accompanying drawings.

In the embodiment a structured document includes structured documents such as an XML document and a tag means all identifiers which make it possible to recognize a data structure in a structured document in analysis i.e. what meaning data of the structured document has and on which layer the data is located in the data structure of the structured document.

When the apparatus is powered on a CPU loads an OS Operating System from an external storage generally a hard disk drive to a RAM in accordance with a boot program stored in a ROM connected to a bus and activates the OS. After the activation various menus of the OS are displayed on a monitor CRT or liquid crystal display device connected to an output I F . At the same time information from an input device made up of pointing devices such as a keyboard and mouse can be accepted via an input I F . When the user inputs an instruction with the input device an application program its type is arbitrary stored in the external storage is executed. After the application program is activated various editing processes are done by interactive operation based on the display of the monitor and instruction inputs from the input device . When a print instruction is input a printing associated program and printer driver are activated to generate print data and output it to a printer via the output I F . Communication between the printer and the PC can use any I F. Typical examples of the I F are a parallel I F available from Centronics Data Computer a USB and network connection by wire or radio .

The user uses the input device and executes print processing for a created document via the GUI of an application program that is displayed on the monitor . When the print processing is executed by the user the application understands print operation by the user selects on the basis of print settings of the document and drawing data of document contents a printer driver corresponding to a printer which executes printing and notifies the operating system of print processing. The operating system performs drawing to a spool file and drawing to the designated printer driver via a graphics engine . The printer driver converts the data into a data language interpretable by the printer and a print manager manages the schedule of print processing by each application. When the printer is in a status ready for reception the print manager transmits print job data to a printer via an I O module . As a result printing is executed.

The initial values of the print setting information of the document are created by a configuration module of the printer driver. By using the user interface of an application or printer driver the print settings are so changed as to obtain a final print result desired by the user. Print setting information can take two formats one is a DEVMODE structure which is a data structure of a binary data format and the other is a job ticket which is XML text data of a markup language using a tag. The format changes depending on the specifications of the printer driver or operating system.

The public area of the DEVMODE structure includes basic printer information which stores the device name and the memory size of the entire structure paper information which stores the paper size width height and the like print quality information which stores color monochrome setting resolution and the like and sheet feed delivery information which stores a cassette used to feed paper the delivery order and the like. The private area stores items which cannot be held by basic information in the public area for example a printer specific function middleware functions and more detailed data of contents held in basic information.

Similar to the DEVMODE structure the job ticket or print ticket includes public and private areas. However these areas of the job ticket which is described in the XML format are not divided by a boundary unlike the DEVMODE structure. These areas are discriminated by a mechanism called a name space which divides a job ticket into partitions in the internal structures of tags. This mechanism complies with the description rule of the XML format the partition between descriptions or the like can be easily determined and interpretation processing is easier than that for the DEVMODE structure.

The arrangement of the apparatus the software configuration in print processing and print setting information according to the embodiment have been described. Features of the embodiment will be explained in more detail.

Prior to the description assume that there are two personal computers PC A and PC B a printer driver PRDRV A is installed in PC A and a printer driver PRDRV B printer driver according to the embodiment is installed in PC B. The same application program is installed in PC A and PC B and has a function of saving a document file which sets an extension area for print setting information.

A case in which a document file created by PC A is copied into PC B and printed via a network and portable memory medium will be considered.

In step S it is determined whether print setting information is a DEVMODE description or job ticket description. If the print setting information is determined to be a DEVMODE description the flow advances to step S to determine whether the DEVMODE description can be interpreted. The printer driver in the embodiment has the latest version of the same printer language and supports older versions. Hence this determination is done by checking matching with a DEVMODE description of an older version. If the DEVMODE description is determined to be interpretable the flow advances to step S to perform print settings in accordance with the contents of the DEVMODE description. If it is determined that the DEVMODE description is uninterpretable i.e. the print setting information is a DEVMODE description by another vender the determination is substantially impossible. In step S print settings are initialized to default ones by the configuration module of the printer driver PRDRV B printer driver of the embodiment.

If the print settings are determined in step S to be described by a job ticket the flow advances to step S. In step S descriptions in the job ticket are interpreted and if necessary name space replacement processing is performed details of which will be described later . In step S print settings are made.

After print settings are made on the basis of print setting information in the above way the flow advances to step S to generate print data on the basis of the determined print setting information and drawing data data which is transferred from an application and is to be printed . In step S the generated print data is output. If NO in step S the flow may advance to step S.

Details of step S will be described. is a view showing an overview of the embodiment and is a flowchart for explaining details of step S.

For descriptive convenience assume that a job ticket contains a description based on a printer driver driver of another vender or manufacturer unknown to the printer driver according to the embodiment. More specifically a job ticket transferred from an application is generated for an unknown driver and unknown printer .

The job ticket contains job tickets in and a unique function of the unknown driver is generated with a name space prefix ns2 . Using this job ticket as print settings print processing starts for a printer driver dedicated to a printer which is to actually prints .

The printer driver according to the embodiment can understand the psk and psf name spaces of the public area basic area and a name space GANON assigned by the printer driver to a unique function in the private area extension area . A job ticket received from an application for print processing contains the tag of the name space ns2 generated by the unknown driver. The printer driver according to the embodiment cannot understand the ns2 name space and tries to convert the description of the job ticket by using a dictionary database before normal print processing.

The dictionary database exists in a remote server connected by a computer network and an interface for using the dictionary database is implemented as a Web service. Data communication by the Web service uses a protocol called SOAP of the XML format. shows the description of general SOAP. SOAP is made up of two tags a header and body. A site which provides a target Web service is described in actor in the header. In the body data to be actually communicated is described in the XML format. A Web service can provide a service by performing a SOAP message exchange process.

Since the printer driver detects in the job ticket the ns2 name space which cannot be understood by the printer driver step S the printer driver creates SOAP describes at the header the site of a dictionary database which cooperates with the printer driver and inserts the job ticket transferred from the application into the body. By transmitting the created SOAP the printer driver transmits the job ticket to the Web service and issues a conversion request in and step S . The printer driver waits in this state until it receives a response to the SOAP from the Web service.

Upon reception of the SOAP containing the job ticket the Web service running in the server confirms whether its dictionary database has XSLT of the name space contained in the received job ticket step S . XSLT is an abbreviation of XSL Translation is a script language for reading processing and outputting an arbitrary XML document and is described as an XML document. XSLT makes it possible to convert a tag in one to one correspondence and also convert only some of nodes in the tree structure of an XML document. By using XSLT the Web service converts a job ticket having an unknown name space into a job ticket having a known name space. In order to execute XSLT a program called XSLT processor is executed to apply XSLT to an XML document. The Web service holds many XSLT documents in a native XML database. The native XML database is a database which can directly hold data of XML documents and search and acquisition are done using XPath. XPath is an abbreviation of XMLPathLanguage and is a standard which defines a description method designating a specific element in an XML document. XPath provides a means for tracking a tree structure representing XML data and accessing all elements and attributes in the XML document.

In order to acquire all XSLT documents corresponding to the ns2 name space contained in the received job ticket the Web service inquires XSLT of the dictionary database by describing Xpath as

Upon reception of this XPath expression the dictionary database of the Web server can acquire all XSLT documents corresponding to the ns2 name space from the native XML database. As XSLT corresponding to the ns2 name space XSLT in can be acquired from the database step S . DocumentStapling as Feature of the ns2 name space contained in the job ticket of is converted by XSLT in into two tags Staple Feature in a GANON name space and StaplePosition Feature in the GANON name space. For staple in the GANON name space Value false is set if DocumentStapling in the ns2 name space has OFF Option otherwise Value true is set. StaplePosition in the GANON name space is replaced with another Value in correspondence with each Option name of DocumentStapling in the ns2 name space. By applying XSLT in to the job ticket in a job ticket in is obtained. The job ticket having tags in the ns2 name space by an unknown printer driver which is actually used for printing is converted into a job ticket having tags in the GANON name space known to the printer driver according to the embodiment thus inheriting functions step S .

Next attention is given to a job ticket in . Assume that Inserter in the ns2 name space of the job ticket in cannot be converted even by applying XSLT in . In this case Inserter remains as an unknown tag step S . The Web service in the server performs processing for the unknown tag and encloses the unknown tag by UnKnown Tag in the GANON name space. By using Xpath the Web service searches the dictionary database to acquire Features whose character strings partially match the unknown tag and lists them as Values. If two Values InsertionUnit and InsertingSheet are found as similar candidates in the dictionary database they are inserted into the job ticket step S . If an exact match conversion result cannot be obtained the Web service of the server searches for and outputs a character string whose coincidence with characters of a target character string is equal to or larger than a predetermined value.

In this manner the Web service cooperates with the dictionary database and converts a job ticket containing an unknown name space into a job ticket having a known name space.

The Web service inserts the converted job ticket into the body of a created SOAP response and transmits the response to the printer driver step S .

The printer driver checks the job ticket received from the Web service and determines whether an Unknown tag exists in the GANON name space. If no UnKnown tag is detected print processing starts if an UnKnown tag is detected the printer driver checks whether to display a UI User Interface for prompting the user to select a character string representing a function which cannot be converted by the dictionary database. If no UI is displayed or the user does not select any function on the displayed UI the driver executes print processing while leaving the unknown job ticket. A general printer driver does not process an unknown job ticket and passes it through.

If the job ticket sent back from the Web service is assigned with an UnKnown tag for Inserter in the ns2 name space step S a job ticket shown in is received from the server and a setting to display a UI is made a UI in is displayed step S .

The user is prompted to select either of character strings InsertingSheet and InsertionUnit representing two functions listed by the Web service and the unknown tag is converted into the selected function. Assume that the user selects InsertingSheet step S . Then Inserter in the unknown ns2 name space is converted into InsertingSheet in the known GANON name space step S . All tags in the unknown ns2 contained in the job ticket are converted the job ticket has only known name spaces and print processing can be normally performed.

The Web service with the dictionary database also has a function of learning a tag which cannot be converted by XSLT.

Note that the printer driver may be installed as a printer controller in the printer of or in the host computer of the printer.

A function selected by the user and a function in a converted unknown name space are transmitted from the printer driver to the Web service via a SOAP message in and step S . The Web service saves as a log in the database a pair of the function selected by the user and the function in the converted name space. If the user selects the same function as a function in the unknown name space by a predetermined number of times e.g. five times step S a conversion combination is newly registered as XSLT and saved in the dictionary database. The reason that such a combination is not registered when a function is selected once is that a plurality of similar functions may exist and a proper function may not be determined or that updating of the database by a user s selection error is prevented.

In this case the Web service acquires from the printer driver information that Inserter in the ns2 name space is linked by the user to InsertingSheet in the GANON name space. Then the Web service generates XSLT shown in and registers it in the dictionary database step S .

As a result print settings of a job ticket containing an unknown name space created by an unknown driver can be converted into those of a job ticket containing a known name space without losing functions set by the user. Even a function which does not exist in the dictionary database can be automatically learned and the conversion precision can always be improved.

The server which provides the Web service has the same hardware configuration as that in and a description thereof will be omitted. shows an example of software and database configurations.

A communication unit receives a request complying with a SOAP protocol via a network Internet from a client an apparatus in which the printer driver according to the embodiment is installed . An analysis unit determines whether the request is a request to search for a tag character string in a name space of the own printer driver on the basis of a name space of another printer driver or a candidate selection result. If the analysis unit determines that the request is the search request it notifies a search unit of a message to this effect. The search unit searches for a tag character string which matches a requested function character string a corresponding table among a plurality of data tables of conversion from name spaces of printer drivers of other vendors into a GANON name space stored in a database ensured in the HDD . The search unit sends the search result to a response message creation unit and the response message creation unit generates a character string to be sent back to the requesting side. If no exact match character string is found the response message creation unit creates a response message containing candidate function character strings as described above. The response message created by the response message creation unit is sent back to the requesting side.

If the analysis unit determines that a candidate character string selection result has been received from the client it transfers the received data to a registration unit . If a function character string is newly selected the registration unit newly creates the selection result information in a spare database ensured in the HDD and sets the counter to 1 . If the same result as selection result information which has already been registered is received the registration unit increments the corresponding counter by 1 .

An updating unit monitors the spare database and registers a selection result whose counter value has reached a predetermined value in the embodiment 5 as authentic data in a corresponding table of the database .

Note that the dictionary database is implemented by the Web service in the above description but can be held as a pattern file in the printer driver. Instead of automatic learning the number of job tickets convertible by XSLT can be increased by adding patterns one after another by the manager or developer who maintains the dictionary database.

In a tag character string which is associated with print settings and cannot be interpreted by a driver is detected by the driver from print setting information of a job ticket . The driver extracts the detected uninterpretable tag character string and transmits it to a computer or transmits the entire job ticket containing the uninterpretable tag character string to the computer in which a dictionary Web service is installed 1 . In the computer a dictionary Web service refers to a dictionary database and converts the tag character string uninterpretable by the driver into a tag character string interpretable by the driver 2 . These processes are the same as those shown in except that the driver is installed in a printer and the printer inquires an uninterpretable tag character string of the dictionary Web service or the driver is installed in a computer and the computer inquires an uninterpretable tag character string of the dictionary Web service. A job ticket containing a tag character string which is obtained by a series of conversion processes and can be interpreted by the driver is transmitted from the dictionary Web service in the computer to the driver . While the print setting information is converted into the binary DEVMODE format or is kept in a text format the driver executes necessary image formation processing for data to be printed by using the transmitted interpretable tag character string and the driver transmits the resultant data to a printer . When the data to be printed is application data the driver converts the application data into a predetermined printer language. In an image mode the printer language is converted into a bitmap image. The printer language or bitmap image is transmitted to the printer . In the printer the bitmap image is processed by the printer controller and the printer engine finally prints the data on a printing medium such as paper or a CD ROM.

The dictionary database and dictionary Web service exist in the computer in but may exist in the computer as represented by a dictionary database . In this case the driver performs job ticket conversion processing processing in by using the dictionary database without using the dictionary Web service .

The computer is disclosed which processes the data to be printed and the job ticket serving as print setting information used to print the data. The driver detects a predetermined tag character string as uninterpretable information from the job ticket . The driver controls the OS to transmit the uninterpretable information detected by the driver .

The driver acquires interpretable information which is sent back in accordance with the transmitted tag character string.

Print setting information is created using the tag character string which is acquired as interpretable information by the driver .

The driver in the computer may detect uninterpretable information from a job ticket and convert into interpretable information a tag character string which is the uninterpretable information detected by the driver .

The above described function of the driver in the computer may be installed in the printer . The printer in comprises a printer engine which generates drawing information from data to be printed and prints out by using print setting information and drawing information generated by a renderer.

When uninterpretable information is a character string and no character string is registered in a table in the driver the driver may detect as information uninterpretable by the printer driver the character string contained in print setting information used to print data.

Uninterpretable information as print setting information used to print target data is received by the dictionary Web service in . The Web service converts the acquired uninterpretable information into interpretable information by using XSLT. The Web service transmits the converted interpretable information.

As described above according to the embodiment when print setting information exists in a document document in this case includes not only documents created by a document editing application but also those created by a spreadsheet application image editing application and the like whose printing is designated by an application and the print setting information is a job ticket XML format the function character string is interpreted. When the function character string cannot be interpreted it is converted into an interpretable string function character by using the dictionary database and then print settings are performed. Print processing which maintains previously set contents of print settings can be achieved.

As is apparent from the embodiment a main part of the present invention is characterized by processing of the computer program of the printer driver . In general the computer program is stored in a computer readable storage medium such as a CD ROM and can be executed by copying or installing it in the system. It is therefore apparent that the computer program also falls within the scope of the present invention.

As has been described above according to the present invention print settings made by another apparatus or system can be inherited to generate print data by using a job ticket having a general purpose format while each vendor is permitted to extend the description of the job ticket.

As many apparently widely different embodiments of the present invention can be made without departing from the spirit and scope thereof it is to be understood that the invention is not limited to the specific embodiments thereof except as defined in the claims.

This application claims priority from Japanese Patent Application Nos. 2004 224582 filed on Jul. 30 2004 and 2005 196814 filed on Jul. 5 2005 which are hereby incorporated by reference herein.

