---

title: Dynamic user experience with semantic rich objects
abstract: Semantic rich objects for a dynamic user experience. One or more actions in the process are represented by semantic rich objects (SROs) for exposing functionality of the process. Each of the SROs includes metadata associated with an action and an execution environment therefor. In response to an interactive gesture from a user selecting at least one of the SROs to perform a desired action in the process, metadata is extracted from the selected SROs to determine whether the desired action is available in the execution environment of the process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07774713&OS=07774713&RS=07774713
owner: Microsoft Corporation
number: 07774713
owner_city: Redmond
owner_country: US
publication_date: 20050628
---
Users often interact with computer application programs through a series of form based operations or actions to access the functionalities of the application programs. For example upon selecting an icon object on a computer display using an input device such as a mouse the user may be presented with a menu of options. The user may then select one of the options to interact with the selected icon object using functionalities of the application programs e.g. copy highlighted text or send a selected document to an email recipient . As such the set of menus becomes an entry point of the user s experience to the application programs. Presently available user interface design disadvantageously limits the user to only those displayed options because the applications typically include other functionalities that are not presented to the user. Consequently the user cannot see what the form designer developer did not code or present on the current user interface design. In order to show all or most of the functionalities of the application user interface designers or developers currently need to hard code the functionalities.

For example business applications use forms navigations query interfaces and other special user interface UI artifacts to create a desired user experience. The design of the UI artifacts determines the entry points for users into the application state and behavior. Unfortunately the design of the UI artifacts also limits these entry points. Further to the example workflow applications typically expose tasks to user in forms dedicated to the particular task instances e.g. form for approve this order task . Thus users may be unable to know as much about a particular task as they would like e.g. What happens if the task is skipped Are there other outstanding tasks related to this one which complicates collaboration and sharing of information.

Some existing systems attempt to enhance the standard or default menu of options by providing a list of short cut keys or tips to allow the user to further interact with the application programs. However these enhanced options are usually presented in a separate list and only statically extend the default options while forcing the users to remember more non user friendly shortcut keys.

Currently available workflow applications provide limited default options in their dedicated task UIs. Some other systems purpose built and UIs provide access the other functionalities of the applications through custom codes or customizations. In the workflow example additional information may be custom coded for a dedicated task UI but the UI designer cannot possibly anticipate every possible combination or direction that the user may want to explore in connection with a dedicated task UI. Therefore in addition to being overly cumbersome at times these custom codes or customizations usually do not cover all available functionalities and are static in nature such that the customizations have specific and limited usages.

Presenting adequate functionality to the user is particularly problematic in devices such as mobile devices with small form factors that have difficulty supporting traditional verbose forms i.e. forms in which headers and frames contain relatively large amounts of spatial and textual information . Verbose forms include for example buttons navigation bars parent child tables in which the child table moves in synchronization with a selection in a parent table etc. As such it is difficult to notify users of both the character of the information they are interacting with and the behaviors available from the underlying business applications around the information. The ability to address the information by means of speech commands is increasingly important.

Speech commands allow users to address a larger number of possibilities i.e. sentences than do traditional visual forms. Although audio interface systems such as speech recognition systems provide sets of basic functions users do not necessarily know which functions are available to them. For example in a conventional automated customer service system a user may receive a set of options via a set of pre recorded human voice. The user may be asked to speak to a telephone headset which type of customer services he or she wishes to access. As an illustration suppose the user wishes to speak to a customer representative regarding her bill. Initially the user may be prompted by an automated voice system to choose which areas of service she is calling about account billing adding services technical support or other services. In this instance the user may respond to the voice prompt by stating the desired services. After this initial selection the user would receive a further or a cascading set of options presented to the user before she may be directed to speak to a live customer representative directly. In many instances existing audio interface system allow the user to bypass the presented options and reach a live person customer service by speaking agent representative or talk to an agent . However this hidden shortcut is usually not apparent to the user even though the audio interface systems have capabilities to perform such action.

Embodiments of the present invention overcome the shortcomings of prior systems by exposing capabilities available to the user from the underlying data sources and applications using metadata through semantic rich objects SROs . In addition to what is available to a user through a single SRO the metadata includes information that enables the determination of what is available to the user via different combinations of SROs exposed by the same or different applications and data sources. Alternative embodiments further allow the user to determine how to use the SROs in combination. The exposed functionalities of actions may be combined and used by the user in a convenient manner to further expose the actions and functionalities of the application program. According to an aspect of the invention metadata in an SRO may be extracted and combined with metadata from another SRO such that the user may be presented with actions according to semantic rules e.g. Share this document with John and place it on his calendar on Jul. 1 2005 at 10 00 am . in addition to discrete single actions e.g. copy paste or the like .

Advantageously through the exposed metadata in SROs embodiments of the invention provide actions of application programs to the users in a plain sentence such that processes in application programs are transparent to the user. Embodiments of the invention also expose instances of SROs having metadata such that applications programs may determine the appropriate and available actions without adhering to a standard or static user interface UI configuration.

In other words aspects of the invention provide a full solution to the problem of custom logic in UIs determining and limiting users ability to fully access the richness of the behavior and insights available from business applications and the like. Aspects of the invention also reduce the amount of code needed in conventional form based UI design by increasing the semantic richness of the actions projected by the underlying applications and data sources.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring first to a block diagram illustrates a system for providing a dynamic user experience within a process using semantic rich objects SROs according to one embodiment of the invention. For example the system may be a computing system such as a computer in a computing device a computer server a plurality of computer servers or other computing device that is capable of executing computer executable instructions applications application software application programs computer executable routines or codes. In another embodiment system includes computing devices in a distributed system in which the computing devices are connected by a common communication network such as an intranet an internet or the like.

Still referring to system includes a processor associated with an interface . The processor processes instructions or commands from a user via the interface and executes computer executable instructions routines applications application programs or the like. The interface receives an interactive gesture from a user . For example the interface may be a display such as the display shown in and the user may use an input device such as a mouse or a keyboard to select one or more objects displayed on the display. In another embodiment interface may be an audio device coupled to a voice recognition system to provide interactive audio dialog with user such that user may respond to audio prompts audibly.

The system also includes a memory which may be a volatile non volatile a system memory or a non volatile memory interface of or other computer readable medium for storing data that may be transmitted across a common communication network such as an internet an intranet or other types of communication networks.

In one embodiment the memory stores a plurality of semantic rich objects SROs including metadata which are projections of actions and data state within application programs . For example application programs may include actions functions operations or the like to perform a task or handle an event and may also hold data see further discussion with respect to about the subject matter of the task e.g. that a task is about processing a particular order for a certain customer . As an illustration a workflow management application program handles workflow processes which involve assignment of tasks delegation of tasks or the like. A communication software may include actions such as facilitate communications between two parties e.g. sending electronic mails sharing documents among parties or the like or provide messaging services. As another illustration a multimedia software may include actions such as organizing media objects e.g. audio files still picture files or motion picture files or communicating media objects with another person.

Currently a set of static form based user interfaces presents actions within these application programs or processes to the users. For example many known UIs have standard sets of high level menu options such as File Edit Tools or Help for the users to select. Each of these high level menu options further provides additional options. Further to the example a high level File menu option may include Open Save Exit Print or other sub options. Overall the user is required to learn these different discrete menu options to be familiar or interact with application programs or processes. This learning experience would be similar to learning a new language learning the vocabularies and grammatical or logical rules e.g. Open option is a sub menu of File not Edit etc. before interacting with application programs .

Advantageously embodiments of the invention employ metadata representing actions within application programs or processes such that a set of available or appropriate actions may be presented to the user depending on the user s selection and in a plain sentence or semantic format. In an alternative embodiment the set of available or appropriate actions is selectively provided or presented to the user based on the context or the execution environment of the application programs . Referring again to an SRO is an item or object provided to the user for direct manipulation inspection or sharing in an execution environment such as system . Alternatively an SRO may be provided to the user through a medium such as a form that may restrict or enrich the behavior available from the SRO. In one embodiment an SRO may be specific to the context or execution environment that user is in direct control. For example an administrator of a computer network system may be presented with a full set of available functions so as to manage the computer network. On the other hand a workstation user A may be presented only a small set of options due to the workstation user A s role as a workstation user.

It is to be understood that formed based UI designs may be used in conjunction with or on top of SROs. For example an UI developer may provide a form with options to the users receiving the rich information in the SROs so that the UI developer is not required to code all or some of the options presented in the form. Alternatively embodiments of the invention employing the SROs reduce the amount of logic coding in the form that the UI developer customarily provide to present and enable the functionalities to the users.

In an alternative embodiment system stores data including data relating to performance history of the execution of the process of application programs prior user interactions with the execution of the process and a process execution model in memory such that system may present a set of customary or frequently used actions to user when extracting metadata from the SROs .

Referring now to a block diagram illustrates a data structure including metadata according to one embodiment of the invention. A first data field includes metadata representing actions associated with a process. For example the first data field may include metadata relating to action available codes metadata relating to action execution codes metadata relating to gesture process identification numbers PINS metadata relating to extensibility methods and metadata relating to object models .

The data structure also includes a second data field including metadata representing an execution environment of the process where the first data field is associated with said second data field to define a set of available actions to be performed in the execution environment of the process. For example the second data field may include metadata relating to application context and metadata relating to ambient service definitions . For example ambient service definitions include metadata relating to data matching an interactive gesture to an implementation of an action of the process or the application programs . For example suppose the application program or the context of an SRO is a web application service that executes computer executable instructions in assembly programming language. In this example the ambient service definitions may provide metadata relating to a given interactive gesture and its corresponding assembly language to be executed by the web application service.

In another embodiment the application context also includes data relating to context or execution environment of the application program whose actions SROs attempt to project. For example the data included in the application context may include user name user type user s execution environment such as computer identification operating system version or the like or restrictions or limitations regarding the user s accessibility to one or more options.

In one embodiment the data structure further includes a third data field including metadata representing a set of semantic rules where the semantic rules define one or more interactive gestures associated with the metadata in the first data field and the metadata in the second data field. For example the third data field may include metadata relating to a gesture map metadata relating to a speech act map and metadata relating to a set of context rules . As an illustration user may interact with the SROs in system via interactive gestures which may include using a mouse to select and drag an icon on a computer desktop audibly responding to an audio prompt or otherwise e.g. pressing keys on a telephone keypad or on a keyboard . Such interactive gestures enable system to map metadata extracted from the selected SROs to a set of available actions to the user for interacting with the processes including workflows.

In one embodiment the set of semantic rules are interpreted or evaluated based on the metadata and data relating to the execution environment or context of the application program included in the application context . For example when the SRO is projected out of the application process data source it contains some initial data as context. The UI environment either a UI that exposes SROs as included in the SROs or provides an additional layer on top of the SROs such as a form may assert or retract data into the context. For example a set of semantic rules may evaluate the user name type data and assert such data in the UI prior to applying the set of semantic rules to interpret user s interactive gestures to extract a set of available actions to the user from the selected SRO. In another example a set of semantic rules may evaluate an action and determine that such action can only be used once. As such the UI would not provide the action to the user.

While data structure includes data fields having metadata in the illustrated types other metadata types or data having information relating execution of processes within application programs or an execution environment of the processes may be included without departing from the scope of the invention. In addition while embodiments of the invention use metadata as exemplary data type other data configuration or organization that describes every element managed and or executed at the time of execution of data such that there is no need for recompilation of data before execution may be used without departing from the scope of the invention.

To further illustrate SROs is a block diagram describing functionalities represented by metadata of SROs according to one embodiment of the invention. In the illustrated embodiment for example processes such as an aggregation application a web service application a task flow application a context space application and a document application include one or more actions. Also one or more SROs and are used such that aspects or actions of the application programs are exposed. Advantageously aspects of the invention expose functionalities among the various applications through the use of SROs. For example the task flow application may transmit a task event to the SRO via arrow which may be represented by a user creating a task. As the user creates the task event in the SRO and assigns the task to an individual to perform the task the SRO generates a role event to the SRO via arrow which then in turn generates an action event to the SRO via arrow . As such according to aspects of the invention each SRO is versatile and may be used by different and various application programs to respond to different events or actions.

Still referring to arrows between applications and SROs illustrated in represent exemplary semantic relationships between the SROs and the applications. For example an arrow from the web services application to the SRO may indicate web services application exposes action or events through the SRO to a user e.g. the user . In another example an arrow from the SRO to the SRO may indicate that a task is assigned to a regional manager of a store. As such by representing one or more actions in the process through types of SROs to expose functionalities of the process of the application program system provides a dynamic user experience to user .

To illustrate a relatively simple dynamic user experience is a block diagram illustrating extraction of metadata from SROs according to one embodiment of the invention. For example as illustrated in a map type SRO includes metadata relating to a location. In this illustrated example the map type SRO represents a map of Seattle. Still referring to a weather type SRO includes metadata relating to time. As illustrated the weather type SRO indicates the weather condition of Seattle at 10 00 am on Jun. 3 2005 is cloudy with a temperature of 67 F.

When user selects or obtains a photo of the Space Needle a popular tourist location in Seattle the photo of the Space Needle is represented by a photo type SRO which includes metadata relating to photo quality time and location. As such by representing the photo type SRO using metadata and by extracting the metadata from the photo type SRO the map type SRO and the weather type SRO user may be presented with a box or window which includes a map with the location of the Space Needle relative to Seattle a global position satellite GPS location of the Space Needle relative to Seattle current weather condition surround the Space Needle and or a forecast of weather conditions surrounding the Space Needle. In an alternative embodiment the use of SROs enables the user to take additional actions with respect of the Space Needle such as request travel details or purchase the map of the Space Needle.

Referring now to a flow chart illustrates a method of providing a dynamic user experience within a process using semantic rich objects SROs according to one embodiment of the invention. In particular illustrates one example of user interactive gestures using a keyboard. Initially at a note type SRO represents one or more actions in the process including metadata associated with actions and an execution environment therefor. At interface receives an interactive gesture from user for selecting at least one of the SROs to perform a desired action in the process. In the illustrated example user enters through the keyboard the text Jennifer Finding Neverland with respect to the note type SRO . The desired action of user may be to watch Finding Neverland with Jennifer. At system extracts the metadata from note type SRO to determine whether the desired action is available in the execution environment of the process in response to the received interactive gesture.

In this determination processor may first define a set of semantic rules at to evaluate or interpret the interactive gesture Jennifer Finding Neverland . As discussed above each SRO carries with it some data such as in the application context in the second data field that are used to evaluate a set of semantic rules. In one example some of the data in the application context may be projected by the application program and some may be asserted retracted by the UI environment e.g. by the form that hosts SROs . The defined semantic rules may identify Jennifer as referring to a role type SRO while Finding Neverland may refer to a location type SRO. After determining Finding Neverland does not refer to a location the defined semantic rules may further identify Finding Neverland as a name of an object such as a document a title of a file or the like. As such system may search through available files stored in memory or access data from application programs to determine the semantic meaning of Finding Neverland as a text or media object type SRO. As system continues to resolve Jennifer and Finding Neverland using semantic rules at system provides a set of available actions to perform the desired action at . In one embodiment an SRO includes with it codes routines or computer executable instructions in the first data field such as the action available codes the action execution codes or the like. For example the codes may be used to cause the action to be executed. In another example the code may be complex code such as if the action is provided by a web service in which case the action execution code may need to know how to communicate with the web service.

In this example system determines that Jennifer is an instance of a role type SRO in the user s personal contact list e.g. address book email contact list or other communication contact list and Finding Neverland is a title of a motion picture. As such at system provides a set of available actions such as Contact Jennifer at 342 403 3323 and Rent movie Finding Neverland from VideoRental store or Buy movie tickets for Finding Neverland at Theater A and User is available on Saturday and Sunday from 4 00 10 00 pm according to User s calendar and Theater A s show time. In other words instead of having user to select Jennifer from user s phone book to find her phone number browse on the Internet to determine if the title Finding Neverland is available or look up the location of Theater A and determine the available show time system provides user a dynamic contextual and interesting user experience. Therefore the user is not limited to the standard or even custom coded actions provided by the application programs. Instead SROs use metadata to expose functionalities and actions of the processes in application programs and provide user with actions in a simple and plain language.

In one embodiment user s interactive gestures including speech acts see Appendix A for further detail are mapped to metadata of SROs such that system may extract metadata from the selected SROs to determine the desired action in response to a combination of visual and audio interactive gestures.

In another alternative embodiment the user generates one or more events via the interactive gestures such as mouse clicks mouse movement across the display or the like. The system receives or intercepts the events from the user and maps these events to actions exposed through the metadata of the SROs according to a set of semantic rules. As the metadata is extracted from the SROs by the system a set of available actions are presented to the user in response to the interactive gestures. The system may optionally execute or perform the available actions.

Referring now to user uses the pointing device to first select event object drag event object an phantom event object indicates dragging movement by user and drop event object inside the operational space as an event object . In one embodiment such drag and drop interactive gesture may be mapped to metadata of SROs according to the following rule 

Under this rule an interactive gesture e.g. drag drop is bound to a subject SRO e.g. a Sales Report and a object SRO e.g. a Business Colleague within an execution environment e.g. operational space .

Alternatively the drag and drop interactive gesture of user may be mapped to metadata of SROs according to the following rule 

In this example the actions available on a subject SRO are mapped to a SpeechAct such as request inform or command.

In another alternative embodiment the user may use an interactive gesture such as a drag and drop mouse action to associate one SRO with one or more other SROs to compose a set of available actions as a semantic sentence that includes actions or behaviors represented by the one SRO and the one or more other SROs. For example the user may select an SRO X that may be in response to the interactive gesture of the user such that actions or behaviors exposed by the metadata may be composed to for a sentence such as assign task A to user B and send reminder to user B s immediate supervisor upon completion of the task by user B. 

In a set of available actions is displayed or provided to user after receiving the drag and drop interactive gesture from user . In this example which involves a workflow the set of available actions include process history a down arrow indicates additional actions are available when user points the pointing device at the down arrow or user selects the down arrow using the pointing device . In the displayed process history user is presented with a set of information relating to order 123 as system extracts metadata from order 123 to determine whether information included in process history may be available to user .

For example the process history shows information of the purchase order confirmation of order 123 on Mar. 4 2005 by USER1 in Seattle. Note that user did not select an action such as show process history or show purchase order confirmation initially in . Instead user only drags and drops event object onto the operational space and system extracts metadata from event object representing order 123 to provide user with a set of available actions in response to such drag and drop interactive gesture to operational space . As such embodiments advantageously provide versatile SROs enhance user experiences without requiring users to memorize or remember shortcuts or options on a form based menu.

In another embodiment according to Rule 1 system provides a list of actions available after extracting metadata from the source and target SROs. If a default action set is available system may modify a previous list according to performance history prior user interactions or the like. Alternatively system may present the entire list of available actions to user from the subject and object SROs.

In yet another embodiment according to Rule 2 system translates available actions according to a set of SpeechActs. In this example suppose there are three SROs an SRO representing User1 another SRO representing User2 a colleague and a third representing a business object relating to sales numbers for the Western region filtered by business unit . After selecting the business object User1 drags the business type SRO over to the SRO representing User2 and drop the business type SRO onto of the SRO representing User2. After receiving such visual interactive gesture system extracts metadata from metadata from the three SROs and map to audio interactive gesture such as speech acts user may be provided with the following 

In one embodiment user may also combine the drag and drop interactive gesture with a text query by inputting search terms in search entry fields and . For example if user frequently uses certain speech acts for particular instances of a particular subject object pair system can propose these combinations as new speech acts available on all instances of the subject object pair. As such metadata relating to speech acts may be updated with new speech acts based on prior user interaction habits or history. Consequently embodiments of the invention eliminate the need to design customized code or customized sequence of actions for a user.

In a further alternative embodiment prior user interactions with execution of the process a performance history of the execution of the process and a process execution model may be represented as an SRO having metadata relating to actions of the processes in the application program. As such actions such as search may be available to a prior user interactions SRO making the set of available actions to user manageable query able and scalable.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in . For example computer represents one or more actions in the process by semantic rich objects SROs for exposing functionality of the process. Each of the SROs includes metadata associated with an action and an execution environment therefor. Computer also receives an interactive gesture from a user for selecting at least one of the SROs to perform a desired action in the process. The computer further extracts the metadata from the selected SROs to determine whether the desired action is available in the execution environment of the process.

The order of execution or performance of the methods illustrated and described herein is not essential unless otherwise specified. That is elements of the methods may be performed in any order unless otherwise specified and that the methods may include more or less elements than those disclosed herein. For example it is contemplated that executing or performing a particular element before contemporaneously with or after another element is within the scope of the invention.

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

In view of the above it will be seen that the several objects of the invention are achieved and other advantageous results attained.

As various changes could be made in the above system and method without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

Speech acts have a number of characteristics and features. Formally they involve a speaker hearer and the communicative action between them. For example J. L. Austin and John R. Searle developed a fairly rigorous technical vocabulary to describe speech act theory SAT involving the distinction of three aspects of a speech act e.g. Searle John R. Cambridge Cambridge University Press 1969 

Using semantic rules and gestural algebraic operators person A may click on a SRO representing person B and be given a list of more meaningful but generic speech acts 

