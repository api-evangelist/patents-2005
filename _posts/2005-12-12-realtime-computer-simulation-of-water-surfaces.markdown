---

title: Real-time computer simulation of water surfaces
abstract: Real-time simulation of liquids is disclosed. A liquid may be modeled as a collection of particles. Particles separated from one or more nearest neighbor particles by a distance greater than a threshold distance may be separated out as droplets. An iso-surface may then be determined and rendered for the particles not separated out as droplets. The droplets may be rendered as sprites.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07948485&OS=07948485&RS=07948485
owner: Sony Computer Entertainment Inc.
number: 07948485
owner_city: Tokyo
owner_country: JP
publication_date: 20051212
---
Embodiments of the present invention are related to computer animation and more particularly to simulation of the behavior of liquids and similar materials in computer animation.

Computer animation is the art of creating moving images via the use of computers. To create the illusion of movement an image is displayed on the computer screen then quickly replaced by a new image that is similar to the previous image but shifted slightly. This technique is identical to how the illusion of movement is achieved with television and motion pictures. Increasingly computer animation is created by means of 3D computer graphics programs. Such programs often use physics simulator routines to more realistically depict events being animated. A physics simulator models objects depicted in an animation based on physical laws. For example a physics simulator may model the forces acting on an object and based on those forces determine the object s acceleration at a frame of the animation. From the acceleration the simulator can determine the object s velocity in the next frame. From the objects current velocity and position the simulator may determine the object s position in a subsequent frame. The forces can be based partly on input from a user interacting with the object via an input such as a joystick steering controller or other interface. As such physics simulators are particularly useful for simulating interaction with characters in a video game.

Computer animation has been used to simulate liquids such as water in video games and computer animation for motion pictures. Realistic depiction of liquids presents numerous challenges in physically modeling the behavior of the liquid in terms of its motion and its optical effects. One particular challenge in computer simulation of the behavior of liquids is the simulation of a liquid splashing. When a real liquid splashes some of the liquid may separate into droplets. Unfortunately techniques for realistically and efficiently computer simulating such splashing behavior of liquids and similar materials have been unsatisfactory.

Particles systems and even smoothed particles also called meta balls with some interaction forces for fast fluid simulation. Smoothed particle hydrodynamics SPH was a more rigorous version of this. Application of this technique to graphics is described e.g. in Smoothed Particles A new paradigm for animating highly deformable bodies by Desbrun and Gascuel. There was also a real time implementation of SPH and marching cubes on the web by a programmer named Takashi Amada.

There are non particle methods i.e. grid methods used for splashing animations but they are typically expensive and used for off line simulations. Methods presented by Jos Stam were real time but it is believed they were limited to gaseous fluids and the demos at least were only 2 D.

Thus there is a need in the art for a method for simulating the behavior of liquids and an apparatus for implementing such a method.

To overcome the above disadvantages embodiments of the invention are directed to real time simulation of liquids. A liquid or a portion of a liquid may be modeled as a collection of particles. Particles that are separated from one or more nearest neighbor particles by a distance greater than a threshold distance may be separated out as droplets. An iso surface may be determined and rendered for the particles not separated out as droplets and the droplets may be rendered as sprites.

Although the following detailed description contains many specific details for the purposes of illustration anyone of ordinary skill in the art will appreciate that many variations and alterations to the following details are within the scope of the invention. Accordingly the embodiments of the invention described below are set forth without any loss of generality to and without imposing limitations upon the claimed invention.

Embodiments of the present invention are related to real time computer simulation of liquids. illustrates a block diagram of a computer apparatus for such real time computer simulation. The apparatus may generally include a processor module and a memory . The processor module may include multiple processors. For example the processor module may include a cell processor to perform physics calculations of the real time simulation and a graphics card to render images based on the positions of objects calculated by the cell processor. A cell processor is a type of parallel processor in which a power processor unit PU and one or more synergistic processor units SPU can share access to a main memory. In addition to the main memory each SPU may have its own associated local store. Cell processors are described e.g. in U.S. patent application Ser. No. 11 238 077 which is incorporated herein by reference. An example of a graphics card would be an NVIDIA Quadro FX 3450 available from Corporation of Santa Clara Calif. www.nvidia.com .

The memory may be in the form of an integrated circuit e.g. RAM DRAM ROM and the like . The memory may also be a cell processor main memory or SPU local store. The apparatus may also include well known support functions such as input output I O elements power supplies P S a clock CLK and cache . The device may optionally include a mass storage device such as a disk drive CD ROM drive tape drive or the like to store programs and or data. The device may also optionally include a display unit and user interface unit to facilitate interaction between the device and a user. The display unit may be in the form of a cathode ray tube CRT or flat panel screen that displays text numerals graphical symbols or images. The user interface may include a keyboard mouse joystick light pen or other device that may be used in conjunction with a graphical user interface GUI . The apparatus may also include a network interface to enable the device to communicate with other devices over a network such as the internet. These components may be implemented in hardware software or firmware or some combination of two or more of these.

A computer program may be stored in the memory in the form of processor readable instructions that can be executed on the processor module . The program may include instructions to implement a method for real time simulation of liquids. The instructions of the program may proceed according to the steps shown the flow diagram of the method in .

The method may be understood by referring simultaneously to and to . At step a liquid is modeled as a collection of particles as depicted in . In embodiments of the present invention some uncontained or freely flowing liquids e.g. water that is spilled may be simulated as particles. By way of example techniques such as smoothed particle hydrodynamics SPH may be used to simulate the behavior or such liquids.

Forces acting on the particles such as gravity wind collisions with rigid objects forces between the particles and the like may be simulated at step in any suitable fashion. Forces between particles may be simulated based on a localized particle density and distance of particles with respect to each other. The forces between particles may decrease as inter particle distance increases and increase with particle density. By way of example pressure forces may be such that they repel particles when the particle density is above a chosen value but also attract when the density is below. This force may be scaled by a function of their distance which falls to 0 when the particles volumes don t overlap. In SPH there are other forces such as viscosity damping based on relative motion of the particles and surface tension. Alternatively other forms of damping may be used and surface tension may be omitted

Based on the simulated forces the motion of each particle may be calculated from one frame to another. New positions x for the particles may be determined as shown in . Each particle may be characterized by its position x and its velocity v. It is noted that x and v are vector quantities having both magnitude and direction. Each of these quantities may be represented by three values that correspond to its three dimensional components. In a time stepping loop the new position x and velocity v may be computed by applying the rules v v a t where t is the time step between frames and a is the acceleration computed using Newton s second law f ma where f is the accumulated force acting on the particle . This technique is often referred to as simple Euler integration. It is noted that the quantities a f x and v are vector quantities characterized by a magnitude and a direction.

In some embodiments of the invention the net force f on a particle may be converted to a displacement so that Verlet integration can be used for stability. In a Verlet integration instead of storing each point mass s position and velocity the current position x and previous position x for each particle are stored. For a fixed time step t the update rule or integration step may be expressed as 2 x x

A gravity compression instability commonly occurs in simulations that have some kind of penalty force like the pressure forces in SPH. Very compressed particles cause a large pressure force that can lead to an explosion of the particles. Basically the integrator is very inaccurate at these high strain situations. Then there can also be a chain reaction where one excessive motion causes another more excessive motion and the simulation diverges . The particle velocities may be propagated from bottom to top to avoid the gravity compression instability.

By way of example a particle simulation may use a single SPU of a cell processor to simulate the motion of 1400 particles. The particle state may always remain resident on the SPU. The particle state may include current position x previous position x velocity v and local density for each particle.

The particles may be sorted vertically each frame for coherence. The particles are sorted by their height along the up direction. As used herein coherence means that the particles can be resorted easily because they are typically still mostly sorted in after one step. An Insertion sort can make little local fixes to the sorted order. Alternatively some full re sort methods are so fast that they would be adequate for this purpose. By way of example the particles may be sorted using an insertion sort. The insertion sort over all particle pairs may be implemented a nested loop over all particle pairs. For n particles the inner loop pairs the iparticle with each of the remaining n 1 particles while the outer loop increments the particle index i from 1 through n. The sorted order may be used to determine an early exit from the inner loop.

In some embodiments the software may be pipelined and unrolled by hand. Loop unrolling refers to taking the operations performed at each iteration of that loop and repeating that operation several times in a single iteration. Compilers can do this but if the compiler does not do this well it may be desirable not to rely on the compiler. Software pipelining is another way of transforming a loop to reduce stalls. In software pipelining a loop is rearranged so that data stores and loads can happen concurrently with execution. A software pipeline generally refers to a chain of processes or data processing entities arranged so that the output of each element of the chain is the input of the next element in the chain. A dependent instruction i.e. one that uses a result of a prior instruction needs to occur at a sufficient delay so that the results of that earlier instruction are ready. If the dependent instruction is executed too quickly the processor has to stall for the prior result. Some amount of buffer may be provided between consecutive elements. By way of example the inner loop may be unrolled 4 times with 16 pairs of particles processed in total to fill dependency stalls.

The inner loop may use structure of array SoA processing in which vectors are transposed from an array of structures inside the loop. Such transposes may dual issue with processing. Two sub steps may be taken for stability. Computations of the motions of these particles may be performed by organizing the data representing the three dimensional coordinates x y z for the particles in a structure of arrays SoA . The term structure of arrays refers to a data structure used to represent the coordinates for multiple objects. A structure of arrays allows operation on multiple points to take place simultaneously by operating on the coordinates of multiple points. This is possible if the x the y and z coordinates of the points are collected together. The application can then process multiple x y and z coordinates for the particles separately. For this the program may rearrange the data into either three separate arrays or a structure of arrays with one array each for one coordinate. By contrast 3D applications usually store the coordinates of single point in one structure. When handling multiple points such applications use an array of structures AoS where each structure in the array represents the x y and z coordinates for a single point. Such use of SoA representation of the particle data can help performance of fluid simulation.

Once the new positions of the particles have been calculated at step an iso surface may be constructed over the particles to simulate the surface of a liquid as shown in . Iso surface computation may be performed using a three dimensional mathematics application programming interface API with PU SPU scalar implementations. The iso surface construction program may be debugged on a PC or PU and recompiled to run on an SPU. Generation of the particle iso surface may proceed e.g. as described by J. Bloomenthal in An Implicit Surface Polygonizer . ed. P. Heckbert Academic Press Professional Inc. San Diego Calif. USA 1994 pp 324 349 which is incorporated herein by reference.

A first hash table may be used to bucket the particles into 3 D grid cells . The bucketing of the particles in the grid cells allows a fixed memory footprint to be associated with the collection of particles . By way of example and without loss of generality the grid cells may be cubes. Embodiments of the present invention are not limited to cubic cells. For example in some embodiments the cells may be tetrahedrons or other polyhedrons. A 3 D key representing a particular grid cell may be packed into a single word. A second hash table may be used to store the neighboring grid cells for each given grid cell. The nearest neighbor cells may be determined by dividing each cubic grid cell into eight sub cubes. For a particle located in a particular sub cube the neighboring cells will be the cubes adjacent to that sub cube. The positions of the particles are compared against the eight sub cubes to find corner values and compute the resulting triangles. Thus the iso surface computation for that particle will be based on the cube containing that particle and the seven cubes neighboring the corner of the cube where the particle can be found. This is sufficient for the iso value used.

It is noted that for embodiments of the invention that include processing on a cell processor the implementation described above can allow the hash table to fit in the local store of a SPU. Grid cells are traversed in both tables. The vertices are of the triangles that make of the iso surface may be stored in a buffer and then transferred out when the buffer is filled. It is important to pick the right iso threshold so that the iso surface doesn t cut out grid cells that have not been included. As used herein the term iso threshold refers to how close to a blob of particles the iso surface is drawn.

By way of example a marching cubes technique may be used to determine an iso surface of the particles. As used herein marching cubes refers to a polygonization method whereby a polygonal i.e. parametric approximation to an implicit surface enveloping the particles is created from the implicit surface function. Such a technique allows the iso surface to be rendered using conventional polygon renderers. It also permits non imaging operations such as positioning an object on the surface. Polygonization consists of two principal steps. First space is partitioned into adjacent cells at whose corners the implicit surface function is evaluated. Negative values are considered inside the surface positive values outside. Second within each cell the intersections of cell edges with the iso surface are connected to form one or more polygons .

If isolated particles are too far apart from other particles they can be separated out from the iso surface as droplets at step . For example if a particle is separated from its nearest neighbor by a distance d that is greater than a threshold distance dthat particle may be separated from the iso surface . The distances d are computed between a particle and nearby neighbors. Other particles are known to be farther away. The threshold distance dmay be related to smoothed particle sizes for the particles in such a way as to avoid drawing separate droplets for particles that are sticking together. By adjusting this threshold distance an animator may vary the number of droplets created and thereby alter the appearance of the liquid e.g. when it splashes.

The iso surface containing the remaining particles that are not isolated as droplets may be rendered in a conventional fashion at step as shown in . Rendering typically involves mapping a color value and intensity for each pixel to each polygon of the iso surface . Such rendering may take into account effects of reflection of light from the iso surface and refraction of light through the simulated liquid. A static environment map may be used to simulate reflection from the water simulated by the iso surface . A frame buffer may be used to simulate the refraction.

The droplets by contrast may be rendered as sprites at step . As used herein the term sprite generally refers to a partially transparent two dimensional animation that is mapped onto a special plane in a three dimensional scene. Unlike a texture map the sprite plane is always perpendicular to the axis emanating from the camera. The sprite image may be scaled to simulate perspective it can be rotated two dimensionally it can overlap other objects and be occluded but it can only ever be viewed from the same angle. This rendering method is also referred to as billboarding.

Sprites can provide an effective and efficient way to depict the droplets particularly if the image of the droplet is relatively small and on screen for a relatively short period of time. This technique is particularly effective where the image inside the sprite used to depict the droplet already depicts a three dimensional object such as a sphere . The use of sprites in this manner reduces the cost in terms of allocation of processor resources to drawing the isosurface and also makes the droplets appear smoother. To simulate liquid droplets the sprites may resemble reflective refractive spheres. To further enhance the realism of the droplets randomness may be encoded in the vertex value for the particle s making up the droplets to distort the corners of sprite. Such distortion makes the sprite look less regular and blend better with iso surface .

It is noted that not all liquids shown in a simulation need to be modeled as particles. For example height field techniques may be used to model liquid bodies held in containers. In a height field technique a liquid may be physically modeled by dividing it up into a plurality of columns using a height field technique. By way of example a body of water in a container may be represented by a two dimensional array of water columns e.g. in a 128 76 grid of columns . External pressures and gravity determine flow of water between the columns. Interaction between water columns and adjacent rigid bodies e.g. bodies in the water or containers holding the water may be modeled with a spring damper between the rigid bodies and water. These interactions may be modeled using multiple streaming data passes over the entire height field with each pass loading height field data in sections.

In a first pass interaction of rigid bodies with the liquid may be modeled e.g. using a spring damper penalty method for rigid body forces. The input for each pass includes the state for each rigid body and the external pressure flows and column heights for each section. The output from each pass includes the external pressures and forces on rigid bodies. In a second pass flow computations are performed. For a given column the flow computation may be limited to computation of the flow between the column and neighboring columns based on the column heights and external pressures. For example in the case of an array of rectangular columns the flow may be computed the given column and its eight nearest neighbor columns i.e. the columns adjoining its side faces and side edges. In a third pass the heights are changed based on the flows calculated in the second pass. In a fourth pass mesh vertices are created based on the column heights determined in the third pass. By way of example the height field may be converted to mesh using a star pattern. For a processor module including a graphics processor unit GPU that supports vertex texture this pass could be performed on the GPU.

Once the fluid heights have been calculated and the surface of the liquid represented by the height field simulation and the iso surfaces for liquid represented by particle based simulation the liquid may be rendered. Such rendering may take into account the effects of reflection from the liquid surface and refraction of light through the liquid. Reflection from liquid surfaces may requires an additional render of all objects surrounding the liquid so that images of these objects or portions of these objects may be included in the reflection e.g. as textures.

To simulate splashing effects particles may peel off from the height field based on the velocity of the surface of the height field. For example if the upward velocity of a region the surface of the height field exceeds some threshold simulated particles are generated and distributed over the region. Initial upward velocities of the particles may be determined from the upward velocity of the height field. The particles may also include an initial horizontal velocity component based on the flows in the corresponding liquid columns and or the motion of objects striking the surface. Details of this technique is described e.g. by J. O Brien and J. Hodgins in Dynamic Simulation of Splashing Fluids 95 pp 198 205 Geneva Switzerland 1995 which is incorporated herein by reference.

For splashes initiated by objects striking the body of liquid the peel off of particles may be limited to an impact zone in the vicinity of the location where the object strikes the surface of the liquid. If such an impact detected splash particles may be added in zone for a few frames. To simplify the simulation of the splash particles it may be assumed that their motion is only ballistic and that there are no interaction forces.

Additional details of height field techniques and particle based fluid simulation techniques are described e.g. by J. O Brien and J. Hodgins in Dynamic Simulation of Splashing Fluids 95 which is incorporated herein by reference and by M. Muller et al in Particle Based Fluid Simulation for Interactive Applications 2003 D. Breen M. Lin Editors which is incorporated herein by reference.

While the above is a complete description of the preferred embodiment of the present invention it is possible to use various alternatives modifications and equivalents. Therefore the scope of the present invention should be determined not with reference to the above description but should instead be determined with reference to the appended claims along with their full scope of equivalents. Any feature described herein whether preferred or not may be combined with any other feature described herein whether preferred or not. In the claims that follow the indefinite article A or An refers to a quantity of one or more of the item following the article except where expressly stated otherwise. The appended claims are not to be interpreted as including means plus function limitations unless such a limitation is explicitly recited in a given claim using the phrase means for. 

