---

title: Application programming interface for text mining and search
abstract: Systems and methods are described that allow programmatic access to search engine results and query logs in a structured form. The search results can be retrieved from the search engine in an intermediary form that contains the information that is in the HTML pages provided to web browsers (potentially with additional information). This intermediary form can then be broken down on the client machine, using local resources, to assemble the structured objects. The library also provides for caching of the search results. This can be provided both on the local machine and on a remote database. When the results for a query exist in the caches, they can be retrieved from such location instead of querying the search engine. Documents and/or web pages can also be cached. The library can also be directed to operate only from the cache, effectively exposing a local data set instead of the remote search engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07565362&OS=07565362&RS=07565362
owner: Microsoft Corporation
number: 07565362
owner_city: Redmond
owner_country: US
publication_date: 20050701
---
This application claims benefit under 35 U.S.C. 119 e from U.S. Provisional Patent application Ser. No. 60 626 790 entitled APPLICATION PROGRAMMING INTERFACE FOR TEXT MINING AND SEARCH and filed Nov. 11 2004 the entirety of which is hereby incorporated by reference.

In today s information age the location and collection of data has been simplified by various tools available to consumers. One method of such data collection can be facilitated via an interface to a network of computers e.g. internet intranet LAN WAN etc. where a user can enter desired information into a search engine and retrieve a set of results that correspond to entered search elements. In addition the user can repeat search efforts to refine and or modify the data the user wishes to retrieve. Such additional searches can be conducted manually or automatically based on the user s desires.

There exists a number of various search engines that perform searches employing unique algorithms and or techniques to locate and return data to a user. For example one search engine can provide a tool that allows a user to request data utilizing a boolean string whereas another search engine can employ a natural language interface to the user. By way of further example the search engine can restrict its search to documents that meet predetermined criteria whereas a second search engine can search every available resource to retrieve requested information.

Typically the search engine acts as a service wherein the service makes a call to desired potential data sources and then receives a set of information such as text or extensible mark up language XML for example. Such data results can be returned in an unorganized manner wherein the user must sort through all returned information to determine if one or more results contain the information the user wished to retrieve. In this manner the search for information can be inefficient and or incomplete if the user fails to locate desired information from the returned set. Moreover if the user is repeatedly performing searches for data it can be inefficient for the user to continuously enter search elements into the search engine. What is needed are systems and or methods that allow more efficient searching and locating of data desired by a user.

The following presents a simplified summary of various aspects described herein in order to provide a basic understanding of such aspects. This summary is not an extensive overview of the invention. It is intended neither to identify key or critical elements of the invention nor to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

Systems and methods are described that allow programmatic access to search engine results and query logs in a structured form. The search results can be retrieved for example from the search engine in an intermediary XML form that is similar to what is used to prepare the hypertext mark up language HTML pages for web browsers. This intermediary form can then be broken down on the client machine using local resources to assemble the structured objects. The intermediary form can contain more information than what would typically be contained in the HTML result pages prepared for web browsers such as but not limited to debugging statistics or ranking data .

The library also provides caching of the search results. This can be provided both on the local machine and on a remote database. When the results for a query exist in the caches they can be retrieved from such location instead of querying the search engine for example. Documents web pages can also be cached. The library can also be directed to operate only from the cache effectively exposing a local data set instead of the remote search engine. The cached data can be edited or completely constructed. Multiple caches can be supported in that if the cache is changed over time search results can be compared for different timeframes by switching caches.

The library can target multiple search engines utilizing the same API component. This allows applications using the API component to instantly switch between search engines without changing their code. The library handles the transformations needed to make all search interaction appear the same. Additionally the library can fabricate web pages that appear to be result pages of a particular search engine even if the query and results came from a different search engine or were entirely constructed.

To the accomplishment of the foregoing and related ends the invention then comprises the features hereinafter fully described. The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. However these aspects are indicative of but a few of the various ways in which the principles of the invention can be employed. Other aspects advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

Appendix A describes various class libraries and application program interfaces and this document is considered part of the subject specification.

The various aspects of the subject invention will now be described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. The invention relates to systems and methods that can allow developers to utilize an application programming interface API component that provides access to search engine results and query logs. Search engine results can be cached and query logs can utilized so that a developer can use such API components to interface with a library of search results and query logs to be able to more easily design programs and or websites that would leverage off of the cached search results and query logs. In this manner an application utilizing such search results can be rendered more efficient and can limit the processing load to the search engine by utilizing a cache of results in lieu of employing the search engine repeatedly. Such caching of data can occur in multiple locations such as on a local disk in memory or on a pre configured cache server for example.

Referring now to which illustrates a system with a library and an API component that interfaces with a search engine and a memory bank . The library can be employed to provide data to one or more users in a structured form via the API component . Such data can be gathered from various sources such as the search engine and the memory bank for example. In this manner the structured form of the data can mitigate the need for parsing out desired data and or creating programmatic objects in order to access such data.

The API component can be employed to assemble and extract parts of information from the search engine and thus provide such information in a structured format via the library . The structure of the data can be configured automatically or manually based on a user s and or application s needs. Moreover the API component can utilize client resources in order to alleviate loading of the search engine for example. The structure of the data can be defined via a class library See Appendix A which is considered part of this specification . The class library can be employed to determine the structure and content of the data that is returned by the search engine and subsequently presented to the library . Thus according to one approach a web site developer can employ the API component to interface with data from the search engine and or the memory bank to be able to more easily design programs and or websites that by leverage off of data supplied by either data source.

The API component can interface with one or more disparate applications and or devices e.g. the memory bank to provide data without actually instantiating the search engine each time data and or results are desired. In this manner requested data can be provided to the requester more quickly than conventional methods without taxing the actual search engine. Additionally system resources can be allocated and managed such that overloading conditions can be mitigated. Thus when data is requested repeatedly results can be provided more quickly than conventional methods.

The search engine can be any suitable type of application capable of accepting a set of search criteria and utilizing such criteria to search for and provide one or more results that meet the desired search criteria. Search criteria can relate to one or more aspects of information desired such as data length format content date of creation and so on. Additionally the search engine can employ one or more methods of accepting data elements to employ in a search such as various languages boolean connectors content format and the like. One or more users can access the search engine locally and or remotely. Such interfacing can be accomplished utilizing at least one protocol and or standard that facilitates communication between the API component and the search engine . For instance the API component can be located on a processing component that employs Ethernet to communicate to a wireless Ethernet server. The wireless server in turn can communicate with the search engine to request at least one search to be conducted.

The search engine can conduct searches based on an event periodically or continuously as desired. For example the search engine can employ a set of criteria to perform a search once a week for a period of six months. In this manner content that is added to a particular network over time can be accessed on a regular basis to insure the user is receiving current data content. By way of further example an artificial intelligence AI component not shown can be connected to the search engine to determine a best manner in which to perform a search of the data. For example the data criteria of the user can be modified to provide an ideal set of data results. Similarly the AI component can be employed to determine when searches are performed based on events and or additional information available to the search engine .

In one aspect of the invention the appropriate location to provide requested search elements to the accessing component can be determined by machine learning where one or more training sets of data with examples of desired results and or undesired results for searches can be utilized to train the system. In another aspect initial conditions based on one or more features that indicate desired results can be utilized. Such initial conditions can be adjusted over time and in response to user actions associated with returned results in order to improve discrimination. For example results utilized by the user can be employed to train the system to learn desired results for the associated query. In addition knowledge of which results are most often requested for a particular data item can be used to configure the appropriate interface to expose only such information that a data subscriber is interested in and or authorized to view. For example a result that is accessed more times by the user can be deemed more useful to the user. In this manner if a particular data consumer requests specific properties and or methods such data aspects can be utilized in the future.

In addition as utilized herein the term inference refers generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can refer to techniques employed for composing higher level events from a set of events and or data. Such inference can result in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification schemes and or systems e.g. support vector machines neural networks e.g. back propagation feed forward back propagation radial bases and fuzzy logic expert systems Bayesian networks and data fusion can be employed in connection with performing automatic and or inferred action in connection with the subject invention.

In yet another aspect of the invention a technique can be employed to anticipate the search criteria employed by a user. For example information such as historical data representing data and attributes associated with such data utilized to provide requested search elements to the accessing component can be employed to predict a preferred location to retrieve requested data within a network. For example intelligent decisions based on statistics probabilities inferences and classifiers e.g. explicitly and implicitly trained including Bayesian learning Bayesian classifiers and other statistical classifiers such as decision tree learning methods support vector machines linear and non linear regression and or neural networks can be employed in accordance with an aspect of the subject invention. In this manner the AI component not shown can be employed by the accessing component to provide decision making based on learned actions of a particular data consumer in relation to a particular data source.

The memory bank can be utilized to store parameters related to data and or to store actual data. Such data can be structured in the memory bank as desired and further can provide for data to be organized and edited by the user. For example data related to the search engine such as queries and results be stored in the memory bank and accessed as desired. Further data from the memory bank can be employed exclusively to alleviate expending resources of the search engine .

The extraction component can be utilized to accept data from the API component and or the library in an intermediary form wherein the data can be more easily manipulated and consumed by the client . For instance search results from the search engine can be presented to the client in an XML intermediary form that is substantially close to data employed to prepare HTML pages for web browsers. The extraction component can then parse out desired data using client resources. Once broken down the assembly component can bring together the extracted data to create an HTML web page for example.

In this manner the library can interface to both the search engine and to results from the search engine as stored in the results cache . The library can structure data from either source to provide to a disparate party. The API component can request desired structure of data from the library to be employed by the assembly component . The proper source for requested data can be determined based on one or more factors such as the frequency of the requests the content and or type of data desired and or the age of the data desired. In this manner more efficient use of system resources can be managed while providing data that meets user expectations. In addition the results cache can be employed to convert stored data from one format to another format for example. Moreover one or internal audits can be conducted to delete redundant search results and to provide clean up of data as desired.

In addition the results cache can assemble returned data that the user can interface and use to select desired data. For example data stored in the results cache can be employed to create a replica web page. In this manner the assembly component can receive data that appears to be real time data. Additionally the results cache can allow the assembly component to retrieve real time data as desired. In this manner the results cache can be used in place of or in conjunction with the search engine to retrieve desired data.

Data and or data pointers that reside in the results cache can be organized and edited in order to facilitate efficient access to the data and or data pointers that populate the results cache . For example data can be grouped according to searches conducted data content data format and the like. As another example the data content can be edited to simplify consumption by a disparate device such as the assembly component . Thus utilizing the results cache can provide pre formatted data and mitigate employment of search engine resources to provide a more efficient system architecture.

The library can request and receive data both from real time sources such as the search engine and from stored locations such as the query log and the results cache . The API can be employed to request data content structure and the like from the library in order to provide this information to the assembly component . For example the data delivered to the assembly component can be an XML form that can be parsed and reconstructed as desired. For example the assembly component can employ both real time and stored data to create an interactive replica web page that can be employed by one or more users. Thus the assembly component can receive data from the API and reconstruct data as desired by the user.

The data editor can be employed by the library to edit organize and structure data as desired. For example the application can leverage data from one or more results caches and can structure and or configure data to conform to requirements of the application . The data editor can employ any number of means to communicate with the library . For example the data editor can be a human machine interface that provides tools for making desired changes to data within the library .

The remote database can be almost any platform wherein data is stored. Such data can be configured organized edited etc. within the remote database . The remote database can interface to the API component via a network connection e.g. LAN WAN CAN etc. and utilize various communication protocols and or standards to interface to the API component . For example the remote database can be located in a disparate network and can accept results after each search for data is performed.

The local processor can be substantially any type of device that can accept and process data in order to achieve a result. Such processing can be done via software and or hardware that can reside in the local environment. Maintaining a local cache of search results can alleviate processing time employed with a disparate device such as a search engine for example. The local processor can be a computer a programmable logic controller software firmware etc. It is to be appreciated that although the processor is local to the API component it can interface to the API component in substantially any location utilizing any number of protocols and or standards.

The search engines can be located remotely or local to the API device . For example search engine can be remote to the API device and accessed via the Internet. In contrast search engine can be a local application utilized on the same computer as the API device for example. Various protocols can be employed to facilitate communication between the API device and one or more search engines .

More than one protocol can be employed to provide communication between components within system and such protocols can be employed concurrently with one another. For example communication with search engine can utilize a wireless protocol e.g. wireless Ethernet infrared etc. while search engine concurrently employs Ethernet. In this manner the API device is not restricted to a specific I O interface to request data searches and returns from the search engines .

Multiple search engines can be targeted utilizing the API device . This can allow the application component to utilize the API device to seamlessly switch between the search engines without changing their code. In addition the API device can handle transformations needed to make substantially all search interaction appear the same. Additionally the API device can fabricate web pages that appear to be the result pages of a particular search engine even if the query and results came from a different search engine or were entirely constructed from disparate sets of data.

The search engines can employ any number of specific algorithms and or routines to accept and conduct requested data searches. In addition each search engine can provide specific information as desired by the user. In this manner the API device can act as a library that is populated by the returns of searches performed by one or more search engines . Such returned data can be structured in that it can be accessed by the application component to eliminate the need for parsing and creating programmatic objects for the returned data.

The query log can be coupled to the library to provide storage of various data associated with one or more data searches. The query log can contain one or more statements search elements descriptors and the like that have been employed to conduct a search for particular data. The query log can employ an editing component not shown that can organize and partition data as desired by a user. For example data can be sorted by session by search by keyword and so on.

A page fabricator can be coupled to the library to create replica web pages utilizing disparate data sources. For example the page fabricator can employ data to fabricate web pages that appear to be the result pages of a particular search engine even if the query and results came from disparate search engines e.g. search engines and or were entirely constructed. By way of further example a web page or pages can be created utilizing data from the same search engine and a query log and results cache associated therewith.

At a search is performed based on the at least one data element sent by the requestor. The search conducted can be tailored to a user s needs or requirements. For example the search can be limited to only a subset of available resources or limited to data that conforms to one of several predetermined formats. The search can be conducted manually e.g. user initiated or automatically e.g. based on event periodically or one time . At results from the search engine are stored. Such results can be parsed and organized such that data is available to a user in a more consumable form. Storing the data can be limited based on time and or other factors to maintain only a set of data that meets a particular time limitation for example. By way of further example the data can be grouped such that like data is stored together and or data that meets certain criteria is stored as a subset as desired.

At the stored data is interfaced to one or more applications. Such applications can employ the search engine results to create an interactive replica of data. Communicating with the stored data can involve a plurality of disparate protocols data structures and the like in order to properly access desired data. At the results from the search engine are utilized to optimize development. In one approach various results are stored in a particular structure e.g. XML HTML etc. to be utilized to create and or simulate search engine activity. In this manner a developer can employ such optimization to access and utilize data for a particular application for example.

At at least one of the query log and results cache are interrogated. In this manner desired data can be acquired without the employment of a search engine or other real time mechanism for example. The acquisition of such data without taxing system resources e.g. the search engine provides a distinct advantage over conventional methods. Such advantages include but are not limited to efficiency of the system access to more consumable data pre formatting of the data etc. At data retrieved from at least one of the query log and or the results cache is assembled for consumption by at least one device.

At search engine results are structured to conform to development needs. Such data structure can include the type format class content etc. of information to be implemented in development. In this manner data can be deconstructed and subsequently reassembled efficiently. In addition such structured data can be sourced from a search engine returns store and or query log for example. At this data is implemented in one or more applications. Such data implementation can take advantage of search engine results by optimizing the utilizing of such data per the requirements of the developer and or application with which such data is implemented.

With reference to an exemplary environment for implementing various aspects of the invention includes a computer is depicted. The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to 8 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA and Small Computer Systems Interface SCSI.

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the subject invention can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port can be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices which require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 802.3 Token Ring IEEE 802.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

One possible communication between a client and a server can be in the form of a data packet transmitted between two or more computer processes. The system further includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s can interface with one or more client data store s which can be employed to store information local to the client s . Similarly the server s can interface with one or more server data store s which can be employed to store information local to the servers .

Appendix A describes various class libraries and application program interfaces APIs and is considered part of the subject specification. It will be appreciated that while the class libraries APIs etc. described in Appendix A can be utilized in conjunction with various aspects set forth herein such class libraries and or APIs are not to be interpreted in a limiting sense or as delineating the scope of the subject invention. Rather the libraries and APIs described in Appendix A are exemplary in nature and the subject invention can be utilized in conjunction with these and or any other suitable class libraries APIs etc.

What has been described above includes examples of the subject invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the subject invention but one of ordinary skill in the art can recognize that many further combinations and permutations of the subject invention are possible. Accordingly the subject invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. In this regard it will also be recognized that the invention includes a system as well as a computer readable medium having computer executable instructions for performing the steps of the various methods of the invention. In addition while a particular feature of the invention may have been disclosed with respect to only one of several aspects or implementations of the invention such a feature can be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes including has having and variants thereof are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising and its variants.

