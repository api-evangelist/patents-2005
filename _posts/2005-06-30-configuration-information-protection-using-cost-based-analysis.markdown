---

title: Configuration information protection using cost based analysis
abstract: A cost is determined for events related to the modification of system configuration parameter values in a computing device. If the cost meets or exceeds a threshold, a challenge is presented to a user of the computing device. If the user does not answer the challenge correctly, the system configuration parameters are reverted to their original values.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07617538&OS=07617538&RS=07617538
owner: Microsoft Corporation
number: 07617538
owner_city: Redmond
owner_country: US
publication_date: 20050630
---
The Internet has made it very easy and popular for ordinary computer users to download executable content such as programs processes scripts ActiveX controls applets etc. to computing devices. In many cases this executable content may be downloaded and executed via the Internet without the user realizing that such an event took place. Unfortunately such executable content is often malicious. For example executable content may intentionally modify security critical parameters on a computing device thus leaving the computing device open to exploitation by external processes.

Various technologies are described herein for preventing or mitigating unauthorized access to information and functionality in a computing device by malicious executable content using a challenge designed to distinguish between a human and an automated process.

In accordance with some of the implementations described herein system configuration parameters are assigned a credit cost. As changes occur to the system configuration parameters a parameter modification cost is calculated using the credit costs of the changed parameters. By comparing the parameter modification cost to a threshold a determination may be made as to when if ever a challenge is to be presented to a user. If a challenge is presented to the user and the user does not properly answer the challenge changes to the system configuration parameters are reversed.

This Summary is provided to introduce selected concepts from the Detailed Description below in a simplified form. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Described herein are various technologies for preventing or mitigating modification to select information protected parameters and functionality protected processes in a computing device by malicious executable content using a challenge designed to distinguish between a human and an automated process. In accordance with various implementations of the technologies described herein protected parameters and processes are monitored. If it is detected that a protected parameter has been modified or that a protected process has been called or invoked a challenge is presented to the user of the computing device. The challenge that is presented to the user is constructed in such a way as to allow a determination to be made based on a correct response to the challenge or an incorrect or lack of response to the challenge whether the challenge was answered by a human. If it is determined that the challenge was answered by a human the change to the protected parameter or the calling or invocation of the protected process is allowed assuming that any other security requirements that may be imposed by the computing device for changing the protected parameter or calling or invoking the protected process have already been met e.g. administrator privileges etc. . If however it is determined that the challenge was not answered by a human some action is taken to counteract or otherwise address the modification of the protected or the calling or invocation of the protected process. For example and without limitation the change to the protected parameter could be reversed the call or invocation of the protected process could be prevented or otherwise mitigated or some other action could be taken.

While the technologies described herein may be used to prevent or mitigate the modification of a wide variety and type information in a computing device protected parameters will typically comprise information that is related to the security of the computing device. For example and without limitation in some embodiments protected parameters comprise a select subset of security related system configuration parameters of the computing device. In these embodiments the protected processes may comprise processes APIs etc. that include functionality for modifying the select subset of security related system configuration parameters.

In some implementations a challenge is presented to the user of a computing device every time a protected parameter is changed or a protected process is called or invoked. However as will be appreciated in some cases this will create an undesirable experience for the user. For example when software is being installed in a computing device a significant number of parameter changes may need to be made. As such in some implementations various techniques or mechanisms are employed to selectively present challenges to the user.

One way to avoid burdening a user of the computing device with repeated challenges during the software installation process is to override the challenge presentation during software installation. However simply overriding challenge presentations for all software installations may leave the computing device unacceptably vulnerable to malicious executable content. As such in some implementations challenge presentations are overridden only when it is determined that the software being installed is from a trusted source. For example in one implementation challenge presentations are overridden whenever a change in a configuration parameter or a call or invocation of a protected process is made in conjunction with the installation of software that is signed by a trusted authority.

In accordance with another implementation changes to protected parameters and or calls or invocations of protected processes are allowed to take place uninterrupted by the presentation of a challenge until some predetermined condition has been met. For example and without limitation in some implementations a credit based scheme is employed wherein selected protected parameters each assigned a credit cost. Each time one of the protected parameters is modified the credit cost of the changed parameter is added to a parameter modification cost. When the parameter modification cost exceeds a predetermined threshold value a challenge is presented to the user of the computing device. If it is determined that a human properly responded to the challenge the modified parameters are maintained. However if it is determined that the challenge was not answered by a human one or more of the changed parameters are returned to their pre changed value.

In accordance with yet another implementation changes to protected parameters that are carried out by a given process are allowed to take place uninterrupted by the presentation of a challenge until the given process has completed. Once the given process has completed a challenge is presented to the user of the computing device. If it is determined that a human properly responded to the challenge the modified parameters are maintained. However if it is determined that the challenge was not answered by a human one or more of the changed parameters are returned to their pre changed value.

Turning now to illustrated therein is an example of a suitable computing environment in which the various technologies described herein may be implemented. It should be understood that computing environment is only one example of a suitable computing environment in which the various technologies described herein may be employed and is not intended to suggest any limitation as to the scope of use or functionality of the technologies described herein. Neither should the computing environment be interpreted as necessarily requiring all of the components illustrated therein.

The technologies described herein may be operational with numerous other general purpose or special purpose computing environments or configurations. Examples of well known computing environments and or configurations that may be suitable for use with the technologies described herein include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

With reference to computing environment includes a general purpose computing device . Components of computing device may include but are not limited to a processing unit computer readable media input devices output devices and communications connections .

In general processing unit may comprise one or more general or special purpose processors ASICs or programmable logic chips that are operable to execute or embody computer executable instructions. By way of example and not limitation computer readable media may comprise computer storage media and or communication media. Computer storage media may include volatile media nonvolatile media removable storage and or non removable storage implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store data and or computer executable instructions.

Communication media typically embodies computer executable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

Computing device may include one or more input devices through which a user may enter commands and information into computing device . Examples of input devices include without limitation a keyboard a pointing device e.g. a mouse a tablet electronic digitizer a microphone a trackball a touch pad or various other input devices. Computing device may likewise include one or more output devices through which a user receives information from computing device . Examples of output devices include but are not limited to a display device speakers a printer etc.

Computing device may operate in a networked environment via one or more communications connections . Communications connections may include or employ various hardware and software and may implementing various communications protocols and the like for facilitating between nodes addressable entities in a network. Network nodes may include but are not limited to personal computers servers routers peer devices peripheral devices etc. and may include many or all of the elements described above relative to the computing device . For example shows computing device being connected to a single remote computing device via communications connections . However it will be appreciated that computing device may be connected to any number of nodes in a network.

Turning now to shown therein is a system for preventing or mitigating access to protected parameters and or protected processes in computing device . In the following discussion the features and functions of system are described as being implemented as software modules executed in computing device . However it should be appreciated and understood that system may be implemented in any number of other systems in software hardware and or firmware. Additionally it should be understood that while the functionality of system is described as being distributed in a particular manner between various modules in other embodiments this functionality may be distributed differently either between one or more or all of modules or by other modules within and or outside of the context of the system .

As shown system includes protected parameters protected processes an accessing process a parameter protection module and an external policy manager . Parameter protection module includes a parameter monitoring module a process monitoring module a challenge module a cost module a policy module and a log module .

Any or all of the modules of the parameter protection module may be a part of a trusted computing base of the computing device. As used herein the phrase trusted computing base refers to all protection mechanisms within computing device e.g. hardware firmware and or software the combination of which is responsible for enforcing a security policy within computing device .

In general a protected parameter may be any type of information that is stored in some form of computer readable media within or accessible by computing device . For example and without limitation protected parameters may comprise all or portions of files libraries components objects programs dynamic linked libraries DLLs data structures database entries etc. However in accordance with some of the implementations described herein protected parameters comprise system configuration parameters.

As used herein system configuration parameters comprise parameters e.g. properties settings and other information that are used by an operating system and or applications running on computing device to perform various functions. In accordance with some operating systems such as various operating systems from Microsoft Corporation of Redmond Wash. such configuration parameters are stored in a hierarchical file structure referred to as the registry. In other operating systems configuration parameters are stored in other ways such as in other structures or files. As such the term configuration parameters is used generally herein to indicate any such configuration parameters regardless of the operating system used to access or manage the information.

In accordance with some implementations protected parameters comprises registry entries that have been identified as being particularly relevant to the security or integrity of computing device . Examples of such registry entries include but are not limited to registry entries related to firewall configuration settings virus protection settings the installation of software security permissions non sandboxed resources telephone dialer software TCP connections Remote Access Services RAS file system access system activation and or enabling or disabling any or all of the technologies described herein for preventing or mitigating modification to protected parameters.

In general a protected process may be any type of process that has functionality for modifying protected parameters . However protected processes will typically comprise a subset of the Application Programming Interfaces APIs in computing device that have functionality for modifying protected parameters . For example protected processes may comprise some subset of the APIs in computing device that require administrator level privileges to invoke. Alternatively or in addition protected processes may comprise some subset of APIs in computing device that are designated as protected with respect to a trusted computing base of computing device . Alternatively or in addition protected processes may comprise processes in the computing device that are used to uninstall software. For example and without limitation protected processes may include processes that uninstall virus protection programs or other security related programs.

In general accessing process may be any process that has appropriate functionality to access protected parameters and or functionality to invoke a protected process . Accessing process may be a benign process such as a process that is instigated by a user a non malicious program or process or an operating system process etc. Alternatively accessing process may be a malicious process such as a virus a Trojan horse a malicious script etc. Accessing process may also be a process that was not designed to access protected parameters and or processes but which does so due to programming error either directly or by proxy.

In general parameter monitoring module monitors protected parameters for changes and take various other actions described below when such changes have been detected. The precise manner in which parameter monitoring module monitors protected parameters will vary based on such things as the format of protected parameters the type of computer readable media in which protected parameters are stored the type of operating system employed by the computing device and or the type of data structure or structures in which the protected parameters are stored.

For example and without limitation in one implementation protected parameters comprise system configuration parameter stored in a hierarchical data structure e.g. a registry that is managed by the Windows XP operating system from Microsoft Corporation of Redmond Wash. In such a case the parameter monitoring module may monitor the protected parameters using one of the functions e.g. the RegNotifyChangeKeyValue function provided by the operating system for managing the registry. In other implementations other mechanisms may be used to monitor for changes to protected parameters including other functions provided by other operating systems or other available process or functions.

Protected parameters that are monitored by parameter monitoring module may be either static or dynamic. That is the identity or location of protected parameters may be hardwired in the parameter monitoring module or it may be changeable. For example parameter monitoring module may contain or have associated therewith a data structure that specifies the identity or location of protected parameters . In such a case the identity or location of protected parameters may be changed by some secure mechanism within or outside of computing device . For example the identity or location of protected parameters may be changed by policy manager module or by policy module manager under instructions from external policy manager each of which is described below.

Included in the actions that may be taken by protected parameter module upon the detection of a change to a protected parameter or parameters is informing challenge module regarding the changes so that challenge module may present a challenge or take some other action. Other modules that may be notified by parameter module regarding a change to a protected parameter or parameters are log module cost module and policy module.

Additionally parameter monitoring module may also restore changed parameters to their original pre changed values. The manner in which parameter monitoring module restores values of changed protected parameters will vary based on such things as the format of protected parameters the type of computer readable media in which protected parameters are stored the type of operating system employed by computing device and or the type of data structure or structures in which the protected parameters are stored.

For example in accordance with one implementation parameter monitoring module stores one or more previous values of various protected parameters in a data structure. When requested such as by challenge module or cost module to restore one or more protected parameters to a pre change value or values parameter monitoring module restores the value of the changed parameter or parameters to a stored pre changed value.

In operation process monitoring module monitors the calling or invocation of protected processes in computing device and may take various other actions described below when the calling or invocation of protected processes has been detected. Additionally process monitoring module may prevent the calling of or interrupt the execution of protected processes when appropriate such as when a challenge has been failed. The precise manner in which process monitoring module monitors the invocation of protected processes and prevent the calling of or interrupt the execution of protected processes will vary based on such things as without limitation the type or types of processes monitored by the process monitoring module and or the type of operating system used in computing device .

For example the operating system of computing device may provide mechanisms for monitoring and or controlling processes. In such a case process monitoring module may use these mechanisms for monitoring and or controlling protected processes . Alternatively protected processes may be hooked to provide such monitoring and or controlling functionality to process monitoring module . For example operating system APIs that have functionality for modifying configuration information may be hooked to call back to the process monitoring module whenever they are called. In a more particular example such as when the operating system is the Windows XP operating system from Microsoft Corporation of Redmond Wash. the RegSetValueEx function may be hooked to call back to the process monitoring module whenever it is called.

Protected processes that are monitored by process monitoring module may be either static or dynamic. That is the identity of protected processes may be hardwired in the protected processes module or it may be changeable. For example process monitoring module may contain or have associated therewith a data structure that specifies the identity of protected processes . In such a case the identity of protected processes may be changed by some secure mechanism within or outside of computing device . For example the identity of protected processes may be changed by policy manager module or by policy module manager under instructions from external policy manager each of which is described below.

Included in the actions that may be taken by processes monitoring module upon the detection of calls to or invocations of protected processes is informing challenge module of such calls or invocations so that challenge module may present a challenge or take some other action. Other modules that may be notified by process monitoring module regarding such calls or invocations are log module cost module and policy module.

In operation challenge module presents challenges to a user of computing device via one or more output devices of computing device upon notice from parameter monitoring module that one or protected parameters have been changed or upon notice from process monitoring module that one or protected processes have been called or invocated. In accordance with some implementations challenge module presents a challenge to a user of computing device whenever a message is received from parameter monitoring module that a protected parameter has been changed or whenever a message is received from process monitoring module that a protected process has been call or invoked. In accordance with other implementations challenge module presents a challenge to a user of computing device bases on instructions from cost module or based on some policy as received from policy module .

Challenges presented to a user of the computing device by challenge module will typically include a presentation phase and a response phase. In the presentation phase some form of human discernable information is presented to the user such as via output devices . In the response phase a response to the challenge may be received from the user or no response may be received for example via an input device . Based on this response or lack of response challenge module determines whether a human correctly responded to the presented human discernable information.

The information that is presented to the user in the presentation phase by challenge module will typically include a puzzle and puzzle directions. In general a puzzle comprises information that the user of computing device is asked to recognize or respond to in some way. Puzzle directions instruct the user as to the manner in which the user should respond to the puzzle. In some implementations the puzzle and the puzzle directions are presented together such as in a common window of a graphical user interface presented on a display of a computing device.

In other implementations the puzzle and the puzzle directions may be presented separately such as in different windows and or at different times. In some implementations puzzle directions are not explicitly presented to the user. Rather in some implementations the manner in which the user is to respond to the puzzle may be inferred by the content form or presentation of the puzzle. In some implementations the information presented in the presentation phase also includes warning information which describes protected parameters that has been modified or protected processes that are being invoked and or the consequences of modifying protected parameters or invoking protected processes .

Typically the puzzle that is presented to the user by challenge module will include visual information a visual puzzle or audio information an audio puzzle . For example a visual puzzle may include a series of letters or numbers that are obscured and or contorted in some way that makes automated optical character recognition OCR difficult but which are not obscured and or contorted to such an extent that a human user cannot recognize them. As another example a visual puzzle may include one or more images that are obscured contorted or rearranged in some way to make them difficult for an automated process to recognize. As another example a visual challenge may comprise an image based or textual puzzle that is designed to be easily solved by a human but difficult to solve by an automated process.

An audio puzzle may include for example an audible word or phrase that is presented to a user. In such cases the user may be asked to type the word or phrase in a text box presented on a display device of the computing device. In another example of an audio puzzle a user is presented with a question and asked to enter the answer to the question in text box presented on a display device of the computing device.

Returning to in operation log module stores information related to previous actions and activities in the system . For example log module may store a history of changes made to protected parameters a history of invocations of protected process and or various other historical information related to the operation of parameter protection module . Typically log module stores information in a data structure in computer readable in computing device . In some implementations log module presents or provides its stored information to policy module which in turn may send the information to the external policy manager for analysis.

In general cost module operates in conjunction with challenge module in implementing a credit based scheme wherein challenges are presented to a user of computing device only when some predetermined condition or conditions have been met. For example in one implementation each protected parameter or process is assigned a credit cost. Each time one of the protected parameters or processes are modified during a given session or time period the credit cost of the protected parameter or process is added to a parameter modification cost. When the parameter modification cost exceeds a credit threshold the challenge module presents a challenge to the user of the computing device.

The credit costs associated with protected parameters may be identical for all protected parameters or may different for individual protected parameters or groups of protected parameters. For example and without limitation protected parameters or groups of protected parameters may have different costs based on the impact individual protected parameters or groups of protected parameters have on overall security of computing device relative to one another. In some implementations credit costs and the credit threshold may be set and or adjusted by policy module . Further details regarding the functionality of cost module is discussed below with respect to .

Policy module performs various operations related to modifying the functionality other modules and in parameter protection module . For example and without limitation policy module may include functionality for interacting with parameter monitoring module to change the protected parameters that are monitored by parameter monitoring module . Likewise policy module may include functionality for interacting with process monitoring module to change the protected processes that are monitored by process monitoring module . As another example policy module may include appropriate functionality for changing or specifying the particular challenges that are presented by challenge module and or for specifying conditions that are to be met before a challenge is presented. As yet another example policy module may include appropriate functionality for changing or specifying the particular processes that are used by cost module .

Turning now to illustrated therein are operational flows including various operations that may be carried out in preventing or mitigating changes to protected parameters in computing device . The following descriptions of are made with reference to computing device of and system of . However it should be understood that the operational flows set forth in are not intended to be limited to being performed by system or in computing device . Any of the operational flows set forth in or any individual operations described in these operational flows may be implemented in various other systems including distributed systems. While each of the operational flows illustrated in indicate a particular order of operation execution in other implementations the operations may be ordered differently. Furthermore in various implementations one or more of the operations illustrated in the operational flows set forth in maybe be optional.

In response to the detection of a restricted event an installation determination operation determines whether the restricted event is associated with the installation of software. If installation determination operation determines that the restricted event is associated with the installation of software operational flow proceeds to a trust determination operation . If installation determination operation determines that the restricted event is not associated with the installation of software operational flow proceeds to a cost calculation operation .

Trust determination operation determines whether the software being installed is signed by a trusted authority. If trust determination operation determines that the software being installed is signed by a trusted authority the operational flow ends. If trust determination operation determines that the software being installed is not signed by a trusted authority the operational flow operational flow proceeds to cost calculation operation .

Cost calculation operation calculates a parameter modification cost based on credit costs associated with one or more restricted events that have occurred in the computing device. For example in one implementation each detected event is assigned a credit cost. Each time a restricted event is detected calculation operation sums the credit costs of the detected restricted events to obtain the modification cost. Alternatively calculation operation may keep a running total of the credit costs associated with restricted events are added as they occur. As described below with respect to respect to cost calculation operation may use various other algorithms to determine parameter modification cost.

Threshold determination operation determines whether the parameter modification cost calculated by cost calculation operation exceeds a credit threshold. If threshold determination operation determines that the parameter modification cost does not exceed the cost threshold operational flow ends. If threshold determination operation determines that the parameter modification cost does exceed the cost threshold operational flow proceeds to challenge operation .

Challenge operation presents a user of the computing device a challenge such as the challenges described above with respect to challenge module . Next a challenge met determination operation determines if the challenge has been answered by a human. If challenge met determination operation determines that the challenge has been answered by a human operational flow ends. If challenge met determination operation determines that the challenge has not been answered by a human operational flow continues to counteract operation .

Counteract operation takes some prescribed operation to counteract the actions of the detected restricted event . The action taken by counteract operation depends on the form of the detected restricted event . For example and without limitation if restricted event changed a protected parameter from a first value to a second value counteract operation may change the parameter back to the first value. As another example if the restricted event invoked or attempted to invoke a protected process counteract operation may stop the protected process or prevent the invocation of he protected process. Following counteract operation operational flow ends.

In accordance with some implementations prior to the detection of the process attempting to modify the protected parameter a number of initialization processes are carried out e.g. by cost module . Included in the initialization processes is a credit cost initialization process a change list L creation process a credit threshold U initialization process and or a parameter modification cost U initialization process.

During the credit cost initialization process credit costs P are associated with each protected parameter for use in the operational flow . In some implementations the credit costs P are set according to a policy e.g. by instructions from policy module . In some implementations any protected parameters that have not specifically been assigned a credit costs may be assigned a nominal credit cost P . In some implementations the credit costs for each protected parameter are stored in secure storage. In some implementations the credit cost initialization process occurs following startup of computing device .

During the change list initialization process an empty change list is created for use in the operational flow . As described below the change list L is used to hold change tuples each of which includes the identity and original values of a changed protected parameter e.g. . In some implementations the change list L is stored in secure storage. In some implementations the change list initialization process occurs following startup of computing device .

During the credit threshold initialization process a credit threshold value U is set for use in the operational flow . The credit threshold may be the same for each user of computing device or it may be different for different users. In some implementations the credit threshold value U is stored in secure storage. In some implementations the change list L is stored in secure storage. In some implementations the credit threshold initialization process occurs following the logging in of a user to computing device .

During the parameter modification cost initialization process a parameter modification cost value U is set to zero. In some implementations the parameter modification cost value U is stored in secure storage. In some implementations the parameter modification cost initialization process occurs following the logging in of a user to computing device . As will be described below the parameter modification cost initialization process may also occur during the operational flow .

As shown in operational flow begins upon the detection of an attempt by a protected process to modify a protected parameter i.e. Parameter X . Following the detection of the attempt to modify Parameter X a tuple creation operation creates a tuple for Parameter X and stores the tuple in temporary storage.

Next a modification operation allows the protected process to modify the Parameter X. A cost accumulation operation then determines a new parameter modification cost U based at least in part on the credit cost P associated with Parameter X. Cost accumulation operation may determine new parameter modification costs U in a number of ways. For example in one implementation cost accumulation operation simply adds the credit costs P associated with Parameter X to the parameter modification cost U to create a new parameter modification cost U . In other implementations cost accumulation operation may determine a new parameter modification cost U based on the credit costs P and one or more other algorithms or policies. For example and without limitation cost accumulation operation may use a leaky bucket a token bucket algorithm or some other rate control algorithm to determine the parameter modification cost U .

Following cost accumulation operation a determination operation then determines of the parameter modification cost U exceeds the credit threshold value U . If it is determined at operation that the parameter modification cost U exceeds the credit threshold value U operational flow proceeds to tuple determination operation . However if it is determined at operation that the parameter modification cost U does not exceed the credit threshold value U operational flow proceeds to challenge operation .

At tuple determination operation a determination is made as to whether a tuple for Parameter X already exists in the change list L . If it is determined at operation that a tuple for Parameter X already exists in the change list L operational flow ends. However if it is not determined at operation that a tuple for Parameter X already exists in the change list L operational flow proceeds to tuple storage operation .

At tuple creation operation the tuple for Parameter X that is stored in temporary storage is stored in the change list L and the operational flow ends.

At challenge operation a challenge is issued to the user of computing device . In accordance with one implementation the challenge that is presented to the user will include a visual puzzle and or an audio puzzle as described above. In other implementations other puzzles may be presented.

Following challenge operation a challenge determination operation determines whether the challenge issued at challenge operation was passed. As used here a passed challenge is a challenge that was answered correctly. In contrast a challenge that was not passed was either answered incorrectly or not answered at all.

If it is determined at challenge determination operation determines that the challenge issued at challenge operation was passed operational flow proceeds to reset operation . However if it is determined at challenge determination operation determines that the challenge issued at challenge operation was not passed operational flow proceeds revert operation .

At revert operation any protected parameters that have a correcponding tuple in change list L are reverted to the values contained in their corresponding tuple. Following revert operation operational flow proceeds to reset operation .

At reset operation the parameter modification cost U is reset to zero. Following reset operation the operational flow ends.

In accordance with one alternative implementation of operational flow to avoid a full audit of security parameters Pmay be set to some unit value. Every time a protected parameter is updated Pis then incremented by P. If any Pexceeds some threshold Pset by group policy the parameter identifier can be forwarded by policy module to a group administrator following a challenge. The administrator may then decide whether this parameter is security critical or not and send back an adjusted Pto all users in the administrative group by group policy. The same mechanism may be used to set Udynamically. In such a case Pvalues may be dynamically calculated or fixed. If Uexceeds some threshold Uset by group policy the parameter value list Lmay be forwarded by policy module to a group administrator following a challenge. The administrator may then decide whether the Lis too long or too short for the level of security required and push down a fixed Uto all users in the administrative group by group policy.

Although some particular example implementations have been illustrated in the accompanying drawings and described in the foregoing Detailed Description it will be understood that the subject matter described herein is not limited to the particular implementations described. Rather the subject matter described herein is capable of numerous rearrangements modifications and substitutions without departing from the spirit set forth and defined by the following claims. Accordingly the scope of the present invention should not be limited by the particular example implementations discussed above but should be defined only by the claims set forth below and equivalents thereof.

