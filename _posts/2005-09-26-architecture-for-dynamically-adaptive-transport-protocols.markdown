---

title: Architecture for dynamically adaptive transport protocols
abstract: Systems and methods for reconfiguring a transport-layer protocol are disclosed. The transport-layer protocol is implemented by a plurality of transport-layer mechanisms. Each transport-layer mechanism resides in a dynamically loadable module and implements a specific area of transport-layer functionality. One method comprises: performing an initial load of a first plurality of transport-layer mechanisms into memory; unloading one of the first plurality of transport-layer mechanisms; and loading at least one transport-layer mechanism different than the first plurality. One system comprises a processor coupled to a local interface; a memory coupled to the local interface; and protocol logic stored in the memory and executable by the processor. The protocol logic comprises: monitor logic configured to detect a change in at least one network performance condition of a network communicatively coupled to the network interface; adaptation logic configured to load into the memory a transport-layer mechanism upon a notification by the monitor logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08761202&OS=08761202&RS=08761202
owner: 
number: 08761202
owner_city: 
owner_country: 
publication_date: 20050926
---
This application claims the benefit of U.S. Provisional 60 613 263 filed Sep. 27 2004 which is entirely incorporated by reference.

This work was supported in part by Grant Nos. ANI 0117840 and ECS 0225497 awarded by the National Science Foundation. Accordingly the U.S. government may have certain rights in the claimed subject matter.

The present invention relates to computer networks and more specifically to a dynamically adaptive transport protocol architecture.

The world wide network known as the Internet is composed of many different smaller networks that are all interconnected at the network layer layer 3 of the OSI protocol model . By definition the Internet uses Internet Protocol IP as its network layer so that the Internet is homogeneous at the network layer. However the Internet is very heterogeneous at the lower layers the link layer layer 2 and the physical layer layer 1 .

At the link layer most local area networks LANs use some form of Ethernet but the performance characteristics of these various forms of Ethernet vary widely. For example Ethernet ranges from the 1 Mbps offered by wireless links such as 802.11 WiFi to 10 Mbps and even Gbps offered by various 802.3 wired links. Wide area network WAN links tend to offer much lower performance as compared to LAN links. For example a T link offers 1.25 Mbps and a digital subscriber loop DSL link ranges from 2 Mbps to 10 Mbps.

Thus the path from one Internet endpoint to another consists of links with varying performance characteristics as measured for example in terms of bandwidth delay and rate of packet loss. Furthermore the network conditions may change over time for example the delay on a path may increase as network traffic increases or as rerouting from one link to another takes place. These changes can occur from session to session or even within a single session.

A conventional transport layer protocol periodically characterizes network conditions e.g. bandwidth delay and packet loss and can adapt to some level of change in network conditions. A conventional adaptation for example is to increase or decrease the congestion window. However this sort of adaptation is limited when a significant change in network condition occurs e.g. a large change in bandwidth or delay a conventional transport layer protocol will suffer from reduced performance as its adaptations are not flexible enough to accommodate the change.

One prior art approach to adapting the transport layer is replacing one transport layer protocol with another between transport sessions. The dominant transport layer on the Internet is Transport Control Protocol TCP . TCP now exists in many variant forms each designed to improve performance in a certain type of network environment. Examples are TCP with Selective Acknowledgement TCP SACK TCP Vegas TCP with Explicit Loss Notification TCP ELN and Wireless TCP WTCP .

This prior art approach allows one variant of TCP to be replaced by another variant but only after a session is complete. This prior art approach is limited because the protocol does not adapt during the operation of the transport protocol. Therefore an improved transport protocol which adapts dynamically is desirable.

Systems and methods for reconfiguring a transport layer protocol are disclosed. The transport layer protocol is implemented by a plurality of transport layer mechanisms. Each transport layer mechanism resides in a dynamically loadable module and implements a specific area of transport layer functionality. One method comprises performing an initial load of a first plurality of transport layer mechanisms into memory unloading one of the first plurality of transport layer mechanisms and loading at least one transport layer mechanism different than the first plurality. One system comprises a processor coupled to a local interface a memory coupled to the local interface and protocol logic stored in the memory and executable by the processor. The protocol logic comprises monitor logic configured to detect a change in at least one network performance condition of a network communicatively coupled to the network interface adaptation logic configured to load into the memory a transport layer mechanism upon a notification by the monitor logic.

The systems and or methods of the dynamically adaptive transport protocol architecture can be implemented in software hardware or a combination thereof. In some embodiments the system and or method is implemented in software that is stored in a memory and that is executed by a suitable microprocessor uP situated in a network device. However system and or method which comprises an ordered listing of executable instructions for implementing logical functions can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions.

In the context of this document a computer readable medium can be any means that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a nonexhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM magnetic a read only memory ROM magnetic an erasable programmable read only memory EPROM or Flash memory magnetic an optical fiber optical and a portable compact disc read only memory CDROM optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

Residential LAN A connects to the backbone network through a DSL access network A. Corporate LAN B connects to the backbone network through a router with a T connection. Network equipment such as access nodes routers and switches provide connectivity within the backbone network and the access networks .

Various links couple the endpoints server and client to their respective LANs . Other links couple the access nodes routers and switches to each other. In combination these links provide paths through the network . In this manner the endpoints and can communicate with each other.

As discussed earlier different links have different performance characteristics link A is a 2 Mbps DSL link link C is a 1.5 Mbps T link link C is a 51 Mbps OC 1 link and link D is a 155 Mbps OC 3 link. If link D goes out of service and is replaced by link C then the performance characteristics of a path through the backbone network will change. The dynamically adaptive transport protocol architecture allows the transport protocol in client network device to adapt its behavior in real time when a change is detected in these performance conditions.

Typically at any point in time the client network device is part of one LAN e.g. wireless LAN C or wired LAN D . When the client network device switches from wireless LAN C to wired LAN D a vertical handoff occurs during which the client network device receives a new link layer and or IP address. This change in access networks usually results in a change in performance conditions and the dynamically adaptive transport protocol architecture allows the transport protocol in client network device to adapt its behavior appropriately.

One skilled in the art will understand that the dynamically adaptive transport protocol architecture is applicable to a wide range of LAN WAN and access network technologies. The particular technologies discussed above are merely a representative sample given for illustrative purposes.

A typical exchange of data between two computers over the Internet involves one computer acting in the role of client and the other acting in the role of server . This is true for most Internet activities web browsing e mail downloading files etc. The data exchange involves a series of transmissions and receptions performed by both sides. For example the first computer requests data which involves sending the second computer receives the request and sends the requested data so that the second computer performs both a send and a receive next the first computer receives the requested data. Thus both server and client act as sender and as receiver.

The dynamically adaptive transport protocol architecture locates most of the transport layer intelligence in the client network device regardless of whether the client is acting a sender or a receiver. Thus changes to the transport protocol can be performed at the client network device without intervention at the server . This feature is advantageous because one server generally provides services for many clients and it is desirable to minimize any periods of maintenance or upgrades on the server .

The dynamically adaptive transport protocol architecture is a client centric framework with the client acting as primary control for the operation of the transport protocol. The client network device will be discussed in detail in later sections. A brief overview of the operation of the server side of the dynamically adaptive transport protocol architecture is as follows.

When the server acts as a receiver the server sends feedback information used by the client network device sender such as acknowledgements and or selective acknowledgements. When acting as a sender the server responds to requests for data from the client network device . In other words the server plays a passive role responding only to instructions sent by the client network device . Any adaptation of the transport protocol in order to accommodate changing network conditions occurs on the client network device rather than the server .

Further details of the interaction between the client network device and the server can be found in A Receiver centric Transport Protocol for Mobile Hosts with Heterogeneous Wireless Interfaces by H. Y. Hsieh K. H. Kim Y. Zhu and R. Sivakumar Proceedings of the 8Annual International Conference on Mobile Computing and Networking 2002 and in A. Velayutham H. Y. Hsieh and R. Sivakumar On Transport Layer Adaptation in Heterogeneous Wireless Data Networks IEEE International Workshop on Quality of Service IWQoS University of Passau Germany June 2005 which are hereby incorporated by reference.

Each of the network interfaces is specific to a particular link layer. In client network device has three network interfaces network interface A is an Ethernet 802.3 interface for connection to a wired LAN network interface B is an WiFi 802.11 interface for connection to a wireless LAN and network interface A is a General Packet Radio Service GPRS interface for connection to a wireless WAN. Omitted from are a number of conventional components known to those skilled in the art that are not necessary to explain the operation of the dynamically adaptive transport protocol architecture.

The transport protocol can be viewed as a combination of modules each implementing a transport functionality connection management A data transmission B data reception and acknowledgement C loss detection D loss recovery E congestion detection F congestion control G and initial network capacity estimation H.

Data transmission B can use a self clocked mechanism B or an explicit capacity mechanism B. In the self clocked mechanism B transmission of a data packet occurs only after the confirmation that a packet has exited the network. In contrast the explicit capacity mechanism B calculates the actual capacity of the network path and transmits data according to this calculated capacity.

Self clocked C polled C and tuned rate C are alternative mechanisms for data reception and acknowledgement C. A receiver with the self clocked acknowledgement mechanism C uses incoming packets as triggers for sending acknowledgements back to the sender. In the tuned rate mechanism C the receiver sends acknowledgements back to the sender at a rate determined by the sender. A receiver using the polled acknowledgement mechanism C sends acknowledgments to the sender only when the sender explicitly requests via a poll .

Alternative mechanisms for loss recovery E include timeout based E and probe based E. Timeout based loss recovery E works by having the sender maintain a timeout that is based on the round trip time RTT of the connection and also on the variation in RTT. The sender assumes data packet loss if acknowledgement is not received within this timeout period and retransmits the data packet s . A sender using probe based recovery E sends data and waits for some threshold amount of time for an acknowledgement. If no acknowledgement is received the sender transmits probe packets to solicit acknowledgement from the receiver.

Congestion detection F can be a loss based mechanism F a delay based mechanism F or an inter packet separation mechanism F. For a loss based congestion detection F packet loss is the primary indicator of congestion whereas delay based congestion detection F uses increasing network delay as the primary congestion indicator. The inter packet separation mechanism F monitors the separation between packet transmissions at the sender and packet receptions at the receiver. Congestion is indicated by an increase in inter packet separation at the receiver as compared to the sender.

Alternative mechanisms for congestion control G include window based G rate based G or a hybrid G which combines window based and rate based . The window based mechanism G chooses a congestion window size which is used as a proxy for estimated network capacity. The sender transmits up to that window size so that at any given instant the amount of data outstanding in the network is equal to the window size. A sender using the rate based mechanism G calculates a transmission rate based on RTT and transmits at that rate. When using the hybrid mechanism G a sender transmits at a rate based on the congestion window and the RTT.

Initial network capacity estimation H can use a slow start mechanism H or a probing mechanism H in order to estimate the network capacity of the end to end path. The slow start mechanism H starts with an small estimate and increments the data transmission rate window exponentially until congestion is detected. The probing mechanism H transmits a pair of packets and estimates the delay between the two packets as received by the receiver.

One skilled in the art of transport protocols will understand that the generic transport protocol of does not represent an actual protocol. Instead is a collection of mechanisms each of which could be used to implement a particular module. illustrate real world transport protocols showing the particular mechanisms used in these protocols.

The Satellite Transport Protocol STP shown in differs from TCP in a few mechanisms. The congestion control mechanism in STP is a hybrid G of window based and rate based. The mechanism used for acknowledgement is polled C rather than self clocked.

The protocols illustrated in A C are merely examples of a few combinations of transport mechanisms. One skilled in the art will appreciate that the dynamically adaptive transport protocol architecture allows transport mechanisms be combined in many different ways to form transport protocols with varying characteristics. Thus new combinations each optimized for a particular network environment can be created using the dynamically adaptive transport protocol architecture.

The dynamically adaptive transport protocol architecture contemplates more than partitioning protocol functionality into mechanisms. By allowing mechanisms to be combined at run time the dynamically adaptive transport protocol architecture allows a transport protocol constructed in accordance with the dynamically adaptive transport protocol architecture to alter its behavior at run time. These features of the dynamically adaptive transport protocol architecture will now be discussed in further detail.

The non core portion is specific to a particular transport protocol implementation. This non core transport specific portion is composed of multiple modules each implementing a mechanism . Several existing protocols discussed earlier in connection with were described as being specific combinations of mechanisms . However the dynamically adaptive transport protocol architecture is not limited to these example mechanisms a transport protocol in accordance with this architecture can comprise any combination of the previously described mechanisms or even new mechanisms that are created to be optimized for a particular network environment. Thus the dynamically adaptive transport protocol architecture can be used to create a virtually unlimited number of transport protocols .

Each module can be swapped in and out of memory at run time by the adaptation manager in the core portion . In the embodiment of the adaptation manager loads an entire set of modules which together to form a transport protocol . In this embodiment a transport protocol is composed of a fixed set of modules and reconfiguration of the protocol in response to changing network conditions comprises swapping from one protocol implementation to another. In other embodiments described in further detail in connection with a transport protocol can be reconfigured in response to changing network conditions by swapping mechanisms . Thus the granularity for adaptation in the embodiment of is the transport protocol while the granularity for adaptation in the embodiment of is the mechanism.

In the embodiment of a module table lists the set of modules which make up a particular transport protocol . The module table also contains a reference to a transport logic module which maps events to mechanisms in a transport specific manner. In a preferred embodiment the module table is a file located in non volatile storage see .

At boot up the adaptation manager performs an initial load of the set of modules specified in the module table . If network conditions change the adaptation manager unloads the set of currently loaded modules from memory and loads a new set of modules into memory from non volatile storage see. using kernel services as necessary. For example a system administrator may use a utility program to force the swap from one transport layer protocol to another. Note that there may be overlap in the first and second sets of modules. In this case any commonly shared module remains in memory rather than being unloaded and loaded again.

Note that modules are related to mechanisms but are not identical each mechanism is a function within a module . A module is a collection of one or more mechanisms packaged in such a manner that the entire module can be loaded and unloaded from memory at run time. The packaging is specific to the operating system on which the transport protocol executes. In one embodiment using Linux as an operating system the package is a kernel loadable module. In another embodiment using Microsoft Windows as an operating system the package is a dynamically loadable library DLL .

In a preferred embodiment each module contains exactly one mechanism . This approach results in a smaller module as compared to one containing multiple mechanisms which in turn results in reduced time for swapping the module in and out of memory.

The dynamically adaptive transport protocol architecture is event driven. Each particular transport protocol responds to a set of transport layer events. This set includes events arriving from the lower edge interface from the upper edge interface from any other interface to the transport protocol or from modules within the transport protocol . These transport layer events are stored in an event queue located in the core portion .

An event dispatcher also in the core portion remove events from the event queue and delivers them to one or more transport layer mechanisms . The mapping between events and mechanisms is specified by transport logic located in the transport specific portion . In one embodiment the transport logic is simply a table containing an ordered list of mechanisms and the dispatcher executes the mechanisms in order.

Communication between non core modules takes place via events . In a preferred embodiment all calls into a module occur indirectly via events rather than via direct function calls. Modules can also communicate through public state data which is maintained by the core portion . This allows a module which is being swapped out to pass data to another module which is being swapped in.

The combination of a swappable transport logic and inter module communication via events offers several advantages. By mapping events to mechanisms the transport logic controls the intelligence embodied in the various mechanisms . This transport logic is swappable so that this intelligence is reconfigurable at run time one set of event to mechanism mappings can be swapped for another. Finally when this mapping is changed the operating system loader is not required to fix up or resolve function addresses since events are used for inter module communication instead of function calls.

A transport protocol can be partitioned in a variety of ways. The dynamically adaptive transport protocol architecture partitions in a specific manner the protocol is divided into transport mechanisms. Choosing to partition in this specific manner has several advantages. First a mechanism is relatively small so that the time required to swap is relatively small. Also when the same mechanism shared by more than one protocol e.g. as TCP and TCP ELN that mechanism is stored once rather than being duplicated within several monolithic protocols. This reduces the total storage required for all the protocols in the client network device see which is especially important for embedded network devices.

Since event flow diagrams are easily understood by one of ordinary skill in the art will not be discussed in exhaustive detail. Instead some differences between the protocols will be highlighted so that the advantages of the dynamically adaptive transport protocol architecture in accommodating the differences can be more readily understood.

As can be seen in the input events to the dynamically adaptive transport protocol architecture from the application layer and the IP layer are similar in these protocols. All of the protocols process TX MSG TX DATA TX ACK and RXED ACK events. Furthermore the overall flow of events is similar in TCP TCP ELN and STP .

In particular the state diagrams in for TCP and in for TCP ELN are very similar except that in TCP ELN the Loss Detection handler D is invoked in response to an explicit loss notification RXED ELN event as well as a regular acknowledgement event . In STP the overall flow of events is similar to TCP but the mechanisms used to respond to these events are different. Specifically the data acknowledgement module uses a polled mechanism C and the congestion control module uses a hybrid mechanism G . In addition the polled acknowledgement mechanism C in STP responds to a RXED POLL event rather than a RXED DATA event as in TCP .

WTCP in has fewer similarities to the other three protocols. Almost all of the mechanisms used by WTCP are different inter packet separation congestion detection F tuned rate acknowledgement C and probe based loss recovery E. WTCP uses basically the same set of events as do the other protocols with the addition of a TX PROBE event but has much fewer event transitions 12 transitions compared to 17 in TCP .

The event driven execution model of the dynamically adaptive transport protocol architecture differs from the conventional event driven approach. To understand how consider that in TCP the receipt of an acknowledgement affects loss detection congestion detection and congestion control. In the conventional approach an event and the mechanism which handles it is relatively coarse grained. Specifically in a conventional TCP implementation the handler for an ACK RXED event determines whether or not a packet has been lost and if so determines if the loss implies congestion and if so adjusts the congestion window.

In contrast the events in a TCP protocol using the dynamically adaptive transport protocol architecture are relatively fine grained as can be seen in . The handler for an ACK RXED event is a Loss Detection mechanism D. This mechanism D determines whether or not a packet has been lost but is not involved in congestion detection or control. Instead the loss detection mechanism D generates a new LOSS DETECTED event. Next the transport logic for TCP delivers the LOSS DETECTED event to the Congestion Detection mechanism F. The Congestion Detection mechanism F determines that congestion has been detected but does not attempt to control the congestion. Instead the Congestion Detection mechanism F generates a new ADJ WINDOW event which is handled by the Congestion Control mechanism G. Thus the types of actions taken by the various mechanisms in response to events are more limited compared to their counterparts in a conventional TCP implementation.

Returning now to in the dynamically adaptive transport protocol architecture the intelligence of the transport protocol is implemented in the non core transport specific portion while the core portion provides glue. Thus the dispatcher and the event queue are located in core portion while the transport logic and mechanisms reside in modules within the transport specific portion .

More specifically this intelligence is captured in two ways. First the transport logic maps events to mechanisms in a transport specific manner. One example of this behavior can been seen in the state diagram for TCP in . The Loss Detected event is delivered to two handlers a first handler in a Congestion Detection module F and a second handler in a Congestion Control module G. A contrasting behavior can be seen in the state diagram for WTCP in where a Loss Detected event is delivered to a single handler in a Loss Recovery module E.

The second way in which the transport specific portion captures protocol intelligence is that the mechanisms react to the events in transport specific ways. For example in both TCP and STP the Adjust Window event is delivered to a handler in a Congestion Control module F. However in TCP the congestion control is window based G and in STP the congestion control is a hybrid G of rate based and window based.

Although transport logic is not shown explicitly in the state diagrams of it is transport logic that drives the state machine. As explained earlier transport logic decides which mechanisms or handlers is executed in response to an event.

The previous discussion focused on the features of the dynamically adaptive transport protocol architecture which allow various mechanisms in combination with a transport logic that maps events to these mechanisms to be combined to produce a specific transport protocol . Next the process of reconfiguring transport protocol at run time will be examined in connection with .

As discussed earlier in connection with the dynamically adaptive transport protocol architecture allows a transport protocol to adapt its behavior at run time to changing network characteristics which is an improvement over conventional transport protocol architecture. are alternative embodiments of the dynamically adaptive transport protocol architecture differing mainly in what triggers the adaptation.

In the embodiment of the adaptation is triggered by a switch from one network interface on client network device to another e.g. from a WiFi interface to a 3G data interface from a WiFi interface to a Ethernet interface etc. Each network interface is associated with a transport protocol . As described earlier in connection with each transport protocol is associated with a module table which lists the modules which make up a particular transport protocol and which maps events to mechanisms .

A link interface monitor notifies the adaptation manager when the network interface see changes. The link interface monitor detects the change in a way that is specific to the access network for example by detecting a change in the media access control MAC address or in the IP address. The adaptation manager responds to the link interface indication by loading the modules and transport logic as specified by the module table .

The transport protocol reconfiguration procedure is transparent to the application but the procedure is not instantaneous. The dynamically adaptive transport protocol architecture provides for non interrupted continued operations during reconfiguration through short circuit logic implemented in the core portion . The short circuit logic provides simplified transport functionality during the reconfiguration thus short circuiting the normal path for data and events. Short circuit logic buffers incoming packets in state performs connection maintenance as needed and ensures reliable delivery. To avoid the need for large data buffers the short circuit logic overrides the old congestion control mechanism G and instead transmits packets at a constant rate appropriate to the network interface until the new congestion control mechanism G is finished loading.

During reconfiguration delivery of events destined for the new modules is suppressed by the core portion . These events are instead used by the core portion to appropriately update the state of the new connection. When the adaptation manager has finished loading the new modules the short circuit logic is replaced by the transport logic and the dispatcher resumes delivery of events . Events are now delivered to a new set of mechanisms through the transport logic and the updated state is available to the new mechanisms .

In an alternative embodiment shown in the adaptation is triggered by a change in network performance as measured by specific performance parameters. Examples of measurable network performance parameters include available bandwidth packet loss jitter and network delay. Empirical research has shown that for each area of transport functionality e.g. data transmission congestion detection some performance parameters are relevant to choosing an appropriate mechanism for implementing that functional area while other performance parameters are not as relevant. For example variation in loss rate and in bandwidth dominate the choice of the data transmission mechanism B because these parameters are the ones that affect how the data transmission mechanism B performs while average bandwidth average delay and average jitter do not have such an effect.

In a wireless context the root cause of the performance change might be client network device moving from one wireless network to another a vertical handoff or moving among access points or base stations within the same wireless network a horizontal handoff . In a wired context changes in network characteristics are often due to congestion related queuing route changes in the wide area network or node failures. In either context the performance of the network is measurably different than before so that the dynamically adaptive transport protocol architecture can adapt to this change.

In the embodiment of the adaptation manager receives notifications from one or more trigger monitors when specific performance triggers are met. A trigger comprises a specific performance parameter e.g. bandwidth packet loss etc. and a threshold value. In a preferred embodiment the variation in a parameter and or the average of a parameter is used as a trigger rather than the instantaneous parameter value. In one embodiment the trigger also specifies a comparison trigger when the parameter goes above the threshold below the threshold etc.

Examples of performance parameters include but are not limited to bandwidth variation in bandwidth also known as bandwidth fluctuation delay jitter variation in delay and packet loss rate. Corresponding trigger monitors are bandwidth monitor A fluctuation monitor B delay monitor C jitter monitor D and packet loss monitor E.

In response to the trigger indication the adaptation manager determines which mechanisms and or transport logic are appropriate for the new condition and uses the services of the adaptation manager to load the modules containing the mechanisms and or transport logic . In a preferred embodiment a trigger table associated with each trigger identifies the mechanisms and transport logic to be loaded in response to the trigger .

Table 1 is an simplified trigger table . For clarity this table lists the functional area implemented by the mechanism although an actual trigger table would have no need for this. Also an actual trigger table would have numeric values for the threshold while this example merely indicates a relative low or high. Note that a trigger can contain a combination of multiple parameters.

In the above discussion triggers were used on a per mechanism basis. In another embodiment a trigger table can specify that an entire transport protocol be swapped in. In this embodiment the trigger can be associated with a relative or absolute time at which the switch in protocols will occur.

The foregoing description has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obvious modifications or variations are possible in light of the above teachings. The embodiments discussed however were chosen and described to illustrate the principles of the invention and its practical application to thereby enable one of ordinary skill in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. All such modifications and variation are within the scope of the invention as determined by the appended claims when interpreted in accordance with the breadth to which they are fairly and legally entitled.

