---

title: Network security enhancement methods, apparatuses, system, media, signals and computer programs
abstract: A method involves causing a wireless network interface of a computing device to be disabled, in response to detection of a network connection between the computing device and a wired network. Related apparatuses, systems, computer programs, computer-readable media and signals are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08838812&OS=08838812&RS=08838812
owner: AirPatrol Corporation
number: 08838812
owner_city: Maple Lawn
owner_country: US
publication_date: 20050719
---
This application is a national phase entry under 35 U.S.C. 371 of International Application No. PCT CA2005 001130 filed Jul. 19 2005 and claims priority under 35 U.S.C. 365 b from Canadian Patent Application No. 2 496 939 filed Feb. 8 2005. This application also claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application No. 60 653 608 filed Feb. 16 2005.

This invention relates to methods apparatuses systems computer programs computer readable media and signals for enhancing network security.

Millions of computers now being sold are equipped with both a wireless network interface for establishing a wireless network connection and a wired network interface for establishing a wired network connection. Such computers are quickly becoming a serious security threat to secure wired networks since they are potentially capable of wirelessly broadcasting access to the secure wired networks to which they are connected. Unfortunately access to the wired network may be broadcast unintentionally to unauthorized and potentially undetected users outside the premises in which a secure wired network is located.

For example when a user connects a wireless equipped computing device such as a laptop computer to a company s wired network unknown to the user but not uncommonly the wireless network equipment on the laptop may be configured to automatically try to connect to one or more default or pre configured trusted wireless access points. However a hacker may be able to spoof i.e. to pretend to be such a trusted wireless access point from a mobile wireless equipped computer at a nearby location e.g. in a car parked nearby. If a wireless connection is established by the user s laptop to the fake access point the hacker may now be able to tunnel through the fake access point to access shared documents and resources on the user s laptop or the wired company network. Furthermore the hacker may be able to introduce viruses keystroke loggers and other forms of destructive software onto the user s laptop or even the company s wired network. Similarly the user s laptop computer may be configured to automatically connect to another type of trusted wireless network such as a mobile ad hoc wireless network but may instead connect to a hacker network that is pretending to be the trusted wireless network thereby exposing the user s computer and the company s wired network to unauthorized access without the user knowing it. Wireless networking thus exposes mobile computers and secure wired networks to a type of wireless phishing attack which may be referred to as Wi phishing.

Many existing wireless security solutions focus on encrypting wireless connections and or establishing a robust firewall against hostile attacks. These approaches however do not adequately address the security risks engendered by a hacker posing as a trusted wireless access point or network.

In accordance with a first aspect of the invention there is provided a method of enhancing network security. The method includes causing a wireless network interface of a computing device to be disabled in response to detection of a network connection between the computing device and a wired network.

Advantageously causing the wireless network interface of the computing device to be disabled whenever the user connects the computing device to the wired network reduces the risk that the user s computing device will inadvertently wirelessly re broadcast an authorized connection to the wired network to unauthorized users such as hackers posing as a trusted wireless access point for example. Consequently hackers should ordinarily be prevented from tunnelling through the wireless interface s of the user s computing device to reach shared documents and resources on the user s computing device and on the wired network to which the user s computing device is attached.

The method may involve detecting the presence of one or more network interfaces from among of the computing device and may further involve identifying wired and wireless network interfaces from among the one or more detected network interfaces.

The method may further involve detecting the network connection. This may involve monitoring Windows Management Instrumentation WMI Network Driver Interface Specification Ndis events. Monitoring WMI Ndis events may include detecting connect disconnect arrival and removal events which in turn may involve receiving MSNdis StatusMediaConnect MSNdis StatusMediaDisconnect MSNdis NotifyAdapterArrival and MSNdis NotifyAdapterRemoval events respectively through a IWbemObjectSink sink interface of Windows .

Causing the wireless network interface to be disabled may include making calls to a SetupAPI block of Windows 

The method may further include verifying that the wireless network interface was successfully disabled.

The method may further include detecting a disconnection of the wired network connection. Detecting the disconnection may include detecting a disconnect or removal event.

The method may further include causing the wireless network interface to be enabled in response to the disconnection.

The detection of the network connection may include detection of a network connection between a wired network interface of the computing device and the wired network.

Identifying may include identifying the wired and wireless network interfaces from among the one or more detected network interfaces in response to a network adapter arrival event.

Identifying wireless network interfaces may include determining whether a particular wireless network interface is associated with at least one predefined attribute indicative of a wireless network interface.

Identifying wireless network interfaces may further include determining whether a particular wireless network interface supports a 802.11 service set object identifier OID .

The method may further include in response to detecting that the wireless network interface failed to be disabled taking corrective action and then attempting again to disable the wireless network interface. Taking corrective action may include causing incorrect registration information relating to the wireless interface to be corrected in an operating system registry.

Causing may include calling a device installation function to cause the wireless network interface to be disabled.

Detecting the network connection may include using an adapter display name associated with a wired network interface of the computing device to register a Windows Management Instrumentation WMI sink interface to receive notifications of Ndis events relating to the wired network interface.

Causing the wireless network interface to be disabled may further include using a hardware identifier associated with the wireless network interlace as a parameter to a device installation function operable to disable the wireless network interface.

Detecting the disconnection may include checking connection status for all wired interfaces detected as being installed in the system and determining that none of the detected wired interfaces has a network connection with a wired network.

Causing the wireless network interface to be disabled may include causing the wireless network interface to be inoperable.

Causing the wireless network interface to be disabled may include implementing an operating system service.

In accordance with another aspect of the invention there is provided a method of controlling network access in a system. The method involves receiving a first list identifying one or more wireless network interfaces installed in the system and each operable to establish a wireless connection to a respective network and receiving a second list identifying one or more wired network interfaces installed in a system and each operable to establish a wired connection to a respective network. The method further involves detecting a wired connection to a network through one of the wired network interfaces and in response to detection of the wired connection disabling the wireless network interfaces to prevent any wireless connections being established therethrough.

The method may further involve processing an original list identifying network interfaces installed in the system to produce the first and second lists.

In accordance with another aspect of the invention there is provided an apparatus for enhancing network security. The apparatus includes a processor circuit configured to cause the methods described herein to be carried out.

In accordance with another aspect of the invention there is provided an apparatus for enhancing network security. The apparatus includes means for carrying out the various functions disclosed herein.

In accordance with another aspect of the invention there is provided a computer readable medium storing instruction codes for directing a processor circuit to cause the methods described herein to be carried out.

In accordance with another aspect of the invention there is provided a system for enhancing network security. The system includes a computing device comprising a wireless network interface and a processor circuit. The processor circuit is configured to cause the wireless network interface to be disabled in response to detection of a network connection between the computing device and a wired network.

The processor circuit may be configured to cause the various method steps described herein to be carried out.

In accordance with another aspect of the invention there is provided a computer readable signal which may be embodied in a communications medium. The signal includes instruction codes for directing a processor circuit to cause the methods described herein to be carried out.

In accordance with another aspect of the invention there is provided a computer program including code means that when executed by a processor circuit cause the various steps described herein to be carried out.

Other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.

Referring to a system for enhancing network security according to a first embodiment of the invention is shown generally at . In this embodiment the system includes a computing device which in turn includes a wireless network interface and a processor circuit . The processor circuit is configured to cause the wireless network interface to be disabled in response to detection of a network connection between the computing device and a wired network .

In this embodiment the computing device includes a laptop computer. Alternatively any other computing device capable of communication with both a wireless network and a wired network may be substituted. For example the computing device may include other portable computing devices such as personal digital assistants or non portable computing devices such as desktop computers. These and other examples of computing devices will be apparent to one of ordinary skill in the art upon review of the present specification.

In this embodiment the wireless network interface of the computing device includes a wireless network interface connector and a wireless network interface adapter connectable thereto. Alternatively however other types of wireless network interfaces may be substituted. Thus in the present embodiment causing the wireless network interface to be disabled may include causing either the connector or the adapter or both to be disabled.

Similarly in this embodiment the computing device includes a wired network interface. More particularly in this embodiment the wired network interface includes a wired network interface connector and a wired network interface adapter . In the present embodiment the wired network interface connector is operable to connect through a network cable to a wired local area network LAN operating according to an Ethernet specification for example. Alternatively other types of wired network interfaces may be substituted.

Referring to a block diagram of the system and the computing device is shown. Although various elements are depicted in as being either internal or external to the computing device it will be appreciated that in other embodiments components shown as internal to the computing device may be replaced with external components or vice versa.

In this embodiment the computing device includes the processor circuit which is in data communication with a memory a display a non volatile storage device a media interface the wireless network interface connector and the wired network adapter connected to the wired network interface connector . In the embodiment shown the wireless network interface adapter is received in the wireless network interface connector and is thereby connected to and in communication with the processor circuit .

The non volatile storage device may include a local hard drive for example. The media interface may include a CD ROM drive or a flash memory card reader. The non volatile storage device and the media interface are operable to read a computer readable medium encoded with instruction codes for directing the processor circuit to execute applications and perform methods described herein according to the present embodiment of the invention.

In this embodiment the wireless network interface includes the wireless network interface adapter which in the present embodiment is operable to establish a wireless network connection by wirelessly connecting to one or more other computers or computing devices having wireless network interfaces and comprising a mobile ad hoc network or by wirelessly connecting through one or more wireless access points such as or to a respective wired or wireless network connected thereto for example. This may involve connecting via wireless signals such as radio frequency RF signals. The wireless network connection may be established using the well known IEEE 802.11a 802.11b or 802.11g wireless network standards for example.

In this embodiment the wired network interface includes the wired network interface adapter which in this embodiment is operable to establish a network connection by a signal transmitted through one or more wires such as the network cable to a wired network such as a local area network LAN which may be based on the Ethernet specification for example.

The system is operable receive a computer readable signal encoded with instruction codes for directing the processor circuit to execute methods described herein. Such a computer readable signal encoded with instruction codes may be received through the wired or wireless interface adapters or for example and decoded by the respective interfaces for use by the processor circuit .

In this embodiment the memory stores codes for directing the processor circuit to provide core operating system OS 40 functions security service functions and application functions.

Referring to in the present embodiment the core operating system includes a version of the Windows operating system such as Windows XP or Windows 2000 . Blocks of interest in the operating system in this embodiment include a Windows Service control manager SCM block a Windows Network subsystem block a Windows Management Instrumentation WMI block and an InetCfg and SetupAPI block with respective functionality as is generally known in the art of Windows programming. Effectively blocks and are subsystems of the operating system . Each of these blocks has its own programming interfaces and conventions as defined in various Microsoft Windows specifications that define how other program blocks can interact with these blocks. A brief description of blocks and will now be provided.

The Service control manager SCM facilitates user control of OS services installed in the system . The SCM includes a services database not shown storing information about installed operating system services including information on how each service should be started. The SCM provides interfaces for installing deleting opening enumerating starting and stopping services registered in the services database. The SCM also transmits service control events or requests to running services.

The Windows Management Instrumentation WMI block provides access to information about operating system objects. The WMI block is operable to provide notifications of special predefined hardware and software events to operating system services such as the security service of the present embodiment by signaling the occurrence of these events. For example WMI can signal connect disconnect arrival and removal events pertaining to wired or wireless adapters installed in the system .

The Windows Network subsystem maintains information relating to network interfaces of the system including configuration information relating to any wired or wireless adapters installed in the system .

The InetCfg and SetupAPI block provides programming interfaces for facilitating network device installation and control including programming interfaces for disabling and enabling network adapters.

The security service includes a plurality of blocks of codes for directing the processor circuit to effect various processes of the present embodiment of the invention. These blocks include an initialization and set up block a network adapter manager block in this embodiment associated with a network adapter manager object and a network device interface specification Ndis events handler block .

In this embodiment the security service is implemented as an operating system service namely a Windows Service. The blocks of code associated with the security service interact and cooperate with the various blocks of code associated with the core Windows operating system to direct the processor circuit to effect the functionality of this embodiment. Effectively disabling and enabling wireless network interfaces in this embodiment involves implementing an operating system service.

In this embodiment the initialization and setup block includes a service control dispatcher thread for executing codes associated with a  tmain function a service main thread including a call back function entitled Service Main and a service control handler which is a call back function associated with the service control dispatcher thread . The network adapter manager thread includes a network adapter controller and a network adapter manager for managing network adapters installed in the system . The Ndis events handler includes a plurality of threads for monitoring Ndis i.e. Network Driver Interface Specification events signalled by Windows Management Instrumentation WMI . The Ndis events handler sends Ndis event indications to the network adapter controller in response to detection of certain physical hardware or software events . Ndis events of particular interest in this embodiment include the following 

This embodiment of the security service directs the processor circuit to monitor Windows Management Instrumentation WMI Ndis events to detect and respond to the above mentioned connect disconnect arrival and removal events. Responding to these events may involve causing one or more wireless network interfaces to be disabled or enabled as described herein.

The applications in this embodiment include a Graphic User Interface GUI Notifier application which directs the processor circuit to update a status display in a graphical user interface GUI of the system in response to notifications received from the network adapter controller of the security service .

In this embodiment the GUI notifier directs the processor circuit to cause various icons to be displayed in a taskbar of the display . The icons correspond to respective notifications from the network adapter controller that for example all wireless adapters have been enabled all wireless adapters have been disabled no wireless adapters were available to enable disable an attempted enable operation failed or that an attempted disable operation failed.

In this embodiment blocks of code for directing the processor circuit to carry out methods described herein are installed as a custom Windows operating system OS security service . This security service may be installed by the processor circuit under the direction of installation code embodied in an installation tool or alternatively may be built into the service itself and invoked by the user such as by running an executable file embodying the service with specific command line options such as i to install.

In order to install the security service within the Windows operating system information about the security service is provided by the installation code to the Service control manager SCM block for storage in a SCM services database not shown . The services database is represented in Windows by a container object which holds a plurality of service objects.

To establish an initial connection to the Service control manager SCM block and open its associated services database the installation code directs the processor circuit to call a Windows OpenSCManager service function of the SCM block to make a request for full access rights to the services database. If the call is successful the processor circuit causes the operating system to return to the installation code a services database handle i.e. a type of pointer representing the SCM services database that was opened. The services database handle effectively identifies the SCM container object representing the SCM services database on a specific computer or computing device.

In this embodiment the installation code directs the processor circuit to call a CreateService function of the SCM block passing as a parameter the services database handle returned by the OpenSCManager function together with other parameters including a string representing the name of the security service to install a display name string to be used to identify the security service an indicator of the type of access desired to the security service a parameter indicating the type code for the service a security service start parameter indicating that the security service should be started automatically by the service control manager SCM during system startup an error control parameter indicating what action should be taken if the security service fails to start a string containing a location i.e. complete path of an executable file for the security service and an array representing the names of other services that the operating system must start before the security service in this embodiment WINMGMT the Windows Management service . All this information is stored by the Windows SCM in the SCM services database.

To open the security service for access the Windows OpenService function is called with parameters identifying the security service including the service database handle returned from OpenSCManager a string representing the name of the security service and an access parameter indicating desired access rights to the security service . If the processor circuit under the direction of the SCM block successfully locates the security service in the SCM services database a service handle i.e. pointer representing the security service is returned from the OpenService function. This service handle is operable to be used as a parameter in calls to other service functions to effect various operations in respect of the security service . For example to uninstall the security service uninstall code directs the processor circuit to call the DeleteService function with the security service handle as a parameter.

In the present embodiment which utilizes multiple processes or threads of execution the operating system directs the processor circuit to notify certain processes or threads about particular changes of state which have occurred in other processes or threads or in hardware devices. Such changes of state may be reflected in a change to a stored value or signal for example representing some condition. Changes to such values or signals are often created by detecting a physical event for example in the case of a hardware device or by changing a value or signal in response to a software process. Regardless of how the value or signal is changed the fact that it has changed means there is a change of state of the system in response to either a hardware or software source. Such change of state may be referred to as an event.

Processes running on the processor circuit may be started resumed altered or stopped in response to an event and thus processes may be referred to as being event driven.

Events whether originating from a change in the state of hardware or software may be represented in the Windows operating system as event objects. For example an event object may be created by calling a CreateEvent function of the Windows operating system. An event object is a representation of an event and this representation may have a state indicating whether or not the event object has been communicated to another process or thread running on the processor circuit . A successful call to the CreateEvent function returns a handle to the created event object and this handle may be used by other functions and procedures to affect the state of the event object. The SetEvent and ResetEvent functions of Windows when called with an event handle of an event object set or reset the state of the event object to signalled or not signalled respectively.

Various processes and threads running in the operating system may detect changes to the state of an event object and respond to it in a number of ways. For example a thread may directs the processor circuit to call WaitForSingleObject a blocking Windows function which returns only when a specified object is in a particular state or a specified timeout interval elapses in order to suspend itself until a specified event object state occurs. Similarly in this embodiment a thread may directs the processor circuit to respond to the state of one or more event objects by calling the WaitForMultipleObjects function to suspend the thread until any one of the specified objects is in the signaled state or a certain time out interval elapses. Event objects may have various attributes depending on the parameters sent to the CreateEvent function.

In this embodiment the Windows operating system directs the processor circuit to start the GUI notifier application when the system is booted up whereupon it creates a thread. Within this created thread the GUI notifier application calls the WaitForMultipleObjects function is called to wait for global GUI notification events .

The security service is started by calling an executable file associated with the security service . In the present embodiment the security service is installed as an automatically starting service therefore its executable file is automatically called when the system boots up. When the executable file is run the security service causes a main service control dispatcher thread to begin executing a function called  tmain on the processor circuit . The service control dispatcher thread causes the processor circuit to configure the SCM block to signal Windows service control events to the appropriate call back function as will now be described.

Immediately after it is established the service control dispatcher thread directs the processor circuit to call the Windows function StartServiceCtrlDispatcher to register with the service control manager SCM a main call back function entitled Service Main as the starting point of services. Once the Service Main function is registered the Windows SCM directs the processor circuit to send a service start request to the service control dispatcher thread which in response causes the Service Main function to direct the processor circuit to establish the Service Main thread . The call to the StartServiceCtrlDispatcher function does not return until the security service is stopped. When the StartServiceCtrlDispatcher function call finally does return the service control dispatcher thread will be terminated.

When the Service Main thread is started it immediately directs the processor circuit to call a RegisterServiceCtrlHandlerEx function of the Windows SCM to register a handler callback function of the security service for handling service control requests from the Windows SCM . In the present embodiment the handler callback function is provided by a service control handler block entitled Service Ctrl run in the same thread as the service control dispatcher .

The RegisterServiceCtrlHandlerEx function directs the processor circuit to return a handle to a service status information structure comprising a plurality of fields for informing the service control manager SCM about the current configuration and state of the security service . A SetServiceStatus function of the service control manager may be used to update the fields in the service status information structure. Fields of interest in this embodiment include a service type field a current state field and a controls accepted field. The service type field is used to represent the type of the security service the current state field represents an operational state of the security service e.g. whether the security service is started stopped or about to start or stop and the controls accepted field represents the kinds of notifications i.e. service control event signals that the security service is able to accept from the service control manager and process in its service control handler .

In this embodiment the Service Main thread initially directs the processor circuit to call the SetServiceStatus to set the service type field controls accepted field and current state field as follows. The service type field is set to SERVICE WIN32 OWN PROCESS a predefined value indicating that the security service runs in its own process. The current state field is initially set to SERVICE START PENDING to indicate that security service is starting. The controls accepted field is set to SERVICE ACCEPT STOP or SERVICE ACCEPT SHUTDOWN to indicate that the security service is able to receive and process notifications of the following service control events from the SCM SERVICE CONTROL STOP indicating that the security service should stop and SERVICE CONTROL SHUTDOWN indicating that system shutdown is occurring and therefore the security service should shut down too . When a notification of either one of these service control events is signalled to the service control handler the Service Main thread cleans up by releasing acquired resources calls SetServiceStatus to set the current service status to SERVICE STOPPED and terminates.

After these calls the Service Main thread directs the processor circuit to call a CreateThread function of Windows to create a network adapter manager thread described in detail below thereby marking the end of service initialization. The Service Main thread then directs the processor circuit to call the SetServiceStatus function with a dwCurrentState value of SERVICE RUNNING thus indicating to the Windows SCM that the security service is running. The Service Main thread also directs the processor circuit to call a CreateEvent function of Windows to create an unnamed manually re settable event object which may be referred to as a stop event object having an initial non signalled state. A successful call to the CreateEvent function directs the processor circuit to return a handle to the stop event object.

As mentioned above various threads of the security service direct the processor circuit to set the state of an event object to a signalled state by calling a Windows SetEvent function with the handle of the event object as a parameter. Similarly the various threads may direct the processor circuit to monitor the state of the event object therefore event objects are used among the various threads of the security service as a kind of synchronization mechanism.

To synchronize itself with other threads the Service Main thread directs the processor circuit to call WaitForSingleObject a blocking Windows function which directs the processor circuit to return only when a specified object is in a particular state or a specified timeout interval elapses . In this embodiment the WaitForSingleObject function is called with parameters indicating that the Service Main should await an internal stop event signal or else timeout within a predefined period of time such as 1000 milliseconds for example. When the stop event object state becomes set the Service Main thread effectively detects that an internal stop event has been signalled.

In this embodiment the security service may detect and respond to either an external event e.g. one signalled by the SCM through a control event e.g. SERVICE CONTROL SHUTDOWN sent to the service control handler see at arrows and a description of how the present embodiment detects and responds to WMI Ndis events is provided below or else an internal event i.e. as signalled by an internal thread of the security service which sets a user defined event object such as the stop event object to a signalled state .

Once the service control handler has been registered under the direction of the Service Main thread Windows service control event signals are passed by processor circuit under the direction of the Windows SCM to the service control dispatcher . The service control dispatcher in turn directs the processor circuit to dispatch the service control events to the service control handler as indicated by arrow . In this embodiment service control event signals are dispatched to the service control handler when the SCM directs the processor circuit to call a Windows HandlerEx function with a dwControl parameter representing the control code of the event to be handled e.g. SERVICE CONTROL STOP .

In this embodiment the security service ignores events other than certain predefined Windows service control events including the SERVICE CONTROL STOP and SERVICE CONTROL SHUTDOWN events. When the Windows SCM directs the processor circuit to signal the occurrence of either of these two events the service control handler directs the processor circuit to set the stop event object to a signalled state using the Windows SetEvent function thereby indicating the occurrence of an internal stop event. In general all threads relating to the security service are blocked waiting for a status change of the stop event object e.g. using WaitForSingleObject or WaitForMultipleObjects therefore an internal stop event will cause each of these threads to cleanup e.g. deallocate all held resources and terminate. After all other threads of the security service are terminated the service control dispatcher thread will also terminate whereupon the security service stops running. The Windows SCM may later directs the processor circuit to restart the service in response to receipt of a start request from the user for example. 

As mentioned above instruction codes in the Service Main thread direct the processor circuit to create the network adapter manager thread when the security service initially starts up. In this embodiment the network adapter manager thread directs the processor circuit to execute instruction codes associated with a network adapter controller block and a network adapter manager block both shown in . In this embodiment the network adapter manager block is implemented in an instance of a custom class i.e. an object created by block .

In a flowchart representing blocks of code for directing the processor circuit to implement the network adapter controller is shown generally at .

Referring to when the network adapter manager thread is started the network adapter controller block is started and block thereof directs the processor circuit to initialize a Windows Component Object Model COM library which under the Windows operating system provides access to the Windows Management Instrumentation or WMI block . As is known in the art the COM library is initialized by calling the Windows CoInitializeEx and CoInitializeSecurity functions to setup a concurrency model security configuration authentication level and other initialization options.

Block then directs the processor circuit to employ the CreateEvent function of Windows to create a plurality of event objects for internal use by the security service including all Network Driver Interface Specification Ndis and GUI notification event objects to be used. Parameters are passed to the CreateEvent function to indicate the attributes of the event objects. Pointers to these events objects are put into an events array. Event objects may then be set to a signaled state by calls to the SetEvent function or reset to a non signaled state by calls to the ResetEvent function of Windows The event objects created by block in this embodiment include 

The event objects created in this embodiment also include five additional GUI notification event objects for signaling that a status notification provided to the user by the processor circuit under the direction of the GUI notifier should be updated including 

Once all the event objects have been created block directs the processor circuit to call block of the network adapter manager block to build a wired adapter list and a wireless adapter list as shown in .

The network adapter controller block directs the processor circuit to wait for one of a plurality of predefined events to occur as shown at block in . Block does this by directing the processor circuit to call the WaitForMultipleObjects function of Windows with parameters including an indication of the number of events to wait for a pointer to the events array produced at block representing a plurality of event objects to be monitored by the WaitForMultipleObjects function an indication that a change of state of even one event object is sufficient to trigger a return from the WaitForMultipleObjects function and a timeout value e.g. 5000 ms . The WaitForMultipleObjects function directs the processor circuit to wait until any one of the specified event objects is in the signaled state or the time out interval elapses.

The Ndis events handler directs the processor circuit to monitor WMI Ndis events to detect the arrival of a network adapter in the system . When an MSNdis NotifyAdapterArrival event signal is received from Windows Management Instrumentation WMI by the WMI Ndis events handler the arrival event object is signaled and block directs the processor circuit to rebuild the lists of wired and wireless network adapters and as described in .

The Ndis events handler also directs the processor circuit to monitor WMI Ndis events to detect a disconnection of a network connection to a wired network adapter or to detect removal of a network adapter from the system . When a MSNdis StatusMediaDisconnect or MSNdis NotifyAdapterRemoval event signal is received from the WMI block by the WMI Ndis events handler the disconnect event object is signaled and block directs the processor circuit to check the connection status of wired network adapters and to set the wireless adapter list accordingly as described in .

By directing the processor circuit to monitor WMI Ndis events the Ndis events handler also detects a network connection being established to a wired network adapter of the system . When a MSNdis StatusMediaConnect event signal is received from the WMI block by the WMI Ndis events handler the connect event object is signaled and block directs the processor circuit to disable all wireless adapters as described in .

When a GUI notification event signal occurs as indicated by change of state of the GUI notification event object block directs the processor circuit to inform the GUI notifier process as shown by arrow in .

When an internal stop event occurs as signaled by a change of state of the stop event object a series of steps are taken to shut down the security service in blocks and . Block directs the processor circuit to cleanup resources allocated by the operating system for example by deallocating held resources such as memory space. Block directs the processor circuit to invoke the network adapter manager block which directs the processor circuit to enable all wireless adapters in the system as described in connection with . Finally block directs the processor circuit to un initialize the COM library by calling the CoUninitializeEx command of Windows . The network adapter manager thread then terminates.

In and flowcharts representing blocks of codes for directing the processor circuit to implement the network adapter manager of this embodiment are shown generally at and respectively. Generally illustrates a method for detecting the presence of one or more network interfaces in the system and for identifying wired and wireless network interfaces from among the detected network interfaces. illustrates a method of checking a connection status of all wired network adapters to detect the presence or absence of any wired network connections and then causing the wireless network interfaces of the system to be either disabled or enabled respectively in response to detecting the presence or absence of at least one wired network connection between the system and a wired network . illustrates a specific method for causing wireless network interlaces to be enabled or disabled.

As shown in block directs the processor circuit to call a GetAdaptersInfo function of a Windows Internet Protocol Helper API IPHLPAPI to retrieve information from the Windows network subsystem about network interfaces e.g. network adapters currently installed in the system . IPHLPAPI is an Application Programming Interface API of Windows which allows applications to retrieve network configuration information relating to network adapters which are bound to the Transmission Control Protocol Internet Protocol TCP IP . In the present case the call to the GetAdaptersInfo function detects and obtains information about all network adapters bound to TCP IP in the system thereby detecting the presence of one or more network interfaces of the computing device .

The call to the GetAdaptersInfo function in block directs the processor circuit to return a pointer to a linked list of IP ADAPTER INFO structures each containing information about a particular network adapter on the system . Each IP ADAPTER INFO structure in the linked list contains a plurality of information fields providing information about various attributes of a particular network adapter including an adapter name field indicating a globally unique identifier GUID uniquely identifying each particular network adapter. Effectively block produces a list of network adapters detected as installed in the system .

It will be appreciated that while IPHLPAPI has been used in this embodiment to obtain a list of installed network adapters in other embodiments a different method of obtaining a list of network adapters installed in a system may be used for example calls to a different programming interface of the operating system . Also while this embodiment focuses on controlling physical network adapters bound to TCP IP in other embodiments it may be desirable to retrieve a list of network adapters bound to other networking protocols such as those of the Novell NetWare protocol suite for example in order to monitor and control such network adapters.

At this point in this embodiment the list of network adapters does not necessarily represent physical wired or wireless network adapters of the system since it includes virtual adapters as well. Moreover the adapter names obtained by the call to the GetAdaptersInfo function in block do not necessarily correspond to real adapter display names such as VIA Rhine II Fast Ethernet Adapter used by Windows Management Instrumentation WMI when managing network adapter events. Therefore in this embodiment for each adapter in the original list of network adapters additional processing is performed to identify a hardware ID and a real adapter display name. As will be described in detail below in this embodiment obtaining the hardware ID is used to identify physical wired or wireless network adapters from among those in the original list of network adapters and the real adapter display name of an adapter is used to obtain notifications of events concerning that adapter from WMI .

Block causes the processor circuit to repeat the steps described below for each network adapter in the list of network adapters obtained in block until there are no network adapters left in the list to process.

For each network adapter block directs the processor circuit to retrieve a real adapter display name from an INetCfg software interface of Windows . More particularly block directs the processor circuit to initialize the INetCfg software interface by making appropriate calls to CoCreateInstance InetCfg Initialize and InetCfg EnumComponents as is known in the art. A description of relevant Windows software constructs may be found generally in the MSDN library at http msdn.microsoft.com and more particularly at http msdn.microsoft.com library en us network hh network nffrf82fdd57e 4ee5 4ec5 93f3 b661bf2a7093.xml.asp the entire content of which is incorporated herein by reference. The InetCfg EnumComponents function retrieves an enumeration comprising a collection of unordered network components of a particular type that are installed on the operating system . However this collection of components from InetCfg includes many components other than the network adapters which are of interest i.e. those retrieved in block .

Therefore in this embodiment block directs the processor circuit to sort through the InetCfg components to identify only components corresponding to entries in the list of network adapters produced at block . Block directs the processor circuit to traverse the InetCfg components of the collection in a loop invoking the lEnumNetCfgComponent Next function to retrieve the next InetCfg component in the enumeration sequence. For each InetCfg component retrieved block directs the processor circuit to retrieve a globally unique identifier GUID of the InetCfg component by calling the INetCfgComponent GetInstanceGuid function of Windows . Block then directs the processor circuit to test whether the GUID retrieved from the InetCfg component matches the GUID of the network adapter currently being processed from the list of network adapters produced by block . If there is a match the current InetCfg component corresponds to the network adapter being processed.

Block then directs the processor circuit to call the INetCfgComponent GetDisplayName function with the GUID obtained in block as a parameter to obtain the real adapter display name of that adapter.

Block then directs the processor circuit to obtain the hardware identifier ID of the network adapter being considered by calling InetCfgComponent GetID with the GUID as a parameter. The hardware identifier comprises a character string e.g. PCIWEN102C DEV00E0 . Generally the first portion of a hardware identifier of a physical adapter is its BUS type and typically includes one of the following strings PCI or USB or PCMCIA . For example the bus type of an adapter having the hardware identifier PCIWEN102C DEV00E0 is clearly PCI signifying that this adapter is a physical adapter. Thus by examining the hardware identifier block is able to distinguish physical adapters i.e. those having a predefined bus type from virtual adapters.

Many networking related applications add virtual adapters into Windows to help them manipulate traffic but this embodiment does not attempt to control virtual adapters as doing so may lead to unexpected results and in any event disabling a virtual adapter does not necessarily disable a physical wireless network adapter associated with the virtual adapter. Thus physical wireless network adapters may pose a security risk unless they are identified and then disabled when a wired connection is established to the system through a wired network adapter.

In the present embodiment block directs the processor circuit to test each hardware identifier retrieved in block to ascertain whether the network adapter associated with the hardware identifier corresponds to a physical bus type by checking whether the hardware identifier includes a predefined bus type identifier such as PCI or USB or PCMCIA for example.

If the processor circuit determines at block that a network adapter is not a physical adapter no further processing is done in respect of this network adapter since it deemed to be a virtual adapter and the processor circuit is returned to block to process the next network adapter in the list of network adapters produced in block . On the other hand if the processor circuit determines that the currently processed network adapter is a physical adapter the processor circuit is directed to block .

Having determined that the current network adapter is a physical network adapter the processor circuit is next directed to identify its type and in particular to determine whether the current network adapter is wired or wireless. The process for identifying a wireless network adapter may vary in different embodiments and may also vary according to the operating system that is installed in the system . In this embodiment as described below the process involves directing the processor circuit to determine whether a particular wireless network interface is associated with at least one predefined attribute indicative of a wireless network interface.

In this embodiment block directs the processor circuit to determine whether the operating system of the system is Windows XP or newer. If the processor circuit determines that the operating system is Windows XP or newer the processor is directed to block otherwise the processor is directed to block .

For cases where the operating system is Windows XP or newer blocks to direct the processor circuit to use the Windows Management Instrumentation WMI block to determine whether each physical network adapter identified at block supports at least one predefined wireless adapter identifier or attribute. Most wireless network adapters support IEEE 802.11 wireless LAN object identifiers OIDs among which the 802.11 service set object identifier is considered mandatory. Therefore if a network adapter supports this identifier it can be considered to be a wireless network adapter. It is worth noting however that various Windows programming interfaces may refer to the 802.11 service set identifier by various names. For example the WMI block programming interlace refers to this identifier as OID80211 SSID whereas the device input and output control IOCTL interface refers to it as MSNdis80211 ServiceSetIdentifier .

Therefore in one embodiment block directs the processor circuit to perform a query of the Windows Management Instrumentation WMI block to determine whether the network adapter being considered supports OID80211 SSID. A network adapter found to support OID80211 SSID is determined to be a wireless network adapter and is added to a wireless adapters list . A method of performing a query of WMI to determine whether a particular wireless network interface supports the 802.11 service set object identifier OID i.e. OID80211 SSID will now be described.

Several preparatory steps are taken by the processor circuit at block to connect to WMI. First block directs the processor circuit to call the Windows function CoCreateInstance to create an instance of a Web Based Enterprise Management WBEM locator object. Next the created WBEM locator object is used to connect to a server of WMI by a call to its WbemLocator ConnectServer function. Authentication of the connection is established by a call to the CoSetProxyBlanket function.

Block directs the processor circuit to cause an instance enumerator to be created for the class MSNdis80211 ServiceSetIdentifier . This is done by calling the function IWbemServices CreateInstanceEnum with parameters specifying that the name of the class for which instances are desired is MSNdis80211 ServiceSetIdentifier and that only the root should be enumerated i.e. enumeration is to be limited to pure instances of this class . All enumerated instances in this class are then traversed in a loop by using the IEnumWbemClassObject Next method to search for just one object including an instance string matching the real adapter display name. Block calls the IWbemClassObject Get method to check whether the instance string obtained matches the current adapter display name. In other words block directs the processor circuit to test whether MSNdis80211 ServiceSetIdentifier.InstanceName adapter display name . If the result is TRUE the adapter just processed supports the MSNdis80211 ServiceSetIdentifier class i.e. OID80211 SSID and therefore at block the processor circuit adds an identifier representing this adapter to the wireless adapter list .

Although the Windows Management Instrumentation WMI block on Windows XP and newer Windows operating systems is supposed to support queries of MSNdis80211 ServiceSetIdentifier for wireless adapters as described above unfortunately this turns out not to be the case for some wireless network adapters. To cover instances in which the above test fails a further test for detecting a wireless adapter is performed by blocks and .

Block directs the processor circuit to call the WMI block to retrieve the MSNdis PhysicalMediumType attribute associated with the network adapter. If the MSNdis PhysicalMediumType attribute is equal to MSNdis PhysicalMediumWirelessLan this confirms that the network adapter being examined is a wireless network adapter in which case the processor circuit is directed to block to add a representation of the adapter currently being processed to the wireless adapter list after which block is executed to process the next adapter if any .

The process for determining the MSNdis PhysicalMediumType attribute of a particular physical network adapter is similar to the steps taken above in respect of the MSNdis80211 ServiceSetIdentifier attribute. Block directs the processor circuit to create an instance enumerator for the class MSNdis PhysicalMediumType by invoking IWbemServices CreateInstanceEnum . All instances found in this class are then traversed in a loop by using the lEnumWbemClassObject Next method to obtain an instance string representing the adapter display name. Block directs the processor circuit to test whether the obtained instance string matches the current adapter display name i.e. whether MSNdis PhysicalMediumType.InstanceName adapter display name . If a match is found the value of NdisPhysicalMediumType for this instance is retrieved using the IWbemClassObject Get method. If the value retrieved is NdisPhysicalMediumWirelessLan block directs the processor circuit to add a representation of the network adapter to the wireless adapter list . Any adapter which fails the tests in blocks and for identifying a wireless adapter is deemed to be a wired network adapter and thus block directs the processor circuit to add an identification thereof to the wired adapter list in block . The adapter is not a virtual adapter since virtual adapters were previously eliminated at block . 

Although two specific tests of this embodiment have been described above for distinguishing wired and wireless adapters it will be appreciated that in a different embodiment tests relying on other network adapter attributes might conceivably be used in addition to or instead of the above tests and possibly in a different order in order to distinguish wired and wireless adapters.

In illustrative embodiments any wireless network adapters in the system are disabled in response to detection of a network connection to any wired network adapter of the system . Consequently it is desirable to accurately detect and track the presence and connection state of both wired and wireless adapters in the system . In particular it is desirable to detect and track when wired or wireless adapters are added and removed and to detect wired network connections and disconnections with any of the wired network adapters. The addition of a physical network adapter to the system may be effected by connecting or installing a new physical network adapter or by enabling an already connected or installed disabled network adapter. Conversely the removal of a physical network adapter can be effected by physically removing a connected or installed physical network adapter or by disabling a physical network adapter connected or installed in the system . A wired network connection is typically established by connecting a network cable to a wired network interface connector e.g. in of a wired network adapter.

In this embodiment the addition or removal of physical network adapters and the setup and tear down of wired network connections may be detected by monitoring Ndis event signals received from the WMI block as a result of connecting to a sink interface of the WMI block. In the Windows operating system a sink is a software construct basically an object allowing an application or service to receive notifications from the Windows operating system about operating system events. To be able to receive or sink notifications of such events the application or service must register as a temporary event consumer using special procedures of the WMI block . For example if a user uses a Device Manager application of the Windows operating system to disable or uninstall an existing network adapter this action can cause a MSNdis NotifyAdapterRemoval event signal to be sent to the security service if a sink object interface has been registered to subscribe to the MS Ndis NotifyAdapterRemoval event.

Accordingly in this embodiment block directs the processor circuit to implement a method of subscribing to relevant Ndis event notifications from the WMI block to facilitate keeping the wired and wireless adapter lists and up to date and making decisions about enabling disabling wireless adapters of the system . More particularly for each wired adapter block directs the processor circuit to register a call back sink object derived from IWbemObjectSink with the WMI block to enable the security service to receive MSNdis StatusMediaConnect MSNdis StatusMediaDisconnect and MSNdis NotifyAdapterRemoval event signals indicating that that wired adapter has been connected to disconnected from or removed from the system respectively. Block calls an ExecNotificationQueryAsync function of the WMI block to register the sink object as a consumer of the Ndis connect disconnect and removal events for the wired adapter currently being processed by specifying parameters including the real adapter display name obtained in block and a special SQL string as shown in the following example code 

In this way an adapter display name associated with a wired network interface which in this embodiment includes the wireless network interface connector and the wireless network interface adapter is used by the processor circuit in this embodiment to register a Windows Management Instrumentation WMI sink interface used by the Ndis events handler to receive notifications of Ndis events relating to the wired network interface.

A sink object corresponding to the wired adapter is instantiated in a respective thread of the Ndis events handler as shown by in . In this embodiment the sink object represents a subscription to three Ndis events of interest i.e. connect disconnect and removal for the wired network adapter. The sink object implements an Indicate call back function used by the WMI block to notify the Ndis events handler of relevant Ndis events. To signal occurrence of a relevant Ndis event to a sink object registered to receive that event WMI calls the Indicate function of the sink object.

It will be recalled that the processor circuit at block of created a number of event objects for internal use by the security service including an adapter connect event object an adapter disconnect event object and an adapter removal event object. In this embodiment when the WMI block directs the processor circuit to signal an Ndis event to the Ndis events handler by calling the Indicate function of the respective sink interface the Indicate function directs the processor circuit to set the corresponding internal event object to a signaled state. For example when the Indicate function receives notification of an Ndis connect event it directs the processor circuit to call the SetEvent function to set the adapter connect event object to a signaled state as described above.

When one of the internal event objects is set to a signaled state the adapter controller block is thereby informed of the event and block of directs the processor circuit to respond to the event appropriately as described above. Effectively the security service directs the processor circuit to monitor Ndis connect disconnect and removal events for each physical wired network adapter to detect the setup and breakdown i.e. disconnection of network connections of physical wired network adapters of the system to other computers or computing devices.

Referring again to after the above sink interfaces to Ndis events have been created the processor circuit is directed back to block where the next adapter from the original list of network adapters is evaluated in the loop of code as described above to detect whether it may be a wired or wireless network adapter.

It will be recalled that the foregoing method of identifying physical wireless network adapters is applied subsequent to a determination at block that the operating system in the system is Windows XP or newer. However if the security service is installed in a system utilizing Windows 2000 for example the WMI block may not support any wireless adapter related instances therefore an alternative method of distinguishing wired and wireless adapters is provided in this embodiment at blocks and .

In systems which use the Windows 2000 operating system in particular wireless network adapters can be identified by relying on the DeviceIoControl command of Windows to perform appropriate queries to the Windows network subsystem as illustrated in block of . In order to use the DeviceIoControl function to retrieve information from a network adapter a file pointing to the network adapter is first opened. Block directs the processor circuit to call a CreateFile function of Windows and pass the adapter name as the IpFileName parameter i.e. specifying the name of the object to open . If successful the CreateFile function directs the processor circuit to return a handle i.e pointer to the specified file. The DeviceIoControl function is then called passing as parameters the handle from CreateFile pointing to the network adaptor a pre defined value IOCTL Ndis QUERY GLOBAL STATS to indicate that the processor circuit should cause information about the network adapter to be retrieved and a parameter indicating that in particular OID80211 SSID information should be retrieved from the adapter which is currently being evaluated.

It will be recalled referring to block that OID80211 SSID is a mandatory predefined object identifier for IEEE 802.11 wireless adaptors. Accordingly if the results of the call to the DeviceIoControl function indicate that the adapter under consideration supports OID80211 SSID it is considered that it is a wireless adapter and therefore block directs the processor circuit to add an identification thereof to the wireless adapter list . If the adapter under consideration does not support OID80211 SSID it is deemed to be a wired adapter and therefore block directs the processor circuit to an identification thereof to the wired adapter list whereupon block directs the processor circuit to create suitable sinks as previously described. The next adapter identified from block is then processed in accordance with the loop starting at block until no further adapters remain to be processed. In this way the present embodiment identifies wired and wireless network interfaces from among the one or more network interfaces detected by the processor circuit in block .

Once all the adapters identified in block have either been eliminated as being non physical or have been classified by type e.g. as wired or wireless the processor circuit is directed to block .

Block directs the processor circuit to determine whether any wireless adapters were identified among all the network adapters of the system . If no wireless adapters were identified block directs the processor circuit to set the no wireless adapters event object using the SetEvent function to inform the GUI notifier that it should update the user display to indicate that no wireless adapters were found in the system to enable disable.

Block then directs the processor circuit to register another call back sink object to receive MSNdis NotifyAdapterArrival events signaling a network adapter being installed connected or enabled in the system . This sink object is associated with its own Indicate call back function and is instantiated in its own Ndis events handler thread. As will be seen from block in whenever an Ndis arrival event occurs in this embodiment the processor circuit executes the initialization procedure in process again to produce new wired and wireless adapter lists and . In this embodiment a sink interface for MSNdis NotifyAdapterArrival events may be setup as follows 

It will be recalled that in block three Ndis events were registered for one sink object corresponding to a wired network adapter. However arrival events e.g. the addition or enablement of a physical wired network adapter are not tied to any specific existing network adapter therefore only one sink object in total is used in this embodiment to detect and track all MSNdis NotifyAdapterArrival events. Since the identity of an arriving adapter is not known a priori when the WMI block calls the Indicate function it passes information about the adapter name in a call parameter.

Whenever the Ndis events handler receives notification of an Ndis arrival event from the WMI block the adapter arrival event object created by block is set to a signaled state to inform the adapter controller block of the event. The adapter controller block then processes the event in block shown in . Effectively the security service directs the processor circuit to monitor Ndis arrival events for both physical wired and wireless network adapter in order to keep its wired and wireless adapter lists and up to date and these lists are then used to decide whether the wireless adapters of the system should be disabled or enabled.

Having established the wired and wireless adapter lists and and having setup appropriate sink connections to the WMI block to receive notifications of relevant Ndis events the security service next causes the processor circuit to execute the blocks of codes shown at in to determine the current connection status for each wired network adapter and then to enable or disable the wireless network adaptors accordingly.

Referring to blocks of code are shown for checking the connection status of all wired adapters in the system and disabling all the wireless adapters of the system if at least one wired adapter is connected to a wired network or enabling all the wireless adapters if no wired adapter is connected to the wired network.

Block directs the processor circuit to set a local boolean variable wiredConnected to FALSE by default. Block then directs the processor circuit to test whether the connection status of all the wired adapters has been checked. If not the next wired adapter is processed in the loop as follows. Block directs the processor circuit to perform a query to the WMI block to obtain the MSNdis MediaConnectStatus attribute of the present wired adapter. Assuming the WMI block has already been initialized as described above in relation to block of block directs the processor circuit to invoke the IWbemServices CreateInstanceEnum method to create an instance enumerator for the class MSNdis MediaConnectStatus . Then block directs the processor circuit to use the IEnumWbemClassObject Next method to loop through all instances within this class. Finally the IWbemClassObject Get function is called and the processor circuit is directed to determine if the returned instance string matches the current adapter display name. If a match is found block directs the processor circuit to obtain the value of the NdisMediaConnectStatus attribute for this instance.

At block the processor circuit tests whether the MSNdis MediaConnectStatus attribute obtained is equal to Ndis MediaStatusConnected a predefined value indicating that the wired adapter is presently connected to a wired network. If the result is yes the processor circuit sets the local variable wiredConnection to TRUE and the processor circuit is directed back to blocks and . If the present wired network adapter does not have a wired connection the processor circuit returns to block to process the next wired adapter in the wired adapter list.

Once all the wired adapters in the wired adapter list have been processed if at least one wired adapter was found at block to have a connection with a wired network block directs the processor circuit to call the network adapter manager block of codes shown at in for disabling all wireless adapters in the system . If on the other hand at block the processor detects that none of the wired adapters in the wired adapter list is connected to a wired network block directs the processor circuit to call block to cause all the wireless adapters in the wireless adapter list to be enabled. In either case block is passed a parameter indicating whether a disable or enable operation is desired.

Effectively in this embodiment detecting the disconnection of a network connection from a wired network interface to a wired network involves directing the processor circuit to check the connection status for all wired interfaces detected as being installed in the system and to determine that none of the detected wired interfaces has a network connection with a wired network. Other embodiments may use other methods to detect whether a network connection with a wired network interface has been disconnected.

Referring now to a block of codes for enabling or disabling a collection of wireless adapters and for annunciating a notification of having done so to the user is shown generally at .

Block directs the processor circuit to take two input parameters a boolean enable disable flag indicating whether it is desired to enable or disable wireless adapters and also a pointer to the wireless adapter list listing all the wireless adapters detected as installed in the system . For each entry in the wireless adapter list an adapter hardware ID is provided as an input to the process.

The process begins with block which directs the processor circuit to set a local variable entitled DoEnable to the value of the boolean enable disable flag passed as an input parameter.

Then the wireless adapters listed in the wireless adapter list are each processed in an outer loop beginning at block . Block instructs the processor circuit to test whether there are any more adapters to process in the wireless adapter list . If not the routine ends. If there is at least one more wireless adapter to process the processor circuit is directed to block .

As will be described below in this embodiment in order to cause physical network adapters in the system to be disabled or enabled certain device installation functions of Windows having the prefix SetupDi are called by the processor circuit . Information about such functions can be accessed at http msdn.microsoft.com library en us install hh install SetupAPI071eca3a Occ3 4962 b3de 65dcf056c761.xml.asp incorporated herein by reference.

Block directs the processor circuit to call the SetupDiClassGuidsFromNameEx function of Windows to obtain a GUID globally unique identifier associated with the operating system defined setup class entitled Net representing network adapters. A GUID is a 128 bit integer 16 bytes which is unique for each class of hardware installed in the system . In this embodiment the class GUID value is 4D36E972 E325 110E BFC1 08002BE10318. This class GUID value is subsequently used as a parameter to other Windows functions which examine or modify the state of the physical network adapters installed in the system .

Block then directs the processor circuit to call the SetupDiGetClassDevsEx function to obtain a device information set identifying all devices of the Net class i.e. all network adapters.

Next block directs the processor circuit to call the SetupDiGetDeviceInfoListDetail function to retrieve detailed information associated with the device information set obtained in block and relating to the wireless adapter being processed.

Block then directs the processor circuit to initialize an internal device index variable devIndex to zero.

Block marks the start of an inner loop of the process for traversing the set of installed devices of the class Net i.e. network adapters to find the hardware ID corresponding to the adapter to be controlled which is the next un processed wireless network adapter of the wireless adapter list . The set of installed devices was determined earlier in block and the next wireless network adapter to be processed was chosen from the wireless adapter list at the top of the outer loop which begins at block . 

Block then directs the processor circuit to call the SetupDiEnumDeviceInfo function to enumerate the next wireless network adapter in this class. Block directs the processor circuit to test whether there are any more installed devices i.e. wireless network adapters within this class for which device information may be retrieved. If not the processor circuit is directed back to block to process the next adapter in the wireless adapter list .

If there are more devices to be processed within this class i.e. network adapters block directs the processor circuit to call the CM Get Device ID Ex function of Windows to obtain the network adapter instance ID of the present adapter. Next block directs the processor circuit to call the SetupDiGetDeviceRegistryProperty function to obtain the hardware ID for this wireless network adapter. The parameters passed to SetupDiGetDeviceRegistryProperty include the device information set received in block information about the network adapter instance and an identification of SPDRP HARDWAREID as the property to be set.

Block directs the processor circuit to test whether the hardware ID retrieved in block matches the hardware ID of the wireless adapter that it is desired to control. If not the device index devIndex is incremented at block and the processor circuit is directed to the start of the inner loop at block . If there are any further devices in this hardware class i.e. network adapters remaining to be processed the processor circuit is directed to block otherwise the processor circuit is directed to the beginning of the outer loop at block to process the next adapter in the wireless adapter list .

If at block the processor circuit is able to match the hardware ID obtained in block with the hardware ID of the device desired to be controlled the processor circuit is directed to block .

Block directs the processor circuit to call the SetupDiSetClassInstallParams function of Windows to setup the desired class installation parameters. If DoEnable is TRUE then the installation parameters are set to configure the wireless adapter to be enabled. If DoEnable is FALSE then the installation parameters are set to configure the wireless adapter to be disabled.

Following block block directs the processor circuit to call the SetupDiCallClassInstaller function of Windows with parameters including a hardware identifier identifying the precise physical network adapter to be re configured and specifying a device installation request DIF code of DIF PROPERTYCHANGE which is a predefined value in Windows indicating that a device is being enabled disabled restarted stopped or that its properties are changing. The call to the SetupDiCallClassInstaller thus applies the parameters set up in block thereby effecting either an enable or disable operation depending on the value of the DoEnable flag for the network adapter being modified. If the DoEnable flag is set to enable then block enables the wireless adapter otherwise it disables it. The parameters for effecting the DIF PROPERTYCHANGE installation request are stored in a SP PROPCHANGE PARAMS structure having a StateChange variable in which the predefined values DICS ENABLE and DICS DISABLE are stored to enable or disable the device respectively. The hardware identifier associated with the wireless network adapter may be used as a parameter to the device installation functions identify which wireless network interface to enable or disable. For example in this embodiment the processor circuit at blocks and calls particular device installation functions as follows 

Causing a wireless network adapter to be disabled by the above method renders it inoperable at the hardware level and in some embodiments may actually cause the wireless network adapter to be powered down. Advantageously other software in the system may not detect the wireless network adapter after it has been disabled in this way.

Block directs the processor circuit to check a return code from the SetupDiCallClassInstaller function to determine if the attempted setup enable operation succeeded. For example a wireless adapter may fail to shut down or start up due to a software or hardware bug thus necessitating the taking of corrective action. If an error code was returned special procedures are invoked to shut down the wireless adapter. In this way the present embodiment directs the processor circuit to verify that the wireless network interface was successfully disabled and to take corrective action if it was not.

Experiments have shown that one of the reasons that an attempted enable disable operation may fail for a network adapter is that the network adapter was improperly installed for example by registering a non existent co installer DLL function. In this embodiment this problem is dealt with by removing any references in the Windows registry to the registered co installer DLL and then attempting the enable disable operation again for this particular network adapter. Hence block directs the processor circuit to perform the following series of steps in an attempt to correct the problem 

At this point block directs the processor circuit to call the SetupDiCallClassInstaller function to again try the enable disable operation. If the SetupDiCallClassInstaller function returns another error code additional corrective actions may optionally be undertaken by the processor circuit in some embodiments before passing to block .

Block directs the processor circuit to invoke the SetEvent function of Windows to signal the occurrence of the appropriate GUI notification event to the GUI notifier . The GUI notifier is a process providing notifications via a graphical user interface GUI to a user of the system of significant events in this embodiment by updating displaying various icons in a taskbar region of the display. For example if all wireless adapters are enabled the GUI notifier may display an antenna icon in the taskbar. If all wireless adapters are disabled the GUI notifier may display an antenna icon with a padlock.

In this embodiment if the wireless adapter was successfully enabled in block block directs the processor circuit to cause the wireless enabled event object to be set to a signaled state. Similarly block directs the processor circuit to set the wireless disabled the enable failed and disable failed event objects depending on the results of block . It will be appreciated that since a GUI notification event may be signaled for multiple wireless adapter cards the GUI notifier may be faced with multiple GUI event objects being set to a signaled state. A priority scheme is therefore used by the GUI notifier to give priority to error events. Thus if the GUI notifier receives notification of both a wireless disabled event and a wireless disable failed event the latter will take priority and be the final result. Accordingly an error indication will be displayed to the user in the display area.

The security service and its associated GUI notifier are loaded into memory during startup by the processor circuit under the direction of the Windows service control management block . The initialization and setup block then directs the processor circuit to prepare the security service for operation by launching the service control event handler and the network adapter manager thread which includes the adapter controller object.

The adapter controller directs the processor circuit to create a plurality of custom event objects to allow the security service to respond to Ndis event signals to signal GUI notifier update notifications and to stop the service.

The adapter controller also directs the processor circuit to create a plurality of Ndis events handler threads for receiving and thereby detecting Ndis events such as connections and disconnections of network adapters as well as arrivals and removals of the network adapters i.e. connect disconnect arrival and removal events . The Ndis events handler directs the processor circuit to monitor Ndis events by registering with the WMI block through a plurality of sink objects to receive specific Ndis events relating to adapters of interest.

Furthermore the adapter controller directs the processor circuit to create the network adapter manager object associated with network adapter manager blocks of code. When the network adapter manager object is created it directs the processor circuit to query the Windows network subsystem and InetCfg and SetupAPI blocks of Windows to obtain hardware information including an initial list of installed adapters. The initial list is processed as shown in blocks to of to produce a wired adapter list and a wireless adapter list each composed of non virtual physical adapters.

In response to notifications of Ndis events received from the WMI block corresponding internal event objects are set by the processor circuit to a signaled state to produce Ndis event notifications to the adapter controller regarding the occurrence of the Ndis events.

In response to the Ndis event notifications if the processor circuit under the direction of the adapter controller detects using the process shown in blocks to in that at least one wired adapter in the wired adapter list has had a connect event e.g. established a network connection to a wired network then the network adapter manager directs the processor circuit to disable all the wireless adapters in the wireless adapter list using the process shown in .

After a command is issued to disable or enable a particular wireless adapter the adapter manager block directs the processor circuit to check whether the wireless adapter was successfully disabled or enabled. If yes the GUI notifier directs the processor circuit to notify the user of the successful enablement or disablement of the wireless network interface. If not the processor circuit is directed to take corrective action and then to attempt again to disable or enable the wireless network interface. For example in this embodiment the corrective action may involve correcting incorrect registration information relating to the wireless adapter in an operating system registry.

To extend the illustration if only one wired adapter was previously detected as having a network connection and an Ndis disconnect or removal event is detected by the processor circuit for that wired adapter then the Ndis events handler directs the processor circuit to notify the wireless adapter controller of the Ndis event. The wireless adapter controller then directs the processor circuit to traverse its wireless adapter list and enable each wireless adapter represented in the list by a series of calls to the INetCfg and SetupAPI block of the Windows operating system. Effectively the wireless adapter controller directs the processor circuit to detect the disconnection of the system from the wired network and causes the wireless network adapters to be enabled in response to detecting this disconnection.

The security service then directs the processor circuit to continue to wait for further Ndis events responding to them as described above and illustrated in . When the Windows SCM directs the processor circuit to signal a stop or shutdown event to the service control handler function that function directs the processor circuit to set the internal stop event object to a signaled state. In response to the stop event object being set to a signaled state all held resources are released all wireless adapters are enabled the network adapter manager object is deleted and interfaces to Windows subsystems such as the WMI block are shut down e.g. whereupon the security service terminates.

Effectively then this embodiment is operable to direct a processing circuit to cause a wireless network interface of a computing device to be disabled in response to detection of a network connection between the computing device and a wired network such as . This may involve detecting a network connection between the wired network interface of the computing device and the wired network . This embodiment is also operable to direct the processing circuit to detect a disconnection of the network connection and to cause the wireless network interface to be enabled in response to the disconnection. In this embodiment the wireless network interface includes a wireless network interface connector and a wireless network interface adapter connectable thereto however other embodiments may disable and enable other kinds of wireless network interfaces according to the methods described herein. Notifications of whether the wireless interfaces of the system have been disabled or not or whether an error condition has occurred are signaled to the GUI notifier which directs the processor circuit to display them to the user on the display .

The system reduces the possibility that a user may inadvertently wirelessly broadcast a connection to the wired network to unauthorized users for example hackers posing as a trusted wireless network or access point. Thus hackers are prevented from tunneling through the wireless interface s to reach shared documents and resources on the user s computing device and on the company s secure wired network.

Although this embodiment has been described with reference to the Microsoft Windows operating system it will be appreciated that many of these methods may be applied in the context of another operating system in some cases by using programming interfaces native to that operating system or by using custom software facilitating interaction with the hardware in that context. While specific embodiments of the invention have been described and illustrated such embodiments should be considered illustrative of the invention only and not as limiting the invention as construed in accordance with any claims that may accompany this or a corresponding application.

