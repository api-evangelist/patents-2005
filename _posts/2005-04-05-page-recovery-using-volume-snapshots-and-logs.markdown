---

title: Page recovery using volume snapshots and logs
abstract: Systems and methods are disclosed that facilitate providing page-level database restore functionality upon detection of a corruption event. Updates to a data page in a database can trigger generation of a snapshot of the data page, and an update log can be maintained that stores information related to page updates. Subsequent snapshots can be generated at predetermined intervals and can trigger truncation of a log segment and initiation of a new log segment. Upon detection of page corruption, a most-recent uncorrupt snapshot of the corrupt page can be identified, copied to the location of the corrupt page in the database, and modified according to the log segment associated with the uncorrupt snapshot to make the page current as of the corrupting event, all of which can be performed to restore the database without having to take the database offline.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814057&OS=07814057&RS=07814057
owner: Microsoft Corporation
number: 07814057
owner_city: Redmond
owner_country: US
publication_date: 20050405
---
The subject invention relates generally to database management and more particularly to automatically backing up and restoring databases resident upon consumer computing devices.

Computers and computer based devices have become a necessary tool for many applications throughout the world. Typewriters and slide rules have become obsolete in light of keyboards coupled with sophisticated word processing applications and calculators that include advanced mathematical functions capabilities. Thus trending applications analysis applications and other applications that previously may have required a collection of mathematicians or other high priced specialists to painstakingly complete by hand can now be accomplished through use of computer technology. To properly effectuate the aforementioned applications as well as other applications that utilize data within databases such data must be accessible and be free from corruption. Businesses that have sufficient resources can employ one or more database administrators DBAs to ensure that data within a database remains available to users and or applications accessing such database. For instance a DBA can schedule a backup of data within the database in case of occurrence of corruption therein and thereafter effectuate such backup. If problems exist within a first copy of the data e.g. data therein is corrupted the second copy of the data can be utilized to restore such first copy.

As can be assumed DBAs are a significant expense with respect to database management. For instance DBAs typically are associated with advanced and specialized skill in the field of databases. Accordingly individual users do not employ DBAs to monitor their hard drives to ensure data integrity therein. Furthermore many conventional computer systems are not associated with database engines thus rendering DBAs useless in connection with such systems. As hard drive space has expanded however employing database technology in consumer level computers such as desktop computers laptop computers and the like is becoming increasingly popular. Therefore similar problems existent with respect to database servers e.g. data corruption are becoming prevalent with respect to consumer level computers.

Given the above it is apparent that individual users small businesses and any other user entity not employing a DBA to manage their database s is subject to various catastrophes associated with data corruption. For instance if particular pages within a database file are subject to corruption and no adequate backup system exists then an entirety of a database can be lost. For typical consumer users this can translate to loss of information associated with banking accounts information related to photographs entertainment and the like and various other data that is extremely important to an individual. Furthermore a user can manually enter at least a portion of data within a database and it may have required a substantial amount of time for the user to provide this information. In one example a user may have thousands of different music files resident upon a hard drive and ratings associated with the music files may have been manually entered by a user and stored in a database. A substantial amount of time was obviously necessary to enter such ranking data and loss of such data due to data corruption will negatively affect user enjoyment associated with the music files. With respect to small businesses corruption of a database can equate to loss of payroll information tax information profitability data and various other data that is of extreme importance to the business. Thus a loss of a database due to corruption therein can prove disastrous to both consumer users and small business users.

Conventionally as consumers and small businesses typically do not employ DBAs the only manner in which to protect themselves is to manually create backups of the database. Many users do not undertake such backups as they assume that their computers are not susceptible to data corruption. In other instances a user may only sporadically remember to take a backup of an important database e.g. once every few months . Therefore even if such user does remember to backup the database data within the backup may be obsolete in some respects. Moreover if there is a corruption within data the user must then manually copy data from the backup of the database and enter such data into an original database thereby providing even further opportunity for human error e.g. copying data to an incorrect location .

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

The subject invention disclosed and claimed herein in one aspect thereof comprises a system that facilitates restoring a database utilizing automated page level restore functionality. According to this aspect a modification to a page or a portion thereof in a database can trigger a snapshot of the data page to be generated such that the snapshot comprises a pre modification image of the data page. Snapshots can be generated via for example a volume shadow copy application. After an initial snap shot is generated and stored subsequent snapshots can be generated stored at predetermined temporal intervals. Update logs can be maintained that record page modifications and each snapshot can trigger truncation of the log. Upon the generation of a subsequent snapshot the log portion resumed after the previous snapshot can be truncated and the log can again be resumed to generate a new log portion associated with the new snapshot. In this manner the system can generate and store backup information related to modifications to a data page for use in restoring the datapage should a corruption thereto occur prior to saving the data modified page.

According to a related aspect of the invention data pages and or portions thereof can be monitored to detect the presence of corrupt data therein. Detection of corrupt data can be facilitated by employing for instance a checksum technique. Upon detection of corrupt data value s which can render the page in which it resides corrupt stored snapshot copies of the page can be reviewed for example starting with the most recent snapshot and traversing snapshots backwards in time. A most recent uncorrupted snapshot of the page can be identified and selected and a log segment generated for that snapshot can be read forward in time. Update information recorded in the log can be applied to modify a copy of the snapshot to render it current up until the point of corruption. The modified snapshot copy can then be utilized to replace the corrupt page in the database to restore the database while it remains online e.g. the database need not be taken offline for data restoration which improves system efficiency and user experience.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative however of but a few of the various ways in which the principles of the invention can be employed and the subject invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

The subject invention is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the subject invention. It may be evident however that the subject invention can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the subject invention.

As used in this application the terms component and system are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component can be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers.

The subject invention facilitates overcoming problems related to partial media failures during updating of a page of data in a database. For instance a power failure during an update to a data page can result in an occurrence that is known as a torn write wherein a portion of the data page is updated while another portion is not updated. Such a partially written page is corrupt from a database standpoint. When the database is restarted e.g. power is reapplied thereto the corruption is detected and the database is typically taken offline which has the undesirable side effect of detrimentally affecting availability of the database to applications and or end users. Conventional backup restore mechanisms can be unnecessarily complicated and require a complete database restore which can be time consuming and can even further adversely affect database availability. Thus the subject invention provides for systems and methodologies that are more robust and autonomous than conventional systems by facilitating page level restore of corrupted data pages in a database.

Referring now to there is illustrated a system that facilitates maintaining database availability while restoring a corrupt page in the database in accordance with an aspect of the subject invention. The system comprises an interface component that can receive input related to modifying data in a database or a page thereof. For example the input can comprise information related to a user s modifications of a document e.g. a word processing document a digital image such as a JPEG a GIF etc. and or any other suitable document that can be altered by a user and or can comprise modification information from a computer application etc. For instance the interface component can be an input device such as a mouse a keyboard a microphone a stylus or any other suitable input component that permits a user to enter information related to data modification. Additionally and or alternatively the interface component can be a computing device such as a personal computer a PDA a cell phone a laptop and the like.

The modification information can be received by a backup component that provides a variety of functionality to the system . For instance upon receipt of information related to a desired change to data in a data page in a page database the backup component can generate a snapshot pre image of the data page in which data is to be modified and or updated while permitting a data store e.g. a database to remain online and available and can store the pre image in a snapshot database . In this manner the backup component can generate a pre image of the data page to be updated prior to the actual update at a volume level below a file system associated with the data store . Snapshots can be taken by the backup component at predefined intervals such as for example every five minutes every hour every two hours etc. Additionally snapshots of a data page can be stored in a stack format in the snapshot database utilizing a first in first out inventory mechanism. For example a predetermined number of snapshots can be permitted with regard to a data page e.g. 20 24 40 . . . whereby upon generation of a subsequent snapshot e.g. 21 25 41 . . . the oldest snapshot in the stack can be discarded from the snapshot database . Discarded snapshots can be deleted stored in another database compressed and archived etc.

When generating a snapshot of a data page the backup component can employ for example a volume shadow copy application not shown that facilitates creating consistent shadow copies across a plurality of volumes. For instance shadow copies can be stored as snapshots in the snapshot database . Additionally the log database and or a segment thereof as of the time of the snapshot can be stored as part of its associated snapshot in the snapshot database. The shadow copy application can mitigate interruption to an application while generating a snapshot of data associated therewith. Updates to a data page in the page database between snapshots can be logged in a log database where individual update events can be associated with a log sequence number and stored chronologically. Log segments can additionally be segmented and or truncated to delineate temporal spaces between snapshots. Upon detection of a corrupt data page or a portion thereof the backup component can locate a most recent uncorrupted snapshot of the data page from the snapshot database and can then employ logged update events from the log database to make the snapshot current. The updated snapshot can be stored in the page database prior to updating and can be updated e.g. written to according to the transaction log database to restore the page with which it is associated. A corrupt page can thus be repaired by copying a snapshot of the page prior to corruption replacing the corrupt page in the page database with its most recent uncorrupt snapshot and updating the page snapshot via logged update information to cause the snapshot to resemble the page immediately prior to the corrupting event.

According to a related aspect snapshots can be made of portions of a data page and stored accordingly. For instance a data page can typically comprise approximately 8 kilobytes of data such that corruption of a single portion thereof renders the entire page corrupt. The backup component can parse a data page into chunks if desired to create varied levels of granularity with regard to data backup and restoration. For example the backup component can chunk pages into 2 kilobyte sections such that each section of a data page can have snapshots and or logs associated therewith upon the occurrence of one or more update events related to a particular page section. The invention is not limited in the number of sections or the size thereof into which a data page can be partitioned.

The following is an example of pseudo code that can facilitate restoring a data page from logged update information in accordance with an aspect of the invention 

The above syntax can be extended to provide for the volume snapshots described herein where such extended syntax can provide for volume snapshots as a source of data and log pages in both the RESTORE DATABASE and RESTORE LOG statements above. Such can facilitate marking a page as being under recovery in for example a file header a buffer header etc.

Additionally a volume snapshot can comprise recovered database pages in order to facilitate logical recovery of objects by an end user. Conventional recovery systems can cause an undo command to touch pages and or copies thereof rendering them useless for repairing a corrupt page. The system can be designed to facilitate restore functionality while preserving snapshot copies that are touched by an undo command during recovers. For example a statement such as RESTORE database WITH standby undo file name is representative of a syntactical extension that can be provided when extending the above described restore syntax. In this manner snapshots can be employed to facilitate repairing corrupt pages in a database. For instance if a transaction e.g. a modification . . . is in progress e.g. incomplete when a snapshot is taken according to a pre defined schedule the snapshot might not contain all modifications made during the transaction. In order to facilitate making the snapshot transactionally consistent the system can undo modifications in the snapshot to return the snapshot to its pre image state. Additionally the system can employ a recovery technique with stand by mode functionality during the snapshot modification and can store a modified post image of the page after modification which also can be stored in the snapshot database to be employed when restoring a corrupt data page.

Additionally the system comprises an update logging component that identifies updates associated with pages in the page database and which can assign unique log sequence numbers to such events to facilitate efficient assessment thereof in the event that such information is required to facilitate a page restore. The update logging component can be in bidirectional communication with either or both of the interface component and the database and or sub components there of e.g. the page database the snapshot database and or the log database . Additionally the update logging component can be separate from the back up component e.g. as illustrated or can be integral thereto.

The update logging component can comprise a log truncating component that truncates a log associated with modifications to data pages in the page database upon generation of a snapshot of one or more data pages to be modified by the backup component . In this manner a snapshot can operate as a bookmark of sorts such that snapshots can delineate log segments. Additionally if a snapshot is determined to be free of corruption then a truncated log segment preceding it need not be reviewed because it can be determined from the snapshot that all updates to the data page s prior to the snapshot are exculpated with regard to the corruption. The log truncation component can employ a database consistency checker command to identify a particular log sequence number and upon a successful snapshot the log can be truncated up until the identified log sequence number.

The system further comprises a monitoring component that monitors the database and or the page database to determine whether data corruption has occurred. Additionally the monitoring component can determine a magnitude of data corruption location of data corruption e.g. particular page and or section thereof . . . whether detected corruption is associated with a particular type of page such as a boot page etc. The monitoring component can employ a corruption detection technique e.g. a checksum technique . . . to determine whether a corrupted data value is present in a page or a portion thereof and can communicate with the backup component to initiate a restore procedure as necessary. For example the checksum can be 8 bits e.g. modulo 256 sum . . . 16 bits 32 bits or any other suitable size and can be computed by summing the bytes or words of the data page ignoring overflow. The checksum can be negated if desired so that the total of the data words plus the checksum is zero. Upon receipt of information indicative of a corrupted page the backup component can identify a most recent uncorrupted snapshot of the page can copy the snapshot image to the page location in the page database and can apply updates to the snapshot via the log database by reading and applying updates in the log database from the non corrupt snapshot forward to restore corrupt page.

According to an example a modification can be received by the backup component from the interface component where the modification relates to a change to data stored in page . Page need not necessarily be the first page e.g. first 8 kilobytes in the page database but rather can be the first page to be modified. Prior to updating Page the backup component can generate a snapshot of the page with unmodified Page and store it in the snapshot database in Snapshot . Log segment can be initiated upon the modification and can record update events for the page database from generation of Snapshot forward and can be stored in the log database as well as in Snapshot of the snapshot database . Snapshot can be generated after a predetermined time period e.g. 5 minutes 1 hour . . . and can be stored in the snapshot database . Upon the creation of Snapshot Log segment is truncated and Log segment is initiated. This process can be reiterated N times to facilitate backing up modification data for the page database indefinitely.

To further this example if the monitoring component determines that Page is corrupt at some temporal point between Snapshot and Snapshot then the backup component can select the page pre image from Snapshot which can be verified to be free of corrupt values by the monitoring component can copy the page pre image to the page s location in the page database and update the copied page according to update information contained in the Log segment for Snapshot e.g. update information logged after the generation of Snapshot . . . to restore the page database to an original non corrupt state.

According to the figure the backup component comprises a memory and a processor . It is to be appreciated that the processor can be a processor dedicated to analyzing and or generating information received by the backup component a processor that controls one or more components of the system and or a processor that both analyzes and generates information received by the backup component and controls one or more components of the system .

The memory can additionally store protocols associated with generating snapshots logs etc. such that the system can employ stored protocols and or algorithms to achieve page level restore as described herein. It will be appreciated that the data store e.g. memories components described herein can be either volatile memory or nonvolatile memory or can include both volatile and nonvolatile memory. By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory can include random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM . The memory of the subject systems and methods is intended to comprise without being limited to these and any other suitable types of memory.

The backup component is further operatively associated with an artificial intelligence AI component that can make inferences regarding operation of the system . As used herein the term to infer or inference refers generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources.

The subject invention can employ various artificial intelligence based schemes for carrying out various aspects thereof. For example a process for determining when to generate snapshot s for a data page how to chunk a data page into smaller portions etc. can be facilitated via an automatic classifier system and process. Moreover where the data page has several corrupt snapshots the classifier can be employed to determine which snapshot is a most recent uncorrupted snapshot etc.

A classifier is a function that maps an input attribute vector x x1 x2 x3 x4 xn to a confidence that the input belongs to a class that is f x confidence class . Such classification can employ a probabilistic and or statistical based analysis e.g. factoring into the analysis utilities and costs to prognose or infer an action that a user desires to be automatically performed. In the case of data page restoration for example attributes can be recorded update information snapshot information page address or other data specific attributes derived from the tracked modification information related to the data page and the classes are categories or areas of interest e.g. levels of corruption pages requiring restoration . . . .

A support vector machine SVM is an example of a classifier that can be employed. The SVM operates by finding a hypersurface in the space of possible inputs which hypersurface attempts to split the triggering criteria from the non triggering events. Intuitively this makes the classification correct for testing data that is near but not identical to training data. Other directed and undirected model classification approaches include e.g. na ve Bayes Bayesian networks decision trees and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.

As will be readily appreciated from the subject specification the subject invention can employ classifiers that are explicitly trained e.g. via a generic training data as well as implicitly trained e.g. via observing user behavior receiving extrinsic information . For example SVMs are configured via a learning or training phase within a classifier constructor and feature selection module. Thus the classifier s can be used to automatically perform a number of functions including but not limited to determining according to a predetermined criteria when to generate a first snapshot of a data page how often to generate subsequent snapshots when to initiate a page restore a manner in which to traverse a snapshot sequence and or logs associated therewith and the like.

For example the AI component can infer a manner of reviewing snapshot logs associated with a datapage that has been determined to be corrupt. For instance a snapshot log segment can be traversed in a forward direction from the first snapshot generated for the page just prior a first modification through subsequent snapshots until a corrupt snapshot is identified at which point the uncorrupted snapshot immediately preceding the corrupt snapshot can be selected an uncorrupt pre image of the corrupt page can be copied to its corresponding page location in the page database and can be updated according to the log beginning at the uncorrupted snapshot to a state immediately preceding the corruption. According to another example in order to minimize restore time the AI component can infer that a reverse traversal of snapshots of a page can facilitate faster identification of a non corrupt page and can direct the system to review snapshots starting with a most recent snapshot. According to a related aspect the AI component can infer that it is desirable to increase a frequency of snapshots e.g. in a scenario in which a large number of and or substantial modifications are determined to be in progress with regard to the page or pages. In this case snapshot frequency can be increased so that upon detection of corruption in one or more pages log segments associated therewith can be shortened and thus traversed more quickly. The preceding examples are illustrative in nature and are not intended to limit the scope of the manner in which the AI component makes inferences or the number of inferences that can be made by the AI component .

With reference to there are illustrated flowcharts in accordance with aspects the subject invention. While for purposes of simplicity of explanation the one or more methodologies shown herein e.g. in the form of a flow chart are shown and described as a series of acts it is to be understood and appreciated that the subject invention is not limited by the order of acts as some acts may in accordance with the subject invention occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all illustrated acts may be required to implement a methodology in accordance with the subject invention.

At one or more data pages in a database can be monitored. At an incoming update modification to a page can be detected. For example a user can modify a word document an image document an email etc. and such modifications can be detected at as they are generated. Upon detection of an update event e.g. a modification at a snapshot of the data page to which modification is imminent can be generated at . The first snapshot of a page can be triggered by the incoming page modification and thereafter subsequent snapshots of the page can be taken at predetermined intervals e.g. every 30 minutes 60 minutes 90 minutes . . . . Snapshots can be generated using for example a volume shadow copy application and or any other suitable means for storing a version of a data page for future review manipulation restoration and the like.

At a log can be initiated for the data page s wherein update events can be recorded e.g. logged and assigned a log sequence number . The log can comprise information related to updates that occur between one snapshot and a subsequent snapshot. At a subsequent snapshot can be generated for the data page which can trigger truncation of the log initiated at the previous snapshot and initiation of a new log segment comprising updates to the data page. In this manner when page restore becomes necessary e.g. due to power failure corrupt data values in the page . . . the snapshots can be reviewed to find a most recent snapshot containing an uncorrupt image of the corrupt page which can be used as a base template and copied into the page location of the corrupt page in a page database. Log segment s can be read from the selected snapshot forward in time to update the selected page snapshot copy in order to bring it current with the data page immediately prior to the corrupting event in order to replace the corrupt page and complete the page level restore of the database while maintaining database availability e.g. the database need not be taken offline during restore .

If corrupt data is found in the data page then at snapshots containing a version of the page can be reviewed. Review of the snapshots can occur in reverse chronological order for instance a most recent snapshot can be reviewed first e.g. a checksum technique can be performed thereon . . . . If corruption is found in the most recent snapshot then the next previous snapshot can be evaluated etc. until a most recent uncorrupted snapshot of the page is found which can be selected at . At a log of recorded update events for the page subsequent to the snapshot but prior to a next snapshot can be traversed in a forward direction. At the selected snapshot of the page can be copied to the page location in the database. Updates can be performed on the page snapshot copy up until the corrupting event which can be determined using a checksum technique as updates are made to the snapshot at .

Concurrently while modifications to a page are being tracked and logged via the loop at corrupt data value s in a page can be detected e.g. via the checksum technique . . . . Upon such corruption detection at a most recent uncorrupt page snapshot can be identified and selected. At the non corrupt snapshot of the data page can be copied to the database at the page location of the corrupt page. At the copied snapshot can be modified according to modification information recorded in a log segment that is rolled forward from the time of the snapshot to the time of the data corruption e.g. up until a most recent uncorrupted modification . . . to facilitate restoring the data page and thus the database to an uncorrupted current up to the moment state.

Referring now to there is illustrated a block diagram of a computer operable to execute the disclosed architecture. In order to provide additional context for various aspects of the subject invention and the following discussion are intended to provide a brief general description of a suitable computing environment in which the various aspects of the subject invention can be implemented. While the invention has been described above in the general context of computer executable instructions that may run on one or more computers those skilled in the art will recognize that the invention also can be implemented in combination with other program modules and or as a combination of hardware and software.

Generally program modules include routines programs components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The illustrated aspects of the invention may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules can be located in both local and remote memory storage devices.

A computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media can comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital video disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

With reference again to there is illustrated an exemplary environment for implementing various aspects of the invention that includes a computer the computer including a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various commercially available processors. Dual microprocessors and other multi processor architectures may also be employed as the processing unit .

The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in a non volatile memory such as ROM EPROM EEPROM which BIOS contains the basic routines that help to transfer information between elements within the computer such as during start up. The RAM can also include a high speed RAM such as static RAM for caching data.

The computer further includes an internal hard disk drive HDD e.g. EIDE SATA which internal hard disk drive may also be configured for external use in a suitable chassis not shown a magnetic floppy disk drive FDD e.g. to read from or write to a removable diskette and an optical disk drive e.g. reading a CD ROM disk or to read from or write to other high capacity optical media such as the DVD . The hard disk drive magnetic disk drive and optical disk drive can be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The interface for external drive implementations includes at least one or both of Universal Serial Bus USB and IEEE 1394 interface technologies.

The drives and their associated computer readable media provide nonvolatile storage of data data structures computer executable instructions and so forth. For the computer the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer readable media above refers to a HDD a removable magnetic diskette and a removable optical media such as a CD or DVD it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as zip drives magnetic cassettes flash memory cards cartridges and the like may also be used in the exemplary operating environment and further that any such media may contain computer executable instructions for performing the methods of the subject invention.

A number of program modules can be stored in the drives and RAM including an operating system one or more application programs other program modules and program data . All or portions of the operating system applications modules and or data can also be cached in the RAM . It is appreciated that the subject invention can be implemented with various commercially available operating systems or combinations of operating systems.

A user can enter commands and information into the computer through one or more wired wireless input devices e.g. a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a stylus pen touch screen or the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port an IEEE 1394 serial port a game port a USB port an IR interface etc.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical connections via wired and or wireless communications to one or more remote computers such as a remote computer s . The remote computer s can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wired wireless connectivity to a local area network LAN and or larger networks e.g. a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communication network e.g. the Internet.

When used in a LAN networking environment the computer is connected to the local network through a wired and or wireless communication network interface or adapter . The adaptor may facilitate wired or wireless communication to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless adaptor . When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wired or wireless device is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with any wireless devices or entities operatively disposed in wireless communication e.g. a printer scanner desktop and or portable computer portable data assistant communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least Wi Fi and Bluetooth wireless technologies. Thus the communication can be a predefined structure as with conventional network or simply an ad hoc communication between at least two devices.

Wi Fi or Wireless Fidelity allows connection to the Internet from a couch at home a bed in a hotel room or a conference room at work without wires. Wi Fi is a wireless technology like a cell phone that enables such devices e.g. computers to send and receive data indoors and out anywhere within the range of a base station. Wi Fi networks use radio technologies called IEEE 802.11 a b g etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wired networks which use IEEE 802.3 or Ethernet . Wi Fi networks operate in the unlicensed 2.4 and 5 GHz radio bands at an 11 Mbps 802.11a or 54 Mbps 802.11b data rate for example or with products that contain both bands dual band so the networks can provide real world performance similar to the basic 10BaseT wired Ethernet networks used in many offices.

Referring now to there is illustrated a schematic block diagram of an exemplary computing environment in accordance with the subject invention. The system includes one or more client s . The client s can be hardware and or software e.g. threads processes computing devices . The client s can house cookie s and or associated contextual information by employing the subject invention for example. The system also includes one or more server s . The server s can also be hardware and or software e.g. threads processes computing devices . The servers can house threads to perform transformations by employing the subject invention for example. One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and or associated contextual information for example. The system includes a communication framework e.g. a global communication network such as the Internet that can be employed to facilitate communications between the client s and the server s .

Communications can be facilitated via a wired including optical fiber and or wireless technology. The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s e.g. cookie s and or associated contextual information . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

What has been described above includes examples of the subject invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the subject invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject invention are possible. Accordingly the subject invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

