---

title: System and method for propagating security information in a web portal system
abstract: In accordance with embodiments, there are provided mechanisms and methods for propagating security information for an application between a first environment and a second environment. These mechanisms and methods can enable embodiments to propagate changes to security information from a first application instance in a first environment to a second application instance in a second environment. For example, an embodiment can receive security information from an adapter associated with a test version of an application, and then propagate the security information to a production version of the application residing in a production environment. The ability of embodiments to propagate security information between adapters associated with application versions can enable propagation of changes to security information, i.e., information about changes to permissions, rules, policies and so forth relating to security, between a first environment and a second environment without necessitating taking the production version of the application off line.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752651&OS=07752651&RS=07752651
owner: BEA Systems Inc.
number: 07752651
owner_city: Redwood Shores
owner_country: US
publication_date: 20050926
---
The following commonly owned co pending United States patents and patent applications including the present application are related to each other. Each of the other patents applications are incorporated by reference herein in its entirety 

U.S. patent application Ser. No. 11 235 773 entitled SYSTEM AND METHOD FOR PROPAGATION IN A WEB PORTAL SYSTEM by Peter Laird filed on Sep. 26 2005 and

U.S. patent application Ser. No. 11 236 698 entitled SYSTEM AND METHOD FOR PROPAGATING SECURITY INFORMATION IN A WEB PORTAL SYSTEM by Peter Laird et al. filed on Sep. 26 2005.

The present invention relates generally to systems methods and computer readable media for managing portal applications. The present invention relates particularly to the propagation of security data.

Since its inception in 1995 the Java programming language Java is a registered trademark of Sun Microsystems Inc. has become increasingly popular. Java which is an interpreted language enabled the creation of applications that could be run on a wide variety of platforms i.e. so called platform independent applications. This ability to function across a variety of different client platforms and Java s relatively easy implementation of network applications has resulted in its use in endeavors as basic as personal webpages to endeavors as complex as large business to business enterprise systems.

As Java has become more commonplace a wide variety of tools and development platforms have been created to assist developers in the creation and implementation of platform independent applications using Java or other languages that support platform independent applications. One such type of platform independent application is the web portal. A web portal is a World Wide Web site whose purpose is to be a starting point for a wide variety of users when these users connect to the Web.

As with other types of applications there is a need to perform backup and propagation of portal applications. Often a developer will wish to modify an application in a development and testing environment first before propagating the changes to a version of the application that is part of a working portal i.e. the working setting or production environment. After testing the modified application in the testing environment the developer then passes the changes to the version of the application in the working setting.

However migration of portal applications can be difficult. Portal applications may be difficult to configure and often store relevant data in a variety of difficult to identify locations. This makes the task of accurately propagating the changes to the version of the application in the working setting highly unreliable and time consuming.

What is needed is an improved mechanism for propagating portal applications that allows for the easier transferal of security information associated with web portal systems.

The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment and such references mean at least one. While specific implementations are discussed it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.

In the following description numerous specific details are set forth to provide a thorough description of the invention. However it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail so as not to obscure the invention.

Although a diagram may depict components as logically separate such depiction is merely for illustrative purposes. It can be apparent to those skilled in the art that the components portrayed can be combined or divided into separate software firmware and or hardware components. For example one or more of the embodiments described herein can be implemented in a network accessible device appliance such as a router. Furthermore it can also be apparent to those skilled in the art that such components regardless of how they are combined or divided can execute on the same computing device or can be distributed among different computing devices connected by one or more networks or other suitable communication means.

In accordance with embodiments there are provided mechanisms and methods for propagating security information for an application between a first environment and a second environment. These mechanisms and methods can enable embodiments to propagate changes to security information from a first application instance in a first environment to a second application instance in a second environment. For example an embodiment can receive security information from an adapter associated with a test version of an application and then propagate the security information to a production version of the application residing in a production environment. The ability of embodiments to propagate security information between adapters associated with application versions can enable propagation of changes to security information i.e. information about changes to permissions rules policies and so forth relating to security between a first environment and a second environment without necessitating taking the production version of the application off line.

In an embodiment a method for propagating security information for an application between a first environment and a second environment is provided. The method includes receiving a set of security information to be applied to the second version of the application residing in a second environment. The set of security information includes changes made to security parameters which include without limitation policies or constraints for defining a role and security entitlements security provider configuration information attributes used in defining user roles such as user profile attributes request and session attributes. In an embodiment the changes made to the security parameters of the first version of the application can be propagated to the second version of the application. The security information may be made received of an adapter associated with the source i.e. first environment application. The changes are applied to the second version of the application in the second environment. The changes are received from and written to a security adapter for propagation to data structures specific to the application.

In another embodiment the method for propagating security information includes receiving the set of changes made to the first version of the application from a security adapter associated with the first version of the application. The security adapter is configured to translate security parameters from data structures specific to the first version of the application into a common language format. In an embodiment the common language format includes extended markup language XML .

In another embodiment the method for propagating security information includes applying the set of changes to the second version of the application by writing the set of changes to a security adapter associated with the second version of the application. The security adapter is configured to translate security parameters from the common language format into data structures specific to the second version of the application. In an embodiment the common language format includes extended markup language.

As used herein the term application is intended to be broadly construed to include any data entry update query or program that processes data on behalf of a user including without limitation network based applications web based server resident applications web portals search engines photographic audio or video information storage applications e Commerce applications backup or other storage applications sales revenue planning marketing forecasting accounting inventory management applications and other business applications. Users may be human or computational entities. As used herein the term environment is intended to be broadly construed to include a set of any characteristics of a computer configuration including hardware and software characteristics such as without limitation operating system Central Processor Unit CPU model data communications systems database systems programming languages and any applicable standards.

In an example configuration illustrated by the applications are portal applications stored in the source environment that perform various services and functions in association with a central portal. As used herein a central portal is the portal application being exposed to users and or the portal application that manages or directs the activities of other portals and or portal applications. One or more adapters provide interfaces and specific functionality to tools and other applications that operate in conjunction with for applications . Each one of adapters is responsible for import export of a certain kind of data content security portal in a common language format which in one embodiment is extended Markup Language XML format. The adapters relate native data structures within the applications to XML. The produced XML can be propagated by a tool or other application. In an embodiment one or more of adapters may comprise security information that the adapter produces as XML to be propagated by a tool or application. Such an adapter may be referred to as a security adapter .

One such tool for propagating the information provided by the adapters is the propagation tool which enables propagation of applications and changes to applications from the source environment to the destination environment . In one embodiment the propagation tool copies an entire application from the source environment to the destination environment to generate one of the applications stored in the destination environment. In an alternate embodiment the propagation tool working in conjunction with adapters compares an application in the source environment to a corresponding application in the destination environment determines the differences between the two applications and modifies the application in the destination environment to match the application in the source environment . If the propagation tool detects any unresolved ordering while applying changes to application propagated from application the propagation tool may inquire of adapter for a suggested ordering of the application of changes to be made. Adapter may provide a suggested ordering by comparing the differences between the two applications with a configuration stored an internally in one embodiment as a tree. In one embodiment the propagation tool may track which changes succeeded and which changes failed. In the event that some changes failed the propagation tool can request that the adapter provide a new suggested ordering request a suggested ordering from an administrator or take other actions such as applying one or more rules heuristics or randomized selection mechanisms to arrive at a new suggested ordering. The propagation tool may retry the above processing any number of times until success is achieved.

A backup tool is configured to generate backups of portal applications. In some embodiments when restoring from a backup the backup tool compares a current application to an existing backup and modifies those aspects of the current application that differ from those of the backup. When generating a backup the backup tool can perform the reverse function and modify those aspects of an existing backup that differ from a current application. In an embodiment backup tool may also work with an adapter not shown in .

In some embodiments the backup and propagation tools operate through a client server model with the tools using source data on a client to modify destination data on the server. These tools can store inventory data configuration differences and proposed configuration changes as XML files. The backup tools can be invoked from a user interface such as a Graphical User Interface GUI or a script. While in the embodiments illustrated herein the user interface is a GUI in alternate embodiments any number of interfaces including text interfaces voice interfaces touch screens or any other type of interface can be used.

The external data sources are data sources outside the application that are used to configure or otherwise support the application. While illustrates the external data sources as being within the application in some embodiments they are associated with the application but located outside of the application. The XML files are files storing data and configuration information for the application. The datasync data is data that has been generated by or stored for a runtime configuration utility. The internal LDAP stores security values indicating who is able to access resources associated with the application . In an embodiment such security values may also be stored in a database such as a relational database and managed by a relational database management system RDBMS . The CM includes graphics and rendering information that is displayed in association with the portal application.

The portal APIs are used to access and manipulate the various inventory data sources . In some cases the portal APIs are utilized by the inventory services but primarily they are utilized during the normal creation and utilization of the application .

The inventory services layer is configured to receive requests from the propagation tool and backup tool . These requests take the form of requests to retrieve inventory data stored in the various inventory data sources and requests to modify the inventory data stored in the various inventory data services. The inventory services layer abstracts all of the data access to the sources below it so that the propagation tool only needs to submit a request for certain data and the inventory services layer locates and either provides or modifies the data.

The inventory services layer performs a certain number of information retrieval services. These services include a listing service that indicates all of the subcategories within a particular category such as all the portlets defined for a particular web application. The services further include a dependency service that indicates what elements are needed to run a particular application such as which portlets are associated with particular pages or portals. It additionally includes an identity function that can provide previous names for particular data values. In addition to the functions above that retrieve particular pieces of data the inventory services layer also includes update services that can delete modify or create inventory data. While the above services are discussed for illustrative purposes the inventory services layer can be configured to perform any number of retrieval or updating services.

The propagation tool includes a number of Inventory Services Consumers ISCs that are configured to communicate with adapters which in turn provide access to the inventory services layers of the source and destination applications. These consumers are configured to perform the varying inventory retrieval and update services discussed with respect to . The adapters are the primary mechanism by which the propagation tool interacts with the applications .

Two ISCs gather inventory data from the applications through the inventory services layers and store the information in the inventory archives . While in one embodiment this inventory data is selected from the inventory sources described in in alternate embodiments other data sources may be utilized as well. The first ISC develops a snapshot of all of the inventory data in the source application and stores the data in an XML file in the archives . The second ISC generates a similar snapshot of all of the data stored in the destination application and similarly stores the information in the archives .

An inventory difference engine reads the XML data stored in the archives compares the source and destination inventory data gathered by the ISCs and determines the differences between the two applications. In some embodiments the archives also store historical data about the state of the two applications throughout different points in time and the inventory difference engine utilizes this information to determine the differences between the two applications .

These differences can be viewed through a change election user interface . The change election user interface provides a graphical listing of some or all differences between the two applications. The differences can be organized according to types of information sources of information or any other system of organization.

The change election user interface can then be utilized to select which inventory data in the source application should be propagated to the destination application . In one embodiment a user can manually select through the user interface which differences will modified or which configuration values that are in the source application should be propagated to the destination application .

In an alternate embodiment a user can designate preselected rules which indicate which differences should be propagated from the source application to the destination application and which changes should be ignored.

A resolver allows the designation of post processing changes to be performed on various pieces of inventory data once the data is on the destination server. For example an administrator adding a portlet to a desktop page in staging could set a rule that any visitor customized view of the page should updated to view the new portlet. A transform engine can designate changes that should be performed on inventory data as it is transferred to a new environment.

The changes that are selected are then stored in a change manifest.xml file by a first change manifest persistor . While in the present embodiment the changes are stored in an XML file in alternate embodiments any number of file formats can be used.

The propagation tool user interface allows a user to invoke a propagation request. A second change manifest persistor reads all of the changes stored in the change manifest and passes them to a third ISC . The third ISC updates the relevant inventory data in the application through its inventory services . At this point any requested changes have been propagated from the source application to the destination application.

If an unresolved ordering is detected while applying changes during propagation of the set of changes to the second version of the application an inquiry is made of the destination environment adapter for a suggested ordering. The changes are applied to the destination environment according to the suggested ordering when a suggested ordering is received. In the event that applying the changes according to the suggested ordering fails to provide a successful outcome then another suggested ordering can be requested and tried or an administrator may be prompted for a suggested ordering.

In an embodiment security information can be propagated along with the application from the source environment to the destination environment . In an embodiment an adapter associated with the first version application in the source environment produces XML encoded security information which typically includes changes to security parameters to be propagated to the second version of the application in the destination environment by a tool or application. The propagation tool or other application can apply the security information to a second adapter associated with the second version of the application in the destination environment. The second adapter translates the XML encoded security information into data in data structures appropriate to the second version of the application. In such modes of operation the adapters may be referred to as security adapters . This processing is described in further detail below with reference to .

In some embodiments the XIP tool can provide one or more of the following features Security through logins and permissions based on identity a Command Line Interface a Policy based Merge updates deletes moves an ability to Preserves User Customizations an ability to Utilizes Portal API s in order to preserve Referential and Data Model Integrity an ability to Consume and Produce ordinary Workshop files in order to move assets between a workshop environment to a staging environment an ability to use public API s to provide extensibility an ability to perform Scoped Import Library Admin User and Selective Import desktop book page .

Other features aspects and objects of the invention can be obtained from a review of the figures and the claims. It is to be understood that other embodiments of the invention can be developed and fall within the spirit and scope of the invention and claims.

The foregoing description of preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obviously many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.

In addition to an embodiment consisting of specifically designed integrated circuits or other electronics the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure as will be apparent to those skilled in the computer art.

Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art.

The present invention includes a computer program product which is a storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs microdrive and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

Stored on any one of the computer readable medium media the present invention includes software for controlling both the hardware of the general purpose specialized computer or microprocessor and for enabling the computer or microprocessor to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include but is not limited to device drivers operating systems and user applications.

Included in the programming software of the general specialized computer or microprocessor are software modules for implementing the teachings of the present invention.

