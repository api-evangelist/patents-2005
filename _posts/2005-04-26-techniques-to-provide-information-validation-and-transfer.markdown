---

title: Techniques to provide information validation and transfer
abstract: Techniques to issue a single application programming interface (API) to request both data copy and CRC validation operations. In some embodiments, a receiver of the API may observe which logic (e.g., software or hardware and/or combinations of software and hardware) is available to execute instructions for data copy and CRC validation operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454667&OS=07454667&RS=07454667
owner: Intel Corporation
number: 07454667
owner_city: Santa Clara
owner_country: US
publication_date: 20050426
---
Some computers that receive traffic from a network utilize the Internet Small Computer System Interface iSCSI protocol. Some implementations of iSCSI e.g. those implemented in Linux or Microsoft Windows request data transfer from a network buffer to the iSCSI destination buffer and then issue a request to validate cyclical redundancy checking CRC over data in the destination buffers. In some cases a stack layer such as a TCP IP processing stack requests a transfer of data from the network buffer to the destination buffer and separately the iSCSI layer performs a CRC validation on the transferred data or requests a validation CRC on the transferred data . A kernel sockets layer may be used to separate the iSCSI layer from the stack layer and communicatively link the iSCSI layer with the stack layer.

Note that use of the same reference numbers in different figures indicates the same or like elements.

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of the phrase in one embodiment or an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in one or more embodiments.

Host system may include chipset processor host memory and storage . Chipset may provide intercommunication among processor host memory storage bus as well as a graphics adapter that can be used for transmission of graphics and information for display on a display device both not depicted . For example chipset may include a storage adapter not depicted capable of providing intercommunication with storage . For example the storage adapter may be capable of communicating with storage in conformance with any of the following protocols Small Computer Systems Interface SCSI Fibre Channel FC and or Serial Advanced Technology Attachment S ATA .

In some embodiments chipset may include a direct memory access DMA engine to perform direct memory accesses of information from and into host memory and or host storage of host system.

Processor may be implemented as Complex Instruction Set Computer CISC or Reduced Instruction Set Computer RISC processors multi core or any other microprocessor or central processing unit.

Host memory may be implemented as a volatile memory device such as but not limited to a Random Access Memory RAM Dynamic Random Access Memory DRAM or Static RAM SRAM .

Storage may be implemented as a non volatile storage device such as but not limited to a magnetic disk drive optical disk drive tape drive an internal storage device an attached storage device and or a network accessible storage device.

Bus may provide intercommunication among at least host system and network interface as well as other peripheral devices. Bus may support serial or parallel communications. Bus may support node to node or node to multi node communications. Bus may be compatible with Peripheral Component Interconnect PCI described for example at Peripheral Component Interconnect PCI Local Bus Specification Revision 2.2 Dec. 18 1998 available from the PCI Special Interest Group Portland Oreg. U.S.A. as well as revisions thereof PCI Express described in The PCI Express Base Specification of the PCI Special Interest Group Revision 1.0a as well as revisions thereof PCI x described in the PCI X Specification Rev. 1.0a Jul. 24 2000 available from the aforesaid PCI Special Interest Group Portland Oreg. U.S.A. as well as revisions thereof and or Universal Serial Bus USB and related standards as well as other interconnection standards.

Network interface may be capable of providing intercommunication between host system and network in compliance with protocols supported by network . Network interface may intercommunicate with host system using bus . In one embodiment network interface may be integrated into chipset .

Network may be any network such as the Internet an intranet a local area network LAN storage area network SAN a wide area network WAN or wireless network. Network may exchange traffic with network interface using the Ethernet standard described in IEEE 802.3 and related standards or any communications standard.

Some embodiments of OS may include at least an Internet Small Computer System Interface iSCSI stack capable of performing processing and encoding in accordance with iSCSI standards a kernel sockets layer to provide communication at least of application programming interfaces APIs between the iSCSI stack and stack layer . For example iSCSI is described at least in IP Storage Working Group Internet Draft RFC 3720 entitled Internet Small Computer Systems Interface iSCSI April 2004 . For example suitable embodiments of OS include but are not limited to operating systems compatible with Linux or Microsoft Windows .

Stack may process packets to at least determine TCP IP compliance in accordance with TCP IP standards. For example the TCP IP protocol is described at least in the publication entitled Transmission Control Protocol DARPA Internet Program Protocol Specification prepared for the Defense Advanced Projects Research Agency RFC 793 published September 1981 .

In some embodiments of the present invention an iSCSI layer may provide a single application programming interface API request to stack to request both data copy and CRC validation operations. The single API request may specify copy and CRC of multiple datum. For example datum may include packets received from a network and or other types of information. In some embodiments stack may observe which logic e.g. software or hardware and or combinations of software and hardware is available to execute commands for data copy and CRC validation operations. The term logic may include by way of example software or hardware and or combinations of software and hardware. In some embodiments stack may issue the requests for data copy and CRC validation operations based on the computing resources available in response to the single API request for both data copy and CRC validation operations. In some embodiments a DMA engine is available for use at least for data transfers whereas in some embodiments a CPU is used to copy data. For example in some embodiments a DMA engine can perform CRC validation operations whereas in some embodiments instructions executed by a CPU are used to perform CRC validation operations. In some embodiments a DMA engine may buffer data and perform CRC validation on the buffered data. The API may permit the iSCSI layer to be independent of the utilized operating system and platform and yet receive the most efficient performance of copy and CRC from the platform that is available.

In some embodiments the kernel sockets layer of OS may be at least modified to permit transfer of portions of the API request that requests combined data copy and CRC validation operations.

In some embodiments stack may be integrated into OS . In such embodiments stack may be modified to carry out an API requesting data copy and CRC validation operations. In such embodiments stack may be modified to permit the stack to observe what logic is available to carry out data copy and CRC validation operations.

Accordingly although not necessary features of any embodiment acceleration of operations specified in the iSCSI protocol may be provided while preserving the common operating system imposed boundaries between iSCSI and stack layer i.e. the kernel sockets layer . Preserving the interface boundary may permit the stack to flexibly administer data copy and CRC validation operations below the interface boundary based on the logic available.

Device driver may be a device driver for network interface . Device driver may at least coordinate the transfer of data between host system and network interface.

Source buffer may store data to be transferred to destination buffer . For example source buffer may store data received from a network. For example under iSCSI destination buffer may implement a file system buffer.

Applications can be one or more machine executable programs that may utilize data at least received from or transferred to a network. An application may include but not be limited to for example a web browser input output filter an e mail serving application a file serving application or a database application.

In some embodiments data may include markers described at least by iSCSI or other regions and CRC validation operations are not to be performed on the markers or other regions. For example markers may be used to specify frame boundaries and can be used in case packets are lost or corrupted and to deliver data for use. The API may determine locations of markers by an offset to the first marker the size of each marker and interval between markers. For example in one embodiment if markers are present in the data to be copied then a CRC is not performed over the markers. In some embodiments if markers are not present in the data to be copied then CRC list may be the same as the copy list.

In item iSCSI layer issues a combined copy and CRC API request to stack in accordance with an embodiment of the present invention. The combined copy and CRC API request may specify copy and CRC of multiple packets. For example the combined copy and CRC API may be implemented using the getBufferListWithCRC API. For example the combined copy and CRC API request may specify that a copy and CRC validation of data in a source buffer is to take place.

In item in part in response to the combined copy and CRC API request stack may request a CRC validation operation to CRC validation operation logic. The CRC validation operation is to take place on data stored in the source buffer and to be transferred to destination buffer in item . For example CRC validation operation logic may be integrated into stack and accessible by issuing a function call. In other implementations the CRC validation operation logic may be available as a separate element.

In item A in part in response to a CRC validation operation request from item CRC validation operation logic may issue a request to access data from source buffer on which to perform a CRC validation. For example the data may be specified by the combined copy and CRC API request.

In item A in part in response to item A the requested data is transferred from source buffer into cache shown as cached copy of source buffer .

In item A a CRC validation operation is performed on the data stored in cache shown as cached copy of source buffer .

In item B stack issues a request to prefetch data from the destination buffer for storage into cache . The prefetched data may be a portion of destination buffer to be overwritten by data to be transferred from source buffer to destination buffer in part in response to the combined copy and CRC API request. In item B in part in response to the request to prefetch data in item B cache may retrieve requested data for prefetch from the destination buffer the retrieved data shown as cached copy of destination buffer .

In one embodiment items A and B may overlap in time or occur at approximately the same time. In one embodiment item B may overlap in time or occur at substantially the same time as item A and or A .

In item the data of the cached copy of source buffer in cache is transferred from the cached copy of source buffer into the cached copy of destination buffer. For example the cached copy of source buffer is transferred to overwrite the cached copy of the destination buffer. In item later in time for example whenever destination buffer is to be cleared from cache cached copy of destination buffer is copied into destination buffer to complete the data copy operation requested in combined copy and CRC API request from item .

In item A an indication of copy and CRC success fail is provided to the iSCSI layer in part in response to completion of both copy i.e. item and CRC validation i.e. item A operations. For example the indication of copy and CRC success fail may be provided to the iSCSI layer in response to completion of actions requested by the API request in item . For example the indication of copy and CRC success fail to the iSCSI layer may indicate a success when successful copy and CRC validations occurred for all packets identified in the API request issued in item whereas a failure may be indicated when a failure occurred for any copy or CRC requested. The indication of failure may further indicate which operation e.g. copy or CRC failed and for what packet.

In item iSCSI layer issues a combined copy and CRC API request to stack to request a copy and CRC validation of packets and . In this example packet is scheduled to be copied and CRC validated after copy and CRC validation of packet . For example the combined copy and CRC API may be implemented using the getBufferListWithCRC API. does not depict transfer of packet from source buffer to destination buffer using DMA engine . Transfer of packet may have taken place in response to the API request issued in item .

In item stack issues a packet transfer request to DMA engine to transfer packet from source buffer to destination buffer . In part in response to the request to transfer packet in item DMA engine retrieves packet from source buffer and in item DMA engine stores packet into destination buffer . For example packet may be a packet on which a data transfer and CRC validation is to take place after a CRC validation of packet .

In item stack requests a CRC validation operation on packet stored in cache . For example the CRC validation operation may be available to stack . In item packet stored in destination buffer is transferred into cache in part in response to a commencement of a CRC validation operation. For example in item the CPU that executes the CRC validation operation may request transfer of packet into cache . In item CRC validation of packet may take place. CRC validation of packet is not depicted. In item stack may provide an indication of copy and CRC success fail to iSCSI layer in response to the completion of both copy and CRC validation operations for packets and . For example the indication of copy and CRC success fail may be provided to the iSCSI layer in response to completion of actions requested by the API request in item . For example the indication of copy and CRC success fail to the iSCSI layer may indicate a success when successful copy and CRC validations occurred for packets and whereas a failure may be indicated when a failure occurred for any copy or CRC requested. The indication of failure may further indicate which operation e.g. copy or CRC failed and for what packet.

For example the API request issued in item could be extended to request copy and CRC of a packet in addition to copy and CRC validation of packets and . In such case packet may be transferred from source buffer to destination buffer by DMA engine at least overlapping in time with CRC validation of packet .

In item iSCSI layer issues a combined copy and CRC API request to stack to request a copy and CRC validation in accordance with an embodiment of the present invention. The combined copy and CRC API request may specify copy and CRC of multiple packets. For example the combined copy and CRC API may be implemented using the getBufferListWithCRC API. For example the combined copy and CRC API request may specify that a transfer and CRC validation of packet is to take place. Packet may be stored in source buffer .

In item stack may request a copy operation to DMA engine . For example item may include a CPU that executes stack issuing a data transfer request to DMA engine . In item stack may request a CRC validation operation take place by DMA engine of data requested to be transferred in item .

In item in part in response to the request in item DMA engine may request transfer of packet from source buffer and in item DMA engine may request storage of packet into destination buffer .

In item in part in response to the request in item DMA engine may request packet from source buffer . In item in part in response to the request in item DMA engine may perform a CRC validation operation on packet . In item DMA engine may indicate copy and CRC success fail to stack in response to completion of copy and CRC operations. In item stack may indicate copy and CRC success fail to iSCSI layer in response to the indication of copy and CRC success fail received by stack . For example the indication of copy and CRC success fail may be provided to the iSCSI layer in response to completion of actions requested by the API request in item . The indication of copy and CRC success fail to the iSCSI layer may indicate a success when successful copy and CRC validations occurred for all packets identified in the API request issued in item whereas a failure may be indicated when a failure occurred for any copy or CRC requested. The indication of failure may further indicate which operation e.g. copy or CRC failed and for which packet s .

In item in part in response to the request in item DMA engine requests transfer of packet from source buffer . In item DMA engine stores packet into a buffer accessible by DMA engine . In item DMA engine may transfer packet into destination buffer for storage. Items and may implement the requested copy operation.

In item in part in response to the request in item DMA engine may perform a CRC validation on the buffered packet . Item may implement the CRC operation. In item DMA engine may indicate copy and CRC success fail to stack in response to completion of copy and CRC operations. In item stack may indicate copy and CRC success fail to iSCSI layer in response to the indication of copy and CRC success fail received by stack . For example the indication of copy and CRC success fail may be provided to the iSCSI layer in response to completion of actions requested by the API request in item . The indication of copy and CRC success fail to the iSCSI layer may indicate a success when successful copy and CRC validations occurred for all packets identified in the API request issued in item whereas a failure may be indicated when a failure occurred for any copy or CRC requested. The indication of failure may further indicate which operation e.g. copy or CRC failed and for which packet s .

In block process may issue a single API request for data copy and CRC validation. For example an iSCSI layer may issue the single API request for data transfer and CRC validation. The combined copy and CRC API request may specify copy and CRC of multiple datums. In block process may determine which computing resource is available for data copy and for CRC validation.

In block process may issue one or more commands to execute data copy and CRC validation based in part on the available computing environment. For example a TCP stack layer may observe which device software or logic is available to execute commands for data transfer and CRC validation operations. In some embodiments a DMA engine is available for use at least for data transfers whereas in some embodiments a CPU is used to transfer data. For example in some embodiments a DMA engine can perform CRC validation operations whereas in some embodiments instructions executed by a CPU are used to perform CRC validation operations. In some embodiment a DMA engine may buffer data and perform CRC validation on the buffered data.

Embodiments of the present invention may be implemented as any or a combination of microchips or integrated circuits interconnected using a motherboard hardwired logic software stored by a memory device and executed by a microprocessor firmware an application specific integrated circuit ASIC and or a field programmable gate array FPGA .

The drawings and the forgoing description gave examples of the present invention. Although depicted as a number of disparate functional items those skilled in the art will appreciate that one or more of such elements may well be combined into single functional elements. Alternatively certain elements may be split into multiple functional elements. Elements from one embodiment may be added to another embodiment. For example orders of processes described herein may be changed and are not limited to the manner described herein. The scope of the present invention however is by no means limited by these specific examples. Numerous variations whether explicitly given in the specification or not such as differences in structure dimension and use of material are possible. The scope of the invention is at least as broad as given by the following claims.

