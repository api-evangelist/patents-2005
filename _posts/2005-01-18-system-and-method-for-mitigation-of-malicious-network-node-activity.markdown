---

title: System and method for mitigation of malicious network node activity
abstract: Malicious network node activity and, in particular, denial of service attacks, may be mitigated by one or more practical mitigation mechanisms and mitigation mechanism combinations. Suitable protocol messages may be challenged with a challenge probe. A response to the challenge probe may be utilized to determine if received protocol messages are illegitimate, that is, originated by a malicious network node. Received protocol messages may be classified as questionable protocol messages. For efficiency, protocol message challenges may be limited to protocol message classified as questionable. A sequence number limit may be calculated as a function of receive window size. Transmission control protocol messages may be determined to be illegitimate by comparing the acknowledgement number field with the calculated sequence number limit. Randomized selection of source port numbers for transmission control protocol connections may also mitigate malicious network node activity by resulting in legitimate protocol message field values that are less predictable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640338&OS=07640338&RS=07640338
owner: Microsoft Corporation
number: 07640338
owner_city: Redmond
owner_country: US
publication_date: 20050118
---
This invention pertains generally to computer networks and more particularly to computer networks in which some network nodes may be malicious.

The demand for digital communication services has resulted in unprecedented data network growth. Network growth has occurred both in terms of the number of nodes i.e. the number of network connected computing devices as well as the amount of communications traffic between those nodes. This network growth has been supported by increased node computing power as well as the advent of broadband data transport hardware an orders of magnitude quantitative change that has in many respects resulted in a new network environment.

At the same time the standardized data communication protocols that launched the data network revolution have remained relatively static. For example transmission control protocols in compliance with Postel J. Transmission Control Protocol DARPA Internet Program Protocol Specification RFC 793 USC Information Sciences Institute published September 1981 and internet protocols in compliance with Postel J. Internet Protocol RFC 791 USC Information Sciences Institute published September 1981 i.e. TCP IP are still involved in directing much of today s data network traffic. This gap between some of the communication protocols in use and other aspects of the modern network environment may be exploited by another modern network trend an increasing number and variety of malicious network nodes.

New protocols such as secure sockets layer SSL and IP security protocol IPsec have been developed that are resistant to some forms of attack by malicious nodes. However such new protocols are only of benefit when they are actually employed. The majority of network traffic is still sent in the clear using older network protocols and is still vulnerable to attack. A type of attack that is generally difficult for older protocols to defend against is a denial of service DoS attack and more particularly a denial of service attack that involves an attacker mimicking or spoofing protocol messages from legitimate network nodes.

Legitimate protocol messages have parameters with values in particular ranges. Although an attacker may have limited information with regard to valid parameter values for a particular connection the attacker may raise their chance of mimicking a legitimate protocol message by sending large numbers of messages with varying parameter values. While this chance of mimicking may have been an acceptably remote possibility in the past in the new network environment the chance of successfully mimicking may rise to unacceptably high levels.

Beyond causing service degradation by simple flooding attackers that successfully mimic legitimate protocol messages can interrupt an active connection for example by mimicking a legitimate connection reset message and may even inject trojan data into an active transmission thus compromising its integrity and once again possibly resulting in a denial of service. There is a need to incorporate mitigation mechanisms for these types of denial of service attacks into older protocols. Minimizing the protocol impact of mitigation mechanisms is desirable because even small performance changes may be significant at the network level for a widely used protocol. For example an increase in protocol message size may result in a loss of scalability. In addition mitigation mechanisms should be tolerant of the imperfections of practical network environments such as unpredictable node and connection failures as well as network nodes running protocol stacks that do not entirely comply with protocol standards.

This section presents a simplified summary of some embodiments of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some embodiments of the invention in a simplified form as a prelude to the more detailed description that is presented later.

In an embodiment of the invention malicious network node activity is mitigated by computer executable instructions stored on a computer readable medium. It may be determined that a received protocol message is a questionable protocol message. A challenge probe may be sent and a response to the challenge probe received. It may be determined that the protocol message is an illegitimate protocol message e.g. a protocol message originated by a malicious network node . The illegitimacy determination may be a function of one or more of the response field values for example a message type field value.

In an embodiment of the invention malicious network node activity is mitigated independent of challenge probes. A received transmission control protocol TCP message may include a sequence number field and an acknowledgement number field. A sequence number limit may be calculated as a function of a receive window size. It may be determined that the protocol message is an illegitimate protocol message by comparing the acknowledgement number field of the protocol message and the sequence number limit. The protocol message may be a bad message i.e. an illegitimate message if its acknowledgement number field value is less than the calculated sequence number limit.

In an embodiment of the invention malicious network node activity is mitigated with judicious selection of TCP source port numbers. A valid range of TCP source port numbers may be determined and a source port number randomly selected from the valid range of source port numbers. A TCP synchronize SYN message may be instantiated and a source port field value of the SYN message set to the selected source port number.

Prior to proceeding with a description of the various embodiments of the invention a description of a computer in which the various embodiments of the invention may be practiced is now provided. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally programs include routines objects components data structures and the like that perform particular tasks or implement particular abstract data types. The term program as used herein may connote a single program module or multiple program modules acting in concert. The terms computer and computing device as used herein include any device that electronically executes one or more programs such as personal computers PCs hand held devices multi processor systems microprocessor based programmable consumer electronics network PCs minicomputers tablet PCs laptop computers consumer appliances having a microprocessor or microcontroller routers gateways hubs and the like. The invention may also be employed in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment programs may be located in both local and remote memory storage devices.

Referring to an example of a basic configuration for the computer on which aspects of the invention described herein may be implemented is shown. In its most basic configuration the computer typically includes at least one processing unit and memory . The processing unit executes instructions to carry out tasks in accordance with various embodiments of the invention. In carrying out such tasks the processing unit may transmit electronic signals to other parts of the computer and to devices outside of the computer to cause some result. Depending on the exact configuration and type of the computer the memory may be volatile such as RAM non volatile such as ROM or flash memory or some combination of the two. This most basic configuration is illustrated in by dashed line .

The computer may also have additional features functionality. For example computer may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information including computer executable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to stored the desired information and which can be accessed by the computer . Any such computer storage media may be part of computer .

The computer preferably also contains communications connections that allow the device to communicate with other devices such as remote computer s . A communication connection is an example of a communication medium. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. By way of example and not limitation the term communication media includes wireless media such as acoustic RF infrared and other wireless media. The term computer readable medium as used herein includes both computer storage media and communication media.

The computer may also have input devices such as a keyboard keypad mouse pen voice input device touch input device etc. Output devices such as a display speakers a printer etc. may also be included. All these devices are well known in the art and need not be described at length here.

An example of a computer networking environment suitable for incorporating aspects of the invention is described with reference to . The example computer networking environment includes several computers and communicating with one another over a network represented by a cloud. Network may include many well known components such as routers gateways hubs etc. and allows the computers and to communicate via wired and or wireless media. When interacting with one another over the network one or more of the computers and may act as clients servers or peers with respect to other computers and . Accordingly the various embodiments of the invention may be practiced on clients servers peers or combinations thereof even though specific examples contained herein may not refer to all of these types of computers.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computing devices unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operations described hereinafter may also be implemented in hardware.

For clarity in what follows the description will focus on mitigation of attacks against a transmission control protocol TCP in at least partial compliance with RFC however it will be apparent to one of skill in the art that the techniques and mechanisms described may be utilized to mitigate attacks against any suitable communication protocol. First architectural context is provided and relevant details are highlighted.

In a manner well known in the art the TCP layer may pass TCP data packets to an internet protocol IP layer . The IP layer may add to the TCP data packet so that it becomes a TCP IP data packet. The TCP IP data packet may then be passed to a network hardware driver with another API such as a network driver interface specification NDIS and ultimately onto network hardware such as a network interface card NIC and the network . Each of the computers and may include the components of the architecture .

It will be helpful to highlight aspects of the TCP IP data packet. shows a schematic diagram of a TCP IP data packet . For the purposes of this description the TCP IP data packet may be divided into three main sections an IP header a TCP header and a payload . The IP header includes a source IP address and a destination IP address . The shaded portion of the IP header includes additional IP header fields. The IP header fields may be formatted and have functions in compliance with RFC 791. For example each of the IP addresses and may be 32 bit fields.

The TCP header includes a source port number a destination port number a sequence number an acknowledgement number and a TCP message type . The shaded portion of the TCP header may include additional TCP header fields. The TCP header fields may be formatted and have functions in compliance with RFC 793. For example each of the port numbers and may be 16 bit numbers each of the sequence numbers and may be 32 bit numbers and the TCP message type may be a set of TCP message type flags including ACK RST SYN and FIN flags. The value of the TCP message type flags may determine the type s of the TCP message carried by the data packet . For example the TCP message may be an acknowledgement message if the ACK flag is set a reset message if the RST flag is set a synchronize message if the SYN flag is set and so on. Combinations of flags may be set in accordance with RFC 793. For the purposes of this description the payload may be considered to be a single opaque data field . Each data field of the data packet may have one or more values.

Communication connections between computers e.g. computers and of may be implemented at least in part by exchanging TCP IP data packets such as the data packet . In order to provide for reliable data delivery over potentially unreliable transmission media TCP includes a number of protocol phases including a connect phase an established connection phase and a disconnect phase. depicts example TCP exchanges between the computers and during each phase.

During a connect phase the computer may indicate a desire to establish a communication connection with the computer by sending a SYN message to the computer . If the computer is accepting new connections it may reply to the computer with a SYN ACK message . An ACK message from the computer to the computer may complete the connect phase and transition the protocol to an established connection phase .

In the established connection phase the computer may send data packets such as DATA packet to the computer . Each sent data packet may be acknowledged by an acknowledgement message for example the DATA packet is acknowledged by the DATA ACK message . Each of the DATA packet and the DATA ACK message may have the ACK flag of the TCP message type set in accordance with RFC 793. The DATA packet and the DATA ACK message are labeled differently in to emphasize that the DATA packet is acknowledging the DATA packet . The established connection is full duplex. As a result the computer may also send data packets to the computer and receive corresponding acknowledgement messages in return although this is not shown explicitly in .

The established communication connection utilizes resources at each participating computer and . When the communication connection is no longer required the resources are freed by ending the connection. The protocol may transition to a disconnect phase by sending a FIN message . shows the FIN message being sent from the computer to the computer but the FIN message may be sent by the computer to the computer . In reply to the FIN message the computer may send a FIN ACK message to the computer and then an ACK message from the computer to the computer terminates the connection ending the disconnect phase . Again each of the FIN message and the FIN ACK message may have the ACK flag of the TCP message type set in accordance with RFC 793. The FIN message and the FIN ACK message are labeled differently in to emphasize that the FIN ACK message is acknowledging the FIN message .

The exchange of the disconnect phase is known as a graceful connection termination because the state of the communication connection at each computer and may be well determined during each step of the exchange. Abortive connection terminations are also possible. If the computer sends a RST message to the computer the message is an indication to the computer that the computer considers the communication connection terminated and has freed the resources associated with the connection. If the computer does not receive the RST message then the computer may consider the communication connection active even though the computer does not. Although not shown in the computer may also unilaterally terminate the communication connection by sending a RST message to computer .

Many data packets such as the data packet may arrive at the computer . If the destination IP address of the data packet matches the IP address of the computer the data packet may be delivered to the IP layer component of the computer . At the TCP layer a particular communication connection may be identified by a tuple including the source IP address the destination IP address the source port number and the destination port number . A condition of a particular data packet being associated with a particular communication connection by the TCP layer may include that the fields of the data packet match the tuple identifying the communication connection. In addition the communication connection may be in one of a number of states requiring that further of the fields of the data packet e.g. the sequence number the acknowledgement number and or the TCP message type have values within certain ranges for example as specified by RFC 793 in order for the data packet to be accepted by the communication connection.

Malicious nodes attempting to mimic legitimate TCP IP messages may attempt to fill the fields of the data packet with values corresponding to an existing communication connection. If successful the data packet from the malicious node may be accepted by a legitimate party to the communication connection possibly resulting in a denial of service or other undesirable consequence. Mitigation e.g. lowering the probability of this scenario may include modification and or extension of the communication connection protocol s for example modification of TCP.

In an embodiment of the invention mitigation of malicious network node activity and in particular denial of service attack mitigation is achieved by incorporating a challenge probe into the communication connection protocol s . depicts an example of a modified TCP incorporating a challenge probe to distinguish between legitimate and illegitimate RST messages. An example legitimate RST exchange sequence is contrasted with an example illegitimate RST exchange sequence .

An established TCP connection may exist between the computer and the computer . The legitimate RST exchange sequence may be initiated with a legitimate RST message from the computer to the computer informing the computer that the computer considers the TCP connection terminated. In response to the RST message the computer may send a challenge probe to the computer to confirm the legitimacy of the RST message . As shown in suitable conventional TCP messages that may be utilized as the challenge probe include the ACK message. Choice of the ACK message for utilization as the challenge probe may minimize the impact of TCP modifications. The computer may receive the challenge probe however the computer considers the TCP connection terminated. In compliance with RFC 793 the computer may send a second RST message to the computer in response to the challenge probe . Receipt of the second RST message at the computer may be considered confirmation that the RST message was legitimate.

In contrast the illegitimate RST exchange sequence may be initiated with an illegitimate RST message from the computer to the computer . In this example the computer is a malicious node attempting a denial of service attack on computer . Although the RST message is sent from the computer the field values of the RST message are set so that the RST message appears to the computer to be a legitimate message originating from the computer .

As in the legitimate RST exchange sequence the computer may respond to the incoming RST message by sending a challenge probe to the apparent source of the RST message which is in this case the computer . Once again as shown in suitable conventional TCP messages that may be utilized as the challenge probe may include the ACK message. In the illegitimate RST exchange sequence however the computer did not originate the RST message and may consider that the established TCP connection between the computer and the computer remains in existence. As a result and once again in compliance with RFC 793 the computer may respond to the challenge probe with an ACK message . Receipt of the ACK message in response to the challenge probe may be considered an indication that the RST message was illegitimate.

The ability to distinguish between legitimate and illegitimate protocol messages may enable the node under attack to mitigate the attack for example by dropping or ignoring illegitimate protocol messages. The effectiveness of the challenge probe to distinguish between legitimate and illegitimate protocol messages is not limited to the RST message. depicts a further example of a modified TCP incorporating a challenge probe this time to distinguish between legitimate and illegitimate SYN messages. Once again an example legitimate SYN exchange sequence is contrasted with an example illegitimate SYN exchange sequence .

An established TCP connection may exist between the computer and the computer that is the TCP connection may already be in a synchronized state. The legitimate SYN exchange sequence may be initiated with a legitimate SYN message from the computer to the computer informing the computer that the computer wishes to re establish the TCP connection. If the sequence number of the SYN message is within a window e.g. as specified by RFC 793 then in response to the SYN message the computer may send a challenge probe to the computer to test the legitimacy of the SYN message . The challenge probe may be an ACK message with acknowledgement number equal to the next expected sequence number rcv nxt . When the computer receives the challenge probe if the acknowledgement number of the challenge probe does not correspond to the next sequence number to be sent snd nxt it may respond in compliance with RFC 793 with a RST message . The acknowledgement number of the RST message may be set to the sequence number of the challenge probe so that it will be classified as a good RST GRST by the computer and the connection will be reset. Receipt of the RST message at the computer may be considered an indication that the SYN message was legitimate.

The illegitimate SYN exchange sequence may be initiated with an illegitimate SYN message from the computer to the computer . Once again the computer is a malicious node attempting an attack on the computer and the fields of the SYN message have been set so that the SYN message appears to be a legitimate message originating from the computer . As for the SYN message the computer responds to the SYN message with a challenge probe . The challenge probe may be an ACK message with acknowledgement number equal to the next expected sequence number rcv nxt . Since in this scenario the computer is not trying to re establish the TCP connection between the computer and the computer the computer may respond in accordance with RFC 793 for an established connection that is with an ACK message . Receipt of the ACK message by the computer may be considered an indication that the SYN message was illegitimate.

In an embodiment of the invention rather than challenging each for example RST and SYN message it is more efficient to challenge some subset of RST and SYN messages. Some incoming protocol messages may be classified as suspicious or questionable and challenges limited to this class of protocol message.

Attempts to mimic legitimate protocol messages may be of varying quality. For example the data packet may include fields having values that match the tuple identifying the communication connection but also include further fields having values that while formally compliant with the corresponding protocol specification e.g. RFC 793 are out of the ordinary or questionable. Questionable values may include values that are statistically unlikely and or beyond an expected value threshold as determined by a protocol model. Questionable values may further include values that fall outside of ranges determined according to a strict and or rigorous interpretation of the corresponding protocol specification. A protocol message such as the RST message or the SYN message may be classified as questionable if one or more of its fields has questionable values.

Denial of service mitigation mechanisms in accordance with an embodiment of the invention may achieve additional efficiencies and robustness for example by limiting the number of challenge probes initiated in response to questionable protocol messages and or judicious utilization of wait state timeouts while waiting for challenge probe responses. Such additions may be particularly effective when the denial of service mitigation mechanisms are required to cope with a wide variety of practical network environments. depicts example steps for mitigating malicious network node activity with challenge probes in accordance with an embodiment of the invention. For clarity the steps of reference the RST message however as will be appreciated by one of skill in the art embodiments of the invention may include steps referencing for example the SYN message or any suitable protocol message or suitable combination of protocol messages.

At step an RST message such as the legitimate RST message or the illegitimate RST message may be received over a TCP connection. For example the RST message may be received at the TCP layer of the computer . At step the RST message may be classified as a good RST GRST message or a questionable RST QRST message. For example the denial of service attack mitigation module may classify the RST message. RST message classification criteria may include whether the sequence number matches the next expected sequence number rcv nxt and whether the acknowledgement number is in the range between the oldest unacknowledged sequence number snd una and the highest sequence number sent snd max . For example good RST messages may be RST messages with sequence numbers that do match the next expected sequence number and with acknowledgement numbers that are in the range between the oldest unacknowledged sequence number and the highest sequence number sent and questionable RST messages may be RST messages that are not good RST messages.

At step it may be determined whether the RST message is a questionable RST QRST message for example based upon the classification of step . If the RST message is a questionable RST message the procedure may progress to step otherwise the procedure may progress to step . At step the TCP connection over which the RST message was received may be reset for example as specified by RFC 793 in response to receipt of an RST message.

At step it may be determined whether there is outstanding data to be sent over the TCP connection. If there is outstanding data to be sent over the TCP connection the procedure may progress to step . Otherwise the procedure may progress to step . At step the RST message may be dropped and not further processed.

At step it may be determined if there is a challenge probe currently in progress. For example the denial of service attack mitigation module may keep track of initiated challenge probes in a list table or other suitable data structure. If there is a challenge probe currently in progress the procedure may progress to step . Otherwise the procedure may progress to step of . depicts further example steps for mitigating malicious network node activity with a challenge probe in accordance with an embodiment of the invention. Diagram connector indicates that the steps of and the steps of may be connected.

At step it may be determined if a probe cap has been reached. For example the denial of service mitigation module may maintain a probe count variable for the connection and also be configured with a probe count limit threshold e.g. a probe count limit of 5 . If the probe count variable has a value that equals or exceeds the probe count limit threshold then the denial of service mitigation module may determine that the probe cap has been reached. If the probe cap has been reached the procedure may progress to step . Otherwise the procedure may progress to step . At step as for step the TCP connection may be reset.

At step a challenge probe may be initiated for example the challenge probe or the challenge probe . The challenge probe may be an ACK message with sequence number and acknowledgement number corresponding to the next sequence number to be sent snd nxt and the next expected sequence number rcv nxt . At step the probe count variable may be incremented.

At step a thread of execution for example may wait for a response to the challenge probe initiated in step . When a data packet e.g. the data packet of is received over the connection the waiting step may end and the procedure progress to step . A wait timeout may occur e.g. after 5 minutes before a data packet is received over the connection. If a timeout occurs the procedure may return to step . For robustness the wait timeout may be implemented in accordance with a conventional TCP KeepAlive timer.

At step the data packet that terminated the waiting step may be examined and the nature of the data packet determined for example in accordance with RFC 793. If the data packet is determined to be an ACK message such as the ACK message sent in response to the challenge probe then the procedure may progress to step . If the data packet is determined to be an RST message such as the RST message sent in response to the challenge probe then the procedure may progress to step . Otherwise the procedure may progress to step . In each case the data packet may be handled in accordance with RFC 793.

At step the value of the probe count variable may be reset to zero. In an embodiment of the invention a purpose of the probe count variable and the probe count limit threshold is to prevent a lengthy protocol loop in which responses to challenge probes trigger additional challenge probes. The probe count may be reset to zero if data packets other than responses to challenge probes are being received over the connection since such receipts may indicate that it is unlikely that the undesirable protocol loop is occurring. Having reset the probe count the procedure may progress to step to further wait for the response to the challenge probe.

At step a bad i.e. illegitimate RST message may have been detected. The bad RST message may be logged for later analysis. Alternatively the bad RST message may simply be dropped and not further processed.

The SYN message and the RST message are examples of TCP control messages. For non control messages such as the DATA message the utilization of a challenge probe may be inappropriate for example because adding the challenge probe overhead to a high volume message type may result in unacceptable protocol performance degradation. In an embodiment of the invention questionable protocol messages may be ignored or dropped independent of a challenge probe. However care may be required when classifying such protocol messages as questionable to avoid dropping legitimate protocol messages for example conservative field value thresholds may be determined and or configured.

At step a data packet such as the data packet may be received. For example a DATA message such as the DATA message may be received by the sender of the step SYN message. At step the acknowledgement number of the received data packet may compared to the highest sent sequence number snd max . If the acknowledgement number is less than the highest sent sequence number then the procedure may progress to step . Otherwise the data packet may be determined to be illegitimate and the procedure may progress to step . As will be appreciated by one of skill in the art sequence number and acknowledgement number calculations and comparisons may be implemented utilizing modulo arithmetic to accommodate fixed size sequence number and acknowledgement number fields. As a result terms such as greater than and less than may be read as greater than in accordance with modulo arithmetic and less than in accordance with modulo arithmetic and the like.

At step the acknowledgement number of the received data packet may be compared to the stored initial sequence number snd isn . If the acknowledgment number is greater than the stored initial sequence number then the procedure may progress to step . Otherwise the data packet may be determined to be illegitimate and the procedure may progress to step .

The highest sent sequence number and the stored initial sequence number may be an upper and a lower limit respectively of a range of legitimate acknowledgement numbers. In an embodiment of the invention the legitimate range is narrowed by raising the lower limit. The lower limit may be raised by taking into account an amount of data that may be transmitted within a connection round trip time RTT for example an average duration between a time that the DATA message is sent and a time that its corresponding DATA ACK message is received. In an embodiment of the invention the amount of data that may be transmitted within the round trip time is limited for example to a size of a receive window max wnd . As a result the lower limit may be set so that the difference between the highest sent sequence number and the lower limit is not more than the amount of data that may be transmitted within a multiple of the round trip time.

At step the RTT based sequence number limit may be calculated for example as a function e.g. a linear function of the receive window size. Example steps for calculating the RTT based sequence number limit are described below in more detail with reference to . At step the acknowledgement number of the received data packet may be compared to the RTT based sequence number limit. If the acknowledgement number is greater than the RTT based sequence number limit then the procedure may progress to step . Otherwise the data packet may be determined to be illegitimate and the procedure may progress to step .

At step the data of the data packet may be accepted as legitimate and further processed. At step the data packet may be determined to be illegitimate and thus dropped and or ignored. The illegitimate or bad data packet and or the fact of its occurrence may be logged at step .

A duration spent waiting for expected data may be available for example from the TCP layer and or may be calculated as a difference between a current time and a time that expected data was last received e.g. as indicated by a timestamp . At step the duration spent waiting for expected data may be calculated as a multiple of the round trip time RTT . For example the duration spent waiting for expected data in seconds may be divided by the round trip time RTT in seconds and the result rounded. At step the expected data metric N may be reduced by a function e.g. a linear function of the multiple of the round trip time RTT spent waiting for expected data as calculated in step .

At step the RTT based sequence number limit may be calculated as the highest sent sequence number snd max less the receive window size max wnd multiplied by the expected data metric N that is using symbols snd max N max wnd. For example the receive window size may be the maximum receive window size advertised by the network node to which the unacknowledged bytes were sent. With time the reduction of the expected data metric N at step may result in the RTT based sequence number limit becoming close to the highest sent sequence number snd max . The difference between the RTT based sequence number limit and the highest sent sequence number snd max may be limited to a minimum e.g. 1 byte . As depicted at step the RTT based sequence number limit may be utilized to validate the acknowledgement number of the data packet .

As described above part of mimicking legitimate TCP IP messages may include filling fields of the data packet with values corresponding to existing connections. In particular mimicking legitimate TCP IP messages may include choosing tuple values corresponding to at least one of the existing connections. Some such tuple values may be easy for an attacker to choose. For example if the denial of service attack is targeting a well known web server then the destination IP address and the destination port may be publicly advertised. In an embodiment of the invention mimicking legitimate TCP IP messages is made more difficult by making it more difficult to choose the source port value of the tuple.

Conventionally the source port value for a new connection is typically the next sequentially available port number beginning with a well known initial source port number e.g. 1025 . This conventional source port value selection procedure may be relatively easy for an attacker to predict and thus mimic. In an embodiment of the invention the source port value selection procedure is modified to be less predictable. The initial source port number of a sequence may be selected at random from a range of available source port numbers e.g. 1025 to 65535 . Each source port value may be selected at random from the range of available source port numbers. The selection at random may be implemented with a conventional pseudo random number generator. The selection at random may be configured to maximize an interval between port number reuse.

At step a SYN message such as the SYN message may be instantiated. For example the SYN message may be instantiated by the TCP layer . At step the value of the source port field of the SYN message may be set to source port number selected in step .

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

The use of the terms a and an and the and similar referents in the context of describing the invention especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this invention are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.

