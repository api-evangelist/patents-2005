---

title: Change notification query multiplexing
abstract: In order to efficiently handle change notification requests to a storage system based on a database data store and a database engine, the change notification requests are multiplexed. This can be done by issuing a query which refers, for information about what changes are being tracked, to a data structure. The information about what changes to track for each request to be multiplexed is stored in the data structure. Additionally, information about the request can be stored in the data structure. By adding information to the data structure, the query can be altered without needing to directly modify or reissue the query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07805422&OS=07805422&RS=07805422
owner: Microsoft Corporation
number: 07805422
owner_city: Redmond
owner_country: US
publication_date: 20050228
---
This application is related by subject matter to the inventions disclosed in the following commonly assigned applications U.S. patent application Ser. No. 10 646 646 filed on Aug. 21 2003 entitled STORAGE PLATFORM FOR ORGANIZING SEARCHING AND SHARING DATA U.S. patent application Ser. No. 10 647 058 filed on Aug. 21 2003 entitled SYSTEMS AND METHODS FOR REPRESENTING UNITS OF INFORMATION MANAGEABLE BY A HARDWARE SOFTWARE INTERFACE SYSTEM BUT INDEPENDENT OF PHYSICAL REPRESENTATION U.S. patent application Ser. No. 10 646 941 filed on Aug. 21 2003 entitled SYSTEMS AND METHODS FOR SEPARATING UNITS OF INFORMATION MANAGEABLE BY A HARDWARE SOFTWARE INTERFACE SYSTEM FROM THEIR PHYSICAL ORGANIZATION U.S. patent application Ser. No. 10 646 940 filed on Aug. 21 2003 entitled SYSTEMS AND METHODS FOR THE IMPLEMENTATION OF A BASE SCHEMA FOR ORGANIZING UNITS OF INFORMATION MANAGEABLE BY A HARDWARE SOFTWARE INTERFACE SYSTEM U.S. patent application Ser. No. 10 646 632 filed on Aug. 21 2003 entitled SYSTEMS AND METHODS FOR THE IMPLEMENTATION OF A CORE SCHEMA FOR PROVIDING A TOP LEVEL STRUCTURE FOR ORGANIZING UNITS OF INFORMATION MANAGEABLE BY A HARDWARE SOFTWARE INTERFACE SYSTEM U.S. patent application Ser. No. 10 646 645 filed on Aug. 21 2003 entitled SYSTEMS AND METHOD FOR REPRESENTING RELATIONSHIPS BETWEEN UNITS OF INFORMATION MANAGEABLE BY A HARDWARE SOFTWARE INTERFACE SYSTEM U.S. patent application Ser. No. 10 646 575 filed on Aug. 21 2003 entitled SYSTEMS AND METHODS FOR INTERFACING APPLICATION PROGRAMS WITH AN ITEM BASED STORAGE PLATFORM and U.S. patent application Ser. No. 10 646 580 filed on Aug. 21 2003 entitled SYSTEMS AND METHODS FOR DATA MODELING IN AN ITEM BASED STORAGE PLATFORM .

The present invention relates generally to the field of information storage and retrieval and more particularly to a storage platform providing change notifications regarding changes in stored information.

In many computer systems the storage and retrieval of information for and by computer applications is handled by one or more central storage systems. For example one type of storage system commonly used in personal computers is a file folder and directory based system also termed a file system. Such file systems organize pluralities of files into hierarchies to create an abstraction of the physical organization of the storage medium used to store the files. Generally such organization into a hierarchy occurs at the operating system level. The files stored generally include the file hierarchy itself the directory embodied in a special file maintained by the file system. This directory in turn maintains a list of entries corresponding to all of the other files in the directory and the nodal location of such files in the hierarchy herein referred to as the folders .

The use of file system for central storage has several limitations. These may be overcome by using relational database technology as the underpinning of a central storage system as described in the patent in the patent applications referenced above in the Cross Reference section.

In an application using data stored in a storage system some activity of the application may be predicated on changes to the data stored in the storage system. For example an email program may wish to know when a new email message arrives. In certain systems email messages arrive and are stored on the storage system. When a new message arrives the email program can then perform any internal processing using the fact that a new email message has arrived or using the content of the email message. For example some email programs contain rules used to process messages. The application of these rules is triggered in some cases by the arrival of a new message. Additionally there may be user interface changes based on changes to data stored in the storage system. For example upon the arrival of a new message an alert may be presented to the user which indicates that a new message has arrived. A list of messages may be refreshed to include the new message.

In view of the foregoing there is a need for a change notifier that can be used in a database based storage system and provides for good performance and scalability. The present invention satisfies this need.

The invention provides for the multiplexing of change notification requests through the issuing of a combined query. In one embodiment the invention is a storage platform which includes a data store a database engine which provides a way for interaction to occur with the data store and an API that provides a way for application programs to issue change notification requests. At least two change notification requests are multiplexed and a combined query is used to query the data store via a query to the database engine . A data structure in one embodiment in the form of a table including query parameters can be used to multiplex queries. The data structure stores the parameters for a change notification request and a query is issued which refers to the data structure to determine what changes are being tracked for notification. When a compatible second change notification request is received the parameters for that second change notification request is added to the data structure. This alters the query without requiring the reissuing of the query to the database engine. Methods according to the invention can be implemented by instructions stored on a computer readable medium

Other features and advantages of the invention may become apparent from the following detailed description of the invention and accompanying drawings.

Numerous embodiments of the present invention may execute on a computer. and the following discussion are intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. Although not required various aspects of the invention may be described in the general context of computer executable instructions such as program modules being executed by a computer such as a client workstation or a server. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Moreover the invention may be practiced with other computer system configurations including hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

As shown in an exemplary general purpose computing system includes a conventional personal computer or the like including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer may further include a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment. Likewise the exemplary environment may also include many types of monitoring devices such as heat sensors and security or fire alarm systems and other sources of information.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers. The exemplary system of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As illustrated in the block diagram of a computer system can be roughly divided into three component groups the hardware component the hardware software interface system component and the applications programs component also referred to as the user component or software component in certain contexts herein .

In various embodiments of a computer system and referring back to the hardware component may comprise the central processing unit CPU the memory both ROM and RAM the basic input output system BIOS and various input output I O devices such as a keyboard a mouse a monitor and or a printer not shown among other things. The hardware component comprises the basic physical infrastructure for the computer system .

The applications programs component comprises various software programs including but not limited to compilers database systems word processors business programs videogames and so forth. Application programs provide the means by which computer resources are utilized to solve problems provide solutions and process data for various users machines other computer systems and or end users .

The hardware software interface system component comprises and in some embodiments may solely consist of an operating system that itself comprises in most cases a shell and a kernel. An operating system OS is a special program that acts as an intermediary between application programs and computer hardware. The hardware software interface system component may also comprise a virtual machine manager VMM a Common Language Runtime CLR or its functional equivalent a Java Virtual Machine JVM or its functional equivalent or other such software components in the place of or in addition to the operating system in a computer system. The purpose of a hardware software interface system is to provide an environment in which a user can execute application programs. The goal of any hardware software interface system is to make the computer system convenient to use as well as utilize the computer hardware in an efficient manner.

The hardware software interface system is generally loaded into a computer system at startup and thereafter manages all of the application programs in the computer system. The application programs interact with the hardware software interface system by requesting services via an application program interface API . Some application programs enable end users to interact with the hardware software interface system via a user interface such as a command language or a graphical user interface GUI .

A hardware software interface system traditionally performs a variety of services for applications. In a multitasking hardware software interface system where multiple programs may be running at the same time the hardware software interface system determines which applications should run in what order and how much time should be allowed for each application before switching to another application for a turn. The hardware software interface system also manages the sharing of internal memory among multiple applications and handles input and output to and from attached hardware devices such as hard disks printers and dial up ports. The hardware software interface system also sends messages to each application and in certain case to the end user regarding the status of operations and any errors that may have occurred. The hardware software interface system can also offload the management of batch jobs e.g. printing so that the initiating application is freed from this work and can resume other processing and or operations. On computers that can provide parallel processing a hardware software interface system also manages dividing a program so that it runs on more than one processor at a time.

A hardware software interface system shell simply referred to herein as a shell is an interactive end user interface to a hardware software interface system. A shell may also be referred to as a command interpreter or in an operating system as an operating system shell . A shell is the outer layer of a hardware software interface system that is directly accessible by application programs and or end users. In contrast to a shell a kernel is a hardware software interface system s innermost layer that interacts directly with the hardware components.

While it is envisioned that numerous embodiments of the present invention are particularly well suited for computerized systems nothing in this document is intended to limit the invention to such embodiments. On the contrary as used herein the term computer system is intended to encompass any and all devices capable of storing and processing information and or capable of using the stored information to control the behavior or execution of the device itself regardless of whether such devices are electronic mechanical logical or virtual in nature.

As discussed above it is useful for some applications to have a notification of a change to data stored in the storage system. In at least one storage system using relational database technology Microsoft Corp. s WinFS such notifications are handled by a notification service. In WinFS an application programming interface API allows for such notification requests in WinFS. WinFS API watchers are a set of classes that allow applications to be selectively notified of changes in the WinFS store and provide state information that can be persisted by the application to support suspend resume scenarios. Through the API an application can create a watcher to watch for specific changes in the storage system. When the change occurs the watcher raises an event and sends data regarding the change.

A watcher watches for specified changes in the data. In WinFS data to be stored in the storage system is stored as items. Each item has an associated type. The type of the item is a schema which defines the structure of and properties for the item. In addition the storage system stores associations between items known as relationships. An extension can also be associated with an item. Extensions are used to extend a type. An application defines an extension to an item type. For an example for the person type the schema used by the storage system defines first name last name and birth date etc. as the fields of an item of this type. However no field for eye color data exists in the person type. If one is needed then an application can extend the person type by defining an eye color extension. When such an extension is in place eye color data can be stored in this extension as part of an item of type person.

The watcher class can notify your application of changes to different aspects of WinFS objects including the following 

Watchers can act on complicated items. For example where an item is a hierarchy of other items the watcher can watch the item and the items in the hierarchy for any changes.

Event data is returned when a watcher raises an event because it is determined that the change for which notification was requested has occurred . This event data includes data which allows the requesting entity to understand what has occurred e.g. the identity of the item changed the type of change add modify delete etc.

When a watcher raises an event it sends watcher state data with the event notification. The application can store this state data for later retrieval. Subsequently the watcher state data can be used to request notification of events for all changes that occurred after the state was generated.

The watcher APIs can be implemented using a command which waits for a result from a query or for a timeout. One such command in the SQL language is waitfor. Thus a watcher which is being requested to look for a change to a certain item ItemToBeWatched might use a query Q ItemToBeWatched which only returns when and if a change in ItemToBeWatched occurs and the watcher would implement a command analogous to the following pseudocode command 

Appendix A includes actual SQL code which can implement the such a query. The SQL code in Appendix A includes a waitfor query which waits for any item changes to occur in a folder item folderId . The first portion SELECT 1 . . . is a query which returns when an item is added to the folder. The second portion SELECT 2 . . . is a query which returns when an item in the folder is modified. The third portion SELECT 3 . . . is a query which returns when an item in the folder is deleted.

Thus change notifications may be accomplished for an application. However there may be many changes in the data stored in the storage system which are of interest to an application and so an application may create many watchers to watch different kind of changes. Knowledge about changes in various items extensions and relationships may require the use of many change notifiers. However such queries issued against the database which is at the core of the storage system places a high load on the database server. This high load may cause decreased performance of the storage system by using CPU time and memory. Additionally scalability is adversely affected even if a storage system can adequately handle having a number of watchers it may be impossible to scale up the system.

The data store and data engine are used as a central storage system for computer system . The data store provides the storage for the computer system the database engine among other tasks provides storage functionality for application programs . One way in which functionality is provided by the database engine for application programs is by exposing application programs interfaces APIs . One of these APIs is watcher API . The watcher API allows a watcher to be requested by an application program . The application program can request a watcher in order to request notification whenever a specific change occurs to data in the data store . For example an application program may request to be notified when a document is modified. In the case where data store supports folder trees with a hierarchy that arranges documents under the folder tree an application program may specify a folder tree and request notification when any document is modified under that folder tree.

The watcher API queries to the database engine . The query returns only when the specified change occurs. In one embodiment the watcher notifies the requesting application only that the change has occurred. In another embodiment the watcher includes in the change notification to the requesting application program information about the type of change that has occurred. In some embodiments if no changes occur within a timeout period the change notification request expires. In one such an embodiment expiration is not reported to the requesting application program . Watcher API just resubmits the query request after a query expires. The expiration is in one embodiment reported to the requesting application program .

In order to provide the advantages of the present invention some change notification requests are multiplexed. In one embodiment two or more change notification requests handled by the watcher API are multiplexed by storing the information regarding the object of the requests in a data structure. are block diagrams illustrating such a data structure parameter table according to one embodiment of the present invention. In each entry on the parameter table includes identifying information regarding one change request. Instead of each change notification request resulting in a separate query to the database engine queries can be multiplexed by means of the parameter table . illustrates the parameter table after a one change notification request has been received. The first change notification request results in the creation of the parameter table with one initial parameter table entry which includes information regarding the change request. A query is then issued which requests that the database engine provide notification of any changes described in any entries of the parameter table .

Through the parameter table additional change requests can thus be multiplexed without reissuing the query. illustrates parameter table after two change notification requests have been received and multiplexed. As shown in when an additional change request is received it is be multiplexed by inserting an additional entry into the parameter table which describes the change for which notification has been requested by the additional change request. The query which has been issued to the database engine is unchanged. In which illustrates parameter table after more than two change notification requests have been received additional entries through have been inserted into the parameter table .

In SQL Server or other relational database systems tables can be created as a temporary table or a regular table. In one embodiment the data structure is a temporary table in another it is a regular table.

In one embodiment complex change requests can be described in more than one entry into parameter table . In this embodiment a change request may be associated with more than one entry into the parameter table .

An entry into the parameter table will contain information necessary to determine what changes the change notification request is directed towards. This includes information about which items in the data store to watch. Additionally in various embodiments the entries may include some or all of 

The requesters of each change notification request are tracked. When the query returns a result indicating a change responsive to one or more change notification requests the appropriate requestor s are notified of the change that has occurred.

At some point following step an additional change notification request is received step . At step the already issued query is altered. This alteration allows the query to serve both the initial change notification request and the additional change notification requests by returning to indicate a change if any change specified in the initial change request or the additional change request occurs. Further change notification requests may be received and added to the query as indicated by dashed arrow .

While the query is altered in step this alteration does not require resubmission of the query. In one embodiment the parameter table is modified by inserting rows corresponding to the new request. Because the query includes a reference to the parameter table as a net result the existing query will also return changes for the new request.

In one embodiment the query includes a reference to a data structure such as parameter table . Step may in one such embodiment be accomplished solely by adding data from the additional change notification request to the data structure. In an alternate embodiment step may be accomplished by adding data to the change notification request in addition to other actions.

In one embodiment where the requests are issued by application programs by calling a method of an API requests are each assigned a request id. When the query returns and indicates that a specific change has occurred the requests are examined to determine which request or requests the change is responsive to. The information returned by the query is then communicated to the relevant requesting entities by using a callback function provided by the requesting entity in its request.

In one embodiment of the invention in order to efficiently find rows in the data store which are relevant to a change request as part of the query a database index on session id watcher id is created on the parameter table . Further in order to distinguish between evens for different change requests the watcher id is returned as part of the query result. The results are sorted by watcher id and timestamp. Thus events for a given change request are consecutive to each other in the result. Appendix B provides a source code listing of the query which implements the multiplexing of requests in accordance with one embodiment of the present invention. In the store relevant to Appendix B the data store includes items extensions and relationships. In Appendix B there are nine SELECT queries inside a WAITFOR query. These select statements find change for in order monitoring to see if any of the following events have happened which are responsive to a change request item additions item modifications item deletions extension additions extension modifications extension deletions relationship additions relationship modifications and relationship deletions.

As the foregoing illustrates the present invention is directed to a storage platform for organizing searching and sharing data. The storage platform of the present invention extends and broadens the concept of data storage beyond existing file systems and database systems and is designed to be the store for all types of data including structured non structured or semi structured data such as relational tabular data XML and a new form of data called Items. Through its common storage foundation and schematized data the storage platform of the present invention enables more efficient application development for consumers knowledge workers and enterprises. It offers a rich and extensible application programming interface that not only makes available the capabilities inherent in its data model but also embraces and extends existing file system and database access methods. It is understood that changes may be made to the embodiments described above without departing from the broad inventive concepts thereof. Accordingly the present invention is not limited to the particular embodiments disclosed but is intended to cover all modifications that are within the spirit and scope of the invention as defined by the appended claims.

As is apparent from the above all or portions of the various systems methods and aspects of the present invention may be embodied in the form of program code i.e. instructions . This program code may be stored on a computer readable medium such as a magnetic electrical or optical storage medium including without limitation a floppy diskette CD ROM CD RW DVD ROM DVD RAM magnetic tape flash memory hard disk drive or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer or server the machine becomes an apparatus for practicing the invention. The present invention may also be embodied in the form of program code that is transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics over a network including the Internet or an intranet or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates analogously to specific logic circuits.

