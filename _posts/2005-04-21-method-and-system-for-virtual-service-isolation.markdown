---

title: Method and system for virtual service isolation
abstract: A method of managing resources in a host computer includes generating a virtual service provider in two different computer partitions and linking them in a serial manner. The virtual service providers are associated with a computer resource. Virtual service clients in different partitions may use the virtual service provider software to access the related computer resources. The virtual service providers provide a transparent interface to the associated hardware. Virtual service clients can use the combination of series computer resource functions or can access the a lesser number of the series connected virtual service providers. Fault tolerance can be built into the scheme using multiple virtual service providers located in different partitions accessible to virtual service clients using a failover control technique.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578385&OS=08578385&RS=08578385
owner: Microsoft Corporation
number: 08578385
owner_city: Redmond
owner_country: US
publication_date: 20050421
---
The invention relates to the field of computer programming. More specifically the invention relates to providing isolative connectivity to computer resources among many partitions in a virtual machine environment.

Virtual computing allows multiple virtual machines each operating in their own isolated partition to run on a host computer. The host computer has a virtualizer program that allows the host computer to execute the instructions of a virtual machine program. The host computer virtualizer program can also virtualize the hardware resources of the host machine for virtual machine use. The virtual machine or partition that is requesting hardware resources such as CPU memory I O and disk space is ideally isolated from other partitions.

In a virtual machine environment another partition only exists in the host computer system as a pure software representation of the operation of one specific hardware architecture. A virtualizer program acts as the interchange between the hardware architecture of the host machine and the instructions transmitted by the software e.g. operating systems applications etc. running within partitions of the virtual machine environment. In one virtual machine environment embodiment the virtualizer program may include a virtual machine monitor VMM which is a software layer that runs directly above the host hardware perhaps running side by side and working in conjunction with the host operating system and which can virtualize all the resources of the host machine as well as certain virtual resources by exposing interfaces that are the same as the hardware the VMM is virtualizing. This virtualization enables the virtualizer as well as the host computer system itself to go unnoticed by operating system layers running above it. In a virtual machine environment the multiple virtual machines impose performance requirements on the hardware resources of the host machine. It is desirable to keep one virtual machine separated from the other virtual machines as well as separated from the host. Separation or isolation of one virtual machine from another is useful to isolate errors and faults such that one virtual machine fault does not affect another virtual machine. Yet in some configurations it is desirable to have one virtual machine access host resources available to a second virtual machine. Therefore isolation between partitions can become problematic.

Just as computers were made more stable by separating different applications into separate process address spaces systems can be made even more stable by separating whole software stacks into separate virtual machine partitions. A whole software stack may be thought of as an operating system including its plug in modules an application and any middleware between them. Given a system where one virtual machine or partition has exclusive access to a computer resource then other partitions must access the provider partition in order to utilize or consume the computer resource. Systems that have such isolation partitions but are linked because some partitions are providers and some are consumers or clients of computer resources that have increased detrimental consequences if a fault appears in the provider partition. Under such fault conditions a provider partition may be affected by faulty software and the dependent client partitions may likewise be affected. As a consequence of faulty software in the provider partition the operating system hosting the provider functions as well as applications running in the provider partition may also be collaterally affected.

In the context of the present invention a virtual service provider VSP provides input output I O device related resources to its virtual service clients. These I O device related resources don t necessarily correspond directly to resources provided by a physical device. A virtual service provider consumes device I O resources as well as CPU and memory because it is software and serves those resources to its virtual service clients. The resources consumed by a virtual service provider may come from a single device I O software stack or from multiple device I O software stacks. A virtual service provider can have one or more virtual service clients which may or may not exist in the same partition as the virtual service provider. A virtual service client VSC consumes the resources given to it by its virtual service provider. A VSC also consumes resources such as CPU and memory because the VSC is software. The virtual service client re serves its granted resources to a software stack layer above it. In other words the virtual service client can generally be thought of as the device drivers for the I O device related resources that the virtual service provider offered.

In addition to reliability the isolation that virtual machine partitioning enables can also be used to increase security. Components in the lower layers of a software stack particularly those that run within the context of an operating system kernel can often access any programs or data within a partition. If the services are moved to their own partition then programs and data within them have a much smaller attack surface as only the kernel mode code within that specific partition can access them. As these partitions can be carefully constructed to contain only a small amount of the code that comprises the entire computing system code that might be necessary on the whole may still be excluded from partitions that contain particularly sensitive data. Accordingly thoughtful use of partitioning in computer system can have advantages.

Thus there is a need for a system and method that can to allow the use of partitioned software elements to provide both isolation and fault tolerance in virtual computer systems. The present invention addresses the aforementioned needs and solves them with additional advantages as expressed herein.

An aspect of the invention includes a method and system to allow accesses between virtual machines where one virtual machine requests access to another virtual machines allocated resources. One embodiment of the invention includes placing a virtual service provider in a partition generated by a first partition and virtual service clients in different partitions. If the dedicated service provider partition fails the generating first partition may recover the service provider partition because of the isolation provided by the architecture.

In another embodiment chained virtual service providers can provide computer resource services to virtual service clients such that a service client may use the full string of the concatenated services or only a portion of the concatenated services. If a fault in a lower order service provider partition occurs it does not affect the services of higher order partitions that are chained together.

In another embodiment aggregation and redundancy may be achieved in a virtual service provider and service client environment. In one example similar chained computer services may be placed in parallel and accessed via another service provider in another partition. If one of the similar services fails in one partition the other partition may be used as a backup. In another example if similar chained computer services are placed in parallel and accessed via another service provider in another partition then the services may be aggregated such that a multiplicity of services may be obtained to effectively increase the capability of the computer resource to handle a large virtual service client load.

In one embodiment of the invention a partitioned system which may represent partitions in a virtual machine environment contains software programs called virtual service providers and virtual service clients. A virtual service provider VSP is a software module which provides a service to a partition or virtual machine. Often the VSP is a part of the software stack which controls physical hardware. However VSPs may also provide control to non hardware computer resources. When VSPs correspond to a specific piece of hardware they often perform a role that involves arbitrating access to that device and allowing its resources to be shared among multiple clients. Often the clients are unaware that they are sharing the computer hardware resource.

A virtual service client VSC is a software module which consumes a service offered by a VSP. The VSC appears to the operating system in which it runs as hardware or as a plug in module that takes the place of a module that managed physical hardware. Also a VSC can enable a partition to acquire non hardware services from a non hardware oriented VSP. A combination of VSPs and VSCs in a partitioned environment can provide isolation fault tolerance and chained and aggregated services.

VSCs can also be located in the root partition or the VSP dedicated partition . Each VSC in the system functions to access the VSP virtualization of the hardware device . This access provides functionality to each partition in which a VSC resides. The advantage of the architecture of over that of is that the first partition is isolated from the VSP partition containing the software stack . If a fault occurs in any piece of software that resides in partition including the software stack that affects the VSP then the second third and fourth partition may be adversely affected. Even VSCs and and their corresponding operative connectivity in the first partition and the dedicated partition may be adversely affected. However because the first partition created the VSP dedicated partition the first partition is able to update repair or reconstruct the VSP dedicated partition to reestablish functionality of the VSP dedicated partition. The advantage of fault isolation and recovery is established because of the parent and child relationship of the first partition to the VSP dedicated partition .

Virtual service clients reside in other partitions which can use the services that the VSPs provide. For example VSC residing in a second partition may be linked to VSP in the first partition . VSC is linked to VSP in the chain partition. VSC in a fourth partition is also linked to VSP in the chain partition. Each of the links and use communications channel to communicate the between providers and clients of services.

VSC via link can use the services provided by VSP and its associated hardware . For example if hardware was a network interface then information from the second partition could be transmitted through a network as a result of the network interface service provided by the VSP of the first partition . VSC via link can use the services provided by VSP and its associated hardware . For example if hardware was encryption hardware then information from the third partition could be encrypted as a result of the service provided by the VSP of the chain partition .

The use of link can then invoke the VSC of the chain partition to communicate the encrypted data of the third partition via link to the VSP of the first partition . The encrypted information of the third partition can then be sent to a network destination via the network interface service connection via hardware . Thus the configuration of allows some partitions to use a chained sequence of services of VSPs in different partitions. In the example presented information of the third partition can use the VSP of the chain partition to encrypt data using hardware before using the VSP of the first partition to transmit the data out onto a network using hardware . In the example the fourth partition is likewise enabled by it connection to the chain partition and the VSP associated with encryption hardware .

The configuration of displays the ability of multiple VSCs to use multiple VSPs. A VSC can connect in a chain to use all or a portion of the hardware chaining made available. For example a VSC can connect to a VSP at the end of a chained set of partitioned VSPs to use the full ensemble of chained hardware. For example if another VSP in another partition were available the last element in the chain may be data compression hardware or a data compression algorithm the next higher chained VSP could provide encryption hardware services the next higher chained VSP could provide a network interface for network connectivity. Also a VSC can enter an intermediate step in the chained VSP configuration to get for example just encryption and network services. Another VSC in a partition could access the chained VSPs at another point and receive just network services. In another embodiment there could be a filter in the chain such as a firewall or anti virus software that blocks certain I O requests according to a predefined policy.

In another aspect of the invention if a partition of the chained elements failed due to some fault in the partition in which it resided higher layers of the chained VSPs could still be used. For example if a compression service partition failed a functional VSC could still use the encryption and network service VSPs because their respective partitions can be unaffected by the fault in the compression service partition. Thus the chained configuration of provides fault isolation between chained partitions. In an alternate example there may also be a one to one relationship between VSPs and VSCs in a system with an aggregation happening at some other layer which may render additional fault isolation.

The VSPs are preferably associated with a computer resource such as a hardware software I O firmware or non hardware resource such as bandwidth or time slice access step . Additional examples of VSP associations are disk storage audio service video service input ports and output ports such as USB or other serial interfaces or parallel interfaces. VSCs may be located in other partitions as users of the VSP resources and may be offered the VSP resources step . As before this offer allows other partitions to use the VSP access to the computer resources in an isolated manner. In addition the resources are essentially chained together such that one function may follow the next.

One example not shown of a series string of chained resources is compression encryption and network access. One VSC in an isolated partition may use all three functions in a serial and transparent manner by accessing a compression VSP which is connected to an encryption VSP which is connected to a network interface VSP. One VSP is connected to another VSP via a VSC. An intermediate entry point is also possible. For example an isolated VSC may desire to use only the encryption and network VSP service and may therefore bypass the compression VSP by connecting to the encryption VSP which is chained to the network interface VSP. Also a different VSC which desires only network interface services may bypass the compression and encryption VSP functions and interface directly with the VSP that provides the network interface function. In one aspect of the invention the interfaces between the VSPs and VSCs are the same throughout a chain. For example there can be three partitions in a chain and each exposes a network interface. However a first partition does compression and a second partition does encryption but to the VSCs both are accesses to a third partition network connection. It just happens that the first and second partitions can perform their compression and encryption on a network packet.

Additional increasingly more complex chained partitions functions may be added by adding different VSPs and VSCs in partitions assigning computer resources to the added VSPs and offering the new services to other VSCs. If a fault occurs in a partition along the chain the VSP in the failed partition may be unavailable. But the VSPs located further down the chain are still available. This allows a level of fault isolation VSCs and VSPs in different partitions that are not directly affected by the fault in another partition.

A third partition contains software stack having VSP and VSC and VSC . A chaining of VSP functions exists from the perspective of VSC and . VSC is connected to VSP in the third partition . Likewise VSC is linked to VSP in the third partition . VSP is then chained via VSC to link to VSP in the first partition . VSP is also chained via VSC to link to VSP in the second partition . As before links between different partitions are accommodated with a communication channel . The VSP of the third partition may be understood to be associated with a computer resource not shown which may be a hardware or non hardware resource.

According to an aspect of the invention VSC VSPs and separate partitions may be grouped to accommodate various configurations for fault tolerance and isolation. In the configuration of if hardware and are similar or redundant then either VSP may be used in a chained configuration by the clients in the fourth and fifth partitions . For example if hardware and are network interfaces in a system where redundant network interfaces were important then the configuration of may be used to advantage. Assuming the VSP provided a system resource of encryption either by hardware firmware or software the combination of VSP VSC and VSP could supply encryption and network interface services to either the fourth or fifth partitions using link and hardware . Likewise the combination of VSP VSC and VSP could supply encryption and network interface services to either the fourth or fifth partitions using link and hardware .

In the software stack including VSP and VSC may be used to service the chaining needs of the fourth and fifth partitions and a failover mechanism is in place. If hardware fails or in the event some functionality in the first partition fails the functionality of encryption and network interface connectivity to the fourth and fifth partitions could be maintained by switching the service of VSP to flow through VSC to use path and VSP to access link and hardware . This failover service a switch from the stack of VSP and VSC to the stack of VSP and VSC allows flexibility to use the alternate functions available in the second partition instead of that of the first partition .

Another use of the configuration of is that of aggregation. For example if the network interface hardware of elements and do not have enough bandwidth to handle all of the data that may be originating from the VSCs of partitions and the combination bandwidth of the two hardware aspects and may be used in a cooperative manner to distribute the data and satisfy the overall bandwidth requirement. Here if VSP acts as an encrypter for data of the fourth and fifth partitions VSP may direct encrypted data to the combination of hardware elements and by using VSCs and respectively thorough partitions and . Thus aggregation of data is possible with the configuration of .

As may be well appreciated by those of skill in the art the combination of aspects of the present invention may be combined. For example a VSP dedicated partition as in partition in may be combined with the chain partition of and with the failover provision of the third partition of . The combinations of these aspects may result in a system that exhibits any combination of isolation and fault tolerance in a partitioned system. Also as the VSPs of a system provide computer resources those resources may include hardware as well as non hardware or pseudo hardware functionality such as firmware resources software resources aspects of computers such as bandwidth time slice size or priority packetization order or priority or other aspects such as power or signal control or activity scheduling. For example the system could employ the IEEE 802.1P standard support for improving support of time critical network traffic and limiting the extent of high bandwidth multicast traffic within a bridged LAN by introducing traffic class priorities.

The VSPs in the various partitions are preferably associated with a computer resource step such as a hardware software I O firmware or non hardware resource such as bandwidth or time slice access. VSCs may be located in other partitions as users of the VSP resources and may be offered the VSP resources step . As before this offer allows other partitions to use the VSP access to the computer resources in an isolated manner. The computer resources are chained together such that one function may follow the next and the dual VSCs in the chained partition provide flexibility in offering services to VSCs when one of the first or second partitions fail step .

For example if the VSPs in the first and second partitions offer the similar computer resources such as a network interface and if the VSP in a first partition fails the second partition VSP may be used as a backup. This is accomplished by using the second VSC in the chained partition to access the redundant second partition VSP. Consequently even in a chained configuration a level of redundancy may be employed. Additionally aggregation is possible by using the first and second partitions in parallel. This allows for example a high throughput VSC to use chained and partitioned functions of lower bandwidth to accommodate the high bandwidth requirement.

Although not required embodiments of the invention can also be implemented via an operating system for use by a developer of services for a device or object and or included within application software. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs appliances lights environmental control elements minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network bus or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.

With reference to an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer system typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disk Read Only Memory CDROM compact disc rewritable CDRW digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM CDRW DVD or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer system . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory not shown . In addition to monitor computer systems may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer system may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s .NET platform available from Microsoft Corporation includes servers building block services such as Web based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device one or more portions of an embodiment of the invention may also be implemented via an operating system application programming interface API or a middle man object between any of a coprocessor a display device and a requesting object such that operation may be performed by supported in or accessed via all of .NET s languages and services and in other distributed computing frameworks as well.

As mentioned above while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to implement a method to partition providers and clients in a virtual machine environment. Thus the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same similar or equivalent systems and methods achieved by embodiments of the invention.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the signal processing services of an embodiment of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While aspects of the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the claimed invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

