---

title: System and method for communicating information over a network
abstract: A system and method displays information for a multiple programs, each containing zero or one agent, an application, and zero or more pods. The agent communicates with another device such as a network to retrieve or provide information. Information to or from the agent is displayed by an application in a window that is used by other applications, one application at a time. Information to or from the agent is also displayed in one or more windows, each window dedicated to a single pod, and such window being much smaller than the window displaying information from the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08015504&OS=08015504&RS=08015504
owner: Adobe Systems Incorporated
number: 08015504
owner_city: San Jose
owner_country: US
publication_date: 20050325
---
This application claims the benefit of U.S. provisional application Ser. No. 60 556 721 entitled Method and Apparatus for Communicating Information Over a Network filed on Mar. 26 2004 by Kevin Lynch David Calaprice Ethan Malasky and Tracy Stampfli U.S. provisional application Ser. No. 60 556 595 entitled Method and Apparatus for Installing One or More Programs and At Least a Portion of Their Environment filed on Mar. 26 2004 by Kevin Lynch Tracy Stampfli Peter Grandmaison and Rebekah Hash and U.S. provisional application Ser. No. 60 556 966 entitled Method and Apparatus for Updating One or More Programs and Their Environment filed on Mar. 26 2004 by Tracy Stampfli and Rebekah Hash each having the same assignee as this application and each is incorporated herein by reference in its entirety.

This application is related to application Ser. No. 11 089 699 entitled System and Method for Installing One or More Programs and At Least a Portion of Their Environment filed on Mar. 25 2005 by Kevin Lynch Tracy Stampfli Peter Grandmaison and Rebekah Hash and application Ser. No. 11 090 741 entitled System and Method for Updating One or More Programs and Their Environment filed on Mar. 25 2005 by Tracy Stampfli and Rebekah Hash each having the same assignee as this application and each is incorporated herein by reference in its entirety.

The present invention is related to computer software and more specifically to computer software for communicating information over a network.

Computer programs may be operated to allow the user to receive information from and provide information to the computer programs. In the case of many window based operating systems the user can keep several programs running at the same time and manipulate a particular window of interest to view the information displayed by the program corresponding to that window.

The user may manipulate the windows by moving them around moving one window in front of another resizing the window minimizing the window or maximizing the window to allow the user to view the information the user requires at the time given the constraints of the size of the screen.

Because many computer programs primarily employ a single primary window that occupies a large portion of the user s computer screen if the user uses many such computer programs it can be necessary to perform such manipulations of the various windows many times throughout the day. User s find such manipulations cumbersome. Furthermore the manipulation takes time and can distract from the user s thought process.

Some of the information provided by some computer programs may be relevant to the user throughout the day and so the user would prefer to consult the information frequently. Other information displayed by the same program may be relevant only to the task at hand. For example many conventional chat programs display not only the chat message but a list of people known to the user with whom communications may be made. The user may not wish to use the chat program until the user sees someone on the list of people with whom the user would like to chat. If the chat program and the list of users occupies a single window the user is then faced with the dilemma of whether to display the chat program to see the list yet occupy a large amount of the screen with the complete chat program or minimize or otherwise hide the window in which the chat program is displayed but miss the information that someone with whom the user would prefer to chat is available.

The user can reposition the chat window to one side of the screen and then resize and reposition another program with which that user is working to cover all but the portion of the chat window that displays the list of users with whom communications may be made but such repositioning and resizing must be performed for every other program the user would like to maintain on his computer screen throughout the day. Not only is this extremely cumbersome but the user s screen can appear cluttered making the user experience less than desirable.

Additionally if the user wishes to use the chat program the user must bring the window displaying it to the front of the other windows even if the user only wants to perform some action on the list of users. The remainder of the chat program window will then obscure the other windows the user has open. When the user has completed the task the user must then remember how to remanipulate the other window or windows in front of the chat program to the way he or she had arranged them before.

It might be possible to design the programs the user uses to display far smaller amounts of information on any one screen allowing each program to occupy less space on a computer screen. However this would require the user to advance through so many screens to see the information the user wished to see that it would be undesirable for the user.

Some conventional programs employ two windows to make it easier for the user to manipulate the windows to suit the user s needs. For example the conventional AOL Instant Messenger product commercially available from America Online Corporation of Dulles Va. employs a Buddy List window containing a list of other potential users of the chat program designated as the user s buddies . The Buddy List window appears in a separate window from the portion of the chat program that is used to chat with other users. The Buddy List program can also be used to launch still other programs using icons displayed in the Buddy List program. Still other programs such as a stock ticker run in the buddy list window.

However each program launched from the Buddy list program spawns its own new window different from the windows spawned by the others adding to the cluttered appearance of the screen. Furthermore there is no way for the user to add or remove programs that appear in the Buddy List window requiring users who are disinterested in stock ticker information to view the stock ticker all day long or reposition or resize the window or other windows to block it. Additionally because the Buddy List window is not limited to information the user has selected but also contains buttons to launch various programs the window that a user is most likely to want to have persist on his computer system during the day is made much larger than is necessary for a user who just wants to see the buddy list. Additionally the buddy list window appears to have to remain open when the spawned window is used restricting the user s choice of how to use the available screen space. Also there is no way to launch the buddy list from the spawned window.

What is needed is a system and method that can allow information from programs that it is desirable to keep displayed on the screen for an extended period of time to be shown in a window small enough to persist on the screen without requiring the user to perform many window manipulations during the day to keep such window out of the way of other windows the user may wish to use and without forcing the user to view information for other programs the user does not find desirable while allowing the user to access another larger window of the program that contains more information and may be easier for the user to use without causing a cluttered appearance on the display screen as the user attempts to use the various programs and that provides an easy way to switch between the various windows or interact between one window and the other.

A system and method allows programs to be made of any of three components an agent an application and a pod. The agent is used to communicate with a network. The pod is used to communicate with the user in a small window format with the windows used for the pods from different programs arranged in a console for a uniform uncluttered appearance. The application is used to allow the user to view and provide information in a window that is larger than window used for the pod such window being used to display the applications of different programs at different times so that the user can view the larger format application window for each of the applications without having to manipulate multiple such windows thereby reducing screen clutter as well. An application shell contains the application window as well as a set of user interface controls that allow the user to execute or select for display the various applications. User interface controls displayed by the applications and the pods allow pods to be launched from the applications and applications to be launched or viewed from the pod in a logical manner.

The present invention may be implemented as computer software on a conventional computer system. Referring now to a conventional computer system for practicing the present invention is shown. Processor retrieves and executes software instructions stored in storage such as memory which may be Random Access Memory RAM and may control other components to perform the present invention. Storage may be used to store program instructions or data or both. Storage such as a computer disk drive or other nonvolatile storage may provide storage of data or program instructions. In one embodiment storage provides longer term storage of instructions and data with storage providing storage for data or instructions that may only be required for a shorter time than that of storage . Input device such as a computer keyboard mouse camera microphone or any of these allows user input to the system . Output such as a display or printer allows the system to provide information such as instructions data or other information to the user of the system . Storage input device such as a conventional floppy disk drive or CD ROM drive accepts via input computer program products such as a conventional floppy disk or CD ROM or other nonvolatile storage media that may be used to transport computer instructions or data to the system . Computer program product has encoded thereon computer readable program code devices such as magnetic charges in the case of a floppy disk or optical encodings in the case of a CD ROM which are encoded as program instructions data or both to configure the computer system to operate as described below.

In one embodiment each computer system is a conventional SUN MICROSYSTEMS ULTRA 10 workstation running the SOLARIS operating system commercially available from SUN MICROSYSTEMS Inc. of Mountain View Calif. a PENTIUM compatible personal computer system such as are available from DELL COMPUTER CORPORATION of Round Rock Tex. running a version of the WINDOWS operating system such as 95 98 Me XP NT or 2000 commercially available from MICROSOFT Corporation of Redmond Wash. or a Macintosh computer system running the MACOS or OPENSTEP operating system commercially available from APPLE COMPUTER CORPORATION of Cupertino Calif. and the NETSCAPE browser commercially available from NETSCAPE COMMUNICATIONS CORPORATION of Mountain View Calif. or INTERNET EXPLORER browser commercially available from MICROSOFT above although other systems may be used.

Referring now to a system for displaying information in multiple windows to a user of a computer system is shown according to one embodiment of the present invention.

Loading A Boot Loader Loads the Master Controller which Loads the Agent Manager App Shell Manager and Console Manager the Boot Loader can be Loaded Via the Operating System or a Web Page.

When a user wishes to use system the user signals operating system or browser plug in . If the user starts system by signaling operating system if system has been installed operating system loads and executes loader . If the user starts system by signaling browser plug in browser plug in signals operating system to load and execute loader if system is installed. In one embodiment browser plug in is a conventional browser running a plug in such as the Flash Player plug in commercially available from Macromedia Inc of San Francisco Calif. that is running a Flash movie program such as a conventional .swf file.

The Flash movie program used is a conventional program that contains instructions to direct the Flash Player plug in optionally in conjunction with the browser to cause operating system to load and execute loader when the user so indicates. In general Flash movie programs may contain any or all of A images or other display information that the Flash Player plug in can animate by displaying them in rapid sequence B audio that can be played back to the user in sequence with the images and C instructions that describe operations the Flash Player plug in should perform optionally in conjunction with the browser and operating system . Information about the Flash Player plug in and .swf files is available at Macromedia.com and such information is hereby incorporated by reference in its entirety.

The Flash movie program also referred to as a Flash movie may be retrieved by browser plug in via a network such as the Internet or a local area network. The network is coupled to browser plug in via input output of communication interface which may include a conventional network interface such as a conventional Ethernet interface running the conventional TCP IP protocol and coupled to the Internet via a router not shown . Communication interface may also be coupled to a conventional monitor mouse and keyboard via input output and contains a suitable interface for such connection.

If system has not been installed it may be installed as described in one of the related applications. System is maintained as described in another of the related applications.

When loaded by operating system loader loads master controller and executes it in conjunction with operating system . In one embodiment master controller is a computer program such as the conventional Flash Player or Flash Player plug in modified as described herein and a Flash movie program that causes it to operate as described herein although any one or more computer programs that operates as described herein may be used. These components are provided as part of the Central product commercially available from Macromedia at Macromedia.com and described therein and such description is hereby incorporated by reference in its entirety.

When loaded and executed master controller loads and executes in conjunction with operating system agent manager application shell manager and console manager . Each of these are also Flash Players or Flash Player plug ins modified as described herein and containing a Flash movie that causes them to operate as described herein although other computer software subsystems that operate as described herein may be used. A Flash Player plug in plays Flash movies in the form of .swf files having the format similar or identical to that described at Macromedia.com and operate as a plug in to browser plug in although in another embodiment one or more of master controller and the managers contains sufficient functionality to operate without the user of browser plug in .

As noted above a Flash movie may contain instructions and such instructions may be in the form of action script commands to be executed by the Flash Player plug ins as described herein. However other embodiments may incorporate other engines that execute instructions of other kinds in place of the Flash Player plug in and other kinds of instructions may be executed by such engine or a program may be used in place of the engine and instructions.

Initial Operation of App Shell Manager Initial Display of the App Shell and Display of Installed Applications

When application shell manager is loaded and executed it displays the application shell of and the components that are shown within application shell . Application shell includes menu bar containing a conventional pull down menu and installed programs area containing icons corresponding to installed programs and other icons as described in more detail below. In one embodiment system is initially installed with several programs including a program finder that allows the discovery and installation of still other programs via network . Programs are provided and installed as described one of the related applications. A child window application display window of the application shell is used as described below to display information from applications and receive user input to such applications.

Although only one application shell is displayed in the Figure any number of application shells may be displayed. To cause this display a user provides a shortcut command to application shell manager which signals master controller to load and execute another application shell manager as shown in . In one embodiment only a single application shell is used.

Initial Display of Console Console is not Used to Directly Install Applications or Show Applications that can be Installed or Other Extraneous Information.

When loaded by master controller and executed console manager displays console as a separate window from the application shell . The console and applications shell may be separately moved and resized or minimized. In one embodiment console does not have icons indicating individual applications e.g. a single application for each of several icons that may be installed or significantly extraneous material other than a limited number of controls that may appear at the top of the console and are not shown. Other than the controls at the top of console console has only zero or more pod viewers containing pods described below. The area containing controls is limited to an area that can be displayed as less than one inch in height at the top or other edge of console on a nineteen inch monitor.

An application shell manager according to one embodiment of the present invention is shown in more detail in . Referring now to and described below when loaded and run by master controller application shell manager operates as described herein. Application shell display manager manages the display of the application shell window in conjunction with operating system . Application shell control manager displays any controls for the application shell displayed as part of that window including the menu bar and responds to and processes requests or commands employing such controls.

Installed program manager reads a reserved directory of storage or such as the hard disk to identify the programs stored therein which may be identified by identifying all of the files having names with a specific extension in that directory which is used to store them when the programs are installed. In one embodiment such files with that extension contain or reference an icon that installed program manager displays in push button controls in the installed programs area of applications shell to indicate that the program corresponding to that icon has been installed. Installed program manager retains the name or other identifier of the program which may be the filename of the file described above or contained in such file and the boundaries of the corresponding control where it displays the icon.

When a user clicks on one of the controls containing the icons in installed programs area operating system signals installed program manager with the position of the mouse at the time it was clicked and installed application manager determines the program corresponding to the control clicked based on the position of the mouse and the location of the controls. Installed program manager then informs master controller of the name of the program corresponding to the icon on the control selected by the user.

When the information regarding the program selected by the user by clicking on the control with the program s icon is received master controller transmits a command to each of A agent manager to install and run the agent B applications shell manager to install and run the application and optionally C console manager to install the pod corresponding to the name of the program it receives. In one embodiment the agent application and pod are files in the .swf format with a name equal to the name of the program and an extension that identifies each file as corresponding to that program s agent application or pod with multiple potential extensions corresponding to pods to allow more than one pod to be loaded .

In still another embodiment a manifest file is retrieved upon installation of the program and the manifest file contains the filename of each of the various files above. The filenames for each installed program are retained by master controller and stored in program storage at the time the program is installed and these filenames are retrieved by master controller and provided to the various managers as described above or they may be retained in the manifest for this purpose with the name of the manifest implied from the name of the program or the name of the manifest being bound to the name of the program and stored in program storage at the time of installation of the program .

In one embodiment the name of the program or other information e.g. the domain name from which the files or the manifest file had been downloaded to retrieve and install them is provided by master controller with the filenames to the managers to allow them to provide this information to identify each related agent application and one or more pods.

Managers and load and execute the file corresponding to the command from master controller and the extension to which that manager corresponds. The agent application and one or more pods corresponding to a program in this fashion are referred to as corresponding to one another as there may be multiple applications agents and pods for any for any number of programs either available to be run or running simultaneously as shown in the Figure.

In one embodiment pods are not initially loaded with the application and agent but may be loaded upon receipt of a user command as described below. In still another embodiment an indication as to whether the one or more pods corresponding to the program are to be loaded with the application may be specified in the manifest file used to install the program described above. The indication is stored with the other information for the program in program storage when the program is installed or retained in the manifest and master controller retrieves and uses this indication to determine whether to direct console manager to load and execute the one or more pods corresponding to the application and agent being loaded and executed at the time the program is started.

If agent manager application shell manager or console manager is not running master controller directs operating system to launch any such non running ones of them and then instructs them to run the zero or one agent one or more pods and the application corresponding to the program as described above. Any number of such programs may be running at any time. In one embodiment when a program is run master controller directs operating system to launch console manager even if no pods corresponding to running applications are be initially displayed.

Operation of the Agent a Windowless Player that Communicates with the Outside World to Retrieve Information and Provide it to the Apps and the Pods Using Remote Procedure Calls.

When signaled to load and run i.e. execute a file as an agent agent manager loads the file into memory as agent and executes the instructions contained therein. As used herein to load a file into memory means to place it into a state to be run it does not need to be physically moved or may be only partially loaded into memory. In one embodiment agents are executed without being displayed in any window. In one embodiment an agent is used to collect information from the network coupled to input output for the purpose of display by the application and or pod or pods to which the agent corresponds although an agent may also provide information to network or process information or communicate information to and or from a source other than network . Because each agent executes as a Flash movie in the modified Flash player plug in to browser agent can communicate with network such as the Internet via said browser and communications interface . In another embodiment agent manager natively provides communication to and from network in the manner of a browser and so the browser plug in is not used to communicate with the network by agent manager . This is illustrated by the dashed line in running from agent manager to operating system .

Agent may operate to retrieve information from network and store it in program storage for shared use by its corresponding application and one or more pods or it may provide such information from program storage to its corresponding application and or one or more pods via a remote procedure call to some or all of them or it may perform all of these functions.

Whether browser plug in is used to communicate with network all agents communicate with network via agent manager . This allows agent manager to restrict access to the network as described in more detail below.

In one embodiment agent receives the information from the network and reformats it into two sets of information and stores it into program storage which may be memory or disk storage that is available for use by the program. The description of the operation of agent refers to the agent as receiving information from network . However agent may provide information to network . One set is formatted for use by the corresponding application and another set is formatted for use by one or more pods . The sets may be stored in a reserved area of program storage and a remote procedure call provided by agent to any or all of the corresponding application and one or more pods corresponding to the agent when agent determines it should notify the corresponding application or one or more pods for example if the information received from the network is complete or if it has changed from what was received before. The remote procedure call may contain the information or its location in program storage to allow it to be received or retrieved and processed by application and the one or more pods that correspond to agent . If the application or the one or more pods are not running when the remote procedure call would have been or is generated agent may retain the information that would have been provided to them and provide it to the application or one or more pods when they are run.

In one embodiment agent may employ operating system timers it sets to periodically retrieve information from network and provide it to application pods or both via remote procedure calls as described above. In one embodiment agent preprocesses the information to determine whether a remote procedure call is warranted for example determining a remote procedure call is not warranted if the information retrieved from the network does not contain differences or significant differences from what has already been obtained from the network by agent .

Applications Allow the Display of Large Amounts of Information in a Large Window that can be Used to Configure the Program.

When the application file is loaded into memory and launched as an application by application shell manager application displays a user interface in the application display window defined by application shell manager . An initial user interface may be displayed in application display window and then application may receive e.g. via remote procedure calls or retrieve information received from its corresponding agent and display the information that the corresponding agent retrieved as described above. In one embodiment instead of agent providing the information to application via remote procedure calls application may periodically request the information from agent via a remote procedure call to agent and in still another embodiment application may simply periodically retrieve the information stored in program storage by the corresponding agent without any remote procedure call.

The application display window is sized to be larger than the one or more windows in which the corresponding one or more pods from the program are displayed as described below. This means the application display window is at least at some time a relatively large display window corresponding to the program.

In one embodiment a user may configure the program using the application via conventional user interface elements such as buttons list boxes check boxes and the like that application displays in the application display window . When the user configures the program in a manner that requires or can utilize a change in the operation of the corresponding agent application provides an indication of the configuration to agent via a remote procedure call. The remote procedure call may contain the indication of the configuration or application may store the indication in program storage and the remote procedure call may indicate where in program storage the indication is stored. Alternatively application may store the configuration information into program storage and not employ any remote procedure call. Agent may check this configuration information in program storage each time configuration information is required. Configuration information is information related to the configuration or manner of operation of the program.

The configuration of the program may involve a change to the operation of the one or more pods of the program either in addition to or instead of a change to the operation of the agent . In one such embodiment application may provide an indication of the configuration to the one or more corresponding pods via the corresponding agent depending on the configuration indicated by the user with agent optionally using one or more remote procedure calls to such one or more corresponding pods in the same manner as is used from application to the agent as described above.

Once started application also responds to remote procedure calls it receives as described herein and updates the application display window if necessary or desirable in response to the remote procedure call.

Thus application may display in application display window the information received from the corresponding agent or provide information to the corresponding agent or one or more corresponding pods that is received via user interface elements it displays in application display window .

In one embodiment each program uses a single agent that may retrieve information from or provide information to multiple sources and aggregates it for use by the corresponding application or one or more corresponding pods . If there are multiple instances of an application all instances may share a single agent. Communication from one application instance to another and to all zero or more pods for the program may be routed through the agent . In still another embodiment multiple agents may be employed for each program with each of the multiple agents which operate like agent retrieving information from or providing information to one or more sources different from the other agents.

If the user clicks on another control with a different icon in the installed programs area applications shell manager will load and execute the indicated application as described above including allowing the display of information in the application display window if the indicated application is not already running. If the application corresponding to the clicked icon is already running application manager assigns the application display window to that application. In one embodiment application display manager manages the assignment or removal of an application to or from the application display window as described herein.

In one embodiment when a new or different application is loaded and run the application displayed in the application display window prior to the user clicking on the icon is terminated and in another embodiment that application continues to run but will not be able to display output or receive input in the application display window . In such embodiment only the most recently indicated application i.e. the one most recently selected by the user as described herein is able to display output or receive input via the application display window though the others that are started and have not terminated continue to operate in the background.

In one embodiment each application may allow the user to load and execute the one or more pods corresponding to the application using a user interface element provided by that application . In such embodiment when master controller instructs the managers to load the files as described above it binds the agent application and one or more pods together to allow them to interact as described herein. Each application may display a user interface element such as a push button that contains an icon in the application display window that is used to start or otherwise signal the one or more pods corresponding to that application. In one embodiment the icon is a standard icon to be used by all applications for this purpose or solely for this purpose. When the user uses the user interface element to indicate that the one or more pods corresponding to the application should be displayed in console application signals application communication manager which signals application shell communication manager of master controller which is shown in more detail in via master communication manager with the name or other identifier of the program to which the application corresponds. Application shell communication manager then signals console manager via console communications manager to load and install the one or more pods corresponding to the program as described above.

In one embodiment certain icons displayed in the installed programs area perform special functions and do not correspond to an installed application. If the user clicks on the icon installed program manager performs the functions. In one embodiment one such function includes instructing all agents to stop or start communicating with the network via input output as described above. If the user clicks the icon installed program manager signals agent manager via agent manager communications manager to block or allow via a toggle communications by agents such as agent to and from the network .

Another icon in the installed programs area suppresses or allows via a toggle mechanism alert messages from sounding an audible alert. If the user toggles the capability installed program manager signals master controller to toggle the capability either on or off. Agents applications and pods described below can cause an audible alert via messages they send to master controller via their respective managers . Master controller sounds the alert by signaling operating system to generate an audible sound only if the capability is enabled at the time the alert is generated and does not sound the alert otherwise.

Another icon in the installed programs area causes installed program manager to run a preinstalled special application that has no pod or agent and that displays the other programs installed allows a user to run each of them or stop each of them or uninstall any of them. If the user instructs the special application to run or stop a program the special application signals application communication manager which signals master communication manager both such signals containing the program name and whether the program is to be run or stopped. The signal is sent to master controller which signals the managers to load and execute the agent application or one or more pods corresponding to the program as described above or to stop operation of the program based on the signal and the managers comply.

If the user indicates to the special program that the program is to be uninstalled the special program sends a signal to stop that program as described above and then signals master controller to uninstall the program. Master controller deletes the files corresponding to the program such files being identified by their filename the manifest or via the list of files master controller compiles and stores in program storage as described above.

When started by master controller console manager displays console on display screen . Console may contain user interface controls that relate to the operation of console but does not contain any or more than one two or three controls that initiate the installation of one or more programs per control. In one embodiment only one such control is provided in the console and it only runs a program that can also be started from the installed programs area . This maintains the relatively small size of the console while allowing a relatively large amount of functionality from the console in the event that the applications shell is not displayed on the display screen . In one embodiment there is no more than one control on the console itself as opposed to being on windows within the console that control the operation of anything displayed in a window that is at least in part outside of the console on display screen and in another embodiment there are not more than one two or three such controls on the console itself although there may be such controls in the boundaries of the console such as in the pod viewers or pods for example.

Console controls described above and described in more detail below are handled by managers each of which will now be described.

In one embodiment control is a push button control that allows the user to view detailed information about installed applications that are displayed by installed program manager as described above. If the user selects the control which may be a conventional push button operating system signals application display manager . Application display manager signals via master controller communication manager console communication manager of master controller which signals via application shell communication manager installed program manager to run the special application that displays a list of installed programs and additional detailed information about each such program as may be available as described above and allows the user to start or stop the installed program or uninstall it as described above. The special application is displayed in the application display area as described above and not in the console . Control is a single control used to start stop or uninstall any program that may be started stopped or uninstalled as opposed to a control that starts stops or uninstalls an individual application which would otherwise require multiple controls on console to perform these functions for multiple applications cluttering it and enlarging it. In one embodiment the special application is not used to install an application. However in another embodiment it may be used to install an application. In this embodiment again a single console control would be used for all applications as opposed to employing multiple controls to operate multiple applications.

In one embodiment control causes all agents to start or stop communicating with the network as described above. If the user selects that control which toggles to start or stop in one embodiment operating system signals on off line control manager which signals master controller via master communication manager and console communication manager . Console communication manager signals agent manager which either prohibits or allows all agents of loaded programs to communicate with network or not communicate with network by toggling the status of such communications even if such status was last altered via a different control such as the push button in the installed programs area as described above.

In one embodiment control may additionally include one or more other controls such as a push button to toggle the audible alerts as described above. Alert manager receives an indication from operating system if the user selects that push button or other control and alert manager signals master controller that the audible alert status should be toggled as described above.

In one embodiment console may contain one or more pod viewers which each contain a title P title P title one or more controls a pod display area and may contain other controls providing a uniform appearance for the pods. One pod viewer is provided for each pod display window . Pod display windows for the pods from different programs may thus be arranged in the console for a uniform uncluttered appearance of the information from each of the pods. Each pod display area consists of a window in which a single pod displays information retrieved by the corresponding agent or allows the user to provide information e.g. via conventional user interface elements such as text boxes list boxes etc .

Pod viewers are generated by pod viewer manager for each pod that console manager is requested to load and execute as described herein. In one embodiment a pod viewer is a Flash movie that operates as described herein but in another embodiment a pod viewer may include computer code that operates as described herein or in a similar way. In one embodiment titles P title P title are retrieved by pod viewer manager from a program manifest corresponding to the pod and the titles display the name of the program. This means that if two pods are displayed for a given program their titles will be displayed the same in each pod viewer . Thus the titles P title P title represent the program name to which the pods correspond. This can help ensure that a user can identify the program corresponding to the pod display so that it cannot be faked. In another embodiment titles P title P title are provided by pod which may itself be a Flash movie or other computer code. Controls may be any conventional control such as a control that may be used to terminate the operation of a pod or remove its pod viewer from console . In this embodiment the titles P title P title do not display the program name although they can be if desired. Pod viewer manager causes each pod viewer to define a pod display window in which each pod may display information retrieved by the corresponding agent user interface elements to receive information or both of these.

There is one pod display for each pod running although a user can stop the pod from running or stop it from being displayed in a pod display window by clicking on control corresponding to the pod viewer being used to display the user interface of the pod . Thus if multiple programs are running a user can view more than one pod display window at a time in console . In contrast although more than one application shell may be run at the same time there is only a single application display window in each application shell and applications are viewed through it one at a time.

A pod display window has a width defined by pod viewer manager but a height that may be defined by the pod that is displaying information user interface elements or both in that pod display window subject to a minimum maximum or both that is defined by pod viewer manager . The width of each pod display window is the same as the others in the console and may be determined relative to the width of the console so that the user may change the widths of all of the pod display windows by changing the width of the console by dragging a side or corner or by using other conventional means of resizing a window although in another embodiment the width of the console is fixed. Console display manager displays and adjusts the boundaries of console to make it large enough to fit the viewers open and controls but little larger.

In one embodiment pod contains or is or is similar to a .swf formatted Flash movie that may perform various functions although other computer code may be used as a pod. As noted above a Flash movie is an animated movie but any set of instructions that can display information provide a user interface and receive information or both may be used as a pod .

Pod may obtain information to display to the user in a manner similar to that described above for application . For example pod may respond to remote procedure calls from the corresponding agent when agent has information for pod . The remote procedure call may contain the information itself which pod may internally store for display or the remote procedure call may contain a description of where such information is stored in program storage for retrieval by pod and pod may retrieve it and internally store it or use it where it is stored in program storage . Either agent or pod may format the information for use by the pod . It isn t necessary for the pod to receive information via a remote procedure call from agent . In other embodiments pod may request information via its own remote procedure call to agent or pod may retrieve information from program storage directly without contacting agent . Pod may also provide information to program storage or to agent or application or both via remote procedure calls to them.

Pod displays information such as information received as described above from agent in the pod display window assigned to pod by pods display manager . The display of such information may be in accordance with the configuration information received by the application as described above. Because the pod display windows are small relative to the size of the screen each pod may display the information in a series of screens that may either automatically change from one screen to another e.g. via one or more operating system timers set by pod or may change in response to the user using user input elements provided on the pod display window by pod or may change in response to either of these. In one embodiment the information displayed in pod display window by a pod may correspond at least in part to information displayed in the application display window by the corresponding application either simultaneously or at different times.

In one embodiment the information displayed by pod is a summary or a subset of the information displayed by its corresponding application . The information may be displayed by pod if it is the type of information for which it would be desirable to have such information accessible on display screen throughout the day and more detail about such information may be available via the related application that can be displayed in application display window at the same time or at different times as described herein. For example a program related to news may have an agent that retrieves news stores from a variety of sources and the program may display a single news headline and a short summary of the story in the pod window via its pod with multiple such summarized stories scrolling through the pod display window over time and a list of news stories more detail about the stories and links to a source of each complete news story being displayed in the application display window by the corresponding application .

In one embodiment a pod may be used to collect information and provide it to either the corresponding application or the corresponding agent for example for transmission to a server via network . Pod displays user interface elements to a user via pod display window and receives the user s response. Pod may provide the information received or other information corresponding to this information via a remote procedure call to procedures that are part of the corresponding agent or application . The information may be provided as part of the remote procedure call or calls or the information provided may be stored into program storage and the remote procedure call or calls may designate the location of the information in program storage . Application may receive such information either as part of the call or by retrieving it from program storage and alter a current or subsequent display in the application display window based upon the information. Agent may receive the information in the same or similar manner and provide it or other information related to it via network or may alter the information it provides to either application pod or both based on this information.

In one embodiment each pod may display in pod display window a user interface control with an icon that allows the user to launch the application or switch to it so that it is displayed in application display window if it is already running corresponding to the pod displaying the icon. In one embodiment such icon control or both are predefined and available to all pods via console manager so that the control and icon have a consistent look in every pod display window so that it is easy for a user to locate the control that performs that function. In one embodiment a similar arrangement is provided by application shell manager to allow the similar control and icon used by applications to have a similar look in one embodiment . In one embodiment the shape though not the size or color of the icon in the control used in the pod display window is approximately a mirror image of the shape of the icon in the control used in the application display window although in one embodiment the icon in one type of control is light colored on a dark background and the icon in the other type of control is dark colored on a light background and the shapes and sizes of the controls are different in each type controls being round and smaller than control which is larger and rectangular or square with rounded corners in one embodiment and in one embodiment the icons are made from arrows that point towards the window that the control affects.

With respect to controls when the user selects the control the pod that initiated its display signals pods communication manager which provides an identifier of the pod to master communication manager . Master communication manager signals master controller with the identifier of the pod . Master controller uses the identifier of the pod to identify the program to which the pod corresponds and signals application shell manager with an identifier of the application for the program or an identifier the program. Application display manager receives the identifier identifies the proper application from the program if necessary and launches if the application is not already running and runs in the application display window the application corresponding to the pod that initiated the signal. In one embodiment if application shell manager is not running master controller launches it and then signals it as described above.

The dashed lines in at the top of illustrate the communication capabilities between the agent application and one or more pods of an application program. Similar communication capabilities are in place between the elements of other programs including those illustrated behind elements but are not illustrated to avoid cluttering the Figure. Two programs are illustrated in the figure but any number of programs may be used.

A remote procedure call entails the transfer of program control currently executing one element of a program to allow the execution of the procedure specified in the call that is contained in another element . When the procedure finishes executing control may be automatically passed back to the element that made the remote procedure call or not passed back depending on the embodiment. In one embodiment master controller coordinates the program flow issues associated with the remote procedure calls.

There are many ways to implement a remote procedure call and any conventional method may be used. In one embodiment when the manager or executing the instructions encounters a remote procedure call it provides an identifier of the procedure to RPC manager of master controller . RPC manager saves the state of the machine and the identifier of the calling manager identifies the agent application or pod corresponding to the identifier of the remote procedure call and passes control to that procedure in the identified agent application or pod by directing the corresponding manager to begin executing it. When the procedure has finished control is passed back to RPC manager which identifies the manager that initiated the remote procedure call restores the preserved state and directs the identified manager to begin executing the instruction following the remote procedure call.

Referring now to a method of running one or more programs that communicate information such as via a network is shown according to one embodiment of the present invention. A boot loader is loaded for example in response to an operating system command and the boot loader loads a master controller as described above. The master controller loads and executes an agent manager application shell manager and console manager as described above. The application shell manager displays a list or other collection or description of installed programs. A command is received to run one of the programs displayed . The master controller is directed to run the program corresponding to the command. If the program corresponding to the command is running the method continues at step although in one embodiment not shown the application corresponding to the running program will be displayed in an application display window as described above and otherwise an agent and application are optionally identified for the program and the master controller directs an agent manager to run an agent corresponding to the program and the master controller directs the application shell manager to run the application corresponding to the program. Step may include running the application corresponding to the program in a window in which the application for another program is running and the application for the other program will thus no longer be visible in that window as described above.

In one embodiment information for the program is checked to determine whether one or more pods for the program should be run when the program corresponding to the command is started. If so the master controller directs the console manager to load and execute the one or more pod for the program corresponding to the command and step may include identifying the pod for the program and the method continues at step and otherwise the method continues at step . Step may include displaying the pod in addition to the display of other operating pods as described above.

Referring now to a method of executing an agent is shown according to one embodiment of the present invention. An optional wait period may be employed and information is retrieved from or provided over a network to or from one or more sources or destinations optionally according to configuration information and stored . If the communication of such information corresponds to a notification event as described above information corresponding to that communicated is formatted and a remote procedure call is optionally made to an application corresponding to the agent communicating the information one or more pods corresponding to the agent communicating the information or all of these and the method continues at step and otherwise the method continues at step .

Referring now to a method of responding to a remote procedure call for an agent is shown according to one embodiment of the present invention. The remote procedure call is received . The remote procedure call received may be a remote procedure call that provides configuration or other information not to be transmitted over a network or may correspond to information that is to be retrieved or transmitted over a network. If the remote procedure call corresponds to information to be communicated over a network the information may be optionally retrieved according to information in the remote procedure call or it may be contained therein optionally formatted and provided or retrieved over the network and control is returned to the entity that made the call .

If the remote procedure call corresponds to information not to be communicated over the network such as configuration information configuration information or other information is altered according to the remote procedure call and control is transferred to the entity that made the call . The retrieval storage and formatting of information of may be performed in response to the configuration information received via a remote procedure call or otherwise received.

Referring now to a method of executing an application is shown according to one embodiment of the present invention. The steps of may be performed as a result of step of or step of as indicated by the dashed line in and . An initial display of the application information is made in a window used for applications for one or more programs with the information for a single program being displayed at a time in the window as described above and replacing any display of information from another application that was being made in that same window.

An event may be received . If the event is a remote procedure call indicating information has been received information corresponding to the remote procedure call is received or retrieved and incorporated into the display for the application either immediately or at some future time . The remote procedure call may be a remote procedure call of the type described in step of as described above. The method continues at step . Step may be performed in response to a timer instead of or in addition to a remote procedure call and may include generating one or more remote procedure call as described above.

If the event is an event corresponding to a change of configuration e.g. because the user has requested such a change using the window in which the application is displayed or otherwise configuration information is received incorporated into the display either immediately or at a future time and one or more remote procedure calls may be generated corresponding to the configuration information and sent to one or more agents and or one or more pods and the method continues at step .

If the event corresponds to the receipt of information that should be sent over the network a remote procedure call corresponding to the information to be sent is generated and sent to one or more agents and the method continues at step although in another embodiment the information to be sent is merely stored and no remote procedure call is generated as part of step .

If the event corresponds to a signal to a pod a signal is generated to an application shell under which the application runs the application shell signals a master controller under which the application shell and one or more pods will run the master controller identifies the one or more pods corresponding to the application and signals a console to run the one or more pods identified and the console runs the one or more pods corresponding to the signal and the method continues at step . Pods are run using a display window not in use by another pod at the time the pod is run in one embodiment.

If the event corresponds to a signal to change the display the display is changed according to the signal and the method continues at step . In one embodiment the signal is a user supplied signal corresponding to a user interface element and in another embodiment the signal is a timer signal and in still another embodiment either type of signal may be used. If a timer signal is employed steps and may include setting or resetting the timer.

Referring now to a method of executing a pod is shown according to one embodiment of the present invention. The steps of may be performed as a result of the performance of steps of or of as shown by the dashed lines of and . An initial display of the pod information is made in a window not used for pods of other programs.

An event may be received . If the event is a remote procedure call indicating information has been received information corresponding to the remote procedure call is received or retrieved and incorporated into the display for the pod either immediately or at some future time . The remote procedure call may be a remote procedure call of the type described in step of as described above. The method continues at step . Step may be performed in response to a timer instead of or in addition to a remote procedure call and may include generating one or more remote procedure call as described above.

If the event is an event corresponding to a change of configuration e.g. because the user has requested such a change using the window in which the application is displayed or otherwise configuration information is received incorporated into the display for the pod either immediately or at a future time and one or more remote procedure calls may be generated corresponding to the configuration information and sent to one or more agents and or one or more pods and the method continues at step .

If the event corresponds to the receipt of information that should be sent over the network a remote procedure call corresponding to the information to be sent is generated and sent to one or more agents and the method continues at step although in another embodiment the information to be sent is merely stored and no remote procedure call is generated as part of step .

If the event corresponds to a signal to start or display an application a signal is generated to the console under which the pod runs the console signals a master controller under which the console and the corresponding application will run the master controller identifies the application corresponding to the pod and signals the application shell manager to run the application identified and the application shell runs the application corresponding to the signal and the method continues at step .

If the event corresponds to a signal to change the display the display is changed according to the signal and the method continues at step . In one embodiment the signal is a user supplied signal corresponding to a user interface element and in another embodiment the signal is a timer signal and in still another embodiment either type of signal may be used. If a timer signal is employed steps and may include setting or resetting the timer.

Referring now to a method of displaying information from multiple programs is shown according to one embodiment of the present invention. A console and console controls are displayed on a display screen as described above. The console controls may be displayed within the console but not in the pod viewers or pod information. Two or more pod viewers and one or more associated controls in each pod viewer are displayed in the console as described above thereby providing a uniform appearance among the pod viewers. Pod information from different programs is displayed in at least some of the pod viewers as described above which because the pod viewers have a uniform appearance provides a uniform appearance of the area in which the pod information is displayed. Information from one or more of these programs is also displayed in any number of additional pod viewers.

Configuration information for a program or information of a program related to the information being displayed by one or more pods from one program is displayed in a window separate from the console and larger than any of the pod viewers. Configuration information is received from a user via the larger window as described above. The display of pod information in the pod viewer that is associated with the program corresponding to the larger display is altered in accordance with the configuration information either because the information is different or the formatting of the information is different as specified by the configuration information received in step . A command is received to display information about a different application is received either in the larger window or from a user interface control such as a push button control displayed with the pod information. The information in the larger window is replaced by information from a different program either configuration information information related to the pod information from a different program or both. Configuration information for the different program is received in the larger window and the pod information displayed in the console and corresponding to the other program is altered in accordance with the configuration information received in step .

