---

title: System and method for profiling processes in a computing system
abstract: A system and method for managing the environment of software processes in a computer system. A computer system comprises a processor and at least one process environment comprising one or more environment variables. The processor executes one or more processes, intercepts the launch of a process, sets at least one environment variable to a first value, and continues the launch of the process. Setting the environment variable may enable a profiler process. The processor may set at least one environment variable for the process to a value which is chosen irrespective of a value of the environment variable of a parent process of the process. Further, the processor may set at least one environment variable for the process to a default value if a data repository does not contain an entry that has an identification which corresponds to the process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07725882&OS=07725882&RS=07725882
owner: Symantec Operating Corporation
number: 07725882
owner_city: Mountain View
owner_country: US
publication_date: 20050930
---
This invention relates to computer processes and more particularly to managing the profiling of processes.

In order to gain a fuller understanding of the operation of software processes it is common to employ any of a variety of monitoring profiling and or analysis programs in conjunction with the software processes to be understood. Such monitoring profiling and analysis programs which for simplicity may collectively be referred to as profilers are available from many vendors or may be custom made for specific applications. It is generally desirable to be able to profile selected processes as well as to select specific profilers to operate with selected processes. Therefore some mechanism for identifying processes and profilers and associating one with the other may be desired. Existing operating system software may provide environment variables through which profiling and profiling processes may be specified. However each process may have its own individually set environment variables the values of which may be determined by the process itself or a parent process from which the profiled process is launched. Since the profiled process and the profiler may be written by different programmers or come from different vendors the environment variable settings of any given process may not conform to the settings desired by the profiler.

For example software systems such as Microsoft s .NET framework and Windows operating system may enable programs and processes to provide dynamic and interactive web pages such as Active Server Pages ASP . As applications and processes based on .NET technology proliferate the desire to monitor and profile the operation of these applications and processes has increased. The .NET framework includes a profiling Application Program Interface API which allows application programmers to write an application e.g. a profiler that can monitor the operation of applications running within the .NET framework. Such a profiler may monitor resource usage interactions between processes and the operating system or the .NET framework exception handling etc.

To enable a profiler to monitor a process the .NET profiling API uses environment variables sometimes referred to as envars that are provided by the underlying operating system. One environment variable COR ENABLE PROFILING may be used to determine whether profiling is enabled. A second environment variable COR PROFILER may be used to specify a particular profiler to be used. The values of these environment variables at the time the process is launched determine if and how the process will be profiled. In the case of applications for which the source code is readily available and may be modified the program may set the environment variables itself. However in many cases it is difficult to change the environment variables between process launches. For example a system reboot may be required to have new environment variable settings take effect if the process is a system service. Also the source code for a given application e.g. third party applications may not be available. Consequently it may not be possible or practical to modify an application to set particular environment variables.

Consequently a method and mechanism for managing the environment variables and the profiling of processes is desired.

Various embodiments of a system and method are disclosed. In one embodiment a computer system comprises a processor and at least one process environment comprising one or more environment variables. The processor is configured to execute one or more processes intercept the launch of a first process set at least one environment variable of the environment variables to a first value and continue the launch of the first process.

In a further embodiment setting the environment variable enables a profiler. In a still further embodiment the processor is configured to enable profiling in response to detecting that the at least one environment variable has a first value and disable profiling in response to detecting that the at least one environment variable has a second value or is not set.

In a still further embodiment the processor is configured to set at least one environment variable for the first process to a value which is chosen irrespective of a value of the at least one environment variable of a parent process of the first process. In a still further embodiment the processor is configured to set at least one environment variable for the first process to a default value responsive to detecting that the data repository does not contain an entry that has an identification which corresponds to the first process

These and other embodiments will become apparent upon reference to the following description and accompanying figures.

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed descriptions thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

The following description is presented to enable one of ordinary skill in the art to make and use the invention. Descriptions of specific embodiments and applications are provided only as examples and various modifications will be readily apparent to those skilled in the art. The general principles described herein may be applied to other embodiments and applications without departing from the scope of the invention. Thus the present invention is not to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features described herein.

Processor may be configured to execute instructions and to process data according to a particular instruction set architecture ISA . In one embodiment processor may be configured to implement an x86 compatible ISA although in other embodiments it is contemplated that any desired ISA may be employed such as the SPARC V9 ISA PowerPC compatible ISAs or MIPS compatible ISAs for example. SPARC is a registered trademark of Sun Microsystems Inc. PowerPC is a registered trademark of International Business Machines Corporation MIPS is a registered trademark of MIPS Computer Systems Inc. .

In various embodiments memory may comprise any suitable type of system memory as described above such as FB DIMM DDR DDR2 SDRAM or RDRAM for example. Memory may include multiple discrete banks of memory. Also in some embodiments memory may include multiple different types of memory.

In some embodiments computer may include more than one instance of the devices shown such as more than one processor for example. In various embodiments computer may be configured as a rack mountable server system a standalone system or in any other suitable form factor. In some embodiments computer may be configured as a client system rather than a server system.

In one embodiment processor may be configured to run operating system software such as Microsoft Windows IBM AIX or Sun Microsystems Solaris. Operating system software may in turn provide an environment in which processor may execute additional software modules in the form of applications programs or processes designed to perform specific functions. Running operating system software or software modules may comprise executing instructions that are stored in memory .

Software modules that may be executed by processor may include in one embodiment client server software such as a web server or a web browser. Alternatively or in addition processor may execute software modules comprising network management software office productivity tools e mail programs etc. Many other types of software may be executed such as a virtual machine runtime environment a database an application server and diagnostic monitoring profiling or analysis software. Furthermore while executing such software processor may retrieve data from and store data in non volatile storage or in memory . In one embodiment one or more software processes may perform the function of profiling other software processes during operation gathering and storing data indicative of the operation of one or more of the other software processes. Alternatively profiling of a process may be achieved by linking a profiling library into the target process itself.

During operation environment may affect the execution of process in a variety of ways. For instance environment may specify the location of data storage to be used by process . Alternatively or in addition environment may specify a level of debugging support to be implemented while process is operating. Also environment may specify whether or not various auxiliary processes may operate in conjunction with process . For example in one embodiment environment may specify that a profiler may be linked to process as a dynamic link library DLL to monitor and gather statistical data related to the use of system resources exception generation interaction with other processes method invocation performance metrics or any other profiling data for process . In an alternative embodiment environment may specify that process may be launched in conjunction with the launch of process to profile process .

In the embodiment shown in system software may take a snapshot of the settings of environment that affect the operation of process at the time process is launched. Subsequently other processes may be launched and other snapshots of environment that are different from those that apply to process may be established. Different processes may have different settings for environment that may be set by a parent process or other high level software modules such as an application server prior to process launch. In one embodiment the parent process which sets the values of environment for process is the process which spawns process . However it may be desired to change environment for a given process according to settings that are different from those set by the parent process or other high level software module. In normal operation system software may provide a local environment for a newly launched process that is inherited from the parent process of process . Various difficulties stand in the way of modifying the environment settings for a process after it is launched. For example if process is a system service then system software may require a system reboot before new environment settings take effect. However rebooting a system may be undesirable due to the time involved and the effect on other processes that may be running at the same time. Also the parent process that establishes the environment settings for process may be part of a third party application that was not written with the capability of modifying environment settings and whose code is not easily enhanced by the user. Consequently the parent process of process may not be capable of modifying the environment settings as desired by the user of process .

In one embodiment it may be desired to modify the local environment of a process e.g. an environment inherited from a parent process with one or more overriding global environment settings. In order to modify the settings of environment for a given process processor may take advantage of a launch interception process provided by system software . In operation launch interception process may detect a process launch and cause process to retrieve environment settings e.g. from a configuration file . In alternative embodiments values of environment variables may be retrieved from one of a variety of data repositories other than a configuration file. For example environment variable values may be retrieved from a system registry retrieved by querying a remote server or any other suitable means. In the following discussion whenever environment settings are described as being retrieved from configuration file it is assumed that each of these alternatives or other alternatives are also possible and are contemplated.

Once the values of the retrieved environment settings have been retrieved they may be applied to process . Having thus established environment the launch may be completed. For example the local environment associated with the parent process of process may specify that profiling be disabled while global values in configuration file may specify that process is to be profiled and may identify a particular profiler to be used. When process is launched launch interception process may detect the launch process may read environment settings for process from configuration file and transfer the settings to environment including a setting specifying that a particular profiling DLL be linked to process . Alternatively the local environment associated with the parent process of process may specify that profiling be enabled while global values in configuration file may specify that profiling be disabled for process . In that case when process is launched launch interception process may detect the launch process may read environment settings for process from configuration file and transfer the settings to environment including a setting specifying that profiling be disabled for process . In the case of any local and global environment settings that are the same the functions performed by launch interception process and process may not change those environment settings. System software may in one embodiment ensure that the modification of environment by launch interception process is completed before other processes that utilize environment settings become operational.

Separate environment settings may be established for any number of processes in this manner. Any process for which the launch may be intercepted by launch interception process may receive its own environment . In one embodiment configuration file may contain a list of one or more processes identified by name or some other identifying attribute along with corresponding environment settings desired for each process in the list. A process for which a name or other identifying attribute is not included in the configuration file may receive certain default settings. For example process may be configured to apply default settings which may comprise system wide default settings to environment for a process that is omitted from the list of configuration file . Alternatively process may be configured to simply ignore environment settings for a process that is not identified in configuration file . In an alternative embodiment although a given process may be identified in configuration file one or more environment variables may be omitted from the entry corresponding to the given process. In that case process may be configured to apply default settings to environment or ignore environment settings for the given process that is for a process for which a value of an environment variable is not set.

Also shown are a configuration file and a log file . Process may be for example an active server page ASP conforming to the ASP.NET specification. Windows may be one of Windows 98 Windows 2000 Windows XP or any other version of the Windows operating system with which .NET framework is compatible. In one embodiment .NET framework includes a .NET profiling application programming interface API . Profiler may be a DLL written to use the functionality provided by the .NET profiling API and configured to profile process .

As further illustrated in Windows may include environment variables envars a User32.dll and a list of AppInit DLLs . Envars are environment variables used by Windows to establish an operating environment for each process that is launched. User32.dll is a dynamic link library that may be linked to user defined processes at the time of launch such as process that utilize the Windows user interface functionality.

In operation during the launch of process Windows may assemble various files with process into an executable file or library in a procedure referred to as dynamic linking. Specifically in one embodiment Windows may link process to User32.dll . As part of the linking procedure for a windows process User32.dll may execute a process known as DLL PROCESS ATTACH that includes execution of a LoadLibrary function. LoadLibrary may load and initialize DLLs that are listed in AppInit DLLs . Appinit DLLS may include user specified DLLs etc. that may be dynamically linked to a process during initialization. In the illustrated embodiment one of the Appinit DLLs is an interception.dll . Interception.dll may be configured to read a set of values for environment variables from configuration file and set the environment variables for process according to these values. Two environment variables in particular may control profiling of process . The first COR ENABLE PROFILING enables or disables profiling of process . For example setting COR ENABLE PROFILING may enable profiling and clearing COR ENABLE PROFILING may disable profiling. The second COR PROFILER may be used to identify a particular profiler such as profiler which is to be linked to and used for profiling process . Accordingly interception.dll may retrieve and set values for environment variables COR ENABLE PROFILING and COR PROFILER that apply to process during the launch procedure.

It is noted that changing the value of COR PROFILER may enable an application to override one profiler with another profiler or select a profiler based on the data collected by another profiler. It is further noted that in various embodiments selected profiling environment variables may be either set or cleared by default on a system wide basis and then overridden for one or more specific processes via entries in configuration file . Once profiling of process has been enabled and the launch of process completed profiler may store profile data for process in a log file .

In one embodiment interception.dll may consult configuration file during the launch of tens or even hundreds of processes. In order to avoid the delay of reading from non volatile storage Windows may maintain a copy of configuration file in memory for faster access.

In alternative embodiments process launch may be intercepted and environment variables set by a variety of mechanisms other than using AppInit DLLs. For example any operating system kernel level interception mechanism such as those used by virus detection software may be used. Alternatively a higher level process launch interception mechanism may be used.

It is noted that the above described embodiments may comprise software. In such an embodiment the program instructions which implement the methods and or mechanisms may be conveyed or stored on a computer readable medium. Numerous types of media which are configured to store program instructions are available and include hard disks floppy disks CD ROM DVD flash memory Programmable ROMs PROM random access memory RAM and various other forms of volatile or non volatile storage.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

