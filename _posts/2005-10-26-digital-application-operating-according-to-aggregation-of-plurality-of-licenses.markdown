---

title: Digital application operating according to aggregation of plurality of licenses
abstract: A plurality of digital licenses correspond to a piece of content, including a base license and at least one add-on license. Each add-on license includes a reference to the base license, and each of the base license and each add-on license sets forth rules specifying how the content may be employed. Each add-on license is identified by way of the reference therein to the base license, and the rules in the base license and in each identified add-on license are aggregated into an aggregated set of rules that is evaluated to determine if such aggregated set of rules allows employing the content in a particular manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07747533&OS=07747533&RS=07747533
owner: Microsoft Corporation
number: 07747533
owner_city: Redmond
owner_country: US
publication_date: 20051026
---
This application claims the benefit of U.S. Provisional Application No. 60 699 143 filed Jul. 14 2005 and entitled HIERARCHY AND EVALUATION OF ADD ON LICENSES hereby incorporated by reference in its entirety.

The present invention relates to a digital application or the like operating on a computing device or the like according to rights and conditions set forth in a digital license or the like. More particularly the invention relates to a plurality of such licenses that have been aggregated to in effect form a super set of rules and rights according to which the application operates.

Rights management and enforcement is highly desirable in connection with digital content such as a digital application or the like where such digital application is to be distributed to one or more users. Typical modes of distribution include tangible devices such as a magnetic floppy disk a magnetic tape an optical compact disk CD etc. and intangible media such as an electronic bulletin board an electronic network the Internet etc. Upon being received by the user on a computing device thereof such user can activate the application with the aid of an appropriate operating system on the computing device.

Typically an author and or publisher of the application wishes to distribute such application to each of many users or recipients in exchange for a license fee or some other consideration. In such scenario then the application may be a word processing application a spreadsheet application a browser application a gaming application a media player application a combination thereof and the like. Such author publisher or other similar entity hereinafter publisher given the choice would likely wish to restrict what each user can do with such published application. For example the publisher would like to restrict the user from copying and re distributing such application to a second user at least in a manner that denies the publisher a license fee from such second user.

However after publication has occurred such publisher has very little if any real control over the application. This is especially problematic in view of the fact that practically every personal computer includes the software and hardware necessary to make an exact digital copy of such application and to download such exact digital copy to a write able magnetic or optical disk or to send such exact digital copy over a network such as the Internet to any destination.

Of course as part of a transaction wherein the application is distributed the publisher may require the user recipient of the application to promise not to re distribute such application in an unwelcome manner. However such a promise is easily made and easily broken. A publisher may attempt to prevent such re distribution through any of several known security devices usually involving encryption and decryption. However there is likely very little that prevents a mildly determined user from decrypting an encrypted application saving such application in an un encrypted form and then re distributing same.

Rights Management RM and enforcement architectures and methods have previously been provided to allow the controlled operation of arbitrary forms of digital applications where such control is flexible and definable by the publisher of such application. Typically a digital license is provided to operate the application where the application cannot be actuated in a meaningful manner without such license. For example it may be the case that at least a portion of the application is encrypted and the license includes a decryption key for decrypting such encrypted portion. In addition it may be the case that the license is tied to a user or a computing device thereof and such computing device includes a security feature that ensures that the terms of the license are honored.

Such a digital license typically includes a set of rights and conditions that govern use of the corresponding application on the computing device. Thus each license sets forth policies that grant certain rights for specified functionality. With digital licenses then a publisher can provide a user with different rights with regard to an application by providing different licenses corresponding to such different rights. For example the publisher may wish to provide a full featured edition of the application at a higher price and a rudimentary edition at a lower price. Likewise the publisher may wish to offer an edition with a certain first feature and an edition without an edition with a certain second feature and an edition without an edition with a certain third feature and an edition without etc.

Note though that in the prior art because each variation of rights in an application would require a completely separate license offering arbitrary combinations of rights to users was a difficult matter inasmuch as the number of arbitrary combinations of such rights could easily number in the tens hundreds and thousands and each arbitrary combination of rights would require a separate type of license. For example a publisher wishing to offer an application with five two state rights rights that are either present or absent e.g. would have to prepare 2 to the 5power or 32 different types of licenses. Likewise a publisher wishing to offer an application with four two state rights and two three state rights rights that are present limited or absent e.g. would have to prepare 2 to the 4power times 3 to the 2power or 144 different types of licenses.

As should be appreciated then greater complexities of variations of an application would result in greater numbers of different types of licenses. However and significantly it is likely difficult if not impossible for a publisher of such an application to offer more than a limited number of types of such licenses perhaps on the order of ten to thirty or so. Quite simply to offer each type of license would require the publisher to maintain each type including updating and modifying same as necessary and such maintenance can easily become an overwhelming task as the number of types increases.

Accordingly a need exists for a method and mechanism by which a publisher or the like of an application or the like can offer by way of a digital licensing scheme arbitrary combinations of rights to users or the like where the number of different types of licenses representing such rights is minimized. In particular a need exists for such a method and mechanism by which particular rights or groups of rights with regard to the application are represented by separate digital licenses for the application and a user obtains one or more of such licenses to correspondingly obtain the rights or groups of rights collectively represented thereby. As a result the number of different types of licenses for the application is minimized.

The aforementioned needs are satisfied at least in part by the present invention in which a method is provided to employ a piece of digital content on a computing device in a particular manner. In the method a plurality of digital licenses corresponding to the content are obtained where the plurality of licenses includes a base license and at least one add on license. Each add on license includes therein a reference to the base license and each of the base license and each add on license sets forth rules specifying how the content may be employed.

The base license is identified and each add on license is identified by way of the reference therein to the base license and the rules in the base license and in each identified add on license are aggregated into an aggregated set of rules. The aggregated set of rules is then evaluated to determine if such aggregated set of rules allows employing the content in the particular manner and the content is employed if the aggregated set of rules so allows.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of co processing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline s .

It can also be appreciated that an object such as may be hosted on another computing device or . Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wireline or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides the infrastructure for widely distributed computing and encompasses many different networks.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11b or wired e.g. Home PNA Cat 5 even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently moving forward computing devices will require ways of protecting content at all portions of the data processing pipeline.

The Internet commonly refers to the collection of networks and gateways that utilize the TCP IP suite of protocols which are well known in the art of computer networking. TCP IP is an acronym for Transport Control Protocol Interface Program. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the example of computers etc. can be thought of as clients and computer etc. can be thought of as the server where server etc. maintains the data that is then replicated in the client computers etc.

A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server.

Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example Hypertext Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW . Typically a computer network address such as a Universal Resource Locator URL or an Internet Protocol IP address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example communication can be provided over a communications medium. In particular the client and server may be coupled to one another via TCP IP connections for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with a server in communication with client computers via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process store or render secure content from a trusted source.

In a network environment in which the communications network bus is the Internet for example the servers can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers may also serve as clients as may be characteristic of a distributed computing environment. Communications may be wired or wireless where appropriate. Client devices may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer and server computer may be equipped with various application program modules or objects and with connections or access to various types of storage elements or objects across which files may be stored or to which portion s of files may be downloaded or migrated. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other devices and databases .

As is known and referring now to rights management RM and enforcement is highly desirable in connection with a digital application or other content that is to be distributed to users. Upon being received by the user such user instantiates the application with the aid of an appropriate computing device or the like.

Typically an application author or publisher hereinafter publisher distributing such digital application wishes to restrict what the user can do with such distributed application . For example the publisher may wish to restrict the user from copying and re distributing such application to a second user or may wish to allow distributed application to be actuated only a limited number of times only for a certain total time only on a certain type of machine only on a certain type of rendering platform only by a certain type of user etc.

However after distribution has occurred such publisher has very little if any control over the application . An RM system then allows the controlled actuating of an application where such control is flexible and definable by the publisher of such application . Typically the application is distributed to the user in the form of a package by way of any appropriate distribution channel. The package as distributed may include the application or a portion thereof encrypted with a symmetric encryption decryption key KD i.e. KD AP as well as other information identifying the application how to acquire a license for such application etc.

The trust based RM system allows the publisher of the application or another to specify rules that must be satisfied before such application is allowed to be actuated on a user s computing device . Such license rules can for example include the aforementioned temporal requirement and or number of times requirement among other things and may also set forth rights that the user has with regard to the application such as for example the ability to print or copy and or the ability to use a particular feature of the application among other things. At any rate such rules may be embodied within a digital license or use document hereinafter license that the user user s computing device such terms being interchangeable unless circumstances require otherwise must obtain from the publisher or an agent thereof. Such license also includes the decryption key KD for decrypting the encrypted portion of the application perhaps encrypted according to a key decryptable by the user s computing device . As seen in such encrypting key may be a public key of the user s computing device PU BB and the user s computing device presumably has the corresponding private key PR BB by which PU BB KD may be decrypted.

The publisher for the application must trust that the user s computing device will abide by the rules specified by such publisher in the license i.e. that the application will not be actuated unless the rules within the license are satisfied and that the user is only permitted to employ the rights set forth in the rules. Preferably then the user s computing device is provided with a trusted component or mechanism that will not actuate the application except according to the license rules embodied in the license associated with the application and obtained by the user.

The trusted component typically has a license evaluator that determines whether the license is valid reviews the license rules in such valid license and determines based on the reviewed license rules whether the requesting user has the right to actuate the corresponding application in the manner sought among other things. As should be understood the license evaluator is trusted in the RM system to carry out the wishes of the publisher of the application according to the rules in the license and the user should not be able to easily alter such trusted element for any purpose nefarious or otherwise.

As should be understood the rules in the license can specify whether the user has rights to actuate the application based on any of several factors including who the user is where the user is located what type of computing device the user is using what operating system is calling the RM system the date the time etc. In addition the rules of the license may limit the license to a pre determined number of actuations or pre determined operating time for example. Thus the trusted component may need to refer to a clock on the computing device .

The rules may be specified in the license according to any appropriate language and syntax. For example the language may simply specify attributes and values that must be satisfied DATE must be later than X e.g. or may require the performance of functions according to a specified script IF DATE greater than X THEN DO . . . e.g. .

Upon the license evaluator determining that the license is valid and that the user satisfies the rules therein the application or a relevant portion thereof can then be actuated. In particular to actuate the application the decryption key KD is obtained from the license and is applied to KD AP from the package to result in the actual application and the actual application is then in fact actuated in the manner set forth in the license .

As set forth above the license with PU BB KD in effect authorizes an entity in possession of PR BB to access KD and thereby access the application encrypted according to such KD presuming of course that the entity abides by all conditions as set forth in the license . As should be appreciated though other types of licenses may exists within the RM system .

For example it may be appreciated that in one scenario the publisher of the application may authorize one or more particular licensors to issue a license for the application by providing the licensor with a publishing license . As may be appreciated such publishing license is similar to the license in that such publishing license likely includes the decryption key KD for decrypting the application here encrypted according to a public key of the licensor PU BB . Likewise the publishing license likely includes the rules for rendering the content . Here however such rules are to be inserted into the license as issued by the licensor and are not especially applicable to such licensor .

Note though that the publishing license may indeed include other rules that are indeed applicable to the licensor . Accordingly the licensor should include a trusted component with a license evaluator in a manner akin to the user s computing device . Significantly each type of license etc. hereinafter license as proffered typically includes a digital signature for authentication verification purposes and each digital signature is validated by the trusted component before the license is honored. Of course if any validation fails the process ends and the license is not honored.

As was set forth above a publisher may wish to provide a user with the flexibility to separately purchase different sets of rights with regard to a particular application or the like whereby the user would accumulate and aggregate the different sets of rights as needed to operate the application in the manner sought. For example the publisher may wish to provide the right to print in a first type of license separately from the right to copy in a second type of license and likewise may wish to provide both the right to play sound on a speaker and video on a monitor in a third type of license and further likewise may wish to provide a minimal set of rights in a fourth type of license . Thus the user to operate the application in a minimal manner would obtain the fourth type of license and if need be would obtain and add on any or all of the first second and third types of licenses as the corresponding rights are needed or desired.

As should be appreciated then and in the present invention the application is operated according to rights set forth in one or more licenses at any one time where the rights and other rules in the licenses are in effect aggregated to form a super set of rules and rights with regard to the application . Such aggregated super set of rules and rights is to be distinguished from the prior art where the application was operated based on one and only one license at any one time.

As a more concrete example consider an instance where an application is installed on a computing device to include a basic start up or base license that provides a user of the application at the computing device with basic rights such as for example the right to instantiate the application the right to operate the basic functions of the application and the right to print from the application but not other rights such as for example the right to copy data from the application elsewhere. In addition the base license may be intended to give the user a preview of the application without purchasing same but only for a period of fifteen days. In such a case the license may at least conceptually appear as 

Note that the above base license sets forth rights in a positive manner only and thus does not set forth rights that have not been provided such as the right to copy data. However such rights could instead be set forth both in a positive and negative manner without departing from the spirit and scope of the present invention.

More importantly it is to be noted that in addition to the rights information and the expiration date information the above base license sets forth hierarchy information including a family id attribute set to base and a parent attribute set to null. In one embodiment of the present invention such family and base attributes are employed to define the place of the above base license within a hierarchy of licenses that collectively may in effect be combined so as to aggregate the rules therein. In particular the family id attribute base is employed to identify the above base license as base and the null parent attribute shows that base has no parent and therefore is a base license .

With the above base license then and as an example if at some point after the fifteen day preview of the application the user wishes to obtain the right to use the application for a year such user may obtain an appropriate license containing such right as an addition to the base license where the rights set forth in such add on license are in effect to be added on to the rights set forth in the base license 

Note that the above add on A license sets forth no additional rights but instead only sets forth that the expiration date of the application is now 365 days or one year after first use of such add on A license . Note too that the Add on A license sets forth hierarchy information including a family id attribute set to Add on A and a parent attribute set to base. Thus the family id attribute add on A is employed to identify the add on A license as add on A and the parent attribute base shows that the base license identified as base is the parent of the add on A license .

In a similar manner if at some point the user wishes to obtain the aforementioned right to copy such user may obtain another appropriate license containing such right as an addition to the base license where the rights set forth in such add on license are in effect to be added on to the rights set forth in the base license 

Note that the above add on B license sets forth only the right to copy without any change to the expiration date. Note too that the Add on B license sets forth hierarchy information including a family id attribute set to Add on B and a parent attribute set to base. Thus the family id attribute add on B is employed to identify the add on B license as add on B and the parent attribute base shows that the base license identified as base is the parent of the add on B license .

Also in a similar manner if at some point the user wishes to obtain the right to use the application for ten years such user may obtain an appropriate license containing such right as an addition to the add on A license where the rights set forth in such add on license are in effect to be added on to the rights set forth in the base license and the add on A license 

Note that the above add on C license sets forth no additional rights but instead only sets forth that the expiration date of the application is now ten years after first use of such add on C license . Note too that the Add on A license sets forth hierarchy information includes a null family id attribute and a parent attribute set to add on A. Thus the null family id attribute prevents the Add on C license from being identified within the hierarchy with the result being that no other license can employ same as a parent and the parent attribute add on A shows that the base license identified as base is the parent of the Add on C license .

As may be appreciated based on the hierarchy information in all the above licenses a tree representing the overall hierarchy of such licenses may be developed as is shown in . Such tree and the hierarchy represented thereby provide at least two features. Firstly each license within the hierarchy can only be employed if such license is present and if the parentage of such license is present all the way back to the base license . Thus and as an example if the user obtained the base license and the Add on C license but not the Add on A license such Add on C license would be inoperative as not being linked to the base license by way of the Add on A license .

Secondly the positions of the licenses within the hierarchy may be employed to negotiate conflicts between rules and rights in such licenses . For example it may be the case that one license within the hierarchy specifically provides a particular right while another license within the hierarchy specifically denies the particular right. In such a case the conflict between the licenses might be resolved according to pre determined conflict rules that could at least in part depend on the respective positions of the licenses within the hierarchy. For example such rules may state that a child license supersedes a parent license or that a younger sibling license supersedes an older sibling license . As may be appreciated such conflict rules may be any appropriate conflict rules without departing from the spirit and scope of the present invention. Such conflict rules are generally known to the relevant public and therefore need not be set forth herein in any detail.

As may now be appreciated by using base licenses and add on licenses in the manner set forth above a publisher or licensor or the like can modify rules and rights therein granted by a specific base license with additional or altered rules and rights therein in one or more add on licenses . Note here that such a modification can include revoking restricting removing deleting and otherwise affecting rights in addition to adding and otherwise changing existing rights. With an add on license then new functionality for an application or other piece of content can be distributed sold provided separately at a later time without the considerable time and expense of having to re distribute the application or a license therefore.

Generally an add on license can modify any rule of any previous generation parent grandparent etc. license including any rights and conditions set forth therein without departing from the spirit and scope of the present invention. For example it may be the case that a base license grants rights that are relatively basic for only a minimal cost and for a relatively short period of time of use and allows only a limited amount of memory on the computing device to be used. In such case one or more available add on licenses for the base license may extend the rights granted to a relatively broader scope one or more available add on licenses for the base license may extend the period of time of use and one or more available add on licenses for the base license may extend the amount of memory to be used. Of course other add on licenses could offer combinations of such rights.

Note that within any hierarchy of licenses such as that shown in more than one base license potentially may be available. Correspondingly it may be the case that an add on license specifies more than one parent. In such a situation it may be the case that only one base license of the hierarchy and add on licenses thereof are selected for use in connection with an application . Alternatively it may be the case that more than one or all of the base licenses of the hierarchy and add on licenses thereof are selected for use in connection with an application .

Note too that an add on license may effectuate rights in an application that are secured by a decryption key KD contained within such add on license or may effectuate rights in an application that are secured by a decryption key KD contained within a previous generation license of such add on license . Especially in the latter case it is to be appreciated that the potential exists for a nefarious entity to insert a rogue add on license of its own design into a hierarchy of licenses where the rogue add on license would be employed to expand rights set forth in such a previous generation license .

Accordingly in one embodiment of the present invention each license in the hierarchy is digitally signed according to a public key that leads back to a root authority that such a nefarious entity would not normally have access to. Thus the nefarious entity should not be able to obtain a digital certificate with a chain of certificates extending from such root authority and could not sign a rogue add on license based on such a digital certificate. Correspondingly one step in validating each license in a hierarchy such as that shown in would be to verify that the signature of such license validates based on a chain of certificates extending from such root authority.

In one embodiment of the present invention each license in the hierarchy is digitally signed according to a public key that leads back to a single root authority and in fact each such license as issued has a corresponding public private key pair. In such embodiment then the private key of a parent license is employed to digitally sign each child license thereof and the digital signature of each such child license is thus validated according to the public key of the parent license thereof. Accordingly such public key should be included within such parent license . Correspondingly validating each license in a hierarchy such as that shown in includes obtaining the public key of the parent license for such license and employing the obtained public key to validate the digital signature of such license .

Turning now to one possible method for employing a base license and add on licenses extending therefrom such as from the hierarchy of is shown in accordance with one embodiment of the present invention. Preliminarily such a method is imitated at a computing device by receiving a selection of an application or the like to be instantiated or otherwise rendered or employed on such computing device step . The computing device would note that the application or the like is RM protected and thus would employ the trusted component of or the like to obtain approval and assistance to in fact actuate the selected application .

Thus based on the selected application the trusted component would identify from an associated license store or the like not shown each license therein that corresponds to such selected application step where the identified licenses presumably include at least one base license and one or more add on licenses . Note that such identification may be performed in any appropriate manner without departing from the spirit and scope of the present invention. For example it may be that the application is tagged with a particular reference ID and each corresponding license also contains such reference ID.

At any rate with all of the identified licenses the trusted component then assembles a tree such as that of to establish hierarchical relationships between the identified licenses . In particular the trusted component identifies each base license from among the identified licenses step selects one of the identified base licenses step and then validates the selected base license step . As may be appreciated selecting the base license from among a plurality of such base license as at step may be performed in any appropriate manner without departing from the spirit and scope of the present invention. For example the selection may be based on some order of the identified base licenses such as for example based on an issuance data included therein a license ID included therein a priority value included therein etc. Similarly validating the selected base license as at step may also be performed in any appropriate manner without departing from the spirit and scope of the present invention. For example such validation may include a check that the digital signature thereof validates that the license has not expired and that any conditions for using the license are satisfied.

If the selected base license does not validate as at step control returns to step where another identified base license is selected. However presuming the selected base license does indeed validate as at step the rules and rights therein set forth in the selected base license are accumulated into a representation of an aggregate license step . As may be appreciated such representation will contain the rules and rights from all licenses found to be in the assembled hierarchical tree.

Thereafter the method continues by identifying within the validated base license the value of the family attribute if any step . Based on the identified family attribute value then the trusted component identifies each add on license that corresponds to the selected application and that has the identified family attribute value as the parent attribute value step . As may be appreciated each such identified add on license is validated as at step step and presuming the validation succeeds the rules and rights therein set forth in the add on license are accumulated into the representation of the aggregate license step . As was alluded to above in the course of so accumulating conflicts between rules and rights in multiple ones of the licenses are negotiated according to pre determined conflict rules that may at least in part depend on the respective positions of the licenses within the hierarchy.

As should now be appreciated the method repeats with regard to each validated add on license as necessary. In particular for each such validated add on license the method continues by identifying within the validated add on license the value of the family attribute if any as at step . Based on the identified family attribute value then and again the trusted component identifies each add on license that corresponds to the selected application and that has the identified family attribute value as the parent attribute value as at step validates each such identified add on license as at steps and and presuming the validation succeeds the rules and rights therein set forth in the add on license are accumulated into the representation of the aggregate license as at step . Thus and as should be appreciated the method iterates for each validated add on license as many times as may be necessary and for as many levels of the hierarchical tree as may be necessary until the hierarchical tree is fully developed and the representation of the aggregate license is fully developed. Once fully developed then the representation of the aggregate license is evaluated by the license evaluator to determine whether each action sought in connection with the application is to be permitted step .

Note that in the course of developing a hierarchical tree of licenses according to the method of if a parent license fails to validate as at step and all child licenses of such a parent license and indeed all future generations of such a parent license are not even considered. Thus if a license A has a child license B and the child license B in turn has a child license C the failure of A to validate in effect renders B and C as invalidated too. Likewise if A validates but B does not validate then the failure of B to validate in effect renders C as invalidated too but A is still validated.

Note too that in one embodiment of the present invention a license may specify more than one parent license . If so it may be the case that one parent validates while the other does not with the result being that the license is reached by way of the validated parent and not by the invalidated parent. Likewise it may be the case that all of the parent licenses may have to validate to reach the license or that more complex logical rules can be employed. In the latter case such logical rules can be set forth within the license in an appropriate portion thereof. As an example of such a logical rule a license might specify a combination of parent licenses that must validate as 

in which case appropriate parental candidate licenses must validate according to the logical expression for the license at issue to be evaluated.

The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight forward and should be apparent to the relevant programming public. Accordingly such programming is not attached hereto. Any particular programming then may be employed to effectuate the present invention without departing from the spirit and scope thereof.

It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. Most notably although the present invention is set forth in terms of licenses for a digital application such licenses may also be employed in connection with any other form of digital content including but not limited to audio content video content text content streaming content multimedia content and the like. It should be understood therefore that this invention is not limited to the particular embodiments disclosed but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims.

