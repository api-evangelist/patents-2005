---

title: Time-anchored posterior indexing of speech
abstract: A computer-implemented method of indexing a speech lattice for search of audio corresponding to the speech lattice is provided. The method includes identifying at least two speech recognition hypotheses for a word which have time ranges satisfying a criteria. The method further includes merging the at least two speech recognition hypotheses to generate a merged speech recognition hypothesis for the word.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07831425&OS=07831425&RS=07831425
owner: Microsoft Corporation
number: 07831425
owner_city: Redmond
owner_country: US
publication_date: 20051215
---
Searching through vast collections of documents for a particular document of interest has become commonplace in computing environments. In particular searches performed on web pages found on the Internet are performed by a large number of search services. To perform these text based searches search services typically construct an inverted index that has a separate entry for each word found in the documents covered by the search service. Each entry typically lists all of the documents and the positions within the documents where the word can be found. Many of these search services use the position information to determine if a document contains words in a particular order and or within a particular distance of each other. This order and distance information can then be used to rank the documents based on an input query with documents that have the words of the query in the same order as the query being ranked higher than other documents.

With more and more audios or audio tracks of videos appearing on the web and the trend towards on demand video the desire or need to search audio tracks available on the web and on demand distribution channels is also becoming stronger. An approach of using Speech To Text speech recognition technology to transcribe audio to text then applying text level indexing to the text frequently does not yield good accuracy. The poor accuracy can be a reflection of web audio being of poor acoustic quality very different domains compared to those used for training the speech recognition system and or complicated background environments. These factors can result in very high recognition error rate for an automatic speech recognition system ASR .

The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter.

Because speech recognition models consider words in their context surrounding phonemes and neighboring words there often are multiple candidates for the same word with identical or similar time boundaries. These multiple candidates may differ in their context and they can result in a huge search index for a spoken document. In some disclosed embodiments to reduce the size of the index for the spoken document while maintaining accuracy hypotheses for the same word and having the same or similar time ranges are merged into a single hypothesis. The merged hypothesis posterior can be in some embodiments the sum of the unmerged ones. Also in some embodiments if hypotheses with non identical time boundaries are merged the start and end time from the best unmerged hypothesis can be used for the resulting merged hypothesis.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

Disclosed embodiments include indexing methods for audio spoken documents for example audio available over the web. One efficient way to deal with high word error rate is to index speech recognition alternates lattice for a spoken document instead of indexing only a single best estimate of text from a speech signal for the document. The indexing methods can be used to integrate the indexing of audio with existing search architectures. The indexing methods generate indexes using word lattices with index size being reduced by merging word hypotheses within a same or similar time range. Examples of disclosed concepts include time anchored posterior probability merging of word hypotheses to balance index size and search accuracy time quantization and associating quantized time points with document locations and quantization of posteriors and word durations into attribute values of bits sizes e.g. 8 bit which allow integration with existing search architectures. These concepts are described below in detail.

The disclosed embodiments can be implemented in a variety of computing environments. Before describing the embodiments in greater detail a discussion of example computing environments in which the embodiments can be implemented may be useful. illustrate two such computing environments which can represent any of these different types of computing environments.

The illustrated embodiments are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the illustrated embodiments include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers telephony systems distributed computing environments that include any of the above systems or devices and the like.

The illustrated embodiments may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The illustrated embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communication network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices. Tasks performed by the programs and modules are described below and with the aid of figures. Those skilled in the art can implement the description and figures provided herein as processor executable instructions which can be written on any form of a computer readable medium.

With reference to an exemplary system includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit. System bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer is operated in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks Intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Memory is implemented as non volatile electronic memory such as random access memory RAM with a battery back up module not shown such that information stored in memory is not lost when the general power to mobile device is shut down. A portion of memory is preferably allocated as addressable memory for program execution while another portion of memory is preferably used for storage such as to simulate storage on a disk drive.

Memory includes an operating system application programs as well as an object store . During operation operating system is preferably executed by processor from memory . Operating system in one preferred embodiment is a WINDOWS CE brand operating system commercially available from Microsoft Corporation. Operating system is preferably designed for mobile devices and implements database features that can be utilized by applications through a set of exposed application programming interfaces and methods. The objects in object store are maintained by applications and operating system at least partially in response to calls to the exposed application programming interfaces and methods.

Communication interface represents numerous devices and technologies that allow mobile device to send and receive information. The devices include wired and wireless modems satellite receivers and broadcast tuners to name a few. Mobile device can also be directly connected to a computer to exchange data therewith. In such cases communication interface can be an infrared transceiver or a serial or parallel communication connection all of which are capable of transmitting streaming information.

Input output components include a variety of input devices such as a touch sensitive screen buttons rollers and a microphone as well as a variety of output devices including an audio generator a vibrating device and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition other input output devices may be attached to or found with mobile device .

As introduced above disclosed embodiments include methods of indexing web audios or video sound tracks or other audio files which are typically from different domains with poor acoustic quality and complicated backgrounds. As noted a straightforward method of indexing spoken documents is to use speech recognition to transcribe each document into text and then apply text level indexing. However previous research has shown performance degradation when speech recognition error rates are high which is the reality for certain types of audio and particularly for web audios.

In addition to the most probable text transcript speech recognizers can also generate recognition alternates which are beneficial for audio searches. They are commonly stored as graph structures called lattices. Example lattices are described for illustrative purposes below. In accordance with disclosed embodiments speech lattices are used which have multiple candidate words available at the same or similar time points. Each word hypothesis is provided with its own start and end time. It is known that for each word its posterior probability serving as a confidence score can be computed efficiently from the lattice.

In some embodiments each word hypothesis in the lattice is represented as a 4 tuple t t w P where tand tare the start time and the end time w is the word ID and P is the posterior. Indexing in the context of disclosed embodiments now means to re order these tuples by word ID such that at search time all hypothesized locations of a query term can be retrieved efficiently by an index lookup by word ID. For multi word phrase queries the retrieved hypothesis lists are intersected requiring word time boundaries to match.

Because speech recognition models consider words in their context surrounding phonemes and neighboring words there often are multiple candidates for the same word with identical or similar time boundaries but differing in their context resulting in a huge index. To reduce the size of the index while maintaining accuracy some disclosed embodiments merge hypotheses with same word ID and the same or similar time ranges. The merged hypothesis posterior can then be the sum of the unmerged ones. If hypotheses with similar but not identical time boundaries are merged the start and end time from the best unmerged hypothesis can be used for the new merged hypothesis. In accordance with another disclosed aspect as a result of the merging of hypotheses with slightly different time boundaries some tolerance is allowed when matching connected words of a phrase query. In other words in some embodiments two words can be regarded as consecutive if the end time of first word is within some range of the start time of second word. Before describing these and other features in greater detail it is useful to introduce methods and systems for forming and using an index of spoken documents.

In general a spoken document is a collection of speech signals that are related to each other in some manner. For example speech signals that occur at a meeting speech signals associated with a lecture or speech signals associated with a multimedia document such as a movie or a multimedia presentation. To form spoken documents some embodiments separate the speech content from other content in a multimedia document. For example the speech content may be removed from a movie to separate it from the video and musical content of the movie. When the spoken document represents only the speech content of a multimedia document a mapping may be stored that links the spoken document to the multimedia document. This allows a path to the multimedia document to be returned in the search results. In other cases there is text meta data title abstract author description that comes with a given spoken document.

Each of the spoken documents is provided to a speech recognizer which uses an acoustic model and a language model to decode the spoken segments into possible text sequences at step of . Typically speech recognizer performs the recognition based on a sequence of feature vectors that represent the speech in the spoken segments. Step results in the formation of an N best speech recognition lattice for each file.

The feature vectors used by the speech recognizer are formed by first converting an analog speech signal into digital values using an analog to digital converter. In several embodiments the analog to digital converter samples the analog signal at 16 kHz and 16 bits per sample thereby creating 32 kilobytes of speech data per second. These digital values are provided to a frame constructor which in one embodiment groups the values into 25 millisecond frames that start 10 milliseconds apart. The frames of data created by the frame constructor are provided to a feature extractor which extracts a feature from each frame.

Examples of feature extraction modules include modules for performing Linear Predictive Coding LPC LPC derived cepstrum Perceptive Linear Prediction PLP Auditory model feature extraction and Mel Frequency Cepstrum Coefficients MFCC feature extraction. Note that embodiments are not limited to these feature extraction modules and that other modules may be used within the context of disclosed embodiments.

The steps needed to form the feature vectors can be performed entirely by speech recognizer or some or all of the steps may be performed when generating spoken documents . Thus spoken documents may be stored as analog signals digital signals frames of digital signals or feature vectors.

During recognition each feature vector is applied to acoustic model which provides a probability of each of a set of phonetic units given an input feature vector. The acoustic probability of a word is determined by combining the probabilities of the phonetic units that form the word. In addition each word receives a language model score that indicates the probability of a word or a sequence of words appearing in a particular language. Using the scores provided by acoustic model and language model speech recognizer is able to form a recognition lattice that contains recognition results for a speech segment. Note that in most embodiments speech recognizer prunes unlikely word sequences from lattice as it constructs the lattice leaving only the top N recognition results in the lattice. In other embodiments speech recognizer produces an n best list of recognition results that provides a list of the n most likely word sequences given the speech segment.

As represented in each word hypothesis has an associated start time t end time t and posterior or probability P. Although the word IDs are not shown not shown in as described above each word hypothesis in the lattice can be represented as a 4 tuple t t w P where tand tare the start time and the end time w is the word ID and P is the posterior. For example the word hypothesis They between states and has a quantized start time of 0.1 seconds and a quantized end time of 0.6 seconds. The posterior for this word hypothesis is 0.3. Note that it is not required that the start end times are quantized at this point but instead they may be quantized after merging which is described below.

Speech recognition lattice of shows that a single word may appear at different states but with the same or similar start and end times. For example the word They has a start time of 0.1 and an end time of 0.6 in each of two illustrated instances in lattice . The word happy appears with three different start times 0.8 0.9 and 1.0 and two different end times 1.3 and 1.4 .

In accordance with some disclosed embodiments when generating an index from a lattice as will be described below multiple word hypotheses for a particular word as represented by a word ID with the same or similar within some predetermined range start and end times are combined or merged into a single hypothesis for that word. The posteriors for the different merged hypotheses are added together. When the different word hypotheses have slightly different start and or end times but are within an acceptable range for combining the resulting merged hypothesis can be assigned the start and stop times of the best most probable of the multiple hypotheses which have been combined.

For example illustrates two examples of hypotheses merging. In the first corresponding to the word They the start and stop times are identical between the two hypotheses. Thus the resulting merged hypothesis has the same start and stop times 0.1 and 0.6 as the original hypotheses and a posterior which is a combination of those from the original hypotheses 0.3 0.9 .

In the second example two hypotheses for the word happy are merged but the two hypotheses did not have identical start times. Assuming an acceptable range of difference between start times or end times is 0.1 or greater these two hypotheses can be merged into a single hypothesis having the combined posterior 0.3 0.01 . Note that the resulting hypothesis has the start time 1.0 of the best hypothesis for the word happy . Assuming that the acceptable range of difference between start times or between end times was exactly 0.1 it can be seen that a third hypothesis for the word happy between states and in is not combined with the other two because it has a start time 0.8 which is more than 0.1 seconds before the start time 1.0 of the best hypothesis.

Further examples of the merging methods employed in some embodiments are illustrated in and . shows at portions of seven different potential index entries for the word computer . Using the merging techniques described above the seven different hypotheses represented are merged into two different hypotheses represented as portion of index entries and . Assuming a start time illustrated in as ts or end time illustrated in as te tolerance of at least 0.4 seconds the hypotheses corresponding to the first three potential index entries are combined into the hypothesis represented at . The resulting hypothesis represented at has a posterior represented in logarithmic form as c 0.058 which is a combination of the three hypotheses represented at but start and stop times of the best of the three hypotheses. The same process is used to merge the hypotheses represented at into the hypothesis represented at . Similarly these techniques are used to merge hypotheses for the word science as shown in .

In alternate example embodiments merging hypotheses as represented at step in and also at step in described below and as carried out by component in can be done in two ways 1 driven by merging edges or 2 driven by merging nodes of which merging of edges is then a consequence .

This method treats all entries of words individually. For each entry of a word an agglomerative clustering procedure is applied as follows 

This method is applied to the lattice and processes all word hypotheses together to achieve a global optimum. Unlike the TMI edge technique this method is not an agglomerative but a partitioning algorithm. Nodes are partitioned and dynamic programming is used to choose an optimal partitioning as follows 

The separation of the PARTITION and OPTIMIZE steps is for mathematical clarity only. In actual implementations they cannot be separated due to the combinatorial explosion of enumerating all possible partitions. Instead both steps must be integrated and then the optimal solution can be found efficiently using a known technique called dynamic programming DP .

The objective of the OPTIMIZE step is defined as minimizing the number of nodes and dynamic programming will provide a globally optimal solution. Methods of applying DP to accomplish this task will be readily understood by those of skill in the art. The PARTITION step is defined such that the overall method becomes admissible to a DP solution enabling a globally optimal solution to be found.

In example embodiments the resulting hypothesis set can be represented in two ways in the indexing engine . Merged node ranges could be either represented by their quantized time stamp as in TMI edge or by a range id similar to a position specific posterior lattice PSPL bin id. The latter option requires less bits in the index but a separate time loop up table for use in snippet generation.

A motivation for the TMI node technique is that both PSPL and TMI edge cannot strictly enforce in order matching of phrases. For example PSPL can match a spoken A B as phrase B A if there are B and A entries originating from paths with different history lengths. The TMI edge technique can allow out of order matching for very short words due to the aggressive time tolerance.

The TMI node technique allows overlaps and gaps but only less than one word. Start times as well as end times are guaranteed to remain in order. This can be an important property because the purpose of all methods is phrase matching.

Now referring back to under one embodiment an index is formed or built in step by providing an entry for every word in the lattice e.g. lattice . In each entry information is provided for every occurrence of the entry s word in the lattice. This information includes a document identifier a representation of start and end time and the probability associated with that word at that time span. Each word s entries for all lattices in the document collection are merged to form an overall entry. The entirety of all such merged entries makes up the index.

Once the index has been constructed a search may be performed to identify a spoken document based on a search query. In particular at step a search query is received by a search unit . Search unit accesses inverted index and retrieves the document identifier time position and probability of each sub entry for each word of the query. Some recognizers may map words outside of the recognizer s vocabulary to an unknown token UNK which cannot be matched in any document. Thus no entry for UNK is included in the index.

At step a score is determined for each document that is returned from the search of inverted index . The documents that are returned from the search can be limited such that every document that is returned includes all of the words of the query. Alternatively any document that contains at least one word of the query can be returned at this stage.

Using the probabilities returned from inverted index the scores for each document can be calculated using any of a number of techniques. For example these techniques can include weights denoting the importance of a word in discriminating documents. In accordance with one alternate technique the scores for each document can be calculated by first calculating a collection of composite n gram scores for each document. Each composite n gram score can be formed by summing individual n gram scores over all possible formations of an n gram in the query using 

Other types of n grams such as skip n grams which allow certain query words to be skipped can also be used.

If more than one composite n gram score is calculated for each document the separate composite n gram scores can be combined in a weighted sum using 

In many embodiments the weights of the n grams increase linearly with the n gram order. However other techniques may be used to set the weights of the n grams.

The scores calculated for each document are used to rank the documents that are to be returned. The documents that are returned may be pruned by removing documents that do not provide a non zero score for the highest order composite n gram. This ensures that all of the words of the query appear in order at least once in the document. This requirement enforces a quoted functionality which requires all of the words present and in the same order as in the query in order for a document to be identified from the query. Another possibility is to allow quoting of phrases within the query such as JAPAN NUCLEAR WEAPONS entering such a query will return only documents that contain JAPAN and NUCLEAR and WEAPONS and the words NUCLEAR WEAPONS occur exactly in this order next to each other but allowing for start and end time tolerance as described above.

In a further embodiment morphological analysis is performed on the query before applying the query to the index. This generates a list of different forms of the query terms including other endings for the word. For example the term weapons in a query would produce the alternative weapon in which the final s has been dropped. Different combinations of the morphologically altered terms can then be used to perform different searches of the inverted index. Each search involves forming composite n gram scores as above. The composite n gram scores for the alternative search strings are weighted much less than the composite n gram scores for the original search string. As a result documents that contain an alternative search string but not the original search string will be ranked below documents that contain the original search string.

Although the indexing technique has been discussed above with reference to complete words the same technique can be used to index any speech unit including sub word units such as phones or tri phones. In particular instead of forming a lattice of words the speech recognizer forms lattices of sub word units. These sub word units are scored in the same manner as the words above using a language model that is based on sequences of sub word units instead of words. The time specific posterior lattice will then contain individual sub word units with their associated probabilities.

Upon receiving a search query the query is decomposed into sub word units. Documents are then ranked using the scoring techniques described above with sub word units instead of words. In some embodiments each word in the query can be treated as being contained in quotations to reduce the number of documents that are returned.

In accordance with some embodiments the disclosed indexing techniques can be used to index audio in a manner which integrates with existing search indexing architectures. For example in at least one indexing search architectures all indexed documents are concatenated into a huge virtual document and all the words in each document are assigned a unique location position within a consecutive range in this virtual document. The end position of each document is recorded to restore the document ID information of each word. Each word corresponding to the hypothesis in the present case is encoded into a 64 bit integer where the higher order 56 bits contain the location while the remaining 8 bits are reserved for the additional attribute information. These 64 bit numbers are inverse indexed by word IDs.

The disclosed embodiments can capitalize on a very useful property of this architecture namely that the locations are not necessary to be dense i.e. it is allowed that locations map to no word. Further the locations are not necessary to be unique i.e. it is allowed that multiple words are associated to the same location. Disclosed embodiments can utilize this for storage of multiple word hypotheses with multiple time segmentations.

Specifically to adapt the aforementioned indexing scheme to one such indexing architecture several things can be implemented 

To utilize the above storage architecture the search algorithm needs to be adapted to retrieve the posterior probability for the query word or string. Because index locations now correspond to time rather than word positions and thus index entries represent entities spanning multiple locations the phrase matching component also needs to be extended to take the length into account.

Referring now to shown are flow diagrams providing alternate illustrations of example method embodiments as described above. Referring first more specifically to shown is a method of indexing a speech lattice for search of audio corresponding to the speech lattice. At step the method is shown to include the step of identifying at least two speech recognition hypotheses for a word which have time ranges satisfying a criteria. The criteria is diagrammatically illustrated at in . As described previously satisfying criteria can require that the at least two speech recognition hypotheses for the word have identical start times and identical end times. However in exemplary embodiments satisfying the criteria requires that the at least two speech recognition hypotheses for the word have start times that are within a predetermined range of each other and end times that are within a predetermined range of each other.

At step illustrated in the method is shown to include merging the at least two speech recognition hypotheses to generate a merged speech recognition hypothesis for the word. In some embodiments merging the speech recognition hypotheses to generate the merged speech recognition hypothesis for the word includes combining the associated probabilities of the at least two speech recognition hypotheses as described previously. Also in some embodiments step includes generating the merged speech recognition hypothesis for the word such that start and end times for the merged speech recognition hypothesis are the same as start and end times for a best of the at least two speech recognition hypotheses.

In some embodiments the method also includes step of storing an index entry to represent the merged speech recognition hypothesis for the word. In some embodiments storing the index entry to represent the merged speech recognition hypothesis for the word further comprises the step shown in of encoding the merged speech recognition hypothesis into an integer value represented by a predetermined number of bits. As described above a first plurality of the predetermined number of bits are used to represent a time range for the merged speech recognition hypothesis while a second plurality of the predetermined number of bits are used to represent a quantized time duration and a probability of the merged speech recognition hypothesis. This technique allows integration with existing architectures as described above.

As described the time range encoded into the predetermined number of bits is in exemplary embodiments a center point between the start and end times of the merged speech recognition hypothesis. However in other embodiments the time range is one of the start and end times of the merged speech recognition hypothesis.

As illustrated at additional and optional step shown in the method can also include representing audio as a sequence of time ranges with at least one word hypothesis associated with each time range. It is not necessary however to have at least one word per time range.

Referring now to shown is a method of searching audio. At step the method includes receiving a search query. At step the method then includes searching an index corresponding to the audio for entries associated with the search query. For each of a plurality of speech signals the method then includes the step of retrieving from the entry an identifier for the speech signal time range information for a word hypothesis associated with the entry and a probability of the word hypothesis appearing at the time range given the speech signal. At step the method is shown to include using the probabilities to rank the speech signals relative to each other to form ranked speech signals. Based on the ranked speech signals the method then returns search results at step .

As described in the above examples the time range information for the word hypothesis associated with each entry is typically indicative of a start time and an end time of the word hypothesis. The search query will often be representative of a phrase containing first and second consecutive words. In these cases step of searching the index for entries associated with the search query further comprises searching the index for entries associated with the first and second words in the query. The method can then include step of identifying from the time range information of the entries associated with the first and second words in the query occurrences of the first and second words which are consecutive in time in a speech signal. This determination can be based upon an end time of the first word in the speech signal and a start time of the second word in the speech signal. As discussed in some embodiments the first and second words are considered to be consecutive in time when an end time of the first word in the speech signal is substantially identical to a start time of the second word in the speech signal. However in other embodiments as described above the first and second words are considered to be consecutive in time when the end time of the first word in the speech signal is within a predetermined time range of the start time of the second word in the speech signal. This can even result in the end time of the first word in the speech signal being after the start time of the second word in the speech signal in the case of merged hypotheses.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

