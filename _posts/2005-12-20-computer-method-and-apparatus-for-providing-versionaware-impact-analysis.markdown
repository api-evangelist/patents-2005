---

title: Computer method and apparatus for providing version-aware impact analysis
abstract: A computer implemented method and apparatus for providing dependency traceability in software configuration management. Per configuration of a subject software program formed of one or more artifacts, a version history of each artifact is maintained. For each artifact, coupled to the respective version history of the artifact is an indication of status of traceability relationship for each indicated version. One implementation employs a traceability object to maintain and provide such status indications. The status indications are view independent and enable dependency traceability relationship of each artifact to be determinable in each configuration employing the artifact.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08429610&OS=08429610&RS=08429610
owner: International Business Machines Corporation
number: 08429610
owner_city: Armonk
owner_country: US
publication_date: 20051220
---
Software development is typically performed as group projects. A subject software system is developed through design efforts test efforts implementation efforts and maintenance efforts. There may be different groups and different group members participating in each of these efforts. Throughout these efforts and among the work group members various modeling and other development tools are used for increased communication and consistency in developing the subject software system. A software configuration management system is one such tool.

Software configuration management systems provide an interface for users software developer engineer to work with artifacts of a subject software system. An artifact is the persistent result of work done by a user typically persisted in a file system such as a model and source code.

When a software development artifact is modified the developer would like to know what other artifacts need to be modified in order for the subject system to remain consistent. Being able to perform impact analysis before changing an artifact has been a longstanding but elusive need in software development for years. One of the main issues is managing change to software system requirements. Without the ability to perform impact analysis artifacts produced as part of the development process drift apart and become inconsistent. This leads to misunderstandings wasted time schedule slips and non conformance to requirements. In short failure to manage change leads to higher development costs.

For example when two software artifacts are connected by a dependency traceability relationship a change to the first artifact might require a change to the second artifact in order to maintain the semantics of that relationship. These dependency traceability relationships are an essential mechanism for determining impact analysis i.e. determining what other artifacts need to be updated following a change to a given set of artifacts. When the artifacts are placed under version control many different configurations of those artifact versions are maintained and changes occur in parallel in a variety of those configurations. When changes from one configuration are merged into another configuration it appears that all of the dependency traceability relationships to the updated artifacts are suspect i.e. have to be inspected to see if changes are required even if the originator of those changes has verified that in fact all of these traceability relationships are valid.

Traditional solutions attempt to solve the problem using manually created and maintained traceability links. Links are manual because the variety of artifact types spans domains for example requirements are human readable while code is written in a formal technical language. Complex software systems have hundreds if not thousands of requirements and there are many to many relationships between artifact types requirements needs designs tests code etc.

Past attempts to maintain the validity of the traceability relationships fail because the cost to the development team outweighs the benefit. Maintaining the validity of traceability links is an arduous task even for a relatively small development effort and this is one of the main reasons existing traceability solutions fail. There are many accounts that document this issue and the difficulty in solving it.

The present invention addresses the problems of the prior art and provides improved dependency traceability that enables version aware impact analysis in software configuration management. There is a relatively reduced effort to maintain traceability links in embodiments of the present invention.

In a preferred embodiment a computer implemented method and apparatus provide dependency traceability in a software configuration management system by 

for a given configuration of a subject software program formed of one or more artifacts determining respective version of each artifact 

for each artifact including in the respective version history of the artifact 1 an indication of the determined version and 2 status indication of traceability relationship for the determined version such that dependency traceability relationship of each artifact is determinable in each configuration employing the artifact.

Illustrated in is a configuration management system . Configuration management system provides a workspace view of a subject software program various information regarding the object software program . The software program is formed of one or more artifacts . Each artifact has a respective version forming the subject software program . Information regarding the versions of an artifact is stored in a respective version history table or log of the artifact . illustrates one configuration of subject software program although configuration management system stores the foregoing information for each configuration of program .

For each configuration the present invention provides traceability relationship information between pairs of artifacts and specifically between particular versions of artifacts as follows and illustrated in . Between the version history table of artifact and the version history table of artifact the present invention provides a respective traceability object . Similarly the present invention provides a respective traceability object between version history table of artifact and version history table of artifact . And so on for traceability objects . . . such that there is a respective traceability object for each pair of version history tables of respective artifacts .

Each traceability object stores a respective table indicating the valid pairs of versions of the respective artifacts that is the pairs of versions for which the dependency traceability relationship is valid . In the illustrated example the traceability object effectively between artifacts and indicates that the dependency traceability relationship between version Vof artifact and version V of artifact is valid. Likewise traceability object indicates the dependency traceability relationship between version Vof artifact and version V of artifact is valid. Similarly traceability object indicates in its table that the dependency traceability relationship between version V of artifact and version V of artifact is valid and so forth.

In other embodiments tables list both valid and invalid pairs of versions of respective artifacts . A data column specifies valid or invalid accordingly per table entry.

In the foregoing ways the present invention stores an indication of status of a dependency traceability relationship in a view independent fashion. As a result any information created in one configuration as to the validity of a dependency traceability relation is immediately available through traceability objects and in particular status indications in entries of tables in any other configuration for which that information is relevant and valid.

With reference to a preferred embodiment of a user interacts with a subject software program in the workspace of a configuration management system . For example say the user acts on artifact . In response through configuration management system it is given that artifact is traceable to artifact see for example U.S. patent application Ser. No. 11 303 632 filed on Dec. 15 2005 entitled Activity Based Software Traceability Management Method and Apparatus incorporated herein by reference . The user then needs to determine if the particular versions Vof artifact and V of artifact that he is seeing in the workspace hold a valid traceability relationship. If the user determines the traceability relationship between version Vof artifact and version V of artifact to be valid then processor routine at step marks the same i.e. stores a respective table entry in table of traceability object corresponding to subject artifacts and

In other embodiments if the user determines the traceability relationship to be invalid then processor routine marks the table entry accordingly i.e. indicating that the traceability relationship between version Vof artifact and version V of artifact is invalid .

The user proceeds similarly for each pair of artifacts according to respective version in the subject software program . See step in . The processor routine responsively annotates tables with the traceability relationships indicated by appropriate entries for the versions of the artifacts in the subject software program configuration. The respective valid invalid status of each indicated relationship then holds in any other configuration that employs one or more of the artifacts . As such the user or other users can easily verify validity of traceability relationships per version of artifacts by accessing referring to tables .

In addition step a heuristic is applied based on the tables of traceability objects . In particular if there are no table entries status indications for the exact versions of two artifacts selected in a configuration if there are entries in respective traceability object table for both predecessor and successor versions of an artifact the status indication of those entries is given a degree of probability based on the number of successor links separating the selected versions from the versions identified by the entry . A user can then obtain a probability range or confidence rating i.e. the probability above which the valid invalid information is to be believed.

In the illustrated example of say that the current versions of interest are version Vof artifact and version V of artifact . A user looking at respective traceability object table finds no entry corresponding to these versions of interest. However entry in table indicates predecessor version Vof artifact has a valid traceability relationship with version of interest V of artifact . Also table has an entry indicating successor version Vof artifact has a valid traceability relationship with version of interest V of artifact . Step of processor routine looks to version history of artifact and determines the number of links separating predecessor version Vof entry from version of interest V of artifact . In this example one such link is determined and one end of the probability range is defined based on this determination. Step also from version history determines the number of links separating successor version Vof entry from version of interest V of artifact . In this example one such link is determined and is used to define the other end of the probability range. The resulting probability range indicates a high likelihood that the versions of interest Vof artifact and V of artifact have a valid traceability relationship.

Accordingly dependency traceability relationship information is stored and maintained independent of view in the configuration management system . As such embodiments of the present invention reduce the effort required to maintain traceability links. illustrates a computer network or similar digital processing environment in which the present invention may be implemented.

Client computer s devices and server computer s provide processing storage and input output devices executing application programs and the like. Client computer s devices can also be linked through communications network to other computing devices including other client devices processes and server computer s . Communications network can be part of a remote access network a global network e.g. the Internet a worldwide collection of computers Local area or Wide area networks and gateways that currently use respective protocols TCP IP Bluetooth etc. to communicate with one another. Other electronic device computer network architectures are suitable.

In one embodiment the processor routines and data are a computer program product generally referenced including a computer readable medium e.g. a removable storage medium such as one or more DVD ROM s CD ROM s diskettes tapes etc. that provides at least a portion of the software instructions for the invention system. Computer program product can be installed by any suitable software installation procedure as is well known in the art. In another embodiment at least a portion of the software instructions may also be downloaded over a cable communication and or wireless connection. In other embodiments the invention programs are a computer program propagated signal product embodied on a propagated signal on a propagation medium e.g. a radio wave an infrared wave a laser wave a sound wave or an electrical wave propagated over a global network such as the Internet or other network s . Such carrier medium or signals provide at least a portion of the software instructions for the present invention routines program .

In alternate embodiments the propagated signal is an analog carrier wave or digital signal carried on the propagated medium. For example the propagated signal may be a digitized signal propagated over a global network e.g. the Internet a telecommunications network or other network. In one embodiment the propagated signal is a signal that is transmitted over the propagation medium over a period of time such as the instructions for a software application sent in packets over a network over a period of milliseconds seconds minutes or longer. In another embodiment the computer readable medium of computer program product is a propagation medium that the computer system may receive and read such as by receiving the propagation medium and identifying a propagated signal embodied in the propagation medium as described above for computer program propagated signal product.

Generally speaking the term carrier medium or transient carrier encompasses the foregoing transient signals propagated signals propagated medium storage medium and the like.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

While this invention has been particularly shown and described with references to preferred embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.

For example any computer architecture and or network configuration is suitable for executing embodiments of the present invention. The computer network of is for purposes of illustration and not intended to limit the principles of the present invention.

Version history for each respective artifact may be implemented as a table a list or other log like technique that allows appending of entries.

