---

title: Method and apparatus for processing data in a processing unit being a thread in a multithreading environment
abstract: A method for improving timing behavior of a processing unit in a multithreading environment is disclosed, wherein the processing unit generates data frames for an output unit by combining data from a plurality of input units, and the processed data are buffered in an output buffer between the processing unit and the output unit. The method comprises sending from the output unit to the processing unit a value corresponding to the filling of the output buffer, calculating a timer value, setting a timer with the timer value, wherein the timer calls the processing unit thread after the specified time. The timer value depends on the value corresponding to the averaged filling of the output buffer. As a result, the average filling of the output buffer is lower compared to conventional thread management, and thus the system is more flexible and reacts quicker.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680964&OS=07680964&RS=07680964
owner: Thomson Licensing
number: 07680964
owner_city: Boulogne-Billancourt
owner_country: FR
publication_date: 20050526
---
This application claims the benefit under 35 U.S.C. 119 of European Patent Application 04013686.3 filed Jun. 10 2004.

This invention relates to a method for processing data in a processing unit. In particular the invention relates to a method for processing data in a processing unit wherein the processing unit generates data frames for an output unit by combining data from a plurality of input units and wherein said processing unit input units and output unit are threads in a multithreading environment.

Audio visual AV presentations that are coded according to the Motion Picture Expert Group MPEG standard ISO IEC 14496 1 known as MPEG 4 Systems may consist of several data streams e.g. one or more streams for video one or more streams for audio and others. The audio streams may have individual usually standardized sample rates e.g. 8 kb s 16 kb s 22.05 kb s 32 kb s 44.1 kb s or 48 kb s for different types of audio streams. Further these streams consist of packets or frames with attached time stamps.

Reproduction of such presentations requires individual decoding units for different streams a processing unit and one or more output units. These decoding processing and output units may be implemented in so called multithreading technique using a microprocessor with operating system OS and application software wherein the mentioned units are implemented as separate software partitions also called tasks or threads . A thread is an independent unit of executable software that sequentially shares the control of the microprocessor with other threads. Since the threads are called and executed sequentially they work asynchronously to each other and may communicate with each other via a messaging application programming interface API provided by the operating system or via function calls. Transmission of data between threads requires the data to be buffered wherein usually synchronized FIFO like structures are used for buffering. However obtaining an acceptable quality of reproduction requires the output data stream e.g. audio stream to be continuous and complete at the output unit i.e. any buffer underflows and buffer overflows must be prevented. To ensure constant data availability at the output unit commonly a large FIFO buffer is used between the processing unit and the output unit.

A conventional audio processing system is shown in . Decoded data blocks from a source stream are read from a decoder via a frame FIFO into a processing unit where they are processed. The processed data blocks are written to a block organized FIFO that feeds the output module . The output module generates a continuous stream of audio representation data from the data blocks that are read from the frame FIFO using several decoded data blocks simultaneously. When the FIFO is not full it sends a signal e.g. an exception message to the processing unit . Then the processing unit processes more data from its input until the FIFO is full. Such system may be implemented on a real time operating system RTOS or on a non RTOS like e.g. Microsoft Windows . In the latter case which is preferred because it is cheaper and simpler than a RTOS separate threads T T T are used for the decoder the processing unit and the output module .

For some applications it is desirable to process data from different sources simultaneously wherein the sources may have different frame rates and or sample rates and require separate decoders. E.g. it may be necessary to superpose audio signals from several inputs e.g. ten or more.

The described multi input system running under a non RTOS e.g. in an audio video presentation application leads to unpredictable timing behavior of the processing unit under heavy load e.g. when input data from several different audio sources are to be processed while additionally the microprocessor has to perform other tasks. As a result synchronization between audio and video is difficult due to unpredictable delay between the decoding of audio packets and audio rendering in the output unit. Further the long time between successive calls of the processing unit thread also causes higher response time to user interactions e.g. commands which are in a multithreading system typically also executed by the processing unit. Thus it takes longer for user commands to become effective.

The problem to be solved by the invention is to provide a method for improving the timing behavior of a processing unit wherein the processing unit generates data for an output unit by combining data from a plurality of input units wherein all the mentioned units are threads in a multithreading environment and may have different time bases. A particular problem is to provide such method for an audio or audio video reproduction device for multiple multimedia stream data. This problem is solved by the method disclosed in claim .

According to the invention the timing behavior is improved by calling the processing unit in shorter time intervals using a mechanism superordinate to the thread management of the OS. In particular the invention comprises using a timer unit to call the processing unit thread and setting the timer individually. Advantageously this leads to a more even distribution of the microprocessors processing capacity. Further the inventive method may increase the priority of the processing unit thread independent from the thread management of the OS and reduce the oscillation of the filling of the output buffer. This leads e.g. to better audio video synchronization and shorter delay for user interaction.

Whenever the processing unit thread is called the filling of the output buffer is measured and the result of the measurement is used to determine the time before the next call of the processing unit thread. As long as the filling is below a defined threshold e.g. during initialization the processing unit repeats the cycle of processing a frame writing it to the output buffer and measuring again the output buffer filling without setting the timer unit. When the output buffer has reached the threshold a timer value is calculated from the measured output buffer filling the timer unit is set with the calculated timer value wherein the timer calls the processing unit thread when its time has elapsed and the processing unit thread may be terminated until it is called again by the timer or by thread management of the OS.

The time period determined by the timer value is so that the processing unit will usually be called by the timer and not by the thread management of the OS. Therefore the time between the processing unit processing successive frames depends on the filling of the output buffer which means that the regulation loop is closed and thus the regulation is improved. Particularly when the output unit processes in regular time intervals e.g. 80 ms an output frame from the output buffer and an output frame comprises a plurality of input frames wherein each input frame has a specific sample rate the invention comprises setting the timer to a value that corresponds to a common multiple of the reciprocals of the input sample rates but is shorter than the output units time interval. It is particularly advantageous to pick a common multiple or particularly the least common multiple of the reciprocals of the input sample rates e.g. 20 ms for sample rates of 48 kHz 44.1 kHz 32 kHz 22.05 kHz 16 kHz and 8 kHz corresponding to reciprocals of 20.83 s 22.67 s 31.25 s 45.35 s 62.5 s and 125 s.

When a timer is used to call the processing unit thread for processing the frames of a particular output data stream e.g. audio data and the load value of the timer depends on the filling of the output buffer as proposed by the invention the processing unit may after an initialization phase work in substantially equidistant time intervals. It may be advantageous to use an average buffer filling value for the calculation of the timer value. The average will be calculated over few measurement values from successive calls of the thread e.g. 2 5 measurement values. A further low pass filtering of the averaged measurement values can be used e.g. to improve the systems time behavior.

A general purpose timer provided by common microprocessors can be employed to maintain on average a specified maximum time between processing successive frames for a particular output unit. The timer runs in real time independent from the thread management. Microprocessors and or operating systems usually provide such timers. The general purpose timer triggers the processing unit thread for decoding the next frame. Then the timer is loaded with a new value which is calculated from the filling of the buffer.

Advantageously a simple calculation can be used for this purpose e.g. the averaged buffer filling may be input to a linear equation. In this case it is also possible to input first the measurement value to a linear equation and then calculate an average. This method ensures lossless stream access i.e. prevents buffer underflow and buffer overflow and ensures constant minimum delay during processing. This is advantageous e.g. for better audio video synchronization and quicker responses to user interaction.

The time measured by the timer is an average maximum time with respect to the fact that the microprocessor may be busy with another task when it is triggered so that it may have to finish the other task first before reacting on the trigger. This case can be handled when the output buffer is large enough for the output unit to continue working.

As a consequence the average number of data frames or blocks that are stored in the FIFO buffer between the processing unit and the output unit can be lower than in conventional systems which leads e.g. to shorter response times better estimation of the presentation time of the audio data therefore improved audio video synchronization and generally better approximation of real time behavior in a non real time system.

The inventive apparatus for processing data receives input data from a plurality of inputs and comprises a microprocessor a data set e.g. program data and a timer wherein the microprocessor and the data set constitute a data processing unit and a data output unit both units being threads in a multithreading environment and wherein data are passed through a buffer from the processing unit to the output unit. Further the apparatus comprises means for measuring a value corresponding to the filling of the output buffer and providing the value to the processing unit means for calculating in the processing unit a timer value wherein the timer value depends on said value corresponding to the filling of the output buffer and means for setting the timer with the timer value and starting the timer wherein the timer sends a notification when the time specified by the timer value is elapsed the notification causing activation of the processing unit thread if it is not already active or otherwise causing continued activation of the processing unit thread.

The apparatus according to the invention is most advantageous to use if its inputs provide data with at least two different constant input data rates. The invention comprises that the timer is only used when the measured buffer filling is between predefined minimum and maximum values and that the time specified by the timer value that results from a predefined average buffer filling value is the least common multiple of the reciprocals of the data rates of the inputs. Further the relationship between the timer value and the output buffer filling value may be linear.

Advantageous embodiments of the invention are disclosed in the dependent claims the following description and the figures.

In the following the problem with prior art systems is described in more detail before preferred embodiments of the invention are described.

The output buffer is the communication element between the processing unit thread and the output module thread. When filling of the output buffer is requested the processing unit writes data into the output buffer until the buffer is full. Then the processing unit waits i.e. does nothing or performs other tasks until the output module has read a data block from the output buffer . Therefore the output module determines the filling of the output buffer which in turn determines activation of the processing unit .

This thread oriented processing results in a characteristic that is shown in for an exemplary audio data stream. In this example the output module has a time equivalent of 80 ms i.e. works with 80 ms audio frames corresponding e.g. to 3840 audio samples at 48 kHz and a decoding frame is sufficient for 20 ms audio reproduction. Thus after an idle time dT of 80 ms the processing unit receives four processing calls c . . . c in short sequence. shows the resulting filling of the output buffer which varies mainly between seven or eight and eleven decode frames. Averaging the values as in and then low pass filtering as in shows that on average there are almost ten decode frames in the buffer. The utilized conventional algorithm always tries to keep the output buffer full.

A processing unit for multiple multimedia stream data has to ensure lossless stream access and constant minimum delay processing. One example is a multi input audio renderer for an MPEG 4 player.

According to the invention the solution is to approximate equidistant starting points for the processing by using a timer that can be set from the processing unit and that is superordinate to the thread management of the OS. This is shown in . The system is similar to the previously described system of except that a timer unit is connected to the processing unit . The timer unit is independent from the thread management and particularly it is not part of the processing unit thread. The processing unit sets the timer with a value e.g. after its signal processing then starts the timer and goes into a wait mode so that the microprocessor can do other things. When the timer reaches the end of the programmed time it calls or awakes the processing module again. The processing module does its specific processing and sets the timer with a new value so that the processing unit can wait for a specified time again and so on. The timer value can in principle be calculated before or after the signal processing but since this calculation is done in the processing unit and the processing unit thread can be interrupted an early calculation of the timer value is preferable. Then the timer can be started as early as possible so that the probability for the timer to be active at a potential thread interruption is high.

The timer value is generated from the saturation of the output FIFO module in the following way The actual filling of the FIFO buffer is measured. An average value of the filling over the last four measurement values is then calculated and low pass filtered e.g. by a 3order filter with normalized cut off frequency of 0 1. This signal leads to the timer value with a clipped linear function of the form timerValue 1 fillingValue 2 wherein k must be positive and fillingValue in this case is the low pass filtered average value of the filling measurement. The parameter k defines the minimum value when the timer is used while k defines the sensitivity of the regulation.

A generalized approach to find an equation that defines the control loop gain of the system is the following first the range of adjustment of the regulation is individually limited i.e. the buffer filling must be between minimum and maximum values as e.g. 2

The function is clipped with respect to that it is used only when the measurement value fillingValue is at least three and not more than eleven. This is shown in . When the measurement value is below three the timer is not used and the processing unit continues with the next frame immediately. When the measurement value is above eleven the processing unit pauses for a defined time e.g. 1 ms using a thread management function before it takes another measurement value . The OSs thread management however can interrupt the processing unit thread at any time. If the measurement value is within the defined range it is averaged and low pass filtered before it is input to the above described equation . The equation results in a value that is used to set a timer while the processing of data blocks starts e.g. audio data blocks. The timer then triggers the next call of the processing unit thread. Therefore the WaitForTimer step is not actually part of the thread process but of the processing according to the invention.

For example k is set to 10 3 and k is set to 20 3. This results in an average output buffer filling with 8 frames of 20 ms each as explained above. The effect of this regulation for the processing unit is shown in . The dots represent processing unit calls over time and are in approximately linear sequence which means almost equidistant calls of the processing unit. As an important consequence of this precise time behavior it is possible to better estimate the presentation time of the processed data and to include for the estimation the buffer model of the output module. This is because the median saturation of the buffer is now well known since it can be adjusted and the processing time can be measured more exactly. With this knowledge e.g. better audio video AV synchronization and improved reaction on user interactivity for the processing algorithm can be achieved for AV reproduction.

Although the start times of one or more particular threads can be outside the time raster e.g. at T t the method according to the invention is suitable for reestablishing the raster. Further the actual timer values are adapted to the current situation and therefore the average time that the processing unit has can be adjusted. The raster time T being the average value between successive calls of the processing unit can be exactly adjusted to the application by proper selection of the parameters k and k and therefore the temporal behavior of the processing unit can be adapted to the temporal behavior of the output unit and the input units which prevents blocking of the processing unit.

In general it is advantageous to select the raster time i.e. the average time between successive calls of the processing unit to be M milliseconds when the average output time interval is N M milliseconds with N being a positive integer larger than one.

The invention comprises different possibilities for when to utilize the timer unit. The calculation of the timer value and the setting of the timer will preferably be done immediately after measuring the buffer filling although in principle the measurement value can be stored and later be used for the calculation e.g. within a start sequence or exit sequence of a thread.

In one embodiment of the invention the timer value is calculated always before processing a frame. In another embodiment the timer value is calculated whenever the processing unit thread is called as a start sequence of the thread. In yet another embodiment the timer value is calculated only before the processing unit thread is terminated as a part of an exit sequence of the thread. In one embodiment the timer unit is set immediately after the calculation of the timer value. In another embodiment the timer unit is set later or always before terminating the processing unit thread as a part of an exit sequence of the thread.

The invention is particularly advantageous for implementing a multi channel input audio renderer e.g. for MPEG 4 or similar in a multithreading environment where the risk of processor overload is high.

