---

title: Prescribed navigation using topology metadata and navigation path
abstract: The subject invention provides a system and/or method that facilitates prescribing a navigation within an application utilizing a topology and a navigation path. The topology is created based upon received metadata and is a network of node objects and link objects. The navigation path is a sequential list over the topology that represents a sub-graph thereof. A prescribing component can create the topology and navigation path such that a prescribed navigation can be utilized by an application during navigation (e.g., exploration) during runtime.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07650349&OS=07650349&RS=07650349
owner: Microsoft Corporation
number: 07650349
owner_city: Redmond
owner_country: US
publication_date: 20050105
---
The subject invention generally relates to computer programming and more particularly to systems and methods that facilitate developing an application.

There is a growing trend to provide business application software to a plurality of industries in order to simplify business procedures and or forecasts. Business application software provides navigation and or exploration across heterogeneous business data which can be related explicitly and or implicitly. Business applications typically are assorted with an overwhelming amount of information wherein an essentially endless amount of this information contains inter relationships. For example a typical middle market application can contain forms tables inventory charts graphs etc. wherein a majority of data is intertwined explicitly and implicitly. Specifically data e.g. billing forms employee tables order forms etc. can be utilized in conjunction with business applications involving for example payroll applications sales analysis shipping applications bonus reports cost analysis etc.

Conventionally hypermedia systems are utilized to discover and or navigate through the enormous quantities of information within a business application. Such hypermedia systems are information systems in which data access and exploration is accomplished through navigation rather than traditional con text querying. Additionally such systems create and maintain links within an application or to external applications and resources. These links provide users with the ability to retrieve additional information related to the query results. For instance a query for a list of customer names can also provide a link to another query that retrieves a list of orders for a particular customer.

One benefit associated with hypermedia systems is the ability to store complex cross referenced bodies of information as a network of nodes and links e.g. a hierarchical database model that links records together in a tree structure . Querying within navigation can be defined as a query for data access and a query for correlation. For instance a query for data access can be utilized to provide data access to certain type of node where resources are data. Whereas a query for correlation provides the correlation of the data based upon for example metadata and or keywords. In other words the term query refers to getting data e.g. projects data whereas the term navigation refers to getting related data e.g. projects relationships and data . This navigational projection of relationships between data can also be referred to as a non linear exploration of data.

During non linear exploration of data within a hypermedia system a user typically can become lost and or disorientated by the extensive cognitive overhead. Essentially users can be overwhelmed by the vast amount of related links discovered during a navigational data exploration search. Moreover navigation within hypermedia systems has traditionally been performed during runtime. A majority of the code is imperative yielding modules with a single use which in turn results in a very inefficient and slow application during runtime. In view of at least the foregoing there is a need to improve navigation within related data in business applications.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended to neither identify key or critical elements of the invention nor delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

The subject invention relates to systems and or methods that facilitate developing an application by utilizing a prescribed navigation. The prescribed navigation utilizes a topology that is based upon received metadata wherein a navigation path is employed to represent a sub graph of the topology. A prescribing component can receive data during design time wherein such data can be metadata e.g. metadata related to a business framework . During the design of an application the prescribing component can create a topology with an associated navigation path based upon the received data. The topology and the navigation path e.g. NPath can provide the employment of a prescribed navigation in design time that streamlines the development of an application. Furthermore the prescribing component can provide navigation such as linear star and or tree.

In accordance with one aspect of the subject invention the prescribing component utilizes a navigation path provider infrastructure including at least one navigation path provider that can provide services to an application and or navigation path client. In other words the navigation path provider infrastructure manages communication between client applications and various navigation path providers. Moreover the navigation path provider s can be a variety of resource providers that access a context node either through transformation and or information retrieval mechanism.

In accordance with still another aspect of the subject invention the creation of the topology can be automatic manual or a combination thereof. The prescribing component receives data e.g. entity graph business intelligence metadata business intelligence journal . . . that is utilized automatically in topology creation. Moreover the topology can be created manual by utilizing a user interface tool that adds a link to represent a logical association between two entities. Additionally the topology can also be created using a combination of automatic and manual techniques.

In accordance with yet another aspect of the subject invention a navigation path expression can be created based upon the topology wherein the navigation path expression is an object model. Elements and filters can be added to the navigation path expression wherein such filters provide exclusion or inclusion for various sub trees. Furthermore navigation path expressions can be added to an element to programmatically prune the navigation path. In addition code can be generated such that the navigation path is persisted as a set of metadata describing navigation route s . The set of metadata can be utilized to generate code wherein the navigation path expression can be composed in a strong typed manner.

In accordance with yet another aspect of the subject invention the prescribing component interacts with a navigation path client application programmable interface API that can provide communications between computer software. The navigation path API can utilize user interface UI binding that enables a binding between an NPath element or called Node and user interface components managed by metadata. Moreover navigation path client API can utilize a journal that records a history of navigation for an application. The journal records the history of navigation regardless of the navigation path utilized. Thus a complex history of navigation within a topology can provide various details and insight into navigation e.g. discovery of data within an application. The journal can be utilized as bases for a topology in order to provide a prescribed navigation for an application.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. These aspects are indicative however of but a few of the various ways in which the principles of the invention may be employed and the subject invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

As utilized in this application terms component system and the like are intended to refer to a computer related entity either hardware software e.g. in execution and or firmware. For example a component can be a process running on a processor a processor an object an executable a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and or distributed between two or more computers.

The subject invention is described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the subject invention. It may be evident however that the subject invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the subject invention.

Once a topology is created by the prescribing component the navigation path which is a collection of acts to navigate the information topology for a specific application s purpose is employed. The navigation path is a sequential list of links over the topology that represents a sub graph of a general topology created from the received data. The content of the navigation path defines a graph while the physical sequence of link objects in the list represents a linear navigation path. It is to be appreciated that the applications can utilize navigation paths by filtering nodes within the topology with an expression. Moreover such navigation paths typically include a root node a sequence to support a next functionality e.g. exploring the next node within a navigation path a user interface UI presentation binding and a notion of navigation type e.g. linear star or tree .

A topology with a navigation path contains various nodes with associated links. A node is an object that represents a state of navigation wherein a list of links to other nodes and data contents during navigation is contained. It is to be appreciated that the node within the topology and navigation path can be associated to a model element such as but not limited to Entity or EntityCube discussed infra where contents are provided. Each node contains node content which is data bound to a specific node. Moreover it is to be appreciated the data bound to a node is not limited to a particular node. For instance data A can be bound to node A and node B . Furthermore the node content can be an entity EntityCube and or query that returns a collection of data or simply a resource upon access. The node content further provides a value and type information wherein the type content is dynamically assigned at run time when the node value is retrieved. The links between nodes inter relate one another. A link can contain a unified resource identifier URI and references to source and destination nodes. A link object is instantiated similarly to associated end nodes.

The topology and navigation path created based upon the data facilitate use of prescriptive navigation within the application s . The prescribed navigation during design time shifts the discovery process from run time to design time. By utilizing a topology based on received data and a navigation path application developers can prescribe navigation paths for an end user such that the user would likely navigate through the content of the application s . Thus the topology and navigation paths created by the prescribing component facilitate developing the application s by prescribing data exploration discovery search into specific paths rather than allowing a user to roam aimlessly. It is to be appreciated that the applications can be but not limited to a business application an application on a computer readable medium an application within a business framework etc.

The prescribing component further includes a topology component that creates a topology based upon data such as metadata related to an application. A topology is a metadata instance on uniquely labeled link collection which is a network of at least one node and at least one link object. The topology component creates the topology such that the network of node and link objects represents a subset of traversable objects and paths. It is to be appreciated that the topology created is a reflection of a conceptual model for a specific application component.

Upon creation the topology can be re usable. For instance the topology component can create a topology based on data wherein such topology is re usable by an application and or a plurality of applications. Moreover the topology can be re used by various parts and or components of an application e.g. by utilizing a different path for the navigation logic in the application . In one example the topology component can create a topology such that an application Salary and an application Bonus Report utilize the substantially similar topology.

The topology contains nodes and associated links. A node is an object to represent a state of navigation containing a list of links to at least another node with data contents. For instance the nodes can be entities entity cubes queries tasks and other resources. A link contains a uniform resource identifier URI that references to a source and destination node. It is to be appreciated that the topology component can create a topology manually and or automatically. Thus the topology component can create a topology based on a user interface UI e.g. manually or based on a provider s e.g. automatically or a combination thereof.

The topology component creates a topology allowing a navigation path to be created thereupon that provides the prescribed navigation for an application. The navigation path is created by an npath component wherein the navigation path is a sequential list of links over the topology e.g. created by the topology component to represent a sub graph of such topology. For instance a topology can consist of a plurality of nodes and links wherein an exploration through a series of related nodes via links can be a navigation path. The content of the navigation path defines the sub graph while a physical sequence of link object in the list represents a linear navigation path.

The following example is for explanatory purpose and is not to be a limitation construed on the subject invention. A topology can be created wherein the topology is a transportation network containing stops e.g. nodes and connecting roads streets e.g. links . A navigation path within the topology can be a specific route from point A to point B. The creation of such prescribed navigation provides a guided tour of the transportation network that facilitates moving people from one location to another.

The npath component creates the navigation path such that a sub set of the topology is utilized. It is to be appreciated that although a sub set of the topology is prescribed the sub set can include the entire topology. Furthermore the npath component creates the navigation path such that the composition is at least one link and at least one node. The navigation path also contains a root node a sequence to support next a user interface UI presentation binding and a user interface UI binding metadata e.g. inherited from the source topology but can be overridden . In addition the navigation path supports a plurality of navigation and or exploration types e.g. linear star tree traversal . . . . The various navigation types drive navigation path application programmable interfaces API s behavior in the runtime for the application.

For instance linear navigation can be utilized wherein the links to nodes are sequential in a linear path. In another example a star navigation type can be utilized. Star navigation also known as hub and spoke consists of a number of links jutting outward from a central node. The distribution is routed through the central node e.g. hub before reaching the final destination via links to other nodes. Another navigation type supported by the navigation path is for example tree traversal. Tree traversal is the process of visiting each node in a tree data structure wherein a sequential procession of each node is provided. It is to be appreciated that the traversals can be characterized by the order in which the nodes are visited.

Referring still to the npath component creates the navigation path during design time providing a prescribed navigation within the topology. During design time the npath component can utilized to create a navigation path out of the topology by identifying a root node and pruning e.g. deleting the associated graph e.g. links and or nodes . Moreover during run time applications can create additional navigation path s and or utilize the design time created navigation path. When the application creates the navigation path during runtime filters are utilized in order to filter node s yielding a runtime created navigation path.

The prescribing component provides prescribed navigation utilizing a topology and a navigation path that facilitates developing an application. The navigation path e.g. sub graph of the topology can be populated e.g. populate nodes and or links by a navigation path e.g. npath provider infrastructure which includes at least one provider to an Nth provider where N is an integer. The navigation path provider can be a resource provider that accesses a context node via for example a transformation and or information retrieval mechanism e.g. a meta model provider for entities a drill up down through across for Business Intelligence BI a task operation or workflow . . . .

The navigation path providers e.g. Providerto Provider have basic capabilities that provide appropriate functionality to the overall navigation path provider infrastructure . The navigation path provider responds to a request with a data context providing node s with data e.g. populated the metadata . The navigation path provider also implements the ability to respond with a set of return types e.g. DataSets Objects XMLs etc. . Moreover linking capabilities are provided such as link context e.g. wherein the provider produces links with a context and link type e.g. wherein identity is given to a specific type of providers .

It is to be appreciated that the navigation providers e.g. Providerto Provider can provide additional capabilities such as for example security token and or filters discussed infra . The security token provided can be employed in order to verify and or authenticate navigation path providers within the navigation path provider infrastructure . For instance a topology can be created based on a metadata wherein a navigation path is representative of a sub set of the topology. In order to provide data context to the nodes e.g. which contain metadata a navigation path provider can access a context node with a transformation and or information retrieval mechanism. However in order to provide security authenticity and or verification the navigation path provider can utilize a security token.

The navigation path provider infrastructure can include at least one navigation provider wherein the infrastructure manages communication between client application and at least one navigation path provider. It is to be appreciated that the navigation path provider infrastructure can manage communication between a plurality of client applications and a plurality of navigation path providers. The navigation path provider infrastructure provides plug ability extensibility and or delegation capabilities wherein navigation requests are delegated to specific set of providers when the type information is provided. However when type information is not provided the infrastructure requests responses by broadcasting requests to Providerto Provider. Furthermore the navigation path provider infrastructure can provide instantiation for the topology and the navigation path. It is to be appreciated that the instantiation for the topology is for resolving navigation path expression and navigation path are in run time. In addition it is to be appreciated that code can be generated such that the navigation path is persisted as a set of metadata describing navigation route s . The set of metadata can be utilized to generate code wherein the navigation path expression can be composed in a strong typed manner.

Turning now to an architecture is illustrated that facilitates developing an application during design time by utilizing a prescribed navigation. By creating a topology and a navigation path e.g. sub set of the topology based on metadata received a prescribed navigation can be implemented allowing streamlined development of an application. The architecture establishes design points such as but not limited to enabling high degree of plug ability and extensibility focusing on developer and application needs long term stability of application programmable interfaces API s providing a high level of prescriptive ness for a business framework navigation and maximizing business intelligence BI and entity metadata values.

The architecture includes a workspace tier and a service layer . Within the service layer an npath core is included that facilitates creating a prescribed navigation for an application. The npath core further includes a topology a session and an instantiation . The npath core instantiates a topology based upon received data. For instance the topology can be created based on metadata contained in a metadata store not shown . As will be discussed in more detail infra the topology can also be created manually or automatically or a combination thereof. Once the topology is instantiated the npath core instantiates a navigation path e.g. also referred to as the NPath from the topology instance by utilizing the instantiation . In other words the instantiation can instantiate the topology and or the navigation path e.g. also referred to as the NPath . In one example the navigation path can be instantiated from the topology instance utilizing a navigation path expression also referred to as an NPath expression. In yet another instance code can be generated such that the navigation path is persisted as a set of metadata describing navigation route s . The set of metadata can be utilized to generate code wherein the navigation path expression can be composed in a strong typed manner. Also it is to be appreciated that the navigation path created has a client side and a service side wherein the navigation path represents the client side and the navigation path is on the service side not shown .

Furthermore the npath core can create a service session for an npath client allowing for a prescriptive navigation within the workspace tier. It is to be appreciated the npath core represents a service layer for the npath client to delegate requests to a provider infrastructure . It is to be appreciated the provider infrastructure is the service layer that manages communication between client applications and navigation path providers as discussed supra e.g. request response delegation broadcasting registration . . . .

The npath resides in the workspace tier wherein the NPath e.g. navigation path can utilize a journal a path an expression and a user interface UI binding . The navigation path client side provides functionality for client applications such as for instance expression contains a strong typed expression to compose an NPath expression to create an instance of a path out of the topology instance in the service UI binding enables a navigation context sensitive binding between a node and UI components which is persisted as part of metadata path contains a programming model that enables navigation on links in the navigation path and journal provides a journaling functionality to track user navigation and or the history associated thereto.

In one example the journal provides a log and or record to track user navigation within an application. The journal can be utilized in order to prescribe navigation within an application and to facilitate developing a topology with navigation path s to better discover relationships and traverse data points. For example the journal can track a particular user s navigation within a topology or possibly outside of the topology due to run time ad hoc exploration during a session such that a log and or record are created wherein such record and or log can facilitate developing an application.

In another example the topology can be automatically created from business intelligence BI data. Thus cubes dimensions and measures are nodes with the addition of a business criteria instance e.g. a multidimensional expression MDX statement is also a node. The links among the above nodes can be for instance drill up drill down drill across etc. as implemented by at least one business intelligence BI provider. It is to be appreciated that the topology automatically created also covers the relationship between business intelligence BI metadata and entity metadata. Moreover in different example the automatic component can create the topology based on a business intelligence BI journal. The journal can be but not limited to submitted to the navigation service wherein a topology can be created by converting the journal by removing duplicate entries.

The manual component can receive a user input via user interface tools allowing the topology to be created and or modified manually. For example a link can be added to represent a logical associated between two entities with the following code 

It is to be appreciated that the manual component and the automatic component can be utilized in conjunction in order to create a topology. For instance the topology can be provided automatically based on the techniques described above yet a user can utilize a user interface to edit the automatically provided topology. Thus customization of a topology is possible and available to specifically tailor to an individual.

The topology created can then be utilized to create a navigation path by the npath component . The navigation path created is a sequential list of links over the topology to represent a sub graph of the topology e.g. created automatically by the automatic component created manually by the manual component or a combination thereof . It is to be appreciated that a navigation path can be created utilizing a persisted journal wherein the journal is automatically utilized and or manually utilized. The content of the npath defines a graph while the physical sequence of link object in list represents a linear navigation path. Furthermore the navigation path and the topology path facilitate developing an application by utilizing prescriptive navigation within such application.

The npath client API provides a variety of functionality to the system in order to facilitate prescribing navigation within an application. The npath client API includes a navigate that provides a plurality of navigation. The navigate can provide an npath sequential navigation wherein the npath sequential navigation allows the application to sequentially travel down the navigation path with minimal path discovery. It is to be appreciated that the interaction with the npath service is to obtain node contents by calling a TraverseLink . For instance once a connection can be established allowing a client to connect to the npath service . The navigation path is then instantiated by calling the npath service with a topology name a starting node an npath expression and a traversal strategy to get the instance of the navigation path. The application can then navigate utilizing Next on the navigation path from the starting node. The sample code below is a typical example of an application 

Furthermore navigate can provide an npath sub tree navigation wherein the application navigates within the links of direct children in the given npath context node. It is to be appreciated that there is no path discovery and the interaction with npath service allows the reception of node contents. The client connects to the npath service wherein an npath is instantiated that allows navigation when the application calls Traverse . It is to be further appreciated that typical examples are form based applications with hot links on displayed data and or button controls. Hot links for instance are dynamically activated when a path exists from a starting node to a link destination node.

Referring to briefly to an online order application can include the forms customer sales report order orderline and product. The navigation path for an application can be . The navigation path is depicted in containing the forms. The npath service can return the navigation path based on the topology and expression specified by the application.

In another example the application can utilize a set of disconnected user interface UI elements e.g. Winform at a client side wherein the elements are bound to at least one node in a navigation path individually. Referring to briefly the user interface UI elements can be a design time illustration of a customer order form and a run time illustration of a customer order form . For example a Customer form UI can be bound to the Customer node in the navigation path independent of a specific application but specific to a navigation context such as data source type the navigation link type or user inputs of any form. Insides this Customer form example UI controls are dynamically generated based on the npath in metadata. In this example the two navigation path button controls in the customer order forms can be prescribed to bind the node data to UI controls such as report chart order form orderline datagrid etc. During run time traversing a customer node activates the form that matches the given navigation context wherein the node data is presented and links that are traverse able form the source are populated in the navigation control area .

Continuing with the above example a report button can be created by an application developer and or by an npath client API automatically. When the report button is activated the link link is traversed. The npath can then load report data and display the report chart user interface UI . The report chart can be for instance a modal dialog box a modeless form and or an in place docked control. Additionally the order form can have various controls to display order detail collections e.g. derivatives of data grid controls . The order detail control can be a child of the order form so that the link is traversed automatically as order is traversed. The existence of link enables a hypertext link on the product column of order lines. The above can be demonstrated by the following code 

Referring back to the navigate can provide topology navigation wherein an application explicitly requests discovery of links outside a navigation path but within the given topology. The navigate can utilizing GetPath on a known node. The application can call GetPath on a node to obtain the links that are in scope of the topology without the accessing an npath provider . The links returned are in a form of a new npath instance. It is to be appreciated the application can add returned links into a journal selectively discussed infra . The above can be demonstrated by the following sample of code 

The npath client API can further include a journal that allows the recordation of history of navigation. The journal can record the history of a navigation regardless of the navigation path used. The journal can be opened to allow the recording of the navigations which proceed until the journal is closed. The journal can be saved in for instance a local file upon closing. In one example an application upon activation can determine whether a journal file is located in a configuration file in order to load the journal history. When such application is de activated the journal can be saved in the substantially similar file.

Furthermore the journal contents can be uploaded into a topology wherein such journal contents can append replace or override the topology. It is to be appreciated that the connection can have right to write onto metadata. For instance a journal can create a history of navigation for a user wherein such history can be the basis of the topology and navigation path creation allowing the prescribed navigation to facilitate developing an application. The journal can be updated by navigation activity upon activation thus all navigation activity is recorded. The main functions for a journal are Back and Forward. 

Referring briefly to a design overview is given for a journal wherein the journal object model encapsulates the pages navigated visited by a user. The journal object model contains a Journal object which provides a variety of attributes and operations. A back attribute provides the links the user can navigate backwards to and can be implemented as an array rather than a stack for flexibility. A forward attribute allows the links the user can navigate forward to which also can be implemented as an array instead of a stack for flexibility. Another attribute current provides the current link or page that is currently being visited e.g. it does not belong to either the forward or back list of links . The journal object further provides operations such as for instance journal e.g. construct a journal object journal e.g. copy constructor traverse e.g. navigate to a new link or page where the current page is pushed onto the back stack and the current page is set to the new page back e.g. go backwards one page back e.g. go backwards the number of pages specified forward e.g. go forward one page forward e.g. go forward the number of pages specified serialize e.g. save the journal to an XML stream deserialize e.g. load the journal form an XML stream backstack e.g. return the array of pages in the back array which does not include the current page and forwardstack return the array of pages in the forward array which does not include the current page . Moreover the journal object model contains a JournalLink object that encapsulates the information needed to recreate a page visited by the user. For instance the JournalLink object contains a name e.g. the name of the page which can be used to display the journal nodes to a user and a URI attribute e.g. the URI that describes the link the user traversed to get to this page wherein the URI contains the context data . The JournalLink object provides operations such as for example name e.g. return the name of the page and URI e.g. return the URI that created the page wherein the UR page type together with the URI can recreate the page .

The npath client API can further include a UI binding . The graphic user interface GUI application can be based on the navigation path substantiated yet displaying the user interface UI for a node upon navigation is done with the npath client API . For example a developer can write a user interface control e.g. a page in a client component over npath client API can bind it to a type described in the business framework metadata. The page can implement an interface to communicate to the npath client API . It is to be appreciated the traversal of the navigation path occurs from the data instance of the root node. Yet application s need to provide the context data which is done by a construct data search criteria of the types specified by the navigation path.

When a page binds to a node in the topology via the UI binding the view of a node content is determined. Moreover a binding determines the particular page run time behavior such as how it is activated or the relationship with other controls on display. For example a binding determines if the user interface UI control is modal or modeless or in place control. It is to be appreciated that the page can have other in place pages as child pages e.g. provided the nodes of child page are reachable from the parent page node . The traversal can take place when the parent page is loaded.

The UI binding provides the registration of pages e.g. registration with for instance a navigation manager default UI binding e.g. one for single data instance that is property page like and one for collections that is a data grid type based UI binding e.g. registering a page as a type based binding that overrides the default binding node based UI binding e.g. page matching to the type and node id when there is more than one page available link based UI binding e.g. page matching to the type node id and link when there are multiple pages available binding context e.g. registration of pages and providing a binding context allowing multiple pages to be registered for one type or one node .

The npath client API can include a navigation session manager that facilitates navigating services. The navigation session manager is a singleton object in npath client API that can manage navigation path s journal pages and UI binding at a presentation tier. Upon initialization of an application the npath client API can connect to a navigation service not shown for the application wherein the connection requires input parameters such as for instance business framework account name password etc. Once authentication of the user is provided by the service side the connection handle object for the session is returned. It is to be appreciated that the authentication can be provided by the business framework.

The navigation session manager can call the npath service to get a navigation path instance returned. In order to instantiate a navigation path the application provides for example the following parameters a topology name a starting node instance a navigation strategy and an expression string or object model OM . The topology name is a unique name of a topology. A nameless topology is simply a returned navigation path containing only the starting node and the first level child nodes as a result of discovery. A starting node instance provides the starting point for a node. The starting node instance is not necessary if criterion can uniquely identify the starting node of an absolute path from the root. Yet an application may not contain information regarding the topology nor the absolute path to a node in which can the node is identified first. The navigation strategy is the technique utilized in navigation. With a list of links the connectivity of a graph is fixed yet traversing from the starting node is different. In other words two or more navigation paths utilize the substantially similar links yet different navigation sequence provided by the application. For instance possible sequences are depth first linear on a sequentially connected links breadth first or star e.g. use connectivity rather than sequence . The expression string or object model OM is an XPath like expression with object model support to identify the path over a topology.

The object model further includes an Element class wherein the Element class implements the ISerializable interface to support serialization to XML. Moreover the element class encapsulates an XPath s element and contains a filter and a chain or tree of other element objects. Element contains attributes such as but not limited to entity e.g. the business intelligence entity where if null and first element in the path it is a relative path if null and the element is not the first node it is a parent node children e.g. the next element in the path parent e.g. the parent to this element and filter e.g. the filter expression to filter subsequent sub trees . The Element class can provide operations such as for instance element e.g. constructor filter e.g. return the filter add e.g. append an element to the path wherein the element is added to the children attribute of the current element add e.g. append an array of elements to the path thus to create union of sub trees include e.g. help function to include an element and its sub tree to the path exclude e.g. help function to exclude an element and its sub tree to the path children e.g. read only property that returns the children array parent e.g. read only property that returns the parent of the element and ToString e.g. returns an XPath like expression representation of the element and can be called recursively by NPathExpression .

Furthermore the object model contains a filter class which implements the ISerializable interface to support serialization to XML. A filter contains a stack of terms operators and functions that make up the filter expression. The filter calls can contain the stack attribute which provides a stack representative of the post fix order of the filter expression. The filter class can also provide operations such as for example filter e.g. constructor equalsto e.g. helper method notequalsto e.g. helper method push e.g. internal use that pushes the term or operator onto the post fix stack pop e.g. inter use that removes the top term or operator from the post fix stack isempty e.g. returns true if the stack is empty and tostring e.g. return an XPath like expression representation of this filter and can be called recursively by element .

Utilizing the object model and a topology can be created from an entity cube wizard. A topology can be created stored and then loaded by a client. The following code illustrates the creation storing and loading by a client 

At the navigation path and topology is utilized for prescribed navigation for an application. The navigation path and topology can be utilized by for instance a navigation path service including a navigation path provider further including a provider infrastructure. The navigation path contains a root node that is populated with data instances by the navigation service. Once populated the application can utilize the navigation path and topology for navigation e.g. wherein the navigation is based on the prescribed navigation . Such navigation can be for example sequential navigation navigation sub tree navigation ad hoc navigation topology navigation journal navigation etc. Furthermore the navigation path and topology can be utilized in conjunction with a navigation path expression e.g. object model created during design time . The navigation path expression contains elements and filters wherein sub trees can be added or excluded from the path. It is to be appreciated that expressions can be added to each element to programmatically prune the path. In addition code can be generated such that the navigation path is persisted as a set of metadata describing navigation route s . The set of metadata can be utilized to generate code wherein the navigation path expression can be composed in a strong typed manner.

At a connection to a navigation path service e.g. a navigation path provider having a navigation path provider infrastructure is provided wherein a variety of services can be offered to an application. For instance the application can connect to the navigation path service that verifies and provides contextual data to the navigation path and topology e.g. a root node is populated with data instances by the navigation service . Once connected and or verified to a navigation path provider and or navigation path service the navigation path and or topology is utilized as a prescribed navigation for an application at . Such navigation can be for example sequential navigation navigation sub tree navigation ad hoc navigation topology navigation journal navigation etc. Furthermore the navigation path and topology can be utilized in conjunction with a navigation path expression e.g. object model created during design time . The navigation path expression contains elements and filters wherein sub trees can be added or excluded from the path. It is to be appreciated that expressions can be added to each element to programmatically prune the path. In addition code can be generated such that the navigation path is persisted as a set of metadata describing navigation route s . The set of metadata can be utilized to generate code wherein the navigation path expression can be composed in a strong typed manner.

At a navigation path is established within the topology created e.g. automatically manually or a combination thereof . Once established navigation path providers e.g. navigation path services are secured and or authenticated at providing the population of the navigation path and topology at . Once connected and or verified and or populated the navigation path and topology is utilized as a prescribed navigation for an application at . Such navigation can be for example sequential navigation navigation sub tree navigation ad hoc navigation topology navigation journal navigation etc. Furthermore the navigation path and topology can be utilized in conjunction with a navigation path expression e.g. object model created during design time . In addition code can be generated such that the navigation path is persisted as a set of metadata describing navigation route s . The set of metadata can be utilized to generate code wherein the navigation path expression can be composed in a strong typed manner. The navigation path expression contains elements and filters wherein sub trees can be added or excluded from the path. It is to be appreciated that expressions can be added to each element to programmatically prune the path.

In order to provide additional context for implementing various aspects of the subject invention and the following discussion is intended to provide a brief general description of a suitable computing environment in which the various aspects of the subject invention may be implemented. While the invention has been described above in the general context of computer executable instructions of a computer program that runs on a local computer and or remote computer those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multi processor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based and or programmable consumer electronics and the like each of which may operatively communicate with one or more associated devices. The illustrated aspects of the invention may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the invention may be practiced on stand alone computers. In a distributed computing environment program modules may be located in local and or remote memory storage devices.

One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operably connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operably connected to one or more server data store s that can be employed to store information local to the servers .

With reference to an exemplary environment for implementing various aspects of the invention includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Card Bus Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA Firewire IEEE 1394 and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in the suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the subject invention can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices which require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses wire and or wireless communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet Token Ring and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the subject invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the subject invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject invention are possible. Accordingly the subject invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

In particular and in regard to the various functions performed by the above described components devices circuits systems and the like the terms including a reference to a means used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. a functional equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary aspects of the invention. In this regard it will also be recognized that the invention includes a system as well as a computer readable medium having computer executable instructions for performing the acts and or events of the various methods of the invention.

In addition while a particular feature of the invention may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes and including and variants thereof are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising. 

