---

title: Pluggable window manager architecture using a scene graph system
abstract: Described is a pluggable policy component that determines the look and feel, or windows visual experience, of a computer user interface. Window-related instructions are redirected to the policy component, while client area change instructions are provided to a substrate (into which the policy component plugs in) that includes a composition component. The plug-in policy component handles windows-related (e.g., structural or attribute) changes to a scene graph to construct and maintain the scene graph, while the substrate handles program content changes to the client areas within windows. The substrate may include a desktop window manager that has access to the client areas in the scene graph, whereby the desktop window manager can copy a client area for rendering. For example, the desktop window manager can provide a supplemental live thumbnail image of a window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716685&OS=07716685&RS=07716685
owner: Microsoft Corporation
number: 07716685
owner_city: Redmond
owner_country: US
publication_date: 20050830
---
The look and feel of an operating system s user interface provides the primary user experience with the operating system. For example the user experience is based on what the windows of a graphical windowing environment look like how they are positioned on the screen relative to other windows and so forth.

The cost to change the look and feel of an operating system is significant. In general a design team provides a design and programmers code the operating system to match what the design team desires. As new innovations and designs emerge the cost is repeated whenever a new look and feel is specified.

Briefly various aspects of the present invention are directed towards a policy component that is a plug in to a substrate in which the policy component determines the look and feel or windows visual experience of a user interface. The plug in policy component handles windows related e.g. structural or attribute changes to a scene graph while the substrate handles program content changes to the client area within a window.

Window related instructions and client area change instructions are separated such that the window related instructions are provided to the policy component and the client area change instructions are provided to the substrate including a composition component. The window related instructions are processed by the policy component to construct and maintain a scene graph while the client area change instructions are processed at the composition component to change visible data output in the client areas within the scene graph. A redirection component which may be part of the substrate may be used to perform the separation.

The substrate may include a desktop window manager that has access to the client areas in the scene graph whereby the desktop window manager can copy a client area for rendering. For example the desktop window manager can provide a supplemental live thumbnail image of a window.

The policy component thus is responsible for the look and feel of windows rendered from the scene graph. By replacing the pluggable policy component with another pluggable policy component a different look and feel of windows rendered from the scene graph may be provided.

Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A scene graph comprises a data structure in which graphics instructions are retained for later rendering. Alternative synonymous terms for scene graph as used herein include display list display tree and retained mode graphics system. 

Various aspects of the technology described herein are directed towards a desktop window manager architecture that is designed to include a pluggable visual policy for windows atop a scene graph layer that provides the user window experience while providing a number of productivity reliability and other visual benefits. In one implementation a desktop window manager includes a pluggable visual policy component or layer that provides the visual policy including semantics for the user window experience with the system e.g. the appearance of windows how the windows are positioned on the screen relative to other windows and so forth. Because the visual policy component is pluggable subsequent releases and or different arrangements of the operating system may replace one implementation with another implementation that can change the look and feel of the user experience in potentially drastic ways such as for example a complex three dimensional world. In general and as described below this pluggability can be accomplished without changes to the underlying code referred to herein as a substrate that manages most of the interactions with the rest of the operating system. As a result the cost and effort of implementing a new and innovative look and feel is substantially reduced.

However as will be understood the present invention is not limited to any architecture described herein but may also apply to other architectures. For example the examples herein are described in the context of a Microsoft Windows based operating system and framework however the present invention will apply to other operating systems and or frameworks. Moreover the division of functionality and structure between the various components is somewhat arbitrary and it is also equivalent to have the functionality and structure implemented in a lesser number of components or in more components than those described herein. As such any of the examples mentioned herein are non limiting and the present invention may be used various ways that provide benefits and advantages in computing in general.

Turning to of the drawings there is shown a block diagram generally representing an exemplary architecture of system components for providing a graphical windowing environment experience. In general application programs output graphics instructions which may be immediate mode e.g. GDI or DX graphics commands and or bitmaps intended by the application to be directly output to the display or retained mode graphics instructions e.g. vector graphics commands directed to a drawing surface of a scene graph rendering tree for later output. Whether immediate or retained mode a desktop window manager may route the graphics commands and bitmaps to per application retained mode surfaces and composes the surfaces for rendered output. Alternatively the system may directly compose from at least one of the application program s graphics instruction stream without requiring an intermediate surface.

The desktop window manager may be written with any technology. For example as represented in the desktop window manager may include an unmanaged desktop window manager component e.g. written in native processor specific code and or a managed desktop window manager component e.g. written in managed .NET code Common Language Runtime or CLR . Note that these may be separate components and are only examples any number of variations are capable of performing equivalent operations above a scene graph system.

In general if present the unmanaged desktop window manager component calls functions of a media integration layer MIL core while if present the managed desktop window manager component calls functions of a managed e.g. CLR .NET framework which in turn calls the media integration layer MIL core . In one implementation the managed framework allows programs to output their user interface code in markup language such as XAML and also provides higher level operations such as styling data binding and inheritance. Note that an alternative window manager may be written in managed code yet use the low level MIL functionality e.g. rather than XAML.

A primary function of the desktop window manager is to process the off screen surfaces to which the application programs have provided content and other instructions and or directly compose from application program graphics instructions. The desktop window manager knows about these surfaces and receives notifications about when they change as well as when they are moved resized and so forth. The desktop window manager processes this information and having access to the surfaces and or instruction streams corresponding to windows of the applications is responsible for compositing them for rendering to the display.

Note that because the desktop window manager sets up the composition of these windows the desktop window manager can perform additional functionality that cannot be done in operating systems in which applications write directly to the screen. For example the desktop window manager can take some or all of the various existing windows and show live thumbnails of existing windows. Alternatively the desktop window manager can present the various windows in a three dimensional carousel type configuration with their current live content displayed. Virtually any other types of rendered output using the surfaces as sources of graphics data are feasible. Such supplemental displays of the client area may be rendered independent of whether the client area is also being shown in its corresponding program window at the same time.

In accordance with various aspects of the present invention the desktop window manager includes or is otherwise associated with a pluggable visual policy that provides the window experience which along with the MIL core construct and modify a scene graph . To this end a redirection component which may be considered part of the substrate routes application content directed to the client area of the window to a unified composition engine UCE of the MIL core and routes window related commands to the pluggable visual policy component . Note that it is feasible to have the redirection component built into the pluggable visual policy however doing so would make the pluggable visual policy somewhat more difficult to implement and thus in one implementation the redirection component is included in the substrate.

In general the UCE writes and adjusts the client area CA of program windows represented by nodes in the scene graph . The client areas correspond to the per application surfaces or instruction streams and may be bitmaps or retained mode subtrees e.g. vector graphics describing a scene subgraph . The UCE which is part of the substrate and thus need not be replicated with each new policy avoids having a policy developer have to handle tasks such as dirty rectangle management occlusion culling rendering code scheduling code window redirection and the like that are already provided in the UCE.

The pluggable visual policy constructs and adjusts other aspects of the windows including the non client areas NCA such as the frame FR and window related buttons BTN such as minimize maximize and close. The pluggable visual policy builds the tree below the desktop DT based on other application program specified or operating system specified operations including window creation window deletion a window Z order change a window resize a change to window information e.g. title icon style and so forth window closing window minimizing window maximizing window menu invoking and so forth. The pluggable policy component may also perform tree related operations such as to place and or modify transformation nodes TF in the tree e.g. for scaling magnification purposes and or to cause a thumbnail of a window to be displayed on another part of the tree.

The UCE is a consumer of the scene graph and is responsible for traversing it and invoking code of a renderer as appropriate. The result is a rendered desktop including its windows W W. Note that only changes to the scene graph need be updated thus saving significant processing resources. Indeed the retained nature of the UCE also lends itself well to remoting the visual policy window experience across the network to a separate client machine in that because it is retained the structure can be sent just once with only edits subsequently sent.

As represented in the pluggable experience component is shown within the user mode process . In general the remainder of the user mode process comprises the substrate including the window redirection component and the UCE of the MIL core . Also represented in are the kernel mode components which include the operating system kernel component e.g. Win32K .

In general the window redirection component receives graphics related data from the operating system kernel component via a LPC local procedure call port or the like such as when an application program requests via an operating system API to write to the display e.g. via GDI graphics. Note that this communication path from the operating system kernel to the window redirection component handles synchronous calls e.g. related to hit testing and asynchronous calls e.g. related to window information and client area .

The window redirection component also may receive application program generated DX graphics instructions and may receive retained mode e.g. vector graphics instructions from application programs that intend to write to retained surfaces or provide instruction streams for direct composition rather than directly to the display. In general regardless of whether the program is intending immediate mode graphics or retained mode graphics the window redirection component routes application content directed to the client area of a program window to a corresponding surface or the instruction stream for direct composition thereby providing retained mode graphics.

The pluggable policy component may receive calls from the window redirection component . Such calls are directed to messages such as Window Moved Window Came to Front Window Closed a request Tell what section of the window was hit and so forth. Note that the calls may be synchronous or may be asynchronous by having the window redirection component comprise a separate thread that queues such messages for dequeuing by the pluggable policy component . If asynchronous a separate communications path may be provided for synchronous out of band communication between the pluggable policy component and the redirection component .

In one implementation the input to the pluggable policy component does not contain a Window Content Changed message which occurs whenever the application specific content of the window is changing and is typically what happens most frequently. Such messages are handled directly in the window redirection component considered part of the substrate and are instead routed to the UCE for writing to or otherwise modifying the application program s corresponding surface.

This separation between program content related messages and window structure attribute related messages means that most commands are handled by the substrate whereby less message handling is required by the provider of the pluggable policy component making it simpler to implement. Moreover to make development of a plug in component even more straightforward with the managed desktop window manager a developer of the plug in component is able to use a standard API set to a managed framework to build the visual and interactive portion of the plug in component . This standard API set may be accessed through managed interfaces or through MIL core interfaces to create data types compatible with the substrate. This allows use of a managed framework and or graphics platform to build variants of the plug in component .

Returning to one output from the pluggable policy component comprises an output to the operating system kernel component and is primarily used to get information about the state of the windows in the system e.g. attributes such as the window text title via calls. The communication path is also used to inject information into the operating system kernel component . For example the geometric transformation that a window is subject to needs to be known by the operating system kernel component so that the operating system kernel component knows what portion of a window is hit during hit testing.

As described above the output from the pluggable policy component to the UCE is used for building up and performing edits on the overall scene graph that is rendered into the desktop . The pluggable policy component constructs and edits the scene graph representing the desktop by using constructs e.g. text lines shapes video images 3D and so forth . This may include changing the shape of the graph e.g. adding and removing windows but also may include changing attributes in the tree e.g. changing a transform to change magnification from 0.5 to 1.2. The pluggable policy component may also include more than one policy and differentiate among sources of such messages e.g. a managed application program can have a managed policy e.g. window style and or behavior while an unmanaged application program can have an unmanaged policy.

The pluggable policy component also has access to the redirected application windows which it uses to construct the scene to be displayed. As described above displays such as thumbnails of the live windows carousels and other ways to display the live windows are thus capable of being rendered.

In summary the substrate provides a set of services and abstractions that the developer of the pluggable policy component can leverage to provide a different window experience. Further because the pluggable policy component is atop a scene graph API that is called to construct and maintain a retained mode scene graph the pluggable policy component need not be concerned with processing the graphics and or controlling the rendering loop and instead lets such operations be handled by the substrate. This frees the pluggable policy component to be expediently written to provide new window experiences.

The development may be facilitated by use of the API set of a managed framework e.g. using CLR .NET framework entities. The scene graph API may provide very rich media functionality including 2D 3D vector graphics video high quality text and so forth.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

