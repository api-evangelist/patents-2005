---

title: System and method for providing service management in a distributed database system
abstract: Embodiments of the present invention provide a system and method for service management in a distributed database environment. In general, embodiments of the present invention provide a service manager that connects to or is part of a database appliance that collects database performance data in the distributed database system. The database appliance accesses traffic between database clients and database servers and collects a variety of database performance statistics without having to rely on agents at the database clients or database servers. The service manager can access the performance data from the database appliance (locally or over communications link) and archive the performance data. Additionally, the service manager can compare items of the performance data (e.g., specific performance statistics) to user defined thresholds. If a threshold is met, the service manager can notify a user by, for example, sending an email.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07984073&OS=07984073&RS=07984073
owner: Crossroads Systems, Inc.
number: 07984073
owner_city: Austin
owner_country: US
publication_date: 20050615
---
The present application claims Under 35 U.S.C. 119 e priority to and the benefit of U.S. Provisional Patent Application No. 60 587 021 entitled Database Appliance and Service Manager filed Jul. 9 2004 by Ewing et al. which is hereby fully incorporated by reference herein.

The present invention relates to systems of monitoring database transactions and more particularly to a system and method for collecting and reporting information on database communications.

Many businesses governmental organizations educational institutions and other entities depend on the proper and efficient functioning of distributed database systems. A typical distributed database system setup includes clients that interact with application servers that in turn interact with database servers over an internal network. In the e commerce setting for example the clients are typically end user clients i.e. end user computers that access e commerce servers via the World Wide Web. The e commerce servers translate inputs provided by the end user clients into database queries and forward the database queries to the database servers that process the queries. The e commerce servers or other application servers in this situation act as database clients with respect to the database servers.

Application servers are typically connected to database servers by 100BaseT Ethernet or Gigabit Ethernet and communicate using network protocols such as Transmission Control Protocol Internet Protocol TCP IP . Further the application servers and database servers may use specific application layer protocols to store retrieve modify or delete data. For example many database systems use the Structured Query Language SQL to formulate commands to the database server.

In typical database systems performance bottlenecks occur from inadequate or slow database response times. To ensure efficiency and identify performance problems many entities are turning to distributed computer system monitoring applications database monitoring applications that monitor various database system statistics. Database monitoring applications usually require installation of software agents at application servers i.e. database clients and database servers to monitor the communications between the application servers and database servers record response times and collect other statistics. This is disadvantageous because it can require the installation and updating of many agents at distributed potentially geographically remote application and database servers. Therefore a need exists for a system for collecting and reporting information from database transactions that can be centrally managed without requiring the overhead associated with installing agents at the application and database servers.

Embodiments of the present invention provide a system and method for providing service management in a distributed database environment that eliminate or substantially reduce the shortcomings of prior art database management systems that rely on distributed agents for service management.

One embodiment of the present invention includes a service manager that comprises a processor and a computer readable medium accessible by the processor stores a set of computer instructions. The set of computer instructions include instructions executable to retrieve database performance data from a database appliance based on a job description and perform an action on the database performance data based on the job description. The action can include for example archiving the database performance data in a service manager repository or comparing the database performance data to a predefined threshold and notifying a user if the threshold is met.

Another embodiment of the present invention includes a method for providing service management comprising accessing database messages sent from a database client to a database server accessing database messages sent from a database server to a database client and using the accessed messages to collect a statistic on communications between the database server and the database client. The method can further comprise accessing a job description that comprises an indication set of performance data to be retrieved and an action to be performed on one or more items of the retrieved performance data. The method can further include retrieving the set of performance data specified in the job description and performing the action specified in the job description on the one or more items of retrieved performance data. The retrieved performance data can include the statistic collected by the database appliance.

Yet another embodiment of the present invention includes a computer program product comprising a set of computer instructions stored on a computer readable medium. The set of computer instructions can comprise instructions executable by a processor to connect to a database appliance access a job description retrieve database performance data from the database appliance according to the job description and perform an action on the database performance data based on the job description. The database appliance collects performance data at a first network location based on communications between a database client at a second network location and a database server at a third network location.

Yet another embodiment of the present invention includes a system for providing service management in a distributed database environment comprising a database appliance and a service manager. The database appliance is at a first network location and is operable to access database messages communicated on a network between a database client at a second network location and a database server at a third network location and using the accessed messages collect database performance data that represents an aspect of the performance of the distributed database environment. The service manager is at a fourth network location and is operable to retrieve the database performance data from the database appliance compare at least one item of the database performance data to a predefined threshold and generate a notification if the threshold is met.

Another embodiment of the present invention includes a system for providing service management in a distributed database environment comprising a database appliance at a first network location operable to access database messages communicated on a network between a database client at a second network location and a database server at a third network location and using the accessed messages collect database performance data that represents an aspect of the performance of the distributed database environment. The system can further include a service manager at a fourth network location operable to retrieve the database performance data from the database appliance based on a job description and archive the database performance data in an archive according a set of service manager configuration data.

Yet another embodiment of the present invention includes a database appliance with an integrated service manager. The database appliance can comprise a processor and a computer readable medium accessible by the processor storing a set of computer instructions. The set of computer instructions comprise instructions executable by the processor to access database messages on a network using the accessed messages collect a set of database performance data store the set of database performance data in memory access the set of database performance data from the memory based on a job description and perform and action specified in the job description on the set of database performance data.

Preferred embodiments of the invention are illustrated in the FIGURES like numerals being used to refer to like and corresponding parts of the various drawings.

Embodiments of the present invention provide a system and method for service management in a distributed database environment. In general embodiments of the present invention provide a service manager that connects to or is part of a database appliance that collects database performance data in the distributed database system. The database appliance accesses traffic either through port mirroring or acting as proxy between database clients and database servers and collects a variety of database performance statistics without having to rely on agents at the database clients or database servers. The service manager can access the performance data from the database appliance locally or over a communications link and archive the performance data. Additionally the service manager can compare items of the performance data e.g. specific performance statistics to user defined thresholds. If the threshold is met the service manager can notify a user by for example generating an email. This can allow for service level agreement monitoring of the distributed database system without the use of software agents and without requiring that a user constantly monitor the database appliance. The database performance data can include any data that represents some aspect of the performance of distributed database system being monitored including performance of the clients the servers interactions between clients and servers and other performance data.

According to one embodiment of the present invention database appliance can run a service manager program that is executable to provide alerts based on predefined thresholds archive data and undertake control tasks to manage system . Configuration information can be provided to database appliance for service manager program by console system .

Each database client can be configured with hardware and software to act as a database client that can communicate queries to database servers using a query language such as SQL T SQL XQUERY SQL92 SQL99 SQL2003 or other query language. Each database server is configured with hardware and software to act as a database server responsive to the queries in the query language. Database clients and database servers can support Distributed Relational Database Architecture DRDA protocol. DRDA is an open architecture that enables communication between heterogeneous database clients and servers having different vendor platforms and hardware software architectures. DRDA is compatible with a variety of different network protocols including but not limited to TCP IP and SNA. Database clients and database servers may also communicate using other architectures including but not limited to Tabular Data Stream TDS OracleNet or other database protocols. A particular database server may provide access to databases according to different protocols e.g. a database server may give access to one database using DRDA and another using TDS .

A database client can communicate messages toga database server that include for example SQL queries. The receiving database server can be responsive to the messages to make changes to a database and provide responses to the database client . Communications between a database client and a database server can but need not occur in acknowledged message exchange sequences.

Database appliance can receive messages between database clients and database servers collect statistics on performance and provide other monitoring. According to one embodiment of the present invention database appliance can receive messages between a database client and database server in a passive mode or a proxy mode. In the first mode a network switch of network can be configured such that desired port traffic is mirrored to a port connected to database appliance . The process of configuring network switches and hubs to automatically route or mirror all network traffic at one port to another port is known in the art. In the proxy mode messages to and from the database clients and servers are redirected through database appliance . In this case the database client believes the database appliance is the database server and the database server believes database appliance is the database client . In proxy mode database appliance can cache query results from a database server and respond to subsequent queries from database clients using cached data rather than forwarding the queries to the database server as described below.

Regardless of the manner in which database appliance is routed messages database appliance can collect a variety of database performance data including but not limited to number of queries for a particular database average response time to queries to a particular database size of a database number of queries to a particular database server average response time by that server number of a particular query type e.g. number of write queries number of rows returned in response to a query average response time for a query number of queries issued by a database client average response time to that client number of queries for a database table average response time for queries to a data base queries number of queries answered by a database server number of outstanding queries at a database server average wait time at a database server and other statistics that represent some aspect of the performance of database system . In proxy mode database appliance can also gather statistics on the performance of caching at database appliance .

Database appliance according to one embodiment of the present invention can support network connectivity though an IP address. A user can then use an Internet browser or other suitable client software on a general purpose computer e.g. console system to access the IP address of database appliance . Database appliance can determine if console system supports the Java runtime environment and if not can allow the user to download the Java runtime environment from database appliance or request that the user download the Java runtime environment. The use of the Java runtime environment is provided by way of example and other processing environments generally available or proprietary software or other mechanisms can be used for communications between console and database appliance .

If console system supports the JAVA runtime environment database appliance provides a JAVA panel to console system for execution on console system . The JAVA panel in the JAVA runtime environment provides a console application that functions to authenticate the user receive user requested information e.g. performance data from database appliance and render the information to the user. One embodiment of providing visualization of performance data to a user is described in U.S. patent application Ser. No. 10 375 393 System and Method for Tree Map Visualization for Database Performance Data by Richard Walker and Jack Basiago filed Feb. 27 2003 which is hereby fully incorporated by reference herein. The console application need not be implemented as a JAVA panel but can be implemented according to other known programming languages and techniques and can provide a variety of functionality depending on implementation.

Through the console application a user can configure service manager program to retrieve information e.g. performance data from the memory or other storage mechanism of database appliance archive the information in a flat file database or email. Additionally service manager program can be configured to compare performance data to a threshold and if the threshold is met notify the user via for example email. Service manager program can also be accessed via a JAVA panel or using other known programming languages and techniques.

A user can configure service manager program to access service manager repository so that service manager program can write data to service manager repository . illustrates one embodiment of a screen provided by console system for configuring service manager program . In this example service manager repository is a database but in other examples service manager repository can be a file or other data structure stored on a computer readable storage medium such as a hard drive optical disk memory RAM ROM flash memory or other memory . The user can also configure service manager program to access email server to send email alerts. also provides an example of configuration information to allow service manager program to access email server .

As an example service manager program can be configured to retrieve data from the memory of database appliance every hour on the slowest queries at a particular database server and write the data to service manager repository . Additionally service manager can be configured to retrieve performance data every thirty minutes to determine if the response time for any queries is longer than a predefined threshold. If the response time for any of the queries is over the predefined threshold service manager program can generate an email using email server .

Service manager program can also be configured to implement various database system control functions based on the application of rules to data retrieved from database appliance . For example service manager program can be configured with a rule that specifies that if a particular client attempts to write data to a database when the client is only supposed to read data from the database service manger program can access the appropriate database server and change the client s privileges. Service manager program can implement any suitable control functions to change the configuration of database clients database servers database appliance or other systems.

Thus service manager program provides a mechanism to archive data in a database file or email alert users when user configurable performance thresholds have been met and perform other management functions. Because the performance data is collected by database appliance embodiments of the present invention can archive performance data and alert users when the performance data meets a threshold without requiring installation of agents or other software on the database clients or database servers .

Although discussed as a program in it should be noted that the service manager functionality can be implemented as software hardware firmware or a combination thereof. Moreover the computer executable instructions can be a stand alone program a module or function of another program or implemented according to any suitable programming language or architecture as would be understood by those in the art. Furthermore although shown as a program running onboard database appliance other embodiments of the present invention can include one or more external service manager programs in lieu of or in addition to the onboard service manager program that can access database appliance .

MAC layer receives frames from MAC layers at database client and database server extracts packets from the frames and forwards the packets to TCP IP layer . TCP IP layer receives packets from MAC layer and extracts database messages from the packets. The database messages are sent to protocol engine which then extracts SQL statements from the database messages. Database protocol engine can be database protocol specific e.g. be a DRDA protocol engine or may support multiple database protocols. For each protocol supported database protocol engine can include a decoder that extracts SQL statements from particular database messages. For example a first decoder may decode and extract SQL statements from DRDA messages a second decoder may decode SQL statements from TDS messages and a third decoder may decode SQL statements from OracleNet messages. In particular embodiments one or more decoders may include a segmentation and reassembly SAR engine to reassemble or segment database messages as described below.

SQL layer receives SQL statements from protocol engine normalizes and parses the SQL statements for use by application layer . Application layer receives the SQL statements from SQL layer and processes the SQL statements according to various applications residing at application layer . The applications can provide by way of example but not limitation caching of queries and monitoring of communications between database client and database server . One embodiment of a system for providing application layer functionality at a database appliance is described in U.S. patent application Ser. No. 10 933 790 entitled Providing Application Layer Functionality Between One or More Database Clients and One or More Database Servers by Ewing et al. filed Sep. 3 2004 which is hereby fully incorporated by reference herein.

Database appliance can include hardware and software to cache responses to database queries at database appliance record statistics with respect to caching and to return cached query responses to database clients in response to SQL statements rather than passing the SQL statements to the database server . This can increase the speed at which information is returned to database clients when database application operates in its proxy mode. Moreover database application and allow cached database query responses to be updated modified or deleted in response to SQL messages directed to the database from which the query response was cached. In other words database appliance can update delete modify one or more rows fields or values cached at database appliance in response to a SQL statement to update delete modify the corresponding row field or value at the backend database. Embodiments of a system for providing query caching at a database appliance are described in U.S. patent application Ser. No. 10 933 786 entitled Application Layer Query Result Caching filed Sep. 3 2004 by Ewing et al. and U.S. patent application Ser. No. 10 441 714 entitled System and Method for Query Result Caching filed Nov. 25 2004 by Ewing et al. each of which is fully incorporated by reference herein.

Database appliance can monitor database messages between database client and database server and record observations including performance data regarding the database messages. One embodiment of a system for providing application layer monitoring is described in U.S. patent application Ser. No. 10 934 887 entitled Application Layer Monitoring of Communications Between One or More Database Clients and One or More Database Servers filed Sep. 3 2004 to Ewing et al. which is hereby fully incorporated by reference herein. Database appliance can further include an integrated service manager to archive stored information to a service monitor archive compare information to predefined thresholds and if the threshold is met send notifications to users and perform other management functions.

Management interface allows console program to access performance data or other information recorded or generated by database appliance . Based on this information console program can provide a visualization of performance data. Additionally management interface can allow an external service manager program to access the performance data or other information if an external service manager is permitted access to database appliance . The external service manager program can archive the performance data to a service manager repository and compare the performance data to user defined thresholds to generate alerts or notifications to inform a user of the status of the distributed database system being monitored. Management interface can be a web server network interface or other programmatic interface.

In one embodiment of the present invention network interface is an Ethernet controller. According to other implementations network interface can be a controller for Fibre. Channel FDDI SCSI ATA SATA Serial SCSI iSCSI Infiniband or other controller. Moreover database appliance can include multiple network interfaces to connect to the same network through multiple ports multiple networks using the same protocol e.g. multiple Ethernet networks or multiple networks using different protocols e.g. to a Fibre Channel network and a SCSI bus .

Processor provides for processing of an operating system e.g. a Linux operating system and database appliance applications stored on program memory . Database appliance applications can include instructions for query result caching monitoring of database messages providing an interface for a console program and a service manager program and other functionality. Database performance data collected or generated by a monitoring application can be stored in performance data storage . Database appliance applications can further include instructions for archiving data generating user notifications based on data collected by database appliance and undertaking other management tasks depending on implementation.

Database appliance applications can further include the aforementioned JAVA panel that is downloaded and executed on the console computer. Database appliance applications can allow the console program to connect to database appliance specify user configuration data request and receive specified database performance data to render a visualization of the database performance data. Database appliance applications can further provide an interface to allow an external service manager program to access performance data or other information on database appliance for archiving generating user notifications and other purposes depending on implementation. In this embodiment database appliance applications can provide a web server or other network server functionality to allow the console program and external service manager program to connect to and interact with database appliance .

The database appliance applications can be implemented as multiple programs a single program or according to any suitable programming architecture and language s known in the art. Moreover the embodiment of is provided by way of example and database appliance can comprise other components and can have a variety of form factors. In one embodiment database appliance is rack mounted server and has a height of approximately one height unit.

Database message interface includes one or more of hardware software embedded logic to provide an interface between database appliance and a network e.g. network of or other communications link. Database message interface can be for example an interprocess communication IPC interface. Database message interface can be a passive interface that enables database appliance to monitor database messages between one or more database clients and one or more database servers. In this embodiment a mirrored port can direct database messages to database appliance . In another embodiment database message interface is a proxy for one or more database servers.

When database message interface receives a database message database message interface notifies message event manager of the received database message. Message event manager then invokes message memory manager to write the database message to memory unit which may include volatile memory nonvolatile memory or both and can be a portion of or include performance data storage memory of . In particular embodiments to communicate a database Message from memory unit to a database client or database server database message interface can use direct memory access DMA to access memory unit . Database appliance need not generate or reassemble the frames to communicate the database message to the database client or server. This can reduce clock cycle requirements and other resource utilization.

Message event manager can include one or more of hardware software or embedded logic to process message events at database appliance . Processing can occur across multiple protocol layers shown in . According to one embodiment message event manager processes events associated with a database message message events from a message event queue e.g. a FIFO queue or other queue . Example message events include but are not limited to receiving a database message data becoming available for processing data becoming ready for communication database appliance establishing a connection to a database client or server database appliance dropping a connection with a database client or server or other message event.

When a message event occurs at database appliance database appliance adds the message event to the event queue for processing. For example if database message interface receives a dataset message from a database client or database server database message interface can add an event to the message event queue. Message event manager can then pull the message event from the queue and prompt message memory manager to write the database message to memory unit . Message event manager according to one embodiment of the present invention uses a single nonblocking event driven control thread that processes events at database appliance . If the event queue includes one or more message events the control thread accesses a message event at front of the event queue and starts to process the message event. If the event queue does not include a message event the control thread waits until the event queue receives a message event to process at which point the control thread accesses and starts to process the message event.

If the control thread finishes processing a first message event the control thread accesses the event queue to pull a second message event from the event queue for processing. If while processing a first message event the control thread reaches a point at which the control thread requires currently unavailable data from one or more components of database appliance to continue processing the message event the control thread instructs one or more of the components to notify message event manager when the required data becomes available. The control thread then accesses the event queue to pull a second message event from the event queue for processing. When the required data becomes available the one or more components instructed to notify message event manager to add an entry to the event queue indicating that the required data is available. When the control thread accesses the event queue and the entry indicating that the required data is available is at a front of the event queue the control thread resumes processing the first message event. If while processing a first message event the control thread reaches a point at which the control thread requires one or more components of database appliance to execute one or more tasks to continue processing the message event the control thread instructs one or more of the components to notify message event manager when the required tasks are complete. The control thread then accesses the event queue to pull a second message event from the event queue for processing. When the required tasks are complete the components are instructed to notify message event manager to add an entry to the event queue indicating that the required tasks are complete. When the control thread accesses the event queue and the entry indicating that the required tasks are complete is at a front of the event queue the control thread resumes processing the first message event.

In particular embodiments to process a message event the control thread communicates a call to a component such as for example database message interface message memory manager caching unit or monitoring unit of database appliance to invoke the component. In particular embodiments to process a new connection established between database appliance and a client or a database server the control thread instantiates a session object such as for example a C object or a JAVA object for the new connection. In particular embodiments to process a database message received at database appliance from a client or a database server the control thread similarly instantiates a session object for the database message. The control thread may concurrently manage multiple session objects. Message event manager uses network interfaces that invoke callback methods on session objects Instead of network interfaces that block or otherwise wait for completion of network or other operations. In particular embodiments network events such as data available ready to send new connection and connection closed propagate through relevant session objects for database protocol processing.

In contrast to particular embodiments traditional database protocol processing requires a control thread directing communication of one or more frames to hold before resuming processing until transmission and receipt of the frames are complete. Because of such requirement processing multiple concurrent database sessions according to a traditional database protocol requires use of multiple concurrent control threads which in turn requires mechanisms such as for example semaphores or locks for protecting shared data structures from corruption resulting from unsynchronized access. Putting into place and releasing such mechanisms to protect and access such data structures as needed increases clock cycle and memory requirements and other resource utilization associated with processing multiple concurrent database sessions. In particular embodiments using a single nonblocking event driven control thread to process message events at database appliance obviates such mechanisms for processing multiple concurrent database sessions which in turn reduces clock cycle and memory requirements and other resource utilization associated with processing multiple concurrent database sessions.

Message memory manager includes hardware software or embedded logic component or a combination of two or more such components that allocate memory in memory unit for storing database messages and manage access to database messages in memory unit . In particular embodiments when database message interface receives a database message from a client or a database server database message interface notifies message event manager that database message interface received the database message. Message event manager then invokes message memory manager to write the database message to memory unit . One or more frames such as for example Ethernet frames may include the database message. In particular embodiments message memory manager writes the frames of the database message to memory unit without assembling the database message. As an example and not by way of limitation when database message interface receives a frame from a database client or a database server message memory manager may write the frame to memory unit without modifying the frame. Message memory manager may write different portions of the frame to different separately addressed memory locations in memory unit which need not be contiguous with each other. In particular embodiments message memory manager also generates a buffer an abstract data structure including one or more pointers to one or more memory locations in memory unit to which message memory manager wrote the frame. To process contents of the frame a first component of database appliance may communicate the buffer instead of the frame itself to one or more second components of appliance . The first component need not reassemble the frame or copy the frame from one or more first original memory locations of the frame in memory unit to one or more second memory locations in memory unit or elsewhere. When the first component communicates the buffer to the second components the second components may then using message memory manager access the frame in memory unit according to the buffer to process contents of the frame. Such zero copy processing may reduce clock cycle requirements and other resource utilization associated with processing the frame.

Caching unit includes hardware software or embedded logic component or a combination of two or more such components that cache query results from database servers and use cached query results to respond to queries from clients as described below. Monitoring unit includes hardware software or embedded logic component or a combination of two or more such components that collect and record statistics on communication between clients and database servers caching activity at database appliance or both as described below.

Client interface unit includes hardware software or embedded logic or a combination of two or more such components to provide an interface for a console program and a service manager program to access performance data stored in memory unit . Client interface unit can provide a web server or other network server to allow other programs to connect to and interact with database appliance .

Service manager includes hardware software e.g. service manager program of or embedded logic component or a combination of two or more such components. Service manager can provide an interface to a console program or other program via a network to receive configurations and job descriptions. Based on the job descriptions service manager can access database performance data and other information in memory unit archive the performance data to a service manager repository internal or external and provide notifications to users. According to one embodiment service manger communicates with other components of database appliance on the circuit board level or through other suitable mechanism by which software modules running on the same computer can communicate rather than over a network connection.

Service manager can provide a programmatic interface with a console program. As discussed above this can be implemented through a JAVA panel interface using the JAVA runtime environment. Through the console program a user can provide service manager configuration data to service manager . The configuration information can include by way of example but not limitation information to connect to other database appliances a service manager repository e.g. a database such as service manager repository of and an email server e.g. email server of . Additionally a user can provide job descriptions to service manager . Each job description can specify a job that includes information to be collected from database appliance an action to be taken with the collected data and a schedule for performing the job. A job description can also include user defined thresholds against which service manager can compare items of data e.g. a performance statistic collected from database appliance in determining whether to take a specific action. In yet another embodiment the job description can specify rules to apply to data retrieved from database appliance and actions to be taken if the rules are satisfied to manage various aspects of the database system being monitored. The action can include for example logging into database servers to change user and database client profiles add delete or update information stored in a database logging into database clients e.g. application servers to change the configuration of the client logging into other computer systems e.g. web servers to notify the computer system of an event or other action.

Service manager stores configuration information and job descriptions in one or more files records or other suitable data structures. For example service manager can store configuration data in a file in nonvolatile memory that is loaded each time service manager program is executed. Thus service manager program is automatically executed at startup or reboot e.g. as part of a .bat file database appliance connects to the appropriate other database appliance s database s and email server s specified in the file without reconfiguration after power cycling reboot or other event that clears volatile memory. Job descriptions can also be saved in non volatile memory so that they are maintained across such events. The set of job descriptions and configuration information maintained by service manager can be updated as the user changes the job descriptions and configuration information.

Service manager according to one embodiment of the present invention queues the jobs provided by the job descriptions. The jobs can be queued in an event driven queue that contains events corresponding to various phases of each job or according to other queuing mechanisms known in the art. When it is time to perform a particular job service manager program retrieves the performance data or other information specified in the job description. When service manager retrieves the information from the database appliance memory service manager then performs the defined task. This can include for example archiving the information to a comma separated value CSV file a database or other data storage structure comparing a collected piece of data to a predefined threshold and if the threshold is met providing a notification to a user or performing a control function based on the application of rules to the data collected from the database appliance.

As one example a user can provide a job description that specifies that service manager should review the collected slowest query data every hour and send a notification to a particular email address if there is a query for which the response time exceeded a particular threshold. Every hour service manager can retrieve the slowest query data from the database appliance memory e.g. from memory module and compare the response time to the predefined threshold. For each query in the hour period for which it took longer than the threshold time to respond service manager can send a notification to a user e.g. as a single notification or a separate notification for each query for which the response time took over the threshold . Notification can take the form for example of an email an SNMP trap a web based communication or other notification.

It should be noted that the embodiment of service manager described in conjunction is provided by way of example and service manager can be collocated with the console system located at an external database appliance or other service manager system. Additionally service manager can provide its own user interface such that users connected to service manager program without the use of a separate console program or web browser. Service manager can be an always on system for providing archiving and notification. Consequently performance data can be continually collected and archived and users e.g. systems administrators provided with notifications even if console system is not being monitored.

A decoder includes a hardware software or embedded logic component or a combination of two or more such components that decode and extract SQL statements from database messages. In particular embodiments a decoder resides on top of a TCP IP layer of a protocol stack as described below. Decoders each decode and extract SQL statements from particular database messages. As an example and not by way of limitation caching unit may include a first decoder a second decoder and a third decoder . First decoder may decode and extract SQL statements from DRDA database messages second decoder may decode and extract SQL statements from TDS database messages and third decoder may decode and extract SQL statements from OracleNet database messages. Although particular decoders decoding and extracting SQL statements from particular database messages are described the present invention contemplates any suitable decoders decoding and extracting SQL statements from any suitable database messages.

Decoders are event driven and each include an interface or function point enabling message event manager to invoke decoder . As an example and not by way of limitation in response to database message interface receiving a database message from a client or a database server message event manager may communicate a call to decoder invoking decoder to decode and extract an SQL statement from the database message. The call may include a buffer pointing to the database message in memory unit . The call need not include the database message itself. Decoder may access the database message according to the buffer and then decode the database message extract an SQL statement from the database message and communicate the SQL statement to normalization module for normalization. In particular embodiments decoders include interfaces similar to each other which may obviate message event manager having multiple interfaces for invoking decoders . In such embodiments message event manager may use a single interface to invoke any one of decoders .

In particular embodiments when database message interface receives a database message message event manager selects a decoder to decode the database message according to a port on which database message interface received the database message. As an example and not by way of limitation database appliance may include a first port configured manually or otherwise to receive database messages intended for a DRDA database server a second port configured to receive database messages intended for a TDS database server and a third port configured to receive database messages intended for an OracleNet database server . When database message interface receives a database message on the first port message event manager may invoke a DRDA decoder to decode and extract an SQL statement from the database message. When database message interface receives a database message on the second port message event manager may invoke a TDS decoder to decode and extract an SQL statement from the database message. When database message interface receives a database message on the third port message event manager may invoke an OracleNet decoder to decode and extract an SQL statement from the database message.

In particular embodiments when database message interface receives a database message message event manager selects a decoder to decode the database message according to contents of the database message. As an example and not by way of limitation database message interface may receive a database message from a client or a database server . Message event manager may read contents of the database message to determine whether the database message is a DRDA database message a TDS database message or an OracleNet database message. If message event manager determines that the database message is a DRDA database message message event manager may invoke a DRDA decoder to decode and extract an SQL statement from the database message. If message event manager determines that the database message is a TDS database message message event manager may invoke a TDS decoder to decode and extract an SQL statement from the database message. If message event manager determines that the database message is an OracleNet database message message event manager may invoke an OracleNet decoder to decode and extract an SQL statement from the database message.

Normalization module includes a hardware software or embedded logic component or a combination of two or more such components that normalize SQL statements. Normalization of two SQL statements facilitates determination of equivalency between the two SQL statements. As an example and not by way of limitation a decoder may extract an SQL statement from a query and communicate the SQL statement to normalization module . Normalization module may then normalize the SQL statement. Lookup module may compare the normalized SQL statement with normalized query text identifying records in cache and if the normalized SQL statement is equivalent to normalized query text identifying a cache entry determine that the cache entry includes one or more query results responsive to the query.

In particular embodiments to normalize an SQL statement normalization module capitalizes all letters in the SQL statement. In particular embodiments to normalize an SQL statement normalization module reorders terms in the SQL according to a predetermined order. In particular embodiments to normalize an SQL statement normalization module modifies one or more clauses in the SQL statement according to a predetermined clause equivalency. Although particular normalization of SQL statements is described the present invention contemplates any suitable normalization of SQL statements.

Parser includes a hardware software or embedded logic component or a combination of two or more such components that parse SQL statements. As an example and not by way of limitation normalization module may normalize an SQL statement and communicate the SQL statement to parser . Parser may parse the SQL statement. In particular embodiments to parse an SQL statement parser includes a left to right and rightmost derivation LR parser. In such embodiments to parse an SQL statement parser may use predetermined state tables derived from a specified SQL grammar. Multiple state tables may be available to parser and each of the state tables may support a particular dialect of SQL. Parser may select a state table for parsing an SQL statement according to a database implementation such as DRDA TDS or OracleNet of an intended database instance. Although particular parsing of particular SQL statements is described the present invention contemplates any suitable parsing of any suitable SQL statements.

Analysis module includes a hardware software or embedded logic component or a combination of two or more such components that analyze SQL statements. Caching unit may process an SQL statement according to one or more results of analysis of the SQL statement at analysis module . In particular embodiments analysis module analyzes an SQL statement to determine whether the SQL statement includes a query a query result or a write message. In particular embodiments analysis module analyzes an SQL statement to identify a database server a database instance a table in the database instance a client a user or a combination of two or more of the preceding. As an example and not by way of limitation parser may communicate a parsed normalized SQL statement including a query to analysis module . Analysis module may analyze the SQL statement and from the analysis determine that the SQL statement includes a query. From the analysis analysis module may also identify an intended database server an intended database instance and an intended table in the database instance. From the analysis analysis module may also identify a user who generated and a client that communicated the query. Because the SQL statement includes a query analysis module may communicate the SQL statement and possibly one or more results of the analysis of the SQL statement to lookup module for lookup. If an administrator of database appliance has disabled or not enabled database appliance responding to queries according to cached query results with respect to intended database server the intended database instance the intended table in the database instance the user who generated the query or client that communicated the query analysis module may withhold the SQL statement from Lookup module so that database appliance does not communicate a response to client according to one or more cached query results.

As another example parser may communicate a parsed normalized SQL statement including a query result to analysis module . Analysis module may analyze the SQL statement and from the analysis determine that the SQL statement includes a query result. From the analysis analysis module may also identify an intended user and an intended client . From the analysis analysis module may also identify a database server that communicated the query result and a database instance and a table in the database instance that included the query result. In particular embodiments because the SQL statement includes a query result analysis module communicates to reassembly module a buffer pointing to a database message in memory unit including the query result. Reassembly module may then cause database message interface to communicate the database message including the query result from memory unit to a client . In particular embodiments because the SQL statement includes a query result analysis module communicates the SQL statement and possibly one or more results of the analysis of the SQL statement to cache entry creation module for creation of a cache entry. If an administrator of database appliance has disabled or not enabled database appliance caching query results with respect to database server that communicated the query result the database instance that included the query result the table in the database instance that included the query result intended client or the intended user analysis module may withhold the SQL statement from cache entry creation module so that database appliance does not cache the query result.

As yet another example parser may communicate a parsed normalized SQL statement including a write message to analysis module . Analysis module may analyze the SQL statement and from the analysis determine that the SQL statement includes a write message. From the analysis analysis module may also identify an intended database server an intended database and an intended table in the database instance. From the analysis analysis module may also identify a user who generated and a client that communicated the write message. Because the SQL statement includes a write message analysis module may communicate the SQL statement and possibly one or more results of the analysis of the SQL statement to invalidation module for invalidation of one or more cache entries. Lookup module includes a hardware software or embedded logic component or a combination of two or more such components that lookup cached query results. As an example and not by way of limitation analysis module may communicate a normalized parsed SQL statement including a query to lookup module . Lookup module may then use the normalized parsed SQL statement to determine whether a record in cache includes one or more query results responsive to the query. If a record includes one or more query results responsive to the query lookup module may communicate to reassembly module a buffer pointing to one or more database messages in memory unit that according to the cache entry include one or more query results responsive to the query. Reassembly module may then cause database message interface to communicate the database message from memory unit to a client . If a record does not include a valid response to the query lookup module may communicate the query to cache entry creation module for creation of a cache entry. Lookup module may also communicate to reassembly module a buffer pointing to a database message including the query. Reassembly module may then cause database message interface to communicate the database message memory unit to a database server . To look up cached query results lookup module may access a mapping which may include a red black search tree or other tree data structure facilitating lookup of discriminators identifying records in cache and compare the discriminators with normalized parsed SQL statements including queries.

In particular embodiments if lookup module receives a normalized parsed SQL statement including a query and cache does not include a record fully responsive to the query but includes a record partially responsive to the query lookup module may communicate to reassembly module a buffer pointing to one or more database messages in memory unit that according to the cache entry include one or more query results partially responsive to the query. As an example and not by way of limitation the query may request all data from all fields in rows one through 1000 in a table and the record in cache may include query results including only data from fields in rows one through 100 in the table. In response to the buffer from lookup module reassembly module may cause database message interface to communicate the database messages including the partially responsive query results from memory unit to a client . Lookup module may also communicate to reassembly module a buffer pointing to a database message including the query. Reassembly module may then cause database message interface to communicate the database message including the query from memory unit to a database server .

Caching unit may subsequently receive one or more database messages communicated from database server including one or more query results responsive to the query. As an example and not by way of limitation caching unit may subsequently receive database messages communicated from database server including query results including all data from all fields in rows one through 1000 in the table instead of just data from fields in rows one through 100 in the table. In response to caching unit receiving database messages communicated from database server including query results responsive to the query caching unit may cause database message interface to communicate from memory unit database messages communicated from database server that include query results responsive to the query and not previously communicated from cache to client . Caching unit may also cause memory unit to discard any database messages communicated from database server that include query results responsive to the query and previously communicated from cache to client . Caching unit may also add one or more of the query results in the database messages communicated from database server to the record partially responsive to the query.

Reassembly module includes a hardware software or embedded logic component or a combination of two or more such components that direct communication of cached query results from database appliance to clients and direct communication of queries received at database appliance to database servers . As an example and not by way of limitation lookup module may communicate to reassembly module a buffer pointing to one or more database messages in memory unit including one or more query results responsive to a query received at database appliance from a client . Reassembly module may direct database message interface to access the database messages according to the buffer and database message interface may then access the database messages using DMA and communicate the database messages to client . Neither reassembly module nor database message interface need compound or format the database messages to communicate the database messages to client . As another example lookup module may communicate to reassembly module a buffer pointing to a database message in memory unit including a query to which no cache entries are responsive. Reassembly module may direct database message interface to access the database message according to the buffer and database message interface may then access the database message using DMA and communicate the database message to a database server . Neither reassembly module nor database message interface need compound or format the database message to communicate the database messages to database server .

Cache entry creation module includes a hardware software or embedded logic component or a combination of two or more such components that create and maintain records of query results in cache . As described above a record in cache includes a discriminator that uniquely identifies the record and one or more buffers pointing to one or more memory locations in memory unit that include one or more frames of one or more database messages including one or more query results responsive to a query. In particular embodiments to create a record in cache cache entry module allocates memory in cache for the record generates a discriminator for the record writes the discriminator and one or more buffers to the record and adds a timestamp to the record indicating when cache entry creation module created the record. As an example and not by way of limitation lookup module may communicate to cache entry creation module a parsed normalized SQL statement including a query. Cache entry creation module may then allocate memory for a record of query results responsive to the query. Cache entry creation module may then generate a discriminator uniquely identifying the record.

In particular embodiments the discriminator includes normalized text from the query identifies a user who generated the query and indicates one or more environmental variable settings influencing one or more query results in the record. Cache creation module may hash the discriminator to facilitate host lookup of the cache entry. Cache entry creation module may then add the discriminator to a mapping such as for example a red black search tree or other search tree facilitating fast lookup of the cache entry. Cache entry creation module may also add a timestamp to the record indicating when cache entry creation module created the record. Later analysis module may communicate to cache entry creation module a buffer pointing to a database message in memory unit including a query result responsive to the query and one or more results such as an intended user an intended client a database server that communicated the query result and a database instance and a table in the database instance from which the query result originated of an analysis of a parsed normalized SQL statement including the query result. Cache entry creation module may then write the buffer and the results of the analysis of the SQL statement to the record.

In particular embodiments to maintain the record in cache cache entry creation module adds to the record additional buffers pointing to additional database messages responsive to the query and records users who access the record when each of the users accesses the record and a number of times each user accesses the record.

Invalidation module includes a hardware software or embedded logic component or a combination of two or more such components that invalidate entries in cache delete entries in cache to free up memory in cache or both according to particular needs. In particular embodiments invalidation module invalidates cache entries based on write messages. As an example and not by way of limitation invalidation module may receive from analysis module a normalized parsed SQL statement including a write message intended for a table in a database instance. Invalidation module may also receive from analysis module identification of the table in the database instance. Invalidation module may then access cache and identifies records in cache including query results that originated from the table in the database instance. Invalidation module may invalidate such records. In particular embodiments to invalidate a cache entry invalidation module deletes the cache entry. In particular embodiments to invalidate a cache entry invalidation module marks the cache entry to indicate that the cache entry is invalid but does not delete the cache entry. In particular embodiments invalidation module invalidates cache entries based on aging.

As an example and not by way of limitation if a predetermined amount of time has lapsed since creation of a cache entry invalidation module may invalidate the cache entry based on the age of the cache entry. In particular embodiments invalidation module periodically or in response to input from an administrator of database appliance scans cache to identify entries in cache for such invalidation. In particular embodiments invalidation module invalidates cache entries based on scheduling. As another example and not by way of limitation invalidation module may invalidate all or some entries in cache according to a predetermined schedule such as for example every day at a particular time or once a week on a particular day at a particular time . In particular embodiments invalidation module invalidates cache entries based on external triggers. As an example and not by way of limitation invalidation module may invalidate all or some entries in cache in response to one or more external triggers such as for example input from an administrator or occurrence of a predetermined event . Although particular invalidation of particular cache entries is described the present invention contemplates any suitable invalidation of any suitable cache entries.

In particular embodiments invalidation module deletes cache entries in response to utilization of memory in cache reaching a predetermined threshold in response to utilization of memory in cache preventing creation of new entries in cache or both. In particular embodiments if utilization of memory in cache reaches a predetermined limit or prevents creation of a new entry in cache invalidation module selects one or more entries in cache for deletion based on recent usage of entries in cache . As an example and not by way of limitation invalidation module may select one or more least recently used entries in cache for deletion. In particular embodiments if utilization of memory in cache reaches a predetermined limit or prevents creation of a new entry in cache invalidation module selects one or more entries in cache for deletion according to one or more cost based algorithms taking into account observed network client response time and other network derived factors. Although deletion of particular entries in cache is described the present invention contemplates deletion of any suitable entries in cache .

Cache statistics module includes a hardware software or embedded logic component or a combination of two or more such components that collect statistics on caching activity at caching unit . In particular embodiments cache statistics module collects statistics on cache hits at database appliance . A cache hit is a cache entry being responsive to a query received at database appliance from a client which may or may not result in communication of a query result from cache to client as described above. As an example and not by way of limitation cache statistics module may track and record 1 a number of queries from a client intended for a database server and 2 a number of cache hits on the queries. Cache statistics module may compare the two numbers with each other and from the comparison determine a percentage of cache hits on queries from client intended for database server . Cache statistics module may determine a percentage of cache hits on queries from each of multiple clients intended for each of multiple database servers . Cache statistics module may combine two or more such percentages to provide more comprehensive statistics on cache hits at database appliance . From historical statistics on cache hits at database appliance cache statistics module may generate a historical cache hit rate for database appliance .

In particular embodiments cache statistics module collects statistics on cache entries. As an example and not by way of limitation cache statistics module may track and record a number of records in cache . As another example cache statistics module may track and record a result set size in each of one or more records in cache . As yet another example cache statistics module may track and record one or more cost factors based on response time. As yet another example cache statistics module may using timestamps track and record a date and time of creation of each of one or more records in cache and dates and times of access of each of the entries. In particular embodiments cache statistics module collects statistics on invalidation of entries in cache . As an example and not by way of limitation cache statistics module may track and record invalidated entries and using timestamps times and dates of invalidation of invalidated entries. Although particular statistics on caching activity at caching unit are described the present invention contemplates any suitable statistics on caching activity at caching unit . In particular embodiments cache statistics module communicates collected cache statistics to monitoring unit for storage.

Observation module includes hardware software or embedded logic component or a combination of two or more such components that record observations on contents of database messages between clients and database servers . As an example and not by way of limitation observation module may receive from parser parsed normalized SQL statements extracted from decoded database messages access contents of the SQL statements and record observations on the contents of the SQL statements. As another example observation module may receive the decoded database messages themselves access contents of the database messages outside the SQL statements and record observations on the contents of the database messages. Observations can further include statistics and other database performance data collected based on the database messages. Monitoring unit may provide user access to observations through a statistical historical tabular graphical or other interface or a combination of two or more such interfaces.

In particular embodiments monitoring unit communicates observations to one or more computer systems such as a console system or service manager system that report observations to users according to particular needs. In particular embodiments monitoring unit communicates observations to one or more computer systems that take action in response to observations according to particular needs. As an example and not by way of limitation monitoring unit may communicate observations to a computer system maintaining a web cache. The computer system may monitor observations from monitoring unit and in response to particular observations from monitoring unit delete particular records in the web cache. As an example and not by way of limitation an observation from monitoring unit may indicate to the computer system that a client recently communicated a database message to a database server modifying contents of one or more web pages. In response to observation the computer system maintaining the web cache may delete from the web cache outdated versions of the web pages.

In particular embodiments observations on the contents of the SQL statements the contents of the database messages outside the SQL statements or both include one or more of the following 1 information regarding subject database instances of the SQL statements 2 information regarding vendors of database implementations of the subject database instances 3 information regarding software and versions of the software in the database implementations 4 information regarding network protocols and versions of the network protocols used to communicate the database messages 5 information regarding protocol drivers at database servers versions of the protocol drivers and application programming interfaces APIs at database servers between application layers and network layers used to communicate the database messages 6 information regarding devices including for example subprocesses and if applicable node clusters hosting the subject database instances of the SQL statements 7 information regarding hostnames IP addresses MAC addresses and network ports of database servers 8 information regarding operating systems OSs versions of the OSs and attributes of the OSs such as for example patch levels of devices hosting the subject database instances of the SQL statements 9 information regarding protocol drivers at clients versions of the protocol drivers and APIs at clients between application layers and network layers used to communicate the database messages 10 information regarding devices including for example subprocesses and if applicable node clusters hosting clients 11 information regarding application frameworks at clients information regarding hostnames IP addresses MAC addresses and network ports of clients and 13 information regarding OSs versions of the OSs and attributes of the OSs such as for example patch levels of clients .

In particular embodiments observations on contents of SQL statements contents of database messages outside the SQL statements or both include information regarding discovered database system entities such as for example database servers database processes cluster nodes database instances namespaces tables columns database users database sessions pending operations hostnames IP addresses and network ports and information regarding times and dates of discovery of the database system entities information regarding active sessions between an observed database instance and processes at clients such as for example information regarding names and addresses of client hosts information regarding the observed database instance information regarding a name and an address of a server host information regarding a database user information regarding start times and elapsed durations of the sessions information regarding a number of queries communicated from each of clients to each of one or more database instances which may include information regarding a rate at which such queries are observed over time or a combination of such information. Although particular observations on particular contents of SQL statements and particular contents of database messages outside the SQL statements are described the present invention contemplates any suitable observations on any suitable contents of SQL or other statements and any suitable contents of database messages outside the SQL or other statements.

As part of or based on observations monitoring unit can collect performance data and other information on the database system being monitored e.g. database system of . The performance data can include number of queries communicated from each of clients to each of one or more database instances which may include information regarding a rate at which such queries are observed over time number of queries for a particular database average response time to queries to a particular database size of a database number of queries to a particular database server average response time by that server number of a particular query type e.g. number of write queries number of rows returned in response to a query average response time for a query number of queries issued by a database client average response time to that client number of queries for a database table average response time for queries to a data base queries number of queries answered by a database server number of outstanding queries at a database server average wait time at a database server and other statistics. Additionally the performance data can include information about the performance of caching provided by query caching unit .

At step analysis module analyzes the parsed normalized SQL statement. If the parsed normalized SQL statement includes a query the method proceeds to step where analysis module communicates the parsed normalized SQL statement and one or more results of analysis of the parsed normalized SQL statement to lookup module in caching unit . At step lookup module looks up a record in cache including one or more query results responsive to the query. If a record in cache includes one or more query results responsive to the query the method proceeds to step where lookup module accesses the cache entry. At step lookup module communicates a buffer in the cache entry to reassembly module . At step reassembly module causes database message interface according to the buffer to communicate one or more frames including one or more database messages responsive to the query from memory unit to an intended client at which point the method ends.

Returning to step if a record in cache does not include one or more query results responsive to the query the method proceeds to step where lookup module communicates the parsed normalized SQL statement to cache entry creation module . At step cache entry creation module allocates memory in cache for a record including query results responsive to the query and generates a discriminator for the record. At step lookup module communicates to reassembly module a buffer pointing to the database message in memory unit including the query. At step reassembly module causes database message interface according to the buffer to communicate the database message including the query from memory unit to an intended database server at which point the method ends. Returning to step if the parsed normalized SQL statement does not include a query the method proceeds to step . At step if the parsed normalized SQL statement includes a query result the method proceeds to step . At step analysis module communicates a buffer pointing to the database message in memory unit including the query result and one or more results of analysis of the parsed normalized SQL statement to cache entry creation module .

At step cache entry creation module writes the buffer and the analysis results to a record in cache . At step cache entry creation module communicates the buffer to reassembly module . At step reassembly module causes database message interface according to the buffer to communicate the database message including the query result from memory unit to an intended client at which point the method ends.

Returning to step if the parsed normalized SQL statement does not include a query result the method proceeds to step . At step if the parsed normalized SQL statement includes a write message the method proceeds to step . At step analysis module communicates one or more results of analysis of the parsed normalized SQL statement such as one or more results identifying a subject database instance and a subject table of the SQL statement to invalidation module . At step invalidation module invalidates one or more records in cache according to the results of analysis of the parsed normalized SQL statement. At step invalidation module communicates to reassembly module a buffer pointing to the database message in memory unit including the write message. At step reassembly module causes database message interface according to the buffer to communicate the write message from memory unit to an intended client at which point the method ends.

Returning to step if the parsed normalized SQL statement does not include a write message the method proceeds to step . At step analysis module communicates to reassembly module a buffer pointing to the database message in memory unit . At step reassembly module causes database message interface to communicate the database message from memory unit to and intended client or an intended database server . Although particular steps in the method illustrated in are described and illustrated as occurring in a particular order the present invention contemplates any suitable steps in the method illustrated in occurring in any suitable order.

Returning briefly to service manager can communicate with and retrieve database performance statistics or other information from the memory of database appliance . According to one embodiment of the present invention service manager provides a system to archive database performance data e.g. performance statistics or other information from a database appliance provide notifications to users and take other control actions based on the data collected by database appliance .

In the example of discussed above the service manager takes actions based on the information collected by the corresponding database appliance. However according to other embodiments of the present invention there may be multiple database appliances in a system. Two or more of these database appliances can be federated such that one database appliance monitors the other database appliance s in the federation. A federation of database appliances can further provide one or more high availability clusters that provide for deployment of an active standby pair of database appliances to provide a redundant fault tolerant database connection. Each database appliance periodically determines the availability of the other and if required the standby database appliance becomes available. is a diagrammatic representation one embodiment of a system with a federation that includes database appliance and standby database appliance running service manager program .

In federation service manager program can be configured to connect to and retrieve data from database appliance and take similar actions as if the data were retrieved from database appliance . Thus service manager program can archive data from database appliances and to service manager repository generate notifications based on data retrieved from database appliances and and perform management tasks based on data retrieved from database appliances and . Additionally service manager program can provide a single point of contact for other database appliances in the federation. Thus a user can connect to service manager program and provide configuration information for service manager program and service manager program . Service manager program can then forward the configuration information to service manager program . It should be noted that while only two database appliances are shown in federation any number of database appliances can be federated.

According to one embodiment federation can be configured as a high availability cluster in which database appliance acts as the active database appliance and database appliance acts as the standby database appliance. High availability cluster can assigned a virtual IP address that is used for relaying database traffic and by the console program to connect to high availability cluster. The active database appliance handles all traffic to the virtual IP address. The standby database appliance monitors the active database appliance and if the active database appliance becomes inactive takes over handling traffic to the virtual IP address.

Either or both of the service manager program at the active appliance or the standby appliance can perform service management tasks. For example service manager program can be configured to archive performance data generate alerts and perform management tasks based on data collected by database appliance while service manger program can be configured to generate alerts if the status of high availability cluster changes. For example if service management program is responsible for service management in the high availability cluster service manager program can then monitor the status of high availability cluster and send notifications when certain events or status changes in high availability cluster occur. For example the user can configure service manager program to send email notifications when service manager program can not connect to the active unit at the virtual IP address when a successful reconnection to the active unit is achieved or a change in status at high availability cluster occurs.

It should be noted that while only two database appliances are shown in federation there may be multiple database appliances that are federated such that at least one of the service manger programs monitors the other database appliances in the federation. Moreover database appliances in particular federation may or may not be configured as one or more high availability clusters.

In the previous embodiments of the present invention a database appliance acted as a service manager. However according to other embodiments the service manager may run at an external service manager system. illustrates one embodiment of an example system in which one embodiment of a service manager can be implemented in which the service manager is separate from the database appliance s being monitored. System in the embodiment of includes a service manager connected to database appliance via network . Service manager can be configured for example by console system . A user can configure service manager to access service manager repository so that service manager can write data to service manager repository . illustrates one embodiment of a screen provided by console system for configuring service manager . In this example service manager repository is a database but in other examples service manager repository can be a file or other data structure stored on a hard drive optical disk memory RAM ROM flash memory or other memory or another computer readable medium. The user can also configure service manager to access email server to send email alerts. also provides an example of configuration information to allow service manager system to access email server .

As an example service manager can be configured to retrieve data from database appliance every hour on the slowest queries at a particular database server and write the data to service manager repository . Additionally service manager can be configured to poll database appliance every thirty minutes to determine if the response time for any queries is longer than a predefined threshold. If the response time for any of the queries is over the predefined threshold service can notify a user by email using email server .

Service manager can also be configured to implement various database system control functions based on the application of rules to data retrieved from database appliance . For example service manager can be configured with a rule that specifies that if a particular client attempts to write data to a database when the client is only supposed to read data from the database service manger can access the appropriate database server and change the client s privileges. Service manager can implement any suitable control functions to change the configuration of database clients database servers database appliance or other systems.

Thus service manager provides a mechanism to archive data in a database file or email and alert users when user configurable performance thresholds have been met. Because the performance data is collected by database appliance embodiments of the present invention can archive performance data and alert users when the performance data meets a threshold without requiring installation of agents or other software on the database clients or database servers .

Service manager program can provide a programmatic interface with a console program. As discussed above this can be implemented through a JAVA panel interface using the JAVA runtime environment. Through the console program a user can provide service manager configuration data to service manager . The configuration information can include by way of example but not limitation information to connect to a database appliance e.g. database appliance of a service manager repository e.g. a database such as service manager repository of and an email server e.g. email server of . Additionally a user can provide job descriptions to service manager . Each job description can specify a job that includes information to be collected from database appliance an action to be taken with the collected data and a schedule for performing the job. A job description can also include user defined thresholds against which service manager can compare items of data e.g. a performance statistic collected from database appliance in determining whether to take a specific action. In yet another embodiment the job description can specify rules to apply to data retrieved from database appliance and actions to be taken if the rules are satisfied to manage various aspects of the database system being monitored. The action can include for example logging into database servers to change user and database client profiles add delete or update information stored in a database logging into database clients e.g. application servers to change the configuration of the client logging into other computer systems e.g. web servers to notify the computer system of an event or other action.

Service manager stores configuration information and job descriptions in one or more files records or other suitable data structures. For example service manager can store configuration data in a file in nonvolatile memory that is loaded each time service manager program is executed. Thus if service manager program is automatically executed at startup or reboot e.g. as part of a .bat file service manager can connect to the appropriate database appliance s database s and email server s specified in the file without reconfiguration after power cycling reboot or other event that clears volatile memory. Job descriptions can also be saved in non volatile memory so that they are maintained across such events. The set of job descriptions and configuration information maintained by service manager can be updated as the user changes the job descriptions and configuration information.

Service manager according to one embodiment of the present invention queues the jobs provided by the job descriptions. The jobs can be queued in an event driven queue that contains events corresponding to various phases of each job or according to other queuing mechanisms known in the art. When it is time to perform a particular job service manager program connects to the appropriate database appliance interface layer e.g. using a web server interface or other network interface and requests the performance data or other information specified in the job description. When service manager receives the information from the database appliance service manager program performs the defined task. This can include for example archiving the information to a comma separated value CSV file a database or other data storage structure comparing a collected piece of data to a predefined threshold and if the threshold is met providing a notification to a user or performing a control function based on the application of rules to the data collected from the database appliance.

As one example a user can provide a job description that specifies that service manager should collected slowest query data every hour and send a notification to a particular email address if there is a query for which the response time exceeded a particular threshold. Every hour service manager can collect the slowest query data from the database appliance and compare the response time to the predefined threshold. For each query in the hour period for which it took longer than the threshold time to respond service manager can send a notification to a user e.g. as a single notification or a separate notification for each query for which the response time took over the threshold . Notification can take the form for example of an email an SNMP trap a web based communication or other notification.

It should be noted that the embodiment of service manager described in conjunction is provided by way of example and service manager can be collocated with the console system or database appliance. Additionally service manager can provide its own user interface such that users connected to service manager program without the use of a separate console program or web browser. Service manager can be an always on system for providing archiving and notification. Consequently performance data can be continually collected and archived and users e.g. systems administrators provided with notifications even if console system is not being monitored.

Host area of screen allows a user to specify connection information for the service manager. The service manager in this example has the local host name appsrv1 and listens on port for communications from the console program. Service manager repository area allows the user to specify a repository for archiving information collected from the database appliance. In the example of the service manager repository is an external database. In other embodiments of the present invention the service manager repository can be a file or database on a local or networked drive or other data storage mechanism. Notification area allows a user to specify information for an email server so that the service manager can access the email server to send notifications via email to users when predetermined conditions are met. It should be noted that in other embodiments of the present invention the service manager can provide notifications in other suitable manners. Other configuration information can include for example the port over which service manager connects to the database appliance information to connect to database servers e.g. database servers and database clients e.g. database clients or other suitable configuration information.

In the example of a Slow Queries report for the database HR830 DB2 is illustrated. This report represents performance data collected and stored by database appliance based on database messages accessed by database appliance . Other example reports include Active Sessions Cache Statistics Client Information Client Socket Status Last Queries Network Traffic Last Queries Pending Queries Query Rates Query Response Time Query Types Server Information Server Socket Status Slow Queries System Overview System Performance System Status Table Accesses Top Queries or other suitable reports. Each report type can optionally include reports for the different elements shown in navigation window . For example the Top Queries reports can include Top Queries Server Top Queries Database Top Queries User and Top Queries Client reports. Example performance data collected for these reports is described below but it should be noted that these reports are provided by way of example and other suitable reports for reporting various database performance data can be implemented.

The Active Sessions report provides detailed information about the active sessions of the database system captured by database appliance . This report includes the client database user and server names associated with the active session. This report also lists the duration of the session and total number of table accesses and indicates the cache status per session. The cache status indicates whether the system elements and settings are conducive to query result caching for the session. If caching is enabled globally and enabled for the session server database client and user then the status shown will be enabled. If the global setting or any one of the session elements are not cache enabled then the status will be shown as Disabled. Further caching can also be enabled at the table level to enable query result caching but the Active Session Cache Status does not according to one embodiment reflect cache enable settings at the table level due to the dynamic nature of table cache settings.

The Cache Statistics report shows the percentage of cached accesses and the number of cached entries and cached flushes invalidations over the period. The period can be changed by the user. Recall that cache statistics can be provided by caching unit to monitoring unit of database appliance for storage with other database performance data.

The Client Information report provides detailed information about the client computer including name IP address operating system and time when the client was discovered and last accessed.

The Column Accesses report shows the number of accesses made to a table column over a period configured on the Time Series Configuration dialog. Column accesses are summed for the icons in navigator window . For example selecting a database entry in navigator window sums all column accesses for tables within that database.

The Last Queries report displays the last fifty queries against the server database user or client as selected in navigator window . This report also provides the element name e.g. server name client name etc. the last query text and the start time overall duration and client wait time of the last queries received. The Cache Hit column indicates where the statement response came from Cache Hit equals true if it came from the appliance query result cache or Cache Hit equals false if it came from the database server.

The Network Traffic report displays the amount of traffic to from the client and to from the server for a specified time period.

The Pending Queries report displays the queries pending on the server database user or client as selected in navigator window . This report also provides the query text and the pending start time and duration of the pending query. The Cache Hit column indicates where the statement response is coming from Cache Hit equals true if it is coming from the appliance query result cache or Cache Hit equals false if it is coming from the database server.

The Query Response Time report displays the query response time for the server selected in navigation window . Response time for query type is indicated by the color legend for selects inserts updates and deletes. Response time for other types of statements is represented by Other Response Time.

The Query Traffic report displays select count active sessions and select responses on the DBMS for the period set on the Time Series Configuration dialog. This report shows the number of queries received by the server and the number of sessions active against server during the configured response time.

The Query Types Over Time report shows the percentage of query types made against a server database table user or client over a period of time.

The Server Information report provides detailed information about the server computer including name IP address operating system and the time when the server was discovered and last accessed.

The Slow Queries reports indicate the slowest executing statements grouped by the server database user or client as displayed on the report and selected in the navigation tree. According to one embodiment there can be variants of the Slow Queries report. The report titled simply Slow Queries is based on total statement duration with no regard for client side versus server side delays. The report titled Slow Queries Client is based on the time spent waiting on the client to fetch more data without regard for server response time. The new report titled Slow Queries Server is based on the time spent waiting on the database server with no regard for client side wait time. All of these reports according to one embodiment also provide the number of times each query was received the minimum maximum and average response time times for each query and the last time the query was received for the time period that the appliance was powered on or since the Slow Queries report was reset. The Cache column indicates the percentage of time the statement response was retrieved from the appliance query result cache.

The System Overview report is a default dashboard or a collection of reports. The report can be configured to define a unique snapshot of the database system being monitored system.

The System Status report describes the database appliance system. Including the name of the database appliance a user Name that identifies a user to the database appliance an uptime amount and date of time the database appliance has been active whether the cache mode is enabled or disabled the number of cache entries processed by the database appliance the number of active sessions and the amount of RAM provided by the database appliance.

The Table Accesses Statistics report displays the number of table accesses and joins for the table as displayed on the report and selected on navigation window for a specified time period.

The Top Queries report indicates the queries most frequently received by the server database user or client as displayed on the report and selected in the navigation tree. This report also provides the number of times each query was received the minimum and maximum amount response time the average amount of response time for each query and the last time the query was received for the time period that the appliance was powered on or since the Top Queries report reset was issued by the Clear Top Queries selection in the report Configuration dialog. The Cache column indicates the percentage of time the statement response was retrieved from the appliance query result cache.

According to one embodiment the database appliance can collect statistics and other database performance data for particular windows of time. The database appliance in one embodiment captures time sensitive statistics in three modes minutes hours and days. A minute based report shows the activity over the last 60 minutes from the current time. An hour based report shows the database activity over the last 24 hours. Day based reports configurations show database activity over the last 60 days from the current time. Minute reports are updated once per minute at the end of each minute period enabling the user to look back at minute averaged data for the last 60 minutes. The user can configure the time window time history duration in these reports for minute hour or day reporting. Hour reports are updated at the end of each hour enabling the user to look back for 24 hours. Day reporting averages activity over day increments and is only updated once per day. According to one embodiment minute based reports displayed in monitoring window do not report traffic instantaneously. If a query is posted to the database the appliance will include that query at the end of the next minute.

The user can input a job description by right clicking in monitoring window on a report and selecting capture data . As shown in the example of the user can then select an archiving schedule e.g. immediately real time every minute hourly daily or according to a custom schedule . The job description of capturing a specific set of data the slow queries for database HR830 DB2 in this example according to a particular schedule is communicated from the console program to the service manager program. In response to receiving the job description the service manager program can queue the job according to the schedule or carry out the job immediately. At the scheduled time s the service manager will poll the database appliance for the slow queries data for database HR830 DB2 or other data and write the data to the service manager repository defined in the configuration information.

According to particular embodiments the service manager archives collected data i.e. archives the reports according to the job description to tables in a database. Since reports are context sensitive in that they can depend on the network element selected in navigation window the database tables can also be context sensitive. For example the Slow Queries Report can be requested for servers databases users or clients. The table used for archiving data for the Slow Queries Report can depend on whether the Slow Queries Report in monitor window displays server database user or client data. If the Slow Queries report is archived for a database a DATABASES DATABASE SQL STATUS table can be used. Each time data is collected from the database appliance service manager can insert rows to add the new data to the DATABASES DATABASE SQL STATUS table time stamped at the time the data is collected from the database appliance.

As an example a user can right click on the Slow Query report for the HR830 DB2 database and select capture data every minute. On receiving this job description service manager can schedule to retrieve Slow Query data for the HR830 DB2 database from database appliance each minute. From this point forward until the job is cleared the service manager can poll database appliance and update a DATABASES DATABASE SQL STATUS with Slow Query data from the database appliance time stamped for the time of collection.

A user can also provide job descriptions that define conditions to trigger service manager to send an alert or notification. Using the example of the Database Slow Queries report of the user can right click on the monitoring window and select custom. The user can then define a threshold for the notification the attributes of the notification and the type of notification. As an example illustrates a user defining that a notification should occur when the server average slow response time exceeds 45 seconds shown in field . Additionally the user can define that service manager should poll the database appliance every hour fields and to determine if the slow average response time exceeds 45 seconds. illustrates a notification attributes window . For example for each query for which the average slow response time is greater than 45 seconds one or more of the following attributes can be reported database name query text e.g. SQL text cache hits percentage minimum time maximum time average response time minimum wait time maximum wait time average wait time and other suitable attributes. illustrates an actions window defining the type of notification or alert service manager should send. In this example if the notification or alert is triggered based on the defined threshold of 45 seconds the service manager will send an email to the specified address having the attributes selected by the user in the attributes window . illustrates an example of specifying an email address to which to send the notification selected in .

The console program can send the job description with the user defined threshold notification attributes and notification action to the service manager program. The service manager program in this example will poll the database client every hour for slowest query information for the HR830 DB2 database and send a notification reporting each query that had an average response time exceeding 45 seconds.

Additionally the console program can allow the user to define control functions that can be carried out by the service manager. For example a user can define that if a particular client makes more than a certain number of queries to a database the service manager should logon to the appropriate database server and change the client or user profile at the database server to deny further access. It should be noted that the control functions can include any arbitrarily defined action that the service manager can take to provide notifications change the configurations of the database servers database clients database appliance the service manager itself or other action.

Thus a service manager can access locally or over a network connection database performance data collected by a database appliance and store the database performance data to a service manager repository. Additionally the service manager can compare at least one item of the database performance data to a predetermined threshold and if the threshold is met notify a user that the item of performance data has met the threshold. Moreover the service manager can compare collected data to control rules to determine if the service manager should take a control action. If the control rule is satisfied the service manager can take the control action. Unlike previous database monitoring systems this can be done without the need to collect data from distributed software agents that reside at each database client and database server.

In the previous embodiment of an external service manager the service manager is described as monitoring a particular database appliance. However each service manager may monitor multiple database appliances and multiple service managers may monitor a single database appliance. In particular embodiments multiple database appliances can be configured in a high availability cluster. As described above high availability clustering allows deployment of an active standby pair of database appliances to provide a redundant fault tolerant database connection. Each database appliance periodically determines the availability of the other and if required the standby database appliance becomes available. is a diagrammatic representation one embodiment of a system with a high availability cluster that includes database appliance and standby database appliance .

High availability cluster is assigned a virtual IP address that is used for relaying database traffic and by the console program and the service manager program to connect to high availability cluster. The active database appliance handles all traffic to the virtual IP address. The standby database appliance monitors the active database appliance and if the active database appliance becomes inactive takes over handling traffic to the virtual IP address.

A user can configure service manager e.g. using console system with the virtual IP address of high availability cluster . Service manager can then monitor the status of high availability cluster and send notifications when certain events or status changes in high availability cluster occur. For example the user can configure service manager to send email notifications when service manager can not connect to the active unit at the virtual IP address when a successful reconnection to the active unit is achieved or a change in status at high availability cluster occurs.

In the particular embodiments described above the service manager is separate from console system and database appliance . However in other embodiments of the present invention the same general computer system that acts as console system can run the service manager program. In yet another embodiment of the present invention the service manager program can run on database appliance as described in conjunction with .

At step the service manager can receive a job description that includes for example a set of performance data to be collected from the database appliance a collection schedule and one or more actions to take with the collected performance data. The job description can further include one or more thresholds against which to compare items of the performance data. At step the service manager can queue the job specified in the job description according to the schedule.

At the appropriate time e.g. immediately each minute each hour daily the service manager can access the database performance data or other information specified in the job description from the database appliance step . This can include requesting the specified data over a network or other communications link accessing the data from the database appliance s memory or otherwise accessing the data from a remote or local memory location.

The service manager at step can take the action specified in the job description. This can include for example archiving the data to an internal or external database or flat file or comparing one or more items of the collected performance data to a threshold and if the threshold is met sending a notification to a user as specified in the job description. Additionally the service manager can compare items of collected data to control rules and if the parameters of the rule are met perform a control action. For example if based on policy rules e.g. control rules configured at the service manager a user utilizing a database client violates the policy the service manager can be configured to issue a set of commands to a database server. Specifically if during a login session the policy rules are violated based on user activity the service manager can login to the database and remove certain privileges from that user s profile. Thus in addition to data archiving and alerting as the actions specified in a job description control actions can be specified such that the service manager takes an action beyond alerting to improve the database system based on the data that s been collected by the database appliance. The methodology of can be repeated as needed or desired.

While particular embodiments of a service manager have been described in conjunction with a particular database appliance it should be noted that embodiments of the present invention can be implemented to retrieve archive and provide notifications on database performance data from any database appliance that collects database performance data. Moreover various embodiments of the database appliance can be located anywhere in the database message path between database clients and database servers.

Although the present invention has been described in detail herein with reference to the illustrated embodiments it should be understood that the description is by way of example only and is not to be construed in a limiting sense. It is to be further understood therefore that numerous changes in the details of the embodiment of this invention and additional embodiments of this invention will be apparent and may be made by persons of ordinary skill in the art having reference to this description. It is contemplated that all such changes and additional embodiments are within scope of the invention as claimed below.

