---

title: System and method for inventory services
abstract: In accordance with embodiments, there are provided mechanisms and methods for determining a select set of changes from a set of changes made to an application instance to propagate to one or more other application instances. These mechanisms and methods can enable embodiments to propagate changes from a first application instance in a first environment to a second application instance in a second environment. For example, an embodiment can enable changes to be made to a test version in a test environment, tested and then propagated to a production version of the application residing in a production environment. The ability of embodiments to propagate changes to other application instances across environments can enable easy capture and transferal of changes to an application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07735077&OS=07735077&RS=07735077
owner: BEA Systems, Inc.
number: 07735077
owner_city: Redwood Shores
owner_country: US
publication_date: 20050503
---
The U.S. patent application claims the benefit of the following U.S. Provisional Patent Application the entire disclosure of which is incorporated herein by reference 

U.S. Provisional Patent Application No. 60 568 208 entitled SYSTEM AND METHOD FOR PROPAGATION OF APPLICATIONS by Peter Laird filed on May 5 2004.

The following commonly owned co pending U.S. patents and patent applications including the present application are related to each other. Each of the other patents applications are incorporated by reference herein in its entirety 

U.S. patent application Ser. No. 11 121 143 entitled SYSTEM AND METHOD FOR INVENTORY SERVICES by Peter Laird filed on May 5 2005 and

U.S. patent application Ser. No. 11 210 855 entitled SYSTEM AND METHOD FOR APPLICATION PROPAGATION by Peter Laird filed on May 5 2005.

The present invention relates generally to systems methods and computer readable media for managing portal applications. The present invention relates particularly to the propagation of portal application data.

Since its inception in 1995 the Java programming language Java is a registered trademark of Sun Microsystems Inc. has become increasingly popular. Java which is an interpreted language enabled the creation of applications that could be run on a wide variety of platforms i.e. so called platform independent applications. This ability to function across a variety of different client platforms and Java s relatively easy implementation of network applications has resulted in its use in endeavors as basic as personal webpages to endeavors as complex as large business to business enterprise systems.

As Java has become more commonplace a wide variety of tools and development platforms have been created to assist developers in the creation and implementation of platform independent applications using Java or other languages that support platform independent applications. One such type of platform independent application is the web portal. A web portal is a World Wide Web site whose purpose is to be a starting point for a wide variety of users when these users connect to the Web. Thus a number of products have arisen to assist in the design of customized web portals that provide tools and integrate previously generated content. These products provide graphics content sample portlets i.e. applications that can run within a web portal and tools for interacting with and modifying the same.

One commonly used function of such tools is the backup and propagation of portal applications. Often a developer will wish to modify an application in a development and testing environment first before propagating the changes to a version of the application that is part of a working portal i.e. the working setting or production environment. After testing the modified application in the testing environment the developer then passes the changes to the version of the application in the working setting.

However these applications can be difficult to configure and often store relevant data in a variety of difficult to identify locations. This makes the task of accurately propagating the changes to the version of the application in the working setting highly unreliable and time consuming.

What is needed is a tool for propagating portal applications that allows for the easy capture and transferal of changes to an application.

In accordance with embodiments there are provided mechanisms and methods for determining a select set of changes from a set of changes made to an application instance to propagate to one or more other application instances. These mechanisms and methods can enable embodiments to propagate changes from a first application instance in a first environment to a second application instance in a second environment. For example an embodiment can enable changes to be made to a test version in a test environment tested and then propagated to a production version of the application residing in a production environment. The ability of embodiments to propagate changes to other application instances across environments can enable easy capture and transferal of changes to an application.

In an embodiment a method for determining a select set of changes made to an application to propagate. The method includes determining a unique identifier for at least one item of information related to a first version of an application. One or more unique identifiers can form a first inventory associated with the first version of the application. In response to receiving a second inventory comprising at least one unique identifier for at least one item of information related to a second version of the application a set of differences between the first version of the application and the second version of the application can be determined by comparison of the first inventory and the second inventory. The set of differences can be provided as changes to be propagated to a second version of the application.

As used herein the term application is intended to be broadly construed to include any data entry update query or program that processes data on behalf of a user including without limitation network based applications web based server resident applications web portals search engines photographic audio or video information storage applications e Commerce applications backup or other storage applications sales revenue planning marketing forecasting accounting inventory management applications and other business applications. Users may be human or computational entities. As used herein the term environment is intended to be broadly construed to include a set of any characteristics of a computer configuration including hardware and software characteristics such as without limitation operating system Central Processor Unit CPU model data communications systems database systems programming languages and any applicable standards. As used herein the term residing is intended to be broadly construed to include applications loaded into active memory persisted in storage being executed by a processor and other associations between applications and environments known in the computing arts. As used herein the term inventory is defined as one or more identifiers associated with one or more data items. The term data items is intended to be broadly construed to include without limitation configuration data render data user customization information user data and any other data capable of being associated with an application.

In another embodiment a method for propagating changes from an application instance in a first environment to an application instance in a second environment is provided. The method includes generating a first inventory of data items by associating a unique identifier with each data item accessible to a first version of the application residing in the first environment. A second inventory of data items is generated by associating a unique identifier with each data item accessible to the second version of the application residing in the second environment. For example the second version may be formed by migrating the first version of the application to the second environment. A set of changes to be made to the second version is determined by comparing corresponding unique identifiers from the first inventory and the second inventory to determine a difference. The difference indicates changes made to the first version of the application that can be propagated to the second version of the application.

In an embodiment the inventories comprise an inventory services layer that is located within an application deployed in source and destination environments. The inventory services layer can be configured to locate and return configuration data and other data for the application and return it to a requesting agent. The inventory services layer abstracts the requests for data such that the requesting agent does not need to know the location of the data. Using the inventory services layer in both source and destination environments a propagation tool can compare data sets referenced by corresponding unique identifiers within the inventories and determine the differences between the environments based upon the inventory. The propagation tool may utilize the inventory services layer in the destination environment to propagate changes from one environment to another environment.

The applications are portal applications stored in the source environment that perform various services and functions in association with the central portal. The propagation tool is a utility that is used to propagate applications and changes to applications from the source environment to the destination environment . In one embodiment the propagation tool copies an entire application from the source environment to the destination environment to generate one of the applications stored in the destination environment. In an alternate embodiment the propagation tool compares an application in the source environment to a corresponding application in the destination environment determines the differences between the two applications and modifies the application in the destination environment to match the application in the source environment .

The backup tool is configured to generate backups of portal applications. In some embodiments when restoring from a backup the backup tool compares a current application to an existing backup and modifies those aspects of the current application that differ from those of the backup. When generating a backup the backup tool can perform the reverse function and modify those aspects of an existing backup that differ from a current application.

In some embodiments the backup and propagation tools operate through a client server model with the tools using source data on a client to modify destination data on the server. These tools can store inventory data configuration differences and proposed configuration changes as XML files. The backup tools can be invoked from a user interface such as a Graphical User Interface GUI or a script. While in the embodiments illustrated herein the user interface is a GUI in alternate embodiments any number of interfaces including text interfaces voice interfaces touchscreens or any other type of interface can be used.

The external data sources are data sources outside the application that are used to configure or otherwise support the application. While illustrates the external data sources as being within the application in some embodiments they are associated with the application but located outside of the application. The XML files are files storing data and configuration information for the application. The datasync data is data that has been generated by or stored for a runtime configuration utility. The internal LDAP stores security values indicating who is able to access resources associated with the application . The CM includes graphics and rendering information that is displayed in association with the portal application.

The portal APIs are used to access and manipulate the various inventory data sources . In some cases the portal APIs are utilized by the inventory services but primarily they are utilized during the normal creation and utilization of the application .

The inventory services layer is configured to receive requests from the propagation tool and backup tool . These requests take the form of requests to retrieve inventory data stored in the various inventory data sources and requests to modify the inventory data stored in the various inventory data services. The inventory services layer abstracts all of the data access to the sources below it so that the propagation tool only needs to submit a request for certain data and the inventory services layer locates and either provides or modifies the data.

The inventory services layer performs a certain number of information retrieval services. These services include a listing service that indicates all of the subcategories within a particular category such as all the portlets defined for a particular web application. The services further include a dependency service that indicates what elements are needed to run a particular application such as which portlets are associated with particular pages or portals. It additionally includes an identity function that can provide previous names for particular data values. In addition to the functions above that retrieve particular pieces of data the inventory services layer also includes update services that can delete modify or create inventory data. While the above services are discussed for illustrative purposes the inventory services layer can be configured to perform any number of retrieval or updating services.

The propagation tool includes a number of Inventory Services Consumers ISCs that are configured to communicate with the inventory services layers of the source and destination applications. These consumers are configured to perform the varying inventory retrieval and update services discussed with respect to and are the primary mechanism by which the propagation tool interacts with the applications .

Two ISCs gather inventory data from the applications through the inventory services layers and store the information in the inventory archives . While in one embodiment this inventory data is selected from the inventory sources described in in alternate embodiments other data sources may be utilized as well. The first ISC develops a snapshot of all of the inventory data in the source application and stores the data in an XML file in the archives . The second ISC generates a similar snapshot of all of the data stored in the destination application and similarly stores the information in the archives .

An inventory difference engine reads the XML data stored in the archives compares the source and destination inventory data gathered by the ISCs and determines the differences between the two applications. In some embodiments the archives also store historical data about the state of the two applications throughout different points in time and the inventory difference engine utilizes this information to determine the differences between the two applications .

These differences can be viewed through a change election user interface . The change election user interface provides a graphical listing of some or all differences between the two applications. The differences can be organized according to types of information sources of information or any other system of organization.

The change election user interface can then be utilized to select which inventory data in the source application should be propagated to the destination application . In one embodiment a user can manually select through the user interface which differences will modified or which configuration values that are in the source application should be propagated to the destination application .

In an alternate embodiment a user can designate preselected rules which indicate which differences should be propagated from the source application to the destination application and which changes should be ignored.

A resolver allows the designation of post processing changes to be performed on various pieces of inventory data once the data is on the destination server. For example an administrator adding a portlet to a desktop page in staging could set a rule that any visitor customized view of the page should updated to view the new portlet. A transform engine can designate changes that should be performed on inventory data as it is transferred to a new environment.

The changes that are selected are then stored in a change manifest.xml file by a first change manifest persistor . While in the present embodiment the changes are stored in an XML file in alternate embodiments any number of file formats can be used.

The propagation tool user interface allows a user to invoke a propagation request. A second change manifest persistor reads all of the changes stored in the change manifest and passes them to a third ISC . The third ISC updates the relevant inventory data in the application through its inventory services . At this point any requested changes have been propagated from the source application to the destination application.

Other features aspects and objects of the invention can be obtained from a review of the figures and the claims. It is to be understood that other embodiments of the invention can be developed and fall within the spirit and scope of the invention and claims.

The foregoing description of preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obviously many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.

In addition to an embodiment consisting of specifically designed integrated circuits or other electronics the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure as will be apparent to those skilled in the computer art.

Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art.

The present invention includes a computer program product which is a storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs microdrive and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

Stored on any one of the computer readable medium media the present invention includes software for controlling both the hardware of the general purpose specialized computer or microprocessor and for enabling the computer or microprocessor to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include but is not limited to device drivers operating systems and user applications.

Included in the programming software of the general specialized computer or microprocessor are software modules for implementing the teachings of the present invention.

