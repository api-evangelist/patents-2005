---

title: Uniform access to entities in registered data store services
abstract: A data store catalogue service model is disclosed for exposing disparate data store services to clients without requiring explicit knowledge on how to interact with each disparate service. The data store catalogue service model may maintain interaction details for each data store service that clients may access for interacting with those services. The model may also maintain metadata that may describe the different types of services available for access by clients, the data types used by those services, how to access the data provided by the services, and how to communicate semantically with the services for accessing the service's data. Additionally, the data store may include metadata that enables clients to interact with one or more registered data stores in a number of ways, such as for discovering registered data store services, entities, classes, and/or any associations between related entities within the same or among disparate services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07810106&OS=07810106&RS=07810106
owner: Microsoft Corporation
number: 07810106
owner_city: Redmond
owner_country: US
publication_date: 20050728
---
This application is a Continuation In Part under 35 U.S.C. 120 of U.S. patent application Ser. No. 11 165 748 filed on Jun. 23 2005 which is incorporated by reference herein in its entirety.

The disclosed technology relates generally to data processing and more particularly to enabling clients to discover and interact with one or more entities in one or more registered data store services in a number of ways using one or more uniform access interfaces.

Organizations may often use or desire using line of business LOB systems to carry out daily operations for example. Further many organizations may implement a number of different types of LOB systems to perform particular tasks such as SAP SIEBLE and other types of LOB systems. While these LOB systems may potentially offer a great deal of benefits at the same time organizations may find themselves unexpectedly devoting other resources just to be able to utilize these systems.

For instance an organization s developer s may need to familiarize themselves with the semantics for interacting with each type of different LOB system. While SAP and SIEBLE were mentioned above as examples of LOB systems any one organization may desire employing other types of LOB systems. Moreover organizations may desire utilizing several instantiations of a particular LOB system e.g. SAP each dedicated to handling particular business related operations in addition to those other types of systems mentioned above. As a result still more of an organization s resources would need to be invested to be able to leverage those systems.

The following presents a simplified summary of the subject matter disclosed in further detail herein to provide a basic understanding to the reader. This summary is not an exhaustive or limiting overview of the disclosed subject matter and is not provided for identifying key and or critical elements of the subject matter or delineating the scope of the claimed subject matter. Thus the scope of the claimed subject matter should not be limited in any way by this summary. Its sole purpose is to present some of the concepts in a simplified form as an introduction to the more detailed description that is presented later.

The present example provides a data store catalogue service model that may be implemented as a data store catalogue service system in the manner described herein with regard to . The data store catalogue service model may be implemented to expose one or more disparate data store related services to one or more clients without requiring the clients to have explicit knowledge on how to interact with each or any of the disparate services. The data store catalogue service system may maintain interaction details for the data store related services which the clients may access for interacting with those services. In particular the data store catalogue service system may implement a metadata data store that may describe the different types of services available for accessing by clients the data types used by those services how to access the data provided by the services and how to communicate semantically with the services for accessing the service s data. The clients may issue one or more requests to access those particular services defined in the metadata data store via one or more application program interfaces APIs exposed to the clients by a data store service catalogue system in a unified manner.

Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present example may be constructed or utilized. The description sets forth the functions of the example and the sequence of steps for constructing and operating the example. However the same or equivalent functions and sequences may be accomplished by different examples.

An exemplary data store catalogue service system implemented in a system and method for registering data store services in cataloguing systems to provide clients with access to disparate data store services in a unified manner is generally shown in and . As mentioned above earlier organizations may often use or desire utilizing a number of different types of LOB systems to perform particular tasks although organizations may desire implementing other types of software applications besides LOB systems such as Web services which may involve the same resource investments for enabling an organization s client applications to use the different types of systems.

In particular an organization may wind up devoting resources for finding the different systems and identifying their purpose. In addition these organizations may find themselves devoting even more resources just to be able to programmatically access each of the respective systems methods such as for allowing them to develop their own user or other types of access interfaces for accessing the systems. Unfortunately many such systems typically involve uniquely formatted ways for accessing information from each system s respective data store. For instance unique parameters filters and other access nuances often make it difficult for organizations to develop interfaces for accessing the various systems unless the organization s software application developers possess intimate knowledge of each system s semantics.

Data store catalogue service system may be implemented in system in an attempt to address at least some of the issues noted above by providing client applications with one or more unified interfaces for interacting with one or more disparate systems without requiring specific knowledge of the inner workings of those systems although there may be other uses as well. Basically data store catalogue service system may provide an environment where one or more disparate systems may be registered in one or more data stores using metadata for example. The metadata may define methods parameters and or default values for one or more of the data store services that may allow clients to be able to interact with the registered services. As a result application developers may be insulated from having to explicitly program their applications to be able to invoke the appropriate method calls and to process the various types of return values produced by each of the different types of systems.

In particular data store catalogue service system may implement a metadata data store that may describe the different types of services available for accessing by clients the data types used by those services how to access the data provided by the services and how to communicate semantically with the services for accessing the service s data. The clients may issue one or more requests to access those particular services defined in the metadata data store via one or more application program interfaces APIs exposed to the clients by a data store service catalogue system in a unified manner.

Referring now specifically to an example of a suitable operating environment in which system may be implemented is illustrated. As shown in system may generally include at least one computer and one or more application servers that may be coupled together via network although system may include a lesser or greater number and other types of devices.

It should be noted however that is not intended to suggest any limitation as to the scope of use or functionality of the system . Other types of computing systems environments and or configurations that may be suitable for use with the system include but are not limited to hand held notebook or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Referring now to an exemplary configuration for one or more of the application servers is illustrated. In its most basic configuration application server may comprise application server input module application server output module application server communication module application server processor module and application server memory module which may be coupled together by one or more bus systems or other communication links although application server may comprise other modules in other arrangements. Modules and will now be described below with continued reference to .

Application server input module may comprise one or more user input devices such as a keyboard and or mouse and any supporting hardware. Application server input module may enable a user who is operating application server to generate and transmit signals or commands to application server processor module although other types of user input devices may be used.

Application server output module may comprise one or more user output devices such as a computer monitor e.g. CRT LCD or plasma display and any supporting hardware although other types of output devices may be used. Application server output module may present one or more results from application server processor module executing instructions stored in application server memory module as described in further detail herein below.

Application server communication module may comprise one or more communication interface devices such as wire based e.g. Ethernet or wireless network adapters and any supporting hardware although other types of communication interface devices may be used such as serial port interfaces e.g. RS 232 . Application server communication module may enable application server to transmit data to and receive data from other devices via network such as computer although application server communication module may transmit receive data to from other computing systems or peripherals e.g. external memory storage device or printer via other communication media such as direct cable connections for example.

Application server processor module may access data and may execute instructions stored in application server memory module for controlling monitoring and managing hereinafter referred to as operating application server input module application server output module application server communication module and application server memory module as described herein although some or all of the data and instructions may be stored in and or executed by the modules themselves.

Additionally application server processor module may access data and may execute instructions stored in application server memory module to perform functions for implementing at least a portion of the method as described herein and illustrated in although application server processor module may perform other functions one or more other processing devices or systems may perform some or all of these functions and application server processor module may comprise circuitry configured to perform the functions described herein.

Application server memory module may comprise one or more types of fixed and or portable memory accessible by application server processor module such as ROM RAM SRAM DRAM DDRAM hard and floppy disks optical disks e.g. CDs DVDs magnetic tape ferroelectric and ferromagnetic memory electrically erasable programmable read only memory flash memory charge coupled devices smart cards or any other type of computer readable media which may be read from and or written to by one or more magnetic optical or other appropriate reading and or writing systems coupled to application server processor module and or one or more other processing devices or systems.

Application server memory module may store at least a portion of the data and instructions that may be accessed and or executed by application server processor module for operating application server communication module and application server memory module although some or all of the data and instructions may be stored elsewhere such as in the modules themselves and or the application server processor module .

Application server memory module in each application server may also store one or more modules such as data store service A and or data store service B shown in although the modules may be stored elsewhere. Further data store service A and or data store service B may comprise an LOB system such as SAP or SIEBLE although data store service A and or data store service B may comprise other types of LOB systems or other types of data store services such as Web services or any other type of server application. LOB systems such as SAP and SIEBLE are types of enterprise or business related software.

Referring to in its most basic configuration computer may comprise computer input module computer output module computer communication module computer processor module and computer memory module which may be coupled together by one or more bus systems or other communication links although computer may comprise other elements in other arrangements. Modules and will now be described below with continued reference to .

Computer input module may comprise one or more user input devices such as a keyboard and or mouse and any supporting hardware. Computer input module may enable a user who is operating computer to generate and transmit signals or commands to computer processor module such as commands for operating client service access portal application although other types of user input devices may be used.

Computer output module may comprise one or more user output devices such as a computer monitor e.g. CRT LCD or plasma display and any supporting hardware although other types of output devices may be used. Computer output module may present one or more results from computer processor module executing instructions stored in computer memory module as described in further detail herein below.

Computer communication module may comprise one or more communication interface devices such as a network interface card e.g. Ethernet card or wireless network card and any supporting hardware although other types of communication interface devices may be used such as a serial interface e.g. RS 232 interface . Computer communication module may enable computer to transmit data to or receive data from other devices via network such as one or more application servers although computer communication module may transmit receive data to from other computing systems or peripherals e.g. external memory storage device or printer via other communication media such as a direct cable connection for example.

Computer processor module may access and or may execute data and instructions stored in computer memory module for operating computer input module computer output module computer communication module and computer memory module as described herein although some or all of the data and instructions may be stored in and or executed by the modules themselves.

Additionally computer processor module may access and or may execute data and instructions stored in computer memory module to perform functions for implementing at least a portion of the method described with reference to although computer processor module may perform other functions one or more other processing devices or systems may perform some or all of these functions and computer processor module may comprise circuitry configured to perform the functions described herein.

Computer memory module may comprise the same types of memory storage devices as application server memory module in application server although other types of computer readable media may be used which may be read from and or written to by one or more magnetic optical or other appropriate reading and or writing systems coupled to computer processor module and or one or more other processing devices or systems.

Computer memory module may store at least a portion of the data and instructions that may be accessed and or executed by computer processor module for operating computer input module computer output module computer communication module computer processor module and computer memory module although some or all of the data and instructions may be stored elsewhere such as in the modules themselves and or the computer processor module .

Computer memory module may also store client service access portal application and data store service catalogue system although the application and system may be stored elsewhere. Client service access portal application and data store service catalogue system may comprise data and or instructions written in a number of programming languages which when accessed and or executed by computer processor module may cause computer to implement at least a portion of the method described with reference to although the modules may comprise circuitry configured to operate in the manner described herein.

Client service access portal application may access metadata access API to interact with at least one of data store service A or data store service B implemented on one or more servers as will be described in further detail herein below. Data store service catalogue system may comprise metadata access API metadata data store and service execution API although system may comprise other components in other arrangements. Metadata data store may comprise one or more metadata entries which may define one or more methods parameters associated with the methods and other information related to the semantics for interacting with one or more of data store services A and or B that may be implemented on servers although data store may comprise one or more other metadata entries for defining the semantics for interacting with other services or other types of entries besides metadata entries.

Metadata access API may comprise one or more application program interfaces that may accept one or more methods calls and or parameters for accessing one or more entities that may be defined in metadata data store and which may correspond to one or more entities associated with one or more of data store services A and or B that may be implemented on one or more application servers .

Service execution API may comprise one or more application program interfaces that may accept one or more methods calls and or parameters from data store service catalogue system based on the metadata obtained from metadata data store for a particular service and or that may be implemented on servers . Further service execution API may comprise one or more adapter shims for each of the services and or that may be implemented on servers such as adapter shim A A and adapter shim B B shown in . Adapter shims may comprise low level information that service execution API may use to communicate with data store service interface adapters A B shown in such as information that may specify how to invoke one or more methods associated with data store services and or that may be exposed by adapter . An example includes an SAP .NET Connector software component where data store services and or may comprise an SAP LOB service for instance.

It should be appreciated that client service access portal application data store service catalogue system and their associated modules as described above are depicted in the manner shown in for ease of description and exemplary purposes only. However client service access portal application and data store service catalogue system may comprise a fewer or greater number and other types of modules that may reside on one or more other computing systems or devices.

Referring back to network may comprise a Wide Area Network WAN such as the Internet although a variety of other communication systems and or methods using appropriate protocols may be used including other types of WANs local area networks wireless networks phone lines serial and or parallel bus cables coaxial cables and combinations thereof.

An example of a method for registering a data store service A and a data store service B will now be described with reference to in the context of being carried out by the system described above in connection with .

Referring to and beginning at step by way of example only a user of computer may operate client service access portal application using the computer s input system in conjunction with operation of the computer processor module computer memory module and computer communication module to identify which services e.g. data store service A data store service B may be available in network for registration with data store service catalogue system .

At step the user of computer such as a developer may determine which one or more methods may be used by each data store service identified above at step .

At step the user may identify one or more parameters that may be used for each method identified above at step .

At step the user may populate metadata data store metadata data store in the data store service catalogue system with the methods and associated parameters for each data store service to register each service an example of which is illustrated in . It should be noted that the exemplary parameters and manner in which the tables are organized in are provided for ease of illustration and descriptive purposes only as the particular parameters provided and the manner in which they are organized may vary depending on the particular environment they are employed. Further the examples provided in may include more or less information for each parameter as required for the particular data services each parameter may be associated with.

At step client service access portal application may provide tag values for associated parameters such as whether the particular parameter represents an identifier or a filter although other parameters may be provided. Further client service access portal application may provide a default value for one or more of the associated parameters included in metadata data store . Any default value provided for a particular parameter may depend on the particular data store service that the parameter may be associated with such as data store service A or data store service B as well as the type of parameter it is provided for as identified by the parameter s Tag entry in the metadata data store . shown in .

For instance a first default value shown in may specify a particular format for specifying the format in which date values may be filtered when sent back to the client application for example. As an example the default value shown in may specify Date format xx xx xxxx although any other values may be provided. Upon defining each of the tag values and any default values for the parameters the method may end.

An example of a method for enabling clients to discover and interact with one or more entities in one or more registered data store services such as data store service A and a data store service B will now be described with reference to in the context of being carried out by the system described above in connection with .

Referring to and beginning at step by way of example only a user of computer such as an organization s developer may operate client service access portal application using the computer s input system in conjunction with operation of the computer processor module computer memory module and computer communication module to access the data store service catalogue system for a number of reasons such as for querying the module to identify which services e.g. data store service A data store service B may be registered in metadata data store for instance.

Further a developer may desire querying the module to identify which data store services may be registered in metadata data store so that the developer can develop code that may enable one or more other client computers on the network to access the data store services in a particular manner. However the developer may not be well versed in coding for one or more of the various data store services that may be registered within the metadata data store for which providing access to the one or more other clients may be desired. Thus the metadata that may be maintained in metadata data store for each registered data store service may enable the developer with limited coding knowledge to develop code for leveraging one or more of the registered data services.

Further the metadata data store may be populated with metadata describing one or more services e.g. data store service A data store service B registered therein using any number of methods such as the process described above in connection with method for example although other methods could be used. For instance the developer may provide the following line of code to the client service access portal application which in turn would send the code to the data store service catalogue system for further processing as described herein 

The SystemInstance.GetSystemInstances method may be made available to the client service access portal application by the data store service catalogue system via the metadata access API for example. Responsive to receiving the above identified from the client application the data store service catalogue system may search for any registered data store services in the metadata data store .

Referring to an exemplary portion of information that may be maintained in the metadata data store to represent one or more registered instances of data store services is illustrated as a system instances table. It should be appreciated that the information illustrated in is provided for ease of illustration and descriptive purposes only. As shown in one or more data store service instances are identified under a Service ID column and or a Service Name column.

Further a Service Type column in the system instances table may identify the particular type of data store service e.g. SAP Sieble . For instance system instances table shows that there are two registered data store services of Service Type Service Type 1 which represents two instances of the same type of data store service. When the data store service catalogue system identifies the data store services registered in the metadata data store a reference to a listing or enumeration of the services may be made available to the client service access portal application and hence the developer for example.

At step the developer operating the client service access portal application running on computer may desire determining which entities may be associated with and or exposed by one or more of the registered data store service instances that may have been identified above at step via one or more API s exposed by those services for example. An entity may represent data and or one or more methods or logic defined within the registered data store service s native environment that can be implemented by data store service catalogue system . For instance an SAP data store service may define a Customer entity and an Employee entity that may be associated with one or more methods or logic for instance although other entities may be defined. Further the one or more methods associated parameters and or default parameter values that may be associated with each entity associated with a particular data store service instance may be defined by the data store service catalogue system in the metadata data store such as in the exemplary metadata provided in earlier for instance.

For a specific example the developer may provide the following line of code to the client service access portal application which in turn would send the code to the data store service catalogue system for further processing as described herein 

Referring to an exemplary portion of information that may be maintained in the metadata data store to represent one or more entities associated with each of the one or more registered data store services identified above at step is illustrated as an entities instances table. It should be appreciated that the information illustrated in is provided for ease of illustration and descriptive purposes only. As shown in one or more data store service instances are identified under an Entity ID column. Further a System Identifier column in the entities instances table identifies which of the one or more registered data store services identified above at step the particular entity may be associated with.

Referring back to the example provided above in since there may be two different instances of the same registered data store services identified above at step each service instance may be associated with the same types of entities e.g. entity types and although each entity may be defined within metadata data store differently and referred to independently if desired for example.

Referring to another exemplary portion of information that may be maintained in the metadata data store is illustrated as an entity methods table which may identify one or more methods associated with each of the entities associated with the one or more registered data store services shown in discussed above. Again the information illustrated in is provided for ease of illustration and descriptive purposes only and the methods identified in the entity methods table may be described or further annotated in the metadata data store in the same manner shown and described above in connection with although the methods may be defined in other ways.

When the data store service catalogue system identifies the one or more entities and one or more methods associated with each of the one or more data store services registered in the metadata data store a reference to a listing or enumeration of these entities and associated methods may be made available to the client service access portal application and hence the developer for example. Furthermore each of the identified entities may support a number of methods including but not limited to an instantiate method for instantiating a particular entity one or more find and or findSpecific methods for finding one or more instances of entities in one or more identified data store services registered in the metadata data store one or more getAssociation methods for identifying one or more associations among one or more entities defined in the metadata data store one or more getExternalAssociation methods for identifying one or more associations among one or more corresponding entities among one or more different data store services registered in the metadata data store and or GetViews methods.

At step the developer operating the client service access portal application running on computer may desire determining whether any of the entities that may have been identified above at step for each of the registered data store services that may have identified above at step are related to each other. The relationships between the one or more entities may be described in the metadata data store and may be based on one or more relationships defined in the native environment of the particular data store service that the entity may be associated with for instance although the metadata data store may be extensible to define non native entity associates for particular implementation environments if desired. For example an SAP data store service may define a relationship between a Customer entity and a Sales Order entity.

For a specific example the developer may provide the following line of code to the client service access portal application to enable retrieving any defined associations between the entities in one or more particular data store services which in turn would send the code to the data store service catalogue system for further processing as described herein 

Referring to an exemplary portion of information that may be maintained in the metadata data store to represent one or more associations between one or more entities associated with each of the one or more registered data store services identified above at step is illustrated as internal entities associations table. It should be appreciated that the information illustrated in is provided for ease of illustration and descriptive purposes only. As shown in one or more entity associations are identified under an Association ID column. Further an Association column in the internal entities associations table identifies which of the one or more entities are associated. Finally an Associated Methods column in the internal entities associations identifies one or more associated methods may be called to retrieve information representing the related entities.

For instance if the First Entity represents a Customer and the Second Entity represents Sales Orders in an SAP data store service environment then data store service catalogue system would implement the appropriate SAP code that may be defined in the metadata data store to obtain Sales Order information for each Customer entity maintained by the SAP service for example. When the data store service catalogue system identifies any associations or relationships among the one or more entities that may be defined in the metadata data store a reference to a listing or enumeration of these entity associations may be made available to the client service access portal application and hence the developer for example.

At step the developer operating the client service access portal application running on computer may desire determining whether any of the entities that may have been identified above at step for each of the registered data store services that may have identified above at step are related to any other corresponding entities in one or more different data store services that may have been identified above at step . For instance the developer may desire determining and or leveraging the correspondence between SAP data store service Customers and any corresponding Sieble data store service Customers for example.

The relationships between the one or more corresponding entities in one or more different data store services may be described in the metadata data store . However these corresponding relationships often may not be defined in the native environment of the particular data store services that the corresponding entities may be associated with and thus this identifying these types of relationships may prove utility to the developer for instance. For a specific example the developer may provide the following line of code to the client service access portal application to enable retrieving any defined associations between the entities in one or more particular data store services which in turn would send the code to the data store service catalogue system for further processing as described herein 

Referring to an exemplary portion of information that may be maintained in the metadata data store to represent one or more external associations between one or more corresponding entities in one or more different data store services identified above at step is illustrated as external entity associations table. It should be appreciated that the information illustrated in is provided for ease of illustration and descriptive purposes only. As shown in one or more entity associations are identified under an External Association ID column.

Further a First Association column in the external entities associations table identifies which of the one or more entities from a first data store services may have an external association. Moreover a Second Association column in the external entities associations table identifies another one or more of the entities from a second data store service that may have an external association with the entity identified under the First Association in the same row. For instance the First Entity may represent a Customer entity in an SAP data store service environment and the Second Entity may represents a corresponding Customer in a Sieble data store service environment.

Referring to another exemplary portion of information that may be maintained in the metadata data store is shown as external entity association instance mappings in and may describe one or more instances of the associations shown in for example. When the data store service catalogue system identifies any associations or relationships among the one or more entities that may be defined in the metadata data store a reference to a listing or enumeration of these external entity associations may be made available to the client service access portal application .

At step the developer operating the client service access portal application running on computer may desire specifying which properties or fields associated with a particular entity may be output and or provided to clients that a client data service application may be coded for accessing by the clients. For instance a Customer entity in an SAP data service environment may be associated with over 250 properties. Thus the developer may desire limited the number of fields that may be displayed to clients to just a few relevant fields that may be appropriate in a particular environment for example.

For a specific example the developer may provide the following line of code to the client service access portal application to enable using one or more predefined views that may be defined in the metadata data store which in turn would send the code to the data store service catalogue system for further processing as described herein 

Referring to an exemplary portion of information that may be maintained in the metadata data store to represent one or more available views that may be defined in the metadata data store is illustrated as views table. It should be appreciated that the information illustrated in is provided for ease of illustration and descriptive purposes only. As shown in one or more views are identified under View ID and View Name columns. Further a View Type column in the views table identifies the particular type of view.

Referring to another exemplary portion of information that may be maintained in the metadata data store is shown as view definitions table and may describe properties associated with one or more fields defined for each field type defined in the views table shown in for example. Thus one or more views may be called for particular instances to allow the developer to manipulate which portions of information associated with one or more entities may be returned and or presented.

It should be appreciated that steps may be performed in any particular order and do not need to be performed in the manner depicted in . If the developer has input all desired portions of code in the manner described in one or more steps the method may end although one or more portions may be repeated as desired.

It should be appreciated that while application server memory module and computer memory module illustrated in respectively have been described above as comprising computer storage media the memory modules and should be broadly interpreted to cover communication media as well. Communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example only communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared other wireless media and combinations thereof.

Further while the present examples are described and illustrated herein as being implemented in a data store catalogue service system the system described is provided as an example and not a limitation. As those skilled in the art will appreciate the present examples are suitable for application in a variety of different types of data store catalogue service systems systems.

Those skilled in the art will realize that storage devices utilized to store program instructions can be distributed across a network. For example a remote computer may store an example of the process described as software. A local or terminal computer may access the remote computer and download a part or all of the software to run the program. Alternatively the local computer may download pieces of the software as needed or distributively process by executing some software instructions at the local terminal and some at the remote computer or computer network . Those skilled in the art will also realize that by utilizing conventional techniques known to those skilled in the art that all or a portion of the software instructions may be carried out by a dedicated circuit such as a DSP programmable logic array or the like.

Further while particular examples have been described alternatives modifications variations improvements and substantial equivalents that are or may be presently unforeseen may arise to applicants or others skilled in the art. Accordingly the appended claims as filed and as they may be amended are intended to embrace all such alternatives modifications variations improvements and substantial equivalents. Further the recited order of processing elements or sequences or the use of numbers letters or other designations therefore is not intended to limit the claimed processes to any order except as may be specified in the claims.

