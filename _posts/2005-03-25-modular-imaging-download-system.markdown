---

title: Modular imaging download system
abstract: A system and method of modular image downloading (MINDS) from a network for configuring computers, or computer-based devices. The program images typically comprise a foundation image (operating system) and application module images. The system is configured as software which executes in response to a tree of actions defined in configuration data and not embedded within the executable of the MINDS program. The action tree can be controlled by the user interface, started, paused, terminated, stepped forward or backward, and so forth. The executable operates on the action tree and need not be re-compiled for each action tree change, the modules for the action trees are dynamically linked prior to execution. The action tree approach allows the user to readily change, add, or delete actions, or entire action trees from the system without the need of recoding or additional program testing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07653903&OS=07653903&RS=07653903
owner: Sony Electronics Inc.
number: 07653903
owner_city: Park Ridge
owner_country: US
publication_date: 20050325
---
A portion of the material in this patent document is subject to copyright protection under the copyright laws of the United States and of other countries. The owner of the copyright rights has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office publicly available file or records but otherwise reserves all copyright rights whatsoever. The copyright owner does not hereby waive any of its rights to have this patent document maintained in secrecy including without limitation its rights pursuant to 37 C.F.R. 1.14.

This invention pertains generally to computer program configuration and more particularly to an image network download system that is action tree based.

Configuring the software in modern computers and computerized devices is becoming increasingly complex as the number of possible models option sets and other variants increases. For example in supporting the sale of configured to order CTO computers the matrix of choices available for a given system when considering the different foundation images and application image sets could run up into the millions of different image sets any of which would need to be copied to the hard drive of the computer.

Typically the choices involve a small number of foundation image sets which relate to the specific hardware in addition to a collection of application modules which could be installed to run on those computers.

This plethora of image choices is a burden not only in the production environment but in other areas as well such as within engineering testing quality assurance service and so forth wherein the software and or applications must be configured or reconfigured to any of the present or previous configurations available from manufacturing. To create these hard drive images modular image download programs have been created which load a foundation image along with a predetermined set of application module images which are to be installed on the hard drive. For any one release of hardware and or software there may exist a number of different varieties of the imaging program for example versions for the Factory Engineering Test Quality Assurance Service Department and so forth.

Typically in the CTO environment the determination of what is to be loaded to a given system is determined at least partially if not fully in response to the information which is contained within a desktop management interface DMI . The DMI is an area in the hardware of a computer device in which a string referred to herein as Mcode is contained. The DMI also includes a section referred to as UUID which provides a unit serial number for the hardware. The bits of Mcode retained in the DMI indicate information about the device such as hardware characteristics along with what foundation image and other modules are loaded or are to be loaded. Since Mcode is not contained on the hard drive the hard drive may be repartitioned and formatted as necessary without affecting the state of the Mcode. Mcode is written to the DMI before the downloading of images onto the hard drive.

About a decade ago the industry primarily relied on the use of batch files for downloading images to the hard drive of a new system. The batch files used multiple data sources and severely lacked flexibility making it difficult or even unrealistic to consider supporting a large number of different image sets. In addition any changes to the configuration had to be carried out across multiple data sources and batch files wherein the process was labor intensive error prone and tedious.

More recently modular network imaging was introduced which relied on a single data source and a suite of programs written in a high level language that typically leveraged the functions made available within the application programming interface API of the operating system. The download process was performed in response to the execution of separate executables. One such download configuration program utilized at Sony is referred to as MINDS Modular Network Download System version 1 which was utilized in combination with a program toolset known as Pacific Tools.

It should be appreciated that the ability to build a system with different foundation and application modules is necessary to support the sale of configure to order CTO computers which offer the customer different sets of software. An example is that of allowing the customer to select the word processing and multimedia software to be loaded on their machine. The process of taking a foundation image and adding modules to create an image is known herein as Sony Modular Technology. The benefit of this technology is that an exponentially increasing number of images can be offered to the customer. For example letting x equal the number of foundation images y equal the number of modules and z equal the number of unique images that can be offered the equation z x2describes the size of the number of different images. By way of example with twenty three foundation images and thirty three modules the number of unique possible images that could be offered to customers is over eighty seven billion although typically only a subset of these are offered at any one time. A manufacturer having the capability to offer and support a large number of possible images provides a competitive advantage.

The life cycle of an image can be considered to have a number of phases. 1 Planning Program management decides what software will be placed on a particular type of PC. 2 Development of image components Integration of software into foundation images modules and recovery components. 3 Testing image components Testing of integration software and various CTO options. 4 Releasing and delivering image components Sending components to production sites. 5 Support Supporting products via sustaining refurbish and repair.

Typically the most technically challenging stage of image life cycle is development while the most labor intensive is testing. In either case systems are frequently re imaged with new software. One of the primary reasons for reimaging is to test the various CTO options. Another reason is to return the system to an as shipped factory state.

Due to this need to frequently re image systems especially during testing the process of imaging has historically been a bottleneck due to the amount of time it required. A system is unusable until the imaging process is complete. Furthermore an engineer has to spend time to image the system by providing input or swapping CDs in what is typically a very time consuming process that is prone to errors. Thus the process of imaging a system requires the time of an engineer and results in the system being unusable while imaging takes place. It will be appreciated that many benefits can be derived from minimizing these times to reduce or eliminate the bottleneck.

There have been attempts at a solution but all fall short in terms of time requirements and flexibility.

Early imaging solutions were manual processes to image the systems using CDs that were called Install CDs . This process was relied upon before the development of the first modular imaging network download solution such as MINDS version 1. Install CDs typically utilized MS DOS as the operating system and were on CD as opposed to a faster medium wherein it commonly required an engineer about a half day to image a system. This process also had the additional cost and delay of having to replicate CDs before systems could be imaged increasing the bottleneck even further. Furthermore the selection of options was very complicated and limited.

At the time the first modular imaging network download solution i.e. MINDS version 1 was developed a new method was devised to image systems. This method provided a manual process that imaged a system over a local area network LAN as opposed to CDs. While MS DOS was still the operating system used this switching from CDs to a LAN decreased the total time to image a system from half a day to a roughly three hours. While the speed was increased the various CTO options were not available to test.

Furthermore since this process was performed manually there was a fundamental weakness in the imaging process making it difficult to image a system the same way twice. This lack of consistency arises from having to manually perform many steps in the imaging process and posed a significant problem. Eliminating the need to perform these manual steps would eliminate the inconsistency.

The MINDS version 1 imaging software was created to leverage the power of new advancements in PCs and resulted in a process that was able to image a system in about an hour while only requiring about ten minutes of engineering time which was a substantial improvement over the use of installation CDs. MINDS v1 also was configured to interact with a Software Management System SMS database to allow for testing of CTO options for the first time and had the ability to upload images to the LAN as well. The deployment of MINDS v1 meant that images were uploaded and downloaded in a consistent manner for the first time which also increased the accuracy of testing.

Although the current MINDS v1 program provided a number of advantages as would similar configuration programs used in the industry it still suffers from a number of shortcomings which reduce the flexibility of the download process and complicate user interaction.

Accordingly there is a need for enhanced software within a modular network download system which provides added flexibility and ease of use the present invention fulfills those needs as well as others.

The modular image network download system MINDS version 2 described by the present invention is a collection of software that downloads a software image to a target computer system from a storage area network SAN and or uploads an image from a target computer system to the SAN. The new download system is organized about a tree structured action environment which overcomes a number of drawbacks with previous download systems.

During the process of configuring a system an image is constructed in the system by writing the desktop management interface DMI setting up the hard drive downloading the foundation image installing the modules and cleaning up. Another purpose of the system allows a software image to be uploaded from a computer to the network for download access by other users. The MINDS software according to the present invention allows for ongoing re imaging with current or prior image sets.

Although the first MINDS system version 1 provided a number of advantages it was also found lacking in some other areas. In particular one problem that was identified was that the image sets for the download were substantially static wherein any changes to be made required that the programs be recompiled. The complex process to image a system has been rapidly evolving and the constant barrage of changes required more code changes to MINDS v1 than was anticipated at times changes were made daily. Ideally these software changes should be fully tested however time and resource constraints often make this impractical. Furthermore as rapid deployment of these changes was often crucial the practice of creating well engineered and efficient solutions could be compromised.

The implementation of MINDS v1 required that multiple parallel versions of the program be created with differing user flow and functionality for supporting the various user groups. These parallel versions resulted in increased time for software maintenance and increased time for deployment.

During the downloading process with the current modular download system MINDS v1 some of the files had to be transferred across the local area network several times leading to an increase in the total time required to image a system as well as increasing network loading. Parts of the imaging process were performed before all the user input was gathered resulting in more engineering time required to image a system than was necessary due to the fact that the user would have to wait for tasks such as transferring files between the network and target system before continuing to provide input. Another drawback was that the user could not go back and correct mistakes such as incorrect inputs or selections. The only way to correct mistakes was to restart the entire process therein losing the time and efforts already expended to get to the point in the process at which the error was made.

To overcome these drawbacks the MINDS v2 program was designed to allow the user to create images in response to actions and more particularly to action trees. The data for the process is retrieved from the software management system SMS which in the case of Sony VAIO environment is referred to known as the VSMS VAIO Software Management System . The MINDS system is preferably configured for operating from a subnet of a computer device manufacturer value added reseller integrator and so forth which are configured for system image loading. Only the image options available on the network are shown to the user when selecting a desired image configuration.

The actions and trees of actions utilized within MINDS allows a process to be put together from individual task actions . The order of the tasks can be readily altered with actions added or removed as desired. The internal action tree structure of MINDS allows the same executable to be executed in multiple steps of a given download process. All instances of the actions in the action class run asynchronously from the management class with actions sending messages back to the management class e.g. completed error warnings and so forth . Actions can be performed within a separate thread to reduce latency problems in particular if the action is protracted or intensive in nature.

In a preferred embodiment a single executable is controlled in MINDS v2 in response to external setting files as opposed to executing a number of separate executables. Unless otherwise specified the following descriptions of MINDS relate to MINDS version 2 according to the present invention.

Dynamic link libraries DLLs are used with a single MINDS executable which increases reliability and ease of testing. Unlike prior systems the new MINDS system can be configured at the point of use for a specific download process based on performing dynamic binding of actions prior to the download process being enacted. For example in adding a new action information is added to string tables and a list of actions with any user interaction being defined for the action. It should be readily appreciated that changing these bindings is not the same as editing code within the system. Thorough testing is warranted whenever coding changes are made as even a single errant line of code could make the program unworkable or worse yet create errored or misrepresentative images. However when only the bindings are changed there is no further need to test the software as each module being bound has already been thoroughly tested. Elimination of the testing step can save significant resources especially in an environment where configurations change often.

The use of action trees provide the mechanism for creating rapid change without recompiling the code. One or more action trees can be defined with each action tree typically comprising a plurality of tree nodes that each include one instance of an action. Each tree node includes an action as well as pointers defining a relationship within the tree. By way of example and not limitation one embodiment is described in which a child relationship and a next sibling relationship are supported by the pointers within the tree structure. Every node thus has two pointers one pointer directed deeper toward the next child node and one pointing sideways to the nearest sibling node. This arrangement of the tree simplifies tree traversal such as via recursion while conserving memory. The actions are controlled by a managing class and are launched as separate threads.

The code is divided into multiple layers for example user interfaces infrastructure or managing layer and the set of individual actions. The separation allows the individual actions to be reused in other applications while the user interface operations can be performed for a group of actions and or for separate actions. The managing layer directs the specific actions to be performed with information traversing from the managing layer to the trees and not the converse. It should be appreciated that the same managing code is used regardless of the actions being performed wherein upgrading and testing of the software is greatly simplified. For a given build a selection process takes place to determine which action tree is to be executed. For example the user interface can allow the user to select the action tree or to use a default if only one action tree is specified or in response to elapsing of a sufficient period of time without receiving a user response.

In one embodiment the functionality of the MINDS system is separated from the user interface to increase flexibility in the use of the MINDS core.

According to one mode of the system every action performed during the MINDS session is logged such as into VSMS preferably including date and time action person logged on and information about the systems configured.

The MINDS apparatus and method can be utilized in a variety of imaging applications such as for development work software distribution as an MIS management information services function and so forth. For example the modules can provide for selective imaging of software onto systems in response to special licensing information about the systems themselves department information and or other information available at the time of image creation.

The invention is amenable to being embodied in a number of ways including but not limited to the following descriptions.

According to one embodiment of the invention an apparatus is described for automated configuration of software program images on a computer comprising a a modular network downloading program configured for accessing image files from a network to configure program images on a computer b a plurality of action routines each configured for performing a specific operation within the modular network downloading program and c means for defining a tree of the action routines to be executed by the modular network downloading program.

The action routines are dynamically linked to the modular network downloading program wherein recoding compilation and testing is not required in order to modify the set of actions to be performed or to create new sets of actions associated with new modes or new PC configurations. It is preferred that the tree of action routines is created with textual configuration files. The modular network downloading program preferably comprises i a management layer configured for executing actions during traversal of the action tree and ii a user interface configured for controlling the operations of the management layer for the desired automated installation being performed.

Another embodiment of the invention can be described as an apparatus for automated configuration of software program images on a computer comprising a an action tree layer having a plurality of actions which may be dynamically linked and then executed during automated software installation b at least one action tree having a plurality of nodes each of which contain at least one pointer to an action from the action tree layer c a management layer configured for executing actions during traversal of the action tree and d a user interface configured for controlling the operations of the management layer for the desired automated installation being performed. The actions are functionally independent and can be reused within a given action tree and across different action trees. In addition actions can be launched within separate execution threads thereby allowing the system to respond quickly to the user while it is still in the midst of executing a lengthy action step.

The program images created by the MINDS software comprises either a single foundation image or more typically a combination of a single foundation image with at least one application program module. However it will be appreciated that the MINDS system can support more than one foundation image although currently this has little practical value.

Any desired number of different actions can be executed from within the action trees. By way of example the actions supported in this embodiment can be selected from the group of processing actions consisting essentially of creating an Mcode media uploading Mcode from the desktop management interface DMI of a system downloading a foundation image to a system hard drive downloading an application module image to a system hard drive uploading a foundation image from a system hard drive uploading an application module image from a system hard drive recover a foundation image from a recovery partition media version verification blitter assign target drive select base unit clean up image removing unnecessary files copy images to recovery partition copy modules to partition create image CRCs create Mcode floppy display splash screen display desktop management interface comparison eject media find correct target drive get hard drive information verify if on network subnet end logging session map network drives partition query partition hard drive restart restricted login return to main menu verify that image components exist and create thread. Any number of additional or different actions can be created to support image downloading or other activity according to an embodiment of the present invention.

According to another embodiment the invention may be described as a method of configuring computers with software program images comprising a creating and compiling a set of separately executable actions for performing image configuration actions on a computer b creating and compiling a management layer which executes actions defined within a selected action tree c creating and compiling a user interface layer which controls action tree selection and progress through the action tree d creating an action tree structure having a plurality of nodes which include pointers to actions and to other nodes in the action tree and e linking the actions management layer user interface and action tree into a program which executes actions defined in the action tree according to user input.

The tree structure preferably comprises nodes connected according to a child pointer relationship sibling pointer relationship or more preferably a combination of child and sibling pointer relationships with one another. The pointer relationships within the action tree preferably comprises a pointer to node locations in the action tree at which the pointer to the action is located. Preferably executed actions are tracked by the stack which provides a convenient mechanism to allow the user to return to any prior process step. The use of the stack is preferred over the inclusion of parent node pointers within the action tree.

A number of benefits are derived by implementing the new MINDS system including but not limited to the following.

An aspect of the invention is to provide a modular imaging network download system whose actions can be more readily adapted.

Another aspect of the invention is to provide a network download system in which actions can be added or removed from action trees which are dynamically linked.

Another aspect of the invention is to provide a network download system in which the user can back up to any prior action.

Another aspect of the invention is to provide a network download system in which the user can pause step through and resume process steps.

Another aspect of the invention is to provide a network download system having improved error handling.

Another aspect of the invention is to provide a network download system which can support more comprehensive user interfaces with an increased number of supportable options.

Another aspect of the invention is to provide a network download system which eliminates the need for multiple versions of the network download programming media i.e. CDs depending on department e.g. factory floor engineering service testing quality assurance and so forth .

Another aspect of the invention is to provide a network download system that interacts directly with the software management system SMS .

Another aspect of the invention is to provide a network download system which can support different types of images for example foundation images monolithic images base plus images and images using Ghost.

Another aspect of the invention is to provide a network download system which can be adapted to use a small operating system such as the scaled down pre installation version of Windows XP known as WinPE.

Another aspect of the invention is to provide a network download system which can only be executed from within a designated network subnet thus preventing misuse outside of the manufacturer facility.

Another aspect of the invention is to provide a network download system which copies a complete bill of materials BOM to the target system.

Another aspect of the invention is to provide a network download system which can utilize a system UUID as the default for creating Mcode floppies.

Another aspect of the invention is to provide a network download system which provides a separate selection at the main menu for creating Mcode floppies.

Another aspect of the invention is to provide a network download system that is capable of uploading images from existing systems.

Another aspect of the invention is to provide a network download system which supports a number of different operating modes such as unattended factory SKU selection advanced foundation image upload freestyle image upload and download and so forth.

Another aspect of the invention is to provide a network download system in which users must be authenticated prior to executing any actions.

Another aspect of the invention is to provide a network download system in which new action trees can be defined without recompiling and testing.

A still further aspect of the invention is to provide a network download system in which all user selections and interactions are performed prior to executing any actions.

Further aspects of the invention will be brought out in the following portions of the specification wherein the detailed description is for the purpose of fully disclosing preferred embodiments of the invention without placing limitations thereon.

Referring more specifically to the drawings for illustrative purposes the present invention is embodied in the apparatus generally shown in through . It will be appreciated that the apparatus may vary as to configuration and as to details of the parts and that the method may vary as to the specific steps and sequence without departing from the basic concepts as disclosed herein.

The modular imaging network download system referred to herein as MINDS is the Sony designed and developed solution for rapid deployment of the entire software aspect of a PC. Although the process of placing software on a particular PC appears simple those familiar with the process realize that the current process is neither simple static or speedy rapid . In order to meet goals with respect to simplicity speed flexibility overhead reduction and reliability the MINDS v2 system was a complete redesign from the ground up of the prior MINDS v1 modular download system. As a result the design does not have the limitations or problems of the previous solutions.

One goal of MINDS is to speed and simplify the process of incorporating software imaging changes in response to the application and or user choices. The ease and efficiency of performing these functions according to the invention can provide significant benefits throughout the PC development configuration quality assurance testing and maintenance processes. The MINDS v2 system according to the present invention is designed so that changes to the process can be implemented rapidly and reliably. The design makes extended use of object oriented programming principles of encapsulation inheritance and polymorphism. Thus the novel and important aspects of MINDS v2 hereinafter referred to simply as MINDS are not just what it does but also how it does it.

The primary component of an image is the foundation image . An image consists of one foundation image which contains the operating system drivers and applications and or utilities which are common to a particular set of hardware. Modules are additional pieces of software that are added to the hard drive in support of specific installed applications from the PC manufacturer or more typically from third party suppliers such as productivity suites i.e. an application containing a word processor spreadsheets presentation software browsers email programs sound card applications media PC applications and the like.

Any desired number of modules may be incorporated within the image represented as modules through . Recovery components allow the customer to recover the state of their PC as it was when it shipped from the factory. The recovery components for example may comprise a compressed and packaged set of the files referred to generally as PAC files which are needed to restore project specific applications on the hard drive after the foundation image is restored. The data file is a modular executable containing project specific configuration files necessary for recovery of applications using PAC files or modules. The WinPE file or similar is a small operating system which can be utilized in the restore process. It should be appreciated therefore that although the concept of placing various components together to create an image is simple the actual implementation is complex consisting of many steps.

Menu selection in node of can provide for any number of action tree selections typically associated with operating modes for the MINDS program. In addition the menu may be nested to provide selection over a larger number of modes for example with broad categories of operations on the first screen which lead to specific modes within the selected category. It should be appreciated that any form of selection front end may be utilized without departing from the teachings of the present invention.

In one embodiment of the invention MINDS v2 provides different modes of operation to eliminate the need for parallel versions that were required by MINDS v1. These various modes provide fully autonomous operation or allow for a user to select how much control they want to exercise during the imaging process. The modes with more user control help to aid in debugging and troubleshooting while those with less control are more suited to automated processes and use in areas such as manufacturing where it is very important to control hard drive imaging. Additionally these different modes of operation allow for different processes such as imaging in the factory to be emulated. When the factory process is emulated the same data source is relied upon that the factory uses which results in more accurate testing and allows for certain types of errors to be caught before reaching the factory.

One mode of operation is referred to herein as Unattended Mode that automatically starts if the user does not interact with MINDS after loading thus bypassing node of . This mode of operation performs the entire imaging process with no user input other than the initial loading of MINDS. To obtain what image components to use unique image component identifiers are retrieved from the Desktop Management Interface DMI of a given system and matched with project information in VSMS. The value of this mode of operation is that it requires only a few seconds of engineering time for the engineer to download an image. The decrease in average engineering time especially in unattended mode is an important benefit of MINDS v2. Consequently hundreds of engineering man hours can be saved every year. In addition the systems are available sooner for testing since the total imaging time is also decreased which equates to tangible savings.

The complex process of imaging a system is constantly changing and MINDS v2 was designed with this reality in mind. The code is structured in such a way that changes can be implemented rapidly and reliably. Typically changing the mix of image sets and configuration to be downloaded does not require recompiling the MINDS code. In addition the design of MINDS is extremely flexible allowing rapid changes and maintenance.

It was found during the use of the earlier MINDS v1 that the imaging process is continuously evolving and requires frequent software changes in the image download program to support new systems and new system configuration changes or options. It should be appreciated that the MINDS functionality in many cases must be changed if any new foundation image is needed such as are associated with new hardware or if any new software becomes available for the system. Thus the goals in the design of MINDS v2 were to make this maintenance easy and quick as well as reliable.

A fundamental concept in MINDS v2 is the concept of actions and action trees. Actions are functionally independent pieces of code that perform one task such as partitioning the hard drive prompting the user for certain input or reading the DMI. Since each action preferably performs a single task i.e. or less preferably a collection of closely related elements the behavior of each action is kept separate from other actions and coupling between them is minimized. Having the actions perform atomic operations provides significant reduction in coupling which is a key objective of modern software engineering.

Inheriting aspects of the abstract action class are a partitioned HD class of actions a GetModules action class and a GetDMI class of actions . Partition action class is configured for performing HD cleaning and partitioning operations. GetModules action class obtains all versions of all modules for a given system. The GetDMI action class reads the DMI that is written to the system. An additional action class GetSKUModules is shown derived from the GetModules class for obtaining currently assigned versions of modules for a given system. It should be appreciated that the above action classes are shown by way of example only there may be defined any desired number of classes within the hierarchy without departing from the teachings herein. The class hierarchy can be defined with few or many layers depending on what elements the actions have in common and the extent to which the programmer wishes to capitalize on that inheritance.

It should be appreciated that GUI layer can be less preferable made optional with its functionality being supplied externally to the MINDS systems or from within the individual actions. This embodiment illustrates components of the GUI comprising a status window GUI main menu GUI and action n GUI . GUI layer is associated with manager layer although it may also be coupled to other executables to provide a synergy between strictly imaging of systems and other related operations.

Between the GUI layer and management layer is shown activities exemplified as a user controlling the manager through a status window and user input being received at block .

The middle layer is the managing layer which contains the manager itself the action library and the action tree. The manager is the executable that directly or indirectly controls all the other parts of the MINDS system including actions action tree nodes in the action tree and the action library.

The manager has an instance of an action tree which is created by the action library from an editable text file on request.

The manager controls the sequencing of actions within the action trees and ties that in with user interaction. When an action successfully finishes it signals the manager of that condition. In this way the manager can determine if a leaf in the action tree has been reached if there are more actions to execute or if the action tree has finished executing. If there are still actions to execute then the manager normally signals back to the tree to execute the next action. After an action has been told to run by the manager the manager will pend waiting for the signal that the action has finished.

The example embodiment of manager is shown with an action manager routine which can control both action tree building and action tree execution. Action tree building is shown as per block from actions within an action library to form an action tree for being executed.

Action tree execution is shown starting at block in which the manager is initialized to a given tree and executes the action tree which has been built as per block . As long as at least one node of the action tree remains as determined by block actions are selected as per block and each node performs a single action whose code resides in action layer . The manager also is shown interfacing user interface layer GUI through user input block with the actions depicted as action n at block .

The lowest layer is the action layer which contains the precompiled actions depicted as action Alpha Bravo . . . through action n . It should be appreciated that each action within action layer preferably comprises a single atomic action. The action tree has one or more nodes with each node in the action tree pointing to an instance of one action. It should be remembered that each separate action may also have its own GUI.

These various GUIs preferably provide the interface for the user to communicate with the MINDS system.

As seen in the above figure multithreading is another software engineering concept that is utilized by MINDS. If an action is going to perform an intensive task such as downloading a foundation image a thread is launched to perform the intensive task. By launching a separate thread the action is free to respond to other requests. In the embodiment MINDS does not use multithreading of actions but executes actions asynchronously. The principle purpose of the multithreading performed within MINDS is for the benefit of the user experience wherein the system is made more responsive to the user. While MINDS is executing an action such as copying files from the network using one thread the user can still view status information and start or stop the process because that uses another thread. Conversely if MINDS had used only a single thread then the entire program and the monitor display would be locked up and not allow any user interaction or progress display when copying files from the network. When a thread is finished a message is sent back to the manager notifying it that the thread has completed. The end result is that the system is more responsive to conditions. It should be appreciated however that similar asynchronicity of user action can be obtained with true multithreading multitasking interrupts or other mechanisms known to those of ordinary skill in the art.

Instances of actions are grouped into logical trees that are called action trees. Particular modes of operation in MINDS correspond to distinct trees of actions. This means that a particular imaging process becomes either a separate action tree or a specific path through an action tree. The user selects which mode of operation to perform from a main menu that appears when the execution of MINDS begins. If no selection is made within a given period of time i.e. three minutes then the default mode of operation is executed. The default is typically an unattended mode which allows performing a common operation repeatedly.

Each action in the action tree designates the exact number of child actions it can have in the action tree. These child actions are ordered and assigned sequential numbers. When an action is finished it is queried to determine which child or sibling action should be run next. This query is replied with a response that says which action to run next. It should be noted that in the preferred embodiment actions do not specify a specific action to run next only which number wherein the actions remain independent of one another.

For example consider that case in which there is a message box that is a dialog with two buttons yes and no. Clicking on one of these two buttons causes the action to finish. When the action tree queries the message box that has finished about which child action to run next it only replies with run child 1 if yes was clicked or run child 2 if no was clicked. The action does not reply with run the module copy action next . As a result any action can be designated as the child of any other action as there is not a set ordering or binding of certain actions together in a particular hierarchy in the action tree. It will be understood that the action tree itself contains all references to specific actions while each of the actions responds back to the manager in a generic manner in the above example providing a number which is interpreted in relation to the action tree and the pointers defined therein.

Each action is independent of other actions but the actions communicate in order to relay information between actions such as user input. For example one action may ask the user which modules they would like to use for configured to order CTO imaging. The user response must later be conveyed to the action that copies the modules. According to one embodiment the solution to providing this communications is via the MINDS setup class. This setup class is a container for all information that might have to be relayed from one class to another. The action tree passes the MINDS setup class to each action as it is run.

These trees of actions are stored in text files that MINDS reads at run time. It should be recognized that the tree contains pointers to actions and to other tree nodes whereas neither the actions themselves nor the management layer itself directly references actions. By storing the various trees in these files the contents and ordering of the trees can be altered without the need to recompile any code. This allows for quick changes to be made to MINDS as long as the functionality of the actions does not have to be modified. The assembled trees are preferably checked for logical correctness prior to execution wherein logically incorrect trees are preferably disallowed.

It will be recognized that the action tree nodes preferably do not contain pointers up the tree to parents. The stack mechanism as described above is utilized to provide movement back up the tree to previously executed actions. The stack contains the name of the action and a pointer to that instance of that particular action it will be remembered that an action may have many instances within a given action tree. The current action is always at the top of the stack and these pointers can be popped from the stack to return to any prior action. An additional benefit of the stack mechanism is that the user can return to any prior action step while retaining the parameters and configuration that was present when that step was last reached as this data can be retained in the stack as part of the history.

When coding new actions a number of steps must be performed according to this example embodiment although other embodiments may not necessarily require these steps. In this example embodiment Start SetNumChoices and Terminate should all be virtual functions in the derived classes. In this way dynamic binding takes place and the desired code is executed at run time. The following is a basic procedure for adding a new action to MINDS.

If the action is going to perform an intensive function such as generating CRCs or blittering then the intensive action should be launched as a new thread. In this case WaitForSingleObject should not be utilized as it would make MINDS appear to hang because the application thread is spending its time waiting and cannot respond to other events. Instead the thread should pass a message back to the action when it is finished so that other messages can be handled while waiting for completion of thread execution.

When a mode of operation is selected the corresponding text file that specifies the action tree is passed to the action library. The library checks to make sure that the tree is logically correct if it is not then MINDS displays an error and exits. If the tree is logically correct then the action library creates the action tree by dynamically allocating its components. As a consequence the action library not only ensures that trees are logically correct but it is also preferably responsible for the allocation and de allocation of the components that make up the action tree as well. Thus the action trees that MINDS uses are created dynamically at run time on the heap.

The system provides a number of checks during building of an action tree as well as during execution. Non critical errors such as warnings are communicated to the user but execution continues. A critical error is defined as an error that occurs when an action is running that prevents the action from successfully completing its task.

To use the MINDS system according to an embodiment of the invention a user powers on a system and boots it up such as off of a MINDS boot CD. The MINDS boot CD preferably boots into the WinPE operating system or any other desired OS that is contained on the CD. After the user provides all of the necessary input the imaging process begins. At this point since no more user input is required the engineer technician or other user need not remain with the system and can leave to perform other activities while the selected imaging process is carried out. When the imaging process begins the hard drive is configured and the necessary files loaded onto the system. The system then restarts and boots into the operating system that was recently loaded onto the hard drive. MINDS then installs the modules cleans up the system and shuts down. After shutting down the system is completely imaged and is ready for use.

To assure that the user is truly freed to perform other tasks one optional aspect of the system provides a mechanism for the user to check the status of the imaging process on the given PC over the company network wherein the user need not physically return to determine if the imaging process has been successfully completed or to determine that a fatal error has arisen. Alternatively MINDS can autonomously generate a message to the user such as an email message in response to imaging errors or completion.

It should be noted that when MINDS operates under WinPE programs written in .NET and programs under Visual Basic 6.0 will not run. As a consequence MINDS was coded in Microsoft Visual C 6.0 Service Pack 6.

The use of the C language also provides the necessary object oriented programming features necessary to implement the design of MINDS v2.

The complex source code of MINDS is divided for example an implementation of the presently described embodiment involves over two hundred fifty 250 files. To isolate changes and make the source code easier to manage these source code files are encapsulated into six projects that each equate to one executable or dynamically linked library DLL . This separation of code into the six projects has the added benefit of allowing the code to be compiled more rapidly since only one project normally has to be recompiled when changes are made.

The classic life cycle paradigm for software engineering was used for MINDS. Accordingly the entire design of MINDS was documented before any coding began. This allowed for design flaws to be identified and fixed before any coding took place. Another benefit is that writing the code for MINDS was a rapid process since all design issues had already been solved in the design phase.

According to an embodiment of the invention there are several GUIs that the user interacts with. The manager GUI is constantly present and allows for the user to control MINDS. The manager is the GUI that allows the user to pause the imaging process or go back to previous steps which was not possible in earlier MINDS or other imaging systems. Additionally the user can open a command prompt window view the contents of the MINDS setup class or view the user guide. It should also be appreciated that individual actions may also have GUIs.

By way of example and not limitation in the current system implementation there are sixty nine 69 actions available for use in MINDS. Trees of actions are pieced together from these actions. Modes of operation typically correspond to distinct trees of actions and the mode of operation is selected from the main menu GUI that first appears when MINDS launches. There are an infinite number of possible modes of operation but in practice only a few are implemented. A few of the modes of operation require a user name and password to authorize the user for that mode these modes are referred to as restricted modes of operation. The implemented modes of operation according to this current implementation contain between nine and forty one nodes and thus instances of actions. The fact that an imaging process contains forty one actions illustrates the fact that imaging is not a simple process.

Although not shown here it should be appreciated that certain modes may not be accessible or even listed depending on the authorization level of the user the subnet onto which the system is operating and other limiting criterion. In this embodiment the user is required to log in with their SMS or VSMS at Sony user name and password. Attempting to perform an action for which the user lacks authority can generate an error. Alternatively if the user does not have access to perform a given action that list item is not selectable and is preferably displayed to indicate that fact such as displayed in a faint outline shaded or not at all.

It should be appreciated that MINDS can support any number of modes of imaging operations including by way of example and not limitation the modes shown in the figure. 1 Unattended Mode this is the default mode of operation of MINDS v2 that is run if the user does not make an alternate selection within three minutes of starting. In this mode the system is imaged with the components identified in VSMS by the DMI of the given system. 2 Factory Mode this is similar to unattended mode except the factory data source is used instead of VSMS. 3 SKU Selection this mode allows for the user to pick components based on a selected project. 4 Advanced Mode similar to SKU Selection except that the user is given more options including the ability to select older versions of some components. This mode provides the user with the most customization out of all the modes of operation. 5 Freestyle Download A restricted mode of operation that allows the user to download a foundation image to a system without carrying out the entire imaging process. 6 Monolithic Image Download a restricted mode of operation similar to SKU Selection that permits users more control over the imaging process. 7 Upload Image A restricted mode of operation that allows foundation images to be captured from a system and uploaded to the image storage server. The image is cleaned up and image identifiers set before uploading takes place. 8 Freestyle Upload this is a restricted mode of operation that allows images to be uploaded anywhere on the local area network. These images are unaltered unlike images uploaded to the server using Upload Image mode. 9 Create Mcode Floppy this mode allows users to create Mcode floppies which write the DMI of a system. It should be appreciated that other modes can be created to perform any desired image related functionality.

An Exit MINDS button is shown allowing the user to exit the application and restart the system. A Main Menu button allows the user to discard current activity preferably once paused and to return back to the main menu for selecting another mode of operation or restarting the presently selected mode . Selecting Main Menu in this embodiment discards any data currently in use or alternatively stores it away so that it does not interfere with a new mode and configuration. The Main Menu selection allows the MINDS system to start over without a reboot. A Step button allows the user to step through the steps of the process such as the actions within an action tree. A step can only be executed when the system is paused such as in response to the Break command or a previous Step command. A Help button can bring up information about the modes and other selections available to the user.

A status line displays the current mode of operation. A history status area displays a log of what the actions have performed such as displaying one line for each action presuming atomic actions. According to this embodiment of the invention the last item in the list is the most recent action performed. When the process is paused the user can select any of these steps to jump back to that previous step for example by double clicking the desired list element. Another status line is shown displaying the current operation being performed within the action tree.

A debug screen is shown allowing the user additional control over the image process. In this example the user can load setup from the Ini file save setup information from Ini get setup information from Pacific Ini clear the setup and bring up the command prompt window .

A time status display area is shown which displays the current system time the time elapsed since MINDS began execution and optionally other time related aspects such as the time for a given step of the process and so forth.

A base unit must be selected when operating in certain operating modes such as SKU selection Advance mode Image Upload and Create Mcode Floppy. By way of example and not limitation the base unit selection depends on the mode of operation which is briefly described. In SKU mode the user is only allowed to select the currently assigned image for a base unit if it exists on the network. If the user attempts to select a project for which no image is found then they are given a warning that the image is not available and directed to select another image. In Advance mode the user can select any image that was assigned to a base unit so long as it is available on the network. In Image Upload mode the user is allowed to pick any image that was ever assigned to a project. Since the user is uploading an image from a target system it will be appreciated that the image for the base unit need not exist on the network prior to the upload. In the Create Mcode Floppy mode the user is allowed to pick any image that was ever assigned to a project.

Selecting a base unit consists of making a selection or accepting a default in a number of fields for this embodiment those fields are exemplified as project base unit model number Pcode sales type component BLID and software release . The pull down menus are designed to let the user drill down to choose a specific image for download. So the selection user interface UI starts at the highest level with the model number name Base Unit i.e. PCG S260 and works its way down until the unit is sufficiently specified. It should be appreciated that the size and composure of these fields are described for an embodiment of the invention wherein one of ordinary skill in the art can readily modify these fields without inventive efforts the resultant embodiment still remaining within the teachings of the present invention.

Pcode is a subcategory of PC i.e. VAIO model and in this embodiment comprises a four digit alpha numeric specifier. By way of example two different Pcodes may exist for model number PCG S260 such as S001 for a PCG S260 with no Wireless LAN Module and the second Pcode S002 for a PCG S260 with a wireless LAN module. The model number and Pcode fields are both preferably written to the DMI area of the BIOS for use during imaging.

Sales Type is a category that can be assigned in the SMS database in order to specify different software modules per sales channel.

For example a PC model with a sales type of retail configured to order CTO may have a completely different list of optional software imaged to it in relation to a PC model with the sales type set for business to business B2B . In this case the sales type CTO would be offered through E Solutions to home users which generally contains games and music software whereas the B2B type would be offered for bulk business sales channels and may contain productivity software. In this manner the manufacturer can offer various applications toward a specific market segment e.g. home business gamers multimedia CAD servers and so forth . Thus different sales types can further refine the characteristics of a PC without altering the model number or Pcode.

Component is an internal testing option. This option can provide information for selecting what is delivered for the system for example whether a monolithic image is to be delivered where the software modules have already been assembled into one complete image. The component selection generally allows a department such as testing to select which image set to use.

BLID stands for BIOS LOCK ID and is a string which identifies a specific set of images for a PC model. For example a Windows XP HE Home Edition image would have a different BLID than a Windows XP Pro Professional image. In some cases a PC that ships with XP HE might have a different model name or Pcode than a PC having the same hardware but which ships with MS XP Pro. However since in some cases the model name and Pcode are the same this option allows the manufacturer control this second case particularly when the model numbers and assignments are performed across interdisciplinary areas of a manufacturer.

The BLID is also preferably used for protecting the shipping image from piracy. If a user launches the system recovery process and the BLID in the recovery image does not match the BLID that the manufacturer places in the DMI section of the BIOS the recovery process halts and a warning message is displayed to the user. This safeguard prevents for example a user that purchased a PC with XP HE from trying to use the recovery media for the same model PC that shipped with XP Pro.

Software release allows selecting different iterations of the same image. It is not uncommon in development cycles today for a manufacturer or department of a manufacturer to have two or more iterations of the same image as defects are fixed and newer versions are released. The preferred default choice for this field is the latest tested release assigned to the base unit however the pull down menu allows the default to be overridden during testing for selecting a different image release.

Accordingly it should be recognized that a determination of which image is to be downloaded by the MINDS system can be reached in response to allowing the user to set one or more parameters or accepting default selections.

Once entries have been selected and or entered textually then the base unit screen may appear as in wherein the user is prompted to click the OK button to accept the selections. It should be appreciated that the base unit screen is amenable to any desired form of default element selections without departing from this aspect of the invention. For example fields can be populated in a new screen according to most recent activity patterns of use and so forth. Once satisfied with the selections the user can press the OK button to perform the base unit selection.

It should be recognized that the imaging process is constantly evolving and as a result MINDS will be frequently updated to keep synchronized with those changes. MINDS is also occasionally updated to accommodate new features on the target computer systems RAID is one example. One of the key priorities when making these updates is to keep the design documentation up to date as well. This is one of the primary maintenance principles of modern software engineering.

The task of re imaging systems is carried out frequently during the development and testing of most computer based systems. The MINDS system has several innovative aspects that in combination can provide substantial returns on investment from reducing support overhead man hours reduced time delays when imaging reduced software development costs and by providing an ability to readily support a wide range of image sets. One important innovation described is the use of actions within MINDS similar to interchangeable building blocks assembled to form a tree of actions defining a desired process. This aspect of the invention alters how new image processes are created. It will be appreciated that what was before a software development exercise is converted under MINDS into a building block assembly process much as one might build any desired small structure with a sufficient supply of LEGO blocks. The flexible framework of MINDS can be utilized in many other types of processes besides software imaging without departing from the teachings of the present invention.

Although the description above contains many details these should not be construed as limiting the scope of the invention but as merely providing illustrations of some of the presently preferred embodiments of this invention. Therefore it will be appreciated that the scope of the present invention fully encompasses other embodiments which may become obvious to those skilled in the art and that the scope of the present invention is accordingly to be limited by nothing other than the appended claims in which reference to an element in the singular is not intended to mean one and only one unless explicitly so stated but rather one or more. All structural and functional equivalents to the elements of the above described preferred embodiment that are known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the present claims. Moreover it is not necessary for a device or method to address each and every problem sought to be solved by the present invention for it to be encompassed by the present claims. Furthermore no element component or method step in the present disclosure is intended to be dedicated to the public regardless of whether the element component or method step is explicitly recited in the claims. No claim element herein is to be construed under the provisions of 35 U.S.C. 112 sixth paragraph unless the element is expressly recited using the phrase means for. 

