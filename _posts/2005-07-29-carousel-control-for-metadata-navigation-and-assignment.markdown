---

title: Carousel control for metadata navigation and assignment
abstract: A property tree user interface permits user assignment of values to metadata properties and user navigation of data, within a system that includes a data storage subsystem in which data items are organized and queried by way of properties. The property tree includes nodes that expose properties of data items. A user may interact with the property tree in order to effect an assignment of a property, in which case the value associated with the property in the data storage subsystem is modified. The property tree may also display nodes that represent folders within a hierarchical file system, nodes that represent properties with inherent hierarchy, and nodes that represent user-defined hierarchical properties, and the property tree may display such nodes in a carousel control.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108430&OS=08108430&RS=08108430
owner: Microsoft Corporation
number: 08108430
owner_city: Redmond
owner_country: US
publication_date: 20050729
---
The present application is a continuation in part of co pending application Ser. No. 10 837 487 filed Apr. 30 2004 and entitled Property Tree for Metadata Navigation and Assignment which is herein incorporated by reference.

Today most computer users interact with the machine by way of a graphical user interface which by exploiting the computer s visual display and intuitive input devices such as the mouse mediates access to the operating system application programs and stored data. The standard approach to the design of the user interface has relied on a simple visual metaphor in which data files are contained in folders organized within a hierarchically structured file system tree. The user interface provides controls that permit the user to navigate through the file system tree in order to locate and act upon data. Although such systems are easier to use than the command line shell interfaces that preceded them they generally have not provided a greater degree of abstraction from the underlying physical storage of data than was available in earlier systems.

The real world familiarity of the file folder model of storage contributed to its acceptance and popularity among computer users but such user interfaces were also successful because users typically stored a relatively small number of data files on their machines. The ease with which computer systems can now be used coupled with the availability of massive amounts of inexpensive disk storage have to some degree made the standard data storage interface a victim of its own success. Computers are now being used to store large quantities of personal data in a variety of different formats for use with many different applications. It is not uncommon for a user to have hundreds or thousands of text documents photographs audio files and other data records stored across multiple hard disks shared networks and other storage media. Given such a development drawbacks to the conventional folder tree storage model have become evident to computer users.

For the present day user the conventional storage model is undesirably and inflexibly one dimensional. Items of data exist in one location and relate to other files in one way by their relative position within the hierarchical folder tree which ignores the many logical relationships files may have to one another. In previous versions of Microsoft Windows files are associated with a limited number of properties over which the user has limited control and those properties are accessible through a control that is difficult to locate and use. In other systems file metadata may be limited to the file name and the user s informal knowledge of the file s type. Such limitations have made it difficult for users to organize their data in new ways based on the content and use of the data. As a result the growth in the amount of data stored by users has made searching for data less efficient and more cumbersome.

Particular applications have offered domain specific solutions to the problem of user data management. Two examples involve applications for storing and organizing digital photograph files. The Digital Image Library in Microsoft Digital Image Suite 9.0 includes a Keyword Painter control that enables the user to easily organize and subsequently locate images stored in disparate locations throughout the file system. The user clicks on identifying keywords of the user s own choosing and then clicks on thumbnail images of pictures to which the selected keywords are to be assigned. The user can now filter the view of the library of pictures by particular keywords. Adobe Photoshop Album 2.0 permits the user to associate content descriptive tags with pictures by drag drop actions on thumbnail images. The user can then quickly search the collection of pictures by subject matter using one or more tags.

Another example is the Grand Central e mail interface a project of Microsoft Research. Hierarchical properties are used to categorize e mail messages. An arbitrary number of categories can be assigned by way of the user interface. The categories facilitate searching for messages and the organization of messages into conversational threads.

Disclosed features of the Microsoft Windows Code Named Longhorn platform point to a more comprehensive solution. A storage subsystem WinFS relies on an extensible scheme of metadata properties to enable the user to search for organize and share data. The basic unit of data container is the item which is associated with multiple properties set to specific values. Items are organized by properties most relevant to the user at a particular time. Powerful querying capabilities over the store of items are provided. Users can thus find data more quickly and can organize and operate upon data more efficiently.

Prior to the present invention however there has been no general mechanism for metadata assignment and metadata based navigation comparable in ease and generality of use to such conventional storage system interfaces as the file system Explorer tree of previous versions of Microsoft Windows which permit the user to navigate to a folder and to modify its contents in intuitive ways such as by dragging and dropping with the mouse.

The following represents a simplified summary of some embodiments of the invention in order to provide a basic understanding of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key or critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some embodiments of the invention in simplified form as a prelude to the more detailed description that is presented below.

Features may be practiced in the context of a computer system having a graphical user interface or another kind of user interface and a data storage subsystem in which data items are organized and queried by way of metadata properties. In accordance with one embodiment a computer implemented method of assigning values to properties is provided. The method includes displaying a property tree having nodes that expose properties of a set of data items where the property tree utilizes a carousel control for displaying subnodes parented by a node in the tree.

In some aspects of the aforementioned embodiments the property tree also provides nodes that represent folders within a hierarchical file system in addition to nodes that represent metadata properties. In other aspects of these embodiments the property tree has nodes that represent properties with inherent hierarchy and nodes that represent user defined hierarchical properties.

According to an aspect of the invention software instructions control a carousel control within a menu displayed on a computer display device. The carousel control displays a list of elements in a display area that can display a certain number of elements at a time. An input handler associated with the carousel control handles user input for scrolling the list elements displayed in the display area based on each element s order within the list such that a user can traverse the list. For example the carousel control may store the list elements in a circular list ordered by some criteria and a user can circle through the list as desired within the display area.

The invention may be implemented by way of software hardware or a combination thereof. The invention may be implemented for example within an operating system shell or within a running application program. It is contemplated that the invention may be embodied in one or more computer readable media.

The present invention includes a tree shaped set of user interface controls that exposes properties of data items which will henceforth be referred to as the ProperTree. The ProperTree provides two principal functions. First the ProperTree enables the user to navigate across the virtual namespace of the user s data. Navigation is discussed further below. Second the ProperTree permits the user to quickly and easily assign values to data item properties by adding or removing metadata with respect to property nodes exposed by the ProperTree. The user can add metadata to and remove metadata from many nodes at the same time. Because the ProperTree mimics the traditional folder tree control in certain respects it enables users familiar with the conventional approach to storing organizing and retrieving their data to work comfortably in a system with a radically different approach to storage that relies upon an extensible scheme of metadata properties and querying.

In one embodiment the ProperTree control is displayed by default in a window within a pane to the left of a pane displaying a list view of items. When the user selects an item the user can click on a property node exposed by the ProperTree to expand the node in place the node can be collapsed if it is already expanded. A small widget such as one displaying or may be used to indicate whether a node is collapsed or expanded. The expansion of a node shows the property values set for the currently selected item as well as additional values that can be applied. In an embodiment a most frequently used subset of values across a set of items is shown the user can expand the list of values for the expanded property fully by for example clicking on a button. Having expanded a property node in the ProperTree the user can change the property values the changes are immediately applied to the item or items that have been selected by the user. The system may assign initial values to properties based on most frequently used values.

Properties are displayed in the ProperTree in a manner that is appropriate to their type. Certain properties have only one value with respect to an item. A photograph for example might be either Black White or Color with users being permitted to change this property. The user interface for changing the value may in such a case comprise a clickable radio button adjacent to each possible value. Other properties may be capable of having multiple values with respect to an item. For example a document may have multiple authors. In this case the user interface may comprise a checkbox adjacent to each possible value with the user being permitted to check one or more boxes as desired. Richer properties are also supported appropriately. For example a rich calendar control is shown for dates for ratings a five star control may be shown.

Properties that cannot be changed by the user such as the date on which a document is written do not have value selection controls in the tree and the nodes for such properties can only be used for navigation. The system is extensible with respect to adding new controls appropriate to particular data types.

For any given property or property value in the ProperTree the user can navigate to a view of storage that is pivoted to that property or value. Thus navigation does not simply involve taking the user to a single location unlike navigation using a conventional folder tree. Rather navigation by way of the ProperTree causes all relevant data to be rearranged into a new structure through which the user can browse. For example the user can use the ProperTree to query storage for all documents having a particular Author value. The list view then changes to show documents meeting that criterion. Alternatively the user can use the ProperTree to display all document authors. This causes a stacked view of authors within which the user can then browse.

Turning now to the drawings are screenshots of an exemplary user interface for viewing and organizing stored music data incorporated an embodiment of the present invention. On the right is a list view and on the left is a ProperTree property tree . In an embodiment similar interfaces are provided for documents messages video files and contacts with the ProperTree in each case being specifically adapted for the kind of data item that is presented. Such content oriented interfaces may be provided with an operating system product as a component of the shell. Additionally in an embodiment of the invention the ProperTree is a control made available through the Common File Dialog in Microsoft Windows for application developers to reuse in their own applications. As noted above the ProperTree is displayed on the left side of the window by default.

The ProperTree includes a header which in the depicted case is titled Music Links . Below the header are the nodes of the ProperTree . The nodes labeled Rating Artist and Genre represent single properties. Certain other nodes exposed by the tree All Songs Online Store and Recently Played are constructs that represent a query that searches for particular items in the list view that satisfy conditions of the query. The nodes iPod and Playlists which represent static lists are similar. If the user selects All Songs for example all the songs in the list view are displayed. If the user selects Recently Played however only songs that have recently been played are shown.

Turning to the effect of an initial user interaction with the ProperTree is shown. Expand widgets are displayed next to the expandable property nodes respectively when the user hovers in the area of the ProperTree with the mouse as indicated by the arrow cursor . The property nodes can be expanded by the user by clicking on the displayed in the widgets .

Turning to there is shown the state of the ProperTree after the user hovers with the mouse over the text label of one of the property nodes in this case Artists as indicated by the hand shaped cursor . If the user double clicks on the text label of the property node the list view will be updated so that it is organized by the particular property that is selected and the node will expand. In there is shown the state of the ProperTree when the user hovers with the mouse over the of the expand widget associated with the Artists node as indicated by the mouse arrow cursor .

Turning to there is shown the state of the ProperTree after the Artists node is expanded. The Artists text label is rendered in boldface and the expand widget is replaced by a collapse widget . A list of five Artists values is displayed representing the most frequently used and most recently used values below which is an overflow arrow button .

Returning briefly to it may be noted that a property value name that is too long to display in full is truncated with an ellipsis or similar symbol. In the effect of hovering over such a truncated value is shown as indicated by the mouse hand shaped cursor . A pop up element displays the full name of the value.

Turning to there is shown the effect of selecting an item in the list view . Checkboxes are immediately displayed next to each value in the expanded property node . The checkboxes serve as controls by means of which metadata can be assigned to the selected item. In this case the user has selected the song item Encounter . The checkbox is checked indicating that the existing Artist value for that item is 50 Cent. The user can check a different box to change the value by assigning a different artist name to the song item. Similarly checkboxes can be used in a list view of photographs to assign keywords to a selected photograph item. shows the effect of the user clicking on the overflow arrow button when an item in the list view has been selected as indicated by the mouse arrow cursor . The pop up menu is displayed each value in the complete list now having a checkbox in front of it.

In general a property node in the ProperTree may have a context menu that is specific to that node. An example is shown in where the context menu for the node Artists is displayed. The top element in the menu is Show All Music By Artist . The effect of selecting this task is identical to the navigation effect of clicking on the Artists label as described above. Add new Artist provides an entry point for the user to add additional values to the list of values for this property node. Rename can be used to rename the property. In this case Rename is grayed out because Artists is a property that end users cannot rename. A user can devise new properties which can be made renameable. The Move Up and Move Down menu elements can be used to organize the order of property nodes in the ProperTree .

Turning to there is shown the state of the ProperTree after the user selects the label of the Recently played node as indicated by the mouse arrow cursor . As noted above this node is not a single property but represents a query. The user can pivot the list view by selecting the glyph to the left of the node label as explained above. As shown in selecting the node label displays a context menu . Selecting the top element of the context menu Show Recently Played has the same navigation effect as selecting the glyph . Below this are two specific node tasks not further specified here . The remainder of the context menu is similar to the context menu for the property node Artists in . The user can select Delete to delete an item Rename to rename it and Move Up and Move Down to reorder it in the ProperTree .

Turning to there is shown the state of the ProperTree after the user clicks on the Music Links header as indicated by the mouse arrow cursor . A command menu is displayed permitting the user to perform certain tasks applicable to the entire tree control . By selecting the task Add Current Page to Music Links the user can define new nodes to add to the tree . By selecting Sort Music Links by the user can sort the nodes in a desired order. The user can hide the entire tree from view by selecting Hide Pane . By selecting the entry point at the bottom of the menu Add Remove MusicLinks the user causes a dialog to be brought up allowing the user to select among different properties to add or remove properties to or from the ProperTree .

Similarly to the conventional folder tree control the ProperTree supports drag and drop semantics but the behavior is different. An item in the list view can be dragged and dropped onto a node in the ProperTree but the item does not disappear from the list view the behavior is more like tagging information to a file. A drag drop action is shown in . The user clicks on an item in the list view here the item corresponding to the song Encounter and drags it to the Artists node in the ProperTree as indicated by the mouse arrow cursor and the blurred selected item image . In this case Artists is not itself an assignable property. Turning to if the user hovers over the Artists node for a sufficient length of time the node expands permitting the user to drop the dragged item onto the name of a displayed artist. In this case the user is dropping the item onto the Artists value Kruder Dorfineister and the checkbox associated with that value is highlighted. This is thus another mechanism by which a user can assign metadata to items.

In one embodiment of the invention the ProperTree is integrated with a conventional folder tree control. In this embodiment the tree has nodes that represent properties and expand to reveal values as well as nodes that represent folders located in the hierarchical file system. In this embodiment the advantages of both the hierarchical model and the metadata model of storage are present. The tree may additionally include nodes representing other constructs such as a link to a web page.

In an embodiment the ProperTree supports hierarchical properties properties that inherently have hierarchy. For example a date property may be represented in the tree as the hierarchy 

In addition in an embodiment the ProperTree supports free form hierarchical properties that are set by the user.

With reference to the property tree may use a carousel control to display subnodes under any parent node within the property tree. Carousel control may be used e.g. to display subnodes when a limited amount of vertical display screen real estate space is available or to limit a single node or nodes from using all the available vertical display screen space for the display of that node s respective subnodes. The carousel control is useful e.g. to scroll large sets of subnodes in a limited amount of space in which the entire set of subnodes cannot all be displayed simultaneously.

Carousel control includes a circular list of all elements and within the carousel control and a corresponding display area . The circular list may be organized according to some predefined criteria or metadata for example alphabetical chronological etc. Display area displays one or more elements of the carousel control . In this example the carousel control is used to display subnodes under an Artist node of a property tree . The elements and of carousel control include the subnodes of the Artist node namely Abba Adam Ant Allman Bros. Beach Boys Blink Kelly Clarkson Missy Elliott Foo Fighters Jet The Killers Modest Mouse REM Gwen Stefani U2 Weezer and Zornik. The nodes Artist Song and Album are not elements of carousel control . In this example display area displays four elements at a time although other numbers of elements may alternatively be displayed as desired or as dictated by screen space. In the nodes Artist Jet The Killers Modest Mouse REM Song and Album are visible to the user while the remaining elements of carousel control are not presently displayed.

While the carousel control has input focus a user can scroll the elements in the carousel control to circularly shift the elements visible in display area . For example pressing the up arrow when the carousel control is positioned as shown in may result in rotating the carousel control up such that the elements The Killers Modest Mouse REM and Gwen Stefani are displayed in the display area . Similarly pressing the down arrow when the carousel control is positioned as shown in may result in rotating the carousel control down such that the elements Foo Fighters Jet The Killers and Modest Mouse are displayed in the display area . Those of skill in the art will appreciate that other navigation scroll techniques and inputs may be used to control the rotation of the carousel control .

When the user has scrolled to the beginning or end of the elements as presently arranged e.g. alphabetical chronological etc. upon further scrolling in the same direction the carousel control continues traversing the circular list. Thus when scrolling in alphabetical order upon reaching the last item in the carousel control here Zornik the carousel control displays the first item in the list here Abba upon further scrolling by the user in the same direction. The reverse is also true such that when scrolling in reverse alphabetical order upon reaching the first item in the carousel control here Abba the carousel control displays the last item in the list here Zornik upon further scrolling by the user in the same direction.

A user may also jump to a specific item in the list by typing one or more characters on an attached keyboard or other data entry device. For example by typing the letter U the carousel control may automatically rotate or shift the carousel control such that the first item matching the input is displayed at the top of the display area . The results of such input are shown in

Similarly if a user inputs the letter B the carousel control may jump to display the element Beach Boys at the top of the display area . However if the user inputs B L case sensitivity is optional and not necessary in quick succession within some predetermined amount of time and or without a delay exceeding some predetermined amount of time between the inputs the carousel control may jump to display the element Blink at the top of the display area . The carousel control may include an input handler routine for scrolling and jumping to particular elements based on user input.

While the example of illustrates an alphabetical carousel control any organization of elements in the circular list corresponding to a carousel control may be used including for example chronological numerical color genre category a metadata value user specified order etc. The presently displayed elements of a carousel control may provide the same behavior as other nodes in the property tree . That is nodes may be dragged and dropped expanded collapsed etc. while displayed in display area . Those of skill in the art will appreciate that various modifications may be made to the carousel control e.g. the carousel control may utilize a list instead of a circular list such that a user cannot scroll continuously through the ends of the list. That is when a user reaches the end of the list the scrolling stops and does not begin anew at the beginning of the list. Likewise when a user scrolls to the beginning of the list scrolling does not continue from the end.

Those of skill in the art will appreciate that various modifications may be made to the carousel control to provide additional functionality to a user. For example the carousel control may be used with hierarchical properties such that one carousel control becomes nested within another. In such a nested embodiment the nested carousel control reflects i.e. is based on the selected parent element from the parent carousel control and keyboard shortcuts are usable within whichever carousel control presently has input focus.

Carousel controls may be provided with any number of display appearances. For example illustrates a carousel control according to another illustrative appearance. Carousel control includes top marker indicating the upper boundary of the display area bottom marker indicating the lower boundary of the display area revolution marker indicating the virtual boundary between the end and the head of the circular list as the carousel control revolves through the entire list and scroll controls for scrolling up and down respectively. A carousel control e.g. carousel control may expose navigation and control capabilities to the user. A user may be able to resize the carousel control by hovering a cursor over a boundary line e.g. lower boundary and selecting and dragging the lower boundary line such that the display area is a desired height. In addition a user may automatically expand the display area to a maximum height e.g. by double clicking the down scroll control . Similarly double clicking the up scroll control may result in the collapsing of the display area similar to the user selection of an expand collapse widget .

With reference to an exemplary system for implementing the invention includes a computing device such as device . Device typically includes at least one processing unit and main memory unit and at least one level of cache memory connected to or situated within the processing unit and serving as a buffer for the main memory . Device has additional storage including at least one magnetic hard disk that serves as nonvolatile secondary storage and which is additionally used along with the main memory in providing virtual memory. Device may also have other storage such as optical disks removable magnetic disks magnetic tape and other removable and nonremovable computer readable media capable of nonvolatile storage of program modules and data and accessible by device . Any such storage media may be part of device . To facilitate user machine interaction device has input devices such as a keyboard and a mouse or other pointing device and output devices including a monitor or other display device . Device also typically includes one or more communication connections that allow the device to communicate data with other devices.

Programs comprising sets of instructions and associated data for the device are stored in the memory from which they can be retrieved and executed by the processing unit . Among the programs and program modules stored in the memory are those that comprise or are associated with an operating system as well as application programs . The device has one or more systems of logical data storage such as a file system or alternative systems using database related techniques associated with the operating system . Such systems of logical data storage serve as interfaces that map logically organized data to data physically located on secondary storage media such as data stored in clusters or sectors on the hard disk .

Computing device includes forms of computer readable media. Computer readable media include any available media that can be accessed by the computing device . Computer readable media may comprise storage media and communication media. Storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions object code data structures program modules or other data. Communication media include any information delivery media and typically embody data in a modulated data signal such as a carrier wave or other transport mechanism.

All references cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

The use of the terms a an and the and similar referents in the context of describing the invention especially in the context of the following claims is to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms meaning including but not limited to unless otherwise noted. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of any and all examples or exemplary language herein e.g. such as is intended merely to better illuminate the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this invention are described herein including the best mode known to the inventors for carrying out the invention. Variations on those preferred embodiments may become apparent to those having ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.

