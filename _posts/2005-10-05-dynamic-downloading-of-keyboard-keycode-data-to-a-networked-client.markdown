---

title: Dynamic downloading of keyboard keycode data to a networked client
abstract: The present invention is directed toward dynamic downloading of keyboard keycode data to a networked client. According to one or more embodiments of the present invention, a user logs into a networked client by presenting a smart card to a card reader attached to the client (or by some other authentication mechanism) and enters a PIN into the keyboard. The keycodes entered by the user logging into the client are obtained, translated into ASCII characters, and presented to the smart card. If the PIN is correct, the user is able to log in, otherwise the log in fails. In one embodiment, when the user enters the PIN, a translation table is downloaded from the server into the client. The client uses the translation table to convert the keycodes to ASCII text and presents the ASCII text to the smart card for authentication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07448071&OS=07448071&RS=07448071
owner: Sun Microsystems, Inc.
number: 07448071
owner_city: Santa Clara
owner_country: US
publication_date: 20051005
---
This application is related to commonly owned U.S. patent application Ser. No. 09 861 024 filed on May 18 2001 now U.S. Pat. No. 7 010 806 and entitled Dynamic Downloading of Keyboard Keycode Data to a Networked Client. The referenced application is hereby incorporated by reference in its entirety.

The present invention relates to network security. More specifically the invention relates to the dynamic downloading of keyboard keycode data to a networked client.

Portions of the disclosure of this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records but otherwise reserves all copyright rights whatsoever.

When logging into a distributed network of computing devices it is typical for a security measure to be in place which helps to ensure the identity of the individual logging in. One instance where this occurs is on a system that uses a smart card. The user inserts the card into a card reading device attached to the computing system and enters a personal identification number PIN onto a keyboard keypad or other input device of the computing system. If the PIN number is authenticated then the user logs in and begins using the distributed network.

As will be further explained below the manner in which the PIN number is currently authenticated is vulnerable to snooping attacks from untrusted third parties that might use the PIN to compromise the network Before further describing the problems associated with current techniques which authenticate PINs an example computing environment where this problem occurs is described below.

In the multi tier application architecture a client communicates requests to a server for data software and services for example and the server responds to the requests. The server s response may entail communication with a database management system for the storage and retrieval of data. The multi tier architecture includes at least a database tier that includes a database server an application tier that includes an application server and application logic i.e. software application programs functions etc. and a client tier. The application server responds to application requests received from the client. The application server forwards data requests to the database server.

Further application functionality is provided by application logic managed by application server in application tier . The apportionment of application functionality between client tier and application tier is dependent upon whether a thin client or thick client topology is desired. In a thin client topology the client tier i.e. the end user s computer is used primarily to display output and obtain input while the computing takes place in other tiers. A thick client topology on the other hand uses a more conventional general purpose computer having processing memory and data storage abilities. Database tier contains the data that is accessed by the application logic in application tier . Database server manages the data its structure and the operations that can be performed on the data and or its structure.

Application server can include applications such as a corporation s scheduling accounting personnel and payroll applications for example. Application server manages requests for the applications that are stored therein. Application server can also manage the storage and dissemination of production versions of application logic. Database server manages the database s that manage data for applications. Database server responds to requests to access the scheduling accounting personnel and payroll applications data for example.

Connection is used to transmit data between client tier and application tier and may also be used to transfer the application logic to client tier . The client tier can communicate with the application tier via for example a Remote Method Invocator RMI application programming interface API available from Sun Microsystems . The RMI API provides the ability to invoke methods or software modules that reside on another computer system. Parameters are packaged and unpackaged for transmittal to and from the client tier. Connection between application server and database server represents the transmission of requests for data and the responses to such requests from applications that reside in application server .

Elements of the client tier application tier and database tier e.g. client application server and database server may execute within a single computer. However in a typical system elements of the client tier application tier and database tier may execute within separate computers interconnected over a network such as a LAN Local area network or WAN wide area network .

Smart cards are used in environments like the multi tier application architecture as a security measure to insure the identity of the user when he she logs into a computing device on the client tier. Once identified data on the database tier and applications on the application tier may be used. One advantage associated with using a smart card or other identification technique is that no matter where the computing device is located on the client tier the same data and applications that the user needs or was using before his her last log off can be retrieved.

Smart cards are useful for securely storing secret information and embedding cryptographic algorithms for use in a cryptographic system In many cases the smart card requires the presentation of a secret that only the cardholder knows. Sometimes this secret is called a PIN. Since the smart card itself has no mechanism for interacting with a human being i.e. no keyboard or display it requires the system it is being used with to provide the human I O facilities to prompt the cardholder for a PIN and to accept the cardholder s input of the PIN typically on a keyboard or other suitable input device.

As the PIN is being entered on the keyboard it is vulnerable to a snooping attack where an untrusted third party might be able to access the PIN and compromise it. In particular when a key is pressed on a keyboard the keyboard sends a code that represents the location of the key in a keyboard matrix. To obtain an ASCII representation of that key the keycode is applied to a translation table that translates keycodes into ASCII characters. When such a keyboard is connected to a networked client the keycodes are typically not processed in the client but are sent via the network to a server. The server performs the necessary translations and passes the translated codes to the applications.

In cases where the keyboard translation is part of a secure process i.e. a PIN code entry the keyboard codes are vulnerable to an interception attack at two points on their way from the client to the server and on their way back from the server to the client. Moreover since the keyboard codes of the PIN are resident on the server at least for the time required to send those codes back to the client system the PIN is vulnerable to a snooping attack while it is on the server.

One solution is to provide a smart card reader with a built in keypad used to enter the PIN. This avoids the danger of snooping that might occur when the PIN is authenticated via a server on the distributed network. This solution however is disadvantageous because it requires expensive and dedicated hardware to authenticate the PIN.

The present invention is directed toward dynamic downloading of keyboard keycode data to a networked client. According to one or more embodiments of the present invention a user logs into a networked client by presenting a smart card to a card reader attached to the client or by some other authentication mechanism and enters a PIN into the keyboard. The keycodes entered by the user logging into the client are obtained translated into ASCII characters and presented to the smart card. If the PIN is correct the user is able to log in otherwise the log in fails. The process occurs completely on the client and thereby avoids the danger associated with snooping the keycodes when they are sent over the network to the server for translation and then sent back over the network to the client for processing.

In one embodiment when the user enters the PIN a client generates a request to a server for a translation table by sending the server information about the configuration of the keyboard connected to it. In response the server accesses a database to obtain the appropriate translation table and downloads it from the server into the client. The client uses the translation table to convert the keycodes to ASCII text and presents the ASCII text to the smart card for authentication. In one embodiment the server provides the client with a list and a range of valid keycodes that the client should process some not all keycodes are of interest to the client.

In another embodiment a set of special keycodes are specified by the server in the keyboard translation table sent from the server to the client. The special keyboards include for instance end of input delete previous character and abort operation . When one of the special codes is generated by the keyboard the client performs special processing such as deleting a character in a buffer or returning a special status code to the server to indicate that the current user input processing should be terminated.

The invention relates to the dynamic downloading of keyboard keycode data to a networked client. In the following description numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail so as not to obscure the invention.

A keycode is entered every time a key on a keyboard is pressed. Moreover each keyboard has a different configuration. For instance a keyboard in China is configured differently than an English or German keyboard. Typically network computers do not include the state necessary to understand what type of keyboard they are connected to. Instead the raw keycodes are obtained when the key is pressed and they are sent over the network to a server that applies the keycodes to a translation table so it can determine the actual character that corresponds to the location on the type of keyboard connected to the network computer client . In this process there is a danger of interception of the keycodes when they are traveling over the network

According to one or more embodiments of the present invention the danger of interception is avoided as follows a user logs into a networked client by presenting a smart card to a card reader attached to the client or by some other authentication mechanism and enters a PIN into the keyboard. The keycodes entered by the user logging into the client are obtained translated into ASCII characters and presented to the smart card. If the PIN is correct the user is able to log in otherwise the log in fails. The process occurs completely on the client and thereby avoids the danger associated with snooping the keycodes when they are sent over the network to the server for translation and then sent back over the network to the client for processing.

One embodiment of the present invention is shown in . At step a user logs into a networked client by presenting a smart card to a card reader attached to the client. At step a translation table is downloaded from the server into the client. At step the user enters a PIN into the keyboard. After the user enters the PIN the client uses the translation table at step to convert the keycodes to ASCII text. At step the ASCII text is presented to the smart card for authentication. At step it is determined whether the PIN is correct. If it is the user is able to log in at step . Otherwise the log in fails at step .

Another embodiment of the present invention is shown in . In this embodiment each networked computer connected to an input device contains the information necessary to instruct a server of the configuration of the input device and instructs the server at an appropriate time. At step one or more users log into networked clients by presenting a smart cards to card readers attached to the clients. At step each of the network clients sends a message to the server instructing it on the type of configuration for its input device e.g. keyboard . Next at step the server receives the message and accesses a database to obtain translation tables for each configuration.

At step the translation tables are downloaded from the server into the clients. At step the users enters PIN numbers into the keyboard. The client uses the translation table at step to convert the keycodes to ASCII text and at step the ASCII text is presented to the smart card for authentication.

In one embodiment the server provides the client with a list and a range of valid keycodes that the client should process since not all keycodes are of interest to the client. This embodiment of the present invention is shown in . At step a user logs into a networked client by presenting a smart card to a card reader attached to the client. At step the client instructs the server to send a translation table for the current keyboard configuration. A translation table and a range of valid keycodes is downloaded from the server into the client at step .

At step the PIN is entered. At step the client examines a keycode. At step it is determined whether the keycode is in range. If it is not it is ignored at step or an error handling routine is initiated before the process repeats at step . Otherwise the client uses the translation table to convert the keycode to ASCII text at step . At step it is determined whether there are any more keycodes. If there are the process repeats at step . Otherwise at step the ASCII text is presented to the smart card for authentication.

In one embodiment of the present invention a set of special keycodes are specified by the server in the keyboard translation table sent from the server to the client. The special keycodes include for instance end of input delete previous character and abort operation . When one of the special codes is generated by the keyboard the client performs special processing operations. This embodiment of the present invention is shown in .

At step a user logs into a networked client by presenting a smart card to a card reader attached to the client. A translation table and a set of special keycodes are downloaded from the server into the client at steps and respectively. At step the user enters the PIN which generates one or more keycodes. At step the client examines a keycode. At step it is determined whether the keycode is a special keycode. If it is not the translation table is used by the client to convert the keycode to ASCII text at step .

Otherwise the special keycode is used to perform a special processing operation at step and the process repeats at step . Special processing operations include for instance deleting a character in a buffer or returning a special status code to the server to indicate that the current user input processing should be terminated. After step at step it is determined whether there are any more keycodes. If there are the process repeats at step . Otherwise at step the ASCII text is presented to the smart card for authentication.

In one embodiment the smart card has the ability to have software downloaded into its non volatile memory where it can execute the program by moving it to RAM where the smart card will act according to the instructions of the computer software. The smart card further has a communications channel between the processor and an external source such as a host computer.

The processor in the smart card is configured to retain information within the smart card that is secret. For instance a secret key in the smart card will never be divulged across the communications channel . The smart card will however allow information to come in across the communication channel and use the data. For instance the smart card is configured to receive data from an external source across the communications channel to use the secret key in the smart card i.e. PIN for example to sign and encrypt the incoming data and to send the results out along the communications channel to the external source .

In one embodiment the client sends a message to the server whenever the client needs a keyboard translation table. The client sends a message consisting of a keyboard translation table request. Table 1 shows an example of one embodiment of a keyboard translation table that is returned from such a request.

Table 1 comprises one or more keyboard translation table triples. Type refers to the type of keyboard. Country refers to the country associated with the keyboard. Instance refers to the ASCII representation that corresponds to the keycode.

One embodiment of the invention uses HexDump format. This format is a human readable 2 byte ASCII representation of 1 binary byte. Literally any of the 2 bytes concatenations generated by choosing two characters from the following 

Keyboard intervals are used as a compact way to represent a consecutive range of USB keycodes or any code that represents a key on a keyboard . One or more repetitions of the construct 

 is specified in HexDump format and the value on the left of the range should be numerically lower than the number on the right of the range it is an interval .

In one embodiment keytable download is a command CTRL for downloading a keytable KT to the firmware and follows this syntax CTRL KT KT     The underscore is used as a separator between elements.

The is a 3 bytes long combination expressed in Hexdump values whose first byte is keyboard type the second is the keyboard index and the third is the country code. A US type Sunray keyboard has a keyboard type set to 06 the keyboard index is 00 and the country code for the US is 33 decimal . In Hexdump the 33 translates to 21 . Thus the keyboard spec for this keyboard is 060021 .

The is a string defining the USB keycodes to be used for the ENTER ESCAPE and BACKSPACE characters in the following format . . . E . . . B . . . Q where E means ENTER B means BACKSPACE Q means ESCAPE. All three specifications should be present and for each one or more keycodes should be specified. Keycodes are expressed in the Hexdump values as above.

The specify the keyboard keycodes to be used to enter a PIN. Keycodes are specified as keyboard intervals as described above.

The is a string that defines the characters to be used when translating USB keycodes to characters. Each character is specified in HexDump value as defined above. Since a key meaning can be modified by the use of modifiers like SHIFT CONTROL the keymap has to specify what happens if one of these has been pressed. For each keycode there should be three characters in the keymap representing normal character SHIFT key character and CONTROL key character.

The length is defined by the total numbers of keycodes specified as in multiplied by three. No separator is specified between different parts.

For the example keyboard keycodes defined as 2B 38 54 57 in the US keymap are defined as 0909092020202D5F303D2B305B7B305D7D305C7C30237E303B3A30272230607E 302C3C302E3E302F3F302F2F2F2A2A2A2D2D2D2B2B2B Smart Card Reader Protocol

The protocol makes use of a device manager remote device driver DM RDD layer as transport mechanism. When the host wants to communicate with the smartcard the EXCHANGE primitive is used and the transfer of data follows these rules 

Not all operations are atomic for example changing the PIN on a card could require asking for the old PIN the new PIN and a second copy of the PIN as confirmation. Only if the two copies match will the APDU for writing the new PIN on the card be sent. All the while the user may want to do other things. To address this a small language is defined. All commands are atomically and sequentially executed no two commands are in execution at the same time.

One feature is to type a PIN without sending it to the Host but directly to the smartcard in a sort of loopback mode. Again this is not always possible right away so we need a way to type a PIN and temporarily store it until it can be embedded in an APDU to the card. Some operations like entering exiting the loopback keyboard mode and downloading the keymaps are accomplished via control callback.

Typical operation requires the service to enter secure mode download a keytable and operate. In case a keytable has not been specified some commands cannot execute notably READ CMP APDU. The latter is a special case since an APDU could be sent to the card independently of Secure Mode. In that case the keytable error is generated when reference to a buffer is made in the APDU itself.

An LED near the smartcard reader will blink according to the following rules as described by the Sun Service Indicator Standard which covers user visable indicators on Sun platforms 

While in Secure PIN Entry Mode the blink rate should be 3 5 Hertz at a 50 on 50 off duty cycle for the duration that the mode is active.

While data is being exchanged with the card the LED shall flash at a random or intermittent rate for no less than 1 full second with the LED ending in the lit state.

There is another primitive available via RDD CONTROL. This call is used to initiate terminate Secure PIN Entry Mode download the keytable and to signal cancellation of an operation.

For operations to be successfully carried on the DM notification facilities are used to tell the DM service about card properties keyboard attached to the unit and keypresses. These internal properties are embedded in a message in the format described below.

Some error return values are defined for cases in which parameters do not comply with the protocol. So instead of the return keyvalue pairs described above a keypair ERR . . . is returned with the following values defined 

The functionality of the virtual desktop system is partitioned between a display and input device such as a remote system and associated display device and data sources or services such as a host system interconnected to the remote system via a communication link The display and input device is a human interface device HID . The system is partitioned such that state and computation functions have been removed from the HID and reside on data sources or services.

One or more services communicate with one or more HIDs through a communication link such as network. An example of such a system is illustrated in wherein the system comprises computational service providers communicating data through communication link to HIDs .

The computational power and state maintenance are provided by the service providers or services. The services are not tied to a specific computer but may be distributed over one or more traditional desktop systems such as described in connection with or with traditional servers. One computer may have one or more services or a service may be implemented by one or more computers. The service provides computation state and data to HIDs and the service is under the control of a common authority or manager. In the services are provided by computers and . In addition to the services a central data source can provide data to the HIDs from an external source such as for example the Internet or world wide web. The data source can also be broadcast entities such as those that broadcast data e.g. television and radio signals .

Examples of services include X11 Unix services archived or live audio or video services Windows NT service Java program execution service and others. A service herein is a process that provides output data and response to user requests and input. The service handles communication with an HID currently used by a user to access the service. This includes taking the output from the computational service and converting it to a standard protocol for the HID. The data protocol conversion is handled by a middleware layer such as the X11 server the Microsoft Windows interface video format transcoder the OpenGL interface or a variant of the java.awt.graphics class within the service producer machine. The service machine handles the translation to and from a virtual desktop architecture wire protocol described further below.

Each service is provided by a computing device optimized for its performance. For example a machine such as an Enterprise class machine maybe used to provide X11 Unix service a Sun MediaCenter may be used to provide video service a Hydra based NT machine may provide applet program execution services. The service providing computer system can connect directly to the HIDs through the interconnect fabric. It is also possible for the service producer to be a proxy for another device providing the computational service such as a database computer in a three tier architecture where the proxy computer might only generate queries and execute user interface code.

The interconnect fabric can comprise any of multiple suitable communication paths for carrying data between the services and the HIDs. In one embodiment the interconnect fabric is a local area network implemented as an Ethernet network. Any other local network may also be utilized. The architecture also contemplates the use of wide area networks the Internet the world wide web and others. The interconnect fabric maybe implemented with a physical medium such as a wire or fiber optic cable or it may be implemented in a wireless environment.

The interconnect fabric provides actively managed low latency high bandwidth communication between the HID and the services being accessed. One embodiment contemplates a single level switched network with cooperative as opposed to completing network traffic. Dedicated or shared communications interconnects may also be used.

The HID is the means by which users access the computational services provided by the services. illustrates HIDs and . Each HID comprises a display a keyboard mouse and audio speakers . The HID includes the electronics need to interface these devices to the interconnection fabric and to transmit to and receive data from the services.

A block diagram of an example embodiment of the HID is illustrated in . The components of the HID are coupled internally to a bus . Network control block communicates to the interconnect fabric such as an Ethernet through line . An audio codec receives audio data on interface and is coupled to network control block . Universal serial bus USB data communication is provided on lines to a USB controller . The HID further comprises a embedded processor such as a Sparc2ep processor with coupled flash memory and dynamic random access memory DRAM . The USB controller the network control block and the embedded processor are all coupled to the internal bus . A video controller also coupled to the internal bus can include an ATI RagePro frame buffer controller which provides. Super video graphics array SVGA output on the line . National television standards committee NTSC data is provided in and out of the video controller through video decoder and encoder respectively. A smartcard interface may also be coupled to the video controller .

Alternatively the HID can comprise a single chip implementation as illustrated in . The single chip includes the necessary processing capability implemented via CPU and graphics renderer . Chip memory is provided along with video controller interface . A internal bus USB controller is provided to permit communication to a mouse keyboard and other local devices attached to the HID. A sound controller and interconnect interface are also provided. The video interface shares memory with the CPU and graphics renderer . The software used in this embodiment may reside locally in on volatile memory or it can be loaded through the interconnection interface when the device is powered.

The operation of the virtual desktop system architecture is described in co pending U.S. patent application Ser. No. 09 063 335 filed Apr. 20 1998 entitled Method and Apparatus for Providing A Virtual Desktop System Architecture and assigned to the present assignee and incorporated herein by reference.

Thus the dynamic downloading of keyboard keycode data to a networked client is described in conjunction with one or more specific embodiments. The invention is defined by the claims and their full scope of equivalents.

