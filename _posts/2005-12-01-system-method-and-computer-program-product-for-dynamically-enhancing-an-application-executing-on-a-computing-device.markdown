---

title: System, method and computer program product for dynamically enhancing an application executing on a computing device
abstract: A system, method and computer program product for dynamically enhancing a software application, such as a video game, executing on a computing device, without having to change and recompile the original application code. The system includes a staging environment that monitors the execution of the application and indexes each item of graphical and/or audio information generated by the application into a first database. A system administrator or other entity then populates a second database by manual or automated means with one or more business rules, wherein each business rule is associated with one or more of the objects indexed in the first database. The system further includes a run-time environment that identifies items of graphics and/or audio information as they are generated by the application during run-time, uses the second database to determine if an identified item is associated with a business rule, and, responsive to a determination that an identified item is associated with a business rule, applies the business rule.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07596540&OS=07596540&RS=07596540
owner: Exent Technologies, Ltd.
number: 07596540
owner_city: Petach-Tikva
owner_country: IL
publication_date: 20051201
---
The present invention generally relates to software applications. In particular the present invention relates to techniques for dynamically enhancing software applications during execution on a computing device.

Software applications and video games in particular render graphics information to a display device using a variety of techniques. One well known technique is to place function calls to a low level application programming interface API such as DirectX or OpenGL . In response to receiving such function calls these APIs issue commands to the graphics hardware of a computer system or in the alternative attempt to emulate relevant hardware functionality in software. Similarly software applications may play audio information by placing function calls to DirectSound which is an API within the DirectX suite of APIs.

It is of interest to various parties that make such applications available to end users for example publishers retailers and service providers to augment some of the graphics and audio information rendered by these applications based on a dynamic set of business rules . For example such business rules could be used to display advertising content on a graphics element rendered by a video game or to insert advertising content within an audio stream played by the video game. Ideally the dynamic nature of the business rules would allow them to be periodically changed. For example it would be advantageous if the inserted advertising content could be changed on a periodic basis.

One possible method of achieving this is to embed the business rules directly in the original application logic or source code and then to recompile the application with those business rules. However this technique of coding and recompiling an application to accommodate the business rules might not be achievable for all software applications. By way of example the party wishing to insert the business rule might not have access to the source code. As another example the application that is sought to be enhanced may already have been deployed in the field or purchased by consumers or others.

Another method of achieving the dynamic insertion of graphics content into an application is to integrate special client software into the original application logic during the software development phase of the application. When the application is executed the special client software serves the application to communicate with a server which based upon some predefined business rules may dynamically insert graphics content into the application in a pre allocated space that has been identified and registered in advance by the application. However this method is limiting because it will only work if the application as originally programmed includes the necessary special client software interfaced during development time and has identified in advance the areas on which the dynamically inserted graphics information may appear.

What is desired then is a system method and computer program product for dynamically enhancing an application such as a video game executing on a computing device without having to change and recompile the original application code. Dynamically enhancing the application should include the ability to dynamically modify graphics and or audio information generated by the application during execution to dynamically render additional graphics and or audio information during execution of the application or to perform other functions relating to the executing application that are not provided for or invoked by the source code of the application.

The present invention provides a system method and computer program product for dynamically enhancing an application such as a video game executing on a computing device without having to change and recompile the original application code. In one implementation dynamically enhancing the application includes the ability to dynamically modify graphics and or audio information generate by the application during execution. In another implementation dynamically enhancing the application includes the rendering of additional graphics and or audio content during execution of the application. In still other implementations dynamically enhancing the application includes the performance of other functions relating to the executing application that are not provided for or invoked by the source code of the application.

In one implementation a system in accordance with an embodiment of the present invention includes a staging environment that monitors the execution of the application and indexes each item of graphics and or audio information generated by the application into a first database. A system administrator or other entity then populates a second database by manual or automated means with one or more business rules wherein each business rule is associated with one or more of the items indexed in the first database. The system further includes a run time environment that identifies items of graphics and or audio information as they are generated by the application during run time uses the second database to determine if an identified item is associated with a business rule and responsive to a determination that an identified item is associated with a business rule applies the business rule. Application of the business rule may result in the modification of graphics and or audio information generated by the application during execution the rendering of additional graphics and or audio information or the performance of other functions relating to the executing application that are not provided or invoked by the source code of the application.

Further features and advantages of the present invention as well as the structure and operation of various embodiments thereof are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

As will be described in more detail herein after graphics audio objects database has been populated by staging environment a system administrator or other entity then populates a business rules database by manual or automated means with a set of business rules wherein each business rule in database is associated with one or more of unique IDs of objects indexed in graphics audio objects database .

Run time environment represents the environment in which an end user actually runs the application software. The application is the same as the application executed in staging environment in that it is another copy or instance of essentially the same computer program although it need not be completely identical. As will be described in more detail herein run time environment monitors the execution of the application on a computing device and also identifies application generated graphics and audio objects. If run time environment determines that an object generated by the application matches a business rule associated with the above mentioned object in business rules database then it applies the business rule. The business rule may be used for example to determine whether or not to modify the object in run time i.e. during execution of the software application although other business rules will also be described herein.

In terms of hardware components each of staging environment and run time environment consists of a computing device that is configured to execute software applications that generate graphics and audio information. Each computing device further includes application program interfaces for rendering and displaying the application generated graphics information and for playing back the application generated audio information. For the sake of convenience from this point forward each of staging environment and run time environment will be described as comprising a personal computer PC based computer system although the invention is not so limited. For example staging environment and run time environment may each comprise a server a console a personal digital assistant PDA or any other computing device that is capable of executing software applications and displaying associated application generated graphics and audio information to an end user.

Application is programmed such that during execution it makes function calls to low level graphics audio functions . The interaction of application with low level graphics audio functions is well known in the art. However in accordance with an embodiment of the present invention such function calls are intercepted by interception component and provided to an indexing component prior to being passed to low level graphics audio functions . Interception component and indexing component are software components that are installed on the computer system of staging environment prior to execution of application . As will be described in more detail herein indexing component identifies graphics and audio objects associated with the intercepted function calls and indexes each of the objects in graphics audio objects database along with a unique ID.

In an implementation of the present invention interception component comprises one or more emulated versions of corresponding low level graphics audio functions . For example in an implementation in which low level graphics audio functions are contained in graphics and audio libraries such as in dynamic link libraries or DLLs interception component comprises emulated versions of one or more of those libraries. These emulated libraries have the same names as the original libraries that they are intended to replace so that they are linked to application at run time. A particular example of interception by emulation will now be explained with reference to .

In contrast to the conventional software architecture illustrated in illustrates a software architecture including emulated graphics and audio libraries in accordance with an embodiment of the present invention. As shown in interception component has been inserted between application and Direct3D API . This may be achieved by emulating one or more graphics or audio libraries within Direct3D API . As a result certain function calls generated by application are received by interception component rather than Direct3D API . Interception component provides the intercepted function calls or graphics and audio objects associated with the intercepted function calls to an indexing component . Interception component also passes the function calls to Direct3D API by placing calls to that API where they are handled in a conventional manner. It is noted however that the function calls need not necessarily be passed to Direct3D API in order to practice the invention.

Depending on the operating system emulating a genuine graphics API can be achieved in various ways. One method for emulating a genuine graphics API is file replacement. For example since both DirectX and OpenGL are dynamically loaded from a file emulation can be achieved by simply replacing the pertinent file OpenGL.dll for OpenGL and d3dX.dll for DirectX where X is the DirectX version . Alternatively the DLL can be replaced with a stub DLL having a similar interface which implements a pass through call to the original DLL for all functions but the hook functions.

Another method that may be used is to intercept or hook function calls to the API using the Detours hooking library published by Microsoft of Redmond Wash. Hooking may also be implemented at the kernel level. Kernel hooking may include the use of an operating system OS ready hook to enable a notification routine for an API being called. Another technique is to replace the OS routines by changing the pointer in the OS API table to a hook routine pointer chaining the call to the original OS routine before and or after the hook logic execution. Another possible method is API based hooking technique the performs the injection of a DLL to any process that is being loaded by setting a system global hook or by setting a registry key to load such a DLL. This injection is done only to have the hook function running in the process address space. While the OS loads such a DLL a DLL initialization code changes the desired DLL dispatch table. Changing the table causes the pointer to the original API implementation to point to the DLL implementation only to the desired API and thus hooking the API. Hooking techniques are described for example at the web page http www.codeguru.com system apihook.html. Note that the above described hooking techniques are presented only by way of example and are not meant to limit the invention to any of these techniques. Other tools and methods for intercepting function calls to graphics or audio APIs are known to persons skilled in the relevant art s .

As further shown in run time environment includes an application an interception component business logic and low level graphics audio functions . Application is the same as application of staging environment in that it is another copy or instance of essentially the same computer program although it need not be completely identical. Low level graphics audio functions are software functions resident in memory of the computer system that are accessible to application and that assist application in the rendering of application generated graphics information and the playing of application generated audio information. Low level graphics audio functions and are similar in the sense that they provide the same functionality and services to application and application respectively through similar APIs.

During execution on the computer system of run time environment application makes function calls to low level graphics audio functions in the same well known manner that application made function calls to low level graphics audio functions in staging environment . However in accordance with an embodiment of the present invention such function calls are intercepted by interception component which either passes the function call on to low level graphics audio functions on to business logic or both. Interception component and business logic are software components that are installed on the computer system of run time environment prior to execution of application .

When interception component intercepts a function call it passes control along with the relevant object to business logic which determines if the object is associated with one or more business rules in database . If the object is associated with a business rule in database then business logic applies the business rule.

In one implementation application of the business rule results in modification of the object which may include lighting sources point of view textures or shading during run time. If no modification is to occur the intercepted function call is simply passed on to low level graphics audio functions . If a modification is to occur then the function call may be handled by business logic alone or by business logic in conjunction with low level graphics audio functions . As will be described in more detail herein modifying the object may include altering a portion of the object replacing the object with a different object or simply not rendering or playing back the object. The application of other business rules will also be described herein.

In one implementation graphics audio objects database is created or populated in local memory of the computer system of staging environment . A system administrator or other entity then populates business rules database by manual or automated means with one or more business rules wherein each business rule is associated with one or more of the objects indexed in the first database. The association between the business rule and an object is created by forming a relationship between the business rule and the unique ID of the object in database . In one implementation a wild card scheme is used to permit a single business rule to be associated with a group of logically related objects.

Generally speaking a business rule is any logic that when applied within the context of application causes application to perform a function that is not provided for in the original application source code. As noted above a business rule may call for modification of a graphics object associated with an intercepted function call such that the graphics object when rendered appears differently than it would have if it were not so modified. For example a business rule may cause advertising content to be dynamically inserted into a graphics object. Further examples of business rules and their application are set forth below in Section IV. However these examples are provided for illustrative purposes only and are not intended to limit the present invention.

Because the business rules can be changed at any time by a system administrator or other entity they provide a dynamic mechanism by which to enhance application . For example the business rules provided a dynamic mechanism by which to augment graphics and audio content generated by that application.

In one implementation once business rules database has been created or updated by a system administrator or other entity a copy of database is transferred to local memory of the computer system of run time environment . The transfer may occur by transferring a copy of database to a recordable computer useable medium such as a magnetic or optical disc and then transferring the computer useable medium to run time environment . Alternatively a copy of database may be transferred via a data communication network such as a local area and or wide area data communication network. In yet another implementation database is not transferred to local memory of the computer system of run time environment at all but is instead stored at a central location in a computing network where it can be accessed by multiple run time environments using well known network access protocols. However these examples are not intended to be limiting and persons skilled in the relevant art s will appreciate that a wide variety of methods may be used to make database available to run time environment .

The following description of the method of flowchart assumes that each of the software components of staging environment have already been installed on a computer system. The method also assumes that software application is executing on the computer system. Executing software application encompasses both launching the application and interacting with the application through one or more user interfaces in a manner that causes the application to generate graphic and or audio information. For example if application is a video game executing the application encompasses both launching the video game and playing through at least a portion of the video game using appropriate user input output I O devices.

The method begins at step in which software application generates a function call directed to low level graphics audio functions . At step it is determined whether or not the function call is intercepted by interception component . If no interception occurs then processing proceeds to step where the function call is handled by low level graphics audio functions in a conventional manner. Processing of the function call then ends as indicated at step . However if the function call has been intercepted processing instead proceeds to step .

At step interception component identifies a graphics or audio object associated with the intercepted function call. A graphics object may comprise a model texture image parameter or any other discrete set of graphics information associated with the intercepted function call and used in rendering a graphics information on behalf of application . An audio object may comprise an audio file a digital sound wave or any other discrete set of audio information associated with the intercepted function call and used in playing back audio information on behalf of application . The graphics or audio object may be part of the function call itself or may be addressed by or pointed to by the function call. For example if the intercepted function call is a SetTexture function call to the Direct3D API the associated graphics object may consist of a texture pointed to by the SetTexture function call.

At step indexing component indexes the graphics or audio object identified in step in graphics audio objects database . In one implementation indexing the object includes storing the object or a portion thereof in graphics audio objects database along with a unique identifier ID for the object. The unique ID may be arbitrarily assigned or may be calculated based on information contained in the object itself. For example in an implementation the unique ID comprises an error correction code such as a cyclic redundancy code CRC that is calculated based on all or a portion of the content of the graphics or audio object. In an alternate implementation an encryption and or hashing algorithm is applied to all or a portion of the content of the graphics or audio object to generate the unique ID. For example the unique ID may be an MD5 hash signature that is calculated based on all or a portion of the content of the graphics or audio object. A benefit of generating a unique ID based on the content of the object itself is realized in run time environment where the unique ID instead of the object itself which may be quite large can be used to search for matches in business rules database . In one implementation of the present invention the unique ID alone is stored in business rules database to represent an underlying graphics or audio object. As a result the storage requirements for business rules database can be substantially reduced.

In one implementation the unique ID is not calculated as part of the method of flowchart but instead is calculated by a separate process that occurs after completion of the method when graphics audio objects database has been populated with graphics and audio objects.

At step after indexing is complete the function call is then passed to low level graphics audio functions where it is handled in a conventional manner. After this processing of the function call ends as indicated at step .

As noted above the method of flowchart would likely be executed numerous times during execution of a software application within staging environment . Furthermore the method may be applied to the execution of multiple software applications in order to index graphics and audio objects therefrom. The indexed graphics and audio objects for the multiple applications may be stored in a single graphics audio objects database or in multiple databases . Each of these databases may then be used to populate one or more business rules databases which are provided for use in one or more run time environments .

The following description of the method of flowchart assumes that each of the software components of run time environment have already been installed on a computer system. The method also assumes that software application is executing on the computer system. Executing software application encompasses both launching the application and interacting with the application through one or more user interfaces in a manner that causes the application to generate graphic and or audio information.

The method begins at step in which software application generates a function call directed to low level graphics audio functions . At step it is determined whether or not the function call is intercepted by interception component. If no interception occurs then processing proceeds to step where the function call is handled by low level graphics audio functions in a conventional manner. Processing of the function call then ends as indicated at step . However if the function call has been intercepted processing instead proceeds to step .

At step interception component identifies a graphics or audio object associated with the intercepted function call. As noted above a graphics object may comprise a model texture image parameter or any other discrete set of graphics information associated with the intercepted function call and an audio object may comprise an audio file a digital sound wave or any other discrete set of audio information associated with the intercepted function call. The graphics or audio object may be part of the function call itself or may be addressed by or pointed to by the function call. For example if the intercepted function call is a SetTexture function call to the Direct3D API the associated graphics object may consist of a texture pointed to by the SetTexture function call.

At step business logic determines if the identified object is associated with at least one business rule in business rule database . This step may include comparing the identified object or a portion thereof to a graphics or audio object or portion thereof stored in database . Alternatively this step may include calculating a unique ID for the identified object and then comparing the unique ID for the identified object to a set of unique IDs stored in database . For example as described above in reference to the unique ID may comprise an error correction code such as a CRC calculated based on all or a portion of the content of the identified object or a signature such as an MD5 hash signature derived by applying an encryption and or hashing algorithm to all or a portion of the content of the identified object. It should be noted that wild cards or other logical groupings of objects may be used in accordance with the present invention to associate a business rule with multiple objects. For example business rules database may include business rules that will be applied to all objects identified by a catch all matching expression.

If the identified object is not associated with at least one business rule in database then processing proceeds step where the function call is processed by low level graphics audio functions in a conventional manner.

However if the identified object is associated with at least one business rule in database then business logic applies the at least one business rule as shown at step . In one implementation the application of the business rule results in the modification of the identified object. Such modification may include replacing the identified object with a different object altering the content of the identified object or simply not rendering or playing the identified object at all. However the present invention is not limited to simply modifying the object. For example a business rule may include preceding the rendering or playing of the object with the rendering or playing of another object or succeeding the rendering or playing of the object with the rendering or playing of another object. Note that because application of the business rule may include rendering or playing an object such application may include placing one or more function calls to low level graphics audio functions .

In fact the business rule need not include the rendering of any graphics information or playing of any audio information. Instead the business rule may simply consist of performing some activity within the context of software application in response to the identification of a certain graphics or audio object by interception component . By way of example the business rule may include moving pointers associated with user input devices to predefined regions of the display screen useful for auto aiming in shooting games or for automatic orientation within on screen game menus generating a key sequence such as inputting cheat codes logging and or reporting a user s progress within the software application or other activities. Each of these events can be performed before instead of or after the graphics or audio object associated with an intercepted function call has been rendered or played by the original non emulated low level graphics or audio libraries.

After one or more business rules have been applied at step processing of the function call then ends as shown at step .

As described above an embodiment of the present invention facilitates the application of business rules to a software application executing on a computing device thereby permitting the application to be enhanced in a dynamic manner that does not require modifying and recompiling the original application code. Additionally because an embodiment of the invention can be implemented in run time environment using emulated libraries the operation can be essentially transparent to the end user. Indeed aside from the installation of the necessary software components i.e. interception component business logic and optionally business rules database in run time environment the end user need not take any proactive steps to link or interface the software application with an external software component.

The distribution of the necessary software components to the computing device of an end user may be achieved in a variety of ways. For example the software components may be distributed from a centralized entity to a number of run time environments over a data communication network such as the Internet. Such a system is illustrated in in which a centralized network entity is shown communicating with a plurality of user run time environments and over a data communication network . By combining such network based distribution with auto installation software the installation of such components on an end user s computing device may be achieved in a manner that advantageously requires minimal end user intervention. Furthermore since only a single copy of the run time components is needed on the end user machine one can also bundle those components with one or more applications 

In an implementation of the present invention the business rules themselves are dynamic in the sense that an entity for example a publisher retailer or service provider can change them periodically to enhance a given application in different ways. Business rules can be changed or added by making modifications to business rules database . Copies of business rules database or updates thereto may be distributed from a centralized network entity to multiple run time environments over a data communication network using a network system such as that shown in .

In an alternate implementation copies of business rules database are not distributed to run time environments at all but instead business rules database resides remotely with respect to run time environments and is accessed only when required via a data communication network such as the Internet. For example business logic rules database may reside on a centralized network entity such as a server where it is accessed by computing devices associated with multiple run time environments . Again such a network configuration is illustrated in . This implementation is advantageous in that changes to the business rules need only be implemented once at the central server and need not be actively distributed to the multiple run time environments .

In an implementation where interception component comprises one or more emulated libraries a determination may be made during installation of interception component or at application run time as to which libraries should be emulated. Consequently different sets of libraries may be emulated for each software application that is to be dynamically enhanced. The determination may be based on the characteristics of the software application that is to be dynamically enhanced upon some externally provided metadata or provisioned from the staging environment by one means or another.

Some exemplary applications of the present application will now be described. These examples are provided for illustrative purposes only and are not intended to limit the present invention in any way.

An implementation of the present invention facilitates the embedding of in game advertising in games that were not designed to support such a feature. In accordance with this implementation staging environment operates to index the texture of a game related surface such as the hood of a car in a racing game in graphics audio objects database . A system administrator then defines a business rule to overlay the hood of the car with a logo associated with an advertised product. That business rule is captured in business rules database where it is associated with the texture for the hood of the car. In run time environment interception component identifies the texture as it is accessed for rendering on an end user s computer and business logic matches it to the business rule stored in database . As a result the business rule is applied to augment the image of the texture for the car hood with the product logo and to render the manipulated image to the screen. The end result is that the product logo will be displayed upon the car hood inside the graphic display associated with the game.

Based on the teachings provided herein persons skilled in the relevant art s will appreciate that the present invention is equally applicable to the insertion of audio advertising content within an audio object played within the context of a game. Furthermore the present invention is also applicable to render graphic and audio advertising content that bears no relation to any specific intercepted object and that is rendered or played independently of that object.

In a further embodiment of the present invention run time environment further includes logic for capturing input output I O from an end user device such as a keyboard or mouse. The software components for such an embodiment are shown in . In particular as shown in the software components of run time environment include an application low level graphics audio functions and an interception component inserted between them that is in communication with business logic similar to the software architecture shown in . However in the implementation shown in an additional I O capture component has been provided that allows business logic to monitor events associated with the use of a user input device such as a keyboard or mouse. In one implementation this monitoring is achieved by emulating functions associated with processing mouse or keyboard input.

A system in accordance with can be used to extend the functionality of an implementation of the present invention that facilitates the embedding of in game advertising. For example while an embedded product logo is being rendered within a graphic display associated with the game I O component monitors user input to identify when a user has interacted with the logo for example by pointing to the logo with a mouse and clicking. In response to a determination that user interaction has occurred business logic performs a function. By way of example the function may include displaying a form for the user to enter data to be sent to a server display some other graphic or audio content to the user or provide the user with a prize or a notification that they will receive a prize.

In accordance with an implementation of the present invention level advancement and achievements with a game can be identified and certain actions can be taken based on the advancement or achievement. For example a business rule can be associated with a graphics or audio object identified in staging environment that is unique to or representative of a certain level or stage within a game that is divided into levels or stages. When the same object is identified in run time environment the end user has reached the level or stage within the game and the business rule is applied. The business rule may include logging information about the achievement or advancement and then transmitting it to a centralized repository over a data communication network such as the Internet to enable tournaments and merit allocation schemes. Alternatively in games that display game scores on the screen the rendered information can be captured and the actual score the user has achieved can be logged and used as the data for enabling tournaments and merit allocation schemes.

In previously described implementation of the present invention a business rule is applied as the result of the identification of a particular application generated graphics or audio object by run time environment . However in an alternate implementation the business rule is instead applied in response to the detection of some other event occurring within the context of the executing software application or within the computer system of run time environment .

Such an implementation is depicted in . As shown in the software components of run time environment include an application low level graphics audio functions and an interception component inserted between them that is in communication with business logic similar to the software architecture shown in . However in the implementation shown in an additional event detection component has been provided that allows business logic to be notified of events occurring within the context of the executing software application or within the computer system of run time environment . In the system shown in business logic selectively applies a business rule in response to the detection of such an event.

An example application of such a system includes toggling on or off the display of video game controls within the graphic display associated with a video game wherein such capability is not provided by the video game itself. In accordance with this example application event detection component detects that the user has provided input to the computer system to such as a combination of keyboard entries to turn on screen controls either on or off. In response to detecting this event business logic causes the controls to be rendered on the screen if they are being toggled on or causes the controls to not be rendered on the screen if they are being toggled off. The rendering of the controls is achieved by placing function calls to the necessary low level graphics audio functions to perform this task. This functionality enhances usability of the video game by the end user.

The on screen display of such controls can further be triggered by the identification of certain graphical or audio objects identifying that the user has reached a certain stage in the game. Thus the user can be automatically provided with on screen controls information upon reaching a new level helping him in the game.

Another example application of the system of involves notifying an end user about the end of a trial period for using application software wherein the application software is intended for use for a limited time only and or for a limited number of levels . In accordance with this example event detection component notifies business logic when a predetermined threshold has been reached with respect to execution of the application. For example the threshold may be a total amount of time that the application has been used for example 1 hour of total use or the total number of times the application has been launched for example 10 sessions . This threshold may mark the actual end of the trial period or only that the end of the trial period is approaching. In any case in response to such notification business logic causes a graphic or audio message to be rendered or played back to the user to alert the user about the end of the trial period. Such a message may be rendered as part of a graphics or audio object generated by the application or rendered separately from any such object. The message may indicate the amount of time left or sessions left to the user for using the application. The rendering of such a message is achieved by placing function calls to the necessary low level graphics audio functions .

In another embodiment of the invention the interception component may identify a certain object as indicative of reaching a new stage or level thereby allowing an administrator or other entity to set business rules limiting the use of the application to certain levels or stages. Upon identifying such a new level or stage the game can be automatically saved by generating the required key sequences and an appropriate message can be displayed to the user.

In a further embodiment not shown which includes I O capture capability as described above with reference to an I O capture component monitors user input to identify when a user has interacted with a trial message that has been graphically rendered for example by pointing to the message with a mouse and clicking. In response to a determination that user interaction has occurred business logic performs a function. By way of example the function may include launching a process that allows the end user to procure additional license term for using the application.

A further example application of the system of allows the dynamic implementation of parental controls that govern the use of a software application. For example a parent may desire to limit the amount of time that a video game application is played over a given time period such as a day. In accordance with this example event detection component notifies business logic when the end of the allowed time is approaching. In response to such notification business logic causes a graphic or audio message to be rendered or played back to the user to alert the user to the approaching end of the allowed time. Furthermore when the allowed time has expired business logic is notified and causes any progress in the video game to be saved and then exits the application.

As noted elsewhere herein business rules may also be implemented that cause certain identified graphics or audio objects not to be rendered or played back during execution of a software application. Such an implementation is particularly useful for providing parental controls that selectively block the presentation of certain graphics and or audio objects content during a video game.

In another example application of the system of event detection component monitors e mail clients and or instant messengers also resident on the computer system of run time environment and notifies business logic when information such as a message has been received by one of these applications. Business logic then provides the end user with the message by rendering it within the graphic display associated with application . Business logic performs this task by accessing low level graphics audio functions . Such functionality can be used to allow e mail and instant messenger messages to be provided to the end user while playing a video game in a seamless and non intrusive manner. Indeed such functionality would otherwise be impossible with full screen DirectX applications.

In another implementation of the present invention menu system recognition and manipulation functionality is provided. For example in accordance with such an implementation interception component identifies that an application such as a video game is rendering graphics associated with a menu system. In response business logic performs one or more activities. For example business logic can enable snap to menu item functionality to allow easy navigation within the menu system. Such functionality may include moving the mouse pointer of the end user to the closes menu item. Alternatively or additionally in an implementation not shown that includes I O capture capability as described above with reference to by capturing keyboard inputs the business logic can cause movement between the menu items by translating from analog mouse movement to discrete arrow key based movement. A further application might include blocking an end user s ability to select certain menu items depending on parental control or licensing related parameters.

In another implementation of the present invention various manipulations can be performed on a certain scene. For example some of these manipulations include 

Projection manipulation The graphic output of the scene or part of it can be manipulated to be shown on a different surface than a flat one. For example when projecting the rendered output to a spherical shape there is no need for specific lens to adopt the projection to the surface but apply a transformation over the Indexes and Vertexes of a selected set within a scene accordingly. Upon intercepting calls to BeginScene and EndScene calls certain business logic may be applied to all calls in between. Future application may further include feedback from the surface itself in a way that the adaptation will be dynamically according to the surface shape.

Objects dimensions and shape Another example may include stretching or changing scene objects. For example a scene image can become taller thinner etc.

Point of View manipulation Business logic may be provided to enable changing the point of view of an existing scene. For example in a racing game the invention can be used to add a point of view at the car roof which was not provided by the game s original functionality. The scene can then be displayed as a picture in picture inside the game itself instead of the original images or on a different screen. In the case the image is displayed on a different screen one can add interactivity with the manipulated image to allow a viewer to watch the game from various point of views without affecting the gamer s user experience.

Lighting manipulation Business logic is provided to allow for changing lighting definitions. For example light a dark game or scene.

Shader manipulation Business logic is provided to allow for changing of the Shaders definitions. For example this may be used to add or remove fog or change transparency.

As shown in example computer system includes a processor for executing software routines. Although a single processor is shown for the sake of clarity computer system may also comprise a multi processor system. Processor is connected to a communication infrastructure for communication with other components of computer system . Communication infrastructure may comprise for example a communications bus cross bar or network.

Computer system further includes a main memory such as a random access memory RAM and a secondary memory . Secondary memory may include for example a hard disk drive and or a removable storage drive which may comprise a floppy disk drive a magnetic tape drive an optical disk drive or the like. Removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit may comprise a floppy disk magnetic tape optical disk or the like which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art s removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In an alternative implementation secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means can include for example a removable storage unit and an interface . Examples of a removable storage unit and interface include a program cartridge and cartridge interface such as that found in video game console devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system also includes at least one communication interface . Communication interface allows software and data to be transferred between computer system and external devices via a communication path . In particular communication interface permits data to be transferred between computer system and a data communication network such as a public data or private data communication network. Examples of communication interface can include a modem a network interface such as Ethernet card a communication port and the like. Software and data transferred via communication interface are in the form of signals which can be electronic electromagnetic optical or other signals capable of being received by communication interface . These signals are provided to the communication interface via communication path .

As shown in computer system further includes a display interface which performs operations for rendering images to an associated display and an audio interface for performing operations for playing audio content via associated speaker s .

As used herein the term computer program product may refer in part to removable storage unit removable storage unit or a hard disk installed in hard disk drive . A computer useable medium can include magnetic media optical media or other recordable media. These computer program products are means for providing software to computer system .

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs can also be received via communication interface . Such computer programs when executed enable the computer system to perform one or more features of the present invention as discussed herein. In particular the computer programs when executed enable the processor to perform features of the present invention. Accordingly such computer programs represent controllers of the computer system .

Software for implementing the present invention may be stored in a computer program product and loaded into computer system using removable storage drive hard disk drive or interface . Alternatively the computer program product may be downloaded to computer system over communications path . The software when executed by the processor causes the processor to perform functions of the invention as described herein.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Accordingly the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

