---

title: Method, apparatus and program storage device that provides a user mode device interface
abstract: A method, apparatus and program storage device that provides a user mode device interface for enabling software reuse. The user mode device interface allows device interface requests to be sent and received, including commands and data structures, via socket communication. A device state machine on the client side is implemented in a set of shared functions that can be incorporated by all applications that want to communicate to a particular service provider. The service provider offers the software functions over a user mode device interface via socket communication. The device state machine on the service provider side is embedded in the socket server implementation. The interaction between the state machines on both client and server sides ensures a device interface request is properly handled.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09176713&OS=09176713&RS=09176713
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09176713
owner_city: Armonk
owner_country: US
publication_date: 20051130
---
This invention relates in general to a computer programming and more particularly to a method apparatus and program storage device that provides a user mode device interface for enabling software reuse.

In a highly competitive market environment time to market with superior quality is the key focus in developing a new product. For a well established development team with years of experience in software development the reusability of existing software is the very key to achieving the goals of delivering a new product in the most efficient way with superior quality. Given the same competitiveness in the market environment what a new product is required to do is constantly increasing and how much it is allowed to cost is reducing. For a software product development the demanding requirements and pressure of lowering cost are translated into the need of reuse existing software functions in various hardware platforms. One of the focus items to achieve high software reusability is to develop the software functions with the encapsulation of a platform they are operating upon. The platform includes the actual hardware and the operating systems.

One key consideration in selecting a platform for a product is whether the software can best perform in privileged mode or user mode. User mode refers to a nonprivileged state where the executing code is forbidden by the kernel from performing potentially dangerous operations such as writing to system configuration files killing other users processes rebooting the system etc. In contrast kernel mode or privileged mode is the mode in which the operating system kernel runs. Code running in this mode has unlimited access to the system memory and external devices.

The traditional thinking is software can best perform in privileged mode. However given the advancing technology in hardware platform development operating in user mode may be a much better choice given different product requirements. The built in protection provided by all modern operating systems for a software running in user mode the ease of managing a program in a user mode and the improved system stability with new software functions isolated from kernel are significant benefits of implementing a software project in user mode.

In the past a developer of a user mode application that desired access to functions running in privilege mode needed to create a private kernel mode driver. Unfortunately this solution has the disadvantage of requiring all the developers of user mode applications to develop unique kernel mode drivers to essentially provide private access to the privilege functions. More recently a device interface has been used to map calls to the interface to the kernel mode implementation if the given process is a kernel mode process and to a user mode implementation if the given process is a user mode process.

However to achieve the reusability and re implement software functions that were previously running in privileged mode there needs to be a consistent interface to invoke these functions in both privileged and user modes. For software functions that are to be implemented for running in privileged mode the device interface is a common interface for all user mode applications to access software functions implemented in privileged mode. However the device interface is not available to invoke the same software functions if they are ported to be running in user mode.

It can be seen then that there is a need for a method apparatus and program storage device that provides a user mode device interface for allowing functions previously to be running in privileged mode to be re implemented to run in user mode.

To overcome the limitations in the prior art described above and to overcome other limitations that will become apparent upon reading and understanding the present specification the present invention discloses a method apparatus and program storage device that provides a user mode device interface for enabling software reuse.

The present invention solves the above described problems by providing a user mode device interface allows device interface requests to be sent and received including commands and data structures via socket communication. A device state machine on the client side is implemented in a set of shared functions that can be incorporated by all applications that want to communicate to a particular service provider. The service provider offers the software functions over a user mode device interface via socket communication. The device state machine on the service provider side is embedded in the socket server implementation. The interaction between the state machines on both client and server sides ensures a device interface request is properly handled.

A user mode device interface in accordance with an embodiment of the present invention includes a user side object for generating requests for use of software functions running on an application running in privilege mode and a server side object for performing the request and forwarding a response based on the request to the user side object.

In another embodiment of the present invention a computing system is provided. The computer system includes a processor having a user mode and a protected kernel mode and a memory coupled to the processor the memory including program code executing in the processor for providing a user mode device interface the user mode device interface processing a request for use of software functions running on an application running in privilege mode.

In another embodiment of the present invention a program storage device is provided. The program storage device embodies program instructions executable by a processing device to perform operations for providing a user mode device interface for enabling software reuse wherein the operations include issuing from a user side a request to open a device with a proper device identifier on a server side and processing the request on the server side including performing a function identified by the request.

These and various other advantages and features of novelty which characterize the invention are pointed out with particularity in the claims annexed hereto and form a part hereof. However for a better understanding of the invention its advantages and the objects obtained by its use reference should be made to the drawings which form a further part hereof and to accompanying descriptive matter in which there are illustrated and described specific examples of an apparatus in accordance with the invention.

In the following description of the embodiments reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration the specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized because structural changes may be made without departing from the scope of the present invention.

The present invention provides a method apparatus and program storage device that provides a user mode device interface for enabling software reuse. The user mode device interface allows device interface requests to be sent and received including commands and data structures via socket communication. A device state machine on the client side is implemented in a set of shared functions that can be incorporated by all applications that want to communicate to a particular service provider. The service provider offers the software functions over a user mode device interface via socket communication. The device state machine on the service provider side is embedded in the socket server implementation. The interaction between the state machines on both client and server sides ensures a device interface request is properly handled.

The computer system and the allocation of system resources to the computer system are controlled by operating system . For the purpose of the present discussion it is assumed that operating system is resident within primary memory although those skilled in the art will appreciate that certain infrequently utilized segments of operating system may be swapped out to secondary memory by memory manager . Operating system includes kernel which comprises the lowest layer of operating system that interacts most directly with the computer system . Kernel dispatches kernel threads to processors for execution provides services to device drivers interfacing with hardware within computer system and implements system services memory management network access and the file system utilized by computer system . In addition to kernel primary memory also stores frequently utilized segments of application software . As is well known to those skilled in the art application software communicates with operating system through an Application Programming Interface API .

Computer system also includes bus interface through which multiple nodes can interface to system resources available within computer system . As will be appreciated by those skilled in the art computer system may also include additional hardware coupled to system bus that is not necessary for an understanding of the present invention and is accordingly omitted for simplicity.

Processes that run in kernel mode can directly access system data and hardware and are not restricted like processing running in user mode . Performance sensitive drivers and services run in kernel mode to interact with hardware more efficiently. All components for processes running in kernel mode are fully protected from applications running in user mode . Processes that run in user mode are effectively isolated from processes running in kernel mode and other processes running in user mode .

In a thread for a process running in user mode is characterized as having its own context including registers and memory stack . A user stack is a data structure that includes a series of memory locations and a pointer to the initial location. All processors provide instructions for placing and retrieving values to and from the stack . The user memory is a block of memory that is dedicated to the use of a current process running in user mode . A complete user state of a thread is maintained in user registers .

The kernel operates in its own protected address space and includes its own registers and kernel stack . The kernel maintains the integrity of its own data structures and that of other processes. The kernel stack includes information used by the kernel. Kernel memory is generally shared by all processes but is only accessible in kernel mode . Context switches from one task to another happen on the kernel stack of the current process.

The user mode device interface enables software functions that were previously running in privileged mode to be reused and re implemented. The user mode device interface provides a consistent interface to invoke these functions in both privileged and user modes. The user mode device interface preserves the core of the software functions without any change regardless of whether they are running in privileged or user mode. The user mode device interface also preserves the expectation by these software functions to receive requests from a user mode device interface . The user mode device interface achieves high software reusability as well as quality because these software functions have been tested and verified in previous development projects.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus . The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly to the system or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the system to become coupled to other data processing systems remote printers or storage devices through intervening private or public networks . Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

Accordingly the computer program comprise instructions which when read and executed by the system of causes the system to perform the steps necessary to execute the steps or elements of the present invention

The foregoing description of the embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not with this detailed description but rather by the claims appended hereto.

